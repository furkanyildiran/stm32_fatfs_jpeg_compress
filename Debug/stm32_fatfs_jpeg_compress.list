
stm32_fatfs_jpeg_compress.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000198  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0001a00c  080001a0  080001a0  000011a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00002158  0801a1b0  0801a1b0  0001b1b0  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0801c308  0801c308  0001e074  2**0
                  CONTENTS
  4 .ARM          00000008  0801c308  0801c308  0001d308  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0801c310  0801c310  0001e074  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0801c310  0801c310  0001d310  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  0801c314  0801c314  0001d314  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000074  20000000  0801c318  0001e000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000214  20000074  0801c38c  0001e074  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000288  0801c38c  0001e288  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0001e074  2**0
                  CONTENTS, READONLY
 12 .debug_info   00029820  00000000  00000000  0001e0a4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00005606  00000000  00000000  000478c4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000012d0  00000000  00000000  0004ced0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000e0d  00000000  00000000  0004e1a0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001d305  00000000  00000000  0004efad  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0002b3eb  00000000  00000000  0006c2b2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0008cffc  00000000  00000000  0009769d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  00124699  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00004e68  00000000  00000000  001246dc  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000072  00000000  00000000  00129544  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	@ (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	@ (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	@ (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	20000074 	.word	0x20000074
 80001bc:	00000000 	.word	0x00000000
 80001c0:	0801a194 	.word	0x0801a194

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	@ (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	@ (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	@ (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	20000078 	.word	0x20000078
 80001dc:	0801a194 	.word	0x0801a194

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <__aeabi_drsub>:
 8000280:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 8000284:	e002      	b.n	800028c <__adddf3>
 8000286:	bf00      	nop

08000288 <__aeabi_dsub>:
 8000288:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

0800028c <__adddf3>:
 800028c:	b530      	push	{r4, r5, lr}
 800028e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000292:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000296:	ea94 0f05 	teq	r4, r5
 800029a:	bf08      	it	eq
 800029c:	ea90 0f02 	teqeq	r0, r2
 80002a0:	bf1f      	itttt	ne
 80002a2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002a6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002aa:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ae:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002b2:	f000 80e2 	beq.w	800047a <__adddf3+0x1ee>
 80002b6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ba:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002be:	bfb8      	it	lt
 80002c0:	426d      	neglt	r5, r5
 80002c2:	dd0c      	ble.n	80002de <__adddf3+0x52>
 80002c4:	442c      	add	r4, r5
 80002c6:	ea80 0202 	eor.w	r2, r0, r2
 80002ca:	ea81 0303 	eor.w	r3, r1, r3
 80002ce:	ea82 0000 	eor.w	r0, r2, r0
 80002d2:	ea83 0101 	eor.w	r1, r3, r1
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	2d36      	cmp	r5, #54	@ 0x36
 80002e0:	bf88      	it	hi
 80002e2:	bd30      	pophi	{r4, r5, pc}
 80002e4:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 80002e8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002ec:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 80002f0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80002f4:	d002      	beq.n	80002fc <__adddf3+0x70>
 80002f6:	4240      	negs	r0, r0
 80002f8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002fc:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 8000300:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000304:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000308:	d002      	beq.n	8000310 <__adddf3+0x84>
 800030a:	4252      	negs	r2, r2
 800030c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000310:	ea94 0f05 	teq	r4, r5
 8000314:	f000 80a7 	beq.w	8000466 <__adddf3+0x1da>
 8000318:	f1a4 0401 	sub.w	r4, r4, #1
 800031c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000320:	db0d      	blt.n	800033e <__adddf3+0xb2>
 8000322:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000326:	fa22 f205 	lsr.w	r2, r2, r5
 800032a:	1880      	adds	r0, r0, r2
 800032c:	f141 0100 	adc.w	r1, r1, #0
 8000330:	fa03 f20e 	lsl.w	r2, r3, lr
 8000334:	1880      	adds	r0, r0, r2
 8000336:	fa43 f305 	asr.w	r3, r3, r5
 800033a:	4159      	adcs	r1, r3
 800033c:	e00e      	b.n	800035c <__adddf3+0xd0>
 800033e:	f1a5 0520 	sub.w	r5, r5, #32
 8000342:	f10e 0e20 	add.w	lr, lr, #32
 8000346:	2a01      	cmp	r2, #1
 8000348:	fa03 fc0e 	lsl.w	ip, r3, lr
 800034c:	bf28      	it	cs
 800034e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000352:	fa43 f305 	asr.w	r3, r3, r5
 8000356:	18c0      	adds	r0, r0, r3
 8000358:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800035c:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000360:	d507      	bpl.n	8000372 <__adddf3+0xe6>
 8000362:	f04f 0e00 	mov.w	lr, #0
 8000366:	f1dc 0c00 	rsbs	ip, ip, #0
 800036a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800036e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000372:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 8000376:	d31b      	bcc.n	80003b0 <__adddf3+0x124>
 8000378:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 800037c:	d30c      	bcc.n	8000398 <__adddf3+0x10c>
 800037e:	0849      	lsrs	r1, r1, #1
 8000380:	ea5f 0030 	movs.w	r0, r0, rrx
 8000384:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000388:	f104 0401 	add.w	r4, r4, #1
 800038c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000390:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 8000394:	f080 809a 	bcs.w	80004cc <__adddf3+0x240>
 8000398:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 800039c:	bf08      	it	eq
 800039e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003a2:	f150 0000 	adcs.w	r0, r0, #0
 80003a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003aa:	ea41 0105 	orr.w	r1, r1, r5
 80003ae:	bd30      	pop	{r4, r5, pc}
 80003b0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003b4:	4140      	adcs	r0, r0
 80003b6:	eb41 0101 	adc.w	r1, r1, r1
 80003ba:	3c01      	subs	r4, #1
 80003bc:	bf28      	it	cs
 80003be:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 80003c2:	d2e9      	bcs.n	8000398 <__adddf3+0x10c>
 80003c4:	f091 0f00 	teq	r1, #0
 80003c8:	bf04      	itt	eq
 80003ca:	4601      	moveq	r1, r0
 80003cc:	2000      	moveq	r0, #0
 80003ce:	fab1 f381 	clz	r3, r1
 80003d2:	bf08      	it	eq
 80003d4:	3320      	addeq	r3, #32
 80003d6:	f1a3 030b 	sub.w	r3, r3, #11
 80003da:	f1b3 0220 	subs.w	r2, r3, #32
 80003de:	da0c      	bge.n	80003fa <__adddf3+0x16e>
 80003e0:	320c      	adds	r2, #12
 80003e2:	dd08      	ble.n	80003f6 <__adddf3+0x16a>
 80003e4:	f102 0c14 	add.w	ip, r2, #20
 80003e8:	f1c2 020c 	rsb	r2, r2, #12
 80003ec:	fa01 f00c 	lsl.w	r0, r1, ip
 80003f0:	fa21 f102 	lsr.w	r1, r1, r2
 80003f4:	e00c      	b.n	8000410 <__adddf3+0x184>
 80003f6:	f102 0214 	add.w	r2, r2, #20
 80003fa:	bfd8      	it	le
 80003fc:	f1c2 0c20 	rsble	ip, r2, #32
 8000400:	fa01 f102 	lsl.w	r1, r1, r2
 8000404:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000408:	bfdc      	itt	le
 800040a:	ea41 010c 	orrle.w	r1, r1, ip
 800040e:	4090      	lslle	r0, r2
 8000410:	1ae4      	subs	r4, r4, r3
 8000412:	bfa2      	ittt	ge
 8000414:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000418:	4329      	orrge	r1, r5
 800041a:	bd30      	popge	{r4, r5, pc}
 800041c:	ea6f 0404 	mvn.w	r4, r4
 8000420:	3c1f      	subs	r4, #31
 8000422:	da1c      	bge.n	800045e <__adddf3+0x1d2>
 8000424:	340c      	adds	r4, #12
 8000426:	dc0e      	bgt.n	8000446 <__adddf3+0x1ba>
 8000428:	f104 0414 	add.w	r4, r4, #20
 800042c:	f1c4 0220 	rsb	r2, r4, #32
 8000430:	fa20 f004 	lsr.w	r0, r0, r4
 8000434:	fa01 f302 	lsl.w	r3, r1, r2
 8000438:	ea40 0003 	orr.w	r0, r0, r3
 800043c:	fa21 f304 	lsr.w	r3, r1, r4
 8000440:	ea45 0103 	orr.w	r1, r5, r3
 8000444:	bd30      	pop	{r4, r5, pc}
 8000446:	f1c4 040c 	rsb	r4, r4, #12
 800044a:	f1c4 0220 	rsb	r2, r4, #32
 800044e:	fa20 f002 	lsr.w	r0, r0, r2
 8000452:	fa01 f304 	lsl.w	r3, r1, r4
 8000456:	ea40 0003 	orr.w	r0, r0, r3
 800045a:	4629      	mov	r1, r5
 800045c:	bd30      	pop	{r4, r5, pc}
 800045e:	fa21 f004 	lsr.w	r0, r1, r4
 8000462:	4629      	mov	r1, r5
 8000464:	bd30      	pop	{r4, r5, pc}
 8000466:	f094 0f00 	teq	r4, #0
 800046a:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 800046e:	bf06      	itte	eq
 8000470:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 8000474:	3401      	addeq	r4, #1
 8000476:	3d01      	subne	r5, #1
 8000478:	e74e      	b.n	8000318 <__adddf3+0x8c>
 800047a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800047e:	bf18      	it	ne
 8000480:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000484:	d029      	beq.n	80004da <__adddf3+0x24e>
 8000486:	ea94 0f05 	teq	r4, r5
 800048a:	bf08      	it	eq
 800048c:	ea90 0f02 	teqeq	r0, r2
 8000490:	d005      	beq.n	800049e <__adddf3+0x212>
 8000492:	ea54 0c00 	orrs.w	ip, r4, r0
 8000496:	bf04      	itt	eq
 8000498:	4619      	moveq	r1, r3
 800049a:	4610      	moveq	r0, r2
 800049c:	bd30      	pop	{r4, r5, pc}
 800049e:	ea91 0f03 	teq	r1, r3
 80004a2:	bf1e      	ittt	ne
 80004a4:	2100      	movne	r1, #0
 80004a6:	2000      	movne	r0, #0
 80004a8:	bd30      	popne	{r4, r5, pc}
 80004aa:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ae:	d105      	bne.n	80004bc <__adddf3+0x230>
 80004b0:	0040      	lsls	r0, r0, #1
 80004b2:	4149      	adcs	r1, r1
 80004b4:	bf28      	it	cs
 80004b6:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 80004ba:	bd30      	pop	{r4, r5, pc}
 80004bc:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 80004c0:	bf3c      	itt	cc
 80004c2:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 80004c6:	bd30      	popcc	{r4, r5, pc}
 80004c8:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80004cc:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 80004d0:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 80004d4:	f04f 0000 	mov.w	r0, #0
 80004d8:	bd30      	pop	{r4, r5, pc}
 80004da:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004de:	bf1a      	itte	ne
 80004e0:	4619      	movne	r1, r3
 80004e2:	4610      	movne	r0, r2
 80004e4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004e8:	bf1c      	itt	ne
 80004ea:	460b      	movne	r3, r1
 80004ec:	4602      	movne	r2, r0
 80004ee:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80004f2:	bf06      	itte	eq
 80004f4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80004f8:	ea91 0f03 	teqeq	r1, r3
 80004fc:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 8000500:	bd30      	pop	{r4, r5, pc}
 8000502:	bf00      	nop

08000504 <__aeabi_ui2d>:
 8000504:	f090 0f00 	teq	r0, #0
 8000508:	bf04      	itt	eq
 800050a:	2100      	moveq	r1, #0
 800050c:	4770      	bxeq	lr
 800050e:	b530      	push	{r4, r5, lr}
 8000510:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000514:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000518:	f04f 0500 	mov.w	r5, #0
 800051c:	f04f 0100 	mov.w	r1, #0
 8000520:	e750      	b.n	80003c4 <__adddf3+0x138>
 8000522:	bf00      	nop

08000524 <__aeabi_i2d>:
 8000524:	f090 0f00 	teq	r0, #0
 8000528:	bf04      	itt	eq
 800052a:	2100      	moveq	r1, #0
 800052c:	4770      	bxeq	lr
 800052e:	b530      	push	{r4, r5, lr}
 8000530:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000534:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000538:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 800053c:	bf48      	it	mi
 800053e:	4240      	negmi	r0, r0
 8000540:	f04f 0100 	mov.w	r1, #0
 8000544:	e73e      	b.n	80003c4 <__adddf3+0x138>
 8000546:	bf00      	nop

08000548 <__aeabi_f2d>:
 8000548:	0042      	lsls	r2, r0, #1
 800054a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800054e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000552:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000556:	bf1f      	itttt	ne
 8000558:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 800055c:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 8000560:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 8000564:	4770      	bxne	lr
 8000566:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 800056a:	bf08      	it	eq
 800056c:	4770      	bxeq	lr
 800056e:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 8000572:	bf04      	itt	eq
 8000574:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 8000578:	4770      	bxeq	lr
 800057a:	b530      	push	{r4, r5, lr}
 800057c:	f44f 7460 	mov.w	r4, #896	@ 0x380
 8000580:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000584:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000588:	e71c      	b.n	80003c4 <__adddf3+0x138>
 800058a:	bf00      	nop

0800058c <__aeabi_ul2d>:
 800058c:	ea50 0201 	orrs.w	r2, r0, r1
 8000590:	bf08      	it	eq
 8000592:	4770      	bxeq	lr
 8000594:	b530      	push	{r4, r5, lr}
 8000596:	f04f 0500 	mov.w	r5, #0
 800059a:	e00a      	b.n	80005b2 <__aeabi_l2d+0x16>

0800059c <__aeabi_l2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 80005aa:	d502      	bpl.n	80005b2 <__aeabi_l2d+0x16>
 80005ac:	4240      	negs	r0, r0
 80005ae:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005b2:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80005b6:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80005ba:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005be:	f43f aed8 	beq.w	8000372 <__adddf3+0xe6>
 80005c2:	f04f 0203 	mov.w	r2, #3
 80005c6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ca:	bf18      	it	ne
 80005cc:	3203      	addne	r2, #3
 80005ce:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005d2:	bf18      	it	ne
 80005d4:	3203      	addne	r2, #3
 80005d6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005da:	f1c2 0320 	rsb	r3, r2, #32
 80005de:	fa00 fc03 	lsl.w	ip, r0, r3
 80005e2:	fa20 f002 	lsr.w	r0, r0, r2
 80005e6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005ea:	ea40 000e 	orr.w	r0, r0, lr
 80005ee:	fa21 f102 	lsr.w	r1, r1, r2
 80005f2:	4414      	add	r4, r2
 80005f4:	e6bd      	b.n	8000372 <__adddf3+0xe6>
 80005f6:	bf00      	nop

080005f8 <__aeabi_dmul>:
 80005f8:	b570      	push	{r4, r5, r6, lr}
 80005fa:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 80005fe:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000602:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000606:	bf1d      	ittte	ne
 8000608:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800060c:	ea94 0f0c 	teqne	r4, ip
 8000610:	ea95 0f0c 	teqne	r5, ip
 8000614:	f000 f8de 	bleq	80007d4 <__aeabi_dmul+0x1dc>
 8000618:	442c      	add	r4, r5
 800061a:	ea81 0603 	eor.w	r6, r1, r3
 800061e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000622:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000626:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800062a:	bf18      	it	ne
 800062c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000630:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000634:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8000638:	d038      	beq.n	80006ac <__aeabi_dmul+0xb4>
 800063a:	fba0 ce02 	umull	ip, lr, r0, r2
 800063e:	f04f 0500 	mov.w	r5, #0
 8000642:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000646:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 800064a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800064e:	f04f 0600 	mov.w	r6, #0
 8000652:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000656:	f09c 0f00 	teq	ip, #0
 800065a:	bf18      	it	ne
 800065c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000660:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 8000664:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 8000668:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 800066c:	d204      	bcs.n	8000678 <__aeabi_dmul+0x80>
 800066e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000672:	416d      	adcs	r5, r5
 8000674:	eb46 0606 	adc.w	r6, r6, r6
 8000678:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800067c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000680:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000684:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000688:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800068c:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 8000690:	bf88      	it	hi
 8000692:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000696:	d81e      	bhi.n	80006d6 <__aeabi_dmul+0xde>
 8000698:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 800069c:	bf08      	it	eq
 800069e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006a2:	f150 0000 	adcs.w	r0, r0, #0
 80006a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006aa:	bd70      	pop	{r4, r5, r6, pc}
 80006ac:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 80006b0:	ea46 0101 	orr.w	r1, r6, r1
 80006b4:	ea40 0002 	orr.w	r0, r0, r2
 80006b8:	ea81 0103 	eor.w	r1, r1, r3
 80006bc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006c0:	bfc2      	ittt	gt
 80006c2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006c6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006ca:	bd70      	popgt	{r4, r5, r6, pc}
 80006cc:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80006d0:	f04f 0e00 	mov.w	lr, #0
 80006d4:	3c01      	subs	r4, #1
 80006d6:	f300 80ab 	bgt.w	8000830 <__aeabi_dmul+0x238>
 80006da:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 80006de:	bfde      	ittt	le
 80006e0:	2000      	movle	r0, #0
 80006e2:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 80006e6:	bd70      	pople	{r4, r5, r6, pc}
 80006e8:	f1c4 0400 	rsb	r4, r4, #0
 80006ec:	3c20      	subs	r4, #32
 80006ee:	da35      	bge.n	800075c <__aeabi_dmul+0x164>
 80006f0:	340c      	adds	r4, #12
 80006f2:	dc1b      	bgt.n	800072c <__aeabi_dmul+0x134>
 80006f4:	f104 0414 	add.w	r4, r4, #20
 80006f8:	f1c4 0520 	rsb	r5, r4, #32
 80006fc:	fa00 f305 	lsl.w	r3, r0, r5
 8000700:	fa20 f004 	lsr.w	r0, r0, r4
 8000704:	fa01 f205 	lsl.w	r2, r1, r5
 8000708:	ea40 0002 	orr.w	r0, r0, r2
 800070c:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 8000710:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000714:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000718:	fa21 f604 	lsr.w	r6, r1, r4
 800071c:	eb42 0106 	adc.w	r1, r2, r6
 8000720:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000724:	bf08      	it	eq
 8000726:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800072a:	bd70      	pop	{r4, r5, r6, pc}
 800072c:	f1c4 040c 	rsb	r4, r4, #12
 8000730:	f1c4 0520 	rsb	r5, r4, #32
 8000734:	fa00 f304 	lsl.w	r3, r0, r4
 8000738:	fa20 f005 	lsr.w	r0, r0, r5
 800073c:	fa01 f204 	lsl.w	r2, r1, r4
 8000740:	ea40 0002 	orr.w	r0, r0, r2
 8000744:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000748:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800074c:	f141 0100 	adc.w	r1, r1, #0
 8000750:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000754:	bf08      	it	eq
 8000756:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800075a:	bd70      	pop	{r4, r5, r6, pc}
 800075c:	f1c4 0520 	rsb	r5, r4, #32
 8000760:	fa00 f205 	lsl.w	r2, r0, r5
 8000764:	ea4e 0e02 	orr.w	lr, lr, r2
 8000768:	fa20 f304 	lsr.w	r3, r0, r4
 800076c:	fa01 f205 	lsl.w	r2, r1, r5
 8000770:	ea43 0302 	orr.w	r3, r3, r2
 8000774:	fa21 f004 	lsr.w	r0, r1, r4
 8000778:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 800077c:	fa21 f204 	lsr.w	r2, r1, r4
 8000780:	ea20 0002 	bic.w	r0, r0, r2
 8000784:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000788:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800078c:	bf08      	it	eq
 800078e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000792:	bd70      	pop	{r4, r5, r6, pc}
 8000794:	f094 0f00 	teq	r4, #0
 8000798:	d10f      	bne.n	80007ba <__aeabi_dmul+0x1c2>
 800079a:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 800079e:	0040      	lsls	r0, r0, #1
 80007a0:	eb41 0101 	adc.w	r1, r1, r1
 80007a4:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80007a8:	bf08      	it	eq
 80007aa:	3c01      	subeq	r4, #1
 80007ac:	d0f7      	beq.n	800079e <__aeabi_dmul+0x1a6>
 80007ae:	ea41 0106 	orr.w	r1, r1, r6
 80007b2:	f095 0f00 	teq	r5, #0
 80007b6:	bf18      	it	ne
 80007b8:	4770      	bxne	lr
 80007ba:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 80007be:	0052      	lsls	r2, r2, #1
 80007c0:	eb43 0303 	adc.w	r3, r3, r3
 80007c4:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 80007c8:	bf08      	it	eq
 80007ca:	3d01      	subeq	r5, #1
 80007cc:	d0f7      	beq.n	80007be <__aeabi_dmul+0x1c6>
 80007ce:	ea43 0306 	orr.w	r3, r3, r6
 80007d2:	4770      	bx	lr
 80007d4:	ea94 0f0c 	teq	r4, ip
 80007d8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007dc:	bf18      	it	ne
 80007de:	ea95 0f0c 	teqne	r5, ip
 80007e2:	d00c      	beq.n	80007fe <__aeabi_dmul+0x206>
 80007e4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007e8:	bf18      	it	ne
 80007ea:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007ee:	d1d1      	bne.n	8000794 <__aeabi_dmul+0x19c>
 80007f0:	ea81 0103 	eor.w	r1, r1, r3
 80007f4:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80007f8:	f04f 0000 	mov.w	r0, #0
 80007fc:	bd70      	pop	{r4, r5, r6, pc}
 80007fe:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000802:	bf06      	itte	eq
 8000804:	4610      	moveq	r0, r2
 8000806:	4619      	moveq	r1, r3
 8000808:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800080c:	d019      	beq.n	8000842 <__aeabi_dmul+0x24a>
 800080e:	ea94 0f0c 	teq	r4, ip
 8000812:	d102      	bne.n	800081a <__aeabi_dmul+0x222>
 8000814:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000818:	d113      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800081a:	ea95 0f0c 	teq	r5, ip
 800081e:	d105      	bne.n	800082c <__aeabi_dmul+0x234>
 8000820:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000824:	bf1c      	itt	ne
 8000826:	4610      	movne	r0, r2
 8000828:	4619      	movne	r1, r3
 800082a:	d10a      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800082c:	ea81 0103 	eor.w	r1, r1, r3
 8000830:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000834:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000838:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800083c:	f04f 0000 	mov.w	r0, #0
 8000840:	bd70      	pop	{r4, r5, r6, pc}
 8000842:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000846:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 800084a:	bd70      	pop	{r4, r5, r6, pc}

0800084c <__aeabi_ddiv>:
 800084c:	b570      	push	{r4, r5, r6, lr}
 800084e:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000852:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000856:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800085a:	bf1d      	ittte	ne
 800085c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000860:	ea94 0f0c 	teqne	r4, ip
 8000864:	ea95 0f0c 	teqne	r5, ip
 8000868:	f000 f8a7 	bleq	80009ba <__aeabi_ddiv+0x16e>
 800086c:	eba4 0405 	sub.w	r4, r4, r5
 8000870:	ea81 0e03 	eor.w	lr, r1, r3
 8000874:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000878:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800087c:	f000 8088 	beq.w	8000990 <__aeabi_ddiv+0x144>
 8000880:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000884:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 8000888:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800088c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000890:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000894:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000898:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800089c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008a0:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 80008a4:	429d      	cmp	r5, r3
 80008a6:	bf08      	it	eq
 80008a8:	4296      	cmpeq	r6, r2
 80008aa:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 80008ae:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 80008b2:	d202      	bcs.n	80008ba <__aeabi_ddiv+0x6e>
 80008b4:	085b      	lsrs	r3, r3, #1
 80008b6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ba:	1ab6      	subs	r6, r6, r2
 80008bc:	eb65 0503 	sbc.w	r5, r5, r3
 80008c0:	085b      	lsrs	r3, r3, #1
 80008c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008c6:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 80008ca:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 80008ce:	ebb6 0e02 	subs.w	lr, r6, r2
 80008d2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008d6:	bf22      	ittt	cs
 80008d8:	1ab6      	subcs	r6, r6, r2
 80008da:	4675      	movcs	r5, lr
 80008dc:	ea40 000c 	orrcs.w	r0, r0, ip
 80008e0:	085b      	lsrs	r3, r3, #1
 80008e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008e6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008ea:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008ee:	bf22      	ittt	cs
 80008f0:	1ab6      	subcs	r6, r6, r2
 80008f2:	4675      	movcs	r5, lr
 80008f4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80008f8:	085b      	lsrs	r3, r3, #1
 80008fa:	ea4f 0232 	mov.w	r2, r2, rrx
 80008fe:	ebb6 0e02 	subs.w	lr, r6, r2
 8000902:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000906:	bf22      	ittt	cs
 8000908:	1ab6      	subcs	r6, r6, r2
 800090a:	4675      	movcs	r5, lr
 800090c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	ebb6 0e02 	subs.w	lr, r6, r2
 800091a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800091e:	bf22      	ittt	cs
 8000920:	1ab6      	subcs	r6, r6, r2
 8000922:	4675      	movcs	r5, lr
 8000924:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000928:	ea55 0e06 	orrs.w	lr, r5, r6
 800092c:	d018      	beq.n	8000960 <__aeabi_ddiv+0x114>
 800092e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000932:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000936:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800093a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800093e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000942:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000946:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800094a:	d1c0      	bne.n	80008ce <__aeabi_ddiv+0x82>
 800094c:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000950:	d10b      	bne.n	800096a <__aeabi_ddiv+0x11e>
 8000952:	ea41 0100 	orr.w	r1, r1, r0
 8000956:	f04f 0000 	mov.w	r0, #0
 800095a:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 800095e:	e7b6      	b.n	80008ce <__aeabi_ddiv+0x82>
 8000960:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000964:	bf04      	itt	eq
 8000966:	4301      	orreq	r1, r0
 8000968:	2000      	moveq	r0, #0
 800096a:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 800096e:	bf88      	it	hi
 8000970:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000974:	f63f aeaf 	bhi.w	80006d6 <__aeabi_dmul+0xde>
 8000978:	ebb5 0c03 	subs.w	ip, r5, r3
 800097c:	bf04      	itt	eq
 800097e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000982:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000986:	f150 0000 	adcs.w	r0, r0, #0
 800098a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800098e:	bd70      	pop	{r4, r5, r6, pc}
 8000990:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 8000994:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000998:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800099c:	bfc2      	ittt	gt
 800099e:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009a2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009a6:	bd70      	popgt	{r4, r5, r6, pc}
 80009a8:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80009ac:	f04f 0e00 	mov.w	lr, #0
 80009b0:	3c01      	subs	r4, #1
 80009b2:	e690      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009b4:	ea45 0e06 	orr.w	lr, r5, r6
 80009b8:	e68d      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009ba:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009be:	ea94 0f0c 	teq	r4, ip
 80009c2:	bf08      	it	eq
 80009c4:	ea95 0f0c 	teqeq	r5, ip
 80009c8:	f43f af3b 	beq.w	8000842 <__aeabi_dmul+0x24a>
 80009cc:	ea94 0f0c 	teq	r4, ip
 80009d0:	d10a      	bne.n	80009e8 <__aeabi_ddiv+0x19c>
 80009d2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009d6:	f47f af34 	bne.w	8000842 <__aeabi_dmul+0x24a>
 80009da:	ea95 0f0c 	teq	r5, ip
 80009de:	f47f af25 	bne.w	800082c <__aeabi_dmul+0x234>
 80009e2:	4610      	mov	r0, r2
 80009e4:	4619      	mov	r1, r3
 80009e6:	e72c      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009e8:	ea95 0f0c 	teq	r5, ip
 80009ec:	d106      	bne.n	80009fc <__aeabi_ddiv+0x1b0>
 80009ee:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80009f2:	f43f aefd 	beq.w	80007f0 <__aeabi_dmul+0x1f8>
 80009f6:	4610      	mov	r0, r2
 80009f8:	4619      	mov	r1, r3
 80009fa:	e722      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009fc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a00:	bf18      	it	ne
 8000a02:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a06:	f47f aec5 	bne.w	8000794 <__aeabi_dmul+0x19c>
 8000a0a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a0e:	f47f af0d 	bne.w	800082c <__aeabi_dmul+0x234>
 8000a12:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a16:	f47f aeeb 	bne.w	80007f0 <__aeabi_dmul+0x1f8>
 8000a1a:	e712      	b.n	8000842 <__aeabi_dmul+0x24a>

08000a1c <__aeabi_d2f>:
 8000a1c:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000a20:	f1b2 43e0 	subs.w	r3, r2, #1879048192	@ 0x70000000
 8000a24:	bf24      	itt	cs
 8000a26:	f5b3 1c00 	subscs.w	ip, r3, #2097152	@ 0x200000
 8000a2a:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	@ 0x1fc00000
 8000a2e:	d90d      	bls.n	8000a4c <__aeabi_d2f+0x30>
 8000a30:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8000a34:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000a38:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000a3c:	f1b2 4f00 	cmp.w	r2, #2147483648	@ 0x80000000
 8000a40:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000a44:	bf08      	it	eq
 8000a46:	f020 0001 	biceq.w	r0, r0, #1
 8000a4a:	4770      	bx	lr
 8000a4c:	f011 4f80 	tst.w	r1, #1073741824	@ 0x40000000
 8000a50:	d121      	bne.n	8000a96 <__aeabi_d2f+0x7a>
 8000a52:	f113 7238 	adds.w	r2, r3, #48234496	@ 0x2e00000
 8000a56:	bfbc      	itt	lt
 8000a58:	f001 4000 	andlt.w	r0, r1, #2147483648	@ 0x80000000
 8000a5c:	4770      	bxlt	lr
 8000a5e:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000a62:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000a66:	f1c2 0218 	rsb	r2, r2, #24
 8000a6a:	f1c2 0c20 	rsb	ip, r2, #32
 8000a6e:	fa10 f30c 	lsls.w	r3, r0, ip
 8000a72:	fa20 f002 	lsr.w	r0, r0, r2
 8000a76:	bf18      	it	ne
 8000a78:	f040 0001 	orrne.w	r0, r0, #1
 8000a7c:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000a80:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000a84:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000a88:	ea40 000c 	orr.w	r0, r0, ip
 8000a8c:	fa23 f302 	lsr.w	r3, r3, r2
 8000a90:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000a94:	e7cc      	b.n	8000a30 <__aeabi_d2f+0x14>
 8000a96:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000a9a:	d107      	bne.n	8000aac <__aeabi_d2f+0x90>
 8000a9c:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000aa0:	bf1e      	ittt	ne
 8000aa2:	f04f 40fe 	movne.w	r0, #2130706432	@ 0x7f000000
 8000aa6:	f440 0040 	orrne.w	r0, r0, #12582912	@ 0xc00000
 8000aaa:	4770      	bxne	lr
 8000aac:	f001 4000 	and.w	r0, r1, #2147483648	@ 0x80000000
 8000ab0:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 8000ab4:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000ab8:	4770      	bx	lr
 8000aba:	bf00      	nop

08000abc <__aeabi_uldivmod>:
 8000abc:	b953      	cbnz	r3, 8000ad4 <__aeabi_uldivmod+0x18>
 8000abe:	b94a      	cbnz	r2, 8000ad4 <__aeabi_uldivmod+0x18>
 8000ac0:	2900      	cmp	r1, #0
 8000ac2:	bf08      	it	eq
 8000ac4:	2800      	cmpeq	r0, #0
 8000ac6:	bf1c      	itt	ne
 8000ac8:	f04f 31ff 	movne.w	r1, #4294967295
 8000acc:	f04f 30ff 	movne.w	r0, #4294967295
 8000ad0:	f000 b96a 	b.w	8000da8 <__aeabi_idiv0>
 8000ad4:	f1ad 0c08 	sub.w	ip, sp, #8
 8000ad8:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000adc:	f000 f806 	bl	8000aec <__udivmoddi4>
 8000ae0:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000ae4:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000ae8:	b004      	add	sp, #16
 8000aea:	4770      	bx	lr

08000aec <__udivmoddi4>:
 8000aec:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000af0:	9d08      	ldr	r5, [sp, #32]
 8000af2:	460c      	mov	r4, r1
 8000af4:	2b00      	cmp	r3, #0
 8000af6:	d14e      	bne.n	8000b96 <__udivmoddi4+0xaa>
 8000af8:	4694      	mov	ip, r2
 8000afa:	458c      	cmp	ip, r1
 8000afc:	4686      	mov	lr, r0
 8000afe:	fab2 f282 	clz	r2, r2
 8000b02:	d962      	bls.n	8000bca <__udivmoddi4+0xde>
 8000b04:	b14a      	cbz	r2, 8000b1a <__udivmoddi4+0x2e>
 8000b06:	f1c2 0320 	rsb	r3, r2, #32
 8000b0a:	4091      	lsls	r1, r2
 8000b0c:	fa20 f303 	lsr.w	r3, r0, r3
 8000b10:	fa0c fc02 	lsl.w	ip, ip, r2
 8000b14:	4319      	orrs	r1, r3
 8000b16:	fa00 fe02 	lsl.w	lr, r0, r2
 8000b1a:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000b1e:	fa1f f68c 	uxth.w	r6, ip
 8000b22:	fbb1 f4f7 	udiv	r4, r1, r7
 8000b26:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000b2a:	fb07 1114 	mls	r1, r7, r4, r1
 8000b2e:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000b32:	fb04 f106 	mul.w	r1, r4, r6
 8000b36:	4299      	cmp	r1, r3
 8000b38:	d90a      	bls.n	8000b50 <__udivmoddi4+0x64>
 8000b3a:	eb1c 0303 	adds.w	r3, ip, r3
 8000b3e:	f104 30ff 	add.w	r0, r4, #4294967295
 8000b42:	f080 8112 	bcs.w	8000d6a <__udivmoddi4+0x27e>
 8000b46:	4299      	cmp	r1, r3
 8000b48:	f240 810f 	bls.w	8000d6a <__udivmoddi4+0x27e>
 8000b4c:	3c02      	subs	r4, #2
 8000b4e:	4463      	add	r3, ip
 8000b50:	1a59      	subs	r1, r3, r1
 8000b52:	fa1f f38e 	uxth.w	r3, lr
 8000b56:	fbb1 f0f7 	udiv	r0, r1, r7
 8000b5a:	fb07 1110 	mls	r1, r7, r0, r1
 8000b5e:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000b62:	fb00 f606 	mul.w	r6, r0, r6
 8000b66:	429e      	cmp	r6, r3
 8000b68:	d90a      	bls.n	8000b80 <__udivmoddi4+0x94>
 8000b6a:	eb1c 0303 	adds.w	r3, ip, r3
 8000b6e:	f100 31ff 	add.w	r1, r0, #4294967295
 8000b72:	f080 80fc 	bcs.w	8000d6e <__udivmoddi4+0x282>
 8000b76:	429e      	cmp	r6, r3
 8000b78:	f240 80f9 	bls.w	8000d6e <__udivmoddi4+0x282>
 8000b7c:	4463      	add	r3, ip
 8000b7e:	3802      	subs	r0, #2
 8000b80:	1b9b      	subs	r3, r3, r6
 8000b82:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 8000b86:	2100      	movs	r1, #0
 8000b88:	b11d      	cbz	r5, 8000b92 <__udivmoddi4+0xa6>
 8000b8a:	40d3      	lsrs	r3, r2
 8000b8c:	2200      	movs	r2, #0
 8000b8e:	e9c5 3200 	strd	r3, r2, [r5]
 8000b92:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000b96:	428b      	cmp	r3, r1
 8000b98:	d905      	bls.n	8000ba6 <__udivmoddi4+0xba>
 8000b9a:	b10d      	cbz	r5, 8000ba0 <__udivmoddi4+0xb4>
 8000b9c:	e9c5 0100 	strd	r0, r1, [r5]
 8000ba0:	2100      	movs	r1, #0
 8000ba2:	4608      	mov	r0, r1
 8000ba4:	e7f5      	b.n	8000b92 <__udivmoddi4+0xa6>
 8000ba6:	fab3 f183 	clz	r1, r3
 8000baa:	2900      	cmp	r1, #0
 8000bac:	d146      	bne.n	8000c3c <__udivmoddi4+0x150>
 8000bae:	42a3      	cmp	r3, r4
 8000bb0:	d302      	bcc.n	8000bb8 <__udivmoddi4+0xcc>
 8000bb2:	4290      	cmp	r0, r2
 8000bb4:	f0c0 80f0 	bcc.w	8000d98 <__udivmoddi4+0x2ac>
 8000bb8:	1a86      	subs	r6, r0, r2
 8000bba:	eb64 0303 	sbc.w	r3, r4, r3
 8000bbe:	2001      	movs	r0, #1
 8000bc0:	2d00      	cmp	r5, #0
 8000bc2:	d0e6      	beq.n	8000b92 <__udivmoddi4+0xa6>
 8000bc4:	e9c5 6300 	strd	r6, r3, [r5]
 8000bc8:	e7e3      	b.n	8000b92 <__udivmoddi4+0xa6>
 8000bca:	2a00      	cmp	r2, #0
 8000bcc:	f040 8090 	bne.w	8000cf0 <__udivmoddi4+0x204>
 8000bd0:	eba1 040c 	sub.w	r4, r1, ip
 8000bd4:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000bd8:	fa1f f78c 	uxth.w	r7, ip
 8000bdc:	2101      	movs	r1, #1
 8000bde:	fbb4 f6f8 	udiv	r6, r4, r8
 8000be2:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000be6:	fb08 4416 	mls	r4, r8, r6, r4
 8000bea:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000bee:	fb07 f006 	mul.w	r0, r7, r6
 8000bf2:	4298      	cmp	r0, r3
 8000bf4:	d908      	bls.n	8000c08 <__udivmoddi4+0x11c>
 8000bf6:	eb1c 0303 	adds.w	r3, ip, r3
 8000bfa:	f106 34ff 	add.w	r4, r6, #4294967295
 8000bfe:	d202      	bcs.n	8000c06 <__udivmoddi4+0x11a>
 8000c00:	4298      	cmp	r0, r3
 8000c02:	f200 80cd 	bhi.w	8000da0 <__udivmoddi4+0x2b4>
 8000c06:	4626      	mov	r6, r4
 8000c08:	1a1c      	subs	r4, r3, r0
 8000c0a:	fa1f f38e 	uxth.w	r3, lr
 8000c0e:	fbb4 f0f8 	udiv	r0, r4, r8
 8000c12:	fb08 4410 	mls	r4, r8, r0, r4
 8000c16:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000c1a:	fb00 f707 	mul.w	r7, r0, r7
 8000c1e:	429f      	cmp	r7, r3
 8000c20:	d908      	bls.n	8000c34 <__udivmoddi4+0x148>
 8000c22:	eb1c 0303 	adds.w	r3, ip, r3
 8000c26:	f100 34ff 	add.w	r4, r0, #4294967295
 8000c2a:	d202      	bcs.n	8000c32 <__udivmoddi4+0x146>
 8000c2c:	429f      	cmp	r7, r3
 8000c2e:	f200 80b0 	bhi.w	8000d92 <__udivmoddi4+0x2a6>
 8000c32:	4620      	mov	r0, r4
 8000c34:	1bdb      	subs	r3, r3, r7
 8000c36:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000c3a:	e7a5      	b.n	8000b88 <__udivmoddi4+0x9c>
 8000c3c:	f1c1 0620 	rsb	r6, r1, #32
 8000c40:	408b      	lsls	r3, r1
 8000c42:	fa22 f706 	lsr.w	r7, r2, r6
 8000c46:	431f      	orrs	r7, r3
 8000c48:	fa20 fc06 	lsr.w	ip, r0, r6
 8000c4c:	fa04 f301 	lsl.w	r3, r4, r1
 8000c50:	ea43 030c 	orr.w	r3, r3, ip
 8000c54:	40f4      	lsrs	r4, r6
 8000c56:	fa00 f801 	lsl.w	r8, r0, r1
 8000c5a:	0c38      	lsrs	r0, r7, #16
 8000c5c:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000c60:	fbb4 fef0 	udiv	lr, r4, r0
 8000c64:	fa1f fc87 	uxth.w	ip, r7
 8000c68:	fb00 441e 	mls	r4, r0, lr, r4
 8000c6c:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000c70:	fb0e f90c 	mul.w	r9, lr, ip
 8000c74:	45a1      	cmp	r9, r4
 8000c76:	fa02 f201 	lsl.w	r2, r2, r1
 8000c7a:	d90a      	bls.n	8000c92 <__udivmoddi4+0x1a6>
 8000c7c:	193c      	adds	r4, r7, r4
 8000c7e:	f10e 3aff 	add.w	sl, lr, #4294967295
 8000c82:	f080 8084 	bcs.w	8000d8e <__udivmoddi4+0x2a2>
 8000c86:	45a1      	cmp	r9, r4
 8000c88:	f240 8081 	bls.w	8000d8e <__udivmoddi4+0x2a2>
 8000c8c:	f1ae 0e02 	sub.w	lr, lr, #2
 8000c90:	443c      	add	r4, r7
 8000c92:	eba4 0409 	sub.w	r4, r4, r9
 8000c96:	fa1f f983 	uxth.w	r9, r3
 8000c9a:	fbb4 f3f0 	udiv	r3, r4, r0
 8000c9e:	fb00 4413 	mls	r4, r0, r3, r4
 8000ca2:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000ca6:	fb03 fc0c 	mul.w	ip, r3, ip
 8000caa:	45a4      	cmp	ip, r4
 8000cac:	d907      	bls.n	8000cbe <__udivmoddi4+0x1d2>
 8000cae:	193c      	adds	r4, r7, r4
 8000cb0:	f103 30ff 	add.w	r0, r3, #4294967295
 8000cb4:	d267      	bcs.n	8000d86 <__udivmoddi4+0x29a>
 8000cb6:	45a4      	cmp	ip, r4
 8000cb8:	d965      	bls.n	8000d86 <__udivmoddi4+0x29a>
 8000cba:	3b02      	subs	r3, #2
 8000cbc:	443c      	add	r4, r7
 8000cbe:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 8000cc2:	fba0 9302 	umull	r9, r3, r0, r2
 8000cc6:	eba4 040c 	sub.w	r4, r4, ip
 8000cca:	429c      	cmp	r4, r3
 8000ccc:	46ce      	mov	lr, r9
 8000cce:	469c      	mov	ip, r3
 8000cd0:	d351      	bcc.n	8000d76 <__udivmoddi4+0x28a>
 8000cd2:	d04e      	beq.n	8000d72 <__udivmoddi4+0x286>
 8000cd4:	b155      	cbz	r5, 8000cec <__udivmoddi4+0x200>
 8000cd6:	ebb8 030e 	subs.w	r3, r8, lr
 8000cda:	eb64 040c 	sbc.w	r4, r4, ip
 8000cde:	fa04 f606 	lsl.w	r6, r4, r6
 8000ce2:	40cb      	lsrs	r3, r1
 8000ce4:	431e      	orrs	r6, r3
 8000ce6:	40cc      	lsrs	r4, r1
 8000ce8:	e9c5 6400 	strd	r6, r4, [r5]
 8000cec:	2100      	movs	r1, #0
 8000cee:	e750      	b.n	8000b92 <__udivmoddi4+0xa6>
 8000cf0:	f1c2 0320 	rsb	r3, r2, #32
 8000cf4:	fa20 f103 	lsr.w	r1, r0, r3
 8000cf8:	fa0c fc02 	lsl.w	ip, ip, r2
 8000cfc:	fa24 f303 	lsr.w	r3, r4, r3
 8000d00:	4094      	lsls	r4, r2
 8000d02:	430c      	orrs	r4, r1
 8000d04:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000d08:	fa00 fe02 	lsl.w	lr, r0, r2
 8000d0c:	fa1f f78c 	uxth.w	r7, ip
 8000d10:	fbb3 f0f8 	udiv	r0, r3, r8
 8000d14:	fb08 3110 	mls	r1, r8, r0, r3
 8000d18:	0c23      	lsrs	r3, r4, #16
 8000d1a:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000d1e:	fb00 f107 	mul.w	r1, r0, r7
 8000d22:	4299      	cmp	r1, r3
 8000d24:	d908      	bls.n	8000d38 <__udivmoddi4+0x24c>
 8000d26:	eb1c 0303 	adds.w	r3, ip, r3
 8000d2a:	f100 36ff 	add.w	r6, r0, #4294967295
 8000d2e:	d22c      	bcs.n	8000d8a <__udivmoddi4+0x29e>
 8000d30:	4299      	cmp	r1, r3
 8000d32:	d92a      	bls.n	8000d8a <__udivmoddi4+0x29e>
 8000d34:	3802      	subs	r0, #2
 8000d36:	4463      	add	r3, ip
 8000d38:	1a5b      	subs	r3, r3, r1
 8000d3a:	b2a4      	uxth	r4, r4
 8000d3c:	fbb3 f1f8 	udiv	r1, r3, r8
 8000d40:	fb08 3311 	mls	r3, r8, r1, r3
 8000d44:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000d48:	fb01 f307 	mul.w	r3, r1, r7
 8000d4c:	42a3      	cmp	r3, r4
 8000d4e:	d908      	bls.n	8000d62 <__udivmoddi4+0x276>
 8000d50:	eb1c 0404 	adds.w	r4, ip, r4
 8000d54:	f101 36ff 	add.w	r6, r1, #4294967295
 8000d58:	d213      	bcs.n	8000d82 <__udivmoddi4+0x296>
 8000d5a:	42a3      	cmp	r3, r4
 8000d5c:	d911      	bls.n	8000d82 <__udivmoddi4+0x296>
 8000d5e:	3902      	subs	r1, #2
 8000d60:	4464      	add	r4, ip
 8000d62:	1ae4      	subs	r4, r4, r3
 8000d64:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8000d68:	e739      	b.n	8000bde <__udivmoddi4+0xf2>
 8000d6a:	4604      	mov	r4, r0
 8000d6c:	e6f0      	b.n	8000b50 <__udivmoddi4+0x64>
 8000d6e:	4608      	mov	r0, r1
 8000d70:	e706      	b.n	8000b80 <__udivmoddi4+0x94>
 8000d72:	45c8      	cmp	r8, r9
 8000d74:	d2ae      	bcs.n	8000cd4 <__udivmoddi4+0x1e8>
 8000d76:	ebb9 0e02 	subs.w	lr, r9, r2
 8000d7a:	eb63 0c07 	sbc.w	ip, r3, r7
 8000d7e:	3801      	subs	r0, #1
 8000d80:	e7a8      	b.n	8000cd4 <__udivmoddi4+0x1e8>
 8000d82:	4631      	mov	r1, r6
 8000d84:	e7ed      	b.n	8000d62 <__udivmoddi4+0x276>
 8000d86:	4603      	mov	r3, r0
 8000d88:	e799      	b.n	8000cbe <__udivmoddi4+0x1d2>
 8000d8a:	4630      	mov	r0, r6
 8000d8c:	e7d4      	b.n	8000d38 <__udivmoddi4+0x24c>
 8000d8e:	46d6      	mov	lr, sl
 8000d90:	e77f      	b.n	8000c92 <__udivmoddi4+0x1a6>
 8000d92:	4463      	add	r3, ip
 8000d94:	3802      	subs	r0, #2
 8000d96:	e74d      	b.n	8000c34 <__udivmoddi4+0x148>
 8000d98:	4606      	mov	r6, r0
 8000d9a:	4623      	mov	r3, r4
 8000d9c:	4608      	mov	r0, r1
 8000d9e:	e70f      	b.n	8000bc0 <__udivmoddi4+0xd4>
 8000da0:	3e02      	subs	r6, #2
 8000da2:	4463      	add	r3, ip
 8000da4:	e730      	b.n	8000c08 <__udivmoddi4+0x11c>
 8000da6:	bf00      	nop

08000da8 <__aeabi_idiv0>:
 8000da8:	4770      	bx	lr
 8000daa:	bf00      	nop

08000dac <CompressToJPEG_RowByRow>:
//	hspi2.Init.BaudRatePrescaler = oldBaudRate;
//	HAL_SPI_Init(&hspi2);

}
uint8_t *jpeg_output_buffer = NULL;  // Başlangıçta boş bir pointer
uint8_t CompressToJPEG_RowByRow(void) {
 8000dac:	b580      	push	{r7, lr}
 8000dae:	f5ad 6dec 	sub.w	sp, sp, #1888	@ 0x760
 8000db2:	af00      	add	r7, sp, #0
	struct jpeg_compress_struct compress_cinfo;
	struct jpeg_error_mgr compress_jerr;

	// JPEG sıkıştırmayı başlat
	compress_cinfo.err = jpeg_std_error(&compress_jerr);
 8000db4:	f207 5324 	addw	r3, r7, #1316	@ 0x524
 8000db8:	4618      	mov	r0, r3
 8000dba:	f00e fad7 	bl	800f36c <jpeg_std_error>
 8000dbe:	4602      	mov	r2, r0
 8000dc0:	f507 63ec 	add.w	r3, r7, #1888	@ 0x760
 8000dc4:	f5a3 73dc 	sub.w	r3, r3, #440	@ 0x1b8
 8000dc8:	601a      	str	r2, [r3, #0]
	jpeg_create_compress(&compress_cinfo);
 8000dca:	f507 63b5 	add.w	r3, r7, #1448	@ 0x5a8
 8000dce:	f44f 72d8 	mov.w	r2, #432	@ 0x1b0
 8000dd2:	2150      	movs	r1, #80	@ 0x50
 8000dd4:	4618      	mov	r0, r3
 8000dd6:	f004 fda3 	bl	8005920 <jpeg_CreateCompress>

	unsigned long jpeg_size = 0;
 8000dda:	f507 63ec 	add.w	r3, r7, #1888	@ 0x760
 8000dde:	f5a3 7310 	sub.w	r3, r3, #576	@ 0x240
 8000de2:	2200      	movs	r2, #0
 8000de4:	601a      	str	r2, [r3, #0]

	jpeg_mem_dest(&compress_cinfo, &jpeg_output_buffer, &jpeg_size);
 8000de6:	f507 62a4 	add.w	r2, r7, #1312	@ 0x520
 8000dea:	f507 63b5 	add.w	r3, r7, #1448	@ 0x5a8
 8000dee:	495b      	ldr	r1, [pc, #364]	@ (8000f5c <CompressToJPEG_RowByRow+0x1b0>)
 8000df0:	4618      	mov	r0, r3
 8000df2:	f00e f95d 	bl	800f0b0 <jpeg_mem_dest>

	// Görüntü parametreleri
	compress_cinfo.image_width = 60;   // Genişlik
 8000df6:	f507 63ec 	add.w	r3, r7, #1888	@ 0x760
 8000dfa:	f5a3 73dc 	sub.w	r3, r3, #440	@ 0x1b8
 8000dfe:	223c      	movs	r2, #60	@ 0x3c
 8000e00:	61da      	str	r2, [r3, #28]
	compress_cinfo.image_height = 30;  // Yükseklik
 8000e02:	f507 63ec 	add.w	r3, r7, #1888	@ 0x760
 8000e06:	f5a3 73dc 	sub.w	r3, r3, #440	@ 0x1b8
 8000e0a:	221e      	movs	r2, #30
 8000e0c:	621a      	str	r2, [r3, #32]
	compress_cinfo.input_components = 3; // RGB888 formatında her pikselde 3 bileşen
 8000e0e:	f507 63ec 	add.w	r3, r7, #1888	@ 0x760
 8000e12:	f5a3 73dc 	sub.w	r3, r3, #440	@ 0x1b8
 8000e16:	2203      	movs	r2, #3
 8000e18:	625a      	str	r2, [r3, #36]	@ 0x24
	compress_cinfo.in_color_space = JCS_RGB;  // Renk uzayı
 8000e1a:	f507 63ec 	add.w	r3, r7, #1888	@ 0x760
 8000e1e:	f5a3 73dc 	sub.w	r3, r3, #440	@ 0x1b8
 8000e22:	2202      	movs	r2, #2
 8000e24:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28

	jpeg_set_defaults(&compress_cinfo);
 8000e28:	f507 63b5 	add.w	r3, r7, #1448	@ 0x5a8
 8000e2c:	4618      	mov	r0, r3
 8000e2e:	f00c fdc3 	bl	800d9b8 <jpeg_set_defaults>
	jpeg_set_quality(&compress_cinfo, 75, TRUE);  // Kalite %75
 8000e32:	f507 63b5 	add.w	r3, r7, #1448	@ 0x5a8
 8000e36:	2201      	movs	r2, #1
 8000e38:	214b      	movs	r1, #75	@ 0x4b
 8000e3a:	4618      	mov	r0, r3
 8000e3c:	f00c fd24 	bl	800d888 <jpeg_set_quality>

	jpeg_start_compress(&compress_cinfo, TRUE);
 8000e40:	f507 63b5 	add.w	r3, r7, #1448	@ 0x5a8
 8000e44:	2101      	movs	r1, #1
 8000e46:	4618      	mov	r0, r3
 8000e48:	f004 fee6 	bl	8005c18 <jpeg_start_compress>

	// Her satır için dummy veri (RGB888 formatında)
	uint8_t b[60 * 3];
	for (int i = 0; i < 60 * 3; i++) {
 8000e4c:	2300      	movs	r3, #0
 8000e4e:	f8c7 375c 	str.w	r3, [r7, #1884]	@ 0x75c
 8000e52:	e00d      	b.n	8000e70 <CompressToJPEG_RowByRow+0xc4>
		b[i] = 200;  // Her r, g, b kanalı için sabit bir değer
 8000e54:	f507 63ec 	add.w	r3, r7, #1888	@ 0x760
 8000e58:	f5a3 723d 	sub.w	r2, r3, #756	@ 0x2f4
 8000e5c:	f8d7 375c 	ldr.w	r3, [r7, #1884]	@ 0x75c
 8000e60:	4413      	add	r3, r2
 8000e62:	22c8      	movs	r2, #200	@ 0xc8
 8000e64:	701a      	strb	r2, [r3, #0]
	for (int i = 0; i < 60 * 3; i++) {
 8000e66:	f8d7 375c 	ldr.w	r3, [r7, #1884]	@ 0x75c
 8000e6a:	3301      	adds	r3, #1
 8000e6c:	f8c7 375c 	str.w	r3, [r7, #1884]	@ 0x75c
 8000e70:	f8d7 375c 	ldr.w	r3, [r7, #1884]	@ 0x75c
 8000e74:	2bb3      	cmp	r3, #179	@ 0xb3
 8000e76:	dded      	ble.n	8000e54 <CompressToJPEG_RowByRow+0xa8>
	}

	for (uint16_t row = 0; row < 30; row++) {
 8000e78:	2300      	movs	r3, #0
 8000e7a:	f8a7 375a 	strh.w	r3, [r7, #1882]	@ 0x75a
 8000e7e:	e012      	b.n	8000ea6 <CompressToJPEG_RowByRow+0xfa>
		JSAMPROW rowPointer[1] = { b };
 8000e80:	f507 63ec 	add.w	r3, r7, #1888	@ 0x760
 8000e84:	f2a3 735c 	subw	r3, r3, #1884	@ 0x75c
 8000e88:	f207 426c 	addw	r2, r7, #1132	@ 0x46c
 8000e8c:	601a      	str	r2, [r3, #0]
		jpeg_write_scanlines(&compress_cinfo, rowPointer, 1);
 8000e8e:	1d39      	adds	r1, r7, #4
 8000e90:	f507 63b5 	add.w	r3, r7, #1448	@ 0x5a8
 8000e94:	2201      	movs	r2, #1
 8000e96:	4618      	mov	r0, r3
 8000e98:	f004 ff01 	bl	8005c9e <jpeg_write_scanlines>
	for (uint16_t row = 0; row < 30; row++) {
 8000e9c:	f8b7 375a 	ldrh.w	r3, [r7, #1882]	@ 0x75a
 8000ea0:	3301      	adds	r3, #1
 8000ea2:	f8a7 375a 	strh.w	r3, [r7, #1882]	@ 0x75a
 8000ea6:	f8b7 375a 	ldrh.w	r3, [r7, #1882]	@ 0x75a
 8000eaa:	2b1d      	cmp	r3, #29
 8000eac:	d9e8      	bls.n	8000e80 <CompressToJPEG_RowByRow+0xd4>
	}

	// Sıkıştırmayı bitir
	jpeg_finish_compress(&compress_cinfo);
 8000eae:	f507 63b5 	add.w	r3, r7, #1448	@ 0x5a8
 8000eb2:	4618      	mov	r0, r3
 8000eb4:	f004 fe24 	bl	8005b00 <jpeg_finish_compress>
	jpeg_destroy_compress(&compress_cinfo);
 8000eb8:	f507 63b5 	add.w	r3, r7, #1448	@ 0x5a8
 8000ebc:	4618      	mov	r0, r3
 8000ebe:	f004 fdcf 	bl	8005a60 <jpeg_destroy_compress>

	FIL file;
	FRESULT res;
	FATFS fs;
	// Dosya sistemi monte et
	res = f_mount(&fs, "", 1);
 8000ec2:	f107 030c 	add.w	r3, r7, #12
 8000ec6:	2201      	movs	r2, #1
 8000ec8:	4925      	ldr	r1, [pc, #148]	@ (8000f60 <CompressToJPEG_RowByRow+0x1b4>)
 8000eca:	4618      	mov	r0, r3
 8000ecc:	f004 f8ae 	bl	800502c <f_mount>
 8000ed0:	4603      	mov	r3, r0
 8000ed2:	f887 3759 	strb.w	r3, [r7, #1881]	@ 0x759
	if (res != FR_OK) {
 8000ed6:	f897 3759 	ldrb.w	r3, [r7, #1881]	@ 0x759
 8000eda:	2b00      	cmp	r3, #0
 8000edc:	d001      	beq.n	8000ee2 <CompressToJPEG_RowByRow+0x136>
		return 1;
 8000ede:	2301      	movs	r3, #1
 8000ee0:	e037      	b.n	8000f52 <CompressToJPEG_RowByRow+0x1a6>
	}

	// SD karta yaz
	res = f_open(&file, "img.jpg", FA_WRITE | FA_CREATE_ALWAYS);
 8000ee2:	f507 730f 	add.w	r3, r7, #572	@ 0x23c
 8000ee6:	220a      	movs	r2, #10
 8000ee8:	491e      	ldr	r1, [pc, #120]	@ (8000f64 <CompressToJPEG_RowByRow+0x1b8>)
 8000eea:	4618      	mov	r0, r3
 8000eec:	f004 f8e4 	bl	80050b8 <f_open>
 8000ef0:	4603      	mov	r3, r0
 8000ef2:	f887 3759 	strb.w	r3, [r7, #1881]	@ 0x759
	if (res != FR_OK) {
 8000ef6:	f897 3759 	ldrb.w	r3, [r7, #1881]	@ 0x759
 8000efa:	2b00      	cmp	r3, #0
 8000efc:	d001      	beq.n	8000f02 <CompressToJPEG_RowByRow+0x156>
		//printf("Dosya açılamadı! Hata kodu: %d\n", res);
		return 2;
 8000efe:	2302      	movs	r3, #2
 8000f00:	e027      	b.n	8000f52 <CompressToJPEG_RowByRow+0x1a6>
	}

	UINT bytesWritten;
	res = f_write(&file, jpeg_output_buffer, jpeg_size, &bytesWritten);
 8000f02:	4b16      	ldr	r3, [pc, #88]	@ (8000f5c <CompressToJPEG_RowByRow+0x1b0>)
 8000f04:	6819      	ldr	r1, [r3, #0]
 8000f06:	f507 63ec 	add.w	r3, r7, #1888	@ 0x760
 8000f0a:	f5a3 7310 	sub.w	r3, r3, #576	@ 0x240
 8000f0e:	681a      	ldr	r2, [r3, #0]
 8000f10:	f107 0308 	add.w	r3, r7, #8
 8000f14:	f507 700f 	add.w	r0, r7, #572	@ 0x23c
 8000f18:	f004 fa88 	bl	800542c <f_write>
 8000f1c:	4603      	mov	r3, r0
 8000f1e:	f887 3759 	strb.w	r3, [r7, #1881]	@ 0x759
	if (res != FR_OK || bytesWritten != jpeg_size) {
 8000f22:	f897 3759 	ldrb.w	r3, [r7, #1881]	@ 0x759
 8000f26:	2b00      	cmp	r3, #0
 8000f28:	d10b      	bne.n	8000f42 <CompressToJPEG_RowByRow+0x196>
 8000f2a:	f507 63ec 	add.w	r3, r7, #1888	@ 0x760
 8000f2e:	f5a3 63eb 	sub.w	r3, r3, #1880	@ 0x758
 8000f32:	681a      	ldr	r2, [r3, #0]
 8000f34:	f507 63ec 	add.w	r3, r7, #1888	@ 0x760
 8000f38:	f5a3 7310 	sub.w	r3, r3, #576	@ 0x240
 8000f3c:	681b      	ldr	r3, [r3, #0]
 8000f3e:	429a      	cmp	r2, r3
 8000f40:	d001      	beq.n	8000f46 <CompressToJPEG_RowByRow+0x19a>
		//printf("JPEG yazılamadı! Hata kodu: %d\n", res);
		return 3;
 8000f42:	2303      	movs	r3, #3
 8000f44:	e005      	b.n	8000f52 <CompressToJPEG_RowByRow+0x1a6>
	} else {
		//printf("JPEG başarıyla kaydedildi.\n");
	}

	f_close(&file);
 8000f46:	f507 730f 	add.w	r3, r7, #572	@ 0x23c
 8000f4a:	4618      	mov	r0, r3
 8000f4c:	f004 fc61 	bl	8005812 <f_close>

	return 0;
 8000f50:	2300      	movs	r3, #0
}
 8000f52:	4618      	mov	r0, r3
 8000f54:	f507 67ec 	add.w	r7, r7, #1888	@ 0x760
 8000f58:	46bd      	mov	sp, r7
 8000f5a:	bd80      	pop	{r7, pc}
 8000f5c:	20000090 	.word	0x20000090
 8000f60:	0801a1b0 	.word	0x0801a1b0
 8000f64:	0801a1b4 	.word	0x0801a1b4

08000f68 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000f68:	b580      	push	{r7, lr}
 8000f6a:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000f6c:	f000 fa34 	bl	80013d8 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000f70:	f000 f816 	bl	8000fa0 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000f74:	f000 f8a8 	bl	80010c8 <MX_GPIO_Init>
  MX_SPI2_Init();
 8000f78:	f000 f870 	bl	800105c <MX_SPI2_Init>
  MX_FATFS_Init();
 8000f7c:	f001 fdbc 	bl	8002af8 <MX_FATFS_Init>
  MX_LIBJPEG_Init();
 8000f80:	f002 fb10 	bl	80035a4 <MX_LIBJPEG_Init>
  /* USER CODE BEGIN 2 */
  //jpeg_screen_view("01.jpg", 0, 0, &iw, &ih);
  HAL_Delay(3000);
 8000f84:	f640 30b8 	movw	r0, #3000	@ 0xbb8
 8000f88:	f000 fa98 	bl	80014bc <HAL_Delay>
  status = CompressToJPEG_RowByRow();
 8000f8c:	f7ff ff0e 	bl	8000dac <CompressToJPEG_RowByRow>
 8000f90:	4603      	mov	r3, r0
 8000f92:	461a      	mov	r2, r3
 8000f94:	4b01      	ldr	r3, [pc, #4]	@ (8000f9c <main+0x34>)
 8000f96:	701a      	strb	r2, [r3, #0]
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000f98:	bf00      	nop
 8000f9a:	e7fd      	b.n	8000f98 <main+0x30>
 8000f9c:	200000ec 	.word	0x200000ec

08000fa0 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000fa0:	b580      	push	{r7, lr}
 8000fa2:	b094      	sub	sp, #80	@ 0x50
 8000fa4:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000fa6:	f107 0320 	add.w	r3, r7, #32
 8000faa:	2230      	movs	r2, #48	@ 0x30
 8000fac:	2100      	movs	r1, #0
 8000fae:	4618      	mov	r0, r3
 8000fb0:	f018 fd1e 	bl	80199f0 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000fb4:	f107 030c 	add.w	r3, r7, #12
 8000fb8:	2200      	movs	r2, #0
 8000fba:	601a      	str	r2, [r3, #0]
 8000fbc:	605a      	str	r2, [r3, #4]
 8000fbe:	609a      	str	r2, [r3, #8]
 8000fc0:	60da      	str	r2, [r3, #12]
 8000fc2:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000fc4:	2300      	movs	r3, #0
 8000fc6:	60bb      	str	r3, [r7, #8]
 8000fc8:	4b22      	ldr	r3, [pc, #136]	@ (8001054 <SystemClock_Config+0xb4>)
 8000fca:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000fcc:	4a21      	ldr	r2, [pc, #132]	@ (8001054 <SystemClock_Config+0xb4>)
 8000fce:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000fd2:	6413      	str	r3, [r2, #64]	@ 0x40
 8000fd4:	4b1f      	ldr	r3, [pc, #124]	@ (8001054 <SystemClock_Config+0xb4>)
 8000fd6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000fd8:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000fdc:	60bb      	str	r3, [r7, #8]
 8000fde:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000fe0:	2300      	movs	r3, #0
 8000fe2:	607b      	str	r3, [r7, #4]
 8000fe4:	4b1c      	ldr	r3, [pc, #112]	@ (8001058 <SystemClock_Config+0xb8>)
 8000fe6:	681b      	ldr	r3, [r3, #0]
 8000fe8:	4a1b      	ldr	r2, [pc, #108]	@ (8001058 <SystemClock_Config+0xb8>)
 8000fea:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8000fee:	6013      	str	r3, [r2, #0]
 8000ff0:	4b19      	ldr	r3, [pc, #100]	@ (8001058 <SystemClock_Config+0xb8>)
 8000ff2:	681b      	ldr	r3, [r3, #0]
 8000ff4:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 8000ff8:	607b      	str	r3, [r7, #4]
 8000ffa:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000ffc:	2302      	movs	r3, #2
 8000ffe:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001000:	2301      	movs	r3, #1
 8001002:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8001004:	2310      	movs	r3, #16
 8001006:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8001008:	2300      	movs	r3, #0
 800100a:	63bb      	str	r3, [r7, #56]	@ 0x38
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800100c:	f107 0320 	add.w	r3, r7, #32
 8001010:	4618      	mov	r0, r3
 8001012:	f000 fcfb 	bl	8001a0c <HAL_RCC_OscConfig>
 8001016:	4603      	mov	r3, r0
 8001018:	2b00      	cmp	r3, #0
 800101a:	d001      	beq.n	8001020 <SystemClock_Config+0x80>
  {
    Error_Handler();
 800101c:	f000 f8a4 	bl	8001168 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001020:	230f      	movs	r3, #15
 8001022:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 8001024:	2300      	movs	r3, #0
 8001026:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001028:	2300      	movs	r3, #0
 800102a:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 800102c:	2300      	movs	r3, #0
 800102e:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001030:	2300      	movs	r3, #0
 8001032:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8001034:	f107 030c 	add.w	r3, r7, #12
 8001038:	2100      	movs	r1, #0
 800103a:	4618      	mov	r0, r3
 800103c:	f000 ff5e 	bl	8001efc <HAL_RCC_ClockConfig>
 8001040:	4603      	mov	r3, r0
 8001042:	2b00      	cmp	r3, #0
 8001044:	d001      	beq.n	800104a <SystemClock_Config+0xaa>
  {
    Error_Handler();
 8001046:	f000 f88f 	bl	8001168 <Error_Handler>
  }
}
 800104a:	bf00      	nop
 800104c:	3750      	adds	r7, #80	@ 0x50
 800104e:	46bd      	mov	sp, r7
 8001050:	bd80      	pop	{r7, pc}
 8001052:	bf00      	nop
 8001054:	40023800 	.word	0x40023800
 8001058:	40007000 	.word	0x40007000

0800105c <MX_SPI2_Init>:
  * @brief SPI2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI2_Init(void)
{
 800105c:	b580      	push	{r7, lr}
 800105e:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI2_Init 1 */

  /* USER CODE END SPI2_Init 1 */
  /* SPI2 parameter configuration*/
  hspi2.Instance = SPI2;
 8001060:	4b17      	ldr	r3, [pc, #92]	@ (80010c0 <MX_SPI2_Init+0x64>)
 8001062:	4a18      	ldr	r2, [pc, #96]	@ (80010c4 <MX_SPI2_Init+0x68>)
 8001064:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_MASTER;
 8001066:	4b16      	ldr	r3, [pc, #88]	@ (80010c0 <MX_SPI2_Init+0x64>)
 8001068:	f44f 7282 	mov.w	r2, #260	@ 0x104
 800106c:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 800106e:	4b14      	ldr	r3, [pc, #80]	@ (80010c0 <MX_SPI2_Init+0x64>)
 8001070:	2200      	movs	r2, #0
 8001072:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_8BIT;
 8001074:	4b12      	ldr	r3, [pc, #72]	@ (80010c0 <MX_SPI2_Init+0x64>)
 8001076:	2200      	movs	r2, #0
 8001078:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
 800107a:	4b11      	ldr	r3, [pc, #68]	@ (80010c0 <MX_SPI2_Init+0x64>)
 800107c:	2200      	movs	r2, #0
 800107e:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
 8001080:	4b0f      	ldr	r3, [pc, #60]	@ (80010c0 <MX_SPI2_Init+0x64>)
 8001082:	2200      	movs	r2, #0
 8001084:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_SOFT;
 8001086:	4b0e      	ldr	r3, [pc, #56]	@ (80010c0 <MX_SPI2_Init+0x64>)
 8001088:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800108c:	619a      	str	r2, [r3, #24]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_64;
 800108e:	4b0c      	ldr	r3, [pc, #48]	@ (80010c0 <MX_SPI2_Init+0x64>)
 8001090:	2228      	movs	r2, #40	@ 0x28
 8001092:	61da      	str	r2, [r3, #28]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8001094:	4b0a      	ldr	r3, [pc, #40]	@ (80010c0 <MX_SPI2_Init+0x64>)
 8001096:	2200      	movs	r2, #0
 8001098:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 800109a:	4b09      	ldr	r3, [pc, #36]	@ (80010c0 <MX_SPI2_Init+0x64>)
 800109c:	2200      	movs	r2, #0
 800109e:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80010a0:	4b07      	ldr	r3, [pc, #28]	@ (80010c0 <MX_SPI2_Init+0x64>)
 80010a2:	2200      	movs	r2, #0
 80010a4:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi2.Init.CRCPolynomial = 10;
 80010a6:	4b06      	ldr	r3, [pc, #24]	@ (80010c0 <MX_SPI2_Init+0x64>)
 80010a8:	220a      	movs	r2, #10
 80010aa:	62da      	str	r2, [r3, #44]	@ 0x2c
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 80010ac:	4804      	ldr	r0, [pc, #16]	@ (80010c0 <MX_SPI2_Init+0x64>)
 80010ae:	f001 f8d1 	bl	8002254 <HAL_SPI_Init>
 80010b2:	4603      	mov	r3, r0
 80010b4:	2b00      	cmp	r3, #0
 80010b6:	d001      	beq.n	80010bc <MX_SPI2_Init+0x60>
  {
    Error_Handler();
 80010b8:	f000 f856 	bl	8001168 <Error_Handler>
  }
  /* USER CODE BEGIN SPI2_Init 2 */

  /* USER CODE END SPI2_Init 2 */

}
 80010bc:	bf00      	nop
 80010be:	bd80      	pop	{r7, pc}
 80010c0:	20000094 	.word	0x20000094
 80010c4:	40003800 	.word	0x40003800

080010c8 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80010c8:	b580      	push	{r7, lr}
 80010ca:	b088      	sub	sp, #32
 80010cc:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80010ce:	f107 030c 	add.w	r3, r7, #12
 80010d2:	2200      	movs	r2, #0
 80010d4:	601a      	str	r2, [r3, #0]
 80010d6:	605a      	str	r2, [r3, #4]
 80010d8:	609a      	str	r2, [r3, #8]
 80010da:	60da      	str	r2, [r3, #12]
 80010dc:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80010de:	2300      	movs	r3, #0
 80010e0:	60bb      	str	r3, [r7, #8]
 80010e2:	4b1f      	ldr	r3, [pc, #124]	@ (8001160 <MX_GPIO_Init+0x98>)
 80010e4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80010e6:	4a1e      	ldr	r2, [pc, #120]	@ (8001160 <MX_GPIO_Init+0x98>)
 80010e8:	f043 0304 	orr.w	r3, r3, #4
 80010ec:	6313      	str	r3, [r2, #48]	@ 0x30
 80010ee:	4b1c      	ldr	r3, [pc, #112]	@ (8001160 <MX_GPIO_Init+0x98>)
 80010f0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80010f2:	f003 0304 	and.w	r3, r3, #4
 80010f6:	60bb      	str	r3, [r7, #8]
 80010f8:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80010fa:	2300      	movs	r3, #0
 80010fc:	607b      	str	r3, [r7, #4]
 80010fe:	4b18      	ldr	r3, [pc, #96]	@ (8001160 <MX_GPIO_Init+0x98>)
 8001100:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001102:	4a17      	ldr	r2, [pc, #92]	@ (8001160 <MX_GPIO_Init+0x98>)
 8001104:	f043 0302 	orr.w	r3, r3, #2
 8001108:	6313      	str	r3, [r2, #48]	@ 0x30
 800110a:	4b15      	ldr	r3, [pc, #84]	@ (8001160 <MX_GPIO_Init+0x98>)
 800110c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800110e:	f003 0302 	and.w	r3, r3, #2
 8001112:	607b      	str	r3, [r7, #4]
 8001114:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001116:	2300      	movs	r3, #0
 8001118:	603b      	str	r3, [r7, #0]
 800111a:	4b11      	ldr	r3, [pc, #68]	@ (8001160 <MX_GPIO_Init+0x98>)
 800111c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800111e:	4a10      	ldr	r2, [pc, #64]	@ (8001160 <MX_GPIO_Init+0x98>)
 8001120:	f043 0301 	orr.w	r3, r3, #1
 8001124:	6313      	str	r3, [r2, #48]	@ 0x30
 8001126:	4b0e      	ldr	r3, [pc, #56]	@ (8001160 <MX_GPIO_Init+0x98>)
 8001128:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800112a:	f003 0301 	and.w	r3, r3, #1
 800112e:	603b      	str	r3, [r7, #0]
 8001130:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(SD_CS_GPIO_Port, SD_CS_Pin, GPIO_PIN_RESET);
 8001132:	2200      	movs	r2, #0
 8001134:	2120      	movs	r1, #32
 8001136:	480b      	ldr	r0, [pc, #44]	@ (8001164 <MX_GPIO_Init+0x9c>)
 8001138:	f000 fc4e 	bl	80019d8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : SD_CS_Pin */
  GPIO_InitStruct.Pin = SD_CS_Pin;
 800113c:	2320      	movs	r3, #32
 800113e:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001140:	2301      	movs	r3, #1
 8001142:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001144:	2300      	movs	r3, #0
 8001146:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001148:	2300      	movs	r3, #0
 800114a:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(SD_CS_GPIO_Port, &GPIO_InitStruct);
 800114c:	f107 030c 	add.w	r3, r7, #12
 8001150:	4619      	mov	r1, r3
 8001152:	4804      	ldr	r0, [pc, #16]	@ (8001164 <MX_GPIO_Init+0x9c>)
 8001154:	f000 fabc 	bl	80016d0 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8001158:	bf00      	nop
 800115a:	3720      	adds	r7, #32
 800115c:	46bd      	mov	sp, r7
 800115e:	bd80      	pop	{r7, pc}
 8001160:	40023800 	.word	0x40023800
 8001164:	40020800 	.word	0x40020800

08001168 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001168:	b480      	push	{r7}
 800116a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800116c:	b672      	cpsid	i
}
 800116e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001170:	bf00      	nop
 8001172:	e7fd      	b.n	8001170 <Error_Handler+0x8>

08001174 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001174:	b480      	push	{r7}
 8001176:	b083      	sub	sp, #12
 8001178:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800117a:	2300      	movs	r3, #0
 800117c:	607b      	str	r3, [r7, #4]
 800117e:	4b10      	ldr	r3, [pc, #64]	@ (80011c0 <HAL_MspInit+0x4c>)
 8001180:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001182:	4a0f      	ldr	r2, [pc, #60]	@ (80011c0 <HAL_MspInit+0x4c>)
 8001184:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001188:	6453      	str	r3, [r2, #68]	@ 0x44
 800118a:	4b0d      	ldr	r3, [pc, #52]	@ (80011c0 <HAL_MspInit+0x4c>)
 800118c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800118e:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8001192:	607b      	str	r3, [r7, #4]
 8001194:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001196:	2300      	movs	r3, #0
 8001198:	603b      	str	r3, [r7, #0]
 800119a:	4b09      	ldr	r3, [pc, #36]	@ (80011c0 <HAL_MspInit+0x4c>)
 800119c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800119e:	4a08      	ldr	r2, [pc, #32]	@ (80011c0 <HAL_MspInit+0x4c>)
 80011a0:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80011a4:	6413      	str	r3, [r2, #64]	@ 0x40
 80011a6:	4b06      	ldr	r3, [pc, #24]	@ (80011c0 <HAL_MspInit+0x4c>)
 80011a8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80011aa:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80011ae:	603b      	str	r3, [r7, #0]
 80011b0:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80011b2:	bf00      	nop
 80011b4:	370c      	adds	r7, #12
 80011b6:	46bd      	mov	sp, r7
 80011b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011bc:	4770      	bx	lr
 80011be:	bf00      	nop
 80011c0:	40023800 	.word	0x40023800

080011c4 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 80011c4:	b580      	push	{r7, lr}
 80011c6:	b08a      	sub	sp, #40	@ 0x28
 80011c8:	af00      	add	r7, sp, #0
 80011ca:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80011cc:	f107 0314 	add.w	r3, r7, #20
 80011d0:	2200      	movs	r2, #0
 80011d2:	601a      	str	r2, [r3, #0]
 80011d4:	605a      	str	r2, [r3, #4]
 80011d6:	609a      	str	r2, [r3, #8]
 80011d8:	60da      	str	r2, [r3, #12]
 80011da:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI2)
 80011dc:	687b      	ldr	r3, [r7, #4]
 80011de:	681b      	ldr	r3, [r3, #0]
 80011e0:	4a28      	ldr	r2, [pc, #160]	@ (8001284 <HAL_SPI_MspInit+0xc0>)
 80011e2:	4293      	cmp	r3, r2
 80011e4:	d14a      	bne.n	800127c <HAL_SPI_MspInit+0xb8>
  {
  /* USER CODE BEGIN SPI2_MspInit 0 */

  /* USER CODE END SPI2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI2_CLK_ENABLE();
 80011e6:	2300      	movs	r3, #0
 80011e8:	613b      	str	r3, [r7, #16]
 80011ea:	4b27      	ldr	r3, [pc, #156]	@ (8001288 <HAL_SPI_MspInit+0xc4>)
 80011ec:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80011ee:	4a26      	ldr	r2, [pc, #152]	@ (8001288 <HAL_SPI_MspInit+0xc4>)
 80011f0:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80011f4:	6413      	str	r3, [r2, #64]	@ 0x40
 80011f6:	4b24      	ldr	r3, [pc, #144]	@ (8001288 <HAL_SPI_MspInit+0xc4>)
 80011f8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80011fa:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80011fe:	613b      	str	r3, [r7, #16]
 8001200:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001202:	2300      	movs	r3, #0
 8001204:	60fb      	str	r3, [r7, #12]
 8001206:	4b20      	ldr	r3, [pc, #128]	@ (8001288 <HAL_SPI_MspInit+0xc4>)
 8001208:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800120a:	4a1f      	ldr	r2, [pc, #124]	@ (8001288 <HAL_SPI_MspInit+0xc4>)
 800120c:	f043 0304 	orr.w	r3, r3, #4
 8001210:	6313      	str	r3, [r2, #48]	@ 0x30
 8001212:	4b1d      	ldr	r3, [pc, #116]	@ (8001288 <HAL_SPI_MspInit+0xc4>)
 8001214:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001216:	f003 0304 	and.w	r3, r3, #4
 800121a:	60fb      	str	r3, [r7, #12]
 800121c:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800121e:	2300      	movs	r3, #0
 8001220:	60bb      	str	r3, [r7, #8]
 8001222:	4b19      	ldr	r3, [pc, #100]	@ (8001288 <HAL_SPI_MspInit+0xc4>)
 8001224:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001226:	4a18      	ldr	r2, [pc, #96]	@ (8001288 <HAL_SPI_MspInit+0xc4>)
 8001228:	f043 0302 	orr.w	r3, r3, #2
 800122c:	6313      	str	r3, [r2, #48]	@ 0x30
 800122e:	4b16      	ldr	r3, [pc, #88]	@ (8001288 <HAL_SPI_MspInit+0xc4>)
 8001230:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001232:	f003 0302 	and.w	r3, r3, #2
 8001236:	60bb      	str	r3, [r7, #8]
 8001238:	68bb      	ldr	r3, [r7, #8]
    /**SPI2 GPIO Configuration
    PC2     ------> SPI2_MISO
    PC3     ------> SPI2_MOSI
    PB10     ------> SPI2_SCK
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 800123a:	230c      	movs	r3, #12
 800123c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800123e:	2302      	movs	r3, #2
 8001240:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001242:	2300      	movs	r3, #0
 8001244:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001246:	2303      	movs	r3, #3
 8001248:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 800124a:	2305      	movs	r3, #5
 800124c:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800124e:	f107 0314 	add.w	r3, r7, #20
 8001252:	4619      	mov	r1, r3
 8001254:	480d      	ldr	r0, [pc, #52]	@ (800128c <HAL_SPI_MspInit+0xc8>)
 8001256:	f000 fa3b 	bl	80016d0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10;
 800125a:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800125e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001260:	2302      	movs	r3, #2
 8001262:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001264:	2300      	movs	r3, #0
 8001266:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001268:	2303      	movs	r3, #3
 800126a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 800126c:	2305      	movs	r3, #5
 800126e:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001270:	f107 0314 	add.w	r3, r7, #20
 8001274:	4619      	mov	r1, r3
 8001276:	4806      	ldr	r0, [pc, #24]	@ (8001290 <HAL_SPI_MspInit+0xcc>)
 8001278:	f000 fa2a 	bl	80016d0 <HAL_GPIO_Init>

  /* USER CODE END SPI2_MspInit 1 */

  }

}
 800127c:	bf00      	nop
 800127e:	3728      	adds	r7, #40	@ 0x28
 8001280:	46bd      	mov	sp, r7
 8001282:	bd80      	pop	{r7, pc}
 8001284:	40003800 	.word	0x40003800
 8001288:	40023800 	.word	0x40023800
 800128c:	40020800 	.word	0x40020800
 8001290:	40020400 	.word	0x40020400

08001294 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001294:	b480      	push	{r7}
 8001296:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8001298:	bf00      	nop
 800129a:	e7fd      	b.n	8001298 <NMI_Handler+0x4>

0800129c <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800129c:	b480      	push	{r7}
 800129e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80012a0:	bf00      	nop
 80012a2:	e7fd      	b.n	80012a0 <HardFault_Handler+0x4>

080012a4 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80012a4:	b480      	push	{r7}
 80012a6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80012a8:	bf00      	nop
 80012aa:	e7fd      	b.n	80012a8 <MemManage_Handler+0x4>

080012ac <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80012ac:	b480      	push	{r7}
 80012ae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80012b0:	bf00      	nop
 80012b2:	e7fd      	b.n	80012b0 <BusFault_Handler+0x4>

080012b4 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80012b4:	b480      	push	{r7}
 80012b6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80012b8:	bf00      	nop
 80012ba:	e7fd      	b.n	80012b8 <UsageFault_Handler+0x4>

080012bc <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80012bc:	b480      	push	{r7}
 80012be:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80012c0:	bf00      	nop
 80012c2:	46bd      	mov	sp, r7
 80012c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012c8:	4770      	bx	lr

080012ca <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80012ca:	b480      	push	{r7}
 80012cc:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80012ce:	bf00      	nop
 80012d0:	46bd      	mov	sp, r7
 80012d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012d6:	4770      	bx	lr

080012d8 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80012d8:	b480      	push	{r7}
 80012da:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80012dc:	bf00      	nop
 80012de:	46bd      	mov	sp, r7
 80012e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012e4:	4770      	bx	lr

080012e6 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80012e6:	b580      	push	{r7, lr}
 80012e8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80012ea:	f000 f8c7 	bl	800147c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80012ee:	bf00      	nop
 80012f0:	bd80      	pop	{r7, pc}
	...

080012f4 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80012f4:	b580      	push	{r7, lr}
 80012f6:	b086      	sub	sp, #24
 80012f8:	af00      	add	r7, sp, #0
 80012fa:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80012fc:	4a14      	ldr	r2, [pc, #80]	@ (8001350 <_sbrk+0x5c>)
 80012fe:	4b15      	ldr	r3, [pc, #84]	@ (8001354 <_sbrk+0x60>)
 8001300:	1ad3      	subs	r3, r2, r3
 8001302:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001304:	697b      	ldr	r3, [r7, #20]
 8001306:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001308:	4b13      	ldr	r3, [pc, #76]	@ (8001358 <_sbrk+0x64>)
 800130a:	681b      	ldr	r3, [r3, #0]
 800130c:	2b00      	cmp	r3, #0
 800130e:	d102      	bne.n	8001316 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001310:	4b11      	ldr	r3, [pc, #68]	@ (8001358 <_sbrk+0x64>)
 8001312:	4a12      	ldr	r2, [pc, #72]	@ (800135c <_sbrk+0x68>)
 8001314:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001316:	4b10      	ldr	r3, [pc, #64]	@ (8001358 <_sbrk+0x64>)
 8001318:	681a      	ldr	r2, [r3, #0]
 800131a:	687b      	ldr	r3, [r7, #4]
 800131c:	4413      	add	r3, r2
 800131e:	693a      	ldr	r2, [r7, #16]
 8001320:	429a      	cmp	r2, r3
 8001322:	d207      	bcs.n	8001334 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001324:	f018 fb7c 	bl	8019a20 <__errno>
 8001328:	4603      	mov	r3, r0
 800132a:	220c      	movs	r2, #12
 800132c:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800132e:	f04f 33ff 	mov.w	r3, #4294967295
 8001332:	e009      	b.n	8001348 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001334:	4b08      	ldr	r3, [pc, #32]	@ (8001358 <_sbrk+0x64>)
 8001336:	681b      	ldr	r3, [r3, #0]
 8001338:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800133a:	4b07      	ldr	r3, [pc, #28]	@ (8001358 <_sbrk+0x64>)
 800133c:	681a      	ldr	r2, [r3, #0]
 800133e:	687b      	ldr	r3, [r7, #4]
 8001340:	4413      	add	r3, r2
 8001342:	4a05      	ldr	r2, [pc, #20]	@ (8001358 <_sbrk+0x64>)
 8001344:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001346:	68fb      	ldr	r3, [r7, #12]
}
 8001348:	4618      	mov	r0, r3
 800134a:	3718      	adds	r7, #24
 800134c:	46bd      	mov	sp, r7
 800134e:	bd80      	pop	{r7, pc}
 8001350:	20020000 	.word	0x20020000
 8001354:	00000400 	.word	0x00000400
 8001358:	200000f0 	.word	0x200000f0
 800135c:	20000288 	.word	0x20000288

08001360 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001360:	b480      	push	{r7}
 8001362:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001364:	4b06      	ldr	r3, [pc, #24]	@ (8001380 <SystemInit+0x20>)
 8001366:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800136a:	4a05      	ldr	r2, [pc, #20]	@ (8001380 <SystemInit+0x20>)
 800136c:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8001370:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001374:	bf00      	nop
 8001376:	46bd      	mov	sp, r7
 8001378:	f85d 7b04 	ldr.w	r7, [sp], #4
 800137c:	4770      	bx	lr
 800137e:	bf00      	nop
 8001380:	e000ed00 	.word	0xe000ed00

08001384 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 8001384:	f8df d034 	ldr.w	sp, [pc, #52]	@ 80013bc <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8001388:	f7ff ffea 	bl	8001360 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 800138c:	480c      	ldr	r0, [pc, #48]	@ (80013c0 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 800138e:	490d      	ldr	r1, [pc, #52]	@ (80013c4 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8001390:	4a0d      	ldr	r2, [pc, #52]	@ (80013c8 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8001392:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001394:	e002      	b.n	800139c <LoopCopyDataInit>

08001396 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001396:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001398:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800139a:	3304      	adds	r3, #4

0800139c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800139c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800139e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80013a0:	d3f9      	bcc.n	8001396 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80013a2:	4a0a      	ldr	r2, [pc, #40]	@ (80013cc <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 80013a4:	4c0a      	ldr	r4, [pc, #40]	@ (80013d0 <LoopFillZerobss+0x22>)
  movs r3, #0
 80013a6:	2300      	movs	r3, #0
  b LoopFillZerobss
 80013a8:	e001      	b.n	80013ae <LoopFillZerobss>

080013aa <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80013aa:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80013ac:	3204      	adds	r2, #4

080013ae <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80013ae:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80013b0:	d3fb      	bcc.n	80013aa <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 80013b2:	f018 fb3b 	bl	8019a2c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80013b6:	f7ff fdd7 	bl	8000f68 <main>
  bx  lr    
 80013ba:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 80013bc:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 80013c0:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80013c4:	20000074 	.word	0x20000074
  ldr r2, =_sidata
 80013c8:	0801c318 	.word	0x0801c318
  ldr r2, =_sbss
 80013cc:	20000074 	.word	0x20000074
  ldr r4, =_ebss
 80013d0:	20000288 	.word	0x20000288

080013d4 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80013d4:	e7fe      	b.n	80013d4 <ADC_IRQHandler>
	...

080013d8 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80013d8:	b580      	push	{r7, lr}
 80013da:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 80013dc:	4b0e      	ldr	r3, [pc, #56]	@ (8001418 <HAL_Init+0x40>)
 80013de:	681b      	ldr	r3, [r3, #0]
 80013e0:	4a0d      	ldr	r2, [pc, #52]	@ (8001418 <HAL_Init+0x40>)
 80013e2:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 80013e6:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 80013e8:	4b0b      	ldr	r3, [pc, #44]	@ (8001418 <HAL_Init+0x40>)
 80013ea:	681b      	ldr	r3, [r3, #0]
 80013ec:	4a0a      	ldr	r2, [pc, #40]	@ (8001418 <HAL_Init+0x40>)
 80013ee:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 80013f2:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80013f4:	4b08      	ldr	r3, [pc, #32]	@ (8001418 <HAL_Init+0x40>)
 80013f6:	681b      	ldr	r3, [r3, #0]
 80013f8:	4a07      	ldr	r2, [pc, #28]	@ (8001418 <HAL_Init+0x40>)
 80013fa:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80013fe:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001400:	2003      	movs	r0, #3
 8001402:	f000 f931 	bl	8001668 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001406:	200f      	movs	r0, #15
 8001408:	f000 f808 	bl	800141c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 800140c:	f7ff feb2 	bl	8001174 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001410:	2300      	movs	r3, #0
}
 8001412:	4618      	mov	r0, r3
 8001414:	bd80      	pop	{r7, pc}
 8001416:	bf00      	nop
 8001418:	40023c00 	.word	0x40023c00

0800141c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800141c:	b580      	push	{r7, lr}
 800141e:	b082      	sub	sp, #8
 8001420:	af00      	add	r7, sp, #0
 8001422:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001424:	4b12      	ldr	r3, [pc, #72]	@ (8001470 <HAL_InitTick+0x54>)
 8001426:	681a      	ldr	r2, [r3, #0]
 8001428:	4b12      	ldr	r3, [pc, #72]	@ (8001474 <HAL_InitTick+0x58>)
 800142a:	781b      	ldrb	r3, [r3, #0]
 800142c:	4619      	mov	r1, r3
 800142e:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8001432:	fbb3 f3f1 	udiv	r3, r3, r1
 8001436:	fbb2 f3f3 	udiv	r3, r2, r3
 800143a:	4618      	mov	r0, r3
 800143c:	f000 f93b 	bl	80016b6 <HAL_SYSTICK_Config>
 8001440:	4603      	mov	r3, r0
 8001442:	2b00      	cmp	r3, #0
 8001444:	d001      	beq.n	800144a <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001446:	2301      	movs	r3, #1
 8001448:	e00e      	b.n	8001468 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800144a:	687b      	ldr	r3, [r7, #4]
 800144c:	2b0f      	cmp	r3, #15
 800144e:	d80a      	bhi.n	8001466 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001450:	2200      	movs	r2, #0
 8001452:	6879      	ldr	r1, [r7, #4]
 8001454:	f04f 30ff 	mov.w	r0, #4294967295
 8001458:	f000 f911 	bl	800167e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 800145c:	4a06      	ldr	r2, [pc, #24]	@ (8001478 <HAL_InitTick+0x5c>)
 800145e:	687b      	ldr	r3, [r7, #4]
 8001460:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001462:	2300      	movs	r3, #0
 8001464:	e000      	b.n	8001468 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001466:	2301      	movs	r3, #1
}
 8001468:	4618      	mov	r0, r3
 800146a:	3708      	adds	r7, #8
 800146c:	46bd      	mov	sp, r7
 800146e:	bd80      	pop	{r7, pc}
 8001470:	20000000 	.word	0x20000000
 8001474:	20000008 	.word	0x20000008
 8001478:	20000004 	.word	0x20000004

0800147c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800147c:	b480      	push	{r7}
 800147e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001480:	4b06      	ldr	r3, [pc, #24]	@ (800149c <HAL_IncTick+0x20>)
 8001482:	781b      	ldrb	r3, [r3, #0]
 8001484:	461a      	mov	r2, r3
 8001486:	4b06      	ldr	r3, [pc, #24]	@ (80014a0 <HAL_IncTick+0x24>)
 8001488:	681b      	ldr	r3, [r3, #0]
 800148a:	4413      	add	r3, r2
 800148c:	4a04      	ldr	r2, [pc, #16]	@ (80014a0 <HAL_IncTick+0x24>)
 800148e:	6013      	str	r3, [r2, #0]
}
 8001490:	bf00      	nop
 8001492:	46bd      	mov	sp, r7
 8001494:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001498:	4770      	bx	lr
 800149a:	bf00      	nop
 800149c:	20000008 	.word	0x20000008
 80014a0:	200000f4 	.word	0x200000f4

080014a4 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80014a4:	b480      	push	{r7}
 80014a6:	af00      	add	r7, sp, #0
  return uwTick;
 80014a8:	4b03      	ldr	r3, [pc, #12]	@ (80014b8 <HAL_GetTick+0x14>)
 80014aa:	681b      	ldr	r3, [r3, #0]
}
 80014ac:	4618      	mov	r0, r3
 80014ae:	46bd      	mov	sp, r7
 80014b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014b4:	4770      	bx	lr
 80014b6:	bf00      	nop
 80014b8:	200000f4 	.word	0x200000f4

080014bc <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80014bc:	b580      	push	{r7, lr}
 80014be:	b084      	sub	sp, #16
 80014c0:	af00      	add	r7, sp, #0
 80014c2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80014c4:	f7ff ffee 	bl	80014a4 <HAL_GetTick>
 80014c8:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80014ca:	687b      	ldr	r3, [r7, #4]
 80014cc:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80014ce:	68fb      	ldr	r3, [r7, #12]
 80014d0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80014d4:	d005      	beq.n	80014e2 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80014d6:	4b0a      	ldr	r3, [pc, #40]	@ (8001500 <HAL_Delay+0x44>)
 80014d8:	781b      	ldrb	r3, [r3, #0]
 80014da:	461a      	mov	r2, r3
 80014dc:	68fb      	ldr	r3, [r7, #12]
 80014de:	4413      	add	r3, r2
 80014e0:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 80014e2:	bf00      	nop
 80014e4:	f7ff ffde 	bl	80014a4 <HAL_GetTick>
 80014e8:	4602      	mov	r2, r0
 80014ea:	68bb      	ldr	r3, [r7, #8]
 80014ec:	1ad3      	subs	r3, r2, r3
 80014ee:	68fa      	ldr	r2, [r7, #12]
 80014f0:	429a      	cmp	r2, r3
 80014f2:	d8f7      	bhi.n	80014e4 <HAL_Delay+0x28>
  {
  }
}
 80014f4:	bf00      	nop
 80014f6:	bf00      	nop
 80014f8:	3710      	adds	r7, #16
 80014fa:	46bd      	mov	sp, r7
 80014fc:	bd80      	pop	{r7, pc}
 80014fe:	bf00      	nop
 8001500:	20000008 	.word	0x20000008

08001504 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001504:	b480      	push	{r7}
 8001506:	b085      	sub	sp, #20
 8001508:	af00      	add	r7, sp, #0
 800150a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800150c:	687b      	ldr	r3, [r7, #4]
 800150e:	f003 0307 	and.w	r3, r3, #7
 8001512:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001514:	4b0c      	ldr	r3, [pc, #48]	@ (8001548 <__NVIC_SetPriorityGrouping+0x44>)
 8001516:	68db      	ldr	r3, [r3, #12]
 8001518:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800151a:	68ba      	ldr	r2, [r7, #8]
 800151c:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8001520:	4013      	ands	r3, r2
 8001522:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001524:	68fb      	ldr	r3, [r7, #12]
 8001526:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001528:	68bb      	ldr	r3, [r7, #8]
 800152a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 800152c:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8001530:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001534:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001536:	4a04      	ldr	r2, [pc, #16]	@ (8001548 <__NVIC_SetPriorityGrouping+0x44>)
 8001538:	68bb      	ldr	r3, [r7, #8]
 800153a:	60d3      	str	r3, [r2, #12]
}
 800153c:	bf00      	nop
 800153e:	3714      	adds	r7, #20
 8001540:	46bd      	mov	sp, r7
 8001542:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001546:	4770      	bx	lr
 8001548:	e000ed00 	.word	0xe000ed00

0800154c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 800154c:	b480      	push	{r7}
 800154e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001550:	4b04      	ldr	r3, [pc, #16]	@ (8001564 <__NVIC_GetPriorityGrouping+0x18>)
 8001552:	68db      	ldr	r3, [r3, #12]
 8001554:	0a1b      	lsrs	r3, r3, #8
 8001556:	f003 0307 	and.w	r3, r3, #7
}
 800155a:	4618      	mov	r0, r3
 800155c:	46bd      	mov	sp, r7
 800155e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001562:	4770      	bx	lr
 8001564:	e000ed00 	.word	0xe000ed00

08001568 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001568:	b480      	push	{r7}
 800156a:	b083      	sub	sp, #12
 800156c:	af00      	add	r7, sp, #0
 800156e:	4603      	mov	r3, r0
 8001570:	6039      	str	r1, [r7, #0]
 8001572:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001574:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001578:	2b00      	cmp	r3, #0
 800157a:	db0a      	blt.n	8001592 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800157c:	683b      	ldr	r3, [r7, #0]
 800157e:	b2da      	uxtb	r2, r3
 8001580:	490c      	ldr	r1, [pc, #48]	@ (80015b4 <__NVIC_SetPriority+0x4c>)
 8001582:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001586:	0112      	lsls	r2, r2, #4
 8001588:	b2d2      	uxtb	r2, r2
 800158a:	440b      	add	r3, r1
 800158c:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001590:	e00a      	b.n	80015a8 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001592:	683b      	ldr	r3, [r7, #0]
 8001594:	b2da      	uxtb	r2, r3
 8001596:	4908      	ldr	r1, [pc, #32]	@ (80015b8 <__NVIC_SetPriority+0x50>)
 8001598:	79fb      	ldrb	r3, [r7, #7]
 800159a:	f003 030f 	and.w	r3, r3, #15
 800159e:	3b04      	subs	r3, #4
 80015a0:	0112      	lsls	r2, r2, #4
 80015a2:	b2d2      	uxtb	r2, r2
 80015a4:	440b      	add	r3, r1
 80015a6:	761a      	strb	r2, [r3, #24]
}
 80015a8:	bf00      	nop
 80015aa:	370c      	adds	r7, #12
 80015ac:	46bd      	mov	sp, r7
 80015ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015b2:	4770      	bx	lr
 80015b4:	e000e100 	.word	0xe000e100
 80015b8:	e000ed00 	.word	0xe000ed00

080015bc <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80015bc:	b480      	push	{r7}
 80015be:	b089      	sub	sp, #36	@ 0x24
 80015c0:	af00      	add	r7, sp, #0
 80015c2:	60f8      	str	r0, [r7, #12]
 80015c4:	60b9      	str	r1, [r7, #8]
 80015c6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80015c8:	68fb      	ldr	r3, [r7, #12]
 80015ca:	f003 0307 	and.w	r3, r3, #7
 80015ce:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80015d0:	69fb      	ldr	r3, [r7, #28]
 80015d2:	f1c3 0307 	rsb	r3, r3, #7
 80015d6:	2b04      	cmp	r3, #4
 80015d8:	bf28      	it	cs
 80015da:	2304      	movcs	r3, #4
 80015dc:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80015de:	69fb      	ldr	r3, [r7, #28]
 80015e0:	3304      	adds	r3, #4
 80015e2:	2b06      	cmp	r3, #6
 80015e4:	d902      	bls.n	80015ec <NVIC_EncodePriority+0x30>
 80015e6:	69fb      	ldr	r3, [r7, #28]
 80015e8:	3b03      	subs	r3, #3
 80015ea:	e000      	b.n	80015ee <NVIC_EncodePriority+0x32>
 80015ec:	2300      	movs	r3, #0
 80015ee:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80015f0:	f04f 32ff 	mov.w	r2, #4294967295
 80015f4:	69bb      	ldr	r3, [r7, #24]
 80015f6:	fa02 f303 	lsl.w	r3, r2, r3
 80015fa:	43da      	mvns	r2, r3
 80015fc:	68bb      	ldr	r3, [r7, #8]
 80015fe:	401a      	ands	r2, r3
 8001600:	697b      	ldr	r3, [r7, #20]
 8001602:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001604:	f04f 31ff 	mov.w	r1, #4294967295
 8001608:	697b      	ldr	r3, [r7, #20]
 800160a:	fa01 f303 	lsl.w	r3, r1, r3
 800160e:	43d9      	mvns	r1, r3
 8001610:	687b      	ldr	r3, [r7, #4]
 8001612:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001614:	4313      	orrs	r3, r2
         );
}
 8001616:	4618      	mov	r0, r3
 8001618:	3724      	adds	r7, #36	@ 0x24
 800161a:	46bd      	mov	sp, r7
 800161c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001620:	4770      	bx	lr
	...

08001624 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001624:	b580      	push	{r7, lr}
 8001626:	b082      	sub	sp, #8
 8001628:	af00      	add	r7, sp, #0
 800162a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800162c:	687b      	ldr	r3, [r7, #4]
 800162e:	3b01      	subs	r3, #1
 8001630:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8001634:	d301      	bcc.n	800163a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001636:	2301      	movs	r3, #1
 8001638:	e00f      	b.n	800165a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800163a:	4a0a      	ldr	r2, [pc, #40]	@ (8001664 <SysTick_Config+0x40>)
 800163c:	687b      	ldr	r3, [r7, #4]
 800163e:	3b01      	subs	r3, #1
 8001640:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001642:	210f      	movs	r1, #15
 8001644:	f04f 30ff 	mov.w	r0, #4294967295
 8001648:	f7ff ff8e 	bl	8001568 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800164c:	4b05      	ldr	r3, [pc, #20]	@ (8001664 <SysTick_Config+0x40>)
 800164e:	2200      	movs	r2, #0
 8001650:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001652:	4b04      	ldr	r3, [pc, #16]	@ (8001664 <SysTick_Config+0x40>)
 8001654:	2207      	movs	r2, #7
 8001656:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001658:	2300      	movs	r3, #0
}
 800165a:	4618      	mov	r0, r3
 800165c:	3708      	adds	r7, #8
 800165e:	46bd      	mov	sp, r7
 8001660:	bd80      	pop	{r7, pc}
 8001662:	bf00      	nop
 8001664:	e000e010 	.word	0xe000e010

08001668 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001668:	b580      	push	{r7, lr}
 800166a:	b082      	sub	sp, #8
 800166c:	af00      	add	r7, sp, #0
 800166e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001670:	6878      	ldr	r0, [r7, #4]
 8001672:	f7ff ff47 	bl	8001504 <__NVIC_SetPriorityGrouping>
}
 8001676:	bf00      	nop
 8001678:	3708      	adds	r7, #8
 800167a:	46bd      	mov	sp, r7
 800167c:	bd80      	pop	{r7, pc}

0800167e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800167e:	b580      	push	{r7, lr}
 8001680:	b086      	sub	sp, #24
 8001682:	af00      	add	r7, sp, #0
 8001684:	4603      	mov	r3, r0
 8001686:	60b9      	str	r1, [r7, #8]
 8001688:	607a      	str	r2, [r7, #4]
 800168a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 800168c:	2300      	movs	r3, #0
 800168e:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001690:	f7ff ff5c 	bl	800154c <__NVIC_GetPriorityGrouping>
 8001694:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001696:	687a      	ldr	r2, [r7, #4]
 8001698:	68b9      	ldr	r1, [r7, #8]
 800169a:	6978      	ldr	r0, [r7, #20]
 800169c:	f7ff ff8e 	bl	80015bc <NVIC_EncodePriority>
 80016a0:	4602      	mov	r2, r0
 80016a2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80016a6:	4611      	mov	r1, r2
 80016a8:	4618      	mov	r0, r3
 80016aa:	f7ff ff5d 	bl	8001568 <__NVIC_SetPriority>
}
 80016ae:	bf00      	nop
 80016b0:	3718      	adds	r7, #24
 80016b2:	46bd      	mov	sp, r7
 80016b4:	bd80      	pop	{r7, pc}

080016b6 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80016b6:	b580      	push	{r7, lr}
 80016b8:	b082      	sub	sp, #8
 80016ba:	af00      	add	r7, sp, #0
 80016bc:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80016be:	6878      	ldr	r0, [r7, #4]
 80016c0:	f7ff ffb0 	bl	8001624 <SysTick_Config>
 80016c4:	4603      	mov	r3, r0
}
 80016c6:	4618      	mov	r0, r3
 80016c8:	3708      	adds	r7, #8
 80016ca:	46bd      	mov	sp, r7
 80016cc:	bd80      	pop	{r7, pc}
	...

080016d0 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80016d0:	b480      	push	{r7}
 80016d2:	b089      	sub	sp, #36	@ 0x24
 80016d4:	af00      	add	r7, sp, #0
 80016d6:	6078      	str	r0, [r7, #4]
 80016d8:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 80016da:	2300      	movs	r3, #0
 80016dc:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 80016de:	2300      	movs	r3, #0
 80016e0:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 80016e2:	2300      	movs	r3, #0
 80016e4:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 80016e6:	2300      	movs	r3, #0
 80016e8:	61fb      	str	r3, [r7, #28]
 80016ea:	e159      	b.n	80019a0 <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 80016ec:	2201      	movs	r2, #1
 80016ee:	69fb      	ldr	r3, [r7, #28]
 80016f0:	fa02 f303 	lsl.w	r3, r2, r3
 80016f4:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80016f6:	683b      	ldr	r3, [r7, #0]
 80016f8:	681b      	ldr	r3, [r3, #0]
 80016fa:	697a      	ldr	r2, [r7, #20]
 80016fc:	4013      	ands	r3, r2
 80016fe:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8001700:	693a      	ldr	r2, [r7, #16]
 8001702:	697b      	ldr	r3, [r7, #20]
 8001704:	429a      	cmp	r2, r3
 8001706:	f040 8148 	bne.w	800199a <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800170a:	683b      	ldr	r3, [r7, #0]
 800170c:	685b      	ldr	r3, [r3, #4]
 800170e:	f003 0303 	and.w	r3, r3, #3
 8001712:	2b01      	cmp	r3, #1
 8001714:	d005      	beq.n	8001722 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001716:	683b      	ldr	r3, [r7, #0]
 8001718:	685b      	ldr	r3, [r3, #4]
 800171a:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800171e:	2b02      	cmp	r3, #2
 8001720:	d130      	bne.n	8001784 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8001722:	687b      	ldr	r3, [r7, #4]
 8001724:	689b      	ldr	r3, [r3, #8]
 8001726:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8001728:	69fb      	ldr	r3, [r7, #28]
 800172a:	005b      	lsls	r3, r3, #1
 800172c:	2203      	movs	r2, #3
 800172e:	fa02 f303 	lsl.w	r3, r2, r3
 8001732:	43db      	mvns	r3, r3
 8001734:	69ba      	ldr	r2, [r7, #24]
 8001736:	4013      	ands	r3, r2
 8001738:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800173a:	683b      	ldr	r3, [r7, #0]
 800173c:	68da      	ldr	r2, [r3, #12]
 800173e:	69fb      	ldr	r3, [r7, #28]
 8001740:	005b      	lsls	r3, r3, #1
 8001742:	fa02 f303 	lsl.w	r3, r2, r3
 8001746:	69ba      	ldr	r2, [r7, #24]
 8001748:	4313      	orrs	r3, r2
 800174a:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 800174c:	687b      	ldr	r3, [r7, #4]
 800174e:	69ba      	ldr	r2, [r7, #24]
 8001750:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001752:	687b      	ldr	r3, [r7, #4]
 8001754:	685b      	ldr	r3, [r3, #4]
 8001756:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001758:	2201      	movs	r2, #1
 800175a:	69fb      	ldr	r3, [r7, #28]
 800175c:	fa02 f303 	lsl.w	r3, r2, r3
 8001760:	43db      	mvns	r3, r3
 8001762:	69ba      	ldr	r2, [r7, #24]
 8001764:	4013      	ands	r3, r2
 8001766:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001768:	683b      	ldr	r3, [r7, #0]
 800176a:	685b      	ldr	r3, [r3, #4]
 800176c:	091b      	lsrs	r3, r3, #4
 800176e:	f003 0201 	and.w	r2, r3, #1
 8001772:	69fb      	ldr	r3, [r7, #28]
 8001774:	fa02 f303 	lsl.w	r3, r2, r3
 8001778:	69ba      	ldr	r2, [r7, #24]
 800177a:	4313      	orrs	r3, r2
 800177c:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800177e:	687b      	ldr	r3, [r7, #4]
 8001780:	69ba      	ldr	r2, [r7, #24]
 8001782:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001784:	683b      	ldr	r3, [r7, #0]
 8001786:	685b      	ldr	r3, [r3, #4]
 8001788:	f003 0303 	and.w	r3, r3, #3
 800178c:	2b03      	cmp	r3, #3
 800178e:	d017      	beq.n	80017c0 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001790:	687b      	ldr	r3, [r7, #4]
 8001792:	68db      	ldr	r3, [r3, #12]
 8001794:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8001796:	69fb      	ldr	r3, [r7, #28]
 8001798:	005b      	lsls	r3, r3, #1
 800179a:	2203      	movs	r2, #3
 800179c:	fa02 f303 	lsl.w	r3, r2, r3
 80017a0:	43db      	mvns	r3, r3
 80017a2:	69ba      	ldr	r2, [r7, #24]
 80017a4:	4013      	ands	r3, r2
 80017a6:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80017a8:	683b      	ldr	r3, [r7, #0]
 80017aa:	689a      	ldr	r2, [r3, #8]
 80017ac:	69fb      	ldr	r3, [r7, #28]
 80017ae:	005b      	lsls	r3, r3, #1
 80017b0:	fa02 f303 	lsl.w	r3, r2, r3
 80017b4:	69ba      	ldr	r2, [r7, #24]
 80017b6:	4313      	orrs	r3, r2
 80017b8:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 80017ba:	687b      	ldr	r3, [r7, #4]
 80017bc:	69ba      	ldr	r2, [r7, #24]
 80017be:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80017c0:	683b      	ldr	r3, [r7, #0]
 80017c2:	685b      	ldr	r3, [r3, #4]
 80017c4:	f003 0303 	and.w	r3, r3, #3
 80017c8:	2b02      	cmp	r3, #2
 80017ca:	d123      	bne.n	8001814 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80017cc:	69fb      	ldr	r3, [r7, #28]
 80017ce:	08da      	lsrs	r2, r3, #3
 80017d0:	687b      	ldr	r3, [r7, #4]
 80017d2:	3208      	adds	r2, #8
 80017d4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80017d8:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80017da:	69fb      	ldr	r3, [r7, #28]
 80017dc:	f003 0307 	and.w	r3, r3, #7
 80017e0:	009b      	lsls	r3, r3, #2
 80017e2:	220f      	movs	r2, #15
 80017e4:	fa02 f303 	lsl.w	r3, r2, r3
 80017e8:	43db      	mvns	r3, r3
 80017ea:	69ba      	ldr	r2, [r7, #24]
 80017ec:	4013      	ands	r3, r2
 80017ee:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 80017f0:	683b      	ldr	r3, [r7, #0]
 80017f2:	691a      	ldr	r2, [r3, #16]
 80017f4:	69fb      	ldr	r3, [r7, #28]
 80017f6:	f003 0307 	and.w	r3, r3, #7
 80017fa:	009b      	lsls	r3, r3, #2
 80017fc:	fa02 f303 	lsl.w	r3, r2, r3
 8001800:	69ba      	ldr	r2, [r7, #24]
 8001802:	4313      	orrs	r3, r2
 8001804:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8001806:	69fb      	ldr	r3, [r7, #28]
 8001808:	08da      	lsrs	r2, r3, #3
 800180a:	687b      	ldr	r3, [r7, #4]
 800180c:	3208      	adds	r2, #8
 800180e:	69b9      	ldr	r1, [r7, #24]
 8001810:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001814:	687b      	ldr	r3, [r7, #4]
 8001816:	681b      	ldr	r3, [r3, #0]
 8001818:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 800181a:	69fb      	ldr	r3, [r7, #28]
 800181c:	005b      	lsls	r3, r3, #1
 800181e:	2203      	movs	r2, #3
 8001820:	fa02 f303 	lsl.w	r3, r2, r3
 8001824:	43db      	mvns	r3, r3
 8001826:	69ba      	ldr	r2, [r7, #24]
 8001828:	4013      	ands	r3, r2
 800182a:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 800182c:	683b      	ldr	r3, [r7, #0]
 800182e:	685b      	ldr	r3, [r3, #4]
 8001830:	f003 0203 	and.w	r2, r3, #3
 8001834:	69fb      	ldr	r3, [r7, #28]
 8001836:	005b      	lsls	r3, r3, #1
 8001838:	fa02 f303 	lsl.w	r3, r2, r3
 800183c:	69ba      	ldr	r2, [r7, #24]
 800183e:	4313      	orrs	r3, r2
 8001840:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8001842:	687b      	ldr	r3, [r7, #4]
 8001844:	69ba      	ldr	r2, [r7, #24]
 8001846:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8001848:	683b      	ldr	r3, [r7, #0]
 800184a:	685b      	ldr	r3, [r3, #4]
 800184c:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8001850:	2b00      	cmp	r3, #0
 8001852:	f000 80a2 	beq.w	800199a <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001856:	2300      	movs	r3, #0
 8001858:	60fb      	str	r3, [r7, #12]
 800185a:	4b57      	ldr	r3, [pc, #348]	@ (80019b8 <HAL_GPIO_Init+0x2e8>)
 800185c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800185e:	4a56      	ldr	r2, [pc, #344]	@ (80019b8 <HAL_GPIO_Init+0x2e8>)
 8001860:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001864:	6453      	str	r3, [r2, #68]	@ 0x44
 8001866:	4b54      	ldr	r3, [pc, #336]	@ (80019b8 <HAL_GPIO_Init+0x2e8>)
 8001868:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800186a:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800186e:	60fb      	str	r3, [r7, #12]
 8001870:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8001872:	4a52      	ldr	r2, [pc, #328]	@ (80019bc <HAL_GPIO_Init+0x2ec>)
 8001874:	69fb      	ldr	r3, [r7, #28]
 8001876:	089b      	lsrs	r3, r3, #2
 8001878:	3302      	adds	r3, #2
 800187a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800187e:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8001880:	69fb      	ldr	r3, [r7, #28]
 8001882:	f003 0303 	and.w	r3, r3, #3
 8001886:	009b      	lsls	r3, r3, #2
 8001888:	220f      	movs	r2, #15
 800188a:	fa02 f303 	lsl.w	r3, r2, r3
 800188e:	43db      	mvns	r3, r3
 8001890:	69ba      	ldr	r2, [r7, #24]
 8001892:	4013      	ands	r3, r2
 8001894:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8001896:	687b      	ldr	r3, [r7, #4]
 8001898:	4a49      	ldr	r2, [pc, #292]	@ (80019c0 <HAL_GPIO_Init+0x2f0>)
 800189a:	4293      	cmp	r3, r2
 800189c:	d019      	beq.n	80018d2 <HAL_GPIO_Init+0x202>
 800189e:	687b      	ldr	r3, [r7, #4]
 80018a0:	4a48      	ldr	r2, [pc, #288]	@ (80019c4 <HAL_GPIO_Init+0x2f4>)
 80018a2:	4293      	cmp	r3, r2
 80018a4:	d013      	beq.n	80018ce <HAL_GPIO_Init+0x1fe>
 80018a6:	687b      	ldr	r3, [r7, #4]
 80018a8:	4a47      	ldr	r2, [pc, #284]	@ (80019c8 <HAL_GPIO_Init+0x2f8>)
 80018aa:	4293      	cmp	r3, r2
 80018ac:	d00d      	beq.n	80018ca <HAL_GPIO_Init+0x1fa>
 80018ae:	687b      	ldr	r3, [r7, #4]
 80018b0:	4a46      	ldr	r2, [pc, #280]	@ (80019cc <HAL_GPIO_Init+0x2fc>)
 80018b2:	4293      	cmp	r3, r2
 80018b4:	d007      	beq.n	80018c6 <HAL_GPIO_Init+0x1f6>
 80018b6:	687b      	ldr	r3, [r7, #4]
 80018b8:	4a45      	ldr	r2, [pc, #276]	@ (80019d0 <HAL_GPIO_Init+0x300>)
 80018ba:	4293      	cmp	r3, r2
 80018bc:	d101      	bne.n	80018c2 <HAL_GPIO_Init+0x1f2>
 80018be:	2304      	movs	r3, #4
 80018c0:	e008      	b.n	80018d4 <HAL_GPIO_Init+0x204>
 80018c2:	2307      	movs	r3, #7
 80018c4:	e006      	b.n	80018d4 <HAL_GPIO_Init+0x204>
 80018c6:	2303      	movs	r3, #3
 80018c8:	e004      	b.n	80018d4 <HAL_GPIO_Init+0x204>
 80018ca:	2302      	movs	r3, #2
 80018cc:	e002      	b.n	80018d4 <HAL_GPIO_Init+0x204>
 80018ce:	2301      	movs	r3, #1
 80018d0:	e000      	b.n	80018d4 <HAL_GPIO_Init+0x204>
 80018d2:	2300      	movs	r3, #0
 80018d4:	69fa      	ldr	r2, [r7, #28]
 80018d6:	f002 0203 	and.w	r2, r2, #3
 80018da:	0092      	lsls	r2, r2, #2
 80018dc:	4093      	lsls	r3, r2
 80018de:	69ba      	ldr	r2, [r7, #24]
 80018e0:	4313      	orrs	r3, r2
 80018e2:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80018e4:	4935      	ldr	r1, [pc, #212]	@ (80019bc <HAL_GPIO_Init+0x2ec>)
 80018e6:	69fb      	ldr	r3, [r7, #28]
 80018e8:	089b      	lsrs	r3, r3, #2
 80018ea:	3302      	adds	r3, #2
 80018ec:	69ba      	ldr	r2, [r7, #24]
 80018ee:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80018f2:	4b38      	ldr	r3, [pc, #224]	@ (80019d4 <HAL_GPIO_Init+0x304>)
 80018f4:	689b      	ldr	r3, [r3, #8]
 80018f6:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80018f8:	693b      	ldr	r3, [r7, #16]
 80018fa:	43db      	mvns	r3, r3
 80018fc:	69ba      	ldr	r2, [r7, #24]
 80018fe:	4013      	ands	r3, r2
 8001900:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8001902:	683b      	ldr	r3, [r7, #0]
 8001904:	685b      	ldr	r3, [r3, #4]
 8001906:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800190a:	2b00      	cmp	r3, #0
 800190c:	d003      	beq.n	8001916 <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 800190e:	69ba      	ldr	r2, [r7, #24]
 8001910:	693b      	ldr	r3, [r7, #16]
 8001912:	4313      	orrs	r3, r2
 8001914:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8001916:	4a2f      	ldr	r2, [pc, #188]	@ (80019d4 <HAL_GPIO_Init+0x304>)
 8001918:	69bb      	ldr	r3, [r7, #24]
 800191a:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 800191c:	4b2d      	ldr	r3, [pc, #180]	@ (80019d4 <HAL_GPIO_Init+0x304>)
 800191e:	68db      	ldr	r3, [r3, #12]
 8001920:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001922:	693b      	ldr	r3, [r7, #16]
 8001924:	43db      	mvns	r3, r3
 8001926:	69ba      	ldr	r2, [r7, #24]
 8001928:	4013      	ands	r3, r2
 800192a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 800192c:	683b      	ldr	r3, [r7, #0]
 800192e:	685b      	ldr	r3, [r3, #4]
 8001930:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8001934:	2b00      	cmp	r3, #0
 8001936:	d003      	beq.n	8001940 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 8001938:	69ba      	ldr	r2, [r7, #24]
 800193a:	693b      	ldr	r3, [r7, #16]
 800193c:	4313      	orrs	r3, r2
 800193e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8001940:	4a24      	ldr	r2, [pc, #144]	@ (80019d4 <HAL_GPIO_Init+0x304>)
 8001942:	69bb      	ldr	r3, [r7, #24]
 8001944:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8001946:	4b23      	ldr	r3, [pc, #140]	@ (80019d4 <HAL_GPIO_Init+0x304>)
 8001948:	685b      	ldr	r3, [r3, #4]
 800194a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800194c:	693b      	ldr	r3, [r7, #16]
 800194e:	43db      	mvns	r3, r3
 8001950:	69ba      	ldr	r2, [r7, #24]
 8001952:	4013      	ands	r3, r2
 8001954:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8001956:	683b      	ldr	r3, [r7, #0]
 8001958:	685b      	ldr	r3, [r3, #4]
 800195a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800195e:	2b00      	cmp	r3, #0
 8001960:	d003      	beq.n	800196a <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 8001962:	69ba      	ldr	r2, [r7, #24]
 8001964:	693b      	ldr	r3, [r7, #16]
 8001966:	4313      	orrs	r3, r2
 8001968:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 800196a:	4a1a      	ldr	r2, [pc, #104]	@ (80019d4 <HAL_GPIO_Init+0x304>)
 800196c:	69bb      	ldr	r3, [r7, #24]
 800196e:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001970:	4b18      	ldr	r3, [pc, #96]	@ (80019d4 <HAL_GPIO_Init+0x304>)
 8001972:	681b      	ldr	r3, [r3, #0]
 8001974:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001976:	693b      	ldr	r3, [r7, #16]
 8001978:	43db      	mvns	r3, r3
 800197a:	69ba      	ldr	r2, [r7, #24]
 800197c:	4013      	ands	r3, r2
 800197e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8001980:	683b      	ldr	r3, [r7, #0]
 8001982:	685b      	ldr	r3, [r3, #4]
 8001984:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001988:	2b00      	cmp	r3, #0
 800198a:	d003      	beq.n	8001994 <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 800198c:	69ba      	ldr	r2, [r7, #24]
 800198e:	693b      	ldr	r3, [r7, #16]
 8001990:	4313      	orrs	r3, r2
 8001992:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8001994:	4a0f      	ldr	r2, [pc, #60]	@ (80019d4 <HAL_GPIO_Init+0x304>)
 8001996:	69bb      	ldr	r3, [r7, #24]
 8001998:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 800199a:	69fb      	ldr	r3, [r7, #28]
 800199c:	3301      	adds	r3, #1
 800199e:	61fb      	str	r3, [r7, #28]
 80019a0:	69fb      	ldr	r3, [r7, #28]
 80019a2:	2b0f      	cmp	r3, #15
 80019a4:	f67f aea2 	bls.w	80016ec <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 80019a8:	bf00      	nop
 80019aa:	bf00      	nop
 80019ac:	3724      	adds	r7, #36	@ 0x24
 80019ae:	46bd      	mov	sp, r7
 80019b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019b4:	4770      	bx	lr
 80019b6:	bf00      	nop
 80019b8:	40023800 	.word	0x40023800
 80019bc:	40013800 	.word	0x40013800
 80019c0:	40020000 	.word	0x40020000
 80019c4:	40020400 	.word	0x40020400
 80019c8:	40020800 	.word	0x40020800
 80019cc:	40020c00 	.word	0x40020c00
 80019d0:	40021000 	.word	0x40021000
 80019d4:	40013c00 	.word	0x40013c00

080019d8 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80019d8:	b480      	push	{r7}
 80019da:	b083      	sub	sp, #12
 80019dc:	af00      	add	r7, sp, #0
 80019de:	6078      	str	r0, [r7, #4]
 80019e0:	460b      	mov	r3, r1
 80019e2:	807b      	strh	r3, [r7, #2]
 80019e4:	4613      	mov	r3, r2
 80019e6:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80019e8:	787b      	ldrb	r3, [r7, #1]
 80019ea:	2b00      	cmp	r3, #0
 80019ec:	d003      	beq.n	80019f6 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80019ee:	887a      	ldrh	r2, [r7, #2]
 80019f0:	687b      	ldr	r3, [r7, #4]
 80019f2:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 80019f4:	e003      	b.n	80019fe <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 80019f6:	887b      	ldrh	r3, [r7, #2]
 80019f8:	041a      	lsls	r2, r3, #16
 80019fa:	687b      	ldr	r3, [r7, #4]
 80019fc:	619a      	str	r2, [r3, #24]
}
 80019fe:	bf00      	nop
 8001a00:	370c      	adds	r7, #12
 8001a02:	46bd      	mov	sp, r7
 8001a04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a08:	4770      	bx	lr
	...

08001a0c <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001a0c:	b580      	push	{r7, lr}
 8001a0e:	b086      	sub	sp, #24
 8001a10:	af00      	add	r7, sp, #0
 8001a12:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8001a14:	687b      	ldr	r3, [r7, #4]
 8001a16:	2b00      	cmp	r3, #0
 8001a18:	d101      	bne.n	8001a1e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001a1a:	2301      	movs	r3, #1
 8001a1c:	e267      	b.n	8001eee <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001a1e:	687b      	ldr	r3, [r7, #4]
 8001a20:	681b      	ldr	r3, [r3, #0]
 8001a22:	f003 0301 	and.w	r3, r3, #1
 8001a26:	2b00      	cmp	r3, #0
 8001a28:	d075      	beq.n	8001b16 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 8001a2a:	4b88      	ldr	r3, [pc, #544]	@ (8001c4c <HAL_RCC_OscConfig+0x240>)
 8001a2c:	689b      	ldr	r3, [r3, #8]
 8001a2e:	f003 030c 	and.w	r3, r3, #12
 8001a32:	2b04      	cmp	r3, #4
 8001a34:	d00c      	beq.n	8001a50 <HAL_RCC_OscConfig+0x44>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001a36:	4b85      	ldr	r3, [pc, #532]	@ (8001c4c <HAL_RCC_OscConfig+0x240>)
 8001a38:	689b      	ldr	r3, [r3, #8]
 8001a3a:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 8001a3e:	2b08      	cmp	r3, #8
 8001a40:	d112      	bne.n	8001a68 <HAL_RCC_OscConfig+0x5c>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001a42:	4b82      	ldr	r3, [pc, #520]	@ (8001c4c <HAL_RCC_OscConfig+0x240>)
 8001a44:	685b      	ldr	r3, [r3, #4]
 8001a46:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8001a4a:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8001a4e:	d10b      	bne.n	8001a68 <HAL_RCC_OscConfig+0x5c>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001a50:	4b7e      	ldr	r3, [pc, #504]	@ (8001c4c <HAL_RCC_OscConfig+0x240>)
 8001a52:	681b      	ldr	r3, [r3, #0]
 8001a54:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001a58:	2b00      	cmp	r3, #0
 8001a5a:	d05b      	beq.n	8001b14 <HAL_RCC_OscConfig+0x108>
 8001a5c:	687b      	ldr	r3, [r7, #4]
 8001a5e:	685b      	ldr	r3, [r3, #4]
 8001a60:	2b00      	cmp	r3, #0
 8001a62:	d157      	bne.n	8001b14 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8001a64:	2301      	movs	r3, #1
 8001a66:	e242      	b.n	8001eee <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001a68:	687b      	ldr	r3, [r7, #4]
 8001a6a:	685b      	ldr	r3, [r3, #4]
 8001a6c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8001a70:	d106      	bne.n	8001a80 <HAL_RCC_OscConfig+0x74>
 8001a72:	4b76      	ldr	r3, [pc, #472]	@ (8001c4c <HAL_RCC_OscConfig+0x240>)
 8001a74:	681b      	ldr	r3, [r3, #0]
 8001a76:	4a75      	ldr	r2, [pc, #468]	@ (8001c4c <HAL_RCC_OscConfig+0x240>)
 8001a78:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001a7c:	6013      	str	r3, [r2, #0]
 8001a7e:	e01d      	b.n	8001abc <HAL_RCC_OscConfig+0xb0>
 8001a80:	687b      	ldr	r3, [r7, #4]
 8001a82:	685b      	ldr	r3, [r3, #4]
 8001a84:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8001a88:	d10c      	bne.n	8001aa4 <HAL_RCC_OscConfig+0x98>
 8001a8a:	4b70      	ldr	r3, [pc, #448]	@ (8001c4c <HAL_RCC_OscConfig+0x240>)
 8001a8c:	681b      	ldr	r3, [r3, #0]
 8001a8e:	4a6f      	ldr	r2, [pc, #444]	@ (8001c4c <HAL_RCC_OscConfig+0x240>)
 8001a90:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8001a94:	6013      	str	r3, [r2, #0]
 8001a96:	4b6d      	ldr	r3, [pc, #436]	@ (8001c4c <HAL_RCC_OscConfig+0x240>)
 8001a98:	681b      	ldr	r3, [r3, #0]
 8001a9a:	4a6c      	ldr	r2, [pc, #432]	@ (8001c4c <HAL_RCC_OscConfig+0x240>)
 8001a9c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001aa0:	6013      	str	r3, [r2, #0]
 8001aa2:	e00b      	b.n	8001abc <HAL_RCC_OscConfig+0xb0>
 8001aa4:	4b69      	ldr	r3, [pc, #420]	@ (8001c4c <HAL_RCC_OscConfig+0x240>)
 8001aa6:	681b      	ldr	r3, [r3, #0]
 8001aa8:	4a68      	ldr	r2, [pc, #416]	@ (8001c4c <HAL_RCC_OscConfig+0x240>)
 8001aaa:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8001aae:	6013      	str	r3, [r2, #0]
 8001ab0:	4b66      	ldr	r3, [pc, #408]	@ (8001c4c <HAL_RCC_OscConfig+0x240>)
 8001ab2:	681b      	ldr	r3, [r3, #0]
 8001ab4:	4a65      	ldr	r2, [pc, #404]	@ (8001c4c <HAL_RCC_OscConfig+0x240>)
 8001ab6:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8001aba:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if ((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8001abc:	687b      	ldr	r3, [r7, #4]
 8001abe:	685b      	ldr	r3, [r3, #4]
 8001ac0:	2b00      	cmp	r3, #0
 8001ac2:	d013      	beq.n	8001aec <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001ac4:	f7ff fcee 	bl	80014a4 <HAL_GetTick>
 8001ac8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001aca:	e008      	b.n	8001ade <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001acc:	f7ff fcea 	bl	80014a4 <HAL_GetTick>
 8001ad0:	4602      	mov	r2, r0
 8001ad2:	693b      	ldr	r3, [r7, #16]
 8001ad4:	1ad3      	subs	r3, r2, r3
 8001ad6:	2b64      	cmp	r3, #100	@ 0x64
 8001ad8:	d901      	bls.n	8001ade <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8001ada:	2303      	movs	r3, #3
 8001adc:	e207      	b.n	8001eee <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001ade:	4b5b      	ldr	r3, [pc, #364]	@ (8001c4c <HAL_RCC_OscConfig+0x240>)
 8001ae0:	681b      	ldr	r3, [r3, #0]
 8001ae2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001ae6:	2b00      	cmp	r3, #0
 8001ae8:	d0f0      	beq.n	8001acc <HAL_RCC_OscConfig+0xc0>
 8001aea:	e014      	b.n	8001b16 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001aec:	f7ff fcda 	bl	80014a4 <HAL_GetTick>
 8001af0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001af2:	e008      	b.n	8001b06 <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001af4:	f7ff fcd6 	bl	80014a4 <HAL_GetTick>
 8001af8:	4602      	mov	r2, r0
 8001afa:	693b      	ldr	r3, [r7, #16]
 8001afc:	1ad3      	subs	r3, r2, r3
 8001afe:	2b64      	cmp	r3, #100	@ 0x64
 8001b00:	d901      	bls.n	8001b06 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8001b02:	2303      	movs	r3, #3
 8001b04:	e1f3      	b.n	8001eee <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001b06:	4b51      	ldr	r3, [pc, #324]	@ (8001c4c <HAL_RCC_OscConfig+0x240>)
 8001b08:	681b      	ldr	r3, [r3, #0]
 8001b0a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001b0e:	2b00      	cmp	r3, #0
 8001b10:	d1f0      	bne.n	8001af4 <HAL_RCC_OscConfig+0xe8>
 8001b12:	e000      	b.n	8001b16 <HAL_RCC_OscConfig+0x10a>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001b14:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001b16:	687b      	ldr	r3, [r7, #4]
 8001b18:	681b      	ldr	r3, [r3, #0]
 8001b1a:	f003 0302 	and.w	r3, r3, #2
 8001b1e:	2b00      	cmp	r3, #0
 8001b20:	d063      	beq.n	8001bea <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 8001b22:	4b4a      	ldr	r3, [pc, #296]	@ (8001c4c <HAL_RCC_OscConfig+0x240>)
 8001b24:	689b      	ldr	r3, [r3, #8]
 8001b26:	f003 030c 	and.w	r3, r3, #12
 8001b2a:	2b00      	cmp	r3, #0
 8001b2c:	d00b      	beq.n	8001b46 <HAL_RCC_OscConfig+0x13a>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001b2e:	4b47      	ldr	r3, [pc, #284]	@ (8001c4c <HAL_RCC_OscConfig+0x240>)
 8001b30:	689b      	ldr	r3, [r3, #8]
 8001b32:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 8001b36:	2b08      	cmp	r3, #8
 8001b38:	d11c      	bne.n	8001b74 <HAL_RCC_OscConfig+0x168>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001b3a:	4b44      	ldr	r3, [pc, #272]	@ (8001c4c <HAL_RCC_OscConfig+0x240>)
 8001b3c:	685b      	ldr	r3, [r3, #4]
 8001b3e:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8001b42:	2b00      	cmp	r3, #0
 8001b44:	d116      	bne.n	8001b74 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001b46:	4b41      	ldr	r3, [pc, #260]	@ (8001c4c <HAL_RCC_OscConfig+0x240>)
 8001b48:	681b      	ldr	r3, [r3, #0]
 8001b4a:	f003 0302 	and.w	r3, r3, #2
 8001b4e:	2b00      	cmp	r3, #0
 8001b50:	d005      	beq.n	8001b5e <HAL_RCC_OscConfig+0x152>
 8001b52:	687b      	ldr	r3, [r7, #4]
 8001b54:	68db      	ldr	r3, [r3, #12]
 8001b56:	2b01      	cmp	r3, #1
 8001b58:	d001      	beq.n	8001b5e <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8001b5a:	2301      	movs	r3, #1
 8001b5c:	e1c7      	b.n	8001eee <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001b5e:	4b3b      	ldr	r3, [pc, #236]	@ (8001c4c <HAL_RCC_OscConfig+0x240>)
 8001b60:	681b      	ldr	r3, [r3, #0]
 8001b62:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8001b66:	687b      	ldr	r3, [r7, #4]
 8001b68:	691b      	ldr	r3, [r3, #16]
 8001b6a:	00db      	lsls	r3, r3, #3
 8001b6c:	4937      	ldr	r1, [pc, #220]	@ (8001c4c <HAL_RCC_OscConfig+0x240>)
 8001b6e:	4313      	orrs	r3, r2
 8001b70:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001b72:	e03a      	b.n	8001bea <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8001b74:	687b      	ldr	r3, [r7, #4]
 8001b76:	68db      	ldr	r3, [r3, #12]
 8001b78:	2b00      	cmp	r3, #0
 8001b7a:	d020      	beq.n	8001bbe <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001b7c:	4b34      	ldr	r3, [pc, #208]	@ (8001c50 <HAL_RCC_OscConfig+0x244>)
 8001b7e:	2201      	movs	r2, #1
 8001b80:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001b82:	f7ff fc8f 	bl	80014a4 <HAL_GetTick>
 8001b86:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001b88:	e008      	b.n	8001b9c <HAL_RCC_OscConfig+0x190>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001b8a:	f7ff fc8b 	bl	80014a4 <HAL_GetTick>
 8001b8e:	4602      	mov	r2, r0
 8001b90:	693b      	ldr	r3, [r7, #16]
 8001b92:	1ad3      	subs	r3, r2, r3
 8001b94:	2b02      	cmp	r3, #2
 8001b96:	d901      	bls.n	8001b9c <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8001b98:	2303      	movs	r3, #3
 8001b9a:	e1a8      	b.n	8001eee <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001b9c:	4b2b      	ldr	r3, [pc, #172]	@ (8001c4c <HAL_RCC_OscConfig+0x240>)
 8001b9e:	681b      	ldr	r3, [r3, #0]
 8001ba0:	f003 0302 	and.w	r3, r3, #2
 8001ba4:	2b00      	cmp	r3, #0
 8001ba6:	d0f0      	beq.n	8001b8a <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001ba8:	4b28      	ldr	r3, [pc, #160]	@ (8001c4c <HAL_RCC_OscConfig+0x240>)
 8001baa:	681b      	ldr	r3, [r3, #0]
 8001bac:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8001bb0:	687b      	ldr	r3, [r7, #4]
 8001bb2:	691b      	ldr	r3, [r3, #16]
 8001bb4:	00db      	lsls	r3, r3, #3
 8001bb6:	4925      	ldr	r1, [pc, #148]	@ (8001c4c <HAL_RCC_OscConfig+0x240>)
 8001bb8:	4313      	orrs	r3, r2
 8001bba:	600b      	str	r3, [r1, #0]
 8001bbc:	e015      	b.n	8001bea <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001bbe:	4b24      	ldr	r3, [pc, #144]	@ (8001c50 <HAL_RCC_OscConfig+0x244>)
 8001bc0:	2200      	movs	r2, #0
 8001bc2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001bc4:	f7ff fc6e 	bl	80014a4 <HAL_GetTick>
 8001bc8:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001bca:	e008      	b.n	8001bde <HAL_RCC_OscConfig+0x1d2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001bcc:	f7ff fc6a 	bl	80014a4 <HAL_GetTick>
 8001bd0:	4602      	mov	r2, r0
 8001bd2:	693b      	ldr	r3, [r7, #16]
 8001bd4:	1ad3      	subs	r3, r2, r3
 8001bd6:	2b02      	cmp	r3, #2
 8001bd8:	d901      	bls.n	8001bde <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8001bda:	2303      	movs	r3, #3
 8001bdc:	e187      	b.n	8001eee <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001bde:	4b1b      	ldr	r3, [pc, #108]	@ (8001c4c <HAL_RCC_OscConfig+0x240>)
 8001be0:	681b      	ldr	r3, [r3, #0]
 8001be2:	f003 0302 	and.w	r3, r3, #2
 8001be6:	2b00      	cmp	r3, #0
 8001be8:	d1f0      	bne.n	8001bcc <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001bea:	687b      	ldr	r3, [r7, #4]
 8001bec:	681b      	ldr	r3, [r3, #0]
 8001bee:	f003 0308 	and.w	r3, r3, #8
 8001bf2:	2b00      	cmp	r3, #0
 8001bf4:	d036      	beq.n	8001c64 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8001bf6:	687b      	ldr	r3, [r7, #4]
 8001bf8:	695b      	ldr	r3, [r3, #20]
 8001bfa:	2b00      	cmp	r3, #0
 8001bfc:	d016      	beq.n	8001c2c <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001bfe:	4b15      	ldr	r3, [pc, #84]	@ (8001c54 <HAL_RCC_OscConfig+0x248>)
 8001c00:	2201      	movs	r2, #1
 8001c02:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001c04:	f7ff fc4e 	bl	80014a4 <HAL_GetTick>
 8001c08:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001c0a:	e008      	b.n	8001c1e <HAL_RCC_OscConfig+0x212>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001c0c:	f7ff fc4a 	bl	80014a4 <HAL_GetTick>
 8001c10:	4602      	mov	r2, r0
 8001c12:	693b      	ldr	r3, [r7, #16]
 8001c14:	1ad3      	subs	r3, r2, r3
 8001c16:	2b02      	cmp	r3, #2
 8001c18:	d901      	bls.n	8001c1e <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8001c1a:	2303      	movs	r3, #3
 8001c1c:	e167      	b.n	8001eee <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001c1e:	4b0b      	ldr	r3, [pc, #44]	@ (8001c4c <HAL_RCC_OscConfig+0x240>)
 8001c20:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8001c22:	f003 0302 	and.w	r3, r3, #2
 8001c26:	2b00      	cmp	r3, #0
 8001c28:	d0f0      	beq.n	8001c0c <HAL_RCC_OscConfig+0x200>
 8001c2a:	e01b      	b.n	8001c64 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001c2c:	4b09      	ldr	r3, [pc, #36]	@ (8001c54 <HAL_RCC_OscConfig+0x248>)
 8001c2e:	2200      	movs	r2, #0
 8001c30:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001c32:	f7ff fc37 	bl	80014a4 <HAL_GetTick>
 8001c36:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001c38:	e00e      	b.n	8001c58 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001c3a:	f7ff fc33 	bl	80014a4 <HAL_GetTick>
 8001c3e:	4602      	mov	r2, r0
 8001c40:	693b      	ldr	r3, [r7, #16]
 8001c42:	1ad3      	subs	r3, r2, r3
 8001c44:	2b02      	cmp	r3, #2
 8001c46:	d907      	bls.n	8001c58 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8001c48:	2303      	movs	r3, #3
 8001c4a:	e150      	b.n	8001eee <HAL_RCC_OscConfig+0x4e2>
 8001c4c:	40023800 	.word	0x40023800
 8001c50:	42470000 	.word	0x42470000
 8001c54:	42470e80 	.word	0x42470e80
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001c58:	4b88      	ldr	r3, [pc, #544]	@ (8001e7c <HAL_RCC_OscConfig+0x470>)
 8001c5a:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8001c5c:	f003 0302 	and.w	r3, r3, #2
 8001c60:	2b00      	cmp	r3, #0
 8001c62:	d1ea      	bne.n	8001c3a <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001c64:	687b      	ldr	r3, [r7, #4]
 8001c66:	681b      	ldr	r3, [r3, #0]
 8001c68:	f003 0304 	and.w	r3, r3, #4
 8001c6c:	2b00      	cmp	r3, #0
 8001c6e:	f000 8097 	beq.w	8001da0 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001c72:	2300      	movs	r3, #0
 8001c74:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001c76:	4b81      	ldr	r3, [pc, #516]	@ (8001e7c <HAL_RCC_OscConfig+0x470>)
 8001c78:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001c7a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001c7e:	2b00      	cmp	r3, #0
 8001c80:	d10f      	bne.n	8001ca2 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001c82:	2300      	movs	r3, #0
 8001c84:	60bb      	str	r3, [r7, #8]
 8001c86:	4b7d      	ldr	r3, [pc, #500]	@ (8001e7c <HAL_RCC_OscConfig+0x470>)
 8001c88:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001c8a:	4a7c      	ldr	r2, [pc, #496]	@ (8001e7c <HAL_RCC_OscConfig+0x470>)
 8001c8c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001c90:	6413      	str	r3, [r2, #64]	@ 0x40
 8001c92:	4b7a      	ldr	r3, [pc, #488]	@ (8001e7c <HAL_RCC_OscConfig+0x470>)
 8001c94:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001c96:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001c9a:	60bb      	str	r3, [r7, #8]
 8001c9c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001c9e:	2301      	movs	r3, #1
 8001ca0:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001ca2:	4b77      	ldr	r3, [pc, #476]	@ (8001e80 <HAL_RCC_OscConfig+0x474>)
 8001ca4:	681b      	ldr	r3, [r3, #0]
 8001ca6:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001caa:	2b00      	cmp	r3, #0
 8001cac:	d118      	bne.n	8001ce0 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001cae:	4b74      	ldr	r3, [pc, #464]	@ (8001e80 <HAL_RCC_OscConfig+0x474>)
 8001cb0:	681b      	ldr	r3, [r3, #0]
 8001cb2:	4a73      	ldr	r2, [pc, #460]	@ (8001e80 <HAL_RCC_OscConfig+0x474>)
 8001cb4:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001cb8:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001cba:	f7ff fbf3 	bl	80014a4 <HAL_GetTick>
 8001cbe:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001cc0:	e008      	b.n	8001cd4 <HAL_RCC_OscConfig+0x2c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001cc2:	f7ff fbef 	bl	80014a4 <HAL_GetTick>
 8001cc6:	4602      	mov	r2, r0
 8001cc8:	693b      	ldr	r3, [r7, #16]
 8001cca:	1ad3      	subs	r3, r2, r3
 8001ccc:	2b02      	cmp	r3, #2
 8001cce:	d901      	bls.n	8001cd4 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8001cd0:	2303      	movs	r3, #3
 8001cd2:	e10c      	b.n	8001eee <HAL_RCC_OscConfig+0x4e2>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001cd4:	4b6a      	ldr	r3, [pc, #424]	@ (8001e80 <HAL_RCC_OscConfig+0x474>)
 8001cd6:	681b      	ldr	r3, [r3, #0]
 8001cd8:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001cdc:	2b00      	cmp	r3, #0
 8001cde:	d0f0      	beq.n	8001cc2 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001ce0:	687b      	ldr	r3, [r7, #4]
 8001ce2:	689b      	ldr	r3, [r3, #8]
 8001ce4:	2b01      	cmp	r3, #1
 8001ce6:	d106      	bne.n	8001cf6 <HAL_RCC_OscConfig+0x2ea>
 8001ce8:	4b64      	ldr	r3, [pc, #400]	@ (8001e7c <HAL_RCC_OscConfig+0x470>)
 8001cea:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001cec:	4a63      	ldr	r2, [pc, #396]	@ (8001e7c <HAL_RCC_OscConfig+0x470>)
 8001cee:	f043 0301 	orr.w	r3, r3, #1
 8001cf2:	6713      	str	r3, [r2, #112]	@ 0x70
 8001cf4:	e01c      	b.n	8001d30 <HAL_RCC_OscConfig+0x324>
 8001cf6:	687b      	ldr	r3, [r7, #4]
 8001cf8:	689b      	ldr	r3, [r3, #8]
 8001cfa:	2b05      	cmp	r3, #5
 8001cfc:	d10c      	bne.n	8001d18 <HAL_RCC_OscConfig+0x30c>
 8001cfe:	4b5f      	ldr	r3, [pc, #380]	@ (8001e7c <HAL_RCC_OscConfig+0x470>)
 8001d00:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001d02:	4a5e      	ldr	r2, [pc, #376]	@ (8001e7c <HAL_RCC_OscConfig+0x470>)
 8001d04:	f043 0304 	orr.w	r3, r3, #4
 8001d08:	6713      	str	r3, [r2, #112]	@ 0x70
 8001d0a:	4b5c      	ldr	r3, [pc, #368]	@ (8001e7c <HAL_RCC_OscConfig+0x470>)
 8001d0c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001d0e:	4a5b      	ldr	r2, [pc, #364]	@ (8001e7c <HAL_RCC_OscConfig+0x470>)
 8001d10:	f043 0301 	orr.w	r3, r3, #1
 8001d14:	6713      	str	r3, [r2, #112]	@ 0x70
 8001d16:	e00b      	b.n	8001d30 <HAL_RCC_OscConfig+0x324>
 8001d18:	4b58      	ldr	r3, [pc, #352]	@ (8001e7c <HAL_RCC_OscConfig+0x470>)
 8001d1a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001d1c:	4a57      	ldr	r2, [pc, #348]	@ (8001e7c <HAL_RCC_OscConfig+0x470>)
 8001d1e:	f023 0301 	bic.w	r3, r3, #1
 8001d22:	6713      	str	r3, [r2, #112]	@ 0x70
 8001d24:	4b55      	ldr	r3, [pc, #340]	@ (8001e7c <HAL_RCC_OscConfig+0x470>)
 8001d26:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001d28:	4a54      	ldr	r2, [pc, #336]	@ (8001e7c <HAL_RCC_OscConfig+0x470>)
 8001d2a:	f023 0304 	bic.w	r3, r3, #4
 8001d2e:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8001d30:	687b      	ldr	r3, [r7, #4]
 8001d32:	689b      	ldr	r3, [r3, #8]
 8001d34:	2b00      	cmp	r3, #0
 8001d36:	d015      	beq.n	8001d64 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001d38:	f7ff fbb4 	bl	80014a4 <HAL_GetTick>
 8001d3c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001d3e:	e00a      	b.n	8001d56 <HAL_RCC_OscConfig+0x34a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001d40:	f7ff fbb0 	bl	80014a4 <HAL_GetTick>
 8001d44:	4602      	mov	r2, r0
 8001d46:	693b      	ldr	r3, [r7, #16]
 8001d48:	1ad3      	subs	r3, r2, r3
 8001d4a:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001d4e:	4293      	cmp	r3, r2
 8001d50:	d901      	bls.n	8001d56 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8001d52:	2303      	movs	r3, #3
 8001d54:	e0cb      	b.n	8001eee <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001d56:	4b49      	ldr	r3, [pc, #292]	@ (8001e7c <HAL_RCC_OscConfig+0x470>)
 8001d58:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001d5a:	f003 0302 	and.w	r3, r3, #2
 8001d5e:	2b00      	cmp	r3, #0
 8001d60:	d0ee      	beq.n	8001d40 <HAL_RCC_OscConfig+0x334>
 8001d62:	e014      	b.n	8001d8e <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001d64:	f7ff fb9e 	bl	80014a4 <HAL_GetTick>
 8001d68:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001d6a:	e00a      	b.n	8001d82 <HAL_RCC_OscConfig+0x376>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001d6c:	f7ff fb9a 	bl	80014a4 <HAL_GetTick>
 8001d70:	4602      	mov	r2, r0
 8001d72:	693b      	ldr	r3, [r7, #16]
 8001d74:	1ad3      	subs	r3, r2, r3
 8001d76:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001d7a:	4293      	cmp	r3, r2
 8001d7c:	d901      	bls.n	8001d82 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8001d7e:	2303      	movs	r3, #3
 8001d80:	e0b5      	b.n	8001eee <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001d82:	4b3e      	ldr	r3, [pc, #248]	@ (8001e7c <HAL_RCC_OscConfig+0x470>)
 8001d84:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001d86:	f003 0302 	and.w	r3, r3, #2
 8001d8a:	2b00      	cmp	r3, #0
 8001d8c:	d1ee      	bne.n	8001d6c <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8001d8e:	7dfb      	ldrb	r3, [r7, #23]
 8001d90:	2b01      	cmp	r3, #1
 8001d92:	d105      	bne.n	8001da0 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001d94:	4b39      	ldr	r3, [pc, #228]	@ (8001e7c <HAL_RCC_OscConfig+0x470>)
 8001d96:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001d98:	4a38      	ldr	r2, [pc, #224]	@ (8001e7c <HAL_RCC_OscConfig+0x470>)
 8001d9a:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8001d9e:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001da0:	687b      	ldr	r3, [r7, #4]
 8001da2:	699b      	ldr	r3, [r3, #24]
 8001da4:	2b00      	cmp	r3, #0
 8001da6:	f000 80a1 	beq.w	8001eec <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8001daa:	4b34      	ldr	r3, [pc, #208]	@ (8001e7c <HAL_RCC_OscConfig+0x470>)
 8001dac:	689b      	ldr	r3, [r3, #8]
 8001dae:	f003 030c 	and.w	r3, r3, #12
 8001db2:	2b08      	cmp	r3, #8
 8001db4:	d05c      	beq.n	8001e70 <HAL_RCC_OscConfig+0x464>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001db6:	687b      	ldr	r3, [r7, #4]
 8001db8:	699b      	ldr	r3, [r3, #24]
 8001dba:	2b02      	cmp	r3, #2
 8001dbc:	d141      	bne.n	8001e42 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001dbe:	4b31      	ldr	r3, [pc, #196]	@ (8001e84 <HAL_RCC_OscConfig+0x478>)
 8001dc0:	2200      	movs	r2, #0
 8001dc2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001dc4:	f7ff fb6e 	bl	80014a4 <HAL_GetTick>
 8001dc8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001dca:	e008      	b.n	8001dde <HAL_RCC_OscConfig+0x3d2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001dcc:	f7ff fb6a 	bl	80014a4 <HAL_GetTick>
 8001dd0:	4602      	mov	r2, r0
 8001dd2:	693b      	ldr	r3, [r7, #16]
 8001dd4:	1ad3      	subs	r3, r2, r3
 8001dd6:	2b02      	cmp	r3, #2
 8001dd8:	d901      	bls.n	8001dde <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8001dda:	2303      	movs	r3, #3
 8001ddc:	e087      	b.n	8001eee <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001dde:	4b27      	ldr	r3, [pc, #156]	@ (8001e7c <HAL_RCC_OscConfig+0x470>)
 8001de0:	681b      	ldr	r3, [r3, #0]
 8001de2:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001de6:	2b00      	cmp	r3, #0
 8001de8:	d1f0      	bne.n	8001dcc <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8001dea:	687b      	ldr	r3, [r7, #4]
 8001dec:	69da      	ldr	r2, [r3, #28]
 8001dee:	687b      	ldr	r3, [r7, #4]
 8001df0:	6a1b      	ldr	r3, [r3, #32]
 8001df2:	431a      	orrs	r2, r3
 8001df4:	687b      	ldr	r3, [r7, #4]
 8001df6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001df8:	019b      	lsls	r3, r3, #6
 8001dfa:	431a      	orrs	r2, r3
 8001dfc:	687b      	ldr	r3, [r7, #4]
 8001dfe:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001e00:	085b      	lsrs	r3, r3, #1
 8001e02:	3b01      	subs	r3, #1
 8001e04:	041b      	lsls	r3, r3, #16
 8001e06:	431a      	orrs	r2, r3
 8001e08:	687b      	ldr	r3, [r7, #4]
 8001e0a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001e0c:	061b      	lsls	r3, r3, #24
 8001e0e:	491b      	ldr	r1, [pc, #108]	@ (8001e7c <HAL_RCC_OscConfig+0x470>)
 8001e10:	4313      	orrs	r3, r2
 8001e12:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001e14:	4b1b      	ldr	r3, [pc, #108]	@ (8001e84 <HAL_RCC_OscConfig+0x478>)
 8001e16:	2201      	movs	r2, #1
 8001e18:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001e1a:	f7ff fb43 	bl	80014a4 <HAL_GetTick>
 8001e1e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001e20:	e008      	b.n	8001e34 <HAL_RCC_OscConfig+0x428>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001e22:	f7ff fb3f 	bl	80014a4 <HAL_GetTick>
 8001e26:	4602      	mov	r2, r0
 8001e28:	693b      	ldr	r3, [r7, #16]
 8001e2a:	1ad3      	subs	r3, r2, r3
 8001e2c:	2b02      	cmp	r3, #2
 8001e2e:	d901      	bls.n	8001e34 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8001e30:	2303      	movs	r3, #3
 8001e32:	e05c      	b.n	8001eee <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001e34:	4b11      	ldr	r3, [pc, #68]	@ (8001e7c <HAL_RCC_OscConfig+0x470>)
 8001e36:	681b      	ldr	r3, [r3, #0]
 8001e38:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001e3c:	2b00      	cmp	r3, #0
 8001e3e:	d0f0      	beq.n	8001e22 <HAL_RCC_OscConfig+0x416>
 8001e40:	e054      	b.n	8001eec <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001e42:	4b10      	ldr	r3, [pc, #64]	@ (8001e84 <HAL_RCC_OscConfig+0x478>)
 8001e44:	2200      	movs	r2, #0
 8001e46:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001e48:	f7ff fb2c 	bl	80014a4 <HAL_GetTick>
 8001e4c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001e4e:	e008      	b.n	8001e62 <HAL_RCC_OscConfig+0x456>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001e50:	f7ff fb28 	bl	80014a4 <HAL_GetTick>
 8001e54:	4602      	mov	r2, r0
 8001e56:	693b      	ldr	r3, [r7, #16]
 8001e58:	1ad3      	subs	r3, r2, r3
 8001e5a:	2b02      	cmp	r3, #2
 8001e5c:	d901      	bls.n	8001e62 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8001e5e:	2303      	movs	r3, #3
 8001e60:	e045      	b.n	8001eee <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001e62:	4b06      	ldr	r3, [pc, #24]	@ (8001e7c <HAL_RCC_OscConfig+0x470>)
 8001e64:	681b      	ldr	r3, [r3, #0]
 8001e66:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001e6a:	2b00      	cmp	r3, #0
 8001e6c:	d1f0      	bne.n	8001e50 <HAL_RCC_OscConfig+0x444>
 8001e6e:	e03d      	b.n	8001eec <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001e70:	687b      	ldr	r3, [r7, #4]
 8001e72:	699b      	ldr	r3, [r3, #24]
 8001e74:	2b01      	cmp	r3, #1
 8001e76:	d107      	bne.n	8001e88 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8001e78:	2301      	movs	r3, #1
 8001e7a:	e038      	b.n	8001eee <HAL_RCC_OscConfig+0x4e2>
 8001e7c:	40023800 	.word	0x40023800
 8001e80:	40007000 	.word	0x40007000
 8001e84:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8001e88:	4b1b      	ldr	r3, [pc, #108]	@ (8001ef8 <HAL_RCC_OscConfig+0x4ec>)
 8001e8a:	685b      	ldr	r3, [r3, #4]
 8001e8c:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8001e8e:	687b      	ldr	r3, [r7, #4]
 8001e90:	699b      	ldr	r3, [r3, #24]
 8001e92:	2b01      	cmp	r3, #1
 8001e94:	d028      	beq.n	8001ee8 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001e96:	68fb      	ldr	r3, [r7, #12]
 8001e98:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 8001e9c:	687b      	ldr	r3, [r7, #4]
 8001e9e:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8001ea0:	429a      	cmp	r2, r3
 8001ea2:	d121      	bne.n	8001ee8 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8001ea4:	68fb      	ldr	r3, [r7, #12]
 8001ea6:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 8001eaa:	687b      	ldr	r3, [r7, #4]
 8001eac:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001eae:	429a      	cmp	r2, r3
 8001eb0:	d11a      	bne.n	8001ee8 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8001eb2:	68fa      	ldr	r2, [r7, #12]
 8001eb4:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 8001eb8:	4013      	ands	r3, r2
 8001eba:	687a      	ldr	r2, [r7, #4]
 8001ebc:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8001ebe:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8001ec0:	4293      	cmp	r3, r2
 8001ec2:	d111      	bne.n	8001ee8 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8001ec4:	68fb      	ldr	r3, [r7, #12]
 8001ec6:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 8001eca:	687b      	ldr	r3, [r7, #4]
 8001ecc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001ece:	085b      	lsrs	r3, r3, #1
 8001ed0:	3b01      	subs	r3, #1
 8001ed2:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8001ed4:	429a      	cmp	r2, r3
 8001ed6:	d107      	bne.n	8001ee8 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8001ed8:	68fb      	ldr	r3, [r7, #12]
 8001eda:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 8001ede:	687b      	ldr	r3, [r7, #4]
 8001ee0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001ee2:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8001ee4:	429a      	cmp	r2, r3
 8001ee6:	d001      	beq.n	8001eec <HAL_RCC_OscConfig+0x4e0>
#endif /* RCC_PLLCFGR_PLLR */
        {
          return HAL_ERROR;
 8001ee8:	2301      	movs	r3, #1
 8001eea:	e000      	b.n	8001eee <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8001eec:	2300      	movs	r3, #0
}
 8001eee:	4618      	mov	r0, r3
 8001ef0:	3718      	adds	r7, #24
 8001ef2:	46bd      	mov	sp, r7
 8001ef4:	bd80      	pop	{r7, pc}
 8001ef6:	bf00      	nop
 8001ef8:	40023800 	.word	0x40023800

08001efc <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001efc:	b580      	push	{r7, lr}
 8001efe:	b084      	sub	sp, #16
 8001f00:	af00      	add	r7, sp, #0
 8001f02:	6078      	str	r0, [r7, #4]
 8001f04:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8001f06:	687b      	ldr	r3, [r7, #4]
 8001f08:	2b00      	cmp	r3, #0
 8001f0a:	d101      	bne.n	8001f10 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001f0c:	2301      	movs	r3, #1
 8001f0e:	e0cc      	b.n	80020aa <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8001f10:	4b68      	ldr	r3, [pc, #416]	@ (80020b4 <HAL_RCC_ClockConfig+0x1b8>)
 8001f12:	681b      	ldr	r3, [r3, #0]
 8001f14:	f003 0307 	and.w	r3, r3, #7
 8001f18:	683a      	ldr	r2, [r7, #0]
 8001f1a:	429a      	cmp	r2, r3
 8001f1c:	d90c      	bls.n	8001f38 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001f1e:	4b65      	ldr	r3, [pc, #404]	@ (80020b4 <HAL_RCC_ClockConfig+0x1b8>)
 8001f20:	683a      	ldr	r2, [r7, #0]
 8001f22:	b2d2      	uxtb	r2, r2
 8001f24:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001f26:	4b63      	ldr	r3, [pc, #396]	@ (80020b4 <HAL_RCC_ClockConfig+0x1b8>)
 8001f28:	681b      	ldr	r3, [r3, #0]
 8001f2a:	f003 0307 	and.w	r3, r3, #7
 8001f2e:	683a      	ldr	r2, [r7, #0]
 8001f30:	429a      	cmp	r2, r3
 8001f32:	d001      	beq.n	8001f38 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8001f34:	2301      	movs	r3, #1
 8001f36:	e0b8      	b.n	80020aa <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001f38:	687b      	ldr	r3, [r7, #4]
 8001f3a:	681b      	ldr	r3, [r3, #0]
 8001f3c:	f003 0302 	and.w	r3, r3, #2
 8001f40:	2b00      	cmp	r3, #0
 8001f42:	d020      	beq.n	8001f86 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001f44:	687b      	ldr	r3, [r7, #4]
 8001f46:	681b      	ldr	r3, [r3, #0]
 8001f48:	f003 0304 	and.w	r3, r3, #4
 8001f4c:	2b00      	cmp	r3, #0
 8001f4e:	d005      	beq.n	8001f5c <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8001f50:	4b59      	ldr	r3, [pc, #356]	@ (80020b8 <HAL_RCC_ClockConfig+0x1bc>)
 8001f52:	689b      	ldr	r3, [r3, #8]
 8001f54:	4a58      	ldr	r2, [pc, #352]	@ (80020b8 <HAL_RCC_ClockConfig+0x1bc>)
 8001f56:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 8001f5a:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001f5c:	687b      	ldr	r3, [r7, #4]
 8001f5e:	681b      	ldr	r3, [r3, #0]
 8001f60:	f003 0308 	and.w	r3, r3, #8
 8001f64:	2b00      	cmp	r3, #0
 8001f66:	d005      	beq.n	8001f74 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8001f68:	4b53      	ldr	r3, [pc, #332]	@ (80020b8 <HAL_RCC_ClockConfig+0x1bc>)
 8001f6a:	689b      	ldr	r3, [r3, #8]
 8001f6c:	4a52      	ldr	r2, [pc, #328]	@ (80020b8 <HAL_RCC_ClockConfig+0x1bc>)
 8001f6e:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 8001f72:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001f74:	4b50      	ldr	r3, [pc, #320]	@ (80020b8 <HAL_RCC_ClockConfig+0x1bc>)
 8001f76:	689b      	ldr	r3, [r3, #8]
 8001f78:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8001f7c:	687b      	ldr	r3, [r7, #4]
 8001f7e:	689b      	ldr	r3, [r3, #8]
 8001f80:	494d      	ldr	r1, [pc, #308]	@ (80020b8 <HAL_RCC_ClockConfig+0x1bc>)
 8001f82:	4313      	orrs	r3, r2
 8001f84:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001f86:	687b      	ldr	r3, [r7, #4]
 8001f88:	681b      	ldr	r3, [r3, #0]
 8001f8a:	f003 0301 	and.w	r3, r3, #1
 8001f8e:	2b00      	cmp	r3, #0
 8001f90:	d044      	beq.n	800201c <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001f92:	687b      	ldr	r3, [r7, #4]
 8001f94:	685b      	ldr	r3, [r3, #4]
 8001f96:	2b01      	cmp	r3, #1
 8001f98:	d107      	bne.n	8001faa <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001f9a:	4b47      	ldr	r3, [pc, #284]	@ (80020b8 <HAL_RCC_ClockConfig+0x1bc>)
 8001f9c:	681b      	ldr	r3, [r3, #0]
 8001f9e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001fa2:	2b00      	cmp	r3, #0
 8001fa4:	d119      	bne.n	8001fda <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001fa6:	2301      	movs	r3, #1
 8001fa8:	e07f      	b.n	80020aa <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8001faa:	687b      	ldr	r3, [r7, #4]
 8001fac:	685b      	ldr	r3, [r3, #4]
 8001fae:	2b02      	cmp	r3, #2
 8001fb0:	d003      	beq.n	8001fba <HAL_RCC_ClockConfig+0xbe>
             (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8001fb2:	687b      	ldr	r3, [r7, #4]
 8001fb4:	685b      	ldr	r3, [r3, #4]
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8001fb6:	2b03      	cmp	r3, #3
 8001fb8:	d107      	bne.n	8001fca <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001fba:	4b3f      	ldr	r3, [pc, #252]	@ (80020b8 <HAL_RCC_ClockConfig+0x1bc>)
 8001fbc:	681b      	ldr	r3, [r3, #0]
 8001fbe:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001fc2:	2b00      	cmp	r3, #0
 8001fc4:	d109      	bne.n	8001fda <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001fc6:	2301      	movs	r3, #1
 8001fc8:	e06f      	b.n	80020aa <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001fca:	4b3b      	ldr	r3, [pc, #236]	@ (80020b8 <HAL_RCC_ClockConfig+0x1bc>)
 8001fcc:	681b      	ldr	r3, [r3, #0]
 8001fce:	f003 0302 	and.w	r3, r3, #2
 8001fd2:	2b00      	cmp	r3, #0
 8001fd4:	d101      	bne.n	8001fda <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001fd6:	2301      	movs	r3, #1
 8001fd8:	e067      	b.n	80020aa <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001fda:	4b37      	ldr	r3, [pc, #220]	@ (80020b8 <HAL_RCC_ClockConfig+0x1bc>)
 8001fdc:	689b      	ldr	r3, [r3, #8]
 8001fde:	f023 0203 	bic.w	r2, r3, #3
 8001fe2:	687b      	ldr	r3, [r7, #4]
 8001fe4:	685b      	ldr	r3, [r3, #4]
 8001fe6:	4934      	ldr	r1, [pc, #208]	@ (80020b8 <HAL_RCC_ClockConfig+0x1bc>)
 8001fe8:	4313      	orrs	r3, r2
 8001fea:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001fec:	f7ff fa5a 	bl	80014a4 <HAL_GetTick>
 8001ff0:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001ff2:	e00a      	b.n	800200a <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001ff4:	f7ff fa56 	bl	80014a4 <HAL_GetTick>
 8001ff8:	4602      	mov	r2, r0
 8001ffa:	68fb      	ldr	r3, [r7, #12]
 8001ffc:	1ad3      	subs	r3, r2, r3
 8001ffe:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002002:	4293      	cmp	r3, r2
 8002004:	d901      	bls.n	800200a <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8002006:	2303      	movs	r3, #3
 8002008:	e04f      	b.n	80020aa <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800200a:	4b2b      	ldr	r3, [pc, #172]	@ (80020b8 <HAL_RCC_ClockConfig+0x1bc>)
 800200c:	689b      	ldr	r3, [r3, #8]
 800200e:	f003 020c 	and.w	r2, r3, #12
 8002012:	687b      	ldr	r3, [r7, #4]
 8002014:	685b      	ldr	r3, [r3, #4]
 8002016:	009b      	lsls	r3, r3, #2
 8002018:	429a      	cmp	r2, r3
 800201a:	d1eb      	bne.n	8001ff4 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 800201c:	4b25      	ldr	r3, [pc, #148]	@ (80020b4 <HAL_RCC_ClockConfig+0x1b8>)
 800201e:	681b      	ldr	r3, [r3, #0]
 8002020:	f003 0307 	and.w	r3, r3, #7
 8002024:	683a      	ldr	r2, [r7, #0]
 8002026:	429a      	cmp	r2, r3
 8002028:	d20c      	bcs.n	8002044 <HAL_RCC_ClockConfig+0x148>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800202a:	4b22      	ldr	r3, [pc, #136]	@ (80020b4 <HAL_RCC_ClockConfig+0x1b8>)
 800202c:	683a      	ldr	r2, [r7, #0]
 800202e:	b2d2      	uxtb	r2, r2
 8002030:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002032:	4b20      	ldr	r3, [pc, #128]	@ (80020b4 <HAL_RCC_ClockConfig+0x1b8>)
 8002034:	681b      	ldr	r3, [r3, #0]
 8002036:	f003 0307 	and.w	r3, r3, #7
 800203a:	683a      	ldr	r2, [r7, #0]
 800203c:	429a      	cmp	r2, r3
 800203e:	d001      	beq.n	8002044 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8002040:	2301      	movs	r3, #1
 8002042:	e032      	b.n	80020aa <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002044:	687b      	ldr	r3, [r7, #4]
 8002046:	681b      	ldr	r3, [r3, #0]
 8002048:	f003 0304 	and.w	r3, r3, #4
 800204c:	2b00      	cmp	r3, #0
 800204e:	d008      	beq.n	8002062 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002050:	4b19      	ldr	r3, [pc, #100]	@ (80020b8 <HAL_RCC_ClockConfig+0x1bc>)
 8002052:	689b      	ldr	r3, [r3, #8]
 8002054:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 8002058:	687b      	ldr	r3, [r7, #4]
 800205a:	68db      	ldr	r3, [r3, #12]
 800205c:	4916      	ldr	r1, [pc, #88]	@ (80020b8 <HAL_RCC_ClockConfig+0x1bc>)
 800205e:	4313      	orrs	r3, r2
 8002060:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002062:	687b      	ldr	r3, [r7, #4]
 8002064:	681b      	ldr	r3, [r3, #0]
 8002066:	f003 0308 	and.w	r3, r3, #8
 800206a:	2b00      	cmp	r3, #0
 800206c:	d009      	beq.n	8002082 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800206e:	4b12      	ldr	r3, [pc, #72]	@ (80020b8 <HAL_RCC_ClockConfig+0x1bc>)
 8002070:	689b      	ldr	r3, [r3, #8]
 8002072:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8002076:	687b      	ldr	r3, [r7, #4]
 8002078:	691b      	ldr	r3, [r3, #16]
 800207a:	00db      	lsls	r3, r3, #3
 800207c:	490e      	ldr	r1, [pc, #56]	@ (80020b8 <HAL_RCC_ClockConfig+0x1bc>)
 800207e:	4313      	orrs	r3, r2
 8002080:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8002082:	f000 f821 	bl	80020c8 <HAL_RCC_GetSysClockFreq>
 8002086:	4602      	mov	r2, r0
 8002088:	4b0b      	ldr	r3, [pc, #44]	@ (80020b8 <HAL_RCC_ClockConfig+0x1bc>)
 800208a:	689b      	ldr	r3, [r3, #8]
 800208c:	091b      	lsrs	r3, r3, #4
 800208e:	f003 030f 	and.w	r3, r3, #15
 8002092:	490a      	ldr	r1, [pc, #40]	@ (80020bc <HAL_RCC_ClockConfig+0x1c0>)
 8002094:	5ccb      	ldrb	r3, [r1, r3]
 8002096:	fa22 f303 	lsr.w	r3, r2, r3
 800209a:	4a09      	ldr	r2, [pc, #36]	@ (80020c0 <HAL_RCC_ClockConfig+0x1c4>)
 800209c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick(uwTickPrio);
 800209e:	4b09      	ldr	r3, [pc, #36]	@ (80020c4 <HAL_RCC_ClockConfig+0x1c8>)
 80020a0:	681b      	ldr	r3, [r3, #0]
 80020a2:	4618      	mov	r0, r3
 80020a4:	f7ff f9ba 	bl	800141c <HAL_InitTick>

  return HAL_OK;
 80020a8:	2300      	movs	r3, #0
}
 80020aa:	4618      	mov	r0, r3
 80020ac:	3710      	adds	r7, #16
 80020ae:	46bd      	mov	sp, r7
 80020b0:	bd80      	pop	{r7, pc}
 80020b2:	bf00      	nop
 80020b4:	40023c00 	.word	0x40023c00
 80020b8:	40023800 	.word	0x40023800
 80020bc:	0801b510 	.word	0x0801b510
 80020c0:	20000000 	.word	0x20000000
 80020c4:	20000004 	.word	0x20000004

080020c8 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80020c8:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80020cc:	b090      	sub	sp, #64	@ 0x40
 80020ce:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 80020d0:	2300      	movs	r3, #0
 80020d2:	637b      	str	r3, [r7, #52]	@ 0x34
  uint32_t pllvco = 0U;
 80020d4:	2300      	movs	r3, #0
 80020d6:	63fb      	str	r3, [r7, #60]	@ 0x3c
  uint32_t pllp = 0U;
 80020d8:	2300      	movs	r3, #0
 80020da:	633b      	str	r3, [r7, #48]	@ 0x30
  uint32_t sysclockfreq = 0U;
 80020dc:	2300      	movs	r3, #0
 80020de:	63bb      	str	r3, [r7, #56]	@ 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80020e0:	4b59      	ldr	r3, [pc, #356]	@ (8002248 <HAL_RCC_GetSysClockFreq+0x180>)
 80020e2:	689b      	ldr	r3, [r3, #8]
 80020e4:	f003 030c 	and.w	r3, r3, #12
 80020e8:	2b08      	cmp	r3, #8
 80020ea:	d00d      	beq.n	8002108 <HAL_RCC_GetSysClockFreq+0x40>
 80020ec:	2b08      	cmp	r3, #8
 80020ee:	f200 80a1 	bhi.w	8002234 <HAL_RCC_GetSysClockFreq+0x16c>
 80020f2:	2b00      	cmp	r3, #0
 80020f4:	d002      	beq.n	80020fc <HAL_RCC_GetSysClockFreq+0x34>
 80020f6:	2b04      	cmp	r3, #4
 80020f8:	d003      	beq.n	8002102 <HAL_RCC_GetSysClockFreq+0x3a>
 80020fa:	e09b      	b.n	8002234 <HAL_RCC_GetSysClockFreq+0x16c>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80020fc:	4b53      	ldr	r3, [pc, #332]	@ (800224c <HAL_RCC_GetSysClockFreq+0x184>)
 80020fe:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 8002100:	e09b      	b.n	800223a <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8002102:	4b53      	ldr	r3, [pc, #332]	@ (8002250 <HAL_RCC_GetSysClockFreq+0x188>)
 8002104:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 8002106:	e098      	b.n	800223a <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8002108:	4b4f      	ldr	r3, [pc, #316]	@ (8002248 <HAL_RCC_GetSysClockFreq+0x180>)
 800210a:	685b      	ldr	r3, [r3, #4]
 800210c:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8002110:	637b      	str	r3, [r7, #52]	@ 0x34
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8002112:	4b4d      	ldr	r3, [pc, #308]	@ (8002248 <HAL_RCC_GetSysClockFreq+0x180>)
 8002114:	685b      	ldr	r3, [r3, #4]
 8002116:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800211a:	2b00      	cmp	r3, #0
 800211c:	d028      	beq.n	8002170 <HAL_RCC_GetSysClockFreq+0xa8>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800211e:	4b4a      	ldr	r3, [pc, #296]	@ (8002248 <HAL_RCC_GetSysClockFreq+0x180>)
 8002120:	685b      	ldr	r3, [r3, #4]
 8002122:	099b      	lsrs	r3, r3, #6
 8002124:	2200      	movs	r2, #0
 8002126:	623b      	str	r3, [r7, #32]
 8002128:	627a      	str	r2, [r7, #36]	@ 0x24
 800212a:	6a3b      	ldr	r3, [r7, #32]
 800212c:	f3c3 0008 	ubfx	r0, r3, #0, #9
 8002130:	2100      	movs	r1, #0
 8002132:	4b47      	ldr	r3, [pc, #284]	@ (8002250 <HAL_RCC_GetSysClockFreq+0x188>)
 8002134:	fb03 f201 	mul.w	r2, r3, r1
 8002138:	2300      	movs	r3, #0
 800213a:	fb00 f303 	mul.w	r3, r0, r3
 800213e:	4413      	add	r3, r2
 8002140:	4a43      	ldr	r2, [pc, #268]	@ (8002250 <HAL_RCC_GetSysClockFreq+0x188>)
 8002142:	fba0 1202 	umull	r1, r2, r0, r2
 8002146:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8002148:	460a      	mov	r2, r1
 800214a:	62ba      	str	r2, [r7, #40]	@ 0x28
 800214c:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800214e:	4413      	add	r3, r2
 8002150:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8002152:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002154:	2200      	movs	r2, #0
 8002156:	61bb      	str	r3, [r7, #24]
 8002158:	61fa      	str	r2, [r7, #28]
 800215a:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800215e:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	@ 0x28
 8002162:	f7fe fcab 	bl	8000abc <__aeabi_uldivmod>
 8002166:	4602      	mov	r2, r0
 8002168:	460b      	mov	r3, r1
 800216a:	4613      	mov	r3, r2
 800216c:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800216e:	e053      	b.n	8002218 <HAL_RCC_GetSysClockFreq+0x150>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002170:	4b35      	ldr	r3, [pc, #212]	@ (8002248 <HAL_RCC_GetSysClockFreq+0x180>)
 8002172:	685b      	ldr	r3, [r3, #4]
 8002174:	099b      	lsrs	r3, r3, #6
 8002176:	2200      	movs	r2, #0
 8002178:	613b      	str	r3, [r7, #16]
 800217a:	617a      	str	r2, [r7, #20]
 800217c:	693b      	ldr	r3, [r7, #16]
 800217e:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 8002182:	f04f 0b00 	mov.w	fp, #0
 8002186:	4652      	mov	r2, sl
 8002188:	465b      	mov	r3, fp
 800218a:	f04f 0000 	mov.w	r0, #0
 800218e:	f04f 0100 	mov.w	r1, #0
 8002192:	0159      	lsls	r1, r3, #5
 8002194:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8002198:	0150      	lsls	r0, r2, #5
 800219a:	4602      	mov	r2, r0
 800219c:	460b      	mov	r3, r1
 800219e:	ebb2 080a 	subs.w	r8, r2, sl
 80021a2:	eb63 090b 	sbc.w	r9, r3, fp
 80021a6:	f04f 0200 	mov.w	r2, #0
 80021aa:	f04f 0300 	mov.w	r3, #0
 80021ae:	ea4f 1389 	mov.w	r3, r9, lsl #6
 80021b2:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 80021b6:	ea4f 1288 	mov.w	r2, r8, lsl #6
 80021ba:	ebb2 0408 	subs.w	r4, r2, r8
 80021be:	eb63 0509 	sbc.w	r5, r3, r9
 80021c2:	f04f 0200 	mov.w	r2, #0
 80021c6:	f04f 0300 	mov.w	r3, #0
 80021ca:	00eb      	lsls	r3, r5, #3
 80021cc:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80021d0:	00e2      	lsls	r2, r4, #3
 80021d2:	4614      	mov	r4, r2
 80021d4:	461d      	mov	r5, r3
 80021d6:	eb14 030a 	adds.w	r3, r4, sl
 80021da:	603b      	str	r3, [r7, #0]
 80021dc:	eb45 030b 	adc.w	r3, r5, fp
 80021e0:	607b      	str	r3, [r7, #4]
 80021e2:	f04f 0200 	mov.w	r2, #0
 80021e6:	f04f 0300 	mov.w	r3, #0
 80021ea:	e9d7 4500 	ldrd	r4, r5, [r7]
 80021ee:	4629      	mov	r1, r5
 80021f0:	028b      	lsls	r3, r1, #10
 80021f2:	4621      	mov	r1, r4
 80021f4:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 80021f8:	4621      	mov	r1, r4
 80021fa:	028a      	lsls	r2, r1, #10
 80021fc:	4610      	mov	r0, r2
 80021fe:	4619      	mov	r1, r3
 8002200:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002202:	2200      	movs	r2, #0
 8002204:	60bb      	str	r3, [r7, #8]
 8002206:	60fa      	str	r2, [r7, #12]
 8002208:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800220c:	f7fe fc56 	bl	8000abc <__aeabi_uldivmod>
 8002210:	4602      	mov	r2, r0
 8002212:	460b      	mov	r3, r1
 8002214:	4613      	mov	r3, r2
 8002216:	63fb      	str	r3, [r7, #60]	@ 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) * 2U);
 8002218:	4b0b      	ldr	r3, [pc, #44]	@ (8002248 <HAL_RCC_GetSysClockFreq+0x180>)
 800221a:	685b      	ldr	r3, [r3, #4]
 800221c:	0c1b      	lsrs	r3, r3, #16
 800221e:	f003 0303 	and.w	r3, r3, #3
 8002222:	3301      	adds	r3, #1
 8002224:	005b      	lsls	r3, r3, #1
 8002226:	633b      	str	r3, [r7, #48]	@ 0x30

      sysclockfreq = pllvco / pllp;
 8002228:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 800222a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800222c:	fbb2 f3f3 	udiv	r3, r2, r3
 8002230:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 8002232:	e002      	b.n	800223a <HAL_RCC_GetSysClockFreq+0x172>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8002234:	4b05      	ldr	r3, [pc, #20]	@ (800224c <HAL_RCC_GetSysClockFreq+0x184>)
 8002236:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 8002238:	bf00      	nop
    }
  }
  return sysclockfreq;
 800223a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
}
 800223c:	4618      	mov	r0, r3
 800223e:	3740      	adds	r7, #64	@ 0x40
 8002240:	46bd      	mov	sp, r7
 8002242:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8002246:	bf00      	nop
 8002248:	40023800 	.word	0x40023800
 800224c:	00f42400 	.word	0x00f42400
 8002250:	017d7840 	.word	0x017d7840

08002254 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8002254:	b580      	push	{r7, lr}
 8002256:	b082      	sub	sp, #8
 8002258:	af00      	add	r7, sp, #0
 800225a:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 800225c:	687b      	ldr	r3, [r7, #4]
 800225e:	2b00      	cmp	r3, #0
 8002260:	d101      	bne.n	8002266 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8002262:	2301      	movs	r3, #1
 8002264:	e07b      	b.n	800235e <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8002266:	687b      	ldr	r3, [r7, #4]
 8002268:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800226a:	2b00      	cmp	r3, #0
 800226c:	d108      	bne.n	8002280 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 800226e:	687b      	ldr	r3, [r7, #4]
 8002270:	685b      	ldr	r3, [r3, #4]
 8002272:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8002276:	d009      	beq.n	800228c <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8002278:	687b      	ldr	r3, [r7, #4]
 800227a:	2200      	movs	r2, #0
 800227c:	61da      	str	r2, [r3, #28]
 800227e:	e005      	b.n	800228c <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8002280:	687b      	ldr	r3, [r7, #4]
 8002282:	2200      	movs	r2, #0
 8002284:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8002286:	687b      	ldr	r3, [r7, #4]
 8002288:	2200      	movs	r2, #0
 800228a:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800228c:	687b      	ldr	r3, [r7, #4]
 800228e:	2200      	movs	r2, #0
 8002290:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8002292:	687b      	ldr	r3, [r7, #4]
 8002294:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8002298:	b2db      	uxtb	r3, r3
 800229a:	2b00      	cmp	r3, #0
 800229c:	d106      	bne.n	80022ac <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 800229e:	687b      	ldr	r3, [r7, #4]
 80022a0:	2200      	movs	r2, #0
 80022a2:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 80022a6:	6878      	ldr	r0, [r7, #4]
 80022a8:	f7fe ff8c 	bl	80011c4 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 80022ac:	687b      	ldr	r3, [r7, #4]
 80022ae:	2202      	movs	r2, #2
 80022b0:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 80022b4:	687b      	ldr	r3, [r7, #4]
 80022b6:	681b      	ldr	r3, [r3, #0]
 80022b8:	681a      	ldr	r2, [r3, #0]
 80022ba:	687b      	ldr	r3, [r7, #4]
 80022bc:	681b      	ldr	r3, [r3, #0]
 80022be:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 80022c2:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 80022c4:	687b      	ldr	r3, [r7, #4]
 80022c6:	685b      	ldr	r3, [r3, #4]
 80022c8:	f403 7282 	and.w	r2, r3, #260	@ 0x104
 80022cc:	687b      	ldr	r3, [r7, #4]
 80022ce:	689b      	ldr	r3, [r3, #8]
 80022d0:	f403 4304 	and.w	r3, r3, #33792	@ 0x8400
 80022d4:	431a      	orrs	r2, r3
 80022d6:	687b      	ldr	r3, [r7, #4]
 80022d8:	68db      	ldr	r3, [r3, #12]
 80022da:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80022de:	431a      	orrs	r2, r3
 80022e0:	687b      	ldr	r3, [r7, #4]
 80022e2:	691b      	ldr	r3, [r3, #16]
 80022e4:	f003 0302 	and.w	r3, r3, #2
 80022e8:	431a      	orrs	r2, r3
 80022ea:	687b      	ldr	r3, [r7, #4]
 80022ec:	695b      	ldr	r3, [r3, #20]
 80022ee:	f003 0301 	and.w	r3, r3, #1
 80022f2:	431a      	orrs	r2, r3
 80022f4:	687b      	ldr	r3, [r7, #4]
 80022f6:	699b      	ldr	r3, [r3, #24]
 80022f8:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80022fc:	431a      	orrs	r2, r3
 80022fe:	687b      	ldr	r3, [r7, #4]
 8002300:	69db      	ldr	r3, [r3, #28]
 8002302:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8002306:	431a      	orrs	r2, r3
 8002308:	687b      	ldr	r3, [r7, #4]
 800230a:	6a1b      	ldr	r3, [r3, #32]
 800230c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002310:	ea42 0103 	orr.w	r1, r2, r3
 8002314:	687b      	ldr	r3, [r7, #4]
 8002316:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002318:	f403 5200 	and.w	r2, r3, #8192	@ 0x2000
 800231c:	687b      	ldr	r3, [r7, #4]
 800231e:	681b      	ldr	r3, [r3, #0]
 8002320:	430a      	orrs	r2, r1
 8002322:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 8002324:	687b      	ldr	r3, [r7, #4]
 8002326:	699b      	ldr	r3, [r3, #24]
 8002328:	0c1b      	lsrs	r3, r3, #16
 800232a:	f003 0104 	and.w	r1, r3, #4
 800232e:	687b      	ldr	r3, [r7, #4]
 8002330:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002332:	f003 0210 	and.w	r2, r3, #16
 8002336:	687b      	ldr	r3, [r7, #4]
 8002338:	681b      	ldr	r3, [r3, #0]
 800233a:	430a      	orrs	r2, r1
 800233c:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 800233e:	687b      	ldr	r3, [r7, #4]
 8002340:	681b      	ldr	r3, [r3, #0]
 8002342:	69da      	ldr	r2, [r3, #28]
 8002344:	687b      	ldr	r3, [r7, #4]
 8002346:	681b      	ldr	r3, [r3, #0]
 8002348:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 800234c:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 800234e:	687b      	ldr	r3, [r7, #4]
 8002350:	2200      	movs	r2, #0
 8002352:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8002354:	687b      	ldr	r3, [r7, #4]
 8002356:	2201      	movs	r2, #1
 8002358:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  return HAL_OK;
 800235c:	2300      	movs	r3, #0
}
 800235e:	4618      	mov	r0, r3
 8002360:	3708      	adds	r7, #8
 8002362:	46bd      	mov	sp, r7
 8002364:	bd80      	pop	{r7, pc}

08002366 <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002366:	b580      	push	{r7, lr}
 8002368:	b088      	sub	sp, #32
 800236a:	af00      	add	r7, sp, #0
 800236c:	60f8      	str	r0, [r7, #12]
 800236e:	60b9      	str	r1, [r7, #8]
 8002370:	603b      	str	r3, [r7, #0]
 8002372:	4613      	mov	r3, r2
 8002374:	80fb      	strh	r3, [r7, #6]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8002376:	f7ff f895 	bl	80014a4 <HAL_GetTick>
 800237a:	61f8      	str	r0, [r7, #28]
  initial_TxXferCount = Size;
 800237c:	88fb      	ldrh	r3, [r7, #6]
 800237e:	837b      	strh	r3, [r7, #26]

  if (hspi->State != HAL_SPI_STATE_READY)
 8002380:	68fb      	ldr	r3, [r7, #12]
 8002382:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8002386:	b2db      	uxtb	r3, r3
 8002388:	2b01      	cmp	r3, #1
 800238a:	d001      	beq.n	8002390 <HAL_SPI_Transmit+0x2a>
  {
    return HAL_BUSY;
 800238c:	2302      	movs	r3, #2
 800238e:	e12a      	b.n	80025e6 <HAL_SPI_Transmit+0x280>
  }

  if ((pData == NULL) || (Size == 0U))
 8002390:	68bb      	ldr	r3, [r7, #8]
 8002392:	2b00      	cmp	r3, #0
 8002394:	d002      	beq.n	800239c <HAL_SPI_Transmit+0x36>
 8002396:	88fb      	ldrh	r3, [r7, #6]
 8002398:	2b00      	cmp	r3, #0
 800239a:	d101      	bne.n	80023a0 <HAL_SPI_Transmit+0x3a>
  {
    return HAL_ERROR;
 800239c:	2301      	movs	r3, #1
 800239e:	e122      	b.n	80025e6 <HAL_SPI_Transmit+0x280>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 80023a0:	68fb      	ldr	r3, [r7, #12]
 80023a2:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 80023a6:	2b01      	cmp	r3, #1
 80023a8:	d101      	bne.n	80023ae <HAL_SPI_Transmit+0x48>
 80023aa:	2302      	movs	r3, #2
 80023ac:	e11b      	b.n	80025e6 <HAL_SPI_Transmit+0x280>
 80023ae:	68fb      	ldr	r3, [r7, #12]
 80023b0:	2201      	movs	r2, #1
 80023b2:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 80023b6:	68fb      	ldr	r3, [r7, #12]
 80023b8:	2203      	movs	r2, #3
 80023ba:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80023be:	68fb      	ldr	r3, [r7, #12]
 80023c0:	2200      	movs	r2, #0
 80023c2:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->pTxBuffPtr  = (const uint8_t *)pData;
 80023c4:	68fb      	ldr	r3, [r7, #12]
 80023c6:	68ba      	ldr	r2, [r7, #8]
 80023c8:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi->TxXferSize  = Size;
 80023ca:	68fb      	ldr	r3, [r7, #12]
 80023cc:	88fa      	ldrh	r2, [r7, #6]
 80023ce:	869a      	strh	r2, [r3, #52]	@ 0x34
  hspi->TxXferCount = Size;
 80023d0:	68fb      	ldr	r3, [r7, #12]
 80023d2:	88fa      	ldrh	r2, [r7, #6]
 80023d4:	86da      	strh	r2, [r3, #54]	@ 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 80023d6:	68fb      	ldr	r3, [r7, #12]
 80023d8:	2200      	movs	r2, #0
 80023da:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->RxXferSize  = 0U;
 80023dc:	68fb      	ldr	r3, [r7, #12]
 80023de:	2200      	movs	r2, #0
 80023e0:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->RxXferCount = 0U;
 80023e2:	68fb      	ldr	r3, [r7, #12]
 80023e4:	2200      	movs	r2, #0
 80023e6:	87da      	strh	r2, [r3, #62]	@ 0x3e
  hspi->TxISR       = NULL;
 80023e8:	68fb      	ldr	r3, [r7, #12]
 80023ea:	2200      	movs	r2, #0
 80023ec:	645a      	str	r2, [r3, #68]	@ 0x44
  hspi->RxISR       = NULL;
 80023ee:	68fb      	ldr	r3, [r7, #12]
 80023f0:	2200      	movs	r2, #0
 80023f2:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80023f4:	68fb      	ldr	r3, [r7, #12]
 80023f6:	689b      	ldr	r3, [r3, #8]
 80023f8:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80023fc:	d10f      	bne.n	800241e <HAL_SPI_Transmit+0xb8>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 80023fe:	68fb      	ldr	r3, [r7, #12]
 8002400:	681b      	ldr	r3, [r3, #0]
 8002402:	681a      	ldr	r2, [r3, #0]
 8002404:	68fb      	ldr	r3, [r7, #12]
 8002406:	681b      	ldr	r3, [r3, #0]
 8002408:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 800240c:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 800240e:	68fb      	ldr	r3, [r7, #12]
 8002410:	681b      	ldr	r3, [r3, #0]
 8002412:	681a      	ldr	r2, [r3, #0]
 8002414:	68fb      	ldr	r3, [r7, #12]
 8002416:	681b      	ldr	r3, [r3, #0]
 8002418:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 800241c:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800241e:	68fb      	ldr	r3, [r7, #12]
 8002420:	681b      	ldr	r3, [r3, #0]
 8002422:	681b      	ldr	r3, [r3, #0]
 8002424:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002428:	2b40      	cmp	r3, #64	@ 0x40
 800242a:	d007      	beq.n	800243c <HAL_SPI_Transmit+0xd6>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 800242c:	68fb      	ldr	r3, [r7, #12]
 800242e:	681b      	ldr	r3, [r3, #0]
 8002430:	681a      	ldr	r2, [r3, #0]
 8002432:	68fb      	ldr	r3, [r7, #12]
 8002434:	681b      	ldr	r3, [r3, #0]
 8002436:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 800243a:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 800243c:	68fb      	ldr	r3, [r7, #12]
 800243e:	68db      	ldr	r3, [r3, #12]
 8002440:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8002444:	d152      	bne.n	80024ec <HAL_SPI_Transmit+0x186>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8002446:	68fb      	ldr	r3, [r7, #12]
 8002448:	685b      	ldr	r3, [r3, #4]
 800244a:	2b00      	cmp	r3, #0
 800244c:	d002      	beq.n	8002454 <HAL_SPI_Transmit+0xee>
 800244e:	8b7b      	ldrh	r3, [r7, #26]
 8002450:	2b01      	cmp	r3, #1
 8002452:	d145      	bne.n	80024e0 <HAL_SPI_Transmit+0x17a>
    {
      hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 8002454:	68fb      	ldr	r3, [r7, #12]
 8002456:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002458:	881a      	ldrh	r2, [r3, #0]
 800245a:	68fb      	ldr	r3, [r7, #12]
 800245c:	681b      	ldr	r3, [r3, #0]
 800245e:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8002460:	68fb      	ldr	r3, [r7, #12]
 8002462:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002464:	1c9a      	adds	r2, r3, #2
 8002466:	68fb      	ldr	r3, [r7, #12]
 8002468:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 800246a:	68fb      	ldr	r3, [r7, #12]
 800246c:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 800246e:	b29b      	uxth	r3, r3
 8002470:	3b01      	subs	r3, #1
 8002472:	b29a      	uxth	r2, r3
 8002474:	68fb      	ldr	r3, [r7, #12]
 8002476:	86da      	strh	r2, [r3, #54]	@ 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8002478:	e032      	b.n	80024e0 <HAL_SPI_Transmit+0x17a>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 800247a:	68fb      	ldr	r3, [r7, #12]
 800247c:	681b      	ldr	r3, [r3, #0]
 800247e:	689b      	ldr	r3, [r3, #8]
 8002480:	f003 0302 	and.w	r3, r3, #2
 8002484:	2b02      	cmp	r3, #2
 8002486:	d112      	bne.n	80024ae <HAL_SPI_Transmit+0x148>
      {
        hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 8002488:	68fb      	ldr	r3, [r7, #12]
 800248a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800248c:	881a      	ldrh	r2, [r3, #0]
 800248e:	68fb      	ldr	r3, [r7, #12]
 8002490:	681b      	ldr	r3, [r3, #0]
 8002492:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8002494:	68fb      	ldr	r3, [r7, #12]
 8002496:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002498:	1c9a      	adds	r2, r3, #2
 800249a:	68fb      	ldr	r3, [r7, #12]
 800249c:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 800249e:	68fb      	ldr	r3, [r7, #12]
 80024a0:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 80024a2:	b29b      	uxth	r3, r3
 80024a4:	3b01      	subs	r3, #1
 80024a6:	b29a      	uxth	r2, r3
 80024a8:	68fb      	ldr	r3, [r7, #12]
 80024aa:	86da      	strh	r2, [r3, #54]	@ 0x36
 80024ac:	e018      	b.n	80024e0 <HAL_SPI_Transmit+0x17a>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80024ae:	f7fe fff9 	bl	80014a4 <HAL_GetTick>
 80024b2:	4602      	mov	r2, r0
 80024b4:	69fb      	ldr	r3, [r7, #28]
 80024b6:	1ad3      	subs	r3, r2, r3
 80024b8:	683a      	ldr	r2, [r7, #0]
 80024ba:	429a      	cmp	r2, r3
 80024bc:	d803      	bhi.n	80024c6 <HAL_SPI_Transmit+0x160>
 80024be:	683b      	ldr	r3, [r7, #0]
 80024c0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80024c4:	d102      	bne.n	80024cc <HAL_SPI_Transmit+0x166>
 80024c6:	683b      	ldr	r3, [r7, #0]
 80024c8:	2b00      	cmp	r3, #0
 80024ca:	d109      	bne.n	80024e0 <HAL_SPI_Transmit+0x17a>
        {
          hspi->State = HAL_SPI_STATE_READY;
 80024cc:	68fb      	ldr	r3, [r7, #12]
 80024ce:	2201      	movs	r2, #1
 80024d0:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
          __HAL_UNLOCK(hspi);
 80024d4:	68fb      	ldr	r3, [r7, #12]
 80024d6:	2200      	movs	r2, #0
 80024d8:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
          return HAL_TIMEOUT;
 80024dc:	2303      	movs	r3, #3
 80024de:	e082      	b.n	80025e6 <HAL_SPI_Transmit+0x280>
    while (hspi->TxXferCount > 0U)
 80024e0:	68fb      	ldr	r3, [r7, #12]
 80024e2:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 80024e4:	b29b      	uxth	r3, r3
 80024e6:	2b00      	cmp	r3, #0
 80024e8:	d1c7      	bne.n	800247a <HAL_SPI_Transmit+0x114>
 80024ea:	e053      	b.n	8002594 <HAL_SPI_Transmit+0x22e>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80024ec:	68fb      	ldr	r3, [r7, #12]
 80024ee:	685b      	ldr	r3, [r3, #4]
 80024f0:	2b00      	cmp	r3, #0
 80024f2:	d002      	beq.n	80024fa <HAL_SPI_Transmit+0x194>
 80024f4:	8b7b      	ldrh	r3, [r7, #26]
 80024f6:	2b01      	cmp	r3, #1
 80024f8:	d147      	bne.n	800258a <HAL_SPI_Transmit+0x224>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = *((const uint8_t *)hspi->pTxBuffPtr);
 80024fa:	68fb      	ldr	r3, [r7, #12]
 80024fc:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80024fe:	68fb      	ldr	r3, [r7, #12]
 8002500:	681b      	ldr	r3, [r3, #0]
 8002502:	330c      	adds	r3, #12
 8002504:	7812      	ldrb	r2, [r2, #0]
 8002506:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8002508:	68fb      	ldr	r3, [r7, #12]
 800250a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800250c:	1c5a      	adds	r2, r3, #1
 800250e:	68fb      	ldr	r3, [r7, #12]
 8002510:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 8002512:	68fb      	ldr	r3, [r7, #12]
 8002514:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8002516:	b29b      	uxth	r3, r3
 8002518:	3b01      	subs	r3, #1
 800251a:	b29a      	uxth	r2, r3
 800251c:	68fb      	ldr	r3, [r7, #12]
 800251e:	86da      	strh	r2, [r3, #54]	@ 0x36
    }
    while (hspi->TxXferCount > 0U)
 8002520:	e033      	b.n	800258a <HAL_SPI_Transmit+0x224>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8002522:	68fb      	ldr	r3, [r7, #12]
 8002524:	681b      	ldr	r3, [r3, #0]
 8002526:	689b      	ldr	r3, [r3, #8]
 8002528:	f003 0302 	and.w	r3, r3, #2
 800252c:	2b02      	cmp	r3, #2
 800252e:	d113      	bne.n	8002558 <HAL_SPI_Transmit+0x1f2>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = *((const uint8_t *)hspi->pTxBuffPtr);
 8002530:	68fb      	ldr	r3, [r7, #12]
 8002532:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8002534:	68fb      	ldr	r3, [r7, #12]
 8002536:	681b      	ldr	r3, [r3, #0]
 8002538:	330c      	adds	r3, #12
 800253a:	7812      	ldrb	r2, [r2, #0]
 800253c:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 800253e:	68fb      	ldr	r3, [r7, #12]
 8002540:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002542:	1c5a      	adds	r2, r3, #1
 8002544:	68fb      	ldr	r3, [r7, #12]
 8002546:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 8002548:	68fb      	ldr	r3, [r7, #12]
 800254a:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 800254c:	b29b      	uxth	r3, r3
 800254e:	3b01      	subs	r3, #1
 8002550:	b29a      	uxth	r2, r3
 8002552:	68fb      	ldr	r3, [r7, #12]
 8002554:	86da      	strh	r2, [r3, #54]	@ 0x36
 8002556:	e018      	b.n	800258a <HAL_SPI_Transmit+0x224>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8002558:	f7fe ffa4 	bl	80014a4 <HAL_GetTick>
 800255c:	4602      	mov	r2, r0
 800255e:	69fb      	ldr	r3, [r7, #28]
 8002560:	1ad3      	subs	r3, r2, r3
 8002562:	683a      	ldr	r2, [r7, #0]
 8002564:	429a      	cmp	r2, r3
 8002566:	d803      	bhi.n	8002570 <HAL_SPI_Transmit+0x20a>
 8002568:	683b      	ldr	r3, [r7, #0]
 800256a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800256e:	d102      	bne.n	8002576 <HAL_SPI_Transmit+0x210>
 8002570:	683b      	ldr	r3, [r7, #0]
 8002572:	2b00      	cmp	r3, #0
 8002574:	d109      	bne.n	800258a <HAL_SPI_Transmit+0x224>
        {
          hspi->State = HAL_SPI_STATE_READY;
 8002576:	68fb      	ldr	r3, [r7, #12]
 8002578:	2201      	movs	r2, #1
 800257a:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
          __HAL_UNLOCK(hspi);
 800257e:	68fb      	ldr	r3, [r7, #12]
 8002580:	2200      	movs	r2, #0
 8002582:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
          return HAL_TIMEOUT;
 8002586:	2303      	movs	r3, #3
 8002588:	e02d      	b.n	80025e6 <HAL_SPI_Transmit+0x280>
    while (hspi->TxXferCount > 0U)
 800258a:	68fb      	ldr	r3, [r7, #12]
 800258c:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 800258e:	b29b      	uxth	r3, r3
 8002590:	2b00      	cmp	r3, #0
 8002592:	d1c6      	bne.n	8002522 <HAL_SPI_Transmit+0x1bc>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8002594:	69fa      	ldr	r2, [r7, #28]
 8002596:	6839      	ldr	r1, [r7, #0]
 8002598:	68f8      	ldr	r0, [r7, #12]
 800259a:	f000 fa59 	bl	8002a50 <SPI_EndRxTxTransaction>
 800259e:	4603      	mov	r3, r0
 80025a0:	2b00      	cmp	r3, #0
 80025a2:	d002      	beq.n	80025aa <HAL_SPI_Transmit+0x244>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 80025a4:	68fb      	ldr	r3, [r7, #12]
 80025a6:	2220      	movs	r2, #32
 80025a8:	655a      	str	r2, [r3, #84]	@ 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 80025aa:	68fb      	ldr	r3, [r7, #12]
 80025ac:	689b      	ldr	r3, [r3, #8]
 80025ae:	2b00      	cmp	r3, #0
 80025b0:	d10a      	bne.n	80025c8 <HAL_SPI_Transmit+0x262>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 80025b2:	2300      	movs	r3, #0
 80025b4:	617b      	str	r3, [r7, #20]
 80025b6:	68fb      	ldr	r3, [r7, #12]
 80025b8:	681b      	ldr	r3, [r3, #0]
 80025ba:	68db      	ldr	r3, [r3, #12]
 80025bc:	617b      	str	r3, [r7, #20]
 80025be:	68fb      	ldr	r3, [r7, #12]
 80025c0:	681b      	ldr	r3, [r3, #0]
 80025c2:	689b      	ldr	r3, [r3, #8]
 80025c4:	617b      	str	r3, [r7, #20]
 80025c6:	697b      	ldr	r3, [r7, #20]
  }

  hspi->State = HAL_SPI_STATE_READY;
 80025c8:	68fb      	ldr	r3, [r7, #12]
 80025ca:	2201      	movs	r2, #1
 80025cc:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 80025d0:	68fb      	ldr	r3, [r7, #12]
 80025d2:	2200      	movs	r2, #0
 80025d4:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80025d8:	68fb      	ldr	r3, [r7, #12]
 80025da:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80025dc:	2b00      	cmp	r3, #0
 80025de:	d001      	beq.n	80025e4 <HAL_SPI_Transmit+0x27e>
  {
    return HAL_ERROR;
 80025e0:	2301      	movs	r3, #1
 80025e2:	e000      	b.n	80025e6 <HAL_SPI_Transmit+0x280>
  }
  else
  {
    return HAL_OK;
 80025e4:	2300      	movs	r3, #0
  }
}
 80025e6:	4618      	mov	r0, r3
 80025e8:	3720      	adds	r7, #32
 80025ea:	46bd      	mov	sp, r7
 80025ec:	bd80      	pop	{r7, pc}

080025ee <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, const uint8_t *pTxData, uint8_t *pRxData,
                                          uint16_t Size, uint32_t Timeout)
{
 80025ee:	b580      	push	{r7, lr}
 80025f0:	b08a      	sub	sp, #40	@ 0x28
 80025f2:	af00      	add	r7, sp, #0
 80025f4:	60f8      	str	r0, [r7, #12]
 80025f6:	60b9      	str	r1, [r7, #8]
 80025f8:	607a      	str	r2, [r7, #4]
 80025fa:	807b      	strh	r3, [r7, #2]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 80025fc:	2301      	movs	r3, #1
 80025fe:	627b      	str	r3, [r7, #36]	@ 0x24

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8002600:	f7fe ff50 	bl	80014a4 <HAL_GetTick>
 8002604:	6238      	str	r0, [r7, #32]

  /* Init temporary variables */
  tmp_state           = hspi->State;
 8002606:	68fb      	ldr	r3, [r7, #12]
 8002608:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 800260c:	77fb      	strb	r3, [r7, #31]
  tmp_mode            = hspi->Init.Mode;
 800260e:	68fb      	ldr	r3, [r7, #12]
 8002610:	685b      	ldr	r3, [r3, #4]
 8002612:	61bb      	str	r3, [r7, #24]
  initial_TxXferCount = Size;
 8002614:	887b      	ldrh	r3, [r7, #2]
 8002616:	82fb      	strh	r3, [r7, #22]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8002618:	7ffb      	ldrb	r3, [r7, #31]
 800261a:	2b01      	cmp	r3, #1
 800261c:	d00c      	beq.n	8002638 <HAL_SPI_TransmitReceive+0x4a>
 800261e:	69bb      	ldr	r3, [r7, #24]
 8002620:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8002624:	d106      	bne.n	8002634 <HAL_SPI_TransmitReceive+0x46>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 8002626:	68fb      	ldr	r3, [r7, #12]
 8002628:	689b      	ldr	r3, [r3, #8]
 800262a:	2b00      	cmp	r3, #0
 800262c:	d102      	bne.n	8002634 <HAL_SPI_TransmitReceive+0x46>
 800262e:	7ffb      	ldrb	r3, [r7, #31]
 8002630:	2b04      	cmp	r3, #4
 8002632:	d001      	beq.n	8002638 <HAL_SPI_TransmitReceive+0x4a>
  {
    return HAL_BUSY;
 8002634:	2302      	movs	r3, #2
 8002636:	e17f      	b.n	8002938 <HAL_SPI_TransmitReceive+0x34a>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8002638:	68bb      	ldr	r3, [r7, #8]
 800263a:	2b00      	cmp	r3, #0
 800263c:	d005      	beq.n	800264a <HAL_SPI_TransmitReceive+0x5c>
 800263e:	687b      	ldr	r3, [r7, #4]
 8002640:	2b00      	cmp	r3, #0
 8002642:	d002      	beq.n	800264a <HAL_SPI_TransmitReceive+0x5c>
 8002644:	887b      	ldrh	r3, [r7, #2]
 8002646:	2b00      	cmp	r3, #0
 8002648:	d101      	bne.n	800264e <HAL_SPI_TransmitReceive+0x60>
  {
    return HAL_ERROR;
 800264a:	2301      	movs	r3, #1
 800264c:	e174      	b.n	8002938 <HAL_SPI_TransmitReceive+0x34a>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 800264e:	68fb      	ldr	r3, [r7, #12]
 8002650:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 8002654:	2b01      	cmp	r3, #1
 8002656:	d101      	bne.n	800265c <HAL_SPI_TransmitReceive+0x6e>
 8002658:	2302      	movs	r3, #2
 800265a:	e16d      	b.n	8002938 <HAL_SPI_TransmitReceive+0x34a>
 800265c:	68fb      	ldr	r3, [r7, #12]
 800265e:	2201      	movs	r2, #1
 8002660:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8002664:	68fb      	ldr	r3, [r7, #12]
 8002666:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 800266a:	b2db      	uxtb	r3, r3
 800266c:	2b04      	cmp	r3, #4
 800266e:	d003      	beq.n	8002678 <HAL_SPI_TransmitReceive+0x8a>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8002670:	68fb      	ldr	r3, [r7, #12]
 8002672:	2205      	movs	r2, #5
 8002674:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8002678:	68fb      	ldr	r3, [r7, #12]
 800267a:	2200      	movs	r2, #0
 800267c:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 800267e:	68fb      	ldr	r3, [r7, #12]
 8002680:	687a      	ldr	r2, [r7, #4]
 8002682:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->RxXferCount = Size;
 8002684:	68fb      	ldr	r3, [r7, #12]
 8002686:	887a      	ldrh	r2, [r7, #2]
 8002688:	87da      	strh	r2, [r3, #62]	@ 0x3e
  hspi->RxXferSize  = Size;
 800268a:	68fb      	ldr	r3, [r7, #12]
 800268c:	887a      	ldrh	r2, [r7, #2]
 800268e:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->pTxBuffPtr  = (const uint8_t *)pTxData;
 8002690:	68fb      	ldr	r3, [r7, #12]
 8002692:	68ba      	ldr	r2, [r7, #8]
 8002694:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi->TxXferCount = Size;
 8002696:	68fb      	ldr	r3, [r7, #12]
 8002698:	887a      	ldrh	r2, [r7, #2]
 800269a:	86da      	strh	r2, [r3, #54]	@ 0x36
  hspi->TxXferSize  = Size;
 800269c:	68fb      	ldr	r3, [r7, #12]
 800269e:	887a      	ldrh	r2, [r7, #2]
 80026a0:	869a      	strh	r2, [r3, #52]	@ 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 80026a2:	68fb      	ldr	r3, [r7, #12]
 80026a4:	2200      	movs	r2, #0
 80026a6:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->TxISR       = NULL;
 80026a8:	68fb      	ldr	r3, [r7, #12]
 80026aa:	2200      	movs	r2, #0
 80026ac:	645a      	str	r2, [r3, #68]	@ 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80026ae:	68fb      	ldr	r3, [r7, #12]
 80026b0:	681b      	ldr	r3, [r3, #0]
 80026b2:	681b      	ldr	r3, [r3, #0]
 80026b4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80026b8:	2b40      	cmp	r3, #64	@ 0x40
 80026ba:	d007      	beq.n	80026cc <HAL_SPI_TransmitReceive+0xde>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 80026bc:	68fb      	ldr	r3, [r7, #12]
 80026be:	681b      	ldr	r3, [r3, #0]
 80026c0:	681a      	ldr	r2, [r3, #0]
 80026c2:	68fb      	ldr	r3, [r7, #12]
 80026c4:	681b      	ldr	r3, [r3, #0]
 80026c6:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 80026ca:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 80026cc:	68fb      	ldr	r3, [r7, #12]
 80026ce:	68db      	ldr	r3, [r3, #12]
 80026d0:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80026d4:	d17e      	bne.n	80027d4 <HAL_SPI_TransmitReceive+0x1e6>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80026d6:	68fb      	ldr	r3, [r7, #12]
 80026d8:	685b      	ldr	r3, [r3, #4]
 80026da:	2b00      	cmp	r3, #0
 80026dc:	d002      	beq.n	80026e4 <HAL_SPI_TransmitReceive+0xf6>
 80026de:	8afb      	ldrh	r3, [r7, #22]
 80026e0:	2b01      	cmp	r3, #1
 80026e2:	d16c      	bne.n	80027be <HAL_SPI_TransmitReceive+0x1d0>
    {
      hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 80026e4:	68fb      	ldr	r3, [r7, #12]
 80026e6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80026e8:	881a      	ldrh	r2, [r3, #0]
 80026ea:	68fb      	ldr	r3, [r7, #12]
 80026ec:	681b      	ldr	r3, [r3, #0]
 80026ee:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 80026f0:	68fb      	ldr	r3, [r7, #12]
 80026f2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80026f4:	1c9a      	adds	r2, r3, #2
 80026f6:	68fb      	ldr	r3, [r7, #12]
 80026f8:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 80026fa:	68fb      	ldr	r3, [r7, #12]
 80026fc:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 80026fe:	b29b      	uxth	r3, r3
 8002700:	3b01      	subs	r3, #1
 8002702:	b29a      	uxth	r2, r3
 8002704:	68fb      	ldr	r3, [r7, #12]
 8002706:	86da      	strh	r2, [r3, #54]	@ 0x36
        SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
      }
#endif /* USE_SPI_CRC */

    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8002708:	e059      	b.n	80027be <HAL_SPI_TransmitReceive+0x1d0>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 800270a:	68fb      	ldr	r3, [r7, #12]
 800270c:	681b      	ldr	r3, [r3, #0]
 800270e:	689b      	ldr	r3, [r3, #8]
 8002710:	f003 0302 	and.w	r3, r3, #2
 8002714:	2b02      	cmp	r3, #2
 8002716:	d11b      	bne.n	8002750 <HAL_SPI_TransmitReceive+0x162>
 8002718:	68fb      	ldr	r3, [r7, #12]
 800271a:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 800271c:	b29b      	uxth	r3, r3
 800271e:	2b00      	cmp	r3, #0
 8002720:	d016      	beq.n	8002750 <HAL_SPI_TransmitReceive+0x162>
 8002722:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002724:	2b01      	cmp	r3, #1
 8002726:	d113      	bne.n	8002750 <HAL_SPI_TransmitReceive+0x162>
      {
        hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 8002728:	68fb      	ldr	r3, [r7, #12]
 800272a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800272c:	881a      	ldrh	r2, [r3, #0]
 800272e:	68fb      	ldr	r3, [r7, #12]
 8002730:	681b      	ldr	r3, [r3, #0]
 8002732:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8002734:	68fb      	ldr	r3, [r7, #12]
 8002736:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002738:	1c9a      	adds	r2, r3, #2
 800273a:	68fb      	ldr	r3, [r7, #12]
 800273c:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 800273e:	68fb      	ldr	r3, [r7, #12]
 8002740:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8002742:	b29b      	uxth	r3, r3
 8002744:	3b01      	subs	r3, #1
 8002746:	b29a      	uxth	r2, r3
 8002748:	68fb      	ldr	r3, [r7, #12]
 800274a:	86da      	strh	r2, [r3, #54]	@ 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 800274c:	2300      	movs	r3, #0
 800274e:	627b      	str	r3, [r7, #36]	@ 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8002750:	68fb      	ldr	r3, [r7, #12]
 8002752:	681b      	ldr	r3, [r3, #0]
 8002754:	689b      	ldr	r3, [r3, #8]
 8002756:	f003 0301 	and.w	r3, r3, #1
 800275a:	2b01      	cmp	r3, #1
 800275c:	d119      	bne.n	8002792 <HAL_SPI_TransmitReceive+0x1a4>
 800275e:	68fb      	ldr	r3, [r7, #12]
 8002760:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8002762:	b29b      	uxth	r3, r3
 8002764:	2b00      	cmp	r3, #0
 8002766:	d014      	beq.n	8002792 <HAL_SPI_TransmitReceive+0x1a4>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8002768:	68fb      	ldr	r3, [r7, #12]
 800276a:	681b      	ldr	r3, [r3, #0]
 800276c:	68da      	ldr	r2, [r3, #12]
 800276e:	68fb      	ldr	r3, [r7, #12]
 8002770:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002772:	b292      	uxth	r2, r2
 8002774:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8002776:	68fb      	ldr	r3, [r7, #12]
 8002778:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800277a:	1c9a      	adds	r2, r3, #2
 800277c:	68fb      	ldr	r3, [r7, #12]
 800277e:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->RxXferCount--;
 8002780:	68fb      	ldr	r3, [r7, #12]
 8002782:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8002784:	b29b      	uxth	r3, r3
 8002786:	3b01      	subs	r3, #1
 8002788:	b29a      	uxth	r2, r3
 800278a:	68fb      	ldr	r3, [r7, #12]
 800278c:	87da      	strh	r2, [r3, #62]	@ 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 800278e:	2301      	movs	r3, #1
 8002790:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 8002792:	f7fe fe87 	bl	80014a4 <HAL_GetTick>
 8002796:	4602      	mov	r2, r0
 8002798:	6a3b      	ldr	r3, [r7, #32]
 800279a:	1ad3      	subs	r3, r2, r3
 800279c:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800279e:	429a      	cmp	r2, r3
 80027a0:	d80d      	bhi.n	80027be <HAL_SPI_TransmitReceive+0x1d0>
 80027a2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80027a4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80027a8:	d009      	beq.n	80027be <HAL_SPI_TransmitReceive+0x1d0>
      {
        hspi->State = HAL_SPI_STATE_READY;
 80027aa:	68fb      	ldr	r3, [r7, #12]
 80027ac:	2201      	movs	r2, #1
 80027ae:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
        __HAL_UNLOCK(hspi);
 80027b2:	68fb      	ldr	r3, [r7, #12]
 80027b4:	2200      	movs	r2, #0
 80027b6:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
        return HAL_TIMEOUT;
 80027ba:	2303      	movs	r3, #3
 80027bc:	e0bc      	b.n	8002938 <HAL_SPI_TransmitReceive+0x34a>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80027be:	68fb      	ldr	r3, [r7, #12]
 80027c0:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 80027c2:	b29b      	uxth	r3, r3
 80027c4:	2b00      	cmp	r3, #0
 80027c6:	d1a0      	bne.n	800270a <HAL_SPI_TransmitReceive+0x11c>
 80027c8:	68fb      	ldr	r3, [r7, #12]
 80027ca:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80027cc:	b29b      	uxth	r3, r3
 80027ce:	2b00      	cmp	r3, #0
 80027d0:	d19b      	bne.n	800270a <HAL_SPI_TransmitReceive+0x11c>
 80027d2:	e082      	b.n	80028da <HAL_SPI_TransmitReceive+0x2ec>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80027d4:	68fb      	ldr	r3, [r7, #12]
 80027d6:	685b      	ldr	r3, [r3, #4]
 80027d8:	2b00      	cmp	r3, #0
 80027da:	d002      	beq.n	80027e2 <HAL_SPI_TransmitReceive+0x1f4>
 80027dc:	8afb      	ldrh	r3, [r7, #22]
 80027de:	2b01      	cmp	r3, #1
 80027e0:	d171      	bne.n	80028c6 <HAL_SPI_TransmitReceive+0x2d8>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = *((const uint8_t *)hspi->pTxBuffPtr);
 80027e2:	68fb      	ldr	r3, [r7, #12]
 80027e4:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80027e6:	68fb      	ldr	r3, [r7, #12]
 80027e8:	681b      	ldr	r3, [r3, #0]
 80027ea:	330c      	adds	r3, #12
 80027ec:	7812      	ldrb	r2, [r2, #0]
 80027ee:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 80027f0:	68fb      	ldr	r3, [r7, #12]
 80027f2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80027f4:	1c5a      	adds	r2, r3, #1
 80027f6:	68fb      	ldr	r3, [r7, #12]
 80027f8:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 80027fa:	68fb      	ldr	r3, [r7, #12]
 80027fc:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 80027fe:	b29b      	uxth	r3, r3
 8002800:	3b01      	subs	r3, #1
 8002802:	b29a      	uxth	r2, r3
 8002804:	68fb      	ldr	r3, [r7, #12]
 8002806:	86da      	strh	r2, [r3, #54]	@ 0x36
      {
        SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
      }
#endif /* USE_SPI_CRC */
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8002808:	e05d      	b.n	80028c6 <HAL_SPI_TransmitReceive+0x2d8>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 800280a:	68fb      	ldr	r3, [r7, #12]
 800280c:	681b      	ldr	r3, [r3, #0]
 800280e:	689b      	ldr	r3, [r3, #8]
 8002810:	f003 0302 	and.w	r3, r3, #2
 8002814:	2b02      	cmp	r3, #2
 8002816:	d11c      	bne.n	8002852 <HAL_SPI_TransmitReceive+0x264>
 8002818:	68fb      	ldr	r3, [r7, #12]
 800281a:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 800281c:	b29b      	uxth	r3, r3
 800281e:	2b00      	cmp	r3, #0
 8002820:	d017      	beq.n	8002852 <HAL_SPI_TransmitReceive+0x264>
 8002822:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002824:	2b01      	cmp	r3, #1
 8002826:	d114      	bne.n	8002852 <HAL_SPI_TransmitReceive+0x264>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = *((const uint8_t *)hspi->pTxBuffPtr);
 8002828:	68fb      	ldr	r3, [r7, #12]
 800282a:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800282c:	68fb      	ldr	r3, [r7, #12]
 800282e:	681b      	ldr	r3, [r3, #0]
 8002830:	330c      	adds	r3, #12
 8002832:	7812      	ldrb	r2, [r2, #0]
 8002834:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 8002836:	68fb      	ldr	r3, [r7, #12]
 8002838:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800283a:	1c5a      	adds	r2, r3, #1
 800283c:	68fb      	ldr	r3, [r7, #12]
 800283e:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 8002840:	68fb      	ldr	r3, [r7, #12]
 8002842:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8002844:	b29b      	uxth	r3, r3
 8002846:	3b01      	subs	r3, #1
 8002848:	b29a      	uxth	r2, r3
 800284a:	68fb      	ldr	r3, [r7, #12]
 800284c:	86da      	strh	r2, [r3, #54]	@ 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 800284e:	2300      	movs	r3, #0
 8002850:	627b      	str	r3, [r7, #36]	@ 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8002852:	68fb      	ldr	r3, [r7, #12]
 8002854:	681b      	ldr	r3, [r3, #0]
 8002856:	689b      	ldr	r3, [r3, #8]
 8002858:	f003 0301 	and.w	r3, r3, #1
 800285c:	2b01      	cmp	r3, #1
 800285e:	d119      	bne.n	8002894 <HAL_SPI_TransmitReceive+0x2a6>
 8002860:	68fb      	ldr	r3, [r7, #12]
 8002862:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8002864:	b29b      	uxth	r3, r3
 8002866:	2b00      	cmp	r3, #0
 8002868:	d014      	beq.n	8002894 <HAL_SPI_TransmitReceive+0x2a6>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 800286a:	68fb      	ldr	r3, [r7, #12]
 800286c:	681b      	ldr	r3, [r3, #0]
 800286e:	68da      	ldr	r2, [r3, #12]
 8002870:	68fb      	ldr	r3, [r7, #12]
 8002872:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002874:	b2d2      	uxtb	r2, r2
 8002876:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 8002878:	68fb      	ldr	r3, [r7, #12]
 800287a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800287c:	1c5a      	adds	r2, r3, #1
 800287e:	68fb      	ldr	r3, [r7, #12]
 8002880:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->RxXferCount--;
 8002882:	68fb      	ldr	r3, [r7, #12]
 8002884:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8002886:	b29b      	uxth	r3, r3
 8002888:	3b01      	subs	r3, #1
 800288a:	b29a      	uxth	r2, r3
 800288c:	68fb      	ldr	r3, [r7, #12]
 800288e:	87da      	strh	r2, [r3, #62]	@ 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8002890:	2301      	movs	r3, #1
 8002892:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 8002894:	f7fe fe06 	bl	80014a4 <HAL_GetTick>
 8002898:	4602      	mov	r2, r0
 800289a:	6a3b      	ldr	r3, [r7, #32]
 800289c:	1ad3      	subs	r3, r2, r3
 800289e:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80028a0:	429a      	cmp	r2, r3
 80028a2:	d803      	bhi.n	80028ac <HAL_SPI_TransmitReceive+0x2be>
 80028a4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80028a6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80028aa:	d102      	bne.n	80028b2 <HAL_SPI_TransmitReceive+0x2c4>
 80028ac:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80028ae:	2b00      	cmp	r3, #0
 80028b0:	d109      	bne.n	80028c6 <HAL_SPI_TransmitReceive+0x2d8>
      {
        hspi->State = HAL_SPI_STATE_READY;
 80028b2:	68fb      	ldr	r3, [r7, #12]
 80028b4:	2201      	movs	r2, #1
 80028b6:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
        __HAL_UNLOCK(hspi);
 80028ba:	68fb      	ldr	r3, [r7, #12]
 80028bc:	2200      	movs	r2, #0
 80028be:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
        return HAL_TIMEOUT;
 80028c2:	2303      	movs	r3, #3
 80028c4:	e038      	b.n	8002938 <HAL_SPI_TransmitReceive+0x34a>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80028c6:	68fb      	ldr	r3, [r7, #12]
 80028c8:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 80028ca:	b29b      	uxth	r3, r3
 80028cc:	2b00      	cmp	r3, #0
 80028ce:	d19c      	bne.n	800280a <HAL_SPI_TransmitReceive+0x21c>
 80028d0:	68fb      	ldr	r3, [r7, #12]
 80028d2:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80028d4:	b29b      	uxth	r3, r3
 80028d6:	2b00      	cmp	r3, #0
 80028d8:	d197      	bne.n	800280a <HAL_SPI_TransmitReceive+0x21c>
    return HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 80028da:	6a3a      	ldr	r2, [r7, #32]
 80028dc:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 80028de:	68f8      	ldr	r0, [r7, #12]
 80028e0:	f000 f8b6 	bl	8002a50 <SPI_EndRxTxTransaction>
 80028e4:	4603      	mov	r3, r0
 80028e6:	2b00      	cmp	r3, #0
 80028e8:	d008      	beq.n	80028fc <HAL_SPI_TransmitReceive+0x30e>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 80028ea:	68fb      	ldr	r3, [r7, #12]
 80028ec:	2220      	movs	r2, #32
 80028ee:	655a      	str	r2, [r3, #84]	@ 0x54
    __HAL_UNLOCK(hspi);
 80028f0:	68fb      	ldr	r3, [r7, #12]
 80028f2:	2200      	movs	r2, #0
 80028f4:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
    return HAL_ERROR;
 80028f8:	2301      	movs	r3, #1
 80028fa:	e01d      	b.n	8002938 <HAL_SPI_TransmitReceive+0x34a>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 80028fc:	68fb      	ldr	r3, [r7, #12]
 80028fe:	689b      	ldr	r3, [r3, #8]
 8002900:	2b00      	cmp	r3, #0
 8002902:	d10a      	bne.n	800291a <HAL_SPI_TransmitReceive+0x32c>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8002904:	2300      	movs	r3, #0
 8002906:	613b      	str	r3, [r7, #16]
 8002908:	68fb      	ldr	r3, [r7, #12]
 800290a:	681b      	ldr	r3, [r3, #0]
 800290c:	68db      	ldr	r3, [r3, #12]
 800290e:	613b      	str	r3, [r7, #16]
 8002910:	68fb      	ldr	r3, [r7, #12]
 8002912:	681b      	ldr	r3, [r3, #0]
 8002914:	689b      	ldr	r3, [r3, #8]
 8002916:	613b      	str	r3, [r7, #16]
 8002918:	693b      	ldr	r3, [r7, #16]
  }


  hspi->State = HAL_SPI_STATE_READY;
 800291a:	68fb      	ldr	r3, [r7, #12]
 800291c:	2201      	movs	r2, #1
 800291e:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  /* Unlock the process */
  __HAL_UNLOCK(hspi);
 8002922:	68fb      	ldr	r3, [r7, #12]
 8002924:	2200      	movs	r2, #0
 8002926:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800292a:	68fb      	ldr	r3, [r7, #12]
 800292c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800292e:	2b00      	cmp	r3, #0
 8002930:	d001      	beq.n	8002936 <HAL_SPI_TransmitReceive+0x348>
  {
    return HAL_ERROR;
 8002932:	2301      	movs	r3, #1
 8002934:	e000      	b.n	8002938 <HAL_SPI_TransmitReceive+0x34a>
  }
  else
  {
    return HAL_OK;
 8002936:	2300      	movs	r3, #0
  }
}
 8002938:	4618      	mov	r0, r3
 800293a:	3728      	adds	r7, #40	@ 0x28
 800293c:	46bd      	mov	sp, r7
 800293e:	bd80      	pop	{r7, pc}

08002940 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8002940:	b580      	push	{r7, lr}
 8002942:	b088      	sub	sp, #32
 8002944:	af00      	add	r7, sp, #0
 8002946:	60f8      	str	r0, [r7, #12]
 8002948:	60b9      	str	r1, [r7, #8]
 800294a:	603b      	str	r3, [r7, #0]
 800294c:	4613      	mov	r3, r2
 800294e:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8002950:	f7fe fda8 	bl	80014a4 <HAL_GetTick>
 8002954:	4602      	mov	r2, r0
 8002956:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002958:	1a9b      	subs	r3, r3, r2
 800295a:	683a      	ldr	r2, [r7, #0]
 800295c:	4413      	add	r3, r2
 800295e:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8002960:	f7fe fda0 	bl	80014a4 <HAL_GetTick>
 8002964:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8002966:	4b39      	ldr	r3, [pc, #228]	@ (8002a4c <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8002968:	681b      	ldr	r3, [r3, #0]
 800296a:	015b      	lsls	r3, r3, #5
 800296c:	0d1b      	lsrs	r3, r3, #20
 800296e:	69fa      	ldr	r2, [r7, #28]
 8002970:	fb02 f303 	mul.w	r3, r2, r3
 8002974:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8002976:	e054      	b.n	8002a22 <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8002978:	683b      	ldr	r3, [r7, #0]
 800297a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800297e:	d050      	beq.n	8002a22 <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8002980:	f7fe fd90 	bl	80014a4 <HAL_GetTick>
 8002984:	4602      	mov	r2, r0
 8002986:	69bb      	ldr	r3, [r7, #24]
 8002988:	1ad3      	subs	r3, r2, r3
 800298a:	69fa      	ldr	r2, [r7, #28]
 800298c:	429a      	cmp	r2, r3
 800298e:	d902      	bls.n	8002996 <SPI_WaitFlagStateUntilTimeout+0x56>
 8002990:	69fb      	ldr	r3, [r7, #28]
 8002992:	2b00      	cmp	r3, #0
 8002994:	d13d      	bne.n	8002a12 <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8002996:	68fb      	ldr	r3, [r7, #12]
 8002998:	681b      	ldr	r3, [r3, #0]
 800299a:	685a      	ldr	r2, [r3, #4]
 800299c:	68fb      	ldr	r3, [r7, #12]
 800299e:	681b      	ldr	r3, [r3, #0]
 80029a0:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 80029a4:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80029a6:	68fb      	ldr	r3, [r7, #12]
 80029a8:	685b      	ldr	r3, [r3, #4]
 80029aa:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 80029ae:	d111      	bne.n	80029d4 <SPI_WaitFlagStateUntilTimeout+0x94>
 80029b0:	68fb      	ldr	r3, [r7, #12]
 80029b2:	689b      	ldr	r3, [r3, #8]
 80029b4:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80029b8:	d004      	beq.n	80029c4 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 80029ba:	68fb      	ldr	r3, [r7, #12]
 80029bc:	689b      	ldr	r3, [r3, #8]
 80029be:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80029c2:	d107      	bne.n	80029d4 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 80029c4:	68fb      	ldr	r3, [r7, #12]
 80029c6:	681b      	ldr	r3, [r3, #0]
 80029c8:	681a      	ldr	r2, [r3, #0]
 80029ca:	68fb      	ldr	r3, [r7, #12]
 80029cc:	681b      	ldr	r3, [r3, #0]
 80029ce:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 80029d2:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 80029d4:	68fb      	ldr	r3, [r7, #12]
 80029d6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80029d8:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80029dc:	d10f      	bne.n	80029fe <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 80029de:	68fb      	ldr	r3, [r7, #12]
 80029e0:	681b      	ldr	r3, [r3, #0]
 80029e2:	681a      	ldr	r2, [r3, #0]
 80029e4:	68fb      	ldr	r3, [r7, #12]
 80029e6:	681b      	ldr	r3, [r3, #0]
 80029e8:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 80029ec:	601a      	str	r2, [r3, #0]
 80029ee:	68fb      	ldr	r3, [r7, #12]
 80029f0:	681b      	ldr	r3, [r3, #0]
 80029f2:	681a      	ldr	r2, [r3, #0]
 80029f4:	68fb      	ldr	r3, [r7, #12]
 80029f6:	681b      	ldr	r3, [r3, #0]
 80029f8:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 80029fc:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 80029fe:	68fb      	ldr	r3, [r7, #12]
 8002a00:	2201      	movs	r2, #1
 8002a02:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8002a06:	68fb      	ldr	r3, [r7, #12]
 8002a08:	2200      	movs	r2, #0
 8002a0a:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

        return HAL_TIMEOUT;
 8002a0e:	2303      	movs	r3, #3
 8002a10:	e017      	b.n	8002a42 <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8002a12:	697b      	ldr	r3, [r7, #20]
 8002a14:	2b00      	cmp	r3, #0
 8002a16:	d101      	bne.n	8002a1c <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8002a18:	2300      	movs	r3, #0
 8002a1a:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8002a1c:	697b      	ldr	r3, [r7, #20]
 8002a1e:	3b01      	subs	r3, #1
 8002a20:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8002a22:	68fb      	ldr	r3, [r7, #12]
 8002a24:	681b      	ldr	r3, [r3, #0]
 8002a26:	689a      	ldr	r2, [r3, #8]
 8002a28:	68bb      	ldr	r3, [r7, #8]
 8002a2a:	4013      	ands	r3, r2
 8002a2c:	68ba      	ldr	r2, [r7, #8]
 8002a2e:	429a      	cmp	r2, r3
 8002a30:	bf0c      	ite	eq
 8002a32:	2301      	moveq	r3, #1
 8002a34:	2300      	movne	r3, #0
 8002a36:	b2db      	uxtb	r3, r3
 8002a38:	461a      	mov	r2, r3
 8002a3a:	79fb      	ldrb	r3, [r7, #7]
 8002a3c:	429a      	cmp	r2, r3
 8002a3e:	d19b      	bne.n	8002978 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8002a40:	2300      	movs	r3, #0
}
 8002a42:	4618      	mov	r0, r3
 8002a44:	3720      	adds	r7, #32
 8002a46:	46bd      	mov	sp, r7
 8002a48:	bd80      	pop	{r7, pc}
 8002a4a:	bf00      	nop
 8002a4c:	20000000 	.word	0x20000000

08002a50 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8002a50:	b580      	push	{r7, lr}
 8002a52:	b088      	sub	sp, #32
 8002a54:	af02      	add	r7, sp, #8
 8002a56:	60f8      	str	r0, [r7, #12]
 8002a58:	60b9      	str	r1, [r7, #8]
 8002a5a:	607a      	str	r2, [r7, #4]
  /* Wait until TXE flag */
  if(SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_TXE, SET, Timeout, Tickstart) != HAL_OK)
 8002a5c:	687b      	ldr	r3, [r7, #4]
 8002a5e:	9300      	str	r3, [sp, #0]
 8002a60:	68bb      	ldr	r3, [r7, #8]
 8002a62:	2201      	movs	r2, #1
 8002a64:	2102      	movs	r1, #2
 8002a66:	68f8      	ldr	r0, [r7, #12]
 8002a68:	f7ff ff6a 	bl	8002940 <SPI_WaitFlagStateUntilTimeout>
 8002a6c:	4603      	mov	r3, r0
 8002a6e:	2b00      	cmp	r3, #0
 8002a70:	d007      	beq.n	8002a82 <SPI_EndRxTxTransaction+0x32>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8002a72:	68fb      	ldr	r3, [r7, #12]
 8002a74:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002a76:	f043 0220 	orr.w	r2, r3, #32
 8002a7a:	68fb      	ldr	r3, [r7, #12]
 8002a7c:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_TIMEOUT;
 8002a7e:	2303      	movs	r3, #3
 8002a80:	e032      	b.n	8002ae8 <SPI_EndRxTxTransaction+0x98>
  }

  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 8002a82:	4b1b      	ldr	r3, [pc, #108]	@ (8002af0 <SPI_EndRxTxTransaction+0xa0>)
 8002a84:	681b      	ldr	r3, [r3, #0]
 8002a86:	4a1b      	ldr	r2, [pc, #108]	@ (8002af4 <SPI_EndRxTxTransaction+0xa4>)
 8002a88:	fba2 2303 	umull	r2, r3, r2, r3
 8002a8c:	0d5b      	lsrs	r3, r3, #21
 8002a8e:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 8002a92:	fb02 f303 	mul.w	r3, r2, r3
 8002a96:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8002a98:	68fb      	ldr	r3, [r7, #12]
 8002a9a:	685b      	ldr	r3, [r3, #4]
 8002a9c:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8002aa0:	d112      	bne.n	8002ac8 <SPI_EndRxTxTransaction+0x78>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8002aa2:	687b      	ldr	r3, [r7, #4]
 8002aa4:	9300      	str	r3, [sp, #0]
 8002aa6:	68bb      	ldr	r3, [r7, #8]
 8002aa8:	2200      	movs	r2, #0
 8002aaa:	2180      	movs	r1, #128	@ 0x80
 8002aac:	68f8      	ldr	r0, [r7, #12]
 8002aae:	f7ff ff47 	bl	8002940 <SPI_WaitFlagStateUntilTimeout>
 8002ab2:	4603      	mov	r3, r0
 8002ab4:	2b00      	cmp	r3, #0
 8002ab6:	d016      	beq.n	8002ae6 <SPI_EndRxTxTransaction+0x96>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8002ab8:	68fb      	ldr	r3, [r7, #12]
 8002aba:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002abc:	f043 0220 	orr.w	r2, r3, #32
 8002ac0:	68fb      	ldr	r3, [r7, #12]
 8002ac2:	655a      	str	r2, [r3, #84]	@ 0x54
      return HAL_TIMEOUT;
 8002ac4:	2303      	movs	r3, #3
 8002ac6:	e00f      	b.n	8002ae8 <SPI_EndRxTxTransaction+0x98>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 8002ac8:	697b      	ldr	r3, [r7, #20]
 8002aca:	2b00      	cmp	r3, #0
 8002acc:	d00a      	beq.n	8002ae4 <SPI_EndRxTxTransaction+0x94>
      {
        break;
      }
      count--;
 8002ace:	697b      	ldr	r3, [r7, #20]
 8002ad0:	3b01      	subs	r3, #1
 8002ad2:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 8002ad4:	68fb      	ldr	r3, [r7, #12]
 8002ad6:	681b      	ldr	r3, [r3, #0]
 8002ad8:	689b      	ldr	r3, [r3, #8]
 8002ada:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002ade:	2b80      	cmp	r3, #128	@ 0x80
 8002ae0:	d0f2      	beq.n	8002ac8 <SPI_EndRxTxTransaction+0x78>
 8002ae2:	e000      	b.n	8002ae6 <SPI_EndRxTxTransaction+0x96>
        break;
 8002ae4:	bf00      	nop
  }

  return HAL_OK;
 8002ae6:	2300      	movs	r3, #0
}
 8002ae8:	4618      	mov	r0, r3
 8002aea:	3718      	adds	r7, #24
 8002aec:	46bd      	mov	sp, r7
 8002aee:	bd80      	pop	{r7, pc}
 8002af0:	20000000 	.word	0x20000000
 8002af4:	165e9f81 	.word	0x165e9f81

08002af8 <MX_FATFS_Init>:
/* USER CODE BEGIN Variables */

/* USER CODE END Variables */

void MX_FATFS_Init(void)
{
 8002af8:	b580      	push	{r7, lr}
 8002afa:	af00      	add	r7, sp, #0
  /*## FatFS: Link the USER driver ###########################*/
  retUSER = FATFS_LinkDriver(&USER_Driver, USERPath);
 8002afc:	4904      	ldr	r1, [pc, #16]	@ (8002b10 <MX_FATFS_Init+0x18>)
 8002afe:	4805      	ldr	r0, [pc, #20]	@ (8002b14 <MX_FATFS_Init+0x1c>)
 8002b00:	f002 fefe 	bl	8005900 <FATFS_LinkDriver>
 8002b04:	4603      	mov	r3, r0
 8002b06:	461a      	mov	r2, r3
 8002b08:	4b03      	ldr	r3, [pc, #12]	@ (8002b18 <MX_FATFS_Init+0x20>)
 8002b0a:	701a      	strb	r2, [r3, #0]

  /* USER CODE BEGIN Init */
  /* additional user code for init */
  /* USER CODE END Init */
}
 8002b0c:	bf00      	nop
 8002b0e:	bd80      	pop	{r7, pc}
 8002b10:	200000fc 	.word	0x200000fc
 8002b14:	2000000c 	.word	0x2000000c
 8002b18:	200000f8 	.word	0x200000f8

08002b1c <get_fattime>:
  * @brief  Gets Time from RTC
  * @param  None
  * @retval Time in DWORD
  */
DWORD get_fattime(void)
{
 8002b1c:	b480      	push	{r7}
 8002b1e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN get_fattime */
  return 0;
 8002b20:	2300      	movs	r3, #0
  /* USER CODE END get_fattime */
}
 8002b22:	4618      	mov	r0, r3
 8002b24:	46bd      	mov	sp, r7
 8002b26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b2a:	4770      	bx	lr

08002b2c <USER_initialize>:
  * @retval DSTATUS: Operation status
  */
DSTATUS USER_initialize (
	BYTE pdrv           /* Physical drive nmuber to identify the drive */
)
{
 8002b2c:	b580      	push	{r7, lr}
 8002b2e:	b082      	sub	sp, #8
 8002b30:	af00      	add	r7, sp, #0
 8002b32:	4603      	mov	r3, r0
 8002b34:	71fb      	strb	r3, [r7, #7]
  /* USER CODE BEGIN INIT */
    Stat = STA_NOINIT;
 8002b36:	4b06      	ldr	r3, [pc, #24]	@ (8002b50 <USER_initialize+0x24>)
 8002b38:	2201      	movs	r2, #1
 8002b3a:	701a      	strb	r2, [r3, #0]
    return USER_SPI_initialize(pdrv);//Stat;
 8002b3c:	79fb      	ldrb	r3, [r7, #7]
 8002b3e:	4618      	mov	r0, r3
 8002b40:	f000 f9de 	bl	8002f00 <USER_SPI_initialize>
 8002b44:	4603      	mov	r3, r0
  /* USER CODE END INIT */
}
 8002b46:	4618      	mov	r0, r3
 8002b48:	3708      	adds	r7, #8
 8002b4a:	46bd      	mov	sp, r7
 8002b4c:	bd80      	pop	{r7, pc}
 8002b4e:	bf00      	nop
 8002b50:	20000009 	.word	0x20000009

08002b54 <USER_status>:
  * @retval DSTATUS: Operation status
  */
DSTATUS USER_status (
	BYTE pdrv       /* Physical drive number to identify the drive */
)
{
 8002b54:	b580      	push	{r7, lr}
 8002b56:	b082      	sub	sp, #8
 8002b58:	af00      	add	r7, sp, #0
 8002b5a:	4603      	mov	r3, r0
 8002b5c:	71fb      	strb	r3, [r7, #7]
  /* USER CODE BEGIN STATUS */
    Stat = STA_NOINIT;
 8002b5e:	4b06      	ldr	r3, [pc, #24]	@ (8002b78 <USER_status+0x24>)
 8002b60:	2201      	movs	r2, #1
 8002b62:	701a      	strb	r2, [r3, #0]
    return USER_SPI_status(pdrv);
 8002b64:	79fb      	ldrb	r3, [r7, #7]
 8002b66:	4618      	mov	r0, r3
 8002b68:	f000 fab4 	bl	80030d4 <USER_SPI_status>
 8002b6c:	4603      	mov	r3, r0
  /* USER CODE END STATUS */
}
 8002b6e:	4618      	mov	r0, r3
 8002b70:	3708      	adds	r7, #8
 8002b72:	46bd      	mov	sp, r7
 8002b74:	bd80      	pop	{r7, pc}
 8002b76:	bf00      	nop
 8002b78:	20000009 	.word	0x20000009

08002b7c <USER_read>:
	BYTE pdrv,      /* Physical drive nmuber to identify the drive */
	BYTE *buff,     /* Data buffer to store read data */
	DWORD sector,   /* Sector address in LBA */
	UINT count      /* Number of sectors to read */
)
{
 8002b7c:	b580      	push	{r7, lr}
 8002b7e:	b084      	sub	sp, #16
 8002b80:	af00      	add	r7, sp, #0
 8002b82:	60b9      	str	r1, [r7, #8]
 8002b84:	607a      	str	r2, [r7, #4]
 8002b86:	603b      	str	r3, [r7, #0]
 8002b88:	4603      	mov	r3, r0
 8002b8a:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN READ */
	return USER_SPI_read(pdrv, buff, sector, count);
 8002b8c:	7bf8      	ldrb	r0, [r7, #15]
 8002b8e:	683b      	ldr	r3, [r7, #0]
 8002b90:	687a      	ldr	r2, [r7, #4]
 8002b92:	68b9      	ldr	r1, [r7, #8]
 8002b94:	f000 fab4 	bl	8003100 <USER_SPI_read>
 8002b98:	4603      	mov	r3, r0
  /* USER CODE END READ */
}
 8002b9a:	4618      	mov	r0, r3
 8002b9c:	3710      	adds	r7, #16
 8002b9e:	46bd      	mov	sp, r7
 8002ba0:	bd80      	pop	{r7, pc}

08002ba2 <USER_write>:
	BYTE pdrv,          /* Physical drive nmuber to identify the drive */
	const BYTE *buff,   /* Data to be written */
	DWORD sector,       /* Sector address in LBA */
	UINT count          /* Number of sectors to write */
)
{
 8002ba2:	b580      	push	{r7, lr}
 8002ba4:	b084      	sub	sp, #16
 8002ba6:	af00      	add	r7, sp, #0
 8002ba8:	60b9      	str	r1, [r7, #8]
 8002baa:	607a      	str	r2, [r7, #4]
 8002bac:	603b      	str	r3, [r7, #0]
 8002bae:	4603      	mov	r3, r0
 8002bb0:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN WRITE */
  /* USER CODE HERE */
	return USER_SPI_write(pdrv, buff, sector, count);
 8002bb2:	7bf8      	ldrb	r0, [r7, #15]
 8002bb4:	683b      	ldr	r3, [r7, #0]
 8002bb6:	687a      	ldr	r2, [r7, #4]
 8002bb8:	68b9      	ldr	r1, [r7, #8]
 8002bba:	f000 fb07 	bl	80031cc <USER_SPI_write>
 8002bbe:	4603      	mov	r3, r0
  /* USER CODE END WRITE */
}
 8002bc0:	4618      	mov	r0, r3
 8002bc2:	3710      	adds	r7, #16
 8002bc4:	46bd      	mov	sp, r7
 8002bc6:	bd80      	pop	{r7, pc}

08002bc8 <USER_ioctl>:
DRESULT USER_ioctl (
	BYTE pdrv,      /* Physical drive nmuber (0..) */
	BYTE cmd,       /* Control code */
	void *buff      /* Buffer to send/receive control data */
)
{
 8002bc8:	b580      	push	{r7, lr}
 8002bca:	b084      	sub	sp, #16
 8002bcc:	af00      	add	r7, sp, #0
 8002bce:	4603      	mov	r3, r0
 8002bd0:	603a      	str	r2, [r7, #0]
 8002bd2:	71fb      	strb	r3, [r7, #7]
 8002bd4:	460b      	mov	r3, r1
 8002bd6:	71bb      	strb	r3, [r7, #6]
  /* USER CODE BEGIN IOCTL */
    DRESULT res = RES_ERROR;
 8002bd8:	2301      	movs	r3, #1
 8002bda:	73fb      	strb	r3, [r7, #15]
    return USER_SPI_ioctl(pdrv, cmd, buff); //ADD THIS LINE
 8002bdc:	79b9      	ldrb	r1, [r7, #6]
 8002bde:	79fb      	ldrb	r3, [r7, #7]
 8002be0:	683a      	ldr	r2, [r7, #0]
 8002be2:	4618      	mov	r0, r3
 8002be4:	f000 fb6e 	bl	80032c4 <USER_SPI_ioctl>
 8002be8:	4603      	mov	r3, r0
  /* USER CODE END IOCTL */
}
 8002bea:	4618      	mov	r0, r3
 8002bec:	3710      	adds	r7, #16
 8002bee:	46bd      	mov	sp, r7
 8002bf0:	bd80      	pop	{r7, pc}
	...

08002bf4 <SPI_Timer_On>:
BYTE CardType;			/* Card type flags */

uint32_t spiTimerTickStart;
uint32_t spiTimerTickDelay;

void SPI_Timer_On(uint32_t waitTicks) {
 8002bf4:	b580      	push	{r7, lr}
 8002bf6:	b082      	sub	sp, #8
 8002bf8:	af00      	add	r7, sp, #0
 8002bfa:	6078      	str	r0, [r7, #4]
    spiTimerTickStart = HAL_GetTick();
 8002bfc:	f7fe fc52 	bl	80014a4 <HAL_GetTick>
 8002c00:	4603      	mov	r3, r0
 8002c02:	4a04      	ldr	r2, [pc, #16]	@ (8002c14 <SPI_Timer_On+0x20>)
 8002c04:	6013      	str	r3, [r2, #0]
    spiTimerTickDelay = waitTicks;
 8002c06:	4a04      	ldr	r2, [pc, #16]	@ (8002c18 <SPI_Timer_On+0x24>)
 8002c08:	687b      	ldr	r3, [r7, #4]
 8002c0a:	6013      	str	r3, [r2, #0]
}
 8002c0c:	bf00      	nop
 8002c0e:	3708      	adds	r7, #8
 8002c10:	46bd      	mov	sp, r7
 8002c12:	bd80      	pop	{r7, pc}
 8002c14:	20000104 	.word	0x20000104
 8002c18:	20000108 	.word	0x20000108

08002c1c <SPI_Timer_Status>:

uint8_t SPI_Timer_Status() {
 8002c1c:	b580      	push	{r7, lr}
 8002c1e:	af00      	add	r7, sp, #0
    return ((HAL_GetTick() - spiTimerTickStart) < spiTimerTickDelay);
 8002c20:	f7fe fc40 	bl	80014a4 <HAL_GetTick>
 8002c24:	4602      	mov	r2, r0
 8002c26:	4b06      	ldr	r3, [pc, #24]	@ (8002c40 <SPI_Timer_Status+0x24>)
 8002c28:	681b      	ldr	r3, [r3, #0]
 8002c2a:	1ad2      	subs	r2, r2, r3
 8002c2c:	4b05      	ldr	r3, [pc, #20]	@ (8002c44 <SPI_Timer_Status+0x28>)
 8002c2e:	681b      	ldr	r3, [r3, #0]
 8002c30:	429a      	cmp	r2, r3
 8002c32:	bf34      	ite	cc
 8002c34:	2301      	movcc	r3, #1
 8002c36:	2300      	movcs	r3, #0
 8002c38:	b2db      	uxtb	r3, r3
}
 8002c3a:	4618      	mov	r0, r3
 8002c3c:	bd80      	pop	{r7, pc}
 8002c3e:	bf00      	nop
 8002c40:	20000104 	.word	0x20000104
 8002c44:	20000108 	.word	0x20000108

08002c48 <xchg_spi>:
/* Exchange a byte */
static
BYTE xchg_spi (
	BYTE dat	/* Data to send */
)
{
 8002c48:	b580      	push	{r7, lr}
 8002c4a:	b086      	sub	sp, #24
 8002c4c:	af02      	add	r7, sp, #8
 8002c4e:	4603      	mov	r3, r0
 8002c50:	71fb      	strb	r3, [r7, #7]
	BYTE rxDat;
    HAL_SPI_TransmitReceive(&SD_SPI_HANDLE, &dat, &rxDat, 1, 50);
 8002c52:	f107 020f 	add.w	r2, r7, #15
 8002c56:	1df9      	adds	r1, r7, #7
 8002c58:	2332      	movs	r3, #50	@ 0x32
 8002c5a:	9300      	str	r3, [sp, #0]
 8002c5c:	2301      	movs	r3, #1
 8002c5e:	4804      	ldr	r0, [pc, #16]	@ (8002c70 <xchg_spi+0x28>)
 8002c60:	f7ff fcc5 	bl	80025ee <HAL_SPI_TransmitReceive>
    return rxDat;
 8002c64:	7bfb      	ldrb	r3, [r7, #15]
}
 8002c66:	4618      	mov	r0, r3
 8002c68:	3710      	adds	r7, #16
 8002c6a:	46bd      	mov	sp, r7
 8002c6c:	bd80      	pop	{r7, pc}
 8002c6e:	bf00      	nop
 8002c70:	20000094 	.word	0x20000094

08002c74 <rcvr_spi_multi>:
static
void rcvr_spi_multi (
	BYTE *buff,		/* Pointer to data buffer */
	UINT btr		/* Number of bytes to receive (even number) */
)
{
 8002c74:	b590      	push	{r4, r7, lr}
 8002c76:	b085      	sub	sp, #20
 8002c78:	af00      	add	r7, sp, #0
 8002c7a:	6078      	str	r0, [r7, #4]
 8002c7c:	6039      	str	r1, [r7, #0]
	for(UINT i=0; i<btr; i++) {
 8002c7e:	2300      	movs	r3, #0
 8002c80:	60fb      	str	r3, [r7, #12]
 8002c82:	e00a      	b.n	8002c9a <rcvr_spi_multi+0x26>
		*(buff+i) = xchg_spi(0xFF);
 8002c84:	687a      	ldr	r2, [r7, #4]
 8002c86:	68fb      	ldr	r3, [r7, #12]
 8002c88:	18d4      	adds	r4, r2, r3
 8002c8a:	20ff      	movs	r0, #255	@ 0xff
 8002c8c:	f7ff ffdc 	bl	8002c48 <xchg_spi>
 8002c90:	4603      	mov	r3, r0
 8002c92:	7023      	strb	r3, [r4, #0]
	for(UINT i=0; i<btr; i++) {
 8002c94:	68fb      	ldr	r3, [r7, #12]
 8002c96:	3301      	adds	r3, #1
 8002c98:	60fb      	str	r3, [r7, #12]
 8002c9a:	68fa      	ldr	r2, [r7, #12]
 8002c9c:	683b      	ldr	r3, [r7, #0]
 8002c9e:	429a      	cmp	r2, r3
 8002ca0:	d3f0      	bcc.n	8002c84 <rcvr_spi_multi+0x10>
	}
}
 8002ca2:	bf00      	nop
 8002ca4:	bf00      	nop
 8002ca6:	3714      	adds	r7, #20
 8002ca8:	46bd      	mov	sp, r7
 8002caa:	bd90      	pop	{r4, r7, pc}

08002cac <xmit_spi_multi>:
static
void xmit_spi_multi (
	const BYTE *buff,	/* Pointer to the data */
	UINT btx			/* Number of bytes to send (even number) */
)
{
 8002cac:	b580      	push	{r7, lr}
 8002cae:	b082      	sub	sp, #8
 8002cb0:	af00      	add	r7, sp, #0
 8002cb2:	6078      	str	r0, [r7, #4]
 8002cb4:	6039      	str	r1, [r7, #0]
	HAL_SPI_Transmit(&SD_SPI_HANDLE, buff, btx, HAL_MAX_DELAY);
 8002cb6:	683b      	ldr	r3, [r7, #0]
 8002cb8:	b29a      	uxth	r2, r3
 8002cba:	f04f 33ff 	mov.w	r3, #4294967295
 8002cbe:	6879      	ldr	r1, [r7, #4]
 8002cc0:	4803      	ldr	r0, [pc, #12]	@ (8002cd0 <xmit_spi_multi+0x24>)
 8002cc2:	f7ff fb50 	bl	8002366 <HAL_SPI_Transmit>
}
 8002cc6:	bf00      	nop
 8002cc8:	3708      	adds	r7, #8
 8002cca:	46bd      	mov	sp, r7
 8002ccc:	bd80      	pop	{r7, pc}
 8002cce:	bf00      	nop
 8002cd0:	20000094 	.word	0x20000094

08002cd4 <wait_ready>:

static
int wait_ready (	/* 1:Ready, 0:Timeout */
	UINT wt			/* Timeout [ms] */
)
{
 8002cd4:	b580      	push	{r7, lr}
 8002cd6:	b086      	sub	sp, #24
 8002cd8:	af00      	add	r7, sp, #0
 8002cda:	6078      	str	r0, [r7, #4]
	//wait_ready needs its own timer, unfortunately, so it can't use the
	//spi_timer functions
	uint32_t waitSpiTimerTickStart;
	uint32_t waitSpiTimerTickDelay;

	waitSpiTimerTickStart = HAL_GetTick();
 8002cdc:	f7fe fbe2 	bl	80014a4 <HAL_GetTick>
 8002ce0:	6178      	str	r0, [r7, #20]
	waitSpiTimerTickDelay = (uint32_t)wt;
 8002ce2:	687b      	ldr	r3, [r7, #4]
 8002ce4:	613b      	str	r3, [r7, #16]
	do {
		d = xchg_spi(0xFF);
 8002ce6:	20ff      	movs	r0, #255	@ 0xff
 8002ce8:	f7ff ffae 	bl	8002c48 <xchg_spi>
 8002cec:	4603      	mov	r3, r0
 8002cee:	73fb      	strb	r3, [r7, #15]
		/* This loop takes a time. Insert rot_rdq() here for multitask envilonment. */
	} while (d != 0xFF && ((HAL_GetTick() - waitSpiTimerTickStart) < waitSpiTimerTickDelay));	/* Wait for card goes ready or timeout */
 8002cf0:	7bfb      	ldrb	r3, [r7, #15]
 8002cf2:	2bff      	cmp	r3, #255	@ 0xff
 8002cf4:	d007      	beq.n	8002d06 <wait_ready+0x32>
 8002cf6:	f7fe fbd5 	bl	80014a4 <HAL_GetTick>
 8002cfa:	4602      	mov	r2, r0
 8002cfc:	697b      	ldr	r3, [r7, #20]
 8002cfe:	1ad3      	subs	r3, r2, r3
 8002d00:	693a      	ldr	r2, [r7, #16]
 8002d02:	429a      	cmp	r2, r3
 8002d04:	d8ef      	bhi.n	8002ce6 <wait_ready+0x12>

	return (d == 0xFF) ? 1 : 0;
 8002d06:	7bfb      	ldrb	r3, [r7, #15]
 8002d08:	2bff      	cmp	r3, #255	@ 0xff
 8002d0a:	bf0c      	ite	eq
 8002d0c:	2301      	moveq	r3, #1
 8002d0e:	2300      	movne	r3, #0
 8002d10:	b2db      	uxtb	r3, r3
}
 8002d12:	4618      	mov	r0, r3
 8002d14:	3718      	adds	r7, #24
 8002d16:	46bd      	mov	sp, r7
 8002d18:	bd80      	pop	{r7, pc}
	...

08002d1c <despiselect>:
/* Despiselect card and release SPI                                         */
/*-----------------------------------------------------------------------*/

static
void despiselect (void)
{
 8002d1c:	b580      	push	{r7, lr}
 8002d1e:	af00      	add	r7, sp, #0
	CS_HIGH();		/* Set CS# high */
 8002d20:	2201      	movs	r2, #1
 8002d22:	2120      	movs	r1, #32
 8002d24:	4803      	ldr	r0, [pc, #12]	@ (8002d34 <despiselect+0x18>)
 8002d26:	f7fe fe57 	bl	80019d8 <HAL_GPIO_WritePin>
	xchg_spi(0xFF);	/* Dummy clock (force DO hi-z for multiple slave SPI) */
 8002d2a:	20ff      	movs	r0, #255	@ 0xff
 8002d2c:	f7ff ff8c 	bl	8002c48 <xchg_spi>

}
 8002d30:	bf00      	nop
 8002d32:	bd80      	pop	{r7, pc}
 8002d34:	40020800 	.word	0x40020800

08002d38 <spiselect>:
/* Select card and wait for ready                                        */
/*-----------------------------------------------------------------------*/

static
int spiselect (void)	/* 1:OK, 0:Timeout */
{
 8002d38:	b580      	push	{r7, lr}
 8002d3a:	af00      	add	r7, sp, #0
	CS_LOW();		/* Set CS# low */
 8002d3c:	2200      	movs	r2, #0
 8002d3e:	2120      	movs	r1, #32
 8002d40:	4809      	ldr	r0, [pc, #36]	@ (8002d68 <spiselect+0x30>)
 8002d42:	f7fe fe49 	bl	80019d8 <HAL_GPIO_WritePin>
	xchg_spi(0xFF);	/* Dummy clock (force DO enabled) */
 8002d46:	20ff      	movs	r0, #255	@ 0xff
 8002d48:	f7ff ff7e 	bl	8002c48 <xchg_spi>
	if (wait_ready(500)) return 1;	/* Wait for card ready */
 8002d4c:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 8002d50:	f7ff ffc0 	bl	8002cd4 <wait_ready>
 8002d54:	4603      	mov	r3, r0
 8002d56:	2b00      	cmp	r3, #0
 8002d58:	d001      	beq.n	8002d5e <spiselect+0x26>
 8002d5a:	2301      	movs	r3, #1
 8002d5c:	e002      	b.n	8002d64 <spiselect+0x2c>

	despiselect();
 8002d5e:	f7ff ffdd 	bl	8002d1c <despiselect>
	return 0;	/* Timeout */
 8002d62:	2300      	movs	r3, #0
}
 8002d64:	4618      	mov	r0, r3
 8002d66:	bd80      	pop	{r7, pc}
 8002d68:	40020800 	.word	0x40020800

08002d6c <rcvr_datablock>:
static
int rcvr_datablock (	/* 1:OK, 0:Error */
	BYTE *buff,			/* Data buffer */
	UINT btr			/* Data block length (byte) */
)
{
 8002d6c:	b580      	push	{r7, lr}
 8002d6e:	b084      	sub	sp, #16
 8002d70:	af00      	add	r7, sp, #0
 8002d72:	6078      	str	r0, [r7, #4]
 8002d74:	6039      	str	r1, [r7, #0]
	BYTE token;


	SPI_Timer_On(200);
 8002d76:	20c8      	movs	r0, #200	@ 0xc8
 8002d78:	f7ff ff3c 	bl	8002bf4 <SPI_Timer_On>
	do {							/* Wait for DataStart token in timeout of 200ms */
		token = xchg_spi(0xFF);
 8002d7c:	20ff      	movs	r0, #255	@ 0xff
 8002d7e:	f7ff ff63 	bl	8002c48 <xchg_spi>
 8002d82:	4603      	mov	r3, r0
 8002d84:	73fb      	strb	r3, [r7, #15]
		/* This loop will take a time. Insert rot_rdq() here for multitask envilonment. */
	} while ((token == 0xFF) && SPI_Timer_Status());
 8002d86:	7bfb      	ldrb	r3, [r7, #15]
 8002d88:	2bff      	cmp	r3, #255	@ 0xff
 8002d8a:	d104      	bne.n	8002d96 <rcvr_datablock+0x2a>
 8002d8c:	f7ff ff46 	bl	8002c1c <SPI_Timer_Status>
 8002d90:	4603      	mov	r3, r0
 8002d92:	2b00      	cmp	r3, #0
 8002d94:	d1f2      	bne.n	8002d7c <rcvr_datablock+0x10>
	if(token != 0xFE) return 0;		/* Function fails if invalid DataStart token or timeout */
 8002d96:	7bfb      	ldrb	r3, [r7, #15]
 8002d98:	2bfe      	cmp	r3, #254	@ 0xfe
 8002d9a:	d001      	beq.n	8002da0 <rcvr_datablock+0x34>
 8002d9c:	2300      	movs	r3, #0
 8002d9e:	e00a      	b.n	8002db6 <rcvr_datablock+0x4a>

	rcvr_spi_multi(buff, btr);		/* Store trailing data to the buffer */
 8002da0:	6839      	ldr	r1, [r7, #0]
 8002da2:	6878      	ldr	r0, [r7, #4]
 8002da4:	f7ff ff66 	bl	8002c74 <rcvr_spi_multi>
	xchg_spi(0xFF); xchg_spi(0xFF);			/* Discard CRC */
 8002da8:	20ff      	movs	r0, #255	@ 0xff
 8002daa:	f7ff ff4d 	bl	8002c48 <xchg_spi>
 8002dae:	20ff      	movs	r0, #255	@ 0xff
 8002db0:	f7ff ff4a 	bl	8002c48 <xchg_spi>

	return 1;						/* Function succeeded */
 8002db4:	2301      	movs	r3, #1
}
 8002db6:	4618      	mov	r0, r3
 8002db8:	3710      	adds	r7, #16
 8002dba:	46bd      	mov	sp, r7
 8002dbc:	bd80      	pop	{r7, pc}

08002dbe <xmit_datablock>:
static
int xmit_datablock (	/* 1:OK, 0:Failed */
	const BYTE *buff,	/* Ponter to 512 byte data to be sent */
	BYTE token			/* Token */
)
{
 8002dbe:	b580      	push	{r7, lr}
 8002dc0:	b084      	sub	sp, #16
 8002dc2:	af00      	add	r7, sp, #0
 8002dc4:	6078      	str	r0, [r7, #4]
 8002dc6:	460b      	mov	r3, r1
 8002dc8:	70fb      	strb	r3, [r7, #3]
	BYTE resp;


	if (!wait_ready(500)) return 0;		/* Wait for card ready */
 8002dca:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 8002dce:	f7ff ff81 	bl	8002cd4 <wait_ready>
 8002dd2:	4603      	mov	r3, r0
 8002dd4:	2b00      	cmp	r3, #0
 8002dd6:	d101      	bne.n	8002ddc <xmit_datablock+0x1e>
 8002dd8:	2300      	movs	r3, #0
 8002dda:	e01e      	b.n	8002e1a <xmit_datablock+0x5c>

	xchg_spi(token);					/* Send token */
 8002ddc:	78fb      	ldrb	r3, [r7, #3]
 8002dde:	4618      	mov	r0, r3
 8002de0:	f7ff ff32 	bl	8002c48 <xchg_spi>
	if (token != 0xFD) {				/* Send data if token is other than StopTran */
 8002de4:	78fb      	ldrb	r3, [r7, #3]
 8002de6:	2bfd      	cmp	r3, #253	@ 0xfd
 8002de8:	d016      	beq.n	8002e18 <xmit_datablock+0x5a>
		xmit_spi_multi(buff, 512);		/* Data */
 8002dea:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8002dee:	6878      	ldr	r0, [r7, #4]
 8002df0:	f7ff ff5c 	bl	8002cac <xmit_spi_multi>
		xchg_spi(0xFF); xchg_spi(0xFF);	/* Dummy CRC */
 8002df4:	20ff      	movs	r0, #255	@ 0xff
 8002df6:	f7ff ff27 	bl	8002c48 <xchg_spi>
 8002dfa:	20ff      	movs	r0, #255	@ 0xff
 8002dfc:	f7ff ff24 	bl	8002c48 <xchg_spi>

		resp = xchg_spi(0xFF);				/* Receive data resp */
 8002e00:	20ff      	movs	r0, #255	@ 0xff
 8002e02:	f7ff ff21 	bl	8002c48 <xchg_spi>
 8002e06:	4603      	mov	r3, r0
 8002e08:	73fb      	strb	r3, [r7, #15]
		if ((resp & 0x1F) != 0x05) return 0;	/* Function fails if the data packet was not accepted */
 8002e0a:	7bfb      	ldrb	r3, [r7, #15]
 8002e0c:	f003 031f 	and.w	r3, r3, #31
 8002e10:	2b05      	cmp	r3, #5
 8002e12:	d001      	beq.n	8002e18 <xmit_datablock+0x5a>
 8002e14:	2300      	movs	r3, #0
 8002e16:	e000      	b.n	8002e1a <xmit_datablock+0x5c>
	}
	return 1;
 8002e18:	2301      	movs	r3, #1
}
 8002e1a:	4618      	mov	r0, r3
 8002e1c:	3710      	adds	r7, #16
 8002e1e:	46bd      	mov	sp, r7
 8002e20:	bd80      	pop	{r7, pc}

08002e22 <send_cmd>:
static
BYTE send_cmd (		/* Return value: R1 resp (bit7==1:Failed to send) */
	BYTE cmd,		/* Command index */
	DWORD arg		/* Argument */
)
{
 8002e22:	b580      	push	{r7, lr}
 8002e24:	b084      	sub	sp, #16
 8002e26:	af00      	add	r7, sp, #0
 8002e28:	4603      	mov	r3, r0
 8002e2a:	6039      	str	r1, [r7, #0]
 8002e2c:	71fb      	strb	r3, [r7, #7]
	BYTE n, res;


	if (cmd & 0x80) {	/* Send a CMD55 prior to ACMD<n> */
 8002e2e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002e32:	2b00      	cmp	r3, #0
 8002e34:	da0e      	bge.n	8002e54 <send_cmd+0x32>
		cmd &= 0x7F;
 8002e36:	79fb      	ldrb	r3, [r7, #7]
 8002e38:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8002e3c:	71fb      	strb	r3, [r7, #7]
		res = send_cmd(CMD55, 0);
 8002e3e:	2100      	movs	r1, #0
 8002e40:	2037      	movs	r0, #55	@ 0x37
 8002e42:	f7ff ffee 	bl	8002e22 <send_cmd>
 8002e46:	4603      	mov	r3, r0
 8002e48:	73bb      	strb	r3, [r7, #14]
		if (res > 1) return res;
 8002e4a:	7bbb      	ldrb	r3, [r7, #14]
 8002e4c:	2b01      	cmp	r3, #1
 8002e4e:	d901      	bls.n	8002e54 <send_cmd+0x32>
 8002e50:	7bbb      	ldrb	r3, [r7, #14]
 8002e52:	e051      	b.n	8002ef8 <send_cmd+0xd6>
	}

	/* Select the card and wait for ready except to stop multiple block read */
	if (cmd != CMD12) {
 8002e54:	79fb      	ldrb	r3, [r7, #7]
 8002e56:	2b0c      	cmp	r3, #12
 8002e58:	d008      	beq.n	8002e6c <send_cmd+0x4a>
		despiselect();
 8002e5a:	f7ff ff5f 	bl	8002d1c <despiselect>
		if (!spiselect()) return 0xFF;
 8002e5e:	f7ff ff6b 	bl	8002d38 <spiselect>
 8002e62:	4603      	mov	r3, r0
 8002e64:	2b00      	cmp	r3, #0
 8002e66:	d101      	bne.n	8002e6c <send_cmd+0x4a>
 8002e68:	23ff      	movs	r3, #255	@ 0xff
 8002e6a:	e045      	b.n	8002ef8 <send_cmd+0xd6>
	}

	/* Send command packet */
	xchg_spi(0x40 | cmd);				/* Start + command index */
 8002e6c:	79fb      	ldrb	r3, [r7, #7]
 8002e6e:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8002e72:	b2db      	uxtb	r3, r3
 8002e74:	4618      	mov	r0, r3
 8002e76:	f7ff fee7 	bl	8002c48 <xchg_spi>
	xchg_spi((BYTE)(arg >> 24));		/* Argument[31..24] */
 8002e7a:	683b      	ldr	r3, [r7, #0]
 8002e7c:	0e1b      	lsrs	r3, r3, #24
 8002e7e:	b2db      	uxtb	r3, r3
 8002e80:	4618      	mov	r0, r3
 8002e82:	f7ff fee1 	bl	8002c48 <xchg_spi>
	xchg_spi((BYTE)(arg >> 16));		/* Argument[23..16] */
 8002e86:	683b      	ldr	r3, [r7, #0]
 8002e88:	0c1b      	lsrs	r3, r3, #16
 8002e8a:	b2db      	uxtb	r3, r3
 8002e8c:	4618      	mov	r0, r3
 8002e8e:	f7ff fedb 	bl	8002c48 <xchg_spi>
	xchg_spi((BYTE)(arg >> 8));			/* Argument[15..8] */
 8002e92:	683b      	ldr	r3, [r7, #0]
 8002e94:	0a1b      	lsrs	r3, r3, #8
 8002e96:	b2db      	uxtb	r3, r3
 8002e98:	4618      	mov	r0, r3
 8002e9a:	f7ff fed5 	bl	8002c48 <xchg_spi>
	xchg_spi((BYTE)arg);				/* Argument[7..0] */
 8002e9e:	683b      	ldr	r3, [r7, #0]
 8002ea0:	b2db      	uxtb	r3, r3
 8002ea2:	4618      	mov	r0, r3
 8002ea4:	f7ff fed0 	bl	8002c48 <xchg_spi>
	n = 0x01;							/* Dummy CRC + Stop */
 8002ea8:	2301      	movs	r3, #1
 8002eaa:	73fb      	strb	r3, [r7, #15]
	if (cmd == CMD0) n = 0x95;			/* Valid CRC for CMD0(0) */
 8002eac:	79fb      	ldrb	r3, [r7, #7]
 8002eae:	2b00      	cmp	r3, #0
 8002eb0:	d101      	bne.n	8002eb6 <send_cmd+0x94>
 8002eb2:	2395      	movs	r3, #149	@ 0x95
 8002eb4:	73fb      	strb	r3, [r7, #15]
	if (cmd == CMD8) n = 0x87;			/* Valid CRC for CMD8(0x1AA) */
 8002eb6:	79fb      	ldrb	r3, [r7, #7]
 8002eb8:	2b08      	cmp	r3, #8
 8002eba:	d101      	bne.n	8002ec0 <send_cmd+0x9e>
 8002ebc:	2387      	movs	r3, #135	@ 0x87
 8002ebe:	73fb      	strb	r3, [r7, #15]
	xchg_spi(n);
 8002ec0:	7bfb      	ldrb	r3, [r7, #15]
 8002ec2:	4618      	mov	r0, r3
 8002ec4:	f7ff fec0 	bl	8002c48 <xchg_spi>

	/* Receive command resp */
	if (cmd == CMD12) xchg_spi(0xFF);	/* Diacard following one byte when CMD12 */
 8002ec8:	79fb      	ldrb	r3, [r7, #7]
 8002eca:	2b0c      	cmp	r3, #12
 8002ecc:	d102      	bne.n	8002ed4 <send_cmd+0xb2>
 8002ece:	20ff      	movs	r0, #255	@ 0xff
 8002ed0:	f7ff feba 	bl	8002c48 <xchg_spi>
	n = 10;								/* Wait for response (10 bytes max) */
 8002ed4:	230a      	movs	r3, #10
 8002ed6:	73fb      	strb	r3, [r7, #15]
	do {
		res = xchg_spi(0xFF);
 8002ed8:	20ff      	movs	r0, #255	@ 0xff
 8002eda:	f7ff feb5 	bl	8002c48 <xchg_spi>
 8002ede:	4603      	mov	r3, r0
 8002ee0:	73bb      	strb	r3, [r7, #14]
	} while ((res & 0x80) && --n);
 8002ee2:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8002ee6:	2b00      	cmp	r3, #0
 8002ee8:	da05      	bge.n	8002ef6 <send_cmd+0xd4>
 8002eea:	7bfb      	ldrb	r3, [r7, #15]
 8002eec:	3b01      	subs	r3, #1
 8002eee:	73fb      	strb	r3, [r7, #15]
 8002ef0:	7bfb      	ldrb	r3, [r7, #15]
 8002ef2:	2b00      	cmp	r3, #0
 8002ef4:	d1f0      	bne.n	8002ed8 <send_cmd+0xb6>

	return res;							/* Return received response */
 8002ef6:	7bbb      	ldrb	r3, [r7, #14]
}
 8002ef8:	4618      	mov	r0, r3
 8002efa:	3710      	adds	r7, #16
 8002efc:	46bd      	mov	sp, r7
 8002efe:	bd80      	pop	{r7, pc}

08002f00 <USER_SPI_initialize>:
/*-----------------------------------------------------------------------*/

inline DSTATUS USER_SPI_initialize (
	BYTE drv		/* Physical drive number (0) */
)
{
 8002f00:	b590      	push	{r4, r7, lr}
 8002f02:	b085      	sub	sp, #20
 8002f04:	af00      	add	r7, sp, #0
 8002f06:	4603      	mov	r3, r0
 8002f08:	71fb      	strb	r3, [r7, #7]
	BYTE n, cmd, ty, ocr[4];

	if (drv != 0) return STA_NOINIT;		/* Supports only drive 0 */
 8002f0a:	79fb      	ldrb	r3, [r7, #7]
 8002f0c:	2b00      	cmp	r3, #0
 8002f0e:	d001      	beq.n	8002f14 <USER_SPI_initialize+0x14>
 8002f10:	2301      	movs	r3, #1
 8002f12:	e0d4      	b.n	80030be <USER_SPI_initialize+0x1be>
	//assume SPI already init init_spi();	/* Initialize SPI */

	if (Stat & STA_NODISK) return Stat;	/* Is card existing in the soket? */
 8002f14:	4b6c      	ldr	r3, [pc, #432]	@ (80030c8 <USER_SPI_initialize+0x1c8>)
 8002f16:	781b      	ldrb	r3, [r3, #0]
 8002f18:	b2db      	uxtb	r3, r3
 8002f1a:	f003 0302 	and.w	r3, r3, #2
 8002f1e:	2b00      	cmp	r3, #0
 8002f20:	d003      	beq.n	8002f2a <USER_SPI_initialize+0x2a>
 8002f22:	4b69      	ldr	r3, [pc, #420]	@ (80030c8 <USER_SPI_initialize+0x1c8>)
 8002f24:	781b      	ldrb	r3, [r3, #0]
 8002f26:	b2db      	uxtb	r3, r3
 8002f28:	e0c9      	b.n	80030be <USER_SPI_initialize+0x1be>

	FCLK_SLOW();
 8002f2a:	4b68      	ldr	r3, [pc, #416]	@ (80030cc <USER_SPI_initialize+0x1cc>)
 8002f2c:	681b      	ldr	r3, [r3, #0]
 8002f2e:	681b      	ldr	r3, [r3, #0]
 8002f30:	f023 0238 	bic.w	r2, r3, #56	@ 0x38
 8002f34:	4b65      	ldr	r3, [pc, #404]	@ (80030cc <USER_SPI_initialize+0x1cc>)
 8002f36:	681b      	ldr	r3, [r3, #0]
 8002f38:	f042 0228 	orr.w	r2, r2, #40	@ 0x28
 8002f3c:	601a      	str	r2, [r3, #0]
	for (n = 10; n; n--) xchg_spi(0xFF);	/* Send 80 dummy clocks */
 8002f3e:	230a      	movs	r3, #10
 8002f40:	73fb      	strb	r3, [r7, #15]
 8002f42:	e005      	b.n	8002f50 <USER_SPI_initialize+0x50>
 8002f44:	20ff      	movs	r0, #255	@ 0xff
 8002f46:	f7ff fe7f 	bl	8002c48 <xchg_spi>
 8002f4a:	7bfb      	ldrb	r3, [r7, #15]
 8002f4c:	3b01      	subs	r3, #1
 8002f4e:	73fb      	strb	r3, [r7, #15]
 8002f50:	7bfb      	ldrb	r3, [r7, #15]
 8002f52:	2b00      	cmp	r3, #0
 8002f54:	d1f6      	bne.n	8002f44 <USER_SPI_initialize+0x44>

	ty = 0;
 8002f56:	2300      	movs	r3, #0
 8002f58:	737b      	strb	r3, [r7, #13]
	if (send_cmd(CMD0, 0) == 1) {			/* Put the card SPI/Idle state */
 8002f5a:	2100      	movs	r1, #0
 8002f5c:	2000      	movs	r0, #0
 8002f5e:	f7ff ff60 	bl	8002e22 <send_cmd>
 8002f62:	4603      	mov	r3, r0
 8002f64:	2b01      	cmp	r3, #1
 8002f66:	f040 808b 	bne.w	8003080 <USER_SPI_initialize+0x180>
		SPI_Timer_On(1000);					/* Initialization timeout = 1 sec */
 8002f6a:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8002f6e:	f7ff fe41 	bl	8002bf4 <SPI_Timer_On>
		if (send_cmd(CMD8, 0x1AA) == 1) {	/* SDv2? */
 8002f72:	f44f 71d5 	mov.w	r1, #426	@ 0x1aa
 8002f76:	2008      	movs	r0, #8
 8002f78:	f7ff ff53 	bl	8002e22 <send_cmd>
 8002f7c:	4603      	mov	r3, r0
 8002f7e:	2b01      	cmp	r3, #1
 8002f80:	d151      	bne.n	8003026 <USER_SPI_initialize+0x126>
			for (n = 0; n < 4; n++) ocr[n] = xchg_spi(0xFF);	/* Get 32 bit return value of R7 resp */
 8002f82:	2300      	movs	r3, #0
 8002f84:	73fb      	strb	r3, [r7, #15]
 8002f86:	e00d      	b.n	8002fa4 <USER_SPI_initialize+0xa4>
 8002f88:	7bfc      	ldrb	r4, [r7, #15]
 8002f8a:	20ff      	movs	r0, #255	@ 0xff
 8002f8c:	f7ff fe5c 	bl	8002c48 <xchg_spi>
 8002f90:	4603      	mov	r3, r0
 8002f92:	461a      	mov	r2, r3
 8002f94:	f104 0310 	add.w	r3, r4, #16
 8002f98:	443b      	add	r3, r7
 8002f9a:	f803 2c08 	strb.w	r2, [r3, #-8]
 8002f9e:	7bfb      	ldrb	r3, [r7, #15]
 8002fa0:	3301      	adds	r3, #1
 8002fa2:	73fb      	strb	r3, [r7, #15]
 8002fa4:	7bfb      	ldrb	r3, [r7, #15]
 8002fa6:	2b03      	cmp	r3, #3
 8002fa8:	d9ee      	bls.n	8002f88 <USER_SPI_initialize+0x88>
			if (ocr[2] == 0x01 && ocr[3] == 0xAA) {				/* Is the card supports vcc of 2.7-3.6V? */
 8002faa:	7abb      	ldrb	r3, [r7, #10]
 8002fac:	2b01      	cmp	r3, #1
 8002fae:	d167      	bne.n	8003080 <USER_SPI_initialize+0x180>
 8002fb0:	7afb      	ldrb	r3, [r7, #11]
 8002fb2:	2baa      	cmp	r3, #170	@ 0xaa
 8002fb4:	d164      	bne.n	8003080 <USER_SPI_initialize+0x180>
				while (SPI_Timer_Status() && send_cmd(ACMD41, 1UL << 30)) ;	/* Wait for end of initialization with ACMD41(HCS) */
 8002fb6:	bf00      	nop
 8002fb8:	f7ff fe30 	bl	8002c1c <SPI_Timer_Status>
 8002fbc:	4603      	mov	r3, r0
 8002fbe:	2b00      	cmp	r3, #0
 8002fc0:	d007      	beq.n	8002fd2 <USER_SPI_initialize+0xd2>
 8002fc2:	f04f 4180 	mov.w	r1, #1073741824	@ 0x40000000
 8002fc6:	20a9      	movs	r0, #169	@ 0xa9
 8002fc8:	f7ff ff2b 	bl	8002e22 <send_cmd>
 8002fcc:	4603      	mov	r3, r0
 8002fce:	2b00      	cmp	r3, #0
 8002fd0:	d1f2      	bne.n	8002fb8 <USER_SPI_initialize+0xb8>
				if (SPI_Timer_Status() && send_cmd(CMD58, 0) == 0) {		/* Check CCS bit in the OCR */
 8002fd2:	f7ff fe23 	bl	8002c1c <SPI_Timer_Status>
 8002fd6:	4603      	mov	r3, r0
 8002fd8:	2b00      	cmp	r3, #0
 8002fda:	d051      	beq.n	8003080 <USER_SPI_initialize+0x180>
 8002fdc:	2100      	movs	r1, #0
 8002fde:	203a      	movs	r0, #58	@ 0x3a
 8002fe0:	f7ff ff1f 	bl	8002e22 <send_cmd>
 8002fe4:	4603      	mov	r3, r0
 8002fe6:	2b00      	cmp	r3, #0
 8002fe8:	d14a      	bne.n	8003080 <USER_SPI_initialize+0x180>
					for (n = 0; n < 4; n++) ocr[n] = xchg_spi(0xFF);
 8002fea:	2300      	movs	r3, #0
 8002fec:	73fb      	strb	r3, [r7, #15]
 8002fee:	e00d      	b.n	800300c <USER_SPI_initialize+0x10c>
 8002ff0:	7bfc      	ldrb	r4, [r7, #15]
 8002ff2:	20ff      	movs	r0, #255	@ 0xff
 8002ff4:	f7ff fe28 	bl	8002c48 <xchg_spi>
 8002ff8:	4603      	mov	r3, r0
 8002ffa:	461a      	mov	r2, r3
 8002ffc:	f104 0310 	add.w	r3, r4, #16
 8003000:	443b      	add	r3, r7
 8003002:	f803 2c08 	strb.w	r2, [r3, #-8]
 8003006:	7bfb      	ldrb	r3, [r7, #15]
 8003008:	3301      	adds	r3, #1
 800300a:	73fb      	strb	r3, [r7, #15]
 800300c:	7bfb      	ldrb	r3, [r7, #15]
 800300e:	2b03      	cmp	r3, #3
 8003010:	d9ee      	bls.n	8002ff0 <USER_SPI_initialize+0xf0>
					ty = (ocr[0] & 0x40) ? CT_SD2 | CT_BLOCK : CT_SD2;	/* Card id SDv2 */
 8003012:	7a3b      	ldrb	r3, [r7, #8]
 8003014:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003018:	2b00      	cmp	r3, #0
 800301a:	d001      	beq.n	8003020 <USER_SPI_initialize+0x120>
 800301c:	230c      	movs	r3, #12
 800301e:	e000      	b.n	8003022 <USER_SPI_initialize+0x122>
 8003020:	2304      	movs	r3, #4
 8003022:	737b      	strb	r3, [r7, #13]
 8003024:	e02c      	b.n	8003080 <USER_SPI_initialize+0x180>
				}
			}
		} else {	/* Not SDv2 card */
			if (send_cmd(ACMD41, 0) <= 1) 	{	/* SDv1 or MMC? */
 8003026:	2100      	movs	r1, #0
 8003028:	20a9      	movs	r0, #169	@ 0xa9
 800302a:	f7ff fefa 	bl	8002e22 <send_cmd>
 800302e:	4603      	mov	r3, r0
 8003030:	2b01      	cmp	r3, #1
 8003032:	d804      	bhi.n	800303e <USER_SPI_initialize+0x13e>
				ty = CT_SD1; cmd = ACMD41;	/* SDv1 (ACMD41(0)) */
 8003034:	2302      	movs	r3, #2
 8003036:	737b      	strb	r3, [r7, #13]
 8003038:	23a9      	movs	r3, #169	@ 0xa9
 800303a:	73bb      	strb	r3, [r7, #14]
 800303c:	e003      	b.n	8003046 <USER_SPI_initialize+0x146>
			} else {
				ty = CT_MMC; cmd = CMD1;	/* MMCv3 (CMD1(0)) */
 800303e:	2301      	movs	r3, #1
 8003040:	737b      	strb	r3, [r7, #13]
 8003042:	2301      	movs	r3, #1
 8003044:	73bb      	strb	r3, [r7, #14]
			}
			while (SPI_Timer_Status() && send_cmd(cmd, 0)) ;		/* Wait for end of initialization */
 8003046:	bf00      	nop
 8003048:	f7ff fde8 	bl	8002c1c <SPI_Timer_Status>
 800304c:	4603      	mov	r3, r0
 800304e:	2b00      	cmp	r3, #0
 8003050:	d007      	beq.n	8003062 <USER_SPI_initialize+0x162>
 8003052:	7bbb      	ldrb	r3, [r7, #14]
 8003054:	2100      	movs	r1, #0
 8003056:	4618      	mov	r0, r3
 8003058:	f7ff fee3 	bl	8002e22 <send_cmd>
 800305c:	4603      	mov	r3, r0
 800305e:	2b00      	cmp	r3, #0
 8003060:	d1f2      	bne.n	8003048 <USER_SPI_initialize+0x148>
			if (!SPI_Timer_Status() || send_cmd(CMD16, 512) != 0)	/* Set block length: 512 */
 8003062:	f7ff fddb 	bl	8002c1c <SPI_Timer_Status>
 8003066:	4603      	mov	r3, r0
 8003068:	2b00      	cmp	r3, #0
 800306a:	d007      	beq.n	800307c <USER_SPI_initialize+0x17c>
 800306c:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8003070:	2010      	movs	r0, #16
 8003072:	f7ff fed6 	bl	8002e22 <send_cmd>
 8003076:	4603      	mov	r3, r0
 8003078:	2b00      	cmp	r3, #0
 800307a:	d001      	beq.n	8003080 <USER_SPI_initialize+0x180>
				ty = 0;
 800307c:	2300      	movs	r3, #0
 800307e:	737b      	strb	r3, [r7, #13]
		}
	}
	CardType = ty;	/* Card type */
 8003080:	4a13      	ldr	r2, [pc, #76]	@ (80030d0 <USER_SPI_initialize+0x1d0>)
 8003082:	7b7b      	ldrb	r3, [r7, #13]
 8003084:	7013      	strb	r3, [r2, #0]
	despiselect();
 8003086:	f7ff fe49 	bl	8002d1c <despiselect>

	if (ty) {			/* OK */
 800308a:	7b7b      	ldrb	r3, [r7, #13]
 800308c:	2b00      	cmp	r3, #0
 800308e:	d010      	beq.n	80030b2 <USER_SPI_initialize+0x1b2>
		FCLK_FAST();			/* Set fast clock */
 8003090:	4b0e      	ldr	r3, [pc, #56]	@ (80030cc <USER_SPI_initialize+0x1cc>)
 8003092:	681b      	ldr	r3, [r3, #0]
 8003094:	681a      	ldr	r2, [r3, #0]
 8003096:	4b0d      	ldr	r3, [pc, #52]	@ (80030cc <USER_SPI_initialize+0x1cc>)
 8003098:	681b      	ldr	r3, [r3, #0]
 800309a:	f022 0238 	bic.w	r2, r2, #56	@ 0x38
 800309e:	601a      	str	r2, [r3, #0]
		Stat &= ~STA_NOINIT;	/* Clear STA_NOINIT flag */
 80030a0:	4b09      	ldr	r3, [pc, #36]	@ (80030c8 <USER_SPI_initialize+0x1c8>)
 80030a2:	781b      	ldrb	r3, [r3, #0]
 80030a4:	b2db      	uxtb	r3, r3
 80030a6:	f023 0301 	bic.w	r3, r3, #1
 80030aa:	b2da      	uxtb	r2, r3
 80030ac:	4b06      	ldr	r3, [pc, #24]	@ (80030c8 <USER_SPI_initialize+0x1c8>)
 80030ae:	701a      	strb	r2, [r3, #0]
 80030b0:	e002      	b.n	80030b8 <USER_SPI_initialize+0x1b8>
	} else {			/* Failed */
		Stat = STA_NOINIT;
 80030b2:	4b05      	ldr	r3, [pc, #20]	@ (80030c8 <USER_SPI_initialize+0x1c8>)
 80030b4:	2201      	movs	r2, #1
 80030b6:	701a      	strb	r2, [r3, #0]
	}

	return Stat;
 80030b8:	4b03      	ldr	r3, [pc, #12]	@ (80030c8 <USER_SPI_initialize+0x1c8>)
 80030ba:	781b      	ldrb	r3, [r3, #0]
 80030bc:	b2db      	uxtb	r3, r3
}
 80030be:	4618      	mov	r0, r3
 80030c0:	3714      	adds	r7, #20
 80030c2:	46bd      	mov	sp, r7
 80030c4:	bd90      	pop	{r4, r7, pc}
 80030c6:	bf00      	nop
 80030c8:	20000020 	.word	0x20000020
 80030cc:	20000094 	.word	0x20000094
 80030d0:	20000100 	.word	0x20000100

080030d4 <USER_SPI_status>:
/*-----------------------------------------------------------------------*/

inline DSTATUS USER_SPI_status (
	BYTE drv		/* Physical drive number (0) */
)
{
 80030d4:	b480      	push	{r7}
 80030d6:	b083      	sub	sp, #12
 80030d8:	af00      	add	r7, sp, #0
 80030da:	4603      	mov	r3, r0
 80030dc:	71fb      	strb	r3, [r7, #7]
	if (drv) return STA_NOINIT;		/* Supports only drive 0 */
 80030de:	79fb      	ldrb	r3, [r7, #7]
 80030e0:	2b00      	cmp	r3, #0
 80030e2:	d001      	beq.n	80030e8 <USER_SPI_status+0x14>
 80030e4:	2301      	movs	r3, #1
 80030e6:	e002      	b.n	80030ee <USER_SPI_status+0x1a>

	return Stat;	/* Return disk status */
 80030e8:	4b04      	ldr	r3, [pc, #16]	@ (80030fc <USER_SPI_status+0x28>)
 80030ea:	781b      	ldrb	r3, [r3, #0]
 80030ec:	b2db      	uxtb	r3, r3
}
 80030ee:	4618      	mov	r0, r3
 80030f0:	370c      	adds	r7, #12
 80030f2:	46bd      	mov	sp, r7
 80030f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030f8:	4770      	bx	lr
 80030fa:	bf00      	nop
 80030fc:	20000020 	.word	0x20000020

08003100 <USER_SPI_read>:
	BYTE drv,		/* Physical drive number (0) */
	BYTE *buff,		/* Pointer to the data buffer to store read data */
	DWORD sector,	/* Start sector number (LBA) */
	UINT count		/* Number of sectors to read (1..128) */
)
{
 8003100:	b580      	push	{r7, lr}
 8003102:	b084      	sub	sp, #16
 8003104:	af00      	add	r7, sp, #0
 8003106:	60b9      	str	r1, [r7, #8]
 8003108:	607a      	str	r2, [r7, #4]
 800310a:	603b      	str	r3, [r7, #0]
 800310c:	4603      	mov	r3, r0
 800310e:	73fb      	strb	r3, [r7, #15]
	if (drv || !count) return RES_PARERR;		/* Check parameter */
 8003110:	7bfb      	ldrb	r3, [r7, #15]
 8003112:	2b00      	cmp	r3, #0
 8003114:	d102      	bne.n	800311c <USER_SPI_read+0x1c>
 8003116:	683b      	ldr	r3, [r7, #0]
 8003118:	2b00      	cmp	r3, #0
 800311a:	d101      	bne.n	8003120 <USER_SPI_read+0x20>
 800311c:	2304      	movs	r3, #4
 800311e:	e04d      	b.n	80031bc <USER_SPI_read+0xbc>
	if (Stat & STA_NOINIT) return RES_NOTRDY;	/* Check if drive is ready */
 8003120:	4b28      	ldr	r3, [pc, #160]	@ (80031c4 <USER_SPI_read+0xc4>)
 8003122:	781b      	ldrb	r3, [r3, #0]
 8003124:	b2db      	uxtb	r3, r3
 8003126:	f003 0301 	and.w	r3, r3, #1
 800312a:	2b00      	cmp	r3, #0
 800312c:	d001      	beq.n	8003132 <USER_SPI_read+0x32>
 800312e:	2303      	movs	r3, #3
 8003130:	e044      	b.n	80031bc <USER_SPI_read+0xbc>

	if (!(CardType & CT_BLOCK)) sector *= 512;	/* LBA ot BA conversion (byte addressing cards) */
 8003132:	4b25      	ldr	r3, [pc, #148]	@ (80031c8 <USER_SPI_read+0xc8>)
 8003134:	781b      	ldrb	r3, [r3, #0]
 8003136:	f003 0308 	and.w	r3, r3, #8
 800313a:	2b00      	cmp	r3, #0
 800313c:	d102      	bne.n	8003144 <USER_SPI_read+0x44>
 800313e:	687b      	ldr	r3, [r7, #4]
 8003140:	025b      	lsls	r3, r3, #9
 8003142:	607b      	str	r3, [r7, #4]

	if (count == 1) {	/* Single sector read */
 8003144:	683b      	ldr	r3, [r7, #0]
 8003146:	2b01      	cmp	r3, #1
 8003148:	d111      	bne.n	800316e <USER_SPI_read+0x6e>
		if ((send_cmd(CMD17, sector) == 0)	/* READ_SINGLE_BLOCK */
 800314a:	6879      	ldr	r1, [r7, #4]
 800314c:	2011      	movs	r0, #17
 800314e:	f7ff fe68 	bl	8002e22 <send_cmd>
 8003152:	4603      	mov	r3, r0
 8003154:	2b00      	cmp	r3, #0
 8003156:	d129      	bne.n	80031ac <USER_SPI_read+0xac>
			&& rcvr_datablock(buff, 512)) {
 8003158:	f44f 7100 	mov.w	r1, #512	@ 0x200
 800315c:	68b8      	ldr	r0, [r7, #8]
 800315e:	f7ff fe05 	bl	8002d6c <rcvr_datablock>
 8003162:	4603      	mov	r3, r0
 8003164:	2b00      	cmp	r3, #0
 8003166:	d021      	beq.n	80031ac <USER_SPI_read+0xac>
			count = 0;
 8003168:	2300      	movs	r3, #0
 800316a:	603b      	str	r3, [r7, #0]
 800316c:	e01e      	b.n	80031ac <USER_SPI_read+0xac>
		}
	}
	else {				/* Multiple sector read */
		if (send_cmd(CMD18, sector) == 0) {	/* READ_MULTIPLE_BLOCK */
 800316e:	6879      	ldr	r1, [r7, #4]
 8003170:	2012      	movs	r0, #18
 8003172:	f7ff fe56 	bl	8002e22 <send_cmd>
 8003176:	4603      	mov	r3, r0
 8003178:	2b00      	cmp	r3, #0
 800317a:	d117      	bne.n	80031ac <USER_SPI_read+0xac>
			do {
				if (!rcvr_datablock(buff, 512)) break;
 800317c:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8003180:	68b8      	ldr	r0, [r7, #8]
 8003182:	f7ff fdf3 	bl	8002d6c <rcvr_datablock>
 8003186:	4603      	mov	r3, r0
 8003188:	2b00      	cmp	r3, #0
 800318a:	d00a      	beq.n	80031a2 <USER_SPI_read+0xa2>
				buff += 512;
 800318c:	68bb      	ldr	r3, [r7, #8]
 800318e:	f503 7300 	add.w	r3, r3, #512	@ 0x200
 8003192:	60bb      	str	r3, [r7, #8]
			} while (--count);
 8003194:	683b      	ldr	r3, [r7, #0]
 8003196:	3b01      	subs	r3, #1
 8003198:	603b      	str	r3, [r7, #0]
 800319a:	683b      	ldr	r3, [r7, #0]
 800319c:	2b00      	cmp	r3, #0
 800319e:	d1ed      	bne.n	800317c <USER_SPI_read+0x7c>
 80031a0:	e000      	b.n	80031a4 <USER_SPI_read+0xa4>
				if (!rcvr_datablock(buff, 512)) break;
 80031a2:	bf00      	nop
			send_cmd(CMD12, 0);				/* STOP_TRANSMISSION */
 80031a4:	2100      	movs	r1, #0
 80031a6:	200c      	movs	r0, #12
 80031a8:	f7ff fe3b 	bl	8002e22 <send_cmd>
		}
	}
	despiselect();
 80031ac:	f7ff fdb6 	bl	8002d1c <despiselect>

	return count ? RES_ERROR : RES_OK;	/* Return result */
 80031b0:	683b      	ldr	r3, [r7, #0]
 80031b2:	2b00      	cmp	r3, #0
 80031b4:	bf14      	ite	ne
 80031b6:	2301      	movne	r3, #1
 80031b8:	2300      	moveq	r3, #0
 80031ba:	b2db      	uxtb	r3, r3
}
 80031bc:	4618      	mov	r0, r3
 80031be:	3710      	adds	r7, #16
 80031c0:	46bd      	mov	sp, r7
 80031c2:	bd80      	pop	{r7, pc}
 80031c4:	20000020 	.word	0x20000020
 80031c8:	20000100 	.word	0x20000100

080031cc <USER_SPI_write>:
	BYTE drv,			/* Physical drive number (0) */
	const BYTE *buff,	/* Ponter to the data to write */
	DWORD sector,		/* Start sector number (LBA) */
	UINT count			/* Number of sectors to write (1..128) */
)
{
 80031cc:	b580      	push	{r7, lr}
 80031ce:	b084      	sub	sp, #16
 80031d0:	af00      	add	r7, sp, #0
 80031d2:	60b9      	str	r1, [r7, #8]
 80031d4:	607a      	str	r2, [r7, #4]
 80031d6:	603b      	str	r3, [r7, #0]
 80031d8:	4603      	mov	r3, r0
 80031da:	73fb      	strb	r3, [r7, #15]
	if (drv || !count) return RES_PARERR;		/* Check parameter */
 80031dc:	7bfb      	ldrb	r3, [r7, #15]
 80031de:	2b00      	cmp	r3, #0
 80031e0:	d102      	bne.n	80031e8 <USER_SPI_write+0x1c>
 80031e2:	683b      	ldr	r3, [r7, #0]
 80031e4:	2b00      	cmp	r3, #0
 80031e6:	d101      	bne.n	80031ec <USER_SPI_write+0x20>
 80031e8:	2304      	movs	r3, #4
 80031ea:	e063      	b.n	80032b4 <USER_SPI_write+0xe8>
	if (Stat & STA_NOINIT) return RES_NOTRDY;	/* Check drive status */
 80031ec:	4b33      	ldr	r3, [pc, #204]	@ (80032bc <USER_SPI_write+0xf0>)
 80031ee:	781b      	ldrb	r3, [r3, #0]
 80031f0:	b2db      	uxtb	r3, r3
 80031f2:	f003 0301 	and.w	r3, r3, #1
 80031f6:	2b00      	cmp	r3, #0
 80031f8:	d001      	beq.n	80031fe <USER_SPI_write+0x32>
 80031fa:	2303      	movs	r3, #3
 80031fc:	e05a      	b.n	80032b4 <USER_SPI_write+0xe8>
	if (Stat & STA_PROTECT) return RES_WRPRT;	/* Check write protect */
 80031fe:	4b2f      	ldr	r3, [pc, #188]	@ (80032bc <USER_SPI_write+0xf0>)
 8003200:	781b      	ldrb	r3, [r3, #0]
 8003202:	b2db      	uxtb	r3, r3
 8003204:	f003 0304 	and.w	r3, r3, #4
 8003208:	2b00      	cmp	r3, #0
 800320a:	d001      	beq.n	8003210 <USER_SPI_write+0x44>
 800320c:	2302      	movs	r3, #2
 800320e:	e051      	b.n	80032b4 <USER_SPI_write+0xe8>

	if (!(CardType & CT_BLOCK)) sector *= 512;	/* LBA ==> BA conversion (byte addressing cards) */
 8003210:	4b2b      	ldr	r3, [pc, #172]	@ (80032c0 <USER_SPI_write+0xf4>)
 8003212:	781b      	ldrb	r3, [r3, #0]
 8003214:	f003 0308 	and.w	r3, r3, #8
 8003218:	2b00      	cmp	r3, #0
 800321a:	d102      	bne.n	8003222 <USER_SPI_write+0x56>
 800321c:	687b      	ldr	r3, [r7, #4]
 800321e:	025b      	lsls	r3, r3, #9
 8003220:	607b      	str	r3, [r7, #4]

	if (count == 1) {	/* Single sector write */
 8003222:	683b      	ldr	r3, [r7, #0]
 8003224:	2b01      	cmp	r3, #1
 8003226:	d110      	bne.n	800324a <USER_SPI_write+0x7e>
		if ((send_cmd(CMD24, sector) == 0)	/* WRITE_BLOCK */
 8003228:	6879      	ldr	r1, [r7, #4]
 800322a:	2018      	movs	r0, #24
 800322c:	f7ff fdf9 	bl	8002e22 <send_cmd>
 8003230:	4603      	mov	r3, r0
 8003232:	2b00      	cmp	r3, #0
 8003234:	d136      	bne.n	80032a4 <USER_SPI_write+0xd8>
			&& xmit_datablock(buff, 0xFE)) {
 8003236:	21fe      	movs	r1, #254	@ 0xfe
 8003238:	68b8      	ldr	r0, [r7, #8]
 800323a:	f7ff fdc0 	bl	8002dbe <xmit_datablock>
 800323e:	4603      	mov	r3, r0
 8003240:	2b00      	cmp	r3, #0
 8003242:	d02f      	beq.n	80032a4 <USER_SPI_write+0xd8>
			count = 0;
 8003244:	2300      	movs	r3, #0
 8003246:	603b      	str	r3, [r7, #0]
 8003248:	e02c      	b.n	80032a4 <USER_SPI_write+0xd8>
		}
	}
	else {				/* Multiple sector write */
		if (CardType & CT_SDC) send_cmd(ACMD23, count);	/* Predefine number of sectors */
 800324a:	4b1d      	ldr	r3, [pc, #116]	@ (80032c0 <USER_SPI_write+0xf4>)
 800324c:	781b      	ldrb	r3, [r3, #0]
 800324e:	f003 0306 	and.w	r3, r3, #6
 8003252:	2b00      	cmp	r3, #0
 8003254:	d003      	beq.n	800325e <USER_SPI_write+0x92>
 8003256:	6839      	ldr	r1, [r7, #0]
 8003258:	2097      	movs	r0, #151	@ 0x97
 800325a:	f7ff fde2 	bl	8002e22 <send_cmd>
		if (send_cmd(CMD25, sector) == 0) {	/* WRITE_MULTIPLE_BLOCK */
 800325e:	6879      	ldr	r1, [r7, #4]
 8003260:	2019      	movs	r0, #25
 8003262:	f7ff fdde 	bl	8002e22 <send_cmd>
 8003266:	4603      	mov	r3, r0
 8003268:	2b00      	cmp	r3, #0
 800326a:	d11b      	bne.n	80032a4 <USER_SPI_write+0xd8>
			do {
				if (!xmit_datablock(buff, 0xFC)) break;
 800326c:	21fc      	movs	r1, #252	@ 0xfc
 800326e:	68b8      	ldr	r0, [r7, #8]
 8003270:	f7ff fda5 	bl	8002dbe <xmit_datablock>
 8003274:	4603      	mov	r3, r0
 8003276:	2b00      	cmp	r3, #0
 8003278:	d00a      	beq.n	8003290 <USER_SPI_write+0xc4>
				buff += 512;
 800327a:	68bb      	ldr	r3, [r7, #8]
 800327c:	f503 7300 	add.w	r3, r3, #512	@ 0x200
 8003280:	60bb      	str	r3, [r7, #8]
			} while (--count);
 8003282:	683b      	ldr	r3, [r7, #0]
 8003284:	3b01      	subs	r3, #1
 8003286:	603b      	str	r3, [r7, #0]
 8003288:	683b      	ldr	r3, [r7, #0]
 800328a:	2b00      	cmp	r3, #0
 800328c:	d1ee      	bne.n	800326c <USER_SPI_write+0xa0>
 800328e:	e000      	b.n	8003292 <USER_SPI_write+0xc6>
				if (!xmit_datablock(buff, 0xFC)) break;
 8003290:	bf00      	nop
			if (!xmit_datablock(0, 0xFD)) count = 1;	/* STOP_TRAN token */
 8003292:	21fd      	movs	r1, #253	@ 0xfd
 8003294:	2000      	movs	r0, #0
 8003296:	f7ff fd92 	bl	8002dbe <xmit_datablock>
 800329a:	4603      	mov	r3, r0
 800329c:	2b00      	cmp	r3, #0
 800329e:	d101      	bne.n	80032a4 <USER_SPI_write+0xd8>
 80032a0:	2301      	movs	r3, #1
 80032a2:	603b      	str	r3, [r7, #0]
		}
	}
	despiselect();
 80032a4:	f7ff fd3a 	bl	8002d1c <despiselect>

	return count ? RES_ERROR : RES_OK;	/* Return result */
 80032a8:	683b      	ldr	r3, [r7, #0]
 80032aa:	2b00      	cmp	r3, #0
 80032ac:	bf14      	ite	ne
 80032ae:	2301      	movne	r3, #1
 80032b0:	2300      	moveq	r3, #0
 80032b2:	b2db      	uxtb	r3, r3
}
 80032b4:	4618      	mov	r0, r3
 80032b6:	3710      	adds	r7, #16
 80032b8:	46bd      	mov	sp, r7
 80032ba:	bd80      	pop	{r7, pc}
 80032bc:	20000020 	.word	0x20000020
 80032c0:	20000100 	.word	0x20000100

080032c4 <USER_SPI_ioctl>:
inline DRESULT USER_SPI_ioctl (
	BYTE drv,		/* Physical drive number (0) */
	BYTE cmd,		/* Control command code */
	void *buff		/* Pointer to the conrtol data */
)
{
 80032c4:	b580      	push	{r7, lr}
 80032c6:	b08c      	sub	sp, #48	@ 0x30
 80032c8:	af00      	add	r7, sp, #0
 80032ca:	4603      	mov	r3, r0
 80032cc:	603a      	str	r2, [r7, #0]
 80032ce:	71fb      	strb	r3, [r7, #7]
 80032d0:	460b      	mov	r3, r1
 80032d2:	71bb      	strb	r3, [r7, #6]
	DRESULT res;
	BYTE n, csd[16];
	DWORD *dp, st, ed, csize;


	if (drv) return RES_PARERR;					/* Check parameter */
 80032d4:	79fb      	ldrb	r3, [r7, #7]
 80032d6:	2b00      	cmp	r3, #0
 80032d8:	d001      	beq.n	80032de <USER_SPI_ioctl+0x1a>
 80032da:	2304      	movs	r3, #4
 80032dc:	e15a      	b.n	8003594 <USER_SPI_ioctl+0x2d0>
	if (Stat & STA_NOINIT) return RES_NOTRDY;	/* Check if drive is ready */
 80032de:	4baf      	ldr	r3, [pc, #700]	@ (800359c <USER_SPI_ioctl+0x2d8>)
 80032e0:	781b      	ldrb	r3, [r3, #0]
 80032e2:	b2db      	uxtb	r3, r3
 80032e4:	f003 0301 	and.w	r3, r3, #1
 80032e8:	2b00      	cmp	r3, #0
 80032ea:	d001      	beq.n	80032f0 <USER_SPI_ioctl+0x2c>
 80032ec:	2303      	movs	r3, #3
 80032ee:	e151      	b.n	8003594 <USER_SPI_ioctl+0x2d0>

	res = RES_ERROR;
 80032f0:	2301      	movs	r3, #1
 80032f2:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f

	switch (cmd) {
 80032f6:	79bb      	ldrb	r3, [r7, #6]
 80032f8:	2b04      	cmp	r3, #4
 80032fa:	f200 8136 	bhi.w	800356a <USER_SPI_ioctl+0x2a6>
 80032fe:	a201      	add	r2, pc, #4	@ (adr r2, 8003304 <USER_SPI_ioctl+0x40>)
 8003300:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003304:	08003319 	.word	0x08003319
 8003308:	0800332d 	.word	0x0800332d
 800330c:	0800356b 	.word	0x0800356b
 8003310:	080033d9 	.word	0x080033d9
 8003314:	080034cf 	.word	0x080034cf
	case CTRL_SYNC :		/* Wait for end of internal write process of the drive */
		if (spiselect()) res = RES_OK;
 8003318:	f7ff fd0e 	bl	8002d38 <spiselect>
 800331c:	4603      	mov	r3, r0
 800331e:	2b00      	cmp	r3, #0
 8003320:	f000 8127 	beq.w	8003572 <USER_SPI_ioctl+0x2ae>
 8003324:	2300      	movs	r3, #0
 8003326:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
		break;
 800332a:	e122      	b.n	8003572 <USER_SPI_ioctl+0x2ae>

	case GET_SECTOR_COUNT :	/* Get drive capacity in unit of sector (DWORD) */
		if ((send_cmd(CMD9, 0) == 0) && rcvr_datablock(csd, 16)) {
 800332c:	2100      	movs	r1, #0
 800332e:	2009      	movs	r0, #9
 8003330:	f7ff fd77 	bl	8002e22 <send_cmd>
 8003334:	4603      	mov	r3, r0
 8003336:	2b00      	cmp	r3, #0
 8003338:	f040 811d 	bne.w	8003576 <USER_SPI_ioctl+0x2b2>
 800333c:	f107 030c 	add.w	r3, r7, #12
 8003340:	2110      	movs	r1, #16
 8003342:	4618      	mov	r0, r3
 8003344:	f7ff fd12 	bl	8002d6c <rcvr_datablock>
 8003348:	4603      	mov	r3, r0
 800334a:	2b00      	cmp	r3, #0
 800334c:	f000 8113 	beq.w	8003576 <USER_SPI_ioctl+0x2b2>
			if ((csd[0] >> 6) == 1) {	/* SDC ver 2.00 */
 8003350:	7b3b      	ldrb	r3, [r7, #12]
 8003352:	099b      	lsrs	r3, r3, #6
 8003354:	b2db      	uxtb	r3, r3
 8003356:	2b01      	cmp	r3, #1
 8003358:	d111      	bne.n	800337e <USER_SPI_ioctl+0xba>
				csize = csd[9] + ((WORD)csd[8] << 8) + ((DWORD)(csd[7] & 63) << 16) + 1;
 800335a:	7d7b      	ldrb	r3, [r7, #21]
 800335c:	461a      	mov	r2, r3
 800335e:	7d3b      	ldrb	r3, [r7, #20]
 8003360:	021b      	lsls	r3, r3, #8
 8003362:	4413      	add	r3, r2
 8003364:	461a      	mov	r2, r3
 8003366:	7cfb      	ldrb	r3, [r7, #19]
 8003368:	041b      	lsls	r3, r3, #16
 800336a:	f403 137c 	and.w	r3, r3, #4128768	@ 0x3f0000
 800336e:	4413      	add	r3, r2
 8003370:	3301      	adds	r3, #1
 8003372:	61fb      	str	r3, [r7, #28]
				*(DWORD*)buff = csize << 10;
 8003374:	69fb      	ldr	r3, [r7, #28]
 8003376:	029a      	lsls	r2, r3, #10
 8003378:	683b      	ldr	r3, [r7, #0]
 800337a:	601a      	str	r2, [r3, #0]
 800337c:	e028      	b.n	80033d0 <USER_SPI_ioctl+0x10c>
			} else {					/* SDC ver 1.XX or MMC ver 3 */
				n = (csd[5] & 15) + ((csd[10] & 128) >> 7) + ((csd[9] & 3) << 1) + 2;
 800337e:	7c7b      	ldrb	r3, [r7, #17]
 8003380:	f003 030f 	and.w	r3, r3, #15
 8003384:	b2da      	uxtb	r2, r3
 8003386:	7dbb      	ldrb	r3, [r7, #22]
 8003388:	09db      	lsrs	r3, r3, #7
 800338a:	b2db      	uxtb	r3, r3
 800338c:	4413      	add	r3, r2
 800338e:	b2da      	uxtb	r2, r3
 8003390:	7d7b      	ldrb	r3, [r7, #21]
 8003392:	005b      	lsls	r3, r3, #1
 8003394:	b2db      	uxtb	r3, r3
 8003396:	f003 0306 	and.w	r3, r3, #6
 800339a:	b2db      	uxtb	r3, r3
 800339c:	4413      	add	r3, r2
 800339e:	b2db      	uxtb	r3, r3
 80033a0:	3302      	adds	r3, #2
 80033a2:	f887 302e 	strb.w	r3, [r7, #46]	@ 0x2e
				csize = (csd[8] >> 6) + ((WORD)csd[7] << 2) + ((WORD)(csd[6] & 3) << 10) + 1;
 80033a6:	7d3b      	ldrb	r3, [r7, #20]
 80033a8:	099b      	lsrs	r3, r3, #6
 80033aa:	b2db      	uxtb	r3, r3
 80033ac:	461a      	mov	r2, r3
 80033ae:	7cfb      	ldrb	r3, [r7, #19]
 80033b0:	009b      	lsls	r3, r3, #2
 80033b2:	441a      	add	r2, r3
 80033b4:	7cbb      	ldrb	r3, [r7, #18]
 80033b6:	029b      	lsls	r3, r3, #10
 80033b8:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 80033bc:	4413      	add	r3, r2
 80033be:	3301      	adds	r3, #1
 80033c0:	61fb      	str	r3, [r7, #28]
				*(DWORD*)buff = csize << (n - 9);
 80033c2:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 80033c6:	3b09      	subs	r3, #9
 80033c8:	69fa      	ldr	r2, [r7, #28]
 80033ca:	409a      	lsls	r2, r3
 80033cc:	683b      	ldr	r3, [r7, #0]
 80033ce:	601a      	str	r2, [r3, #0]
			}
			res = RES_OK;
 80033d0:	2300      	movs	r3, #0
 80033d2:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
		}
		break;
 80033d6:	e0ce      	b.n	8003576 <USER_SPI_ioctl+0x2b2>

	case GET_BLOCK_SIZE :	/* Get erase block size in unit of sector (DWORD) */
		if (CardType & CT_SD2) {	/* SDC ver 2.00 */
 80033d8:	4b71      	ldr	r3, [pc, #452]	@ (80035a0 <USER_SPI_ioctl+0x2dc>)
 80033da:	781b      	ldrb	r3, [r3, #0]
 80033dc:	f003 0304 	and.w	r3, r3, #4
 80033e0:	2b00      	cmp	r3, #0
 80033e2:	d031      	beq.n	8003448 <USER_SPI_ioctl+0x184>
			if (send_cmd(ACMD13, 0) == 0) {	/* Read SD status */
 80033e4:	2100      	movs	r1, #0
 80033e6:	208d      	movs	r0, #141	@ 0x8d
 80033e8:	f7ff fd1b 	bl	8002e22 <send_cmd>
 80033ec:	4603      	mov	r3, r0
 80033ee:	2b00      	cmp	r3, #0
 80033f0:	f040 80c3 	bne.w	800357a <USER_SPI_ioctl+0x2b6>
				xchg_spi(0xFF);
 80033f4:	20ff      	movs	r0, #255	@ 0xff
 80033f6:	f7ff fc27 	bl	8002c48 <xchg_spi>
				if (rcvr_datablock(csd, 16)) {				/* Read partial block */
 80033fa:	f107 030c 	add.w	r3, r7, #12
 80033fe:	2110      	movs	r1, #16
 8003400:	4618      	mov	r0, r3
 8003402:	f7ff fcb3 	bl	8002d6c <rcvr_datablock>
 8003406:	4603      	mov	r3, r0
 8003408:	2b00      	cmp	r3, #0
 800340a:	f000 80b6 	beq.w	800357a <USER_SPI_ioctl+0x2b6>
					for (n = 64 - 16; n; n--) xchg_spi(0xFF);	/* Purge trailing data */
 800340e:	2330      	movs	r3, #48	@ 0x30
 8003410:	f887 302e 	strb.w	r3, [r7, #46]	@ 0x2e
 8003414:	e007      	b.n	8003426 <USER_SPI_ioctl+0x162>
 8003416:	20ff      	movs	r0, #255	@ 0xff
 8003418:	f7ff fc16 	bl	8002c48 <xchg_spi>
 800341c:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 8003420:	3b01      	subs	r3, #1
 8003422:	f887 302e 	strb.w	r3, [r7, #46]	@ 0x2e
 8003426:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 800342a:	2b00      	cmp	r3, #0
 800342c:	d1f3      	bne.n	8003416 <USER_SPI_ioctl+0x152>
					*(DWORD*)buff = 16UL << (csd[10] >> 4);
 800342e:	7dbb      	ldrb	r3, [r7, #22]
 8003430:	091b      	lsrs	r3, r3, #4
 8003432:	b2db      	uxtb	r3, r3
 8003434:	461a      	mov	r2, r3
 8003436:	2310      	movs	r3, #16
 8003438:	fa03 f202 	lsl.w	r2, r3, r2
 800343c:	683b      	ldr	r3, [r7, #0]
 800343e:	601a      	str	r2, [r3, #0]
					res = RES_OK;
 8003440:	2300      	movs	r3, #0
 8003442:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
					*(DWORD*)buff = ((WORD)((csd[10] & 124) >> 2) + 1) * (((csd[11] & 3) << 3) + ((csd[11] & 224) >> 5) + 1);
				}
				res = RES_OK;
			}
		}
		break;
 8003446:	e098      	b.n	800357a <USER_SPI_ioctl+0x2b6>
			if ((send_cmd(CMD9, 0) == 0) && rcvr_datablock(csd, 16)) {	/* Read CSD */
 8003448:	2100      	movs	r1, #0
 800344a:	2009      	movs	r0, #9
 800344c:	f7ff fce9 	bl	8002e22 <send_cmd>
 8003450:	4603      	mov	r3, r0
 8003452:	2b00      	cmp	r3, #0
 8003454:	f040 8091 	bne.w	800357a <USER_SPI_ioctl+0x2b6>
 8003458:	f107 030c 	add.w	r3, r7, #12
 800345c:	2110      	movs	r1, #16
 800345e:	4618      	mov	r0, r3
 8003460:	f7ff fc84 	bl	8002d6c <rcvr_datablock>
 8003464:	4603      	mov	r3, r0
 8003466:	2b00      	cmp	r3, #0
 8003468:	f000 8087 	beq.w	800357a <USER_SPI_ioctl+0x2b6>
				if (CardType & CT_SD1) {	/* SDC ver 1.XX */
 800346c:	4b4c      	ldr	r3, [pc, #304]	@ (80035a0 <USER_SPI_ioctl+0x2dc>)
 800346e:	781b      	ldrb	r3, [r3, #0]
 8003470:	f003 0302 	and.w	r3, r3, #2
 8003474:	2b00      	cmp	r3, #0
 8003476:	d012      	beq.n	800349e <USER_SPI_ioctl+0x1da>
					*(DWORD*)buff = (((csd[10] & 63) << 1) + ((WORD)(csd[11] & 128) >> 7) + 1) << ((csd[13] >> 6) - 1);
 8003478:	7dbb      	ldrb	r3, [r7, #22]
 800347a:	005b      	lsls	r3, r3, #1
 800347c:	f003 037e 	and.w	r3, r3, #126	@ 0x7e
 8003480:	7dfa      	ldrb	r2, [r7, #23]
 8003482:	09d2      	lsrs	r2, r2, #7
 8003484:	b2d2      	uxtb	r2, r2
 8003486:	4413      	add	r3, r2
 8003488:	1c5a      	adds	r2, r3, #1
 800348a:	7e7b      	ldrb	r3, [r7, #25]
 800348c:	099b      	lsrs	r3, r3, #6
 800348e:	b2db      	uxtb	r3, r3
 8003490:	3b01      	subs	r3, #1
 8003492:	fa02 f303 	lsl.w	r3, r2, r3
 8003496:	461a      	mov	r2, r3
 8003498:	683b      	ldr	r3, [r7, #0]
 800349a:	601a      	str	r2, [r3, #0]
 800349c:	e013      	b.n	80034c6 <USER_SPI_ioctl+0x202>
					*(DWORD*)buff = ((WORD)((csd[10] & 124) >> 2) + 1) * (((csd[11] & 3) << 3) + ((csd[11] & 224) >> 5) + 1);
 800349e:	7dbb      	ldrb	r3, [r7, #22]
 80034a0:	109b      	asrs	r3, r3, #2
 80034a2:	b29b      	uxth	r3, r3
 80034a4:	f003 031f 	and.w	r3, r3, #31
 80034a8:	3301      	adds	r3, #1
 80034aa:	7dfa      	ldrb	r2, [r7, #23]
 80034ac:	00d2      	lsls	r2, r2, #3
 80034ae:	f002 0218 	and.w	r2, r2, #24
 80034b2:	7df9      	ldrb	r1, [r7, #23]
 80034b4:	0949      	lsrs	r1, r1, #5
 80034b6:	b2c9      	uxtb	r1, r1
 80034b8:	440a      	add	r2, r1
 80034ba:	3201      	adds	r2, #1
 80034bc:	fb02 f303 	mul.w	r3, r2, r3
 80034c0:	461a      	mov	r2, r3
 80034c2:	683b      	ldr	r3, [r7, #0]
 80034c4:	601a      	str	r2, [r3, #0]
				res = RES_OK;
 80034c6:	2300      	movs	r3, #0
 80034c8:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
		break;
 80034cc:	e055      	b.n	800357a <USER_SPI_ioctl+0x2b6>

	case CTRL_TRIM :	/* Erase a block of sectors (used when _USE_ERASE == 1) */
		if (!(CardType & CT_SDC)) break;				/* Check if the card is SDC */
 80034ce:	4b34      	ldr	r3, [pc, #208]	@ (80035a0 <USER_SPI_ioctl+0x2dc>)
 80034d0:	781b      	ldrb	r3, [r3, #0]
 80034d2:	f003 0306 	and.w	r3, r3, #6
 80034d6:	2b00      	cmp	r3, #0
 80034d8:	d051      	beq.n	800357e <USER_SPI_ioctl+0x2ba>
		if (USER_SPI_ioctl(drv, MMC_GET_CSD, csd)) break;	/* Get CSD */
 80034da:	f107 020c 	add.w	r2, r7, #12
 80034de:	79fb      	ldrb	r3, [r7, #7]
 80034e0:	210b      	movs	r1, #11
 80034e2:	4618      	mov	r0, r3
 80034e4:	f7ff feee 	bl	80032c4 <USER_SPI_ioctl>
 80034e8:	4603      	mov	r3, r0
 80034ea:	2b00      	cmp	r3, #0
 80034ec:	d149      	bne.n	8003582 <USER_SPI_ioctl+0x2be>
		if (!(csd[0] >> 6) && !(csd[10] & 0x40)) break;	/* Check if sector erase can be applied to the card */
 80034ee:	7b3b      	ldrb	r3, [r7, #12]
 80034f0:	099b      	lsrs	r3, r3, #6
 80034f2:	b2db      	uxtb	r3, r3
 80034f4:	2b00      	cmp	r3, #0
 80034f6:	d104      	bne.n	8003502 <USER_SPI_ioctl+0x23e>
 80034f8:	7dbb      	ldrb	r3, [r7, #22]
 80034fa:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80034fe:	2b00      	cmp	r3, #0
 8003500:	d041      	beq.n	8003586 <USER_SPI_ioctl+0x2c2>
		dp = buff; st = dp[0]; ed = dp[1];				/* Load sector block */
 8003502:	683b      	ldr	r3, [r7, #0]
 8003504:	623b      	str	r3, [r7, #32]
 8003506:	6a3b      	ldr	r3, [r7, #32]
 8003508:	681b      	ldr	r3, [r3, #0]
 800350a:	62bb      	str	r3, [r7, #40]	@ 0x28
 800350c:	6a3b      	ldr	r3, [r7, #32]
 800350e:	685b      	ldr	r3, [r3, #4]
 8003510:	627b      	str	r3, [r7, #36]	@ 0x24
		if (!(CardType & CT_BLOCK)) {
 8003512:	4b23      	ldr	r3, [pc, #140]	@ (80035a0 <USER_SPI_ioctl+0x2dc>)
 8003514:	781b      	ldrb	r3, [r3, #0]
 8003516:	f003 0308 	and.w	r3, r3, #8
 800351a:	2b00      	cmp	r3, #0
 800351c:	d105      	bne.n	800352a <USER_SPI_ioctl+0x266>
			st *= 512; ed *= 512;
 800351e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003520:	025b      	lsls	r3, r3, #9
 8003522:	62bb      	str	r3, [r7, #40]	@ 0x28
 8003524:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003526:	025b      	lsls	r3, r3, #9
 8003528:	627b      	str	r3, [r7, #36]	@ 0x24
		}
		if (send_cmd(CMD32, st) == 0 && send_cmd(CMD33, ed) == 0 && send_cmd(CMD38, 0) == 0 && wait_ready(30000)) {	/* Erase sector block */
 800352a:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800352c:	2020      	movs	r0, #32
 800352e:	f7ff fc78 	bl	8002e22 <send_cmd>
 8003532:	4603      	mov	r3, r0
 8003534:	2b00      	cmp	r3, #0
 8003536:	d128      	bne.n	800358a <USER_SPI_ioctl+0x2c6>
 8003538:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 800353a:	2021      	movs	r0, #33	@ 0x21
 800353c:	f7ff fc71 	bl	8002e22 <send_cmd>
 8003540:	4603      	mov	r3, r0
 8003542:	2b00      	cmp	r3, #0
 8003544:	d121      	bne.n	800358a <USER_SPI_ioctl+0x2c6>
 8003546:	2100      	movs	r1, #0
 8003548:	2026      	movs	r0, #38	@ 0x26
 800354a:	f7ff fc6a 	bl	8002e22 <send_cmd>
 800354e:	4603      	mov	r3, r0
 8003550:	2b00      	cmp	r3, #0
 8003552:	d11a      	bne.n	800358a <USER_SPI_ioctl+0x2c6>
 8003554:	f247 5030 	movw	r0, #30000	@ 0x7530
 8003558:	f7ff fbbc 	bl	8002cd4 <wait_ready>
 800355c:	4603      	mov	r3, r0
 800355e:	2b00      	cmp	r3, #0
 8003560:	d013      	beq.n	800358a <USER_SPI_ioctl+0x2c6>
			res = RES_OK;	/* FatFs does not check result of this command */
 8003562:	2300      	movs	r3, #0
 8003564:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
		}
		break;
 8003568:	e00f      	b.n	800358a <USER_SPI_ioctl+0x2c6>

	default:
		res = RES_PARERR;
 800356a:	2304      	movs	r3, #4
 800356c:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
 8003570:	e00c      	b.n	800358c <USER_SPI_ioctl+0x2c8>
		break;
 8003572:	bf00      	nop
 8003574:	e00a      	b.n	800358c <USER_SPI_ioctl+0x2c8>
		break;
 8003576:	bf00      	nop
 8003578:	e008      	b.n	800358c <USER_SPI_ioctl+0x2c8>
		break;
 800357a:	bf00      	nop
 800357c:	e006      	b.n	800358c <USER_SPI_ioctl+0x2c8>
		if (!(CardType & CT_SDC)) break;				/* Check if the card is SDC */
 800357e:	bf00      	nop
 8003580:	e004      	b.n	800358c <USER_SPI_ioctl+0x2c8>
		if (USER_SPI_ioctl(drv, MMC_GET_CSD, csd)) break;	/* Get CSD */
 8003582:	bf00      	nop
 8003584:	e002      	b.n	800358c <USER_SPI_ioctl+0x2c8>
		if (!(csd[0] >> 6) && !(csd[10] & 0x40)) break;	/* Check if sector erase can be applied to the card */
 8003586:	bf00      	nop
 8003588:	e000      	b.n	800358c <USER_SPI_ioctl+0x2c8>
		break;
 800358a:	bf00      	nop
	}

	despiselect();
 800358c:	f7ff fbc6 	bl	8002d1c <despiselect>

	return res;
 8003590:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
}
 8003594:	4618      	mov	r0, r3
 8003596:	3730      	adds	r7, #48	@ 0x30
 8003598:	46bd      	mov	sp, r7
 800359a:	bd80      	pop	{r7, pc}
 800359c:	20000020 	.word	0x20000020
 80035a0:	20000100 	.word	0x20000100

080035a4 <MX_LIBJPEG_Init>:
/* USER CODE BEGIN 2 */
/* USER CODE END 2 */

/* LIBJPEG init function */
void MX_LIBJPEG_Init(void)
{
 80035a4:	b480      	push	{r7}
 80035a6:	af00      	add	r7, sp, #0
  */

  /* USER CODE BEGIN 3 */
  /* USER CODE END 3 */

}
 80035a8:	bf00      	nop
 80035aa:	46bd      	mov	sp, r7
 80035ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035b0:	4770      	bx	lr
	...

080035b4 <disk_status>:
  * @retval DSTATUS: Operation status
  */
DSTATUS disk_status (
	BYTE pdrv		/* Physical drive number to identify the drive */
)
{
 80035b4:	b580      	push	{r7, lr}
 80035b6:	b084      	sub	sp, #16
 80035b8:	af00      	add	r7, sp, #0
 80035ba:	4603      	mov	r3, r0
 80035bc:	71fb      	strb	r3, [r7, #7]
  DSTATUS stat;

  stat = disk.drv[pdrv]->disk_status(disk.lun[pdrv]);
 80035be:	79fb      	ldrb	r3, [r7, #7]
 80035c0:	4a08      	ldr	r2, [pc, #32]	@ (80035e4 <disk_status+0x30>)
 80035c2:	009b      	lsls	r3, r3, #2
 80035c4:	4413      	add	r3, r2
 80035c6:	685b      	ldr	r3, [r3, #4]
 80035c8:	685b      	ldr	r3, [r3, #4]
 80035ca:	79fa      	ldrb	r2, [r7, #7]
 80035cc:	4905      	ldr	r1, [pc, #20]	@ (80035e4 <disk_status+0x30>)
 80035ce:	440a      	add	r2, r1
 80035d0:	7a12      	ldrb	r2, [r2, #8]
 80035d2:	4610      	mov	r0, r2
 80035d4:	4798      	blx	r3
 80035d6:	4603      	mov	r3, r0
 80035d8:	73fb      	strb	r3, [r7, #15]
  return stat;
 80035da:	7bfb      	ldrb	r3, [r7, #15]
}
 80035dc:	4618      	mov	r0, r3
 80035de:	3710      	adds	r7, #16
 80035e0:	46bd      	mov	sp, r7
 80035e2:	bd80      	pop	{r7, pc}
 80035e4:	20000134 	.word	0x20000134

080035e8 <disk_initialize>:
  * @retval DSTATUS: Operation status
  */
DSTATUS disk_initialize (
	BYTE pdrv				/* Physical drive nmuber to identify the drive */
)
{
 80035e8:	b580      	push	{r7, lr}
 80035ea:	b084      	sub	sp, #16
 80035ec:	af00      	add	r7, sp, #0
 80035ee:	4603      	mov	r3, r0
 80035f0:	71fb      	strb	r3, [r7, #7]
  DSTATUS stat = RES_OK;
 80035f2:	2300      	movs	r3, #0
 80035f4:	73fb      	strb	r3, [r7, #15]

  if(disk.is_initialized[pdrv] == 0)
 80035f6:	79fb      	ldrb	r3, [r7, #7]
 80035f8:	4a0e      	ldr	r2, [pc, #56]	@ (8003634 <disk_initialize+0x4c>)
 80035fa:	5cd3      	ldrb	r3, [r2, r3]
 80035fc:	2b00      	cmp	r3, #0
 80035fe:	d114      	bne.n	800362a <disk_initialize+0x42>
  {
    stat = disk.drv[pdrv]->disk_initialize(disk.lun[pdrv]);
 8003600:	79fb      	ldrb	r3, [r7, #7]
 8003602:	4a0c      	ldr	r2, [pc, #48]	@ (8003634 <disk_initialize+0x4c>)
 8003604:	009b      	lsls	r3, r3, #2
 8003606:	4413      	add	r3, r2
 8003608:	685b      	ldr	r3, [r3, #4]
 800360a:	681b      	ldr	r3, [r3, #0]
 800360c:	79fa      	ldrb	r2, [r7, #7]
 800360e:	4909      	ldr	r1, [pc, #36]	@ (8003634 <disk_initialize+0x4c>)
 8003610:	440a      	add	r2, r1
 8003612:	7a12      	ldrb	r2, [r2, #8]
 8003614:	4610      	mov	r0, r2
 8003616:	4798      	blx	r3
 8003618:	4603      	mov	r3, r0
 800361a:	73fb      	strb	r3, [r7, #15]
    if(stat == RES_OK)
 800361c:	7bfb      	ldrb	r3, [r7, #15]
 800361e:	2b00      	cmp	r3, #0
 8003620:	d103      	bne.n	800362a <disk_initialize+0x42>
    {
      disk.is_initialized[pdrv] = 1;
 8003622:	79fb      	ldrb	r3, [r7, #7]
 8003624:	4a03      	ldr	r2, [pc, #12]	@ (8003634 <disk_initialize+0x4c>)
 8003626:	2101      	movs	r1, #1
 8003628:	54d1      	strb	r1, [r2, r3]
    }
  }
  return stat;
 800362a:	7bfb      	ldrb	r3, [r7, #15]
}
 800362c:	4618      	mov	r0, r3
 800362e:	3710      	adds	r7, #16
 8003630:	46bd      	mov	sp, r7
 8003632:	bd80      	pop	{r7, pc}
 8003634:	20000134 	.word	0x20000134

08003638 <disk_read>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	BYTE *buff,		/* Data buffer to store read data */
	DWORD sector,	        /* Sector address in LBA */
	UINT count		/* Number of sectors to read */
)
{
 8003638:	b590      	push	{r4, r7, lr}
 800363a:	b087      	sub	sp, #28
 800363c:	af00      	add	r7, sp, #0
 800363e:	60b9      	str	r1, [r7, #8]
 8003640:	607a      	str	r2, [r7, #4]
 8003642:	603b      	str	r3, [r7, #0]
 8003644:	4603      	mov	r3, r0
 8003646:	73fb      	strb	r3, [r7, #15]
  DRESULT res;

  res = disk.drv[pdrv]->disk_read(disk.lun[pdrv], buff, sector, count);
 8003648:	7bfb      	ldrb	r3, [r7, #15]
 800364a:	4a0a      	ldr	r2, [pc, #40]	@ (8003674 <disk_read+0x3c>)
 800364c:	009b      	lsls	r3, r3, #2
 800364e:	4413      	add	r3, r2
 8003650:	685b      	ldr	r3, [r3, #4]
 8003652:	689c      	ldr	r4, [r3, #8]
 8003654:	7bfb      	ldrb	r3, [r7, #15]
 8003656:	4a07      	ldr	r2, [pc, #28]	@ (8003674 <disk_read+0x3c>)
 8003658:	4413      	add	r3, r2
 800365a:	7a18      	ldrb	r0, [r3, #8]
 800365c:	683b      	ldr	r3, [r7, #0]
 800365e:	687a      	ldr	r2, [r7, #4]
 8003660:	68b9      	ldr	r1, [r7, #8]
 8003662:	47a0      	blx	r4
 8003664:	4603      	mov	r3, r0
 8003666:	75fb      	strb	r3, [r7, #23]
  return res;
 8003668:	7dfb      	ldrb	r3, [r7, #23]
}
 800366a:	4618      	mov	r0, r3
 800366c:	371c      	adds	r7, #28
 800366e:	46bd      	mov	sp, r7
 8003670:	bd90      	pop	{r4, r7, pc}
 8003672:	bf00      	nop
 8003674:	20000134 	.word	0x20000134

08003678 <disk_write>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	const BYTE *buff,	/* Data to be written */
	DWORD sector,		/* Sector address in LBA */
	UINT count        	/* Number of sectors to write */
)
{
 8003678:	b590      	push	{r4, r7, lr}
 800367a:	b087      	sub	sp, #28
 800367c:	af00      	add	r7, sp, #0
 800367e:	60b9      	str	r1, [r7, #8]
 8003680:	607a      	str	r2, [r7, #4]
 8003682:	603b      	str	r3, [r7, #0]
 8003684:	4603      	mov	r3, r0
 8003686:	73fb      	strb	r3, [r7, #15]
  DRESULT res;

  res = disk.drv[pdrv]->disk_write(disk.lun[pdrv], buff, sector, count);
 8003688:	7bfb      	ldrb	r3, [r7, #15]
 800368a:	4a0a      	ldr	r2, [pc, #40]	@ (80036b4 <disk_write+0x3c>)
 800368c:	009b      	lsls	r3, r3, #2
 800368e:	4413      	add	r3, r2
 8003690:	685b      	ldr	r3, [r3, #4]
 8003692:	68dc      	ldr	r4, [r3, #12]
 8003694:	7bfb      	ldrb	r3, [r7, #15]
 8003696:	4a07      	ldr	r2, [pc, #28]	@ (80036b4 <disk_write+0x3c>)
 8003698:	4413      	add	r3, r2
 800369a:	7a18      	ldrb	r0, [r3, #8]
 800369c:	683b      	ldr	r3, [r7, #0]
 800369e:	687a      	ldr	r2, [r7, #4]
 80036a0:	68b9      	ldr	r1, [r7, #8]
 80036a2:	47a0      	blx	r4
 80036a4:	4603      	mov	r3, r0
 80036a6:	75fb      	strb	r3, [r7, #23]
  return res;
 80036a8:	7dfb      	ldrb	r3, [r7, #23]
}
 80036aa:	4618      	mov	r0, r3
 80036ac:	371c      	adds	r7, #28
 80036ae:	46bd      	mov	sp, r7
 80036b0:	bd90      	pop	{r4, r7, pc}
 80036b2:	bf00      	nop
 80036b4:	20000134 	.word	0x20000134

080036b8 <disk_ioctl>:
DRESULT disk_ioctl (
	BYTE pdrv,		/* Physical drive nmuber (0..) */
	BYTE cmd,		/* Control code */
	void *buff		/* Buffer to send/receive control data */
)
{
 80036b8:	b580      	push	{r7, lr}
 80036ba:	b084      	sub	sp, #16
 80036bc:	af00      	add	r7, sp, #0
 80036be:	4603      	mov	r3, r0
 80036c0:	603a      	str	r2, [r7, #0]
 80036c2:	71fb      	strb	r3, [r7, #7]
 80036c4:	460b      	mov	r3, r1
 80036c6:	71bb      	strb	r3, [r7, #6]
  DRESULT res;

  res = disk.drv[pdrv]->disk_ioctl(disk.lun[pdrv], cmd, buff);
 80036c8:	79fb      	ldrb	r3, [r7, #7]
 80036ca:	4a09      	ldr	r2, [pc, #36]	@ (80036f0 <disk_ioctl+0x38>)
 80036cc:	009b      	lsls	r3, r3, #2
 80036ce:	4413      	add	r3, r2
 80036d0:	685b      	ldr	r3, [r3, #4]
 80036d2:	691b      	ldr	r3, [r3, #16]
 80036d4:	79fa      	ldrb	r2, [r7, #7]
 80036d6:	4906      	ldr	r1, [pc, #24]	@ (80036f0 <disk_ioctl+0x38>)
 80036d8:	440a      	add	r2, r1
 80036da:	7a10      	ldrb	r0, [r2, #8]
 80036dc:	79b9      	ldrb	r1, [r7, #6]
 80036de:	683a      	ldr	r2, [r7, #0]
 80036e0:	4798      	blx	r3
 80036e2:	4603      	mov	r3, r0
 80036e4:	73fb      	strb	r3, [r7, #15]
  return res;
 80036e6:	7bfb      	ldrb	r3, [r7, #15]
}
 80036e8:	4618      	mov	r0, r3
 80036ea:	3710      	adds	r7, #16
 80036ec:	46bd      	mov	sp, r7
 80036ee:	bd80      	pop	{r7, pc}
 80036f0:	20000134 	.word	0x20000134

080036f4 <ld_word>:
/* Load/Store multi-byte word in the FAT structure                       */
/*-----------------------------------------------------------------------*/

static
WORD ld_word (const BYTE* ptr)	/*	 Load a 2-byte little-endian word */
{
 80036f4:	b480      	push	{r7}
 80036f6:	b085      	sub	sp, #20
 80036f8:	af00      	add	r7, sp, #0
 80036fa:	6078      	str	r0, [r7, #4]
	WORD rv;

	rv = ptr[1];
 80036fc:	687b      	ldr	r3, [r7, #4]
 80036fe:	3301      	adds	r3, #1
 8003700:	781b      	ldrb	r3, [r3, #0]
 8003702:	81fb      	strh	r3, [r7, #14]
	rv = rv << 8 | ptr[0];
 8003704:	89fb      	ldrh	r3, [r7, #14]
 8003706:	021b      	lsls	r3, r3, #8
 8003708:	b21a      	sxth	r2, r3
 800370a:	687b      	ldr	r3, [r7, #4]
 800370c:	781b      	ldrb	r3, [r3, #0]
 800370e:	b21b      	sxth	r3, r3
 8003710:	4313      	orrs	r3, r2
 8003712:	b21b      	sxth	r3, r3
 8003714:	81fb      	strh	r3, [r7, #14]
	return rv;
 8003716:	89fb      	ldrh	r3, [r7, #14]
}
 8003718:	4618      	mov	r0, r3
 800371a:	3714      	adds	r7, #20
 800371c:	46bd      	mov	sp, r7
 800371e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003722:	4770      	bx	lr

08003724 <ld_dword>:

static
DWORD ld_dword (const BYTE* ptr)	/* Load a 4-byte little-endian word */
{
 8003724:	b480      	push	{r7}
 8003726:	b085      	sub	sp, #20
 8003728:	af00      	add	r7, sp, #0
 800372a:	6078      	str	r0, [r7, #4]
	DWORD rv;

	rv = ptr[3];
 800372c:	687b      	ldr	r3, [r7, #4]
 800372e:	3303      	adds	r3, #3
 8003730:	781b      	ldrb	r3, [r3, #0]
 8003732:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[2];
 8003734:	68fb      	ldr	r3, [r7, #12]
 8003736:	021b      	lsls	r3, r3, #8
 8003738:	687a      	ldr	r2, [r7, #4]
 800373a:	3202      	adds	r2, #2
 800373c:	7812      	ldrb	r2, [r2, #0]
 800373e:	4313      	orrs	r3, r2
 8003740:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[1];
 8003742:	68fb      	ldr	r3, [r7, #12]
 8003744:	021b      	lsls	r3, r3, #8
 8003746:	687a      	ldr	r2, [r7, #4]
 8003748:	3201      	adds	r2, #1
 800374a:	7812      	ldrb	r2, [r2, #0]
 800374c:	4313      	orrs	r3, r2
 800374e:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[0];
 8003750:	68fb      	ldr	r3, [r7, #12]
 8003752:	021b      	lsls	r3, r3, #8
 8003754:	687a      	ldr	r2, [r7, #4]
 8003756:	7812      	ldrb	r2, [r2, #0]
 8003758:	4313      	orrs	r3, r2
 800375a:	60fb      	str	r3, [r7, #12]
	return rv;
 800375c:	68fb      	ldr	r3, [r7, #12]
}
 800375e:	4618      	mov	r0, r3
 8003760:	3714      	adds	r7, #20
 8003762:	46bd      	mov	sp, r7
 8003764:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003768:	4770      	bx	lr

0800376a <st_word>:
#endif

#if !_FS_READONLY
static
void st_word (BYTE* ptr, WORD val)	/* Store a 2-byte word in little-endian */
{
 800376a:	b480      	push	{r7}
 800376c:	b083      	sub	sp, #12
 800376e:	af00      	add	r7, sp, #0
 8003770:	6078      	str	r0, [r7, #4]
 8003772:	460b      	mov	r3, r1
 8003774:	807b      	strh	r3, [r7, #2]
	*ptr++ = (BYTE)val; val >>= 8;
 8003776:	687b      	ldr	r3, [r7, #4]
 8003778:	1c5a      	adds	r2, r3, #1
 800377a:	607a      	str	r2, [r7, #4]
 800377c:	887a      	ldrh	r2, [r7, #2]
 800377e:	b2d2      	uxtb	r2, r2
 8003780:	701a      	strb	r2, [r3, #0]
 8003782:	887b      	ldrh	r3, [r7, #2]
 8003784:	0a1b      	lsrs	r3, r3, #8
 8003786:	807b      	strh	r3, [r7, #2]
	*ptr++ = (BYTE)val;
 8003788:	687b      	ldr	r3, [r7, #4]
 800378a:	1c5a      	adds	r2, r3, #1
 800378c:	607a      	str	r2, [r7, #4]
 800378e:	887a      	ldrh	r2, [r7, #2]
 8003790:	b2d2      	uxtb	r2, r2
 8003792:	701a      	strb	r2, [r3, #0]
}
 8003794:	bf00      	nop
 8003796:	370c      	adds	r7, #12
 8003798:	46bd      	mov	sp, r7
 800379a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800379e:	4770      	bx	lr

080037a0 <st_dword>:

static
void st_dword (BYTE* ptr, DWORD val)	/* Store a 4-byte word in little-endian */
{
 80037a0:	b480      	push	{r7}
 80037a2:	b083      	sub	sp, #12
 80037a4:	af00      	add	r7, sp, #0
 80037a6:	6078      	str	r0, [r7, #4]
 80037a8:	6039      	str	r1, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 80037aa:	687b      	ldr	r3, [r7, #4]
 80037ac:	1c5a      	adds	r2, r3, #1
 80037ae:	607a      	str	r2, [r7, #4]
 80037b0:	683a      	ldr	r2, [r7, #0]
 80037b2:	b2d2      	uxtb	r2, r2
 80037b4:	701a      	strb	r2, [r3, #0]
 80037b6:	683b      	ldr	r3, [r7, #0]
 80037b8:	0a1b      	lsrs	r3, r3, #8
 80037ba:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 80037bc:	687b      	ldr	r3, [r7, #4]
 80037be:	1c5a      	adds	r2, r3, #1
 80037c0:	607a      	str	r2, [r7, #4]
 80037c2:	683a      	ldr	r2, [r7, #0]
 80037c4:	b2d2      	uxtb	r2, r2
 80037c6:	701a      	strb	r2, [r3, #0]
 80037c8:	683b      	ldr	r3, [r7, #0]
 80037ca:	0a1b      	lsrs	r3, r3, #8
 80037cc:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 80037ce:	687b      	ldr	r3, [r7, #4]
 80037d0:	1c5a      	adds	r2, r3, #1
 80037d2:	607a      	str	r2, [r7, #4]
 80037d4:	683a      	ldr	r2, [r7, #0]
 80037d6:	b2d2      	uxtb	r2, r2
 80037d8:	701a      	strb	r2, [r3, #0]
 80037da:	683b      	ldr	r3, [r7, #0]
 80037dc:	0a1b      	lsrs	r3, r3, #8
 80037de:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val;
 80037e0:	687b      	ldr	r3, [r7, #4]
 80037e2:	1c5a      	adds	r2, r3, #1
 80037e4:	607a      	str	r2, [r7, #4]
 80037e6:	683a      	ldr	r2, [r7, #0]
 80037e8:	b2d2      	uxtb	r2, r2
 80037ea:	701a      	strb	r2, [r3, #0]
}
 80037ec:	bf00      	nop
 80037ee:	370c      	adds	r7, #12
 80037f0:	46bd      	mov	sp, r7
 80037f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037f6:	4770      	bx	lr

080037f8 <mem_cpy>:
/* String functions                                                      */
/*-----------------------------------------------------------------------*/

/* Copy memory to memory */
static
void mem_cpy (void* dst, const void* src, UINT cnt) {
 80037f8:	b480      	push	{r7}
 80037fa:	b087      	sub	sp, #28
 80037fc:	af00      	add	r7, sp, #0
 80037fe:	60f8      	str	r0, [r7, #12]
 8003800:	60b9      	str	r1, [r7, #8]
 8003802:	607a      	str	r2, [r7, #4]
	BYTE *d = (BYTE*)dst;
 8003804:	68fb      	ldr	r3, [r7, #12]
 8003806:	617b      	str	r3, [r7, #20]
	const BYTE *s = (const BYTE*)src;
 8003808:	68bb      	ldr	r3, [r7, #8]
 800380a:	613b      	str	r3, [r7, #16]

	if (cnt) {
 800380c:	687b      	ldr	r3, [r7, #4]
 800380e:	2b00      	cmp	r3, #0
 8003810:	d00d      	beq.n	800382e <mem_cpy+0x36>
		do {
			*d++ = *s++;
 8003812:	693a      	ldr	r2, [r7, #16]
 8003814:	1c53      	adds	r3, r2, #1
 8003816:	613b      	str	r3, [r7, #16]
 8003818:	697b      	ldr	r3, [r7, #20]
 800381a:	1c59      	adds	r1, r3, #1
 800381c:	6179      	str	r1, [r7, #20]
 800381e:	7812      	ldrb	r2, [r2, #0]
 8003820:	701a      	strb	r2, [r3, #0]
		} while (--cnt);
 8003822:	687b      	ldr	r3, [r7, #4]
 8003824:	3b01      	subs	r3, #1
 8003826:	607b      	str	r3, [r7, #4]
 8003828:	687b      	ldr	r3, [r7, #4]
 800382a:	2b00      	cmp	r3, #0
 800382c:	d1f1      	bne.n	8003812 <mem_cpy+0x1a>
	}
}
 800382e:	bf00      	nop
 8003830:	371c      	adds	r7, #28
 8003832:	46bd      	mov	sp, r7
 8003834:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003838:	4770      	bx	lr

0800383a <mem_set>:

/* Fill memory block */
static
void mem_set (void* dst, int val, UINT cnt) {
 800383a:	b480      	push	{r7}
 800383c:	b087      	sub	sp, #28
 800383e:	af00      	add	r7, sp, #0
 8003840:	60f8      	str	r0, [r7, #12]
 8003842:	60b9      	str	r1, [r7, #8]
 8003844:	607a      	str	r2, [r7, #4]
	BYTE *d = (BYTE*)dst;
 8003846:	68fb      	ldr	r3, [r7, #12]
 8003848:	617b      	str	r3, [r7, #20]

	do {
		*d++ = (BYTE)val;
 800384a:	697b      	ldr	r3, [r7, #20]
 800384c:	1c5a      	adds	r2, r3, #1
 800384e:	617a      	str	r2, [r7, #20]
 8003850:	68ba      	ldr	r2, [r7, #8]
 8003852:	b2d2      	uxtb	r2, r2
 8003854:	701a      	strb	r2, [r3, #0]
	} while (--cnt);
 8003856:	687b      	ldr	r3, [r7, #4]
 8003858:	3b01      	subs	r3, #1
 800385a:	607b      	str	r3, [r7, #4]
 800385c:	687b      	ldr	r3, [r7, #4]
 800385e:	2b00      	cmp	r3, #0
 8003860:	d1f3      	bne.n	800384a <mem_set+0x10>
}
 8003862:	bf00      	nop
 8003864:	bf00      	nop
 8003866:	371c      	adds	r7, #28
 8003868:	46bd      	mov	sp, r7
 800386a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800386e:	4770      	bx	lr

08003870 <mem_cmp>:

/* Compare memory block */
static
int mem_cmp (const void* dst, const void* src, UINT cnt) {	/* ZR:same, NZ:different */
 8003870:	b480      	push	{r7}
 8003872:	b089      	sub	sp, #36	@ 0x24
 8003874:	af00      	add	r7, sp, #0
 8003876:	60f8      	str	r0, [r7, #12]
 8003878:	60b9      	str	r1, [r7, #8]
 800387a:	607a      	str	r2, [r7, #4]
	const BYTE *d = (const BYTE *)dst, *s = (const BYTE *)src;
 800387c:	68fb      	ldr	r3, [r7, #12]
 800387e:	61fb      	str	r3, [r7, #28]
 8003880:	68bb      	ldr	r3, [r7, #8]
 8003882:	61bb      	str	r3, [r7, #24]
	int r = 0;
 8003884:	2300      	movs	r3, #0
 8003886:	617b      	str	r3, [r7, #20]

	do {
		r = *d++ - *s++;
 8003888:	69fb      	ldr	r3, [r7, #28]
 800388a:	1c5a      	adds	r2, r3, #1
 800388c:	61fa      	str	r2, [r7, #28]
 800388e:	781b      	ldrb	r3, [r3, #0]
 8003890:	4619      	mov	r1, r3
 8003892:	69bb      	ldr	r3, [r7, #24]
 8003894:	1c5a      	adds	r2, r3, #1
 8003896:	61ba      	str	r2, [r7, #24]
 8003898:	781b      	ldrb	r3, [r3, #0]
 800389a:	1acb      	subs	r3, r1, r3
 800389c:	617b      	str	r3, [r7, #20]
	} while (--cnt && r == 0);
 800389e:	687b      	ldr	r3, [r7, #4]
 80038a0:	3b01      	subs	r3, #1
 80038a2:	607b      	str	r3, [r7, #4]
 80038a4:	687b      	ldr	r3, [r7, #4]
 80038a6:	2b00      	cmp	r3, #0
 80038a8:	d002      	beq.n	80038b0 <mem_cmp+0x40>
 80038aa:	697b      	ldr	r3, [r7, #20]
 80038ac:	2b00      	cmp	r3, #0
 80038ae:	d0eb      	beq.n	8003888 <mem_cmp+0x18>

	return r;
 80038b0:	697b      	ldr	r3, [r7, #20]
}
 80038b2:	4618      	mov	r0, r3
 80038b4:	3724      	adds	r7, #36	@ 0x24
 80038b6:	46bd      	mov	sp, r7
 80038b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038bc:	4770      	bx	lr

080038be <chk_chr>:

/* Check if chr is contained in the string */
static
int chk_chr (const char* str, int chr) {	/* NZ:contained, ZR:not contained */
 80038be:	b480      	push	{r7}
 80038c0:	b083      	sub	sp, #12
 80038c2:	af00      	add	r7, sp, #0
 80038c4:	6078      	str	r0, [r7, #4]
 80038c6:	6039      	str	r1, [r7, #0]
	while (*str && *str != chr) str++;
 80038c8:	e002      	b.n	80038d0 <chk_chr+0x12>
 80038ca:	687b      	ldr	r3, [r7, #4]
 80038cc:	3301      	adds	r3, #1
 80038ce:	607b      	str	r3, [r7, #4]
 80038d0:	687b      	ldr	r3, [r7, #4]
 80038d2:	781b      	ldrb	r3, [r3, #0]
 80038d4:	2b00      	cmp	r3, #0
 80038d6:	d005      	beq.n	80038e4 <chk_chr+0x26>
 80038d8:	687b      	ldr	r3, [r7, #4]
 80038da:	781b      	ldrb	r3, [r3, #0]
 80038dc:	461a      	mov	r2, r3
 80038de:	683b      	ldr	r3, [r7, #0]
 80038e0:	4293      	cmp	r3, r2
 80038e2:	d1f2      	bne.n	80038ca <chk_chr+0xc>
	return *str;
 80038e4:	687b      	ldr	r3, [r7, #4]
 80038e6:	781b      	ldrb	r3, [r3, #0]
}
 80038e8:	4618      	mov	r0, r3
 80038ea:	370c      	adds	r7, #12
 80038ec:	46bd      	mov	sp, r7
 80038ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038f2:	4770      	bx	lr

080038f4 <chk_lock>:
static
FRESULT chk_lock (	/* Check if the file can be accessed */
	DIR* dp,		/* Directory object pointing the file to be checked */
	int acc			/* Desired access type (0:Read, 1:Write, 2:Delete/Rename) */
)
{
 80038f4:	b480      	push	{r7}
 80038f6:	b085      	sub	sp, #20
 80038f8:	af00      	add	r7, sp, #0
 80038fa:	6078      	str	r0, [r7, #4]
 80038fc:	6039      	str	r1, [r7, #0]
	UINT i, be;

	/* Search file semaphore table */
	for (i = be = 0; i < _FS_LOCK; i++) {
 80038fe:	2300      	movs	r3, #0
 8003900:	60bb      	str	r3, [r7, #8]
 8003902:	68bb      	ldr	r3, [r7, #8]
 8003904:	60fb      	str	r3, [r7, #12]
 8003906:	e029      	b.n	800395c <chk_lock+0x68>
		if (Files[i].fs) {	/* Existing entry */
 8003908:	4a27      	ldr	r2, [pc, #156]	@ (80039a8 <chk_lock+0xb4>)
 800390a:	68fb      	ldr	r3, [r7, #12]
 800390c:	011b      	lsls	r3, r3, #4
 800390e:	4413      	add	r3, r2
 8003910:	681b      	ldr	r3, [r3, #0]
 8003912:	2b00      	cmp	r3, #0
 8003914:	d01d      	beq.n	8003952 <chk_lock+0x5e>
			if (Files[i].fs == dp->obj.fs &&	 	/* Check if the object matched with an open object */
 8003916:	4a24      	ldr	r2, [pc, #144]	@ (80039a8 <chk_lock+0xb4>)
 8003918:	68fb      	ldr	r3, [r7, #12]
 800391a:	011b      	lsls	r3, r3, #4
 800391c:	4413      	add	r3, r2
 800391e:	681a      	ldr	r2, [r3, #0]
 8003920:	687b      	ldr	r3, [r7, #4]
 8003922:	681b      	ldr	r3, [r3, #0]
 8003924:	429a      	cmp	r2, r3
 8003926:	d116      	bne.n	8003956 <chk_lock+0x62>
				Files[i].clu == dp->obj.sclust &&
 8003928:	4a1f      	ldr	r2, [pc, #124]	@ (80039a8 <chk_lock+0xb4>)
 800392a:	68fb      	ldr	r3, [r7, #12]
 800392c:	011b      	lsls	r3, r3, #4
 800392e:	4413      	add	r3, r2
 8003930:	3304      	adds	r3, #4
 8003932:	681a      	ldr	r2, [r3, #0]
 8003934:	687b      	ldr	r3, [r7, #4]
 8003936:	689b      	ldr	r3, [r3, #8]
			if (Files[i].fs == dp->obj.fs &&	 	/* Check if the object matched with an open object */
 8003938:	429a      	cmp	r2, r3
 800393a:	d10c      	bne.n	8003956 <chk_lock+0x62>
				Files[i].ofs == dp->dptr) break;
 800393c:	4a1a      	ldr	r2, [pc, #104]	@ (80039a8 <chk_lock+0xb4>)
 800393e:	68fb      	ldr	r3, [r7, #12]
 8003940:	011b      	lsls	r3, r3, #4
 8003942:	4413      	add	r3, r2
 8003944:	3308      	adds	r3, #8
 8003946:	681a      	ldr	r2, [r3, #0]
 8003948:	687b      	ldr	r3, [r7, #4]
 800394a:	695b      	ldr	r3, [r3, #20]
				Files[i].clu == dp->obj.sclust &&
 800394c:	429a      	cmp	r2, r3
 800394e:	d102      	bne.n	8003956 <chk_lock+0x62>
				Files[i].ofs == dp->dptr) break;
 8003950:	e007      	b.n	8003962 <chk_lock+0x6e>
		} else {			/* Blank entry */
			be = 1;
 8003952:	2301      	movs	r3, #1
 8003954:	60bb      	str	r3, [r7, #8]
	for (i = be = 0; i < _FS_LOCK; i++) {
 8003956:	68fb      	ldr	r3, [r7, #12]
 8003958:	3301      	adds	r3, #1
 800395a:	60fb      	str	r3, [r7, #12]
 800395c:	68fb      	ldr	r3, [r7, #12]
 800395e:	2b01      	cmp	r3, #1
 8003960:	d9d2      	bls.n	8003908 <chk_lock+0x14>
		}
	}
	if (i == _FS_LOCK) {	/* The object is not opened */
 8003962:	68fb      	ldr	r3, [r7, #12]
 8003964:	2b02      	cmp	r3, #2
 8003966:	d109      	bne.n	800397c <chk_lock+0x88>
		return (be || acc == 2) ? FR_OK : FR_TOO_MANY_OPEN_FILES;	/* Is there a blank entry for new object? */
 8003968:	68bb      	ldr	r3, [r7, #8]
 800396a:	2b00      	cmp	r3, #0
 800396c:	d102      	bne.n	8003974 <chk_lock+0x80>
 800396e:	683b      	ldr	r3, [r7, #0]
 8003970:	2b02      	cmp	r3, #2
 8003972:	d101      	bne.n	8003978 <chk_lock+0x84>
 8003974:	2300      	movs	r3, #0
 8003976:	e010      	b.n	800399a <chk_lock+0xa6>
 8003978:	2312      	movs	r3, #18
 800397a:	e00e      	b.n	800399a <chk_lock+0xa6>
	}

	/* The object has been opened. Reject any open against writing file and all write mode open */
	return (acc || Files[i].ctr == 0x100) ? FR_LOCKED : FR_OK;
 800397c:	683b      	ldr	r3, [r7, #0]
 800397e:	2b00      	cmp	r3, #0
 8003980:	d108      	bne.n	8003994 <chk_lock+0xa0>
 8003982:	4a09      	ldr	r2, [pc, #36]	@ (80039a8 <chk_lock+0xb4>)
 8003984:	68fb      	ldr	r3, [r7, #12]
 8003986:	011b      	lsls	r3, r3, #4
 8003988:	4413      	add	r3, r2
 800398a:	330c      	adds	r3, #12
 800398c:	881b      	ldrh	r3, [r3, #0]
 800398e:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8003992:	d101      	bne.n	8003998 <chk_lock+0xa4>
 8003994:	2310      	movs	r3, #16
 8003996:	e000      	b.n	800399a <chk_lock+0xa6>
 8003998:	2300      	movs	r3, #0
}
 800399a:	4618      	mov	r0, r3
 800399c:	3714      	adds	r7, #20
 800399e:	46bd      	mov	sp, r7
 80039a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039a4:	4770      	bx	lr
 80039a6:	bf00      	nop
 80039a8:	20000114 	.word	0x20000114

080039ac <enq_lock>:


static
int enq_lock (void)	/* Check if an entry is available for a new object */
{
 80039ac:	b480      	push	{r7}
 80039ae:	b083      	sub	sp, #12
 80039b0:	af00      	add	r7, sp, #0
	UINT i;

	for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 80039b2:	2300      	movs	r3, #0
 80039b4:	607b      	str	r3, [r7, #4]
 80039b6:	e002      	b.n	80039be <enq_lock+0x12>
 80039b8:	687b      	ldr	r3, [r7, #4]
 80039ba:	3301      	adds	r3, #1
 80039bc:	607b      	str	r3, [r7, #4]
 80039be:	687b      	ldr	r3, [r7, #4]
 80039c0:	2b01      	cmp	r3, #1
 80039c2:	d806      	bhi.n	80039d2 <enq_lock+0x26>
 80039c4:	4a09      	ldr	r2, [pc, #36]	@ (80039ec <enq_lock+0x40>)
 80039c6:	687b      	ldr	r3, [r7, #4]
 80039c8:	011b      	lsls	r3, r3, #4
 80039ca:	4413      	add	r3, r2
 80039cc:	681b      	ldr	r3, [r3, #0]
 80039ce:	2b00      	cmp	r3, #0
 80039d0:	d1f2      	bne.n	80039b8 <enq_lock+0xc>
	return (i == _FS_LOCK) ? 0 : 1;
 80039d2:	687b      	ldr	r3, [r7, #4]
 80039d4:	2b02      	cmp	r3, #2
 80039d6:	bf14      	ite	ne
 80039d8:	2301      	movne	r3, #1
 80039da:	2300      	moveq	r3, #0
 80039dc:	b2db      	uxtb	r3, r3
}
 80039de:	4618      	mov	r0, r3
 80039e0:	370c      	adds	r7, #12
 80039e2:	46bd      	mov	sp, r7
 80039e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039e8:	4770      	bx	lr
 80039ea:	bf00      	nop
 80039ec:	20000114 	.word	0x20000114

080039f0 <inc_lock>:
static
UINT inc_lock (	/* Increment object open counter and returns its index (0:Internal error) */
	DIR* dp,	/* Directory object pointing the file to register or increment */
	int acc		/* Desired access (0:Read, 1:Write, 2:Delete/Rename) */
)
{
 80039f0:	b480      	push	{r7}
 80039f2:	b085      	sub	sp, #20
 80039f4:	af00      	add	r7, sp, #0
 80039f6:	6078      	str	r0, [r7, #4]
 80039f8:	6039      	str	r1, [r7, #0]
	UINT i;


	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
 80039fa:	2300      	movs	r3, #0
 80039fc:	60fb      	str	r3, [r7, #12]
 80039fe:	e01f      	b.n	8003a40 <inc_lock+0x50>
		if (Files[i].fs == dp->obj.fs &&
 8003a00:	4a41      	ldr	r2, [pc, #260]	@ (8003b08 <inc_lock+0x118>)
 8003a02:	68fb      	ldr	r3, [r7, #12]
 8003a04:	011b      	lsls	r3, r3, #4
 8003a06:	4413      	add	r3, r2
 8003a08:	681a      	ldr	r2, [r3, #0]
 8003a0a:	687b      	ldr	r3, [r7, #4]
 8003a0c:	681b      	ldr	r3, [r3, #0]
 8003a0e:	429a      	cmp	r2, r3
 8003a10:	d113      	bne.n	8003a3a <inc_lock+0x4a>
			Files[i].clu == dp->obj.sclust &&
 8003a12:	4a3d      	ldr	r2, [pc, #244]	@ (8003b08 <inc_lock+0x118>)
 8003a14:	68fb      	ldr	r3, [r7, #12]
 8003a16:	011b      	lsls	r3, r3, #4
 8003a18:	4413      	add	r3, r2
 8003a1a:	3304      	adds	r3, #4
 8003a1c:	681a      	ldr	r2, [r3, #0]
 8003a1e:	687b      	ldr	r3, [r7, #4]
 8003a20:	689b      	ldr	r3, [r3, #8]
		if (Files[i].fs == dp->obj.fs &&
 8003a22:	429a      	cmp	r2, r3
 8003a24:	d109      	bne.n	8003a3a <inc_lock+0x4a>
			Files[i].ofs == dp->dptr) break;
 8003a26:	4a38      	ldr	r2, [pc, #224]	@ (8003b08 <inc_lock+0x118>)
 8003a28:	68fb      	ldr	r3, [r7, #12]
 8003a2a:	011b      	lsls	r3, r3, #4
 8003a2c:	4413      	add	r3, r2
 8003a2e:	3308      	adds	r3, #8
 8003a30:	681a      	ldr	r2, [r3, #0]
 8003a32:	687b      	ldr	r3, [r7, #4]
 8003a34:	695b      	ldr	r3, [r3, #20]
			Files[i].clu == dp->obj.sclust &&
 8003a36:	429a      	cmp	r2, r3
 8003a38:	d006      	beq.n	8003a48 <inc_lock+0x58>
	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
 8003a3a:	68fb      	ldr	r3, [r7, #12]
 8003a3c:	3301      	adds	r3, #1
 8003a3e:	60fb      	str	r3, [r7, #12]
 8003a40:	68fb      	ldr	r3, [r7, #12]
 8003a42:	2b01      	cmp	r3, #1
 8003a44:	d9dc      	bls.n	8003a00 <inc_lock+0x10>
 8003a46:	e000      	b.n	8003a4a <inc_lock+0x5a>
			Files[i].ofs == dp->dptr) break;
 8003a48:	bf00      	nop
	}

	if (i == _FS_LOCK) {				/* Not opened. Register it as new. */
 8003a4a:	68fb      	ldr	r3, [r7, #12]
 8003a4c:	2b02      	cmp	r3, #2
 8003a4e:	d132      	bne.n	8003ab6 <inc_lock+0xc6>
		for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 8003a50:	2300      	movs	r3, #0
 8003a52:	60fb      	str	r3, [r7, #12]
 8003a54:	e002      	b.n	8003a5c <inc_lock+0x6c>
 8003a56:	68fb      	ldr	r3, [r7, #12]
 8003a58:	3301      	adds	r3, #1
 8003a5a:	60fb      	str	r3, [r7, #12]
 8003a5c:	68fb      	ldr	r3, [r7, #12]
 8003a5e:	2b01      	cmp	r3, #1
 8003a60:	d806      	bhi.n	8003a70 <inc_lock+0x80>
 8003a62:	4a29      	ldr	r2, [pc, #164]	@ (8003b08 <inc_lock+0x118>)
 8003a64:	68fb      	ldr	r3, [r7, #12]
 8003a66:	011b      	lsls	r3, r3, #4
 8003a68:	4413      	add	r3, r2
 8003a6a:	681b      	ldr	r3, [r3, #0]
 8003a6c:	2b00      	cmp	r3, #0
 8003a6e:	d1f2      	bne.n	8003a56 <inc_lock+0x66>
		if (i == _FS_LOCK) return 0;	/* No free entry to register (int err) */
 8003a70:	68fb      	ldr	r3, [r7, #12]
 8003a72:	2b02      	cmp	r3, #2
 8003a74:	d101      	bne.n	8003a7a <inc_lock+0x8a>
 8003a76:	2300      	movs	r3, #0
 8003a78:	e040      	b.n	8003afc <inc_lock+0x10c>
		Files[i].fs = dp->obj.fs;
 8003a7a:	687b      	ldr	r3, [r7, #4]
 8003a7c:	681a      	ldr	r2, [r3, #0]
 8003a7e:	4922      	ldr	r1, [pc, #136]	@ (8003b08 <inc_lock+0x118>)
 8003a80:	68fb      	ldr	r3, [r7, #12]
 8003a82:	011b      	lsls	r3, r3, #4
 8003a84:	440b      	add	r3, r1
 8003a86:	601a      	str	r2, [r3, #0]
		Files[i].clu = dp->obj.sclust;
 8003a88:	687b      	ldr	r3, [r7, #4]
 8003a8a:	689a      	ldr	r2, [r3, #8]
 8003a8c:	491e      	ldr	r1, [pc, #120]	@ (8003b08 <inc_lock+0x118>)
 8003a8e:	68fb      	ldr	r3, [r7, #12]
 8003a90:	011b      	lsls	r3, r3, #4
 8003a92:	440b      	add	r3, r1
 8003a94:	3304      	adds	r3, #4
 8003a96:	601a      	str	r2, [r3, #0]
		Files[i].ofs = dp->dptr;
 8003a98:	687b      	ldr	r3, [r7, #4]
 8003a9a:	695a      	ldr	r2, [r3, #20]
 8003a9c:	491a      	ldr	r1, [pc, #104]	@ (8003b08 <inc_lock+0x118>)
 8003a9e:	68fb      	ldr	r3, [r7, #12]
 8003aa0:	011b      	lsls	r3, r3, #4
 8003aa2:	440b      	add	r3, r1
 8003aa4:	3308      	adds	r3, #8
 8003aa6:	601a      	str	r2, [r3, #0]
		Files[i].ctr = 0;
 8003aa8:	4a17      	ldr	r2, [pc, #92]	@ (8003b08 <inc_lock+0x118>)
 8003aaa:	68fb      	ldr	r3, [r7, #12]
 8003aac:	011b      	lsls	r3, r3, #4
 8003aae:	4413      	add	r3, r2
 8003ab0:	330c      	adds	r3, #12
 8003ab2:	2200      	movs	r2, #0
 8003ab4:	801a      	strh	r2, [r3, #0]
	}

	if (acc && Files[i].ctr) return 0;	/* Access violation (int err) */
 8003ab6:	683b      	ldr	r3, [r7, #0]
 8003ab8:	2b00      	cmp	r3, #0
 8003aba:	d009      	beq.n	8003ad0 <inc_lock+0xe0>
 8003abc:	4a12      	ldr	r2, [pc, #72]	@ (8003b08 <inc_lock+0x118>)
 8003abe:	68fb      	ldr	r3, [r7, #12]
 8003ac0:	011b      	lsls	r3, r3, #4
 8003ac2:	4413      	add	r3, r2
 8003ac4:	330c      	adds	r3, #12
 8003ac6:	881b      	ldrh	r3, [r3, #0]
 8003ac8:	2b00      	cmp	r3, #0
 8003aca:	d001      	beq.n	8003ad0 <inc_lock+0xe0>
 8003acc:	2300      	movs	r3, #0
 8003ace:	e015      	b.n	8003afc <inc_lock+0x10c>

	Files[i].ctr = acc ? 0x100 : Files[i].ctr + 1;	/* Set semaphore value */
 8003ad0:	683b      	ldr	r3, [r7, #0]
 8003ad2:	2b00      	cmp	r3, #0
 8003ad4:	d108      	bne.n	8003ae8 <inc_lock+0xf8>
 8003ad6:	4a0c      	ldr	r2, [pc, #48]	@ (8003b08 <inc_lock+0x118>)
 8003ad8:	68fb      	ldr	r3, [r7, #12]
 8003ada:	011b      	lsls	r3, r3, #4
 8003adc:	4413      	add	r3, r2
 8003ade:	330c      	adds	r3, #12
 8003ae0:	881b      	ldrh	r3, [r3, #0]
 8003ae2:	3301      	adds	r3, #1
 8003ae4:	b29a      	uxth	r2, r3
 8003ae6:	e001      	b.n	8003aec <inc_lock+0xfc>
 8003ae8:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8003aec:	4906      	ldr	r1, [pc, #24]	@ (8003b08 <inc_lock+0x118>)
 8003aee:	68fb      	ldr	r3, [r7, #12]
 8003af0:	011b      	lsls	r3, r3, #4
 8003af2:	440b      	add	r3, r1
 8003af4:	330c      	adds	r3, #12
 8003af6:	801a      	strh	r2, [r3, #0]

	return i + 1;
 8003af8:	68fb      	ldr	r3, [r7, #12]
 8003afa:	3301      	adds	r3, #1
}
 8003afc:	4618      	mov	r0, r3
 8003afe:	3714      	adds	r7, #20
 8003b00:	46bd      	mov	sp, r7
 8003b02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b06:	4770      	bx	lr
 8003b08:	20000114 	.word	0x20000114

08003b0c <dec_lock>:

static
FRESULT dec_lock (	/* Decrement object open counter */
	UINT i			/* Semaphore index (1..) */
)
{
 8003b0c:	b480      	push	{r7}
 8003b0e:	b085      	sub	sp, #20
 8003b10:	af00      	add	r7, sp, #0
 8003b12:	6078      	str	r0, [r7, #4]
	WORD n;
	FRESULT res;


	if (--i < _FS_LOCK) {	/* Shift index number origin from 0 */
 8003b14:	687b      	ldr	r3, [r7, #4]
 8003b16:	3b01      	subs	r3, #1
 8003b18:	607b      	str	r3, [r7, #4]
 8003b1a:	687b      	ldr	r3, [r7, #4]
 8003b1c:	2b01      	cmp	r3, #1
 8003b1e:	d825      	bhi.n	8003b6c <dec_lock+0x60>
		n = Files[i].ctr;
 8003b20:	4a17      	ldr	r2, [pc, #92]	@ (8003b80 <dec_lock+0x74>)
 8003b22:	687b      	ldr	r3, [r7, #4]
 8003b24:	011b      	lsls	r3, r3, #4
 8003b26:	4413      	add	r3, r2
 8003b28:	330c      	adds	r3, #12
 8003b2a:	881b      	ldrh	r3, [r3, #0]
 8003b2c:	81fb      	strh	r3, [r7, #14]
		if (n == 0x100) n = 0;		/* If write mode open, delete the entry */
 8003b2e:	89fb      	ldrh	r3, [r7, #14]
 8003b30:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8003b34:	d101      	bne.n	8003b3a <dec_lock+0x2e>
 8003b36:	2300      	movs	r3, #0
 8003b38:	81fb      	strh	r3, [r7, #14]
		if (n > 0) n--;				/* Decrement read mode open count */
 8003b3a:	89fb      	ldrh	r3, [r7, #14]
 8003b3c:	2b00      	cmp	r3, #0
 8003b3e:	d002      	beq.n	8003b46 <dec_lock+0x3a>
 8003b40:	89fb      	ldrh	r3, [r7, #14]
 8003b42:	3b01      	subs	r3, #1
 8003b44:	81fb      	strh	r3, [r7, #14]
		Files[i].ctr = n;
 8003b46:	4a0e      	ldr	r2, [pc, #56]	@ (8003b80 <dec_lock+0x74>)
 8003b48:	687b      	ldr	r3, [r7, #4]
 8003b4a:	011b      	lsls	r3, r3, #4
 8003b4c:	4413      	add	r3, r2
 8003b4e:	330c      	adds	r3, #12
 8003b50:	89fa      	ldrh	r2, [r7, #14]
 8003b52:	801a      	strh	r2, [r3, #0]
		if (n == 0) Files[i].fs = 0;	/* Delete the entry if open count gets zero */
 8003b54:	89fb      	ldrh	r3, [r7, #14]
 8003b56:	2b00      	cmp	r3, #0
 8003b58:	d105      	bne.n	8003b66 <dec_lock+0x5a>
 8003b5a:	4a09      	ldr	r2, [pc, #36]	@ (8003b80 <dec_lock+0x74>)
 8003b5c:	687b      	ldr	r3, [r7, #4]
 8003b5e:	011b      	lsls	r3, r3, #4
 8003b60:	4413      	add	r3, r2
 8003b62:	2200      	movs	r2, #0
 8003b64:	601a      	str	r2, [r3, #0]
		res = FR_OK;
 8003b66:	2300      	movs	r3, #0
 8003b68:	737b      	strb	r3, [r7, #13]
 8003b6a:	e001      	b.n	8003b70 <dec_lock+0x64>
	} else {
		res = FR_INT_ERR;			/* Invalid index nunber */
 8003b6c:	2302      	movs	r3, #2
 8003b6e:	737b      	strb	r3, [r7, #13]
	}
	return res;
 8003b70:	7b7b      	ldrb	r3, [r7, #13]
}
 8003b72:	4618      	mov	r0, r3
 8003b74:	3714      	adds	r7, #20
 8003b76:	46bd      	mov	sp, r7
 8003b78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b7c:	4770      	bx	lr
 8003b7e:	bf00      	nop
 8003b80:	20000114 	.word	0x20000114

08003b84 <clear_lock>:

static
void clear_lock (	/* Clear lock entries of the volume */
	FATFS *fs
)
{
 8003b84:	b480      	push	{r7}
 8003b86:	b085      	sub	sp, #20
 8003b88:	af00      	add	r7, sp, #0
 8003b8a:	6078      	str	r0, [r7, #4]
	UINT i;

	for (i = 0; i < _FS_LOCK; i++) {
 8003b8c:	2300      	movs	r3, #0
 8003b8e:	60fb      	str	r3, [r7, #12]
 8003b90:	e010      	b.n	8003bb4 <clear_lock+0x30>
		if (Files[i].fs == fs) Files[i].fs = 0;
 8003b92:	4a0d      	ldr	r2, [pc, #52]	@ (8003bc8 <clear_lock+0x44>)
 8003b94:	68fb      	ldr	r3, [r7, #12]
 8003b96:	011b      	lsls	r3, r3, #4
 8003b98:	4413      	add	r3, r2
 8003b9a:	681b      	ldr	r3, [r3, #0]
 8003b9c:	687a      	ldr	r2, [r7, #4]
 8003b9e:	429a      	cmp	r2, r3
 8003ba0:	d105      	bne.n	8003bae <clear_lock+0x2a>
 8003ba2:	4a09      	ldr	r2, [pc, #36]	@ (8003bc8 <clear_lock+0x44>)
 8003ba4:	68fb      	ldr	r3, [r7, #12]
 8003ba6:	011b      	lsls	r3, r3, #4
 8003ba8:	4413      	add	r3, r2
 8003baa:	2200      	movs	r2, #0
 8003bac:	601a      	str	r2, [r3, #0]
	for (i = 0; i < _FS_LOCK; i++) {
 8003bae:	68fb      	ldr	r3, [r7, #12]
 8003bb0:	3301      	adds	r3, #1
 8003bb2:	60fb      	str	r3, [r7, #12]
 8003bb4:	68fb      	ldr	r3, [r7, #12]
 8003bb6:	2b01      	cmp	r3, #1
 8003bb8:	d9eb      	bls.n	8003b92 <clear_lock+0xe>
	}
}
 8003bba:	bf00      	nop
 8003bbc:	bf00      	nop
 8003bbe:	3714      	adds	r7, #20
 8003bc0:	46bd      	mov	sp, r7
 8003bc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bc6:	4770      	bx	lr
 8003bc8:	20000114 	.word	0x20000114

08003bcc <sync_window>:
#if !_FS_READONLY
static
FRESULT sync_window (	/* Returns FR_OK or FR_DISK_ERROR */
	FATFS* fs			/* File system object */
)
{
 8003bcc:	b580      	push	{r7, lr}
 8003bce:	b086      	sub	sp, #24
 8003bd0:	af00      	add	r7, sp, #0
 8003bd2:	6078      	str	r0, [r7, #4]
	DWORD wsect;
	UINT nf;
	FRESULT res = FR_OK;
 8003bd4:	2300      	movs	r3, #0
 8003bd6:	73fb      	strb	r3, [r7, #15]


	if (fs->wflag) {	/* Write back the sector if it is dirty */
 8003bd8:	687b      	ldr	r3, [r7, #4]
 8003bda:	78db      	ldrb	r3, [r3, #3]
 8003bdc:	2b00      	cmp	r3, #0
 8003bde:	d034      	beq.n	8003c4a <sync_window+0x7e>
		wsect = fs->winsect;	/* Current sector number */
 8003be0:	687b      	ldr	r3, [r7, #4]
 8003be2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003be4:	617b      	str	r3, [r7, #20]
		if (disk_write(fs->drv, fs->win, wsect, 1) != RES_OK) {
 8003be6:	687b      	ldr	r3, [r7, #4]
 8003be8:	7858      	ldrb	r0, [r3, #1]
 8003bea:	687b      	ldr	r3, [r7, #4]
 8003bec:	f103 0130 	add.w	r1, r3, #48	@ 0x30
 8003bf0:	2301      	movs	r3, #1
 8003bf2:	697a      	ldr	r2, [r7, #20]
 8003bf4:	f7ff fd40 	bl	8003678 <disk_write>
 8003bf8:	4603      	mov	r3, r0
 8003bfa:	2b00      	cmp	r3, #0
 8003bfc:	d002      	beq.n	8003c04 <sync_window+0x38>
			res = FR_DISK_ERR;
 8003bfe:	2301      	movs	r3, #1
 8003c00:	73fb      	strb	r3, [r7, #15]
 8003c02:	e022      	b.n	8003c4a <sync_window+0x7e>
		} else {
			fs->wflag = 0;
 8003c04:	687b      	ldr	r3, [r7, #4]
 8003c06:	2200      	movs	r2, #0
 8003c08:	70da      	strb	r2, [r3, #3]
			if (wsect - fs->fatbase < fs->fsize) {		/* Is it in the FAT area? */
 8003c0a:	687b      	ldr	r3, [r7, #4]
 8003c0c:	6a1b      	ldr	r3, [r3, #32]
 8003c0e:	697a      	ldr	r2, [r7, #20]
 8003c10:	1ad2      	subs	r2, r2, r3
 8003c12:	687b      	ldr	r3, [r7, #4]
 8003c14:	699b      	ldr	r3, [r3, #24]
 8003c16:	429a      	cmp	r2, r3
 8003c18:	d217      	bcs.n	8003c4a <sync_window+0x7e>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 8003c1a:	687b      	ldr	r3, [r7, #4]
 8003c1c:	789b      	ldrb	r3, [r3, #2]
 8003c1e:	613b      	str	r3, [r7, #16]
 8003c20:	e010      	b.n	8003c44 <sync_window+0x78>
					wsect += fs->fsize;
 8003c22:	687b      	ldr	r3, [r7, #4]
 8003c24:	699b      	ldr	r3, [r3, #24]
 8003c26:	697a      	ldr	r2, [r7, #20]
 8003c28:	4413      	add	r3, r2
 8003c2a:	617b      	str	r3, [r7, #20]
					disk_write(fs->drv, fs->win, wsect, 1);
 8003c2c:	687b      	ldr	r3, [r7, #4]
 8003c2e:	7858      	ldrb	r0, [r3, #1]
 8003c30:	687b      	ldr	r3, [r7, #4]
 8003c32:	f103 0130 	add.w	r1, r3, #48	@ 0x30
 8003c36:	2301      	movs	r3, #1
 8003c38:	697a      	ldr	r2, [r7, #20]
 8003c3a:	f7ff fd1d 	bl	8003678 <disk_write>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 8003c3e:	693b      	ldr	r3, [r7, #16]
 8003c40:	3b01      	subs	r3, #1
 8003c42:	613b      	str	r3, [r7, #16]
 8003c44:	693b      	ldr	r3, [r7, #16]
 8003c46:	2b01      	cmp	r3, #1
 8003c48:	d8eb      	bhi.n	8003c22 <sync_window+0x56>
				}
			}
		}
	}
	return res;
 8003c4a:	7bfb      	ldrb	r3, [r7, #15]
}
 8003c4c:	4618      	mov	r0, r3
 8003c4e:	3718      	adds	r7, #24
 8003c50:	46bd      	mov	sp, r7
 8003c52:	bd80      	pop	{r7, pc}

08003c54 <move_window>:
static
FRESULT move_window (	/* Returns FR_OK or FR_DISK_ERROR */
	FATFS* fs,			/* File system object */
	DWORD sector		/* Sector number to make appearance in the fs->win[] */
)
{
 8003c54:	b580      	push	{r7, lr}
 8003c56:	b084      	sub	sp, #16
 8003c58:	af00      	add	r7, sp, #0
 8003c5a:	6078      	str	r0, [r7, #4]
 8003c5c:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_OK;
 8003c5e:	2300      	movs	r3, #0
 8003c60:	73fb      	strb	r3, [r7, #15]


	if (sector != fs->winsect) {	/* Window offset changed? */
 8003c62:	687b      	ldr	r3, [r7, #4]
 8003c64:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003c66:	683a      	ldr	r2, [r7, #0]
 8003c68:	429a      	cmp	r2, r3
 8003c6a:	d01b      	beq.n	8003ca4 <move_window+0x50>
#if !_FS_READONLY
		res = sync_window(fs);		/* Write-back changes */
 8003c6c:	6878      	ldr	r0, [r7, #4]
 8003c6e:	f7ff ffad 	bl	8003bcc <sync_window>
 8003c72:	4603      	mov	r3, r0
 8003c74:	73fb      	strb	r3, [r7, #15]
#endif
		if (res == FR_OK) {			/* Fill sector window with new data */
 8003c76:	7bfb      	ldrb	r3, [r7, #15]
 8003c78:	2b00      	cmp	r3, #0
 8003c7a:	d113      	bne.n	8003ca4 <move_window+0x50>
			if (disk_read(fs->drv, fs->win, sector, 1) != RES_OK) {
 8003c7c:	687b      	ldr	r3, [r7, #4]
 8003c7e:	7858      	ldrb	r0, [r3, #1]
 8003c80:	687b      	ldr	r3, [r7, #4]
 8003c82:	f103 0130 	add.w	r1, r3, #48	@ 0x30
 8003c86:	2301      	movs	r3, #1
 8003c88:	683a      	ldr	r2, [r7, #0]
 8003c8a:	f7ff fcd5 	bl	8003638 <disk_read>
 8003c8e:	4603      	mov	r3, r0
 8003c90:	2b00      	cmp	r3, #0
 8003c92:	d004      	beq.n	8003c9e <move_window+0x4a>
				sector = 0xFFFFFFFF;	/* Invalidate window if data is not reliable */
 8003c94:	f04f 33ff 	mov.w	r3, #4294967295
 8003c98:	603b      	str	r3, [r7, #0]
				res = FR_DISK_ERR;
 8003c9a:	2301      	movs	r3, #1
 8003c9c:	73fb      	strb	r3, [r7, #15]
			}
			fs->winsect = sector;
 8003c9e:	687b      	ldr	r3, [r7, #4]
 8003ca0:	683a      	ldr	r2, [r7, #0]
 8003ca2:	62da      	str	r2, [r3, #44]	@ 0x2c
		}
	}
	return res;
 8003ca4:	7bfb      	ldrb	r3, [r7, #15]
}
 8003ca6:	4618      	mov	r0, r3
 8003ca8:	3710      	adds	r7, #16
 8003caa:	46bd      	mov	sp, r7
 8003cac:	bd80      	pop	{r7, pc}
	...

08003cb0 <sync_fs>:

static
FRESULT sync_fs (	/* FR_OK:succeeded, !=0:error */
	FATFS* fs		/* File system object */
)
{
 8003cb0:	b580      	push	{r7, lr}
 8003cb2:	b084      	sub	sp, #16
 8003cb4:	af00      	add	r7, sp, #0
 8003cb6:	6078      	str	r0, [r7, #4]
	FRESULT res;


	res = sync_window(fs);
 8003cb8:	6878      	ldr	r0, [r7, #4]
 8003cba:	f7ff ff87 	bl	8003bcc <sync_window>
 8003cbe:	4603      	mov	r3, r0
 8003cc0:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK) {
 8003cc2:	7bfb      	ldrb	r3, [r7, #15]
 8003cc4:	2b00      	cmp	r3, #0
 8003cc6:	d158      	bne.n	8003d7a <sync_fs+0xca>
		/* Update FSInfo sector if needed */
		if (fs->fs_type == FS_FAT32 && fs->fsi_flag == 1) {
 8003cc8:	687b      	ldr	r3, [r7, #4]
 8003cca:	781b      	ldrb	r3, [r3, #0]
 8003ccc:	2b03      	cmp	r3, #3
 8003cce:	d148      	bne.n	8003d62 <sync_fs+0xb2>
 8003cd0:	687b      	ldr	r3, [r7, #4]
 8003cd2:	791b      	ldrb	r3, [r3, #4]
 8003cd4:	2b01      	cmp	r3, #1
 8003cd6:	d144      	bne.n	8003d62 <sync_fs+0xb2>
			/* Create FSInfo structure */
			mem_set(fs->win, 0, SS(fs));
 8003cd8:	687b      	ldr	r3, [r7, #4]
 8003cda:	3330      	adds	r3, #48	@ 0x30
 8003cdc:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8003ce0:	2100      	movs	r1, #0
 8003ce2:	4618      	mov	r0, r3
 8003ce4:	f7ff fda9 	bl	800383a <mem_set>
			st_word(fs->win + BS_55AA, 0xAA55);
 8003ce8:	687b      	ldr	r3, [r7, #4]
 8003cea:	3330      	adds	r3, #48	@ 0x30
 8003cec:	f503 73ff 	add.w	r3, r3, #510	@ 0x1fe
 8003cf0:	f64a 2155 	movw	r1, #43605	@ 0xaa55
 8003cf4:	4618      	mov	r0, r3
 8003cf6:	f7ff fd38 	bl	800376a <st_word>
			st_dword(fs->win + FSI_LeadSig, 0x41615252);
 8003cfa:	687b      	ldr	r3, [r7, #4]
 8003cfc:	3330      	adds	r3, #48	@ 0x30
 8003cfe:	4921      	ldr	r1, [pc, #132]	@ (8003d84 <sync_fs+0xd4>)
 8003d00:	4618      	mov	r0, r3
 8003d02:	f7ff fd4d 	bl	80037a0 <st_dword>
			st_dword(fs->win + FSI_StrucSig, 0x61417272);
 8003d06:	687b      	ldr	r3, [r7, #4]
 8003d08:	3330      	adds	r3, #48	@ 0x30
 8003d0a:	f503 73f2 	add.w	r3, r3, #484	@ 0x1e4
 8003d0e:	491e      	ldr	r1, [pc, #120]	@ (8003d88 <sync_fs+0xd8>)
 8003d10:	4618      	mov	r0, r3
 8003d12:	f7ff fd45 	bl	80037a0 <st_dword>
			st_dword(fs->win + FSI_Free_Count, fs->free_clst);
 8003d16:	687b      	ldr	r3, [r7, #4]
 8003d18:	3330      	adds	r3, #48	@ 0x30
 8003d1a:	f503 72f4 	add.w	r2, r3, #488	@ 0x1e8
 8003d1e:	687b      	ldr	r3, [r7, #4]
 8003d20:	691b      	ldr	r3, [r3, #16]
 8003d22:	4619      	mov	r1, r3
 8003d24:	4610      	mov	r0, r2
 8003d26:	f7ff fd3b 	bl	80037a0 <st_dword>
			st_dword(fs->win + FSI_Nxt_Free, fs->last_clst);
 8003d2a:	687b      	ldr	r3, [r7, #4]
 8003d2c:	3330      	adds	r3, #48	@ 0x30
 8003d2e:	f503 72f6 	add.w	r2, r3, #492	@ 0x1ec
 8003d32:	687b      	ldr	r3, [r7, #4]
 8003d34:	68db      	ldr	r3, [r3, #12]
 8003d36:	4619      	mov	r1, r3
 8003d38:	4610      	mov	r0, r2
 8003d3a:	f7ff fd31 	bl	80037a0 <st_dword>
			/* Write it into the FSInfo sector */
			fs->winsect = fs->volbase + 1;
 8003d3e:	687b      	ldr	r3, [r7, #4]
 8003d40:	69db      	ldr	r3, [r3, #28]
 8003d42:	1c5a      	adds	r2, r3, #1
 8003d44:	687b      	ldr	r3, [r7, #4]
 8003d46:	62da      	str	r2, [r3, #44]	@ 0x2c
			disk_write(fs->drv, fs->win, fs->winsect, 1);
 8003d48:	687b      	ldr	r3, [r7, #4]
 8003d4a:	7858      	ldrb	r0, [r3, #1]
 8003d4c:	687b      	ldr	r3, [r7, #4]
 8003d4e:	f103 0130 	add.w	r1, r3, #48	@ 0x30
 8003d52:	687b      	ldr	r3, [r7, #4]
 8003d54:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8003d56:	2301      	movs	r3, #1
 8003d58:	f7ff fc8e 	bl	8003678 <disk_write>
			fs->fsi_flag = 0;
 8003d5c:	687b      	ldr	r3, [r7, #4]
 8003d5e:	2200      	movs	r2, #0
 8003d60:	711a      	strb	r2, [r3, #4]
		}
		/* Make sure that no pending write process in the physical drive */
		if (disk_ioctl(fs->drv, CTRL_SYNC, 0) != RES_OK) res = FR_DISK_ERR;
 8003d62:	687b      	ldr	r3, [r7, #4]
 8003d64:	785b      	ldrb	r3, [r3, #1]
 8003d66:	2200      	movs	r2, #0
 8003d68:	2100      	movs	r1, #0
 8003d6a:	4618      	mov	r0, r3
 8003d6c:	f7ff fca4 	bl	80036b8 <disk_ioctl>
 8003d70:	4603      	mov	r3, r0
 8003d72:	2b00      	cmp	r3, #0
 8003d74:	d001      	beq.n	8003d7a <sync_fs+0xca>
 8003d76:	2301      	movs	r3, #1
 8003d78:	73fb      	strb	r3, [r7, #15]
	}

	return res;
 8003d7a:	7bfb      	ldrb	r3, [r7, #15]
}
 8003d7c:	4618      	mov	r0, r3
 8003d7e:	3710      	adds	r7, #16
 8003d80:	46bd      	mov	sp, r7
 8003d82:	bd80      	pop	{r7, pc}
 8003d84:	41615252 	.word	0x41615252
 8003d88:	61417272 	.word	0x61417272

08003d8c <clust2sect>:
static
DWORD clust2sect (	/* !=0:Sector number, 0:Failed (invalid cluster#) */
	FATFS* fs,		/* File system object */
	DWORD clst		/* Cluster# to be converted */
)
{
 8003d8c:	b480      	push	{r7}
 8003d8e:	b083      	sub	sp, #12
 8003d90:	af00      	add	r7, sp, #0
 8003d92:	6078      	str	r0, [r7, #4]
 8003d94:	6039      	str	r1, [r7, #0]
	clst -= 2;
 8003d96:	683b      	ldr	r3, [r7, #0]
 8003d98:	3b02      	subs	r3, #2
 8003d9a:	603b      	str	r3, [r7, #0]
	if (clst >= fs->n_fatent - 2) return 0;		/* Invalid cluster# */
 8003d9c:	687b      	ldr	r3, [r7, #4]
 8003d9e:	695b      	ldr	r3, [r3, #20]
 8003da0:	3b02      	subs	r3, #2
 8003da2:	683a      	ldr	r2, [r7, #0]
 8003da4:	429a      	cmp	r2, r3
 8003da6:	d301      	bcc.n	8003dac <clust2sect+0x20>
 8003da8:	2300      	movs	r3, #0
 8003daa:	e008      	b.n	8003dbe <clust2sect+0x32>
	return clst * fs->csize + fs->database;
 8003dac:	687b      	ldr	r3, [r7, #4]
 8003dae:	895b      	ldrh	r3, [r3, #10]
 8003db0:	461a      	mov	r2, r3
 8003db2:	683b      	ldr	r3, [r7, #0]
 8003db4:	fb03 f202 	mul.w	r2, r3, r2
 8003db8:	687b      	ldr	r3, [r7, #4]
 8003dba:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003dbc:	4413      	add	r3, r2
}
 8003dbe:	4618      	mov	r0, r3
 8003dc0:	370c      	adds	r7, #12
 8003dc2:	46bd      	mov	sp, r7
 8003dc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003dc8:	4770      	bx	lr

08003dca <get_fat>:
static
DWORD get_fat (	/* 0xFFFFFFFF:Disk error, 1:Internal error, 2..0x7FFFFFFF:Cluster status */
	_FDID* obj,	/* Corresponding object */
	DWORD clst	/* Cluster number to get the value */
)
{
 8003dca:	b580      	push	{r7, lr}
 8003dcc:	b086      	sub	sp, #24
 8003dce:	af00      	add	r7, sp, #0
 8003dd0:	6078      	str	r0, [r7, #4]
 8003dd2:	6039      	str	r1, [r7, #0]
	UINT wc, bc;
	DWORD val;
	FATFS *fs = obj->fs;
 8003dd4:	687b      	ldr	r3, [r7, #4]
 8003dd6:	681b      	ldr	r3, [r3, #0]
 8003dd8:	613b      	str	r3, [r7, #16]


	if (clst < 2 || clst >= fs->n_fatent) {	/* Check if in valid range */
 8003dda:	683b      	ldr	r3, [r7, #0]
 8003ddc:	2b01      	cmp	r3, #1
 8003dde:	d904      	bls.n	8003dea <get_fat+0x20>
 8003de0:	693b      	ldr	r3, [r7, #16]
 8003de2:	695b      	ldr	r3, [r3, #20]
 8003de4:	683a      	ldr	r2, [r7, #0]
 8003de6:	429a      	cmp	r2, r3
 8003de8:	d302      	bcc.n	8003df0 <get_fat+0x26>
		val = 1;	/* Internal error */
 8003dea:	2301      	movs	r3, #1
 8003dec:	617b      	str	r3, [r7, #20]
 8003dee:	e08e      	b.n	8003f0e <get_fat+0x144>

	} else {
		val = 0xFFFFFFFF;	/* Default value falls on disk error */
 8003df0:	f04f 33ff 	mov.w	r3, #4294967295
 8003df4:	617b      	str	r3, [r7, #20]

		switch (fs->fs_type) {
 8003df6:	693b      	ldr	r3, [r7, #16]
 8003df8:	781b      	ldrb	r3, [r3, #0]
 8003dfa:	2b03      	cmp	r3, #3
 8003dfc:	d061      	beq.n	8003ec2 <get_fat+0xf8>
 8003dfe:	2b03      	cmp	r3, #3
 8003e00:	dc7b      	bgt.n	8003efa <get_fat+0x130>
 8003e02:	2b01      	cmp	r3, #1
 8003e04:	d002      	beq.n	8003e0c <get_fat+0x42>
 8003e06:	2b02      	cmp	r3, #2
 8003e08:	d041      	beq.n	8003e8e <get_fat+0xc4>
 8003e0a:	e076      	b.n	8003efa <get_fat+0x130>
		case FS_FAT12 :
			bc = (UINT)clst; bc += bc / 2;
 8003e0c:	683b      	ldr	r3, [r7, #0]
 8003e0e:	60fb      	str	r3, [r7, #12]
 8003e10:	68fb      	ldr	r3, [r7, #12]
 8003e12:	085b      	lsrs	r3, r3, #1
 8003e14:	68fa      	ldr	r2, [r7, #12]
 8003e16:	4413      	add	r3, r2
 8003e18:	60fb      	str	r3, [r7, #12]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 8003e1a:	693b      	ldr	r3, [r7, #16]
 8003e1c:	6a1a      	ldr	r2, [r3, #32]
 8003e1e:	68fb      	ldr	r3, [r7, #12]
 8003e20:	0a5b      	lsrs	r3, r3, #9
 8003e22:	4413      	add	r3, r2
 8003e24:	4619      	mov	r1, r3
 8003e26:	6938      	ldr	r0, [r7, #16]
 8003e28:	f7ff ff14 	bl	8003c54 <move_window>
 8003e2c:	4603      	mov	r3, r0
 8003e2e:	2b00      	cmp	r3, #0
 8003e30:	d166      	bne.n	8003f00 <get_fat+0x136>
			wc = fs->win[bc++ % SS(fs)];
 8003e32:	68fb      	ldr	r3, [r7, #12]
 8003e34:	1c5a      	adds	r2, r3, #1
 8003e36:	60fa      	str	r2, [r7, #12]
 8003e38:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003e3c:	693a      	ldr	r2, [r7, #16]
 8003e3e:	4413      	add	r3, r2
 8003e40:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 8003e44:	60bb      	str	r3, [r7, #8]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 8003e46:	693b      	ldr	r3, [r7, #16]
 8003e48:	6a1a      	ldr	r2, [r3, #32]
 8003e4a:	68fb      	ldr	r3, [r7, #12]
 8003e4c:	0a5b      	lsrs	r3, r3, #9
 8003e4e:	4413      	add	r3, r2
 8003e50:	4619      	mov	r1, r3
 8003e52:	6938      	ldr	r0, [r7, #16]
 8003e54:	f7ff fefe 	bl	8003c54 <move_window>
 8003e58:	4603      	mov	r3, r0
 8003e5a:	2b00      	cmp	r3, #0
 8003e5c:	d152      	bne.n	8003f04 <get_fat+0x13a>
			wc |= fs->win[bc % SS(fs)] << 8;
 8003e5e:	68fb      	ldr	r3, [r7, #12]
 8003e60:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003e64:	693a      	ldr	r2, [r7, #16]
 8003e66:	4413      	add	r3, r2
 8003e68:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 8003e6c:	021b      	lsls	r3, r3, #8
 8003e6e:	68ba      	ldr	r2, [r7, #8]
 8003e70:	4313      	orrs	r3, r2
 8003e72:	60bb      	str	r3, [r7, #8]
			val = (clst & 1) ? (wc >> 4) : (wc & 0xFFF);
 8003e74:	683b      	ldr	r3, [r7, #0]
 8003e76:	f003 0301 	and.w	r3, r3, #1
 8003e7a:	2b00      	cmp	r3, #0
 8003e7c:	d002      	beq.n	8003e84 <get_fat+0xba>
 8003e7e:	68bb      	ldr	r3, [r7, #8]
 8003e80:	091b      	lsrs	r3, r3, #4
 8003e82:	e002      	b.n	8003e8a <get_fat+0xc0>
 8003e84:	68bb      	ldr	r3, [r7, #8]
 8003e86:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003e8a:	617b      	str	r3, [r7, #20]
			break;
 8003e8c:	e03f      	b.n	8003f0e <get_fat+0x144>

		case FS_FAT16 :
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 8003e8e:	693b      	ldr	r3, [r7, #16]
 8003e90:	6a1a      	ldr	r2, [r3, #32]
 8003e92:	683b      	ldr	r3, [r7, #0]
 8003e94:	0a1b      	lsrs	r3, r3, #8
 8003e96:	4413      	add	r3, r2
 8003e98:	4619      	mov	r1, r3
 8003e9a:	6938      	ldr	r0, [r7, #16]
 8003e9c:	f7ff feda 	bl	8003c54 <move_window>
 8003ea0:	4603      	mov	r3, r0
 8003ea2:	2b00      	cmp	r3, #0
 8003ea4:	d130      	bne.n	8003f08 <get_fat+0x13e>
			val = ld_word(fs->win + clst * 2 % SS(fs));
 8003ea6:	693b      	ldr	r3, [r7, #16]
 8003ea8:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 8003eac:	683b      	ldr	r3, [r7, #0]
 8003eae:	005b      	lsls	r3, r3, #1
 8003eb0:	f403 73ff 	and.w	r3, r3, #510	@ 0x1fe
 8003eb4:	4413      	add	r3, r2
 8003eb6:	4618      	mov	r0, r3
 8003eb8:	f7ff fc1c 	bl	80036f4 <ld_word>
 8003ebc:	4603      	mov	r3, r0
 8003ebe:	617b      	str	r3, [r7, #20]
			break;
 8003ec0:	e025      	b.n	8003f0e <get_fat+0x144>

		case FS_FAT32 :
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 8003ec2:	693b      	ldr	r3, [r7, #16]
 8003ec4:	6a1a      	ldr	r2, [r3, #32]
 8003ec6:	683b      	ldr	r3, [r7, #0]
 8003ec8:	09db      	lsrs	r3, r3, #7
 8003eca:	4413      	add	r3, r2
 8003ecc:	4619      	mov	r1, r3
 8003ece:	6938      	ldr	r0, [r7, #16]
 8003ed0:	f7ff fec0 	bl	8003c54 <move_window>
 8003ed4:	4603      	mov	r3, r0
 8003ed6:	2b00      	cmp	r3, #0
 8003ed8:	d118      	bne.n	8003f0c <get_fat+0x142>
			val = ld_dword(fs->win + clst * 4 % SS(fs)) & 0x0FFFFFFF;
 8003eda:	693b      	ldr	r3, [r7, #16]
 8003edc:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 8003ee0:	683b      	ldr	r3, [r7, #0]
 8003ee2:	009b      	lsls	r3, r3, #2
 8003ee4:	f403 73fe 	and.w	r3, r3, #508	@ 0x1fc
 8003ee8:	4413      	add	r3, r2
 8003eea:	4618      	mov	r0, r3
 8003eec:	f7ff fc1a 	bl	8003724 <ld_dword>
 8003ef0:	4603      	mov	r3, r0
 8003ef2:	f023 4370 	bic.w	r3, r3, #4026531840	@ 0xf0000000
 8003ef6:	617b      	str	r3, [r7, #20]
			break;
 8003ef8:	e009      	b.n	8003f0e <get_fat+0x144>
				}
			}
			/* go to default */
#endif
		default:
			val = 1;	/* Internal error */
 8003efa:	2301      	movs	r3, #1
 8003efc:	617b      	str	r3, [r7, #20]
 8003efe:	e006      	b.n	8003f0e <get_fat+0x144>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 8003f00:	bf00      	nop
 8003f02:	e004      	b.n	8003f0e <get_fat+0x144>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 8003f04:	bf00      	nop
 8003f06:	e002      	b.n	8003f0e <get_fat+0x144>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 8003f08:	bf00      	nop
 8003f0a:	e000      	b.n	8003f0e <get_fat+0x144>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 8003f0c:	bf00      	nop
		}
	}

	return val;
 8003f0e:	697b      	ldr	r3, [r7, #20]
}
 8003f10:	4618      	mov	r0, r3
 8003f12:	3718      	adds	r7, #24
 8003f14:	46bd      	mov	sp, r7
 8003f16:	bd80      	pop	{r7, pc}

08003f18 <put_fat>:
FRESULT put_fat (	/* FR_OK(0):succeeded, !=0:error */
	FATFS* fs,		/* Corresponding file system object */
	DWORD clst,		/* FAT index number (cluster number) to be changed */
	DWORD val		/* New value to be set to the entry */
)
{
 8003f18:	b590      	push	{r4, r7, lr}
 8003f1a:	b089      	sub	sp, #36	@ 0x24
 8003f1c:	af00      	add	r7, sp, #0
 8003f1e:	60f8      	str	r0, [r7, #12]
 8003f20:	60b9      	str	r1, [r7, #8]
 8003f22:	607a      	str	r2, [r7, #4]
	UINT bc;
	BYTE *p;
	FRESULT res = FR_INT_ERR;
 8003f24:	2302      	movs	r3, #2
 8003f26:	77fb      	strb	r3, [r7, #31]

	if (clst >= 2 && clst < fs->n_fatent) {	/* Check if in valid range */
 8003f28:	68bb      	ldr	r3, [r7, #8]
 8003f2a:	2b01      	cmp	r3, #1
 8003f2c:	f240 80d9 	bls.w	80040e2 <put_fat+0x1ca>
 8003f30:	68fb      	ldr	r3, [r7, #12]
 8003f32:	695b      	ldr	r3, [r3, #20]
 8003f34:	68ba      	ldr	r2, [r7, #8]
 8003f36:	429a      	cmp	r2, r3
 8003f38:	f080 80d3 	bcs.w	80040e2 <put_fat+0x1ca>
		switch (fs->fs_type) {
 8003f3c:	68fb      	ldr	r3, [r7, #12]
 8003f3e:	781b      	ldrb	r3, [r3, #0]
 8003f40:	2b03      	cmp	r3, #3
 8003f42:	f000 8096 	beq.w	8004072 <put_fat+0x15a>
 8003f46:	2b03      	cmp	r3, #3
 8003f48:	f300 80cb 	bgt.w	80040e2 <put_fat+0x1ca>
 8003f4c:	2b01      	cmp	r3, #1
 8003f4e:	d002      	beq.n	8003f56 <put_fat+0x3e>
 8003f50:	2b02      	cmp	r3, #2
 8003f52:	d06e      	beq.n	8004032 <put_fat+0x11a>
 8003f54:	e0c5      	b.n	80040e2 <put_fat+0x1ca>
		case FS_FAT12 :	/* Bitfield items */
			bc = (UINT)clst; bc += bc / 2;
 8003f56:	68bb      	ldr	r3, [r7, #8]
 8003f58:	61bb      	str	r3, [r7, #24]
 8003f5a:	69bb      	ldr	r3, [r7, #24]
 8003f5c:	085b      	lsrs	r3, r3, #1
 8003f5e:	69ba      	ldr	r2, [r7, #24]
 8003f60:	4413      	add	r3, r2
 8003f62:	61bb      	str	r3, [r7, #24]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 8003f64:	68fb      	ldr	r3, [r7, #12]
 8003f66:	6a1a      	ldr	r2, [r3, #32]
 8003f68:	69bb      	ldr	r3, [r7, #24]
 8003f6a:	0a5b      	lsrs	r3, r3, #9
 8003f6c:	4413      	add	r3, r2
 8003f6e:	4619      	mov	r1, r3
 8003f70:	68f8      	ldr	r0, [r7, #12]
 8003f72:	f7ff fe6f 	bl	8003c54 <move_window>
 8003f76:	4603      	mov	r3, r0
 8003f78:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 8003f7a:	7ffb      	ldrb	r3, [r7, #31]
 8003f7c:	2b00      	cmp	r3, #0
 8003f7e:	f040 80a9 	bne.w	80040d4 <put_fat+0x1bc>
			p = fs->win + bc++ % SS(fs);
 8003f82:	68fb      	ldr	r3, [r7, #12]
 8003f84:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 8003f88:	69bb      	ldr	r3, [r7, #24]
 8003f8a:	1c59      	adds	r1, r3, #1
 8003f8c:	61b9      	str	r1, [r7, #24]
 8003f8e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003f92:	4413      	add	r3, r2
 8003f94:	617b      	str	r3, [r7, #20]
			*p = (clst & 1) ? ((*p & 0x0F) | ((BYTE)val << 4)) : (BYTE)val;
 8003f96:	68bb      	ldr	r3, [r7, #8]
 8003f98:	f003 0301 	and.w	r3, r3, #1
 8003f9c:	2b00      	cmp	r3, #0
 8003f9e:	d00d      	beq.n	8003fbc <put_fat+0xa4>
 8003fa0:	697b      	ldr	r3, [r7, #20]
 8003fa2:	781b      	ldrb	r3, [r3, #0]
 8003fa4:	b25b      	sxtb	r3, r3
 8003fa6:	f003 030f 	and.w	r3, r3, #15
 8003faa:	b25a      	sxtb	r2, r3
 8003fac:	687b      	ldr	r3, [r7, #4]
 8003fae:	b2db      	uxtb	r3, r3
 8003fb0:	011b      	lsls	r3, r3, #4
 8003fb2:	b25b      	sxtb	r3, r3
 8003fb4:	4313      	orrs	r3, r2
 8003fb6:	b25b      	sxtb	r3, r3
 8003fb8:	b2db      	uxtb	r3, r3
 8003fba:	e001      	b.n	8003fc0 <put_fat+0xa8>
 8003fbc:	687b      	ldr	r3, [r7, #4]
 8003fbe:	b2db      	uxtb	r3, r3
 8003fc0:	697a      	ldr	r2, [r7, #20]
 8003fc2:	7013      	strb	r3, [r2, #0]
			fs->wflag = 1;
 8003fc4:	68fb      	ldr	r3, [r7, #12]
 8003fc6:	2201      	movs	r2, #1
 8003fc8:	70da      	strb	r2, [r3, #3]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 8003fca:	68fb      	ldr	r3, [r7, #12]
 8003fcc:	6a1a      	ldr	r2, [r3, #32]
 8003fce:	69bb      	ldr	r3, [r7, #24]
 8003fd0:	0a5b      	lsrs	r3, r3, #9
 8003fd2:	4413      	add	r3, r2
 8003fd4:	4619      	mov	r1, r3
 8003fd6:	68f8      	ldr	r0, [r7, #12]
 8003fd8:	f7ff fe3c 	bl	8003c54 <move_window>
 8003fdc:	4603      	mov	r3, r0
 8003fde:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 8003fe0:	7ffb      	ldrb	r3, [r7, #31]
 8003fe2:	2b00      	cmp	r3, #0
 8003fe4:	d178      	bne.n	80040d8 <put_fat+0x1c0>
			p = fs->win + bc % SS(fs);
 8003fe6:	68fb      	ldr	r3, [r7, #12]
 8003fe8:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 8003fec:	69bb      	ldr	r3, [r7, #24]
 8003fee:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003ff2:	4413      	add	r3, r2
 8003ff4:	617b      	str	r3, [r7, #20]
			*p = (clst & 1) ? (BYTE)(val >> 4) : ((*p & 0xF0) | ((BYTE)(val >> 8) & 0x0F));
 8003ff6:	68bb      	ldr	r3, [r7, #8]
 8003ff8:	f003 0301 	and.w	r3, r3, #1
 8003ffc:	2b00      	cmp	r3, #0
 8003ffe:	d003      	beq.n	8004008 <put_fat+0xf0>
 8004000:	687b      	ldr	r3, [r7, #4]
 8004002:	091b      	lsrs	r3, r3, #4
 8004004:	b2db      	uxtb	r3, r3
 8004006:	e00e      	b.n	8004026 <put_fat+0x10e>
 8004008:	697b      	ldr	r3, [r7, #20]
 800400a:	781b      	ldrb	r3, [r3, #0]
 800400c:	b25b      	sxtb	r3, r3
 800400e:	f023 030f 	bic.w	r3, r3, #15
 8004012:	b25a      	sxtb	r2, r3
 8004014:	687b      	ldr	r3, [r7, #4]
 8004016:	0a1b      	lsrs	r3, r3, #8
 8004018:	b25b      	sxtb	r3, r3
 800401a:	f003 030f 	and.w	r3, r3, #15
 800401e:	b25b      	sxtb	r3, r3
 8004020:	4313      	orrs	r3, r2
 8004022:	b25b      	sxtb	r3, r3
 8004024:	b2db      	uxtb	r3, r3
 8004026:	697a      	ldr	r2, [r7, #20]
 8004028:	7013      	strb	r3, [r2, #0]
			fs->wflag = 1;
 800402a:	68fb      	ldr	r3, [r7, #12]
 800402c:	2201      	movs	r2, #1
 800402e:	70da      	strb	r2, [r3, #3]
			break;
 8004030:	e057      	b.n	80040e2 <put_fat+0x1ca>

		case FS_FAT16 :	/* WORD aligned items */
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 2)));
 8004032:	68fb      	ldr	r3, [r7, #12]
 8004034:	6a1a      	ldr	r2, [r3, #32]
 8004036:	68bb      	ldr	r3, [r7, #8]
 8004038:	0a1b      	lsrs	r3, r3, #8
 800403a:	4413      	add	r3, r2
 800403c:	4619      	mov	r1, r3
 800403e:	68f8      	ldr	r0, [r7, #12]
 8004040:	f7ff fe08 	bl	8003c54 <move_window>
 8004044:	4603      	mov	r3, r0
 8004046:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 8004048:	7ffb      	ldrb	r3, [r7, #31]
 800404a:	2b00      	cmp	r3, #0
 800404c:	d146      	bne.n	80040dc <put_fat+0x1c4>
			st_word(fs->win + clst * 2 % SS(fs), (WORD)val);
 800404e:	68fb      	ldr	r3, [r7, #12]
 8004050:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 8004054:	68bb      	ldr	r3, [r7, #8]
 8004056:	005b      	lsls	r3, r3, #1
 8004058:	f403 73ff 	and.w	r3, r3, #510	@ 0x1fe
 800405c:	4413      	add	r3, r2
 800405e:	687a      	ldr	r2, [r7, #4]
 8004060:	b292      	uxth	r2, r2
 8004062:	4611      	mov	r1, r2
 8004064:	4618      	mov	r0, r3
 8004066:	f7ff fb80 	bl	800376a <st_word>
			fs->wflag = 1;
 800406a:	68fb      	ldr	r3, [r7, #12]
 800406c:	2201      	movs	r2, #1
 800406e:	70da      	strb	r2, [r3, #3]
			break;
 8004070:	e037      	b.n	80040e2 <put_fat+0x1ca>

		case FS_FAT32 :	/* DWORD aligned items */
#if _FS_EXFAT
		case FS_EXFAT :
#endif
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 4)));
 8004072:	68fb      	ldr	r3, [r7, #12]
 8004074:	6a1a      	ldr	r2, [r3, #32]
 8004076:	68bb      	ldr	r3, [r7, #8]
 8004078:	09db      	lsrs	r3, r3, #7
 800407a:	4413      	add	r3, r2
 800407c:	4619      	mov	r1, r3
 800407e:	68f8      	ldr	r0, [r7, #12]
 8004080:	f7ff fde8 	bl	8003c54 <move_window>
 8004084:	4603      	mov	r3, r0
 8004086:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 8004088:	7ffb      	ldrb	r3, [r7, #31]
 800408a:	2b00      	cmp	r3, #0
 800408c:	d128      	bne.n	80040e0 <put_fat+0x1c8>
			if (!_FS_EXFAT || fs->fs_type != FS_EXFAT) {
				val = (val & 0x0FFFFFFF) | (ld_dword(fs->win + clst * 4 % SS(fs)) & 0xF0000000);
 800408e:	687b      	ldr	r3, [r7, #4]
 8004090:	f023 4470 	bic.w	r4, r3, #4026531840	@ 0xf0000000
 8004094:	68fb      	ldr	r3, [r7, #12]
 8004096:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 800409a:	68bb      	ldr	r3, [r7, #8]
 800409c:	009b      	lsls	r3, r3, #2
 800409e:	f403 73fe 	and.w	r3, r3, #508	@ 0x1fc
 80040a2:	4413      	add	r3, r2
 80040a4:	4618      	mov	r0, r3
 80040a6:	f7ff fb3d 	bl	8003724 <ld_dword>
 80040aa:	4603      	mov	r3, r0
 80040ac:	f003 4370 	and.w	r3, r3, #4026531840	@ 0xf0000000
 80040b0:	4323      	orrs	r3, r4
 80040b2:	607b      	str	r3, [r7, #4]
			}
			st_dword(fs->win + clst * 4 % SS(fs), val);
 80040b4:	68fb      	ldr	r3, [r7, #12]
 80040b6:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 80040ba:	68bb      	ldr	r3, [r7, #8]
 80040bc:	009b      	lsls	r3, r3, #2
 80040be:	f403 73fe 	and.w	r3, r3, #508	@ 0x1fc
 80040c2:	4413      	add	r3, r2
 80040c4:	6879      	ldr	r1, [r7, #4]
 80040c6:	4618      	mov	r0, r3
 80040c8:	f7ff fb6a 	bl	80037a0 <st_dword>
			fs->wflag = 1;
 80040cc:	68fb      	ldr	r3, [r7, #12]
 80040ce:	2201      	movs	r2, #1
 80040d0:	70da      	strb	r2, [r3, #3]
			break;
 80040d2:	e006      	b.n	80040e2 <put_fat+0x1ca>
			if (res != FR_OK) break;
 80040d4:	bf00      	nop
 80040d6:	e004      	b.n	80040e2 <put_fat+0x1ca>
			if (res != FR_OK) break;
 80040d8:	bf00      	nop
 80040da:	e002      	b.n	80040e2 <put_fat+0x1ca>
			if (res != FR_OK) break;
 80040dc:	bf00      	nop
 80040de:	e000      	b.n	80040e2 <put_fat+0x1ca>
			if (res != FR_OK) break;
 80040e0:	bf00      	nop
		}
	}
	return res;
 80040e2:	7ffb      	ldrb	r3, [r7, #31]
}
 80040e4:	4618      	mov	r0, r3
 80040e6:	3724      	adds	r7, #36	@ 0x24
 80040e8:	46bd      	mov	sp, r7
 80040ea:	bd90      	pop	{r4, r7, pc}

080040ec <remove_chain>:
FRESULT remove_chain (	/* FR_OK(0):succeeded, !=0:error */
	_FDID* obj,			/* Corresponding object */
	DWORD clst,			/* Cluster to remove a chain from */
	DWORD pclst			/* Previous cluster of clst (0:an entire chain) */
)
{
 80040ec:	b580      	push	{r7, lr}
 80040ee:	b088      	sub	sp, #32
 80040f0:	af00      	add	r7, sp, #0
 80040f2:	60f8      	str	r0, [r7, #12]
 80040f4:	60b9      	str	r1, [r7, #8]
 80040f6:	607a      	str	r2, [r7, #4]
	FRESULT res = FR_OK;
 80040f8:	2300      	movs	r3, #0
 80040fa:	77fb      	strb	r3, [r7, #31]
	DWORD nxt;
	FATFS *fs = obj->fs;
 80040fc:	68fb      	ldr	r3, [r7, #12]
 80040fe:	681b      	ldr	r3, [r3, #0]
 8004100:	61bb      	str	r3, [r7, #24]
#endif
#if _USE_TRIM
	DWORD rt[2];
#endif

	if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Check if in valid range */
 8004102:	68bb      	ldr	r3, [r7, #8]
 8004104:	2b01      	cmp	r3, #1
 8004106:	d904      	bls.n	8004112 <remove_chain+0x26>
 8004108:	69bb      	ldr	r3, [r7, #24]
 800410a:	695b      	ldr	r3, [r3, #20]
 800410c:	68ba      	ldr	r2, [r7, #8]
 800410e:	429a      	cmp	r2, r3
 8004110:	d301      	bcc.n	8004116 <remove_chain+0x2a>
 8004112:	2302      	movs	r3, #2
 8004114:	e04b      	b.n	80041ae <remove_chain+0xc2>

	/* Mark the previous cluster 'EOC' on the FAT if it exists */
	if (pclst && (!_FS_EXFAT || fs->fs_type != FS_EXFAT || obj->stat != 2)) {
 8004116:	687b      	ldr	r3, [r7, #4]
 8004118:	2b00      	cmp	r3, #0
 800411a:	d00c      	beq.n	8004136 <remove_chain+0x4a>
		res = put_fat(fs, pclst, 0xFFFFFFFF);
 800411c:	f04f 32ff 	mov.w	r2, #4294967295
 8004120:	6879      	ldr	r1, [r7, #4]
 8004122:	69b8      	ldr	r0, [r7, #24]
 8004124:	f7ff fef8 	bl	8003f18 <put_fat>
 8004128:	4603      	mov	r3, r0
 800412a:	77fb      	strb	r3, [r7, #31]
		if (res != FR_OK) return res;
 800412c:	7ffb      	ldrb	r3, [r7, #31]
 800412e:	2b00      	cmp	r3, #0
 8004130:	d001      	beq.n	8004136 <remove_chain+0x4a>
 8004132:	7ffb      	ldrb	r3, [r7, #31]
 8004134:	e03b      	b.n	80041ae <remove_chain+0xc2>
	}

	/* Remove the chain */
	do {
		nxt = get_fat(obj, clst);			/* Get cluster status */
 8004136:	68b9      	ldr	r1, [r7, #8]
 8004138:	68f8      	ldr	r0, [r7, #12]
 800413a:	f7ff fe46 	bl	8003dca <get_fat>
 800413e:	6178      	str	r0, [r7, #20]
		if (nxt == 0) break;				/* Empty cluster? */
 8004140:	697b      	ldr	r3, [r7, #20]
 8004142:	2b00      	cmp	r3, #0
 8004144:	d031      	beq.n	80041aa <remove_chain+0xbe>
		if (nxt == 1) return FR_INT_ERR;	/* Internal error? */
 8004146:	697b      	ldr	r3, [r7, #20]
 8004148:	2b01      	cmp	r3, #1
 800414a:	d101      	bne.n	8004150 <remove_chain+0x64>
 800414c:	2302      	movs	r3, #2
 800414e:	e02e      	b.n	80041ae <remove_chain+0xc2>
		if (nxt == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error? */
 8004150:	697b      	ldr	r3, [r7, #20]
 8004152:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004156:	d101      	bne.n	800415c <remove_chain+0x70>
 8004158:	2301      	movs	r3, #1
 800415a:	e028      	b.n	80041ae <remove_chain+0xc2>
		if (!_FS_EXFAT || fs->fs_type != FS_EXFAT) {
			res = put_fat(fs, clst, 0);		/* Mark the cluster 'free' on the FAT */
 800415c:	2200      	movs	r2, #0
 800415e:	68b9      	ldr	r1, [r7, #8]
 8004160:	69b8      	ldr	r0, [r7, #24]
 8004162:	f7ff fed9 	bl	8003f18 <put_fat>
 8004166:	4603      	mov	r3, r0
 8004168:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) return res;
 800416a:	7ffb      	ldrb	r3, [r7, #31]
 800416c:	2b00      	cmp	r3, #0
 800416e:	d001      	beq.n	8004174 <remove_chain+0x88>
 8004170:	7ffb      	ldrb	r3, [r7, #31]
 8004172:	e01c      	b.n	80041ae <remove_chain+0xc2>
		}
		if (fs->free_clst < fs->n_fatent - 2) {	/* Update FSINFO */
 8004174:	69bb      	ldr	r3, [r7, #24]
 8004176:	691a      	ldr	r2, [r3, #16]
 8004178:	69bb      	ldr	r3, [r7, #24]
 800417a:	695b      	ldr	r3, [r3, #20]
 800417c:	3b02      	subs	r3, #2
 800417e:	429a      	cmp	r2, r3
 8004180:	d20b      	bcs.n	800419a <remove_chain+0xae>
			fs->free_clst++;
 8004182:	69bb      	ldr	r3, [r7, #24]
 8004184:	691b      	ldr	r3, [r3, #16]
 8004186:	1c5a      	adds	r2, r3, #1
 8004188:	69bb      	ldr	r3, [r7, #24]
 800418a:	611a      	str	r2, [r3, #16]
			fs->fsi_flag |= 1;
 800418c:	69bb      	ldr	r3, [r7, #24]
 800418e:	791b      	ldrb	r3, [r3, #4]
 8004190:	f043 0301 	orr.w	r3, r3, #1
 8004194:	b2da      	uxtb	r2, r3
 8004196:	69bb      	ldr	r3, [r7, #24]
 8004198:	711a      	strb	r2, [r3, #4]
			disk_ioctl(fs->drv, CTRL_TRIM, rt);				/* Inform device the block can be erased */
#endif
			scl = ecl = nxt;
		}
#endif
		clst = nxt;					/* Next cluster */
 800419a:	697b      	ldr	r3, [r7, #20]
 800419c:	60bb      	str	r3, [r7, #8]
	} while (clst < fs->n_fatent);	/* Repeat while not the last link */
 800419e:	69bb      	ldr	r3, [r7, #24]
 80041a0:	695b      	ldr	r3, [r3, #20]
 80041a2:	68ba      	ldr	r2, [r7, #8]
 80041a4:	429a      	cmp	r2, r3
 80041a6:	d3c6      	bcc.n	8004136 <remove_chain+0x4a>
 80041a8:	e000      	b.n	80041ac <remove_chain+0xc0>
		if (nxt == 0) break;				/* Empty cluster? */
 80041aa:	bf00      	nop
				obj->stat = 2;	/* Change the object status 'contiguous' */
			}
		}
	}
#endif
	return FR_OK;
 80041ac:	2300      	movs	r3, #0
}
 80041ae:	4618      	mov	r0, r3
 80041b0:	3720      	adds	r7, #32
 80041b2:	46bd      	mov	sp, r7
 80041b4:	bd80      	pop	{r7, pc}

080041b6 <create_chain>:
static
DWORD create_chain (	/* 0:No free cluster, 1:Internal error, 0xFFFFFFFF:Disk error, >=2:New cluster# */
	_FDID* obj,			/* Corresponding object */
	DWORD clst			/* Cluster# to stretch, 0:Create a new chain */
)
{
 80041b6:	b580      	push	{r7, lr}
 80041b8:	b088      	sub	sp, #32
 80041ba:	af00      	add	r7, sp, #0
 80041bc:	6078      	str	r0, [r7, #4]
 80041be:	6039      	str	r1, [r7, #0]
	DWORD cs, ncl, scl;
	FRESULT res;
	FATFS *fs = obj->fs;
 80041c0:	687b      	ldr	r3, [r7, #4]
 80041c2:	681b      	ldr	r3, [r3, #0]
 80041c4:	613b      	str	r3, [r7, #16]


	if (clst == 0) {	/* Create a new chain */
 80041c6:	683b      	ldr	r3, [r7, #0]
 80041c8:	2b00      	cmp	r3, #0
 80041ca:	d10d      	bne.n	80041e8 <create_chain+0x32>
		scl = fs->last_clst;				/* Get suggested cluster to start from */
 80041cc:	693b      	ldr	r3, [r7, #16]
 80041ce:	68db      	ldr	r3, [r3, #12]
 80041d0:	61bb      	str	r3, [r7, #24]
		if (scl == 0 || scl >= fs->n_fatent) scl = 1;
 80041d2:	69bb      	ldr	r3, [r7, #24]
 80041d4:	2b00      	cmp	r3, #0
 80041d6:	d004      	beq.n	80041e2 <create_chain+0x2c>
 80041d8:	693b      	ldr	r3, [r7, #16]
 80041da:	695b      	ldr	r3, [r3, #20]
 80041dc:	69ba      	ldr	r2, [r7, #24]
 80041de:	429a      	cmp	r2, r3
 80041e0:	d31b      	bcc.n	800421a <create_chain+0x64>
 80041e2:	2301      	movs	r3, #1
 80041e4:	61bb      	str	r3, [r7, #24]
 80041e6:	e018      	b.n	800421a <create_chain+0x64>
	}
	else {				/* Stretch current chain */
		cs = get_fat(obj, clst);			/* Check the cluster status */
 80041e8:	6839      	ldr	r1, [r7, #0]
 80041ea:	6878      	ldr	r0, [r7, #4]
 80041ec:	f7ff fded 	bl	8003dca <get_fat>
 80041f0:	60f8      	str	r0, [r7, #12]
		if (cs < 2) return 1;				/* Invalid FAT value */
 80041f2:	68fb      	ldr	r3, [r7, #12]
 80041f4:	2b01      	cmp	r3, #1
 80041f6:	d801      	bhi.n	80041fc <create_chain+0x46>
 80041f8:	2301      	movs	r3, #1
 80041fa:	e070      	b.n	80042de <create_chain+0x128>
		if (cs == 0xFFFFFFFF) return cs;	/* A disk error occurred */
 80041fc:	68fb      	ldr	r3, [r7, #12]
 80041fe:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004202:	d101      	bne.n	8004208 <create_chain+0x52>
 8004204:	68fb      	ldr	r3, [r7, #12]
 8004206:	e06a      	b.n	80042de <create_chain+0x128>
		if (cs < fs->n_fatent) return cs;	/* It is already followed by next cluster */
 8004208:	693b      	ldr	r3, [r7, #16]
 800420a:	695b      	ldr	r3, [r3, #20]
 800420c:	68fa      	ldr	r2, [r7, #12]
 800420e:	429a      	cmp	r2, r3
 8004210:	d201      	bcs.n	8004216 <create_chain+0x60>
 8004212:	68fb      	ldr	r3, [r7, #12]
 8004214:	e063      	b.n	80042de <create_chain+0x128>
		scl = clst;
 8004216:	683b      	ldr	r3, [r7, #0]
 8004218:	61bb      	str	r3, [r7, #24]
			}
		}
	} else
#endif
	{	/* On the FAT12/16/32 volume */
		ncl = scl;	/* Start cluster */
 800421a:	69bb      	ldr	r3, [r7, #24]
 800421c:	61fb      	str	r3, [r7, #28]
		for (;;) {
			ncl++;							/* Next cluster */
 800421e:	69fb      	ldr	r3, [r7, #28]
 8004220:	3301      	adds	r3, #1
 8004222:	61fb      	str	r3, [r7, #28]
			if (ncl >= fs->n_fatent) {		/* Check wrap-around */
 8004224:	693b      	ldr	r3, [r7, #16]
 8004226:	695b      	ldr	r3, [r3, #20]
 8004228:	69fa      	ldr	r2, [r7, #28]
 800422a:	429a      	cmp	r2, r3
 800422c:	d307      	bcc.n	800423e <create_chain+0x88>
				ncl = 2;
 800422e:	2302      	movs	r3, #2
 8004230:	61fb      	str	r3, [r7, #28]
				if (ncl > scl) return 0;	/* No free cluster */
 8004232:	69fa      	ldr	r2, [r7, #28]
 8004234:	69bb      	ldr	r3, [r7, #24]
 8004236:	429a      	cmp	r2, r3
 8004238:	d901      	bls.n	800423e <create_chain+0x88>
 800423a:	2300      	movs	r3, #0
 800423c:	e04f      	b.n	80042de <create_chain+0x128>
			}
			cs = get_fat(obj, ncl);			/* Get the cluster status */
 800423e:	69f9      	ldr	r1, [r7, #28]
 8004240:	6878      	ldr	r0, [r7, #4]
 8004242:	f7ff fdc2 	bl	8003dca <get_fat>
 8004246:	60f8      	str	r0, [r7, #12]
			if (cs == 0) break;				/* Found a free cluster */
 8004248:	68fb      	ldr	r3, [r7, #12]
 800424a:	2b00      	cmp	r3, #0
 800424c:	d00e      	beq.n	800426c <create_chain+0xb6>
			if (cs == 1 || cs == 0xFFFFFFFF) return cs;	/* An error occurred */
 800424e:	68fb      	ldr	r3, [r7, #12]
 8004250:	2b01      	cmp	r3, #1
 8004252:	d003      	beq.n	800425c <create_chain+0xa6>
 8004254:	68fb      	ldr	r3, [r7, #12]
 8004256:	f1b3 3fff 	cmp.w	r3, #4294967295
 800425a:	d101      	bne.n	8004260 <create_chain+0xaa>
 800425c:	68fb      	ldr	r3, [r7, #12]
 800425e:	e03e      	b.n	80042de <create_chain+0x128>
			if (ncl == scl) return 0;		/* No free cluster */
 8004260:	69fa      	ldr	r2, [r7, #28]
 8004262:	69bb      	ldr	r3, [r7, #24]
 8004264:	429a      	cmp	r2, r3
 8004266:	d1da      	bne.n	800421e <create_chain+0x68>
 8004268:	2300      	movs	r3, #0
 800426a:	e038      	b.n	80042de <create_chain+0x128>
			if (cs == 0) break;				/* Found a free cluster */
 800426c:	bf00      	nop
		}
		res = put_fat(fs, ncl, 0xFFFFFFFF);	/* Mark the new cluster 'EOC' */
 800426e:	f04f 32ff 	mov.w	r2, #4294967295
 8004272:	69f9      	ldr	r1, [r7, #28]
 8004274:	6938      	ldr	r0, [r7, #16]
 8004276:	f7ff fe4f 	bl	8003f18 <put_fat>
 800427a:	4603      	mov	r3, r0
 800427c:	75fb      	strb	r3, [r7, #23]
		if (res == FR_OK && clst != 0) {
 800427e:	7dfb      	ldrb	r3, [r7, #23]
 8004280:	2b00      	cmp	r3, #0
 8004282:	d109      	bne.n	8004298 <create_chain+0xe2>
 8004284:	683b      	ldr	r3, [r7, #0]
 8004286:	2b00      	cmp	r3, #0
 8004288:	d006      	beq.n	8004298 <create_chain+0xe2>
			res = put_fat(fs, clst, ncl);	/* Link it from the previous one if needed */
 800428a:	69fa      	ldr	r2, [r7, #28]
 800428c:	6839      	ldr	r1, [r7, #0]
 800428e:	6938      	ldr	r0, [r7, #16]
 8004290:	f7ff fe42 	bl	8003f18 <put_fat>
 8004294:	4603      	mov	r3, r0
 8004296:	75fb      	strb	r3, [r7, #23]
		}
	}

	if (res == FR_OK) {			/* Update FSINFO if function succeeded. */
 8004298:	7dfb      	ldrb	r3, [r7, #23]
 800429a:	2b00      	cmp	r3, #0
 800429c:	d116      	bne.n	80042cc <create_chain+0x116>
		fs->last_clst = ncl;
 800429e:	693b      	ldr	r3, [r7, #16]
 80042a0:	69fa      	ldr	r2, [r7, #28]
 80042a2:	60da      	str	r2, [r3, #12]
		if (fs->free_clst <= fs->n_fatent - 2) fs->free_clst--;
 80042a4:	693b      	ldr	r3, [r7, #16]
 80042a6:	691a      	ldr	r2, [r3, #16]
 80042a8:	693b      	ldr	r3, [r7, #16]
 80042aa:	695b      	ldr	r3, [r3, #20]
 80042ac:	3b02      	subs	r3, #2
 80042ae:	429a      	cmp	r2, r3
 80042b0:	d804      	bhi.n	80042bc <create_chain+0x106>
 80042b2:	693b      	ldr	r3, [r7, #16]
 80042b4:	691b      	ldr	r3, [r3, #16]
 80042b6:	1e5a      	subs	r2, r3, #1
 80042b8:	693b      	ldr	r3, [r7, #16]
 80042ba:	611a      	str	r2, [r3, #16]
		fs->fsi_flag |= 1;
 80042bc:	693b      	ldr	r3, [r7, #16]
 80042be:	791b      	ldrb	r3, [r3, #4]
 80042c0:	f043 0301 	orr.w	r3, r3, #1
 80042c4:	b2da      	uxtb	r2, r3
 80042c6:	693b      	ldr	r3, [r7, #16]
 80042c8:	711a      	strb	r2, [r3, #4]
 80042ca:	e007      	b.n	80042dc <create_chain+0x126>
	} else {
		ncl = (res == FR_DISK_ERR) ? 0xFFFFFFFF : 1;	/* Failed. Generate error status */
 80042cc:	7dfb      	ldrb	r3, [r7, #23]
 80042ce:	2b01      	cmp	r3, #1
 80042d0:	d102      	bne.n	80042d8 <create_chain+0x122>
 80042d2:	f04f 33ff 	mov.w	r3, #4294967295
 80042d6:	e000      	b.n	80042da <create_chain+0x124>
 80042d8:	2301      	movs	r3, #1
 80042da:	61fb      	str	r3, [r7, #28]
	}

	return ncl;		/* Return new cluster number or error status */
 80042dc:	69fb      	ldr	r3, [r7, #28]
}
 80042de:	4618      	mov	r0, r3
 80042e0:	3720      	adds	r7, #32
 80042e2:	46bd      	mov	sp, r7
 80042e4:	bd80      	pop	{r7, pc}

080042e6 <clmt_clust>:
static
DWORD clmt_clust (	/* <2:Error, >=2:Cluster number */
	FIL* fp,		/* Pointer to the file object */
	FSIZE_t ofs		/* File offset to be converted to cluster# */
)
{
 80042e6:	b480      	push	{r7}
 80042e8:	b087      	sub	sp, #28
 80042ea:	af00      	add	r7, sp, #0
 80042ec:	6078      	str	r0, [r7, #4]
 80042ee:	6039      	str	r1, [r7, #0]
	DWORD cl, ncl, *tbl;
	FATFS *fs = fp->obj.fs;
 80042f0:	687b      	ldr	r3, [r7, #4]
 80042f2:	681b      	ldr	r3, [r3, #0]
 80042f4:	60fb      	str	r3, [r7, #12]


	tbl = fp->cltbl + 1;	/* Top of CLMT */
 80042f6:	687b      	ldr	r3, [r7, #4]
 80042f8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80042fa:	3304      	adds	r3, #4
 80042fc:	613b      	str	r3, [r7, #16]
	cl = (DWORD)(ofs / SS(fs) / fs->csize);	/* Cluster order from top of the file */
 80042fe:	683b      	ldr	r3, [r7, #0]
 8004300:	0a5b      	lsrs	r3, r3, #9
 8004302:	68fa      	ldr	r2, [r7, #12]
 8004304:	8952      	ldrh	r2, [r2, #10]
 8004306:	fbb3 f3f2 	udiv	r3, r3, r2
 800430a:	617b      	str	r3, [r7, #20]
	for (;;) {
		ncl = *tbl++;			/* Number of cluters in the fragment */
 800430c:	693b      	ldr	r3, [r7, #16]
 800430e:	1d1a      	adds	r2, r3, #4
 8004310:	613a      	str	r2, [r7, #16]
 8004312:	681b      	ldr	r3, [r3, #0]
 8004314:	60bb      	str	r3, [r7, #8]
		if (ncl == 0) return 0;	/* End of table? (error) */
 8004316:	68bb      	ldr	r3, [r7, #8]
 8004318:	2b00      	cmp	r3, #0
 800431a:	d101      	bne.n	8004320 <clmt_clust+0x3a>
 800431c:	2300      	movs	r3, #0
 800431e:	e010      	b.n	8004342 <clmt_clust+0x5c>
		if (cl < ncl) break;	/* In this fragment? */
 8004320:	697a      	ldr	r2, [r7, #20]
 8004322:	68bb      	ldr	r3, [r7, #8]
 8004324:	429a      	cmp	r2, r3
 8004326:	d307      	bcc.n	8004338 <clmt_clust+0x52>
		cl -= ncl; tbl++;		/* Next fragment */
 8004328:	697a      	ldr	r2, [r7, #20]
 800432a:	68bb      	ldr	r3, [r7, #8]
 800432c:	1ad3      	subs	r3, r2, r3
 800432e:	617b      	str	r3, [r7, #20]
 8004330:	693b      	ldr	r3, [r7, #16]
 8004332:	3304      	adds	r3, #4
 8004334:	613b      	str	r3, [r7, #16]
		ncl = *tbl++;			/* Number of cluters in the fragment */
 8004336:	e7e9      	b.n	800430c <clmt_clust+0x26>
		if (cl < ncl) break;	/* In this fragment? */
 8004338:	bf00      	nop
	}
	return cl + *tbl;	/* Return the cluster number */
 800433a:	693b      	ldr	r3, [r7, #16]
 800433c:	681a      	ldr	r2, [r3, #0]
 800433e:	697b      	ldr	r3, [r7, #20]
 8004340:	4413      	add	r3, r2
}
 8004342:	4618      	mov	r0, r3
 8004344:	371c      	adds	r7, #28
 8004346:	46bd      	mov	sp, r7
 8004348:	f85d 7b04 	ldr.w	r7, [sp], #4
 800434c:	4770      	bx	lr

0800434e <dir_sdi>:
static
FRESULT dir_sdi (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp,		/* Pointer to directory object */
	DWORD ofs		/* Offset of directory table */
)
{
 800434e:	b580      	push	{r7, lr}
 8004350:	b086      	sub	sp, #24
 8004352:	af00      	add	r7, sp, #0
 8004354:	6078      	str	r0, [r7, #4]
 8004356:	6039      	str	r1, [r7, #0]
	DWORD csz, clst;
	FATFS *fs = dp->obj.fs;
 8004358:	687b      	ldr	r3, [r7, #4]
 800435a:	681b      	ldr	r3, [r3, #0]
 800435c:	613b      	str	r3, [r7, #16]


	if (ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR) || ofs % SZDIRE) {	/* Check range of offset and alignment */
 800435e:	683b      	ldr	r3, [r7, #0]
 8004360:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8004364:	d204      	bcs.n	8004370 <dir_sdi+0x22>
 8004366:	683b      	ldr	r3, [r7, #0]
 8004368:	f003 031f 	and.w	r3, r3, #31
 800436c:	2b00      	cmp	r3, #0
 800436e:	d001      	beq.n	8004374 <dir_sdi+0x26>
		return FR_INT_ERR;
 8004370:	2302      	movs	r3, #2
 8004372:	e063      	b.n	800443c <dir_sdi+0xee>
	}
	dp->dptr = ofs;				/* Set current offset */
 8004374:	687b      	ldr	r3, [r7, #4]
 8004376:	683a      	ldr	r2, [r7, #0]
 8004378:	615a      	str	r2, [r3, #20]
	clst = dp->obj.sclust;		/* Table start cluster (0:root) */
 800437a:	687b      	ldr	r3, [r7, #4]
 800437c:	689b      	ldr	r3, [r3, #8]
 800437e:	617b      	str	r3, [r7, #20]
	if (clst == 0 && fs->fs_type >= FS_FAT32) {	/* Replace cluster# 0 with root cluster# */
 8004380:	697b      	ldr	r3, [r7, #20]
 8004382:	2b00      	cmp	r3, #0
 8004384:	d106      	bne.n	8004394 <dir_sdi+0x46>
 8004386:	693b      	ldr	r3, [r7, #16]
 8004388:	781b      	ldrb	r3, [r3, #0]
 800438a:	2b02      	cmp	r3, #2
 800438c:	d902      	bls.n	8004394 <dir_sdi+0x46>
		clst = fs->dirbase;
 800438e:	693b      	ldr	r3, [r7, #16]
 8004390:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004392:	617b      	str	r3, [r7, #20]
		if (_FS_EXFAT) dp->obj.stat = 0;	/* exFAT: Root dir has an FAT chain */
	}

	if (clst == 0) {	/* Static table (root-directory in FAT12/16) */
 8004394:	697b      	ldr	r3, [r7, #20]
 8004396:	2b00      	cmp	r3, #0
 8004398:	d10c      	bne.n	80043b4 <dir_sdi+0x66>
		if (ofs / SZDIRE >= fs->n_rootdir)	return FR_INT_ERR;	/* Is index out of range? */
 800439a:	683b      	ldr	r3, [r7, #0]
 800439c:	095b      	lsrs	r3, r3, #5
 800439e:	693a      	ldr	r2, [r7, #16]
 80043a0:	8912      	ldrh	r2, [r2, #8]
 80043a2:	4293      	cmp	r3, r2
 80043a4:	d301      	bcc.n	80043aa <dir_sdi+0x5c>
 80043a6:	2302      	movs	r3, #2
 80043a8:	e048      	b.n	800443c <dir_sdi+0xee>
		dp->sect = fs->dirbase;
 80043aa:	693b      	ldr	r3, [r7, #16]
 80043ac:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 80043ae:	687b      	ldr	r3, [r7, #4]
 80043b0:	61da      	str	r2, [r3, #28]
 80043b2:	e029      	b.n	8004408 <dir_sdi+0xba>

	} else {			/* Dynamic table (sub-directory or root-directory in FAT32+) */
		csz = (DWORD)fs->csize * SS(fs);	/* Bytes per cluster */
 80043b4:	693b      	ldr	r3, [r7, #16]
 80043b6:	895b      	ldrh	r3, [r3, #10]
 80043b8:	025b      	lsls	r3, r3, #9
 80043ba:	60fb      	str	r3, [r7, #12]
		while (ofs >= csz) {				/* Follow cluster chain */
 80043bc:	e019      	b.n	80043f2 <dir_sdi+0xa4>
			clst = get_fat(&dp->obj, clst);				/* Get next cluster */
 80043be:	687b      	ldr	r3, [r7, #4]
 80043c0:	6979      	ldr	r1, [r7, #20]
 80043c2:	4618      	mov	r0, r3
 80043c4:	f7ff fd01 	bl	8003dca <get_fat>
 80043c8:	6178      	str	r0, [r7, #20]
			if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 80043ca:	697b      	ldr	r3, [r7, #20]
 80043cc:	f1b3 3fff 	cmp.w	r3, #4294967295
 80043d0:	d101      	bne.n	80043d6 <dir_sdi+0x88>
 80043d2:	2301      	movs	r3, #1
 80043d4:	e032      	b.n	800443c <dir_sdi+0xee>
			if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Reached to end of table or internal error */
 80043d6:	697b      	ldr	r3, [r7, #20]
 80043d8:	2b01      	cmp	r3, #1
 80043da:	d904      	bls.n	80043e6 <dir_sdi+0x98>
 80043dc:	693b      	ldr	r3, [r7, #16]
 80043de:	695b      	ldr	r3, [r3, #20]
 80043e0:	697a      	ldr	r2, [r7, #20]
 80043e2:	429a      	cmp	r2, r3
 80043e4:	d301      	bcc.n	80043ea <dir_sdi+0x9c>
 80043e6:	2302      	movs	r3, #2
 80043e8:	e028      	b.n	800443c <dir_sdi+0xee>
			ofs -= csz;
 80043ea:	683a      	ldr	r2, [r7, #0]
 80043ec:	68fb      	ldr	r3, [r7, #12]
 80043ee:	1ad3      	subs	r3, r2, r3
 80043f0:	603b      	str	r3, [r7, #0]
		while (ofs >= csz) {				/* Follow cluster chain */
 80043f2:	683a      	ldr	r2, [r7, #0]
 80043f4:	68fb      	ldr	r3, [r7, #12]
 80043f6:	429a      	cmp	r2, r3
 80043f8:	d2e1      	bcs.n	80043be <dir_sdi+0x70>
		}
		dp->sect = clust2sect(fs, clst);
 80043fa:	6979      	ldr	r1, [r7, #20]
 80043fc:	6938      	ldr	r0, [r7, #16]
 80043fe:	f7ff fcc5 	bl	8003d8c <clust2sect>
 8004402:	4602      	mov	r2, r0
 8004404:	687b      	ldr	r3, [r7, #4]
 8004406:	61da      	str	r2, [r3, #28]
	}
	dp->clust = clst;					/* Current cluster# */
 8004408:	687b      	ldr	r3, [r7, #4]
 800440a:	697a      	ldr	r2, [r7, #20]
 800440c:	619a      	str	r2, [r3, #24]
	if (!dp->sect) return FR_INT_ERR;
 800440e:	687b      	ldr	r3, [r7, #4]
 8004410:	69db      	ldr	r3, [r3, #28]
 8004412:	2b00      	cmp	r3, #0
 8004414:	d101      	bne.n	800441a <dir_sdi+0xcc>
 8004416:	2302      	movs	r3, #2
 8004418:	e010      	b.n	800443c <dir_sdi+0xee>
	dp->sect += ofs / SS(fs);			/* Sector# of the directory entry */
 800441a:	687b      	ldr	r3, [r7, #4]
 800441c:	69da      	ldr	r2, [r3, #28]
 800441e:	683b      	ldr	r3, [r7, #0]
 8004420:	0a5b      	lsrs	r3, r3, #9
 8004422:	441a      	add	r2, r3
 8004424:	687b      	ldr	r3, [r7, #4]
 8004426:	61da      	str	r2, [r3, #28]
	dp->dir = fs->win + (ofs % SS(fs));	/* Pointer to the entry in the win[] */
 8004428:	693b      	ldr	r3, [r7, #16]
 800442a:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 800442e:	683b      	ldr	r3, [r7, #0]
 8004430:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004434:	441a      	add	r2, r3
 8004436:	687b      	ldr	r3, [r7, #4]
 8004438:	621a      	str	r2, [r3, #32]

	return FR_OK;
 800443a:	2300      	movs	r3, #0
}
 800443c:	4618      	mov	r0, r3
 800443e:	3718      	adds	r7, #24
 8004440:	46bd      	mov	sp, r7
 8004442:	bd80      	pop	{r7, pc}

08004444 <dir_next>:
static
FRESULT dir_next (	/* FR_OK(0):succeeded, FR_NO_FILE:End of table, FR_DENIED:Could not stretch */
	DIR* dp,		/* Pointer to the directory object */
	int stretch		/* 0: Do not stretch table, 1: Stretch table if needed */
)
{
 8004444:	b580      	push	{r7, lr}
 8004446:	b086      	sub	sp, #24
 8004448:	af00      	add	r7, sp, #0
 800444a:	6078      	str	r0, [r7, #4]
 800444c:	6039      	str	r1, [r7, #0]
	DWORD ofs, clst;
	FATFS *fs = dp->obj.fs;
 800444e:	687b      	ldr	r3, [r7, #4]
 8004450:	681b      	ldr	r3, [r3, #0]
 8004452:	60fb      	str	r3, [r7, #12]
#if !_FS_READONLY
	UINT n;
#endif

	ofs = dp->dptr + SZDIRE;	/* Next entry */
 8004454:	687b      	ldr	r3, [r7, #4]
 8004456:	695b      	ldr	r3, [r3, #20]
 8004458:	3320      	adds	r3, #32
 800445a:	60bb      	str	r3, [r7, #8]
	if (!dp->sect || ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR)) return FR_NO_FILE;	/* Report EOT when offset has reached max value */
 800445c:	687b      	ldr	r3, [r7, #4]
 800445e:	69db      	ldr	r3, [r3, #28]
 8004460:	2b00      	cmp	r3, #0
 8004462:	d003      	beq.n	800446c <dir_next+0x28>
 8004464:	68bb      	ldr	r3, [r7, #8]
 8004466:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 800446a:	d301      	bcc.n	8004470 <dir_next+0x2c>
 800446c:	2304      	movs	r3, #4
 800446e:	e0aa      	b.n	80045c6 <dir_next+0x182>

	if (ofs % SS(fs) == 0) {	/* Sector changed? */
 8004470:	68bb      	ldr	r3, [r7, #8]
 8004472:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004476:	2b00      	cmp	r3, #0
 8004478:	f040 8098 	bne.w	80045ac <dir_next+0x168>
		dp->sect++;				/* Next sector */
 800447c:	687b      	ldr	r3, [r7, #4]
 800447e:	69db      	ldr	r3, [r3, #28]
 8004480:	1c5a      	adds	r2, r3, #1
 8004482:	687b      	ldr	r3, [r7, #4]
 8004484:	61da      	str	r2, [r3, #28]

		if (!dp->clust) {		/* Static table */
 8004486:	687b      	ldr	r3, [r7, #4]
 8004488:	699b      	ldr	r3, [r3, #24]
 800448a:	2b00      	cmp	r3, #0
 800448c:	d10b      	bne.n	80044a6 <dir_next+0x62>
			if (ofs / SZDIRE >= fs->n_rootdir) {	/* Report EOT if it reached end of static table */
 800448e:	68bb      	ldr	r3, [r7, #8]
 8004490:	095b      	lsrs	r3, r3, #5
 8004492:	68fa      	ldr	r2, [r7, #12]
 8004494:	8912      	ldrh	r2, [r2, #8]
 8004496:	4293      	cmp	r3, r2
 8004498:	f0c0 8088 	bcc.w	80045ac <dir_next+0x168>
				dp->sect = 0; return FR_NO_FILE;
 800449c:	687b      	ldr	r3, [r7, #4]
 800449e:	2200      	movs	r2, #0
 80044a0:	61da      	str	r2, [r3, #28]
 80044a2:	2304      	movs	r3, #4
 80044a4:	e08f      	b.n	80045c6 <dir_next+0x182>
			}
		}
		else {					/* Dynamic table */
			if ((ofs / SS(fs) & (fs->csize - 1)) == 0) {		/* Cluster changed? */
 80044a6:	68bb      	ldr	r3, [r7, #8]
 80044a8:	0a5b      	lsrs	r3, r3, #9
 80044aa:	68fa      	ldr	r2, [r7, #12]
 80044ac:	8952      	ldrh	r2, [r2, #10]
 80044ae:	3a01      	subs	r2, #1
 80044b0:	4013      	ands	r3, r2
 80044b2:	2b00      	cmp	r3, #0
 80044b4:	d17a      	bne.n	80045ac <dir_next+0x168>
				clst = get_fat(&dp->obj, dp->clust);			/* Get next cluster */
 80044b6:	687a      	ldr	r2, [r7, #4]
 80044b8:	687b      	ldr	r3, [r7, #4]
 80044ba:	699b      	ldr	r3, [r3, #24]
 80044bc:	4619      	mov	r1, r3
 80044be:	4610      	mov	r0, r2
 80044c0:	f7ff fc83 	bl	8003dca <get_fat>
 80044c4:	6178      	str	r0, [r7, #20]
				if (clst <= 1) return FR_INT_ERR;				/* Internal error */
 80044c6:	697b      	ldr	r3, [r7, #20]
 80044c8:	2b01      	cmp	r3, #1
 80044ca:	d801      	bhi.n	80044d0 <dir_next+0x8c>
 80044cc:	2302      	movs	r3, #2
 80044ce:	e07a      	b.n	80045c6 <dir_next+0x182>
				if (clst == 0xFFFFFFFF) return FR_DISK_ERR;		/* Disk error */
 80044d0:	697b      	ldr	r3, [r7, #20]
 80044d2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80044d6:	d101      	bne.n	80044dc <dir_next+0x98>
 80044d8:	2301      	movs	r3, #1
 80044da:	e074      	b.n	80045c6 <dir_next+0x182>
				if (clst >= fs->n_fatent) {						/* Reached end of dynamic table */
 80044dc:	68fb      	ldr	r3, [r7, #12]
 80044de:	695b      	ldr	r3, [r3, #20]
 80044e0:	697a      	ldr	r2, [r7, #20]
 80044e2:	429a      	cmp	r2, r3
 80044e4:	d358      	bcc.n	8004598 <dir_next+0x154>
#if !_FS_READONLY
					if (!stretch) {								/* If no stretch, report EOT */
 80044e6:	683b      	ldr	r3, [r7, #0]
 80044e8:	2b00      	cmp	r3, #0
 80044ea:	d104      	bne.n	80044f6 <dir_next+0xb2>
						dp->sect = 0; return FR_NO_FILE;
 80044ec:	687b      	ldr	r3, [r7, #4]
 80044ee:	2200      	movs	r2, #0
 80044f0:	61da      	str	r2, [r3, #28]
 80044f2:	2304      	movs	r3, #4
 80044f4:	e067      	b.n	80045c6 <dir_next+0x182>
					}
					clst = create_chain(&dp->obj, dp->clust);	/* Allocate a cluster */
 80044f6:	687a      	ldr	r2, [r7, #4]
 80044f8:	687b      	ldr	r3, [r7, #4]
 80044fa:	699b      	ldr	r3, [r3, #24]
 80044fc:	4619      	mov	r1, r3
 80044fe:	4610      	mov	r0, r2
 8004500:	f7ff fe59 	bl	80041b6 <create_chain>
 8004504:	6178      	str	r0, [r7, #20]
					if (clst == 0) return FR_DENIED;			/* No free cluster */
 8004506:	697b      	ldr	r3, [r7, #20]
 8004508:	2b00      	cmp	r3, #0
 800450a:	d101      	bne.n	8004510 <dir_next+0xcc>
 800450c:	2307      	movs	r3, #7
 800450e:	e05a      	b.n	80045c6 <dir_next+0x182>
					if (clst == 1) return FR_INT_ERR;			/* Internal error */
 8004510:	697b      	ldr	r3, [r7, #20]
 8004512:	2b01      	cmp	r3, #1
 8004514:	d101      	bne.n	800451a <dir_next+0xd6>
 8004516:	2302      	movs	r3, #2
 8004518:	e055      	b.n	80045c6 <dir_next+0x182>
					if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 800451a:	697b      	ldr	r3, [r7, #20]
 800451c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004520:	d101      	bne.n	8004526 <dir_next+0xe2>
 8004522:	2301      	movs	r3, #1
 8004524:	e04f      	b.n	80045c6 <dir_next+0x182>
					/* Clean-up the stretched table */
					if (_FS_EXFAT) dp->obj.stat |= 4;			/* The directory needs to be updated */
					if (sync_window(fs) != FR_OK) return FR_DISK_ERR;	/* Flush disk access window */
 8004526:	68f8      	ldr	r0, [r7, #12]
 8004528:	f7ff fb50 	bl	8003bcc <sync_window>
 800452c:	4603      	mov	r3, r0
 800452e:	2b00      	cmp	r3, #0
 8004530:	d001      	beq.n	8004536 <dir_next+0xf2>
 8004532:	2301      	movs	r3, #1
 8004534:	e047      	b.n	80045c6 <dir_next+0x182>
					mem_set(fs->win, 0, SS(fs));				/* Clear window buffer */
 8004536:	68fb      	ldr	r3, [r7, #12]
 8004538:	3330      	adds	r3, #48	@ 0x30
 800453a:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800453e:	2100      	movs	r1, #0
 8004540:	4618      	mov	r0, r3
 8004542:	f7ff f97a 	bl	800383a <mem_set>
					for (n = 0, fs->winsect = clust2sect(fs, clst); n < fs->csize; n++, fs->winsect++) {	/* Fill the new cluster with 0 */
 8004546:	2300      	movs	r3, #0
 8004548:	613b      	str	r3, [r7, #16]
 800454a:	6979      	ldr	r1, [r7, #20]
 800454c:	68f8      	ldr	r0, [r7, #12]
 800454e:	f7ff fc1d 	bl	8003d8c <clust2sect>
 8004552:	4602      	mov	r2, r0
 8004554:	68fb      	ldr	r3, [r7, #12]
 8004556:	62da      	str	r2, [r3, #44]	@ 0x2c
 8004558:	e012      	b.n	8004580 <dir_next+0x13c>
						fs->wflag = 1;
 800455a:	68fb      	ldr	r3, [r7, #12]
 800455c:	2201      	movs	r2, #1
 800455e:	70da      	strb	r2, [r3, #3]
						if (sync_window(fs) != FR_OK) return FR_DISK_ERR;
 8004560:	68f8      	ldr	r0, [r7, #12]
 8004562:	f7ff fb33 	bl	8003bcc <sync_window>
 8004566:	4603      	mov	r3, r0
 8004568:	2b00      	cmp	r3, #0
 800456a:	d001      	beq.n	8004570 <dir_next+0x12c>
 800456c:	2301      	movs	r3, #1
 800456e:	e02a      	b.n	80045c6 <dir_next+0x182>
					for (n = 0, fs->winsect = clust2sect(fs, clst); n < fs->csize; n++, fs->winsect++) {	/* Fill the new cluster with 0 */
 8004570:	693b      	ldr	r3, [r7, #16]
 8004572:	3301      	adds	r3, #1
 8004574:	613b      	str	r3, [r7, #16]
 8004576:	68fb      	ldr	r3, [r7, #12]
 8004578:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800457a:	1c5a      	adds	r2, r3, #1
 800457c:	68fb      	ldr	r3, [r7, #12]
 800457e:	62da      	str	r2, [r3, #44]	@ 0x2c
 8004580:	68fb      	ldr	r3, [r7, #12]
 8004582:	895b      	ldrh	r3, [r3, #10]
 8004584:	461a      	mov	r2, r3
 8004586:	693b      	ldr	r3, [r7, #16]
 8004588:	4293      	cmp	r3, r2
 800458a:	d3e6      	bcc.n	800455a <dir_next+0x116>
					}
					fs->winsect -= n;							/* Restore window offset */
 800458c:	68fb      	ldr	r3, [r7, #12]
 800458e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004590:	693b      	ldr	r3, [r7, #16]
 8004592:	1ad2      	subs	r2, r2, r3
 8004594:	68fb      	ldr	r3, [r7, #12]
 8004596:	62da      	str	r2, [r3, #44]	@ 0x2c
#else
					if (!stretch) dp->sect = 0;					/* (this line is to suppress compiler warning) */
					dp->sect = 0; return FR_NO_FILE;			/* Report EOT */
#endif
				}
				dp->clust = clst;		/* Initialize data for new cluster */
 8004598:	687b      	ldr	r3, [r7, #4]
 800459a:	697a      	ldr	r2, [r7, #20]
 800459c:	619a      	str	r2, [r3, #24]
				dp->sect = clust2sect(fs, clst);
 800459e:	6979      	ldr	r1, [r7, #20]
 80045a0:	68f8      	ldr	r0, [r7, #12]
 80045a2:	f7ff fbf3 	bl	8003d8c <clust2sect>
 80045a6:	4602      	mov	r2, r0
 80045a8:	687b      	ldr	r3, [r7, #4]
 80045aa:	61da      	str	r2, [r3, #28]
			}
		}
	}
	dp->dptr = ofs;						/* Current entry */
 80045ac:	687b      	ldr	r3, [r7, #4]
 80045ae:	68ba      	ldr	r2, [r7, #8]
 80045b0:	615a      	str	r2, [r3, #20]
	dp->dir = fs->win + ofs % SS(fs);	/* Pointer to the entry in the win[] */
 80045b2:	68fb      	ldr	r3, [r7, #12]
 80045b4:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 80045b8:	68bb      	ldr	r3, [r7, #8]
 80045ba:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80045be:	441a      	add	r2, r3
 80045c0:	687b      	ldr	r3, [r7, #4]
 80045c2:	621a      	str	r2, [r3, #32]

	return FR_OK;
 80045c4:	2300      	movs	r3, #0
}
 80045c6:	4618      	mov	r0, r3
 80045c8:	3718      	adds	r7, #24
 80045ca:	46bd      	mov	sp, r7
 80045cc:	bd80      	pop	{r7, pc}

080045ce <dir_alloc>:
static
FRESULT dir_alloc (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp,		/* Pointer to the directory object */
	UINT nent		/* Number of contiguous entries to allocate */
)
{
 80045ce:	b580      	push	{r7, lr}
 80045d0:	b086      	sub	sp, #24
 80045d2:	af00      	add	r7, sp, #0
 80045d4:	6078      	str	r0, [r7, #4]
 80045d6:	6039      	str	r1, [r7, #0]
	FRESULT res;
	UINT n;
	FATFS *fs = dp->obj.fs;
 80045d8:	687b      	ldr	r3, [r7, #4]
 80045da:	681b      	ldr	r3, [r3, #0]
 80045dc:	60fb      	str	r3, [r7, #12]


	res = dir_sdi(dp, 0);
 80045de:	2100      	movs	r1, #0
 80045e0:	6878      	ldr	r0, [r7, #4]
 80045e2:	f7ff feb4 	bl	800434e <dir_sdi>
 80045e6:	4603      	mov	r3, r0
 80045e8:	75fb      	strb	r3, [r7, #23]
	if (res == FR_OK) {
 80045ea:	7dfb      	ldrb	r3, [r7, #23]
 80045ec:	2b00      	cmp	r3, #0
 80045ee:	d12b      	bne.n	8004648 <dir_alloc+0x7a>
		n = 0;
 80045f0:	2300      	movs	r3, #0
 80045f2:	613b      	str	r3, [r7, #16]
		do {
			res = move_window(fs, dp->sect);
 80045f4:	687b      	ldr	r3, [r7, #4]
 80045f6:	69db      	ldr	r3, [r3, #28]
 80045f8:	4619      	mov	r1, r3
 80045fa:	68f8      	ldr	r0, [r7, #12]
 80045fc:	f7ff fb2a 	bl	8003c54 <move_window>
 8004600:	4603      	mov	r3, r0
 8004602:	75fb      	strb	r3, [r7, #23]
			if (res != FR_OK) break;
 8004604:	7dfb      	ldrb	r3, [r7, #23]
 8004606:	2b00      	cmp	r3, #0
 8004608:	d11d      	bne.n	8004646 <dir_alloc+0x78>
#if _FS_EXFAT
			if ((fs->fs_type == FS_EXFAT) ? (int)((dp->dir[XDIR_Type] & 0x80) == 0) : (int)(dp->dir[DIR_Name] == DDEM || dp->dir[DIR_Name] == 0)) {
#else
			if (dp->dir[DIR_Name] == DDEM || dp->dir[DIR_Name] == 0) {
 800460a:	687b      	ldr	r3, [r7, #4]
 800460c:	6a1b      	ldr	r3, [r3, #32]
 800460e:	781b      	ldrb	r3, [r3, #0]
 8004610:	2be5      	cmp	r3, #229	@ 0xe5
 8004612:	d004      	beq.n	800461e <dir_alloc+0x50>
 8004614:	687b      	ldr	r3, [r7, #4]
 8004616:	6a1b      	ldr	r3, [r3, #32]
 8004618:	781b      	ldrb	r3, [r3, #0]
 800461a:	2b00      	cmp	r3, #0
 800461c:	d107      	bne.n	800462e <dir_alloc+0x60>
#endif
				if (++n == nent) break;	/* A block of contiguous free entries is found */
 800461e:	693b      	ldr	r3, [r7, #16]
 8004620:	3301      	adds	r3, #1
 8004622:	613b      	str	r3, [r7, #16]
 8004624:	693a      	ldr	r2, [r7, #16]
 8004626:	683b      	ldr	r3, [r7, #0]
 8004628:	429a      	cmp	r2, r3
 800462a:	d102      	bne.n	8004632 <dir_alloc+0x64>
 800462c:	e00c      	b.n	8004648 <dir_alloc+0x7a>
			} else {
				n = 0;					/* Not a blank entry. Restart to search */
 800462e:	2300      	movs	r3, #0
 8004630:	613b      	str	r3, [r7, #16]
			}
			res = dir_next(dp, 1);
 8004632:	2101      	movs	r1, #1
 8004634:	6878      	ldr	r0, [r7, #4]
 8004636:	f7ff ff05 	bl	8004444 <dir_next>
 800463a:	4603      	mov	r3, r0
 800463c:	75fb      	strb	r3, [r7, #23]
		} while (res == FR_OK);	/* Next entry with table stretch enabled */
 800463e:	7dfb      	ldrb	r3, [r7, #23]
 8004640:	2b00      	cmp	r3, #0
 8004642:	d0d7      	beq.n	80045f4 <dir_alloc+0x26>
 8004644:	e000      	b.n	8004648 <dir_alloc+0x7a>
			if (res != FR_OK) break;
 8004646:	bf00      	nop
	}

	if (res == FR_NO_FILE) res = FR_DENIED;	/* No directory entry to allocate */
 8004648:	7dfb      	ldrb	r3, [r7, #23]
 800464a:	2b04      	cmp	r3, #4
 800464c:	d101      	bne.n	8004652 <dir_alloc+0x84>
 800464e:	2307      	movs	r3, #7
 8004650:	75fb      	strb	r3, [r7, #23]
	return res;
 8004652:	7dfb      	ldrb	r3, [r7, #23]
}
 8004654:	4618      	mov	r0, r3
 8004656:	3718      	adds	r7, #24
 8004658:	46bd      	mov	sp, r7
 800465a:	bd80      	pop	{r7, pc}

0800465c <ld_clust>:
static
DWORD ld_clust (	/* Returns the top cluster value of the SFN entry */
	FATFS* fs,		/* Pointer to the fs object */
	const BYTE* dir	/* Pointer to the key entry */
)
{
 800465c:	b580      	push	{r7, lr}
 800465e:	b084      	sub	sp, #16
 8004660:	af00      	add	r7, sp, #0
 8004662:	6078      	str	r0, [r7, #4]
 8004664:	6039      	str	r1, [r7, #0]
	DWORD cl;

	cl = ld_word(dir + DIR_FstClusLO);
 8004666:	683b      	ldr	r3, [r7, #0]
 8004668:	331a      	adds	r3, #26
 800466a:	4618      	mov	r0, r3
 800466c:	f7ff f842 	bl	80036f4 <ld_word>
 8004670:	4603      	mov	r3, r0
 8004672:	60fb      	str	r3, [r7, #12]
	if (fs->fs_type == FS_FAT32) {
 8004674:	687b      	ldr	r3, [r7, #4]
 8004676:	781b      	ldrb	r3, [r3, #0]
 8004678:	2b03      	cmp	r3, #3
 800467a:	d109      	bne.n	8004690 <ld_clust+0x34>
		cl |= (DWORD)ld_word(dir + DIR_FstClusHI) << 16;
 800467c:	683b      	ldr	r3, [r7, #0]
 800467e:	3314      	adds	r3, #20
 8004680:	4618      	mov	r0, r3
 8004682:	f7ff f837 	bl	80036f4 <ld_word>
 8004686:	4603      	mov	r3, r0
 8004688:	041b      	lsls	r3, r3, #16
 800468a:	68fa      	ldr	r2, [r7, #12]
 800468c:	4313      	orrs	r3, r2
 800468e:	60fb      	str	r3, [r7, #12]
	}

	return cl;
 8004690:	68fb      	ldr	r3, [r7, #12]
}
 8004692:	4618      	mov	r0, r3
 8004694:	3710      	adds	r7, #16
 8004696:	46bd      	mov	sp, r7
 8004698:	bd80      	pop	{r7, pc}

0800469a <st_clust>:
void st_clust (
	FATFS* fs,	/* Pointer to the fs object */
	BYTE* dir,	/* Pointer to the key entry */
	DWORD cl	/* Value to be set */
)
{
 800469a:	b580      	push	{r7, lr}
 800469c:	b084      	sub	sp, #16
 800469e:	af00      	add	r7, sp, #0
 80046a0:	60f8      	str	r0, [r7, #12]
 80046a2:	60b9      	str	r1, [r7, #8]
 80046a4:	607a      	str	r2, [r7, #4]
	st_word(dir + DIR_FstClusLO, (WORD)cl);
 80046a6:	68bb      	ldr	r3, [r7, #8]
 80046a8:	331a      	adds	r3, #26
 80046aa:	687a      	ldr	r2, [r7, #4]
 80046ac:	b292      	uxth	r2, r2
 80046ae:	4611      	mov	r1, r2
 80046b0:	4618      	mov	r0, r3
 80046b2:	f7ff f85a 	bl	800376a <st_word>
	if (fs->fs_type == FS_FAT32) {
 80046b6:	68fb      	ldr	r3, [r7, #12]
 80046b8:	781b      	ldrb	r3, [r3, #0]
 80046ba:	2b03      	cmp	r3, #3
 80046bc:	d109      	bne.n	80046d2 <st_clust+0x38>
		st_word(dir + DIR_FstClusHI, (WORD)(cl >> 16));
 80046be:	68bb      	ldr	r3, [r7, #8]
 80046c0:	f103 0214 	add.w	r2, r3, #20
 80046c4:	687b      	ldr	r3, [r7, #4]
 80046c6:	0c1b      	lsrs	r3, r3, #16
 80046c8:	b29b      	uxth	r3, r3
 80046ca:	4619      	mov	r1, r3
 80046cc:	4610      	mov	r0, r2
 80046ce:	f7ff f84c 	bl	800376a <st_word>
	}
}
 80046d2:	bf00      	nop
 80046d4:	3710      	adds	r7, #16
 80046d6:	46bd      	mov	sp, r7
 80046d8:	bd80      	pop	{r7, pc}

080046da <dir_find>:

static
FRESULT dir_find (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp			/* Pointer to the directory object with the file name */
)
{
 80046da:	b580      	push	{r7, lr}
 80046dc:	b086      	sub	sp, #24
 80046de:	af00      	add	r7, sp, #0
 80046e0:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs = dp->obj.fs;
 80046e2:	687b      	ldr	r3, [r7, #4]
 80046e4:	681b      	ldr	r3, [r3, #0]
 80046e6:	613b      	str	r3, [r7, #16]
	BYTE c;
#if _USE_LFN != 0
	BYTE a, ord, sum;
#endif

	res = dir_sdi(dp, 0);			/* Rewind directory object */
 80046e8:	2100      	movs	r1, #0
 80046ea:	6878      	ldr	r0, [r7, #4]
 80046ec:	f7ff fe2f 	bl	800434e <dir_sdi>
 80046f0:	4603      	mov	r3, r0
 80046f2:	75fb      	strb	r3, [r7, #23]
	if (res != FR_OK) return res;
 80046f4:	7dfb      	ldrb	r3, [r7, #23]
 80046f6:	2b00      	cmp	r3, #0
 80046f8:	d001      	beq.n	80046fe <dir_find+0x24>
 80046fa:	7dfb      	ldrb	r3, [r7, #23]
 80046fc:	e03e      	b.n	800477c <dir_find+0xa2>
	/* On the FAT12/16/32 volume */
#if _USE_LFN != 0
	ord = sum = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
#endif
	do {
		res = move_window(fs, dp->sect);
 80046fe:	687b      	ldr	r3, [r7, #4]
 8004700:	69db      	ldr	r3, [r3, #28]
 8004702:	4619      	mov	r1, r3
 8004704:	6938      	ldr	r0, [r7, #16]
 8004706:	f7ff faa5 	bl	8003c54 <move_window>
 800470a:	4603      	mov	r3, r0
 800470c:	75fb      	strb	r3, [r7, #23]
		if (res != FR_OK) break;
 800470e:	7dfb      	ldrb	r3, [r7, #23]
 8004710:	2b00      	cmp	r3, #0
 8004712:	d12f      	bne.n	8004774 <dir_find+0x9a>
		c = dp->dir[DIR_Name];
 8004714:	687b      	ldr	r3, [r7, #4]
 8004716:	6a1b      	ldr	r3, [r3, #32]
 8004718:	781b      	ldrb	r3, [r3, #0]
 800471a:	73fb      	strb	r3, [r7, #15]
		if (c == 0) { res = FR_NO_FILE; break; }	/* Reached to end of table */
 800471c:	7bfb      	ldrb	r3, [r7, #15]
 800471e:	2b00      	cmp	r3, #0
 8004720:	d102      	bne.n	8004728 <dir_find+0x4e>
 8004722:	2304      	movs	r3, #4
 8004724:	75fb      	strb	r3, [r7, #23]
 8004726:	e028      	b.n	800477a <dir_find+0xa0>
				if (!(dp->fn[NSFLAG] & NS_LOSS) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* SFN matched? */
				ord = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
			}
		}
#else		/* Non LFN configuration */
		dp->obj.attr = dp->dir[DIR_Attr] & AM_MASK;
 8004728:	687b      	ldr	r3, [r7, #4]
 800472a:	6a1b      	ldr	r3, [r3, #32]
 800472c:	330b      	adds	r3, #11
 800472e:	781b      	ldrb	r3, [r3, #0]
 8004730:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8004734:	b2da      	uxtb	r2, r3
 8004736:	687b      	ldr	r3, [r7, #4]
 8004738:	719a      	strb	r2, [r3, #6]
		if (!(dp->dir[DIR_Attr] & AM_VOL) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* Is it a valid entry? */
 800473a:	687b      	ldr	r3, [r7, #4]
 800473c:	6a1b      	ldr	r3, [r3, #32]
 800473e:	330b      	adds	r3, #11
 8004740:	781b      	ldrb	r3, [r3, #0]
 8004742:	f003 0308 	and.w	r3, r3, #8
 8004746:	2b00      	cmp	r3, #0
 8004748:	d10a      	bne.n	8004760 <dir_find+0x86>
 800474a:	687b      	ldr	r3, [r7, #4]
 800474c:	6a18      	ldr	r0, [r3, #32]
 800474e:	687b      	ldr	r3, [r7, #4]
 8004750:	3324      	adds	r3, #36	@ 0x24
 8004752:	220b      	movs	r2, #11
 8004754:	4619      	mov	r1, r3
 8004756:	f7ff f88b 	bl	8003870 <mem_cmp>
 800475a:	4603      	mov	r3, r0
 800475c:	2b00      	cmp	r3, #0
 800475e:	d00b      	beq.n	8004778 <dir_find+0x9e>
#endif
		res = dir_next(dp, 0);	/* Next entry */
 8004760:	2100      	movs	r1, #0
 8004762:	6878      	ldr	r0, [r7, #4]
 8004764:	f7ff fe6e 	bl	8004444 <dir_next>
 8004768:	4603      	mov	r3, r0
 800476a:	75fb      	strb	r3, [r7, #23]
	} while (res == FR_OK);
 800476c:	7dfb      	ldrb	r3, [r7, #23]
 800476e:	2b00      	cmp	r3, #0
 8004770:	d0c5      	beq.n	80046fe <dir_find+0x24>
 8004772:	e002      	b.n	800477a <dir_find+0xa0>
		if (res != FR_OK) break;
 8004774:	bf00      	nop
 8004776:	e000      	b.n	800477a <dir_find+0xa0>
		if (!(dp->dir[DIR_Attr] & AM_VOL) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* Is it a valid entry? */
 8004778:	bf00      	nop

	return res;
 800477a:	7dfb      	ldrb	r3, [r7, #23]
}
 800477c:	4618      	mov	r0, r3
 800477e:	3718      	adds	r7, #24
 8004780:	46bd      	mov	sp, r7
 8004782:	bd80      	pop	{r7, pc}

08004784 <dir_register>:

static
FRESULT dir_register (	/* FR_OK:succeeded, FR_DENIED:no free entry or too many SFN collision, FR_DISK_ERR:disk error */
	DIR* dp				/* Target directory with object name to be created */
)
{
 8004784:	b580      	push	{r7, lr}
 8004786:	b084      	sub	sp, #16
 8004788:	af00      	add	r7, sp, #0
 800478a:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs = dp->obj.fs;
 800478c:	687b      	ldr	r3, [r7, #4]
 800478e:	681b      	ldr	r3, [r3, #0]
 8004790:	60bb      	str	r3, [r7, #8]
			} while (res == FR_OK && --nent);
		}
	}

#else	/* Non LFN configuration */
	res = dir_alloc(dp, 1);		/* Allocate an entry for SFN */
 8004792:	2101      	movs	r1, #1
 8004794:	6878      	ldr	r0, [r7, #4]
 8004796:	f7ff ff1a 	bl	80045ce <dir_alloc>
 800479a:	4603      	mov	r3, r0
 800479c:	73fb      	strb	r3, [r7, #15]

#endif

	/* Set SFN entry */
	if (res == FR_OK) {
 800479e:	7bfb      	ldrb	r3, [r7, #15]
 80047a0:	2b00      	cmp	r3, #0
 80047a2:	d11c      	bne.n	80047de <dir_register+0x5a>
		res = move_window(fs, dp->sect);
 80047a4:	687b      	ldr	r3, [r7, #4]
 80047a6:	69db      	ldr	r3, [r3, #28]
 80047a8:	4619      	mov	r1, r3
 80047aa:	68b8      	ldr	r0, [r7, #8]
 80047ac:	f7ff fa52 	bl	8003c54 <move_window>
 80047b0:	4603      	mov	r3, r0
 80047b2:	73fb      	strb	r3, [r7, #15]
		if (res == FR_OK) {
 80047b4:	7bfb      	ldrb	r3, [r7, #15]
 80047b6:	2b00      	cmp	r3, #0
 80047b8:	d111      	bne.n	80047de <dir_register+0x5a>
			mem_set(dp->dir, 0, SZDIRE);	/* Clean the entry */
 80047ba:	687b      	ldr	r3, [r7, #4]
 80047bc:	6a1b      	ldr	r3, [r3, #32]
 80047be:	2220      	movs	r2, #32
 80047c0:	2100      	movs	r1, #0
 80047c2:	4618      	mov	r0, r3
 80047c4:	f7ff f839 	bl	800383a <mem_set>
			mem_cpy(dp->dir + DIR_Name, dp->fn, 11);	/* Put SFN */
 80047c8:	687b      	ldr	r3, [r7, #4]
 80047ca:	6a18      	ldr	r0, [r3, #32]
 80047cc:	687b      	ldr	r3, [r7, #4]
 80047ce:	3324      	adds	r3, #36	@ 0x24
 80047d0:	220b      	movs	r2, #11
 80047d2:	4619      	mov	r1, r3
 80047d4:	f7ff f810 	bl	80037f8 <mem_cpy>
#if _USE_LFN != 0
			dp->dir[DIR_NTres] = dp->fn[NSFLAG] & (NS_BODY | NS_EXT);	/* Put NT flag */
#endif
			fs->wflag = 1;
 80047d8:	68bb      	ldr	r3, [r7, #8]
 80047da:	2201      	movs	r2, #1
 80047dc:	70da      	strb	r2, [r3, #3]
		}
	}

	return res;
 80047de:	7bfb      	ldrb	r3, [r7, #15]
}
 80047e0:	4618      	mov	r0, r3
 80047e2:	3710      	adds	r7, #16
 80047e4:	46bd      	mov	sp, r7
 80047e6:	bd80      	pop	{r7, pc}

080047e8 <create_name>:
static
FRESULT create_name (	/* FR_OK: successful, FR_INVALID_NAME: could not create */
	DIR* dp,			/* Pointer to the directory object */
	const TCHAR** path	/* Pointer to pointer to the segment in the path string */
)
{
 80047e8:	b580      	push	{r7, lr}
 80047ea:	b088      	sub	sp, #32
 80047ec:	af00      	add	r7, sp, #0
 80047ee:	6078      	str	r0, [r7, #4]
 80047f0:	6039      	str	r1, [r7, #0]
	BYTE c, d, *sfn;
	UINT ni, si, i;
	const char *p;

	/* Create file name in directory form */
	p = *path; sfn = dp->fn;
 80047f2:	683b      	ldr	r3, [r7, #0]
 80047f4:	681b      	ldr	r3, [r3, #0]
 80047f6:	60fb      	str	r3, [r7, #12]
 80047f8:	687b      	ldr	r3, [r7, #4]
 80047fa:	3324      	adds	r3, #36	@ 0x24
 80047fc:	60bb      	str	r3, [r7, #8]
	mem_set(sfn, ' ', 11);
 80047fe:	220b      	movs	r2, #11
 8004800:	2120      	movs	r1, #32
 8004802:	68b8      	ldr	r0, [r7, #8]
 8004804:	f7ff f819 	bl	800383a <mem_set>
	si = i = 0; ni = 8;
 8004808:	2300      	movs	r3, #0
 800480a:	613b      	str	r3, [r7, #16]
 800480c:	693b      	ldr	r3, [r7, #16]
 800480e:	61fb      	str	r3, [r7, #28]
 8004810:	2308      	movs	r3, #8
 8004812:	617b      	str	r3, [r7, #20]
		sfn[NSFLAG] = (c <= ' ') ? NS_LAST | NS_DOT : NS_DOT;	/* Set last segment flag if end of the path */
		return FR_OK;
	}
#endif
	for (;;) {
		c = (BYTE)p[si++];
 8004814:	69fb      	ldr	r3, [r7, #28]
 8004816:	1c5a      	adds	r2, r3, #1
 8004818:	61fa      	str	r2, [r7, #28]
 800481a:	68fa      	ldr	r2, [r7, #12]
 800481c:	4413      	add	r3, r2
 800481e:	781b      	ldrb	r3, [r3, #0]
 8004820:	76fb      	strb	r3, [r7, #27]
		if (c <= ' ') break; 			/* Break if end of the path name */
 8004822:	7efb      	ldrb	r3, [r7, #27]
 8004824:	2b20      	cmp	r3, #32
 8004826:	d94e      	bls.n	80048c6 <create_name+0xde>
		if (c == '/' || c == '\\') {	/* Break if a separator is found */
 8004828:	7efb      	ldrb	r3, [r7, #27]
 800482a:	2b2f      	cmp	r3, #47	@ 0x2f
 800482c:	d006      	beq.n	800483c <create_name+0x54>
 800482e:	7efb      	ldrb	r3, [r7, #27]
 8004830:	2b5c      	cmp	r3, #92	@ 0x5c
 8004832:	d110      	bne.n	8004856 <create_name+0x6e>
			while (p[si] == '/' || p[si] == '\\') si++;	/* Skip duplicated separator if exist */
 8004834:	e002      	b.n	800483c <create_name+0x54>
 8004836:	69fb      	ldr	r3, [r7, #28]
 8004838:	3301      	adds	r3, #1
 800483a:	61fb      	str	r3, [r7, #28]
 800483c:	68fa      	ldr	r2, [r7, #12]
 800483e:	69fb      	ldr	r3, [r7, #28]
 8004840:	4413      	add	r3, r2
 8004842:	781b      	ldrb	r3, [r3, #0]
 8004844:	2b2f      	cmp	r3, #47	@ 0x2f
 8004846:	d0f6      	beq.n	8004836 <create_name+0x4e>
 8004848:	68fa      	ldr	r2, [r7, #12]
 800484a:	69fb      	ldr	r3, [r7, #28]
 800484c:	4413      	add	r3, r2
 800484e:	781b      	ldrb	r3, [r3, #0]
 8004850:	2b5c      	cmp	r3, #92	@ 0x5c
 8004852:	d0f0      	beq.n	8004836 <create_name+0x4e>
			break;
 8004854:	e038      	b.n	80048c8 <create_name+0xe0>
		}
		if (c == '.' || i >= ni) {		/* End of body or over size? */
 8004856:	7efb      	ldrb	r3, [r7, #27]
 8004858:	2b2e      	cmp	r3, #46	@ 0x2e
 800485a:	d003      	beq.n	8004864 <create_name+0x7c>
 800485c:	693a      	ldr	r2, [r7, #16]
 800485e:	697b      	ldr	r3, [r7, #20]
 8004860:	429a      	cmp	r2, r3
 8004862:	d30c      	bcc.n	800487e <create_name+0x96>
			if (ni == 11 || c != '.') return FR_INVALID_NAME;	/* Over size or invalid dot */
 8004864:	697b      	ldr	r3, [r7, #20]
 8004866:	2b0b      	cmp	r3, #11
 8004868:	d002      	beq.n	8004870 <create_name+0x88>
 800486a:	7efb      	ldrb	r3, [r7, #27]
 800486c:	2b2e      	cmp	r3, #46	@ 0x2e
 800486e:	d001      	beq.n	8004874 <create_name+0x8c>
 8004870:	2306      	movs	r3, #6
 8004872:	e044      	b.n	80048fe <create_name+0x116>
			i = 8; ni = 11;				/* Goto extension */
 8004874:	2308      	movs	r3, #8
 8004876:	613b      	str	r3, [r7, #16]
 8004878:	230b      	movs	r3, #11
 800487a:	617b      	str	r3, [r7, #20]
			continue;
 800487c:	e022      	b.n	80048c4 <create_name+0xdc>
		}
		if (c >= 0x80) {				/* Extended character? */
 800487e:	f997 301b 	ldrsb.w	r3, [r7, #27]
 8004882:	2b00      	cmp	r3, #0
 8004884:	da04      	bge.n	8004890 <create_name+0xa8>
#ifdef _EXCVT
			c = ExCvt[c - 0x80];		/* To upper extended characters (SBCS cfg) */
 8004886:	7efb      	ldrb	r3, [r7, #27]
 8004888:	3b80      	subs	r3, #128	@ 0x80
 800488a:	4a1f      	ldr	r2, [pc, #124]	@ (8004908 <create_name+0x120>)
 800488c:	5cd3      	ldrb	r3, [r2, r3]
 800488e:	76fb      	strb	r3, [r7, #27]
			d = (BYTE)p[si++];			/* Get 2nd byte */
			if (!IsDBCS2(d) || i >= ni - 1) return FR_INVALID_NAME;	/* Reject invalid DBC */
			sfn[i++] = c;
			sfn[i++] = d;
		} else {						/* SBC */
			if (chk_chr("\"*+,:;<=>\?[]|\x7F", c)) return FR_INVALID_NAME;	/* Reject illegal chrs for SFN */
 8004890:	7efb      	ldrb	r3, [r7, #27]
 8004892:	4619      	mov	r1, r3
 8004894:	481d      	ldr	r0, [pc, #116]	@ (800490c <create_name+0x124>)
 8004896:	f7ff f812 	bl	80038be <chk_chr>
 800489a:	4603      	mov	r3, r0
 800489c:	2b00      	cmp	r3, #0
 800489e:	d001      	beq.n	80048a4 <create_name+0xbc>
 80048a0:	2306      	movs	r3, #6
 80048a2:	e02c      	b.n	80048fe <create_name+0x116>
			if (IsLower(c)) c -= 0x20;	/* To upper */
 80048a4:	7efb      	ldrb	r3, [r7, #27]
 80048a6:	2b60      	cmp	r3, #96	@ 0x60
 80048a8:	d905      	bls.n	80048b6 <create_name+0xce>
 80048aa:	7efb      	ldrb	r3, [r7, #27]
 80048ac:	2b7a      	cmp	r3, #122	@ 0x7a
 80048ae:	d802      	bhi.n	80048b6 <create_name+0xce>
 80048b0:	7efb      	ldrb	r3, [r7, #27]
 80048b2:	3b20      	subs	r3, #32
 80048b4:	76fb      	strb	r3, [r7, #27]
			sfn[i++] = c;
 80048b6:	693b      	ldr	r3, [r7, #16]
 80048b8:	1c5a      	adds	r2, r3, #1
 80048ba:	613a      	str	r2, [r7, #16]
 80048bc:	68ba      	ldr	r2, [r7, #8]
 80048be:	4413      	add	r3, r2
 80048c0:	7efa      	ldrb	r2, [r7, #27]
 80048c2:	701a      	strb	r2, [r3, #0]
		c = (BYTE)p[si++];
 80048c4:	e7a6      	b.n	8004814 <create_name+0x2c>
		if (c <= ' ') break; 			/* Break if end of the path name */
 80048c6:	bf00      	nop
		}
	}
	*path = p + si;						/* Return pointer to the next segment */
 80048c8:	68fa      	ldr	r2, [r7, #12]
 80048ca:	69fb      	ldr	r3, [r7, #28]
 80048cc:	441a      	add	r2, r3
 80048ce:	683b      	ldr	r3, [r7, #0]
 80048d0:	601a      	str	r2, [r3, #0]
	if (i == 0) return FR_INVALID_NAME;	/* Reject nul string */
 80048d2:	693b      	ldr	r3, [r7, #16]
 80048d4:	2b00      	cmp	r3, #0
 80048d6:	d101      	bne.n	80048dc <create_name+0xf4>
 80048d8:	2306      	movs	r3, #6
 80048da:	e010      	b.n	80048fe <create_name+0x116>

	if (sfn[0] == DDEM) sfn[0] = RDDEM;	/* If the first character collides with DDEM, replace it with RDDEM */
 80048dc:	68bb      	ldr	r3, [r7, #8]
 80048de:	781b      	ldrb	r3, [r3, #0]
 80048e0:	2be5      	cmp	r3, #229	@ 0xe5
 80048e2:	d102      	bne.n	80048ea <create_name+0x102>
 80048e4:	68bb      	ldr	r3, [r7, #8]
 80048e6:	2205      	movs	r2, #5
 80048e8:	701a      	strb	r2, [r3, #0]
	sfn[NSFLAG] = (c <= ' ') ? NS_LAST : 0;		/* Set last segment flag if end of the path */
 80048ea:	7efb      	ldrb	r3, [r7, #27]
 80048ec:	2b20      	cmp	r3, #32
 80048ee:	d801      	bhi.n	80048f4 <create_name+0x10c>
 80048f0:	2204      	movs	r2, #4
 80048f2:	e000      	b.n	80048f6 <create_name+0x10e>
 80048f4:	2200      	movs	r2, #0
 80048f6:	68bb      	ldr	r3, [r7, #8]
 80048f8:	330b      	adds	r3, #11
 80048fa:	701a      	strb	r2, [r3, #0]

	return FR_OK;
 80048fc:	2300      	movs	r3, #0
#endif /* _USE_LFN != 0 */
}
 80048fe:	4618      	mov	r0, r3
 8004900:	3720      	adds	r7, #32
 8004902:	46bd      	mov	sp, r7
 8004904:	bd80      	pop	{r7, pc}
 8004906:	bf00      	nop
 8004908:	0801b520 	.word	0x0801b520
 800490c:	0801a1bc 	.word	0x0801a1bc

08004910 <follow_path>:
static
FRESULT follow_path (	/* FR_OK(0): successful, !=0: error code */
	DIR* dp,			/* Directory object to return last directory and found object */
	const TCHAR* path	/* Full-path string to find a file or directory */
)
{
 8004910:	b580      	push	{r7, lr}
 8004912:	b086      	sub	sp, #24
 8004914:	af00      	add	r7, sp, #0
 8004916:	6078      	str	r0, [r7, #4]
 8004918:	6039      	str	r1, [r7, #0]
	FRESULT res;
	BYTE ns;
	_FDID *obj = &dp->obj;
 800491a:	687b      	ldr	r3, [r7, #4]
 800491c:	613b      	str	r3, [r7, #16]
	FATFS *fs = obj->fs;
 800491e:	693b      	ldr	r3, [r7, #16]
 8004920:	681b      	ldr	r3, [r3, #0]
 8004922:	60fb      	str	r3, [r7, #12]
	if (*path != '/' && *path != '\\') {	/* Without heading separator */
		obj->sclust = fs->cdir;				/* Start from current directory */
	} else
#endif
	{										/* With heading separator */
		while (*path == '/' || *path == '\\') path++;	/* Strip heading separator */
 8004924:	e002      	b.n	800492c <follow_path+0x1c>
 8004926:	683b      	ldr	r3, [r7, #0]
 8004928:	3301      	adds	r3, #1
 800492a:	603b      	str	r3, [r7, #0]
 800492c:	683b      	ldr	r3, [r7, #0]
 800492e:	781b      	ldrb	r3, [r3, #0]
 8004930:	2b2f      	cmp	r3, #47	@ 0x2f
 8004932:	d0f8      	beq.n	8004926 <follow_path+0x16>
 8004934:	683b      	ldr	r3, [r7, #0]
 8004936:	781b      	ldrb	r3, [r3, #0]
 8004938:	2b5c      	cmp	r3, #92	@ 0x5c
 800493a:	d0f4      	beq.n	8004926 <follow_path+0x16>
		obj->sclust = 0;					/* Start from root directory */
 800493c:	693b      	ldr	r3, [r7, #16]
 800493e:	2200      	movs	r2, #0
 8004940:	609a      	str	r2, [r3, #8]
		obj->stat = fs->dirbuf[XDIR_GenFlags] & 2;
	}
#endif
#endif

	if ((UINT)*path < ' ') {				/* Null path name is the origin directory itself */
 8004942:	683b      	ldr	r3, [r7, #0]
 8004944:	781b      	ldrb	r3, [r3, #0]
 8004946:	2b1f      	cmp	r3, #31
 8004948:	d80a      	bhi.n	8004960 <follow_path+0x50>
		dp->fn[NSFLAG] = NS_NONAME;
 800494a:	687b      	ldr	r3, [r7, #4]
 800494c:	2280      	movs	r2, #128	@ 0x80
 800494e:	f883 202f 	strb.w	r2, [r3, #47]	@ 0x2f
		res = dir_sdi(dp, 0);
 8004952:	2100      	movs	r1, #0
 8004954:	6878      	ldr	r0, [r7, #4]
 8004956:	f7ff fcfa 	bl	800434e <dir_sdi>
 800495a:	4603      	mov	r3, r0
 800495c:	75fb      	strb	r3, [r7, #23]
 800495e:	e043      	b.n	80049e8 <follow_path+0xd8>

	} else {								/* Follow path */
		for (;;) {
			res = create_name(dp, &path);	/* Get a segment name of the path */
 8004960:	463b      	mov	r3, r7
 8004962:	4619      	mov	r1, r3
 8004964:	6878      	ldr	r0, [r7, #4]
 8004966:	f7ff ff3f 	bl	80047e8 <create_name>
 800496a:	4603      	mov	r3, r0
 800496c:	75fb      	strb	r3, [r7, #23]
			if (res != FR_OK) break;
 800496e:	7dfb      	ldrb	r3, [r7, #23]
 8004970:	2b00      	cmp	r3, #0
 8004972:	d134      	bne.n	80049de <follow_path+0xce>
			res = dir_find(dp);				/* Find an object with the segment name */
 8004974:	6878      	ldr	r0, [r7, #4]
 8004976:	f7ff feb0 	bl	80046da <dir_find>
 800497a:	4603      	mov	r3, r0
 800497c:	75fb      	strb	r3, [r7, #23]
			ns = dp->fn[NSFLAG];
 800497e:	687b      	ldr	r3, [r7, #4]
 8004980:	f893 302f 	ldrb.w	r3, [r3, #47]	@ 0x2f
 8004984:	72fb      	strb	r3, [r7, #11]
			if (res != FR_OK) {				/* Failed to find the object */
 8004986:	7dfb      	ldrb	r3, [r7, #23]
 8004988:	2b00      	cmp	r3, #0
 800498a:	d00a      	beq.n	80049a2 <follow_path+0x92>
				if (res == FR_NO_FILE) {	/* Object is not found */
 800498c:	7dfb      	ldrb	r3, [r7, #23]
 800498e:	2b04      	cmp	r3, #4
 8004990:	d127      	bne.n	80049e2 <follow_path+0xd2>
					if (_FS_RPATH && (ns & NS_DOT)) {	/* If dot entry is not exist, stay there */
						if (!(ns & NS_LAST)) continue;	/* Continue to follow if not last segment */
						dp->fn[NSFLAG] = NS_NONAME;
						res = FR_OK;
					} else {							/* Could not find the object */
						if (!(ns & NS_LAST)) res = FR_NO_PATH;	/* Adjust error code if not last segment */
 8004992:	7afb      	ldrb	r3, [r7, #11]
 8004994:	f003 0304 	and.w	r3, r3, #4
 8004998:	2b00      	cmp	r3, #0
 800499a:	d122      	bne.n	80049e2 <follow_path+0xd2>
 800499c:	2305      	movs	r3, #5
 800499e:	75fb      	strb	r3, [r7, #23]
					}
				}
				break;
 80049a0:	e01f      	b.n	80049e2 <follow_path+0xd2>
			}
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
 80049a2:	7afb      	ldrb	r3, [r7, #11]
 80049a4:	f003 0304 	and.w	r3, r3, #4
 80049a8:	2b00      	cmp	r3, #0
 80049aa:	d11c      	bne.n	80049e6 <follow_path+0xd6>
			/* Get into the sub-directory */
			if (!(obj->attr & AM_DIR)) {		/* It is not a sub-directory and cannot follow */
 80049ac:	693b      	ldr	r3, [r7, #16]
 80049ae:	799b      	ldrb	r3, [r3, #6]
 80049b0:	f003 0310 	and.w	r3, r3, #16
 80049b4:	2b00      	cmp	r3, #0
 80049b6:	d102      	bne.n	80049be <follow_path+0xae>
				res = FR_NO_PATH; break;
 80049b8:	2305      	movs	r3, #5
 80049ba:	75fb      	strb	r3, [r7, #23]
 80049bc:	e014      	b.n	80049e8 <follow_path+0xd8>
				obj->stat = fs->dirbuf[XDIR_GenFlags] & 2;
				obj->objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
			} else
#endif
			{
				obj->sclust = ld_clust(fs, fs->win + dp->dptr % SS(fs));	/* Open next directory */
 80049be:	68fb      	ldr	r3, [r7, #12]
 80049c0:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 80049c4:	687b      	ldr	r3, [r7, #4]
 80049c6:	695b      	ldr	r3, [r3, #20]
 80049c8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80049cc:	4413      	add	r3, r2
 80049ce:	4619      	mov	r1, r3
 80049d0:	68f8      	ldr	r0, [r7, #12]
 80049d2:	f7ff fe43 	bl	800465c <ld_clust>
 80049d6:	4602      	mov	r2, r0
 80049d8:	693b      	ldr	r3, [r7, #16]
 80049da:	609a      	str	r2, [r3, #8]
			res = create_name(dp, &path);	/* Get a segment name of the path */
 80049dc:	e7c0      	b.n	8004960 <follow_path+0x50>
			if (res != FR_OK) break;
 80049de:	bf00      	nop
 80049e0:	e002      	b.n	80049e8 <follow_path+0xd8>
				break;
 80049e2:	bf00      	nop
 80049e4:	e000      	b.n	80049e8 <follow_path+0xd8>
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
 80049e6:	bf00      	nop
			}
		}
	}

	return res;
 80049e8:	7dfb      	ldrb	r3, [r7, #23]
}
 80049ea:	4618      	mov	r0, r3
 80049ec:	3718      	adds	r7, #24
 80049ee:	46bd      	mov	sp, r7
 80049f0:	bd80      	pop	{r7, pc}

080049f2 <get_ldnumber>:

static
int get_ldnumber (		/* Returns logical drive number (-1:invalid drive) */
	const TCHAR** path	/* Pointer to pointer to the path name */
)
{
 80049f2:	b480      	push	{r7}
 80049f4:	b087      	sub	sp, #28
 80049f6:	af00      	add	r7, sp, #0
 80049f8:	6078      	str	r0, [r7, #4]
	const TCHAR *tp, *tt;
	UINT i;
	int vol = -1;
 80049fa:	f04f 33ff 	mov.w	r3, #4294967295
 80049fe:	613b      	str	r3, [r7, #16]
	char c;
	TCHAR tc;
#endif


	if (*path) {	/* If the pointer is not a null */
 8004a00:	687b      	ldr	r3, [r7, #4]
 8004a02:	681b      	ldr	r3, [r3, #0]
 8004a04:	2b00      	cmp	r3, #0
 8004a06:	d031      	beq.n	8004a6c <get_ldnumber+0x7a>
		for (tt = *path; (UINT)*tt >= (_USE_LFN ? ' ' : '!') && *tt != ':'; tt++) ;	/* Find ':' in the path */
 8004a08:	687b      	ldr	r3, [r7, #4]
 8004a0a:	681b      	ldr	r3, [r3, #0]
 8004a0c:	617b      	str	r3, [r7, #20]
 8004a0e:	e002      	b.n	8004a16 <get_ldnumber+0x24>
 8004a10:	697b      	ldr	r3, [r7, #20]
 8004a12:	3301      	adds	r3, #1
 8004a14:	617b      	str	r3, [r7, #20]
 8004a16:	697b      	ldr	r3, [r7, #20]
 8004a18:	781b      	ldrb	r3, [r3, #0]
 8004a1a:	2b20      	cmp	r3, #32
 8004a1c:	d903      	bls.n	8004a26 <get_ldnumber+0x34>
 8004a1e:	697b      	ldr	r3, [r7, #20]
 8004a20:	781b      	ldrb	r3, [r3, #0]
 8004a22:	2b3a      	cmp	r3, #58	@ 0x3a
 8004a24:	d1f4      	bne.n	8004a10 <get_ldnumber+0x1e>
		if (*tt == ':') {	/* If a ':' is exist in the path name */
 8004a26:	697b      	ldr	r3, [r7, #20]
 8004a28:	781b      	ldrb	r3, [r3, #0]
 8004a2a:	2b3a      	cmp	r3, #58	@ 0x3a
 8004a2c:	d11c      	bne.n	8004a68 <get_ldnumber+0x76>
			tp = *path;
 8004a2e:	687b      	ldr	r3, [r7, #4]
 8004a30:	681b      	ldr	r3, [r3, #0]
 8004a32:	60fb      	str	r3, [r7, #12]
			i = *tp++ - '0';
 8004a34:	68fb      	ldr	r3, [r7, #12]
 8004a36:	1c5a      	adds	r2, r3, #1
 8004a38:	60fa      	str	r2, [r7, #12]
 8004a3a:	781b      	ldrb	r3, [r3, #0]
 8004a3c:	3b30      	subs	r3, #48	@ 0x30
 8004a3e:	60bb      	str	r3, [r7, #8]
			if (i < 10 && tp == tt) {	/* Is there a numeric drive id? */
 8004a40:	68bb      	ldr	r3, [r7, #8]
 8004a42:	2b09      	cmp	r3, #9
 8004a44:	d80e      	bhi.n	8004a64 <get_ldnumber+0x72>
 8004a46:	68fa      	ldr	r2, [r7, #12]
 8004a48:	697b      	ldr	r3, [r7, #20]
 8004a4a:	429a      	cmp	r2, r3
 8004a4c:	d10a      	bne.n	8004a64 <get_ldnumber+0x72>
				if (i < _VOLUMES) {	/* If a drive id is found, get the value and strip it */
 8004a4e:	68bb      	ldr	r3, [r7, #8]
 8004a50:	2b00      	cmp	r3, #0
 8004a52:	d107      	bne.n	8004a64 <get_ldnumber+0x72>
					vol = (int)i;
 8004a54:	68bb      	ldr	r3, [r7, #8]
 8004a56:	613b      	str	r3, [r7, #16]
					*path = ++tt;
 8004a58:	697b      	ldr	r3, [r7, #20]
 8004a5a:	3301      	adds	r3, #1
 8004a5c:	617b      	str	r3, [r7, #20]
 8004a5e:	687b      	ldr	r3, [r7, #4]
 8004a60:	697a      	ldr	r2, [r7, #20]
 8004a62:	601a      	str	r2, [r3, #0]
					vol = (int)i;
					*path = tt;
				}
			}
#endif
			return vol;
 8004a64:	693b      	ldr	r3, [r7, #16]
 8004a66:	e002      	b.n	8004a6e <get_ldnumber+0x7c>
		}
#if _FS_RPATH != 0 && _VOLUMES >= 2
		vol = CurrVol;	/* Current drive */
#else
		vol = 0;		/* Drive 0 */
 8004a68:	2300      	movs	r3, #0
 8004a6a:	613b      	str	r3, [r7, #16]
#endif
	}
	return vol;
 8004a6c:	693b      	ldr	r3, [r7, #16]
}
 8004a6e:	4618      	mov	r0, r3
 8004a70:	371c      	adds	r7, #28
 8004a72:	46bd      	mov	sp, r7
 8004a74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a78:	4770      	bx	lr
	...

08004a7c <check_fs>:
static
BYTE check_fs (	/* 0:FAT, 1:exFAT, 2:Valid BS but not FAT, 3:Not a BS, 4:Disk error */
	FATFS* fs,	/* File system object */
	DWORD sect	/* Sector# (lba) to load and check if it is an FAT-VBR or not */
)
{
 8004a7c:	b580      	push	{r7, lr}
 8004a7e:	b082      	sub	sp, #8
 8004a80:	af00      	add	r7, sp, #0
 8004a82:	6078      	str	r0, [r7, #4]
 8004a84:	6039      	str	r1, [r7, #0]
	fs->wflag = 0; fs->winsect = 0xFFFFFFFF;		/* Invaidate window */
 8004a86:	687b      	ldr	r3, [r7, #4]
 8004a88:	2200      	movs	r2, #0
 8004a8a:	70da      	strb	r2, [r3, #3]
 8004a8c:	687b      	ldr	r3, [r7, #4]
 8004a8e:	f04f 32ff 	mov.w	r2, #4294967295
 8004a92:	62da      	str	r2, [r3, #44]	@ 0x2c
	if (move_window(fs, sect) != FR_OK) return 4;	/* Load boot record */
 8004a94:	6839      	ldr	r1, [r7, #0]
 8004a96:	6878      	ldr	r0, [r7, #4]
 8004a98:	f7ff f8dc 	bl	8003c54 <move_window>
 8004a9c:	4603      	mov	r3, r0
 8004a9e:	2b00      	cmp	r3, #0
 8004aa0:	d001      	beq.n	8004aa6 <check_fs+0x2a>
 8004aa2:	2304      	movs	r3, #4
 8004aa4:	e038      	b.n	8004b18 <check_fs+0x9c>

	if (ld_word(fs->win + BS_55AA) != 0xAA55) return 3;	/* Check boot record signature (always placed here even if the sector size is >512) */
 8004aa6:	687b      	ldr	r3, [r7, #4]
 8004aa8:	3330      	adds	r3, #48	@ 0x30
 8004aaa:	f503 73ff 	add.w	r3, r3, #510	@ 0x1fe
 8004aae:	4618      	mov	r0, r3
 8004ab0:	f7fe fe20 	bl	80036f4 <ld_word>
 8004ab4:	4603      	mov	r3, r0
 8004ab6:	461a      	mov	r2, r3
 8004ab8:	f64a 2355 	movw	r3, #43605	@ 0xaa55
 8004abc:	429a      	cmp	r2, r3
 8004abe:	d001      	beq.n	8004ac4 <check_fs+0x48>
 8004ac0:	2303      	movs	r3, #3
 8004ac2:	e029      	b.n	8004b18 <check_fs+0x9c>

	if (fs->win[BS_JmpBoot] == 0xE9 || (fs->win[BS_JmpBoot] == 0xEB && fs->win[BS_JmpBoot + 2] == 0x90)) {
 8004ac4:	687b      	ldr	r3, [r7, #4]
 8004ac6:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 8004aca:	2be9      	cmp	r3, #233	@ 0xe9
 8004acc:	d009      	beq.n	8004ae2 <check_fs+0x66>
 8004ace:	687b      	ldr	r3, [r7, #4]
 8004ad0:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 8004ad4:	2beb      	cmp	r3, #235	@ 0xeb
 8004ad6:	d11e      	bne.n	8004b16 <check_fs+0x9a>
 8004ad8:	687b      	ldr	r3, [r7, #4]
 8004ada:	f893 3032 	ldrb.w	r3, [r3, #50]	@ 0x32
 8004ade:	2b90      	cmp	r3, #144	@ 0x90
 8004ae0:	d119      	bne.n	8004b16 <check_fs+0x9a>
		if ((ld_dword(fs->win + BS_FilSysType) & 0xFFFFFF) == 0x544146) return 0;	/* Check "FAT" string */
 8004ae2:	687b      	ldr	r3, [r7, #4]
 8004ae4:	3330      	adds	r3, #48	@ 0x30
 8004ae6:	3336      	adds	r3, #54	@ 0x36
 8004ae8:	4618      	mov	r0, r3
 8004aea:	f7fe fe1b 	bl	8003724 <ld_dword>
 8004aee:	4603      	mov	r3, r0
 8004af0:	f023 437f 	bic.w	r3, r3, #4278190080	@ 0xff000000
 8004af4:	4a0a      	ldr	r2, [pc, #40]	@ (8004b20 <check_fs+0xa4>)
 8004af6:	4293      	cmp	r3, r2
 8004af8:	d101      	bne.n	8004afe <check_fs+0x82>
 8004afa:	2300      	movs	r3, #0
 8004afc:	e00c      	b.n	8004b18 <check_fs+0x9c>
		if (ld_dword(fs->win + BS_FilSysType32) == 0x33544146) return 0;			/* Check "FAT3" string */
 8004afe:	687b      	ldr	r3, [r7, #4]
 8004b00:	3330      	adds	r3, #48	@ 0x30
 8004b02:	3352      	adds	r3, #82	@ 0x52
 8004b04:	4618      	mov	r0, r3
 8004b06:	f7fe fe0d 	bl	8003724 <ld_dword>
 8004b0a:	4603      	mov	r3, r0
 8004b0c:	4a05      	ldr	r2, [pc, #20]	@ (8004b24 <check_fs+0xa8>)
 8004b0e:	4293      	cmp	r3, r2
 8004b10:	d101      	bne.n	8004b16 <check_fs+0x9a>
 8004b12:	2300      	movs	r3, #0
 8004b14:	e000      	b.n	8004b18 <check_fs+0x9c>
	}
#if _FS_EXFAT
	if (!mem_cmp(fs->win + BS_JmpBoot, "\xEB\x76\x90" "EXFAT   ", 11)) return 1;
#endif
	return 2;
 8004b16:	2302      	movs	r3, #2
}
 8004b18:	4618      	mov	r0, r3
 8004b1a:	3708      	adds	r7, #8
 8004b1c:	46bd      	mov	sp, r7
 8004b1e:	bd80      	pop	{r7, pc}
 8004b20:	00544146 	.word	0x00544146
 8004b24:	33544146 	.word	0x33544146

08004b28 <find_volume>:
FRESULT find_volume (	/* FR_OK(0): successful, !=0: any error occurred */
	const TCHAR** path,	/* Pointer to pointer to the path name (drive number) */
	FATFS** rfs,		/* Pointer to pointer to the found file system object */
	BYTE mode			/* !=0: Check write protection for write access */
)
{
 8004b28:	b580      	push	{r7, lr}
 8004b2a:	b096      	sub	sp, #88	@ 0x58
 8004b2c:	af00      	add	r7, sp, #0
 8004b2e:	60f8      	str	r0, [r7, #12]
 8004b30:	60b9      	str	r1, [r7, #8]
 8004b32:	4613      	mov	r3, r2
 8004b34:	71fb      	strb	r3, [r7, #7]
	FATFS *fs;
	UINT i;


	/* Get logical drive number */
	*rfs = 0;
 8004b36:	68bb      	ldr	r3, [r7, #8]
 8004b38:	2200      	movs	r2, #0
 8004b3a:	601a      	str	r2, [r3, #0]
	vol = get_ldnumber(path);
 8004b3c:	68f8      	ldr	r0, [r7, #12]
 8004b3e:	f7ff ff58 	bl	80049f2 <get_ldnumber>
 8004b42:	63f8      	str	r0, [r7, #60]	@ 0x3c
	if (vol < 0) return FR_INVALID_DRIVE;
 8004b44:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8004b46:	2b00      	cmp	r3, #0
 8004b48:	da01      	bge.n	8004b4e <find_volume+0x26>
 8004b4a:	230b      	movs	r3, #11
 8004b4c:	e22d      	b.n	8004faa <find_volume+0x482>

	/* Check if the file system object is valid or not */
	fs = FatFs[vol];					/* Get pointer to the file system object */
 8004b4e:	4aa1      	ldr	r2, [pc, #644]	@ (8004dd4 <find_volume+0x2ac>)
 8004b50:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8004b52:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004b56:	63bb      	str	r3, [r7, #56]	@ 0x38
	if (!fs) return FR_NOT_ENABLED;		/* Is the file system object available? */
 8004b58:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004b5a:	2b00      	cmp	r3, #0
 8004b5c:	d101      	bne.n	8004b62 <find_volume+0x3a>
 8004b5e:	230c      	movs	r3, #12
 8004b60:	e223      	b.n	8004faa <find_volume+0x482>

	ENTER_FF(fs);						/* Lock the volume */
	*rfs = fs;							/* Return pointer to the file system object */
 8004b62:	68bb      	ldr	r3, [r7, #8]
 8004b64:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8004b66:	601a      	str	r2, [r3, #0]

	mode &= (BYTE)~FA_READ;				/* Desired access mode, write access or not */
 8004b68:	79fb      	ldrb	r3, [r7, #7]
 8004b6a:	f023 0301 	bic.w	r3, r3, #1
 8004b6e:	71fb      	strb	r3, [r7, #7]
	if (fs->fs_type) {					/* If the volume has been mounted */
 8004b70:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004b72:	781b      	ldrb	r3, [r3, #0]
 8004b74:	2b00      	cmp	r3, #0
 8004b76:	d01a      	beq.n	8004bae <find_volume+0x86>
		stat = disk_status(fs->drv);
 8004b78:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004b7a:	785b      	ldrb	r3, [r3, #1]
 8004b7c:	4618      	mov	r0, r3
 8004b7e:	f7fe fd19 	bl	80035b4 <disk_status>
 8004b82:	4603      	mov	r3, r0
 8004b84:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
		if (!(stat & STA_NOINIT)) {		/* and the physical drive is kept initialized */
 8004b88:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 8004b8c:	f003 0301 	and.w	r3, r3, #1
 8004b90:	2b00      	cmp	r3, #0
 8004b92:	d10c      	bne.n	8004bae <find_volume+0x86>
			if (!_FS_READONLY && mode && (stat & STA_PROTECT)) {	/* Check write protection if needed */
 8004b94:	79fb      	ldrb	r3, [r7, #7]
 8004b96:	2b00      	cmp	r3, #0
 8004b98:	d007      	beq.n	8004baa <find_volume+0x82>
 8004b9a:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 8004b9e:	f003 0304 	and.w	r3, r3, #4
 8004ba2:	2b00      	cmp	r3, #0
 8004ba4:	d001      	beq.n	8004baa <find_volume+0x82>
				return FR_WRITE_PROTECTED;
 8004ba6:	230a      	movs	r3, #10
 8004ba8:	e1ff      	b.n	8004faa <find_volume+0x482>
			}
			return FR_OK;				/* The file system object is valid */
 8004baa:	2300      	movs	r3, #0
 8004bac:	e1fd      	b.n	8004faa <find_volume+0x482>
	}

	/* The file system object is not valid. */
	/* Following code attempts to mount the volume. (analyze BPB and initialize the fs object) */

	fs->fs_type = 0;					/* Clear the file system object */
 8004bae:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004bb0:	2200      	movs	r2, #0
 8004bb2:	701a      	strb	r2, [r3, #0]
	fs->drv = LD2PD(vol);				/* Bind the logical drive and a physical drive */
 8004bb4:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8004bb6:	b2da      	uxtb	r2, r3
 8004bb8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004bba:	705a      	strb	r2, [r3, #1]
	stat = disk_initialize(fs->drv);	/* Initialize the physical drive */
 8004bbc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004bbe:	785b      	ldrb	r3, [r3, #1]
 8004bc0:	4618      	mov	r0, r3
 8004bc2:	f7fe fd11 	bl	80035e8 <disk_initialize>
 8004bc6:	4603      	mov	r3, r0
 8004bc8:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
	if (stat & STA_NOINIT) { 			/* Check if the initialization succeeded */
 8004bcc:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 8004bd0:	f003 0301 	and.w	r3, r3, #1
 8004bd4:	2b00      	cmp	r3, #0
 8004bd6:	d001      	beq.n	8004bdc <find_volume+0xb4>
		return FR_NOT_READY;			/* Failed to initialize due to no medium or hard error */
 8004bd8:	2303      	movs	r3, #3
 8004bda:	e1e6      	b.n	8004faa <find_volume+0x482>
	}
	if (!_FS_READONLY && mode && (stat & STA_PROTECT)) { /* Check disk write protection if needed */
 8004bdc:	79fb      	ldrb	r3, [r7, #7]
 8004bde:	2b00      	cmp	r3, #0
 8004be0:	d007      	beq.n	8004bf2 <find_volume+0xca>
 8004be2:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 8004be6:	f003 0304 	and.w	r3, r3, #4
 8004bea:	2b00      	cmp	r3, #0
 8004bec:	d001      	beq.n	8004bf2 <find_volume+0xca>
		return FR_WRITE_PROTECTED;
 8004bee:	230a      	movs	r3, #10
 8004bf0:	e1db      	b.n	8004faa <find_volume+0x482>
	if (disk_ioctl(fs->drv, GET_SECTOR_SIZE, &SS(fs)) != RES_OK) return FR_DISK_ERR;
	if (SS(fs) > _MAX_SS || SS(fs) < _MIN_SS || (SS(fs) & (SS(fs) - 1))) return FR_DISK_ERR;
#endif

	/* Find an FAT partition on the drive. Supports only generic partitioning rules, FDISK and SFD. */
	bsect = 0;
 8004bf2:	2300      	movs	r3, #0
 8004bf4:	653b      	str	r3, [r7, #80]	@ 0x50
	fmt = check_fs(fs, bsect);			/* Load sector 0 and check if it is an FAT-VBR as SFD */
 8004bf6:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 8004bf8:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 8004bfa:	f7ff ff3f 	bl	8004a7c <check_fs>
 8004bfe:	4603      	mov	r3, r0
 8004c00:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
	if (fmt == 2 || (fmt < 2 && LD2PT(vol) != 0)) {	/* Not an FAT-VBR or forced partition number */
 8004c04:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 8004c08:	2b02      	cmp	r3, #2
 8004c0a:	d149      	bne.n	8004ca0 <find_volume+0x178>
		for (i = 0; i < 4; i++) {		/* Get partition offset */
 8004c0c:	2300      	movs	r3, #0
 8004c0e:	643b      	str	r3, [r7, #64]	@ 0x40
 8004c10:	e01e      	b.n	8004c50 <find_volume+0x128>
			pt = fs->win + (MBR_Table + i * SZ_PTE);
 8004c12:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004c14:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 8004c18:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8004c1a:	011b      	lsls	r3, r3, #4
 8004c1c:	f503 73df 	add.w	r3, r3, #446	@ 0x1be
 8004c20:	4413      	add	r3, r2
 8004c22:	633b      	str	r3, [r7, #48]	@ 0x30
			br[i] = pt[PTE_System] ? ld_dword(pt + PTE_StLba) : 0;
 8004c24:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004c26:	3304      	adds	r3, #4
 8004c28:	781b      	ldrb	r3, [r3, #0]
 8004c2a:	2b00      	cmp	r3, #0
 8004c2c:	d006      	beq.n	8004c3c <find_volume+0x114>
 8004c2e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004c30:	3308      	adds	r3, #8
 8004c32:	4618      	mov	r0, r3
 8004c34:	f7fe fd76 	bl	8003724 <ld_dword>
 8004c38:	4602      	mov	r2, r0
 8004c3a:	e000      	b.n	8004c3e <find_volume+0x116>
 8004c3c:	2200      	movs	r2, #0
 8004c3e:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8004c40:	009b      	lsls	r3, r3, #2
 8004c42:	3358      	adds	r3, #88	@ 0x58
 8004c44:	443b      	add	r3, r7
 8004c46:	f843 2c44 	str.w	r2, [r3, #-68]
		for (i = 0; i < 4; i++) {		/* Get partition offset */
 8004c4a:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8004c4c:	3301      	adds	r3, #1
 8004c4e:	643b      	str	r3, [r7, #64]	@ 0x40
 8004c50:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8004c52:	2b03      	cmp	r3, #3
 8004c54:	d9dd      	bls.n	8004c12 <find_volume+0xea>
		}
		i = LD2PT(vol);					/* Partition number: 0:auto, 1-4:forced */
 8004c56:	2300      	movs	r3, #0
 8004c58:	643b      	str	r3, [r7, #64]	@ 0x40
		if (i) i--;
 8004c5a:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8004c5c:	2b00      	cmp	r3, #0
 8004c5e:	d002      	beq.n	8004c66 <find_volume+0x13e>
 8004c60:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8004c62:	3b01      	subs	r3, #1
 8004c64:	643b      	str	r3, [r7, #64]	@ 0x40
		do {							/* Find an FAT volume */
			bsect = br[i];
 8004c66:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8004c68:	009b      	lsls	r3, r3, #2
 8004c6a:	3358      	adds	r3, #88	@ 0x58
 8004c6c:	443b      	add	r3, r7
 8004c6e:	f853 3c44 	ldr.w	r3, [r3, #-68]
 8004c72:	653b      	str	r3, [r7, #80]	@ 0x50
			fmt = bsect ? check_fs(fs, bsect) : 3;	/* Check the partition */
 8004c74:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8004c76:	2b00      	cmp	r3, #0
 8004c78:	d005      	beq.n	8004c86 <find_volume+0x15e>
 8004c7a:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 8004c7c:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 8004c7e:	f7ff fefd 	bl	8004a7c <check_fs>
 8004c82:	4603      	mov	r3, r0
 8004c84:	e000      	b.n	8004c88 <find_volume+0x160>
 8004c86:	2303      	movs	r3, #3
 8004c88:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
		} while (LD2PT(vol) == 0 && fmt >= 2 && ++i < 4);
 8004c8c:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 8004c90:	2b01      	cmp	r3, #1
 8004c92:	d905      	bls.n	8004ca0 <find_volume+0x178>
 8004c94:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8004c96:	3301      	adds	r3, #1
 8004c98:	643b      	str	r3, [r7, #64]	@ 0x40
 8004c9a:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8004c9c:	2b03      	cmp	r3, #3
 8004c9e:	d9e2      	bls.n	8004c66 <find_volume+0x13e>
	}
	if (fmt == 4) return FR_DISK_ERR;		/* An error occured in the disk I/O layer */
 8004ca0:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 8004ca4:	2b04      	cmp	r3, #4
 8004ca6:	d101      	bne.n	8004cac <find_volume+0x184>
 8004ca8:	2301      	movs	r3, #1
 8004caa:	e17e      	b.n	8004faa <find_volume+0x482>
	if (fmt >= 2) return FR_NO_FILESYSTEM;	/* No FAT volume is found */
 8004cac:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 8004cb0:	2b01      	cmp	r3, #1
 8004cb2:	d901      	bls.n	8004cb8 <find_volume+0x190>
 8004cb4:	230d      	movs	r3, #13
 8004cb6:	e178      	b.n	8004faa <find_volume+0x482>
#endif
		fmt = FS_EXFAT;			/* FAT sub-type */
	} else
#endif	/* _FS_EXFAT */
	{
		if (ld_word(fs->win + BPB_BytsPerSec) != SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_BytsPerSec must be equal to the physical sector size) */
 8004cb8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004cba:	3330      	adds	r3, #48	@ 0x30
 8004cbc:	330b      	adds	r3, #11
 8004cbe:	4618      	mov	r0, r3
 8004cc0:	f7fe fd18 	bl	80036f4 <ld_word>
 8004cc4:	4603      	mov	r3, r0
 8004cc6:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8004cca:	d001      	beq.n	8004cd0 <find_volume+0x1a8>
 8004ccc:	230d      	movs	r3, #13
 8004cce:	e16c      	b.n	8004faa <find_volume+0x482>

		fasize = ld_word(fs->win + BPB_FATSz16);		/* Number of sectors per FAT */
 8004cd0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004cd2:	3330      	adds	r3, #48	@ 0x30
 8004cd4:	3316      	adds	r3, #22
 8004cd6:	4618      	mov	r0, r3
 8004cd8:	f7fe fd0c 	bl	80036f4 <ld_word>
 8004cdc:	4603      	mov	r3, r0
 8004cde:	64fb      	str	r3, [r7, #76]	@ 0x4c
		if (fasize == 0) fasize = ld_dword(fs->win + BPB_FATSz32);
 8004ce0:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8004ce2:	2b00      	cmp	r3, #0
 8004ce4:	d106      	bne.n	8004cf4 <find_volume+0x1cc>
 8004ce6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004ce8:	3330      	adds	r3, #48	@ 0x30
 8004cea:	3324      	adds	r3, #36	@ 0x24
 8004cec:	4618      	mov	r0, r3
 8004cee:	f7fe fd19 	bl	8003724 <ld_dword>
 8004cf2:	64f8      	str	r0, [r7, #76]	@ 0x4c
		fs->fsize = fasize;
 8004cf4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004cf6:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8004cf8:	619a      	str	r2, [r3, #24]

		fs->n_fats = fs->win[BPB_NumFATs];				/* Number of FATs */
 8004cfa:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004cfc:	f893 2040 	ldrb.w	r2, [r3, #64]	@ 0x40
 8004d00:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004d02:	709a      	strb	r2, [r3, #2]
		if (fs->n_fats != 1 && fs->n_fats != 2) return FR_NO_FILESYSTEM;	/* (Must be 1 or 2) */
 8004d04:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004d06:	789b      	ldrb	r3, [r3, #2]
 8004d08:	2b01      	cmp	r3, #1
 8004d0a:	d005      	beq.n	8004d18 <find_volume+0x1f0>
 8004d0c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004d0e:	789b      	ldrb	r3, [r3, #2]
 8004d10:	2b02      	cmp	r3, #2
 8004d12:	d001      	beq.n	8004d18 <find_volume+0x1f0>
 8004d14:	230d      	movs	r3, #13
 8004d16:	e148      	b.n	8004faa <find_volume+0x482>
		fasize *= fs->n_fats;							/* Number of sectors for FAT area */
 8004d18:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004d1a:	789b      	ldrb	r3, [r3, #2]
 8004d1c:	461a      	mov	r2, r3
 8004d1e:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8004d20:	fb02 f303 	mul.w	r3, r2, r3
 8004d24:	64fb      	str	r3, [r7, #76]	@ 0x4c

		fs->csize = fs->win[BPB_SecPerClus];			/* Cluster size */
 8004d26:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004d28:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8004d2c:	461a      	mov	r2, r3
 8004d2e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004d30:	815a      	strh	r2, [r3, #10]
		if (fs->csize == 0 || (fs->csize & (fs->csize - 1))) return FR_NO_FILESYSTEM;	/* (Must be power of 2) */
 8004d32:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004d34:	895b      	ldrh	r3, [r3, #10]
 8004d36:	2b00      	cmp	r3, #0
 8004d38:	d008      	beq.n	8004d4c <find_volume+0x224>
 8004d3a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004d3c:	895b      	ldrh	r3, [r3, #10]
 8004d3e:	461a      	mov	r2, r3
 8004d40:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004d42:	895b      	ldrh	r3, [r3, #10]
 8004d44:	3b01      	subs	r3, #1
 8004d46:	4013      	ands	r3, r2
 8004d48:	2b00      	cmp	r3, #0
 8004d4a:	d001      	beq.n	8004d50 <find_volume+0x228>
 8004d4c:	230d      	movs	r3, #13
 8004d4e:	e12c      	b.n	8004faa <find_volume+0x482>

		fs->n_rootdir = ld_word(fs->win + BPB_RootEntCnt);	/* Number of root directory entries */
 8004d50:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004d52:	3330      	adds	r3, #48	@ 0x30
 8004d54:	3311      	adds	r3, #17
 8004d56:	4618      	mov	r0, r3
 8004d58:	f7fe fccc 	bl	80036f4 <ld_word>
 8004d5c:	4603      	mov	r3, r0
 8004d5e:	461a      	mov	r2, r3
 8004d60:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004d62:	811a      	strh	r2, [r3, #8]
		if (fs->n_rootdir % (SS(fs) / SZDIRE)) return FR_NO_FILESYSTEM;	/* (Must be sector aligned) */
 8004d64:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004d66:	891b      	ldrh	r3, [r3, #8]
 8004d68:	f003 030f 	and.w	r3, r3, #15
 8004d6c:	b29b      	uxth	r3, r3
 8004d6e:	2b00      	cmp	r3, #0
 8004d70:	d001      	beq.n	8004d76 <find_volume+0x24e>
 8004d72:	230d      	movs	r3, #13
 8004d74:	e119      	b.n	8004faa <find_volume+0x482>

		tsect = ld_word(fs->win + BPB_TotSec16);		/* Number of sectors on the volume */
 8004d76:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004d78:	3330      	adds	r3, #48	@ 0x30
 8004d7a:	3313      	adds	r3, #19
 8004d7c:	4618      	mov	r0, r3
 8004d7e:	f7fe fcb9 	bl	80036f4 <ld_word>
 8004d82:	4603      	mov	r3, r0
 8004d84:	64bb      	str	r3, [r7, #72]	@ 0x48
		if (tsect == 0) tsect = ld_dword(fs->win + BPB_TotSec32);
 8004d86:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8004d88:	2b00      	cmp	r3, #0
 8004d8a:	d106      	bne.n	8004d9a <find_volume+0x272>
 8004d8c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004d8e:	3330      	adds	r3, #48	@ 0x30
 8004d90:	3320      	adds	r3, #32
 8004d92:	4618      	mov	r0, r3
 8004d94:	f7fe fcc6 	bl	8003724 <ld_dword>
 8004d98:	64b8      	str	r0, [r7, #72]	@ 0x48

		nrsv = ld_word(fs->win + BPB_RsvdSecCnt);		/* Number of reserved sectors */
 8004d9a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004d9c:	3330      	adds	r3, #48	@ 0x30
 8004d9e:	330e      	adds	r3, #14
 8004da0:	4618      	mov	r0, r3
 8004da2:	f7fe fca7 	bl	80036f4 <ld_word>
 8004da6:	4603      	mov	r3, r0
 8004da8:	85fb      	strh	r3, [r7, #46]	@ 0x2e
		if (nrsv == 0) return FR_NO_FILESYSTEM;			/* (Must not be 0) */
 8004daa:	8dfb      	ldrh	r3, [r7, #46]	@ 0x2e
 8004dac:	2b00      	cmp	r3, #0
 8004dae:	d101      	bne.n	8004db4 <find_volume+0x28c>
 8004db0:	230d      	movs	r3, #13
 8004db2:	e0fa      	b.n	8004faa <find_volume+0x482>

		/* Determine the FAT sub type */
		sysect = nrsv + fasize + fs->n_rootdir / (SS(fs) / SZDIRE);	/* RSV + FAT + DIR */
 8004db4:	8dfa      	ldrh	r2, [r7, #46]	@ 0x2e
 8004db6:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8004db8:	4413      	add	r3, r2
 8004dba:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8004dbc:	8912      	ldrh	r2, [r2, #8]
 8004dbe:	0912      	lsrs	r2, r2, #4
 8004dc0:	b292      	uxth	r2, r2
 8004dc2:	4413      	add	r3, r2
 8004dc4:	62bb      	str	r3, [r7, #40]	@ 0x28
		if (tsect < sysect) return FR_NO_FILESYSTEM;	/* (Invalid volume size) */
 8004dc6:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8004dc8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004dca:	429a      	cmp	r2, r3
 8004dcc:	d204      	bcs.n	8004dd8 <find_volume+0x2b0>
 8004dce:	230d      	movs	r3, #13
 8004dd0:	e0eb      	b.n	8004faa <find_volume+0x482>
 8004dd2:	bf00      	nop
 8004dd4:	2000010c 	.word	0x2000010c
		nclst = (tsect - sysect) / fs->csize;			/* Number of clusters */
 8004dd8:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8004dda:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004ddc:	1ad3      	subs	r3, r2, r3
 8004dde:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8004de0:	8952      	ldrh	r2, [r2, #10]
 8004de2:	fbb3 f3f2 	udiv	r3, r3, r2
 8004de6:	627b      	str	r3, [r7, #36]	@ 0x24
		if (nclst == 0) return FR_NO_FILESYSTEM;		/* (Invalid volume size) */
 8004de8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004dea:	2b00      	cmp	r3, #0
 8004dec:	d101      	bne.n	8004df2 <find_volume+0x2ca>
 8004dee:	230d      	movs	r3, #13
 8004df0:	e0db      	b.n	8004faa <find_volume+0x482>
		fmt = FS_FAT32;
 8004df2:	2303      	movs	r3, #3
 8004df4:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
		if (nclst <= MAX_FAT16) fmt = FS_FAT16;
 8004df8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004dfa:	f64f 72f5 	movw	r2, #65525	@ 0xfff5
 8004dfe:	4293      	cmp	r3, r2
 8004e00:	d802      	bhi.n	8004e08 <find_volume+0x2e0>
 8004e02:	2302      	movs	r3, #2
 8004e04:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
		if (nclst <= MAX_FAT12) fmt = FS_FAT12;
 8004e08:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004e0a:	f640 72f5 	movw	r2, #4085	@ 0xff5
 8004e0e:	4293      	cmp	r3, r2
 8004e10:	d802      	bhi.n	8004e18 <find_volume+0x2f0>
 8004e12:	2301      	movs	r3, #1
 8004e14:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57

		/* Boundaries and Limits */
		fs->n_fatent = nclst + 2;						/* Number of FAT entries */
 8004e18:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004e1a:	1c9a      	adds	r2, r3, #2
 8004e1c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004e1e:	615a      	str	r2, [r3, #20]
		fs->volbase = bsect;							/* Volume start sector */
 8004e20:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004e22:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 8004e24:	61da      	str	r2, [r3, #28]
		fs->fatbase = bsect + nrsv; 					/* FAT start sector */
 8004e26:	8dfa      	ldrh	r2, [r7, #46]	@ 0x2e
 8004e28:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8004e2a:	441a      	add	r2, r3
 8004e2c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004e2e:	621a      	str	r2, [r3, #32]
		fs->database = bsect + sysect;					/* Data start sector */
 8004e30:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 8004e32:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004e34:	441a      	add	r2, r3
 8004e36:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004e38:	629a      	str	r2, [r3, #40]	@ 0x28
		if (fmt == FS_FAT32) {
 8004e3a:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 8004e3e:	2b03      	cmp	r3, #3
 8004e40:	d11e      	bne.n	8004e80 <find_volume+0x358>
			if (ld_word(fs->win + BPB_FSVer32) != 0) return FR_NO_FILESYSTEM;	/* (Must be FAT32 revision 0.0) */
 8004e42:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004e44:	3330      	adds	r3, #48	@ 0x30
 8004e46:	332a      	adds	r3, #42	@ 0x2a
 8004e48:	4618      	mov	r0, r3
 8004e4a:	f7fe fc53 	bl	80036f4 <ld_word>
 8004e4e:	4603      	mov	r3, r0
 8004e50:	2b00      	cmp	r3, #0
 8004e52:	d001      	beq.n	8004e58 <find_volume+0x330>
 8004e54:	230d      	movs	r3, #13
 8004e56:	e0a8      	b.n	8004faa <find_volume+0x482>
			if (fs->n_rootdir) return FR_NO_FILESYSTEM;	/* (BPB_RootEntCnt must be 0) */
 8004e58:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004e5a:	891b      	ldrh	r3, [r3, #8]
 8004e5c:	2b00      	cmp	r3, #0
 8004e5e:	d001      	beq.n	8004e64 <find_volume+0x33c>
 8004e60:	230d      	movs	r3, #13
 8004e62:	e0a2      	b.n	8004faa <find_volume+0x482>
			fs->dirbase = ld_dword(fs->win + BPB_RootClus32);	/* Root directory start cluster */
 8004e64:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004e66:	3330      	adds	r3, #48	@ 0x30
 8004e68:	332c      	adds	r3, #44	@ 0x2c
 8004e6a:	4618      	mov	r0, r3
 8004e6c:	f7fe fc5a 	bl	8003724 <ld_dword>
 8004e70:	4602      	mov	r2, r0
 8004e72:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004e74:	625a      	str	r2, [r3, #36]	@ 0x24
			szbfat = fs->n_fatent * 4;					/* (Needed FAT size) */
 8004e76:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004e78:	695b      	ldr	r3, [r3, #20]
 8004e7a:	009b      	lsls	r3, r3, #2
 8004e7c:	647b      	str	r3, [r7, #68]	@ 0x44
 8004e7e:	e01f      	b.n	8004ec0 <find_volume+0x398>
		} else {
			if (fs->n_rootdir == 0)	return FR_NO_FILESYSTEM;/* (BPB_RootEntCnt must not be 0) */
 8004e80:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004e82:	891b      	ldrh	r3, [r3, #8]
 8004e84:	2b00      	cmp	r3, #0
 8004e86:	d101      	bne.n	8004e8c <find_volume+0x364>
 8004e88:	230d      	movs	r3, #13
 8004e8a:	e08e      	b.n	8004faa <find_volume+0x482>
			fs->dirbase = fs->fatbase + fasize;			/* Root directory start sector */
 8004e8c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004e8e:	6a1a      	ldr	r2, [r3, #32]
 8004e90:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8004e92:	441a      	add	r2, r3
 8004e94:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004e96:	625a      	str	r2, [r3, #36]	@ 0x24
			szbfat = (fmt == FS_FAT16) ?				/* (Needed FAT size) */
				fs->n_fatent * 2 : fs->n_fatent * 3 / 2 + (fs->n_fatent & 1);
 8004e98:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 8004e9c:	2b02      	cmp	r3, #2
 8004e9e:	d103      	bne.n	8004ea8 <find_volume+0x380>
 8004ea0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004ea2:	695b      	ldr	r3, [r3, #20]
 8004ea4:	005b      	lsls	r3, r3, #1
 8004ea6:	e00a      	b.n	8004ebe <find_volume+0x396>
 8004ea8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004eaa:	695a      	ldr	r2, [r3, #20]
 8004eac:	4613      	mov	r3, r2
 8004eae:	005b      	lsls	r3, r3, #1
 8004eb0:	4413      	add	r3, r2
 8004eb2:	085a      	lsrs	r2, r3, #1
 8004eb4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004eb6:	695b      	ldr	r3, [r3, #20]
 8004eb8:	f003 0301 	and.w	r3, r3, #1
 8004ebc:	4413      	add	r3, r2
			szbfat = (fmt == FS_FAT16) ?				/* (Needed FAT size) */
 8004ebe:	647b      	str	r3, [r7, #68]	@ 0x44
		}
		if (fs->fsize < (szbfat + (SS(fs) - 1)) / SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_FATSz must not be less than the size needed) */
 8004ec0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004ec2:	699a      	ldr	r2, [r3, #24]
 8004ec4:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8004ec6:	f203 13ff 	addw	r3, r3, #511	@ 0x1ff
 8004eca:	0a5b      	lsrs	r3, r3, #9
 8004ecc:	429a      	cmp	r2, r3
 8004ece:	d201      	bcs.n	8004ed4 <find_volume+0x3ac>
 8004ed0:	230d      	movs	r3, #13
 8004ed2:	e06a      	b.n	8004faa <find_volume+0x482>

#if !_FS_READONLY
		/* Get FSINFO if available */
		fs->last_clst = fs->free_clst = 0xFFFFFFFF;		/* Initialize cluster allocation information */
 8004ed4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004ed6:	f04f 32ff 	mov.w	r2, #4294967295
 8004eda:	611a      	str	r2, [r3, #16]
 8004edc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004ede:	691a      	ldr	r2, [r3, #16]
 8004ee0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004ee2:	60da      	str	r2, [r3, #12]
		fs->fsi_flag = 0x80;
 8004ee4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004ee6:	2280      	movs	r2, #128	@ 0x80
 8004ee8:	711a      	strb	r2, [r3, #4]
#if (_FS_NOFSINFO & 3) != 3
		if (fmt == FS_FAT32				/* Enable FSINFO only if FAT32 and BPB_FSInfo32 == 1 */
 8004eea:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 8004eee:	2b03      	cmp	r3, #3
 8004ef0:	d149      	bne.n	8004f86 <find_volume+0x45e>
			&& ld_word(fs->win + BPB_FSInfo32) == 1
 8004ef2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004ef4:	3330      	adds	r3, #48	@ 0x30
 8004ef6:	3330      	adds	r3, #48	@ 0x30
 8004ef8:	4618      	mov	r0, r3
 8004efa:	f7fe fbfb 	bl	80036f4 <ld_word>
 8004efe:	4603      	mov	r3, r0
 8004f00:	2b01      	cmp	r3, #1
 8004f02:	d140      	bne.n	8004f86 <find_volume+0x45e>
			&& move_window(fs, bsect + 1) == FR_OK)
 8004f04:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8004f06:	3301      	adds	r3, #1
 8004f08:	4619      	mov	r1, r3
 8004f0a:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 8004f0c:	f7fe fea2 	bl	8003c54 <move_window>
 8004f10:	4603      	mov	r3, r0
 8004f12:	2b00      	cmp	r3, #0
 8004f14:	d137      	bne.n	8004f86 <find_volume+0x45e>
		{
			fs->fsi_flag = 0;
 8004f16:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004f18:	2200      	movs	r2, #0
 8004f1a:	711a      	strb	r2, [r3, #4]
			if (ld_word(fs->win + BS_55AA) == 0xAA55	/* Load FSINFO data if available */
 8004f1c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004f1e:	3330      	adds	r3, #48	@ 0x30
 8004f20:	f503 73ff 	add.w	r3, r3, #510	@ 0x1fe
 8004f24:	4618      	mov	r0, r3
 8004f26:	f7fe fbe5 	bl	80036f4 <ld_word>
 8004f2a:	4603      	mov	r3, r0
 8004f2c:	461a      	mov	r2, r3
 8004f2e:	f64a 2355 	movw	r3, #43605	@ 0xaa55
 8004f32:	429a      	cmp	r2, r3
 8004f34:	d127      	bne.n	8004f86 <find_volume+0x45e>
				&& ld_dword(fs->win + FSI_LeadSig) == 0x41615252
 8004f36:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004f38:	3330      	adds	r3, #48	@ 0x30
 8004f3a:	4618      	mov	r0, r3
 8004f3c:	f7fe fbf2 	bl	8003724 <ld_dword>
 8004f40:	4603      	mov	r3, r0
 8004f42:	4a1c      	ldr	r2, [pc, #112]	@ (8004fb4 <find_volume+0x48c>)
 8004f44:	4293      	cmp	r3, r2
 8004f46:	d11e      	bne.n	8004f86 <find_volume+0x45e>
				&& ld_dword(fs->win + FSI_StrucSig) == 0x61417272)
 8004f48:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004f4a:	3330      	adds	r3, #48	@ 0x30
 8004f4c:	f503 73f2 	add.w	r3, r3, #484	@ 0x1e4
 8004f50:	4618      	mov	r0, r3
 8004f52:	f7fe fbe7 	bl	8003724 <ld_dword>
 8004f56:	4603      	mov	r3, r0
 8004f58:	4a17      	ldr	r2, [pc, #92]	@ (8004fb8 <find_volume+0x490>)
 8004f5a:	4293      	cmp	r3, r2
 8004f5c:	d113      	bne.n	8004f86 <find_volume+0x45e>
			{
#if (_FS_NOFSINFO & 1) == 0
				fs->free_clst = ld_dword(fs->win + FSI_Free_Count);
 8004f5e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004f60:	3330      	adds	r3, #48	@ 0x30
 8004f62:	f503 73f4 	add.w	r3, r3, #488	@ 0x1e8
 8004f66:	4618      	mov	r0, r3
 8004f68:	f7fe fbdc 	bl	8003724 <ld_dword>
 8004f6c:	4602      	mov	r2, r0
 8004f6e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004f70:	611a      	str	r2, [r3, #16]
#endif
#if (_FS_NOFSINFO & 2) == 0
				fs->last_clst = ld_dword(fs->win + FSI_Nxt_Free);
 8004f72:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004f74:	3330      	adds	r3, #48	@ 0x30
 8004f76:	f503 73f6 	add.w	r3, r3, #492	@ 0x1ec
 8004f7a:	4618      	mov	r0, r3
 8004f7c:	f7fe fbd2 	bl	8003724 <ld_dword>
 8004f80:	4602      	mov	r2, r0
 8004f82:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004f84:	60da      	str	r2, [r3, #12]
		}
#endif	/* (_FS_NOFSINFO & 3) != 3 */
#endif	/* !_FS_READONLY */
	}

	fs->fs_type = fmt;		/* FAT sub-type */
 8004f86:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004f88:	f897 2057 	ldrb.w	r2, [r7, #87]	@ 0x57
 8004f8c:	701a      	strb	r2, [r3, #0]
	fs->id = ++Fsid;		/* File system mount ID */
 8004f8e:	4b0b      	ldr	r3, [pc, #44]	@ (8004fbc <find_volume+0x494>)
 8004f90:	881b      	ldrh	r3, [r3, #0]
 8004f92:	3301      	adds	r3, #1
 8004f94:	b29a      	uxth	r2, r3
 8004f96:	4b09      	ldr	r3, [pc, #36]	@ (8004fbc <find_volume+0x494>)
 8004f98:	801a      	strh	r2, [r3, #0]
 8004f9a:	4b08      	ldr	r3, [pc, #32]	@ (8004fbc <find_volume+0x494>)
 8004f9c:	881a      	ldrh	r2, [r3, #0]
 8004f9e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004fa0:	80da      	strh	r2, [r3, #6]
#endif
#if _FS_RPATH != 0
	fs->cdir = 0;			/* Initialize current directory */
#endif
#if _FS_LOCK != 0			/* Clear file lock semaphores */
	clear_lock(fs);
 8004fa2:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 8004fa4:	f7fe fdee 	bl	8003b84 <clear_lock>
#endif
	return FR_OK;
 8004fa8:	2300      	movs	r3, #0
}
 8004faa:	4618      	mov	r0, r3
 8004fac:	3758      	adds	r7, #88	@ 0x58
 8004fae:	46bd      	mov	sp, r7
 8004fb0:	bd80      	pop	{r7, pc}
 8004fb2:	bf00      	nop
 8004fb4:	41615252 	.word	0x41615252
 8004fb8:	61417272 	.word	0x61417272
 8004fbc:	20000110 	.word	0x20000110

08004fc0 <validate>:
static
FRESULT validate (	/* Returns FR_OK or FR_INVALID_OBJECT */
	_FDID* obj,		/* Pointer to the _OBJ, the 1st member in the FIL/DIR object, to check validity */
	FATFS** fs		/* Pointer to pointer to the owner file system object to return */
)
{
 8004fc0:	b580      	push	{r7, lr}
 8004fc2:	b084      	sub	sp, #16
 8004fc4:	af00      	add	r7, sp, #0
 8004fc6:	6078      	str	r0, [r7, #4]
 8004fc8:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_INVALID_OBJECT;
 8004fca:	2309      	movs	r3, #9
 8004fcc:	73fb      	strb	r3, [r7, #15]


	if (obj && obj->fs && obj->fs->fs_type && obj->id == obj->fs->id) {	/* Test if the object is valid */
 8004fce:	687b      	ldr	r3, [r7, #4]
 8004fd0:	2b00      	cmp	r3, #0
 8004fd2:	d01c      	beq.n	800500e <validate+0x4e>
 8004fd4:	687b      	ldr	r3, [r7, #4]
 8004fd6:	681b      	ldr	r3, [r3, #0]
 8004fd8:	2b00      	cmp	r3, #0
 8004fda:	d018      	beq.n	800500e <validate+0x4e>
 8004fdc:	687b      	ldr	r3, [r7, #4]
 8004fde:	681b      	ldr	r3, [r3, #0]
 8004fe0:	781b      	ldrb	r3, [r3, #0]
 8004fe2:	2b00      	cmp	r3, #0
 8004fe4:	d013      	beq.n	800500e <validate+0x4e>
 8004fe6:	687b      	ldr	r3, [r7, #4]
 8004fe8:	889a      	ldrh	r2, [r3, #4]
 8004fea:	687b      	ldr	r3, [r7, #4]
 8004fec:	681b      	ldr	r3, [r3, #0]
 8004fee:	88db      	ldrh	r3, [r3, #6]
 8004ff0:	429a      	cmp	r2, r3
 8004ff2:	d10c      	bne.n	800500e <validate+0x4e>
			}
		} else {
			res = FR_TIMEOUT;
		}
#else
		if (!(disk_status(obj->fs->drv) & STA_NOINIT)) { /* Test if the phsical drive is kept initialized */
 8004ff4:	687b      	ldr	r3, [r7, #4]
 8004ff6:	681b      	ldr	r3, [r3, #0]
 8004ff8:	785b      	ldrb	r3, [r3, #1]
 8004ffa:	4618      	mov	r0, r3
 8004ffc:	f7fe fada 	bl	80035b4 <disk_status>
 8005000:	4603      	mov	r3, r0
 8005002:	f003 0301 	and.w	r3, r3, #1
 8005006:	2b00      	cmp	r3, #0
 8005008:	d101      	bne.n	800500e <validate+0x4e>
			res = FR_OK;
 800500a:	2300      	movs	r3, #0
 800500c:	73fb      	strb	r3, [r7, #15]
		}
#endif
	}
	*fs = (res == FR_OK) ? obj->fs : 0;	/* Corresponding filesystem object */
 800500e:	7bfb      	ldrb	r3, [r7, #15]
 8005010:	2b00      	cmp	r3, #0
 8005012:	d102      	bne.n	800501a <validate+0x5a>
 8005014:	687b      	ldr	r3, [r7, #4]
 8005016:	681b      	ldr	r3, [r3, #0]
 8005018:	e000      	b.n	800501c <validate+0x5c>
 800501a:	2300      	movs	r3, #0
 800501c:	683a      	ldr	r2, [r7, #0]
 800501e:	6013      	str	r3, [r2, #0]
	return res;
 8005020:	7bfb      	ldrb	r3, [r7, #15]
}
 8005022:	4618      	mov	r0, r3
 8005024:	3710      	adds	r7, #16
 8005026:	46bd      	mov	sp, r7
 8005028:	bd80      	pop	{r7, pc}
	...

0800502c <f_mount>:
FRESULT f_mount (
	FATFS* fs,			/* Pointer to the file system object (NULL:unmount)*/
	const TCHAR* path,	/* Logical drive number to be mounted/unmounted */
	BYTE opt			/* Mode option 0:Do not mount (delayed mount), 1:Mount immediately */
)
{
 800502c:	b580      	push	{r7, lr}
 800502e:	b088      	sub	sp, #32
 8005030:	af00      	add	r7, sp, #0
 8005032:	60f8      	str	r0, [r7, #12]
 8005034:	60b9      	str	r1, [r7, #8]
 8005036:	4613      	mov	r3, r2
 8005038:	71fb      	strb	r3, [r7, #7]
	FATFS *cfs;
	int vol;
	FRESULT res;
	const TCHAR *rp = path;
 800503a:	68bb      	ldr	r3, [r7, #8]
 800503c:	613b      	str	r3, [r7, #16]


	/* Get logical drive number */
	vol = get_ldnumber(&rp);
 800503e:	f107 0310 	add.w	r3, r7, #16
 8005042:	4618      	mov	r0, r3
 8005044:	f7ff fcd5 	bl	80049f2 <get_ldnumber>
 8005048:	61f8      	str	r0, [r7, #28]
	if (vol < 0) return FR_INVALID_DRIVE;
 800504a:	69fb      	ldr	r3, [r7, #28]
 800504c:	2b00      	cmp	r3, #0
 800504e:	da01      	bge.n	8005054 <f_mount+0x28>
 8005050:	230b      	movs	r3, #11
 8005052:	e02b      	b.n	80050ac <f_mount+0x80>
	cfs = FatFs[vol];					/* Pointer to fs object */
 8005054:	4a17      	ldr	r2, [pc, #92]	@ (80050b4 <f_mount+0x88>)
 8005056:	69fb      	ldr	r3, [r7, #28]
 8005058:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800505c:	61bb      	str	r3, [r7, #24]

	if (cfs) {
 800505e:	69bb      	ldr	r3, [r7, #24]
 8005060:	2b00      	cmp	r3, #0
 8005062:	d005      	beq.n	8005070 <f_mount+0x44>
#if _FS_LOCK != 0
		clear_lock(cfs);
 8005064:	69b8      	ldr	r0, [r7, #24]
 8005066:	f7fe fd8d 	bl	8003b84 <clear_lock>
#endif
#if _FS_REENTRANT						/* Discard sync object of the current volume */
		if (!ff_del_syncobj(cfs->sobj)) return FR_INT_ERR;
#endif
		cfs->fs_type = 0;				/* Clear old fs object */
 800506a:	69bb      	ldr	r3, [r7, #24]
 800506c:	2200      	movs	r2, #0
 800506e:	701a      	strb	r2, [r3, #0]
	}

	if (fs) {
 8005070:	68fb      	ldr	r3, [r7, #12]
 8005072:	2b00      	cmp	r3, #0
 8005074:	d002      	beq.n	800507c <f_mount+0x50>
		fs->fs_type = 0;				/* Clear new fs object */
 8005076:	68fb      	ldr	r3, [r7, #12]
 8005078:	2200      	movs	r2, #0
 800507a:	701a      	strb	r2, [r3, #0]
#if _FS_REENTRANT						/* Create sync object for the new volume */
		if (!ff_cre_syncobj((BYTE)vol, &fs->sobj)) return FR_INT_ERR;
#endif
	}
	FatFs[vol] = fs;					/* Register new fs object */
 800507c:	68fa      	ldr	r2, [r7, #12]
 800507e:	490d      	ldr	r1, [pc, #52]	@ (80050b4 <f_mount+0x88>)
 8005080:	69fb      	ldr	r3, [r7, #28]
 8005082:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

	if (!fs || opt != 1) return FR_OK;	/* Do not mount now, it will be mounted later */
 8005086:	68fb      	ldr	r3, [r7, #12]
 8005088:	2b00      	cmp	r3, #0
 800508a:	d002      	beq.n	8005092 <f_mount+0x66>
 800508c:	79fb      	ldrb	r3, [r7, #7]
 800508e:	2b01      	cmp	r3, #1
 8005090:	d001      	beq.n	8005096 <f_mount+0x6a>
 8005092:	2300      	movs	r3, #0
 8005094:	e00a      	b.n	80050ac <f_mount+0x80>

	res = find_volume(&path, &fs, 0);	/* Force mounted the volume */
 8005096:	f107 010c 	add.w	r1, r7, #12
 800509a:	f107 0308 	add.w	r3, r7, #8
 800509e:	2200      	movs	r2, #0
 80050a0:	4618      	mov	r0, r3
 80050a2:	f7ff fd41 	bl	8004b28 <find_volume>
 80050a6:	4603      	mov	r3, r0
 80050a8:	75fb      	strb	r3, [r7, #23]
	LEAVE_FF(fs, res);
 80050aa:	7dfb      	ldrb	r3, [r7, #23]
}
 80050ac:	4618      	mov	r0, r3
 80050ae:	3720      	adds	r7, #32
 80050b0:	46bd      	mov	sp, r7
 80050b2:	bd80      	pop	{r7, pc}
 80050b4:	2000010c 	.word	0x2000010c

080050b8 <f_open>:
FRESULT f_open (
	FIL* fp,			/* Pointer to the blank file object */
	const TCHAR* path,	/* Pointer to the file name */
	BYTE mode			/* Access mode and file open mode flags */
)
{
 80050b8:	b580      	push	{r7, lr}
 80050ba:	b098      	sub	sp, #96	@ 0x60
 80050bc:	af00      	add	r7, sp, #0
 80050be:	60f8      	str	r0, [r7, #12]
 80050c0:	60b9      	str	r1, [r7, #8]
 80050c2:	4613      	mov	r3, r2
 80050c4:	71fb      	strb	r3, [r7, #7]
	FSIZE_t ofs;
#endif
	DEF_NAMBUF


	if (!fp) return FR_INVALID_OBJECT;
 80050c6:	68fb      	ldr	r3, [r7, #12]
 80050c8:	2b00      	cmp	r3, #0
 80050ca:	d101      	bne.n	80050d0 <f_open+0x18>
 80050cc:	2309      	movs	r3, #9
 80050ce:	e1a9      	b.n	8005424 <f_open+0x36c>

	/* Get logical drive */
	mode &= _FS_READONLY ? FA_READ : FA_READ | FA_WRITE | FA_CREATE_ALWAYS | FA_CREATE_NEW | FA_OPEN_ALWAYS | FA_OPEN_APPEND | FA_SEEKEND;
 80050d0:	79fb      	ldrb	r3, [r7, #7]
 80050d2:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 80050d6:	71fb      	strb	r3, [r7, #7]
	res = find_volume(&path, &fs, mode);
 80050d8:	79fa      	ldrb	r2, [r7, #7]
 80050da:	f107 0110 	add.w	r1, r7, #16
 80050de:	f107 0308 	add.w	r3, r7, #8
 80050e2:	4618      	mov	r0, r3
 80050e4:	f7ff fd20 	bl	8004b28 <find_volume>
 80050e8:	4603      	mov	r3, r0
 80050ea:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
	if (res == FR_OK) {
 80050ee:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 80050f2:	2b00      	cmp	r3, #0
 80050f4:	f040 818d 	bne.w	8005412 <f_open+0x35a>
		dj.obj.fs = fs;
 80050f8:	693b      	ldr	r3, [r7, #16]
 80050fa:	617b      	str	r3, [r7, #20]
		INIT_NAMBUF(fs);
		res = follow_path(&dj, path);	/* Follow the file path */
 80050fc:	68ba      	ldr	r2, [r7, #8]
 80050fe:	f107 0314 	add.w	r3, r7, #20
 8005102:	4611      	mov	r1, r2
 8005104:	4618      	mov	r0, r3
 8005106:	f7ff fc03 	bl	8004910 <follow_path>
 800510a:	4603      	mov	r3, r0
 800510c:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
#if !_FS_READONLY	/* R/W configuration */
		if (res == FR_OK) {
 8005110:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 8005114:	2b00      	cmp	r3, #0
 8005116:	d118      	bne.n	800514a <f_open+0x92>
			if (dj.fn[NSFLAG] & NS_NONAME) {	/* Origin directory itself? */
 8005118:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 800511c:	b25b      	sxtb	r3, r3
 800511e:	2b00      	cmp	r3, #0
 8005120:	da03      	bge.n	800512a <f_open+0x72>
				res = FR_INVALID_NAME;
 8005122:	2306      	movs	r3, #6
 8005124:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
 8005128:	e00f      	b.n	800514a <f_open+0x92>
			}
#if _FS_LOCK != 0
			else {
				res = chk_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 800512a:	79fb      	ldrb	r3, [r7, #7]
 800512c:	2b01      	cmp	r3, #1
 800512e:	bf8c      	ite	hi
 8005130:	2301      	movhi	r3, #1
 8005132:	2300      	movls	r3, #0
 8005134:	b2db      	uxtb	r3, r3
 8005136:	461a      	mov	r2, r3
 8005138:	f107 0314 	add.w	r3, r7, #20
 800513c:	4611      	mov	r1, r2
 800513e:	4618      	mov	r0, r3
 8005140:	f7fe fbd8 	bl	80038f4 <chk_lock>
 8005144:	4603      	mov	r3, r0
 8005146:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
			}
#endif
		}
		/* Create or Open a file */
		if (mode & (FA_CREATE_ALWAYS | FA_OPEN_ALWAYS | FA_CREATE_NEW)) {
 800514a:	79fb      	ldrb	r3, [r7, #7]
 800514c:	f003 031c 	and.w	r3, r3, #28
 8005150:	2b00      	cmp	r3, #0
 8005152:	d07f      	beq.n	8005254 <f_open+0x19c>
			if (res != FR_OK) {					/* No file, create new */
 8005154:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 8005158:	2b00      	cmp	r3, #0
 800515a:	d017      	beq.n	800518c <f_open+0xd4>
				if (res == FR_NO_FILE) {		/* There is no file to open, create a new entry */
 800515c:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 8005160:	2b04      	cmp	r3, #4
 8005162:	d10e      	bne.n	8005182 <f_open+0xca>
#if _FS_LOCK != 0
					res = enq_lock() ? dir_register(&dj) : FR_TOO_MANY_OPEN_FILES;
 8005164:	f7fe fc22 	bl	80039ac <enq_lock>
 8005168:	4603      	mov	r3, r0
 800516a:	2b00      	cmp	r3, #0
 800516c:	d006      	beq.n	800517c <f_open+0xc4>
 800516e:	f107 0314 	add.w	r3, r7, #20
 8005172:	4618      	mov	r0, r3
 8005174:	f7ff fb06 	bl	8004784 <dir_register>
 8005178:	4603      	mov	r3, r0
 800517a:	e000      	b.n	800517e <f_open+0xc6>
 800517c:	2312      	movs	r3, #18
 800517e:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
#else
					res = dir_register(&dj);
#endif
				}
				mode |= FA_CREATE_ALWAYS;		/* File is created */
 8005182:	79fb      	ldrb	r3, [r7, #7]
 8005184:	f043 0308 	orr.w	r3, r3, #8
 8005188:	71fb      	strb	r3, [r7, #7]
 800518a:	e010      	b.n	80051ae <f_open+0xf6>
			}
			else {								/* Any object is already existing */
				if (dj.obj.attr & (AM_RDO | AM_DIR)) {	/* Cannot overwrite it (R/O or DIR) */
 800518c:	7ebb      	ldrb	r3, [r7, #26]
 800518e:	f003 0311 	and.w	r3, r3, #17
 8005192:	2b00      	cmp	r3, #0
 8005194:	d003      	beq.n	800519e <f_open+0xe6>
					res = FR_DENIED;
 8005196:	2307      	movs	r3, #7
 8005198:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
 800519c:	e007      	b.n	80051ae <f_open+0xf6>
				} else {
					if (mode & FA_CREATE_NEW) res = FR_EXIST;	/* Cannot create as new file */
 800519e:	79fb      	ldrb	r3, [r7, #7]
 80051a0:	f003 0304 	and.w	r3, r3, #4
 80051a4:	2b00      	cmp	r3, #0
 80051a6:	d002      	beq.n	80051ae <f_open+0xf6>
 80051a8:	2308      	movs	r3, #8
 80051aa:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
				}
			}
			if (res == FR_OK && (mode & FA_CREATE_ALWAYS)) {	/* Truncate it if overwrite mode */
 80051ae:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 80051b2:	2b00      	cmp	r3, #0
 80051b4:	d168      	bne.n	8005288 <f_open+0x1d0>
 80051b6:	79fb      	ldrb	r3, [r7, #7]
 80051b8:	f003 0308 	and.w	r3, r3, #8
 80051bc:	2b00      	cmp	r3, #0
 80051be:	d063      	beq.n	8005288 <f_open+0x1d0>
				dw = GET_FATTIME();
 80051c0:	f7fd fcac 	bl	8002b1c <get_fattime>
 80051c4:	6538      	str	r0, [r7, #80]	@ 0x50
					}
				} else
#endif
				{
					/* Clean directory info */
					st_dword(dj.dir + DIR_CrtTime, dw);	/* Set created time */
 80051c6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80051c8:	330e      	adds	r3, #14
 80051ca:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 80051cc:	4618      	mov	r0, r3
 80051ce:	f7fe fae7 	bl	80037a0 <st_dword>
					st_dword(dj.dir + DIR_ModTime, dw);	/* Set modified time */
 80051d2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80051d4:	3316      	adds	r3, #22
 80051d6:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 80051d8:	4618      	mov	r0, r3
 80051da:	f7fe fae1 	bl	80037a0 <st_dword>
					dj.dir[DIR_Attr] = AM_ARC;			/* Reset attribute */
 80051de:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80051e0:	330b      	adds	r3, #11
 80051e2:	2220      	movs	r2, #32
 80051e4:	701a      	strb	r2, [r3, #0]
					cl = ld_clust(fs, dj.dir);			/* Get cluster chain */
 80051e6:	693b      	ldr	r3, [r7, #16]
 80051e8:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 80051ea:	4611      	mov	r1, r2
 80051ec:	4618      	mov	r0, r3
 80051ee:	f7ff fa35 	bl	800465c <ld_clust>
 80051f2:	64f8      	str	r0, [r7, #76]	@ 0x4c
					st_clust(fs, dj.dir, 0);			/* Reset file allocation info */
 80051f4:	693b      	ldr	r3, [r7, #16]
 80051f6:	6b79      	ldr	r1, [r7, #52]	@ 0x34
 80051f8:	2200      	movs	r2, #0
 80051fa:	4618      	mov	r0, r3
 80051fc:	f7ff fa4d 	bl	800469a <st_clust>
					st_dword(dj.dir + DIR_FileSize, 0);
 8005200:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005202:	331c      	adds	r3, #28
 8005204:	2100      	movs	r1, #0
 8005206:	4618      	mov	r0, r3
 8005208:	f7fe faca 	bl	80037a0 <st_dword>
					fs->wflag = 1;
 800520c:	693b      	ldr	r3, [r7, #16]
 800520e:	2201      	movs	r2, #1
 8005210:	70da      	strb	r2, [r3, #3]

					if (cl) {							/* Remove the cluster chain if exist */
 8005212:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8005214:	2b00      	cmp	r3, #0
 8005216:	d037      	beq.n	8005288 <f_open+0x1d0>
						dw = fs->winsect;
 8005218:	693b      	ldr	r3, [r7, #16]
 800521a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800521c:	653b      	str	r3, [r7, #80]	@ 0x50
						res = remove_chain(&dj.obj, cl, 0);
 800521e:	f107 0314 	add.w	r3, r7, #20
 8005222:	2200      	movs	r2, #0
 8005224:	6cf9      	ldr	r1, [r7, #76]	@ 0x4c
 8005226:	4618      	mov	r0, r3
 8005228:	f7fe ff60 	bl	80040ec <remove_chain>
 800522c:	4603      	mov	r3, r0
 800522e:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
						if (res == FR_OK) {
 8005232:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 8005236:	2b00      	cmp	r3, #0
 8005238:	d126      	bne.n	8005288 <f_open+0x1d0>
							res = move_window(fs, dw);
 800523a:	693b      	ldr	r3, [r7, #16]
 800523c:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 800523e:	4618      	mov	r0, r3
 8005240:	f7fe fd08 	bl	8003c54 <move_window>
 8005244:	4603      	mov	r3, r0
 8005246:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
							fs->last_clst = cl - 1;		/* Reuse the cluster hole */
 800524a:	693b      	ldr	r3, [r7, #16]
 800524c:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 800524e:	3a01      	subs	r2, #1
 8005250:	60da      	str	r2, [r3, #12]
 8005252:	e019      	b.n	8005288 <f_open+0x1d0>
					}
				}
			}
		}
		else {	/* Open an existing file */
			if (res == FR_OK) {					/* Following succeeded */
 8005254:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 8005258:	2b00      	cmp	r3, #0
 800525a:	d115      	bne.n	8005288 <f_open+0x1d0>
				if (dj.obj.attr & AM_DIR) {		/* It is a directory */
 800525c:	7ebb      	ldrb	r3, [r7, #26]
 800525e:	f003 0310 	and.w	r3, r3, #16
 8005262:	2b00      	cmp	r3, #0
 8005264:	d003      	beq.n	800526e <f_open+0x1b6>
					res = FR_NO_FILE;
 8005266:	2304      	movs	r3, #4
 8005268:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
 800526c:	e00c      	b.n	8005288 <f_open+0x1d0>
				} else {
					if ((mode & FA_WRITE) && (dj.obj.attr & AM_RDO)) { /* R/O violation */
 800526e:	79fb      	ldrb	r3, [r7, #7]
 8005270:	f003 0302 	and.w	r3, r3, #2
 8005274:	2b00      	cmp	r3, #0
 8005276:	d007      	beq.n	8005288 <f_open+0x1d0>
 8005278:	7ebb      	ldrb	r3, [r7, #26]
 800527a:	f003 0301 	and.w	r3, r3, #1
 800527e:	2b00      	cmp	r3, #0
 8005280:	d002      	beq.n	8005288 <f_open+0x1d0>
						res = FR_DENIED;
 8005282:	2307      	movs	r3, #7
 8005284:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
					}
				}
			}
		}
		if (res == FR_OK) {
 8005288:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 800528c:	2b00      	cmp	r3, #0
 800528e:	d126      	bne.n	80052de <f_open+0x226>
			if (mode & FA_CREATE_ALWAYS)		/* Set file change flag if created or overwritten */
 8005290:	79fb      	ldrb	r3, [r7, #7]
 8005292:	f003 0308 	and.w	r3, r3, #8
 8005296:	2b00      	cmp	r3, #0
 8005298:	d003      	beq.n	80052a2 <f_open+0x1ea>
				mode |= FA_MODIFIED;
 800529a:	79fb      	ldrb	r3, [r7, #7]
 800529c:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80052a0:	71fb      	strb	r3, [r7, #7]
			fp->dir_sect = fs->winsect;			/* Pointer to the directory entry */
 80052a2:	693b      	ldr	r3, [r7, #16]
 80052a4:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80052a6:	68fb      	ldr	r3, [r7, #12]
 80052a8:	625a      	str	r2, [r3, #36]	@ 0x24
			fp->dir_ptr = dj.dir;
 80052aa:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 80052ac:	68fb      	ldr	r3, [r7, #12]
 80052ae:	629a      	str	r2, [r3, #40]	@ 0x28
#if _FS_LOCK != 0
			fp->obj.lockid = inc_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 80052b0:	79fb      	ldrb	r3, [r7, #7]
 80052b2:	2b01      	cmp	r3, #1
 80052b4:	bf8c      	ite	hi
 80052b6:	2301      	movhi	r3, #1
 80052b8:	2300      	movls	r3, #0
 80052ba:	b2db      	uxtb	r3, r3
 80052bc:	461a      	mov	r2, r3
 80052be:	f107 0314 	add.w	r3, r7, #20
 80052c2:	4611      	mov	r1, r2
 80052c4:	4618      	mov	r0, r3
 80052c6:	f7fe fb93 	bl	80039f0 <inc_lock>
 80052ca:	4602      	mov	r2, r0
 80052cc:	68fb      	ldr	r3, [r7, #12]
 80052ce:	611a      	str	r2, [r3, #16]
			if (!fp->obj.lockid) res = FR_INT_ERR;
 80052d0:	68fb      	ldr	r3, [r7, #12]
 80052d2:	691b      	ldr	r3, [r3, #16]
 80052d4:	2b00      	cmp	r3, #0
 80052d6:	d102      	bne.n	80052de <f_open+0x226>
 80052d8:	2302      	movs	r3, #2
 80052da:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
				}
			}
		}
#endif

		if (res == FR_OK) {
 80052de:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 80052e2:	2b00      	cmp	r3, #0
 80052e4:	f040 8095 	bne.w	8005412 <f_open+0x35a>
				fp->obj.objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
				fp->obj.stat = fs->dirbuf[XDIR_GenFlags] & 2;
			} else
#endif
			{
				fp->obj.sclust = ld_clust(fs, dj.dir);					/* Get object allocation info */
 80052e8:	693b      	ldr	r3, [r7, #16]
 80052ea:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 80052ec:	4611      	mov	r1, r2
 80052ee:	4618      	mov	r0, r3
 80052f0:	f7ff f9b4 	bl	800465c <ld_clust>
 80052f4:	4602      	mov	r2, r0
 80052f6:	68fb      	ldr	r3, [r7, #12]
 80052f8:	609a      	str	r2, [r3, #8]
				fp->obj.objsize = ld_dword(dj.dir + DIR_FileSize);
 80052fa:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80052fc:	331c      	adds	r3, #28
 80052fe:	4618      	mov	r0, r3
 8005300:	f7fe fa10 	bl	8003724 <ld_dword>
 8005304:	4602      	mov	r2, r0
 8005306:	68fb      	ldr	r3, [r7, #12]
 8005308:	60da      	str	r2, [r3, #12]
			}
#if _USE_FASTSEEK
			fp->cltbl = 0;			/* Disable fast seek mode */
 800530a:	68fb      	ldr	r3, [r7, #12]
 800530c:	2200      	movs	r2, #0
 800530e:	62da      	str	r2, [r3, #44]	@ 0x2c
#endif
			fp->obj.fs = fs;	 	/* Validate the file object */
 8005310:	693a      	ldr	r2, [r7, #16]
 8005312:	68fb      	ldr	r3, [r7, #12]
 8005314:	601a      	str	r2, [r3, #0]
			fp->obj.id = fs->id;
 8005316:	693b      	ldr	r3, [r7, #16]
 8005318:	88da      	ldrh	r2, [r3, #6]
 800531a:	68fb      	ldr	r3, [r7, #12]
 800531c:	809a      	strh	r2, [r3, #4]
			fp->flag = mode;		/* Set file access mode */
 800531e:	68fb      	ldr	r3, [r7, #12]
 8005320:	79fa      	ldrb	r2, [r7, #7]
 8005322:	751a      	strb	r2, [r3, #20]
			fp->err = 0;			/* Clear error flag */
 8005324:	68fb      	ldr	r3, [r7, #12]
 8005326:	2200      	movs	r2, #0
 8005328:	755a      	strb	r2, [r3, #21]
			fp->sect = 0;			/* Invalidate current data sector */
 800532a:	68fb      	ldr	r3, [r7, #12]
 800532c:	2200      	movs	r2, #0
 800532e:	621a      	str	r2, [r3, #32]
			fp->fptr = 0;			/* Set file pointer top of the file */
 8005330:	68fb      	ldr	r3, [r7, #12]
 8005332:	2200      	movs	r2, #0
 8005334:	619a      	str	r2, [r3, #24]
#if !_FS_READONLY
#if !_FS_TINY
			mem_set(fp->buf, 0, _MAX_SS);	/* Clear sector buffer */
 8005336:	68fb      	ldr	r3, [r7, #12]
 8005338:	3330      	adds	r3, #48	@ 0x30
 800533a:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800533e:	2100      	movs	r1, #0
 8005340:	4618      	mov	r0, r3
 8005342:	f7fe fa7a 	bl	800383a <mem_set>
#endif
			if ((mode & FA_SEEKEND) && fp->obj.objsize > 0) {	/* Seek to end of file if FA_OPEN_APPEND is specified */
 8005346:	79fb      	ldrb	r3, [r7, #7]
 8005348:	f003 0320 	and.w	r3, r3, #32
 800534c:	2b00      	cmp	r3, #0
 800534e:	d060      	beq.n	8005412 <f_open+0x35a>
 8005350:	68fb      	ldr	r3, [r7, #12]
 8005352:	68db      	ldr	r3, [r3, #12]
 8005354:	2b00      	cmp	r3, #0
 8005356:	d05c      	beq.n	8005412 <f_open+0x35a>
				fp->fptr = fp->obj.objsize;			/* Offset to seek */
 8005358:	68fb      	ldr	r3, [r7, #12]
 800535a:	68da      	ldr	r2, [r3, #12]
 800535c:	68fb      	ldr	r3, [r7, #12]
 800535e:	619a      	str	r2, [r3, #24]
				bcs = (DWORD)fs->csize * SS(fs);	/* Cluster size in byte */
 8005360:	693b      	ldr	r3, [r7, #16]
 8005362:	895b      	ldrh	r3, [r3, #10]
 8005364:	025b      	lsls	r3, r3, #9
 8005366:	64bb      	str	r3, [r7, #72]	@ 0x48
				clst = fp->obj.sclust;				/* Follow the cluster chain */
 8005368:	68fb      	ldr	r3, [r7, #12]
 800536a:	689b      	ldr	r3, [r3, #8]
 800536c:	65bb      	str	r3, [r7, #88]	@ 0x58
				for (ofs = fp->obj.objsize; res == FR_OK && ofs > bcs; ofs -= bcs) {
 800536e:	68fb      	ldr	r3, [r7, #12]
 8005370:	68db      	ldr	r3, [r3, #12]
 8005372:	657b      	str	r3, [r7, #84]	@ 0x54
 8005374:	e016      	b.n	80053a4 <f_open+0x2ec>
					clst = get_fat(&fp->obj, clst);
 8005376:	68fb      	ldr	r3, [r7, #12]
 8005378:	6db9      	ldr	r1, [r7, #88]	@ 0x58
 800537a:	4618      	mov	r0, r3
 800537c:	f7fe fd25 	bl	8003dca <get_fat>
 8005380:	65b8      	str	r0, [r7, #88]	@ 0x58
					if (clst <= 1) res = FR_INT_ERR;
 8005382:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8005384:	2b01      	cmp	r3, #1
 8005386:	d802      	bhi.n	800538e <f_open+0x2d6>
 8005388:	2302      	movs	r3, #2
 800538a:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
					if (clst == 0xFFFFFFFF) res = FR_DISK_ERR;
 800538e:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8005390:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005394:	d102      	bne.n	800539c <f_open+0x2e4>
 8005396:	2301      	movs	r3, #1
 8005398:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
				for (ofs = fp->obj.objsize; res == FR_OK && ofs > bcs; ofs -= bcs) {
 800539c:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 800539e:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80053a0:	1ad3      	subs	r3, r2, r3
 80053a2:	657b      	str	r3, [r7, #84]	@ 0x54
 80053a4:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 80053a8:	2b00      	cmp	r3, #0
 80053aa:	d103      	bne.n	80053b4 <f_open+0x2fc>
 80053ac:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 80053ae:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80053b0:	429a      	cmp	r2, r3
 80053b2:	d8e0      	bhi.n	8005376 <f_open+0x2be>
				}
				fp->clust = clst;
 80053b4:	68fb      	ldr	r3, [r7, #12]
 80053b6:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 80053b8:	61da      	str	r2, [r3, #28]
				if (res == FR_OK && ofs % SS(fs)) {	/* Fill sector buffer if not on the sector boundary */
 80053ba:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 80053be:	2b00      	cmp	r3, #0
 80053c0:	d127      	bne.n	8005412 <f_open+0x35a>
 80053c2:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80053c4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80053c8:	2b00      	cmp	r3, #0
 80053ca:	d022      	beq.n	8005412 <f_open+0x35a>
					if ((sc = clust2sect(fs, clst)) == 0) {
 80053cc:	693b      	ldr	r3, [r7, #16]
 80053ce:	6db9      	ldr	r1, [r7, #88]	@ 0x58
 80053d0:	4618      	mov	r0, r3
 80053d2:	f7fe fcdb 	bl	8003d8c <clust2sect>
 80053d6:	6478      	str	r0, [r7, #68]	@ 0x44
 80053d8:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80053da:	2b00      	cmp	r3, #0
 80053dc:	d103      	bne.n	80053e6 <f_open+0x32e>
						res = FR_INT_ERR;
 80053de:	2302      	movs	r3, #2
 80053e0:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
 80053e4:	e015      	b.n	8005412 <f_open+0x35a>
					} else {
						fp->sect = sc + (DWORD)(ofs / SS(fs));
 80053e6:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80053e8:	0a5a      	lsrs	r2, r3, #9
 80053ea:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80053ec:	441a      	add	r2, r3
 80053ee:	68fb      	ldr	r3, [r7, #12]
 80053f0:	621a      	str	r2, [r3, #32]
#if !_FS_TINY
						if (disk_read(fs->drv, fp->buf, fp->sect, 1) != RES_OK) res = FR_DISK_ERR;
 80053f2:	693b      	ldr	r3, [r7, #16]
 80053f4:	7858      	ldrb	r0, [r3, #1]
 80053f6:	68fb      	ldr	r3, [r7, #12]
 80053f8:	f103 0130 	add.w	r1, r3, #48	@ 0x30
 80053fc:	68fb      	ldr	r3, [r7, #12]
 80053fe:	6a1a      	ldr	r2, [r3, #32]
 8005400:	2301      	movs	r3, #1
 8005402:	f7fe f919 	bl	8003638 <disk_read>
 8005406:	4603      	mov	r3, r0
 8005408:	2b00      	cmp	r3, #0
 800540a:	d002      	beq.n	8005412 <f_open+0x35a>
 800540c:	2301      	movs	r3, #1
 800540e:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
		}

		FREE_NAMBUF();
	}

	if (res != FR_OK) fp->obj.fs = 0;	/* Invalidate file object on error */
 8005412:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 8005416:	2b00      	cmp	r3, #0
 8005418:	d002      	beq.n	8005420 <f_open+0x368>
 800541a:	68fb      	ldr	r3, [r7, #12]
 800541c:	2200      	movs	r2, #0
 800541e:	601a      	str	r2, [r3, #0]

	LEAVE_FF(fs, res);
 8005420:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
}
 8005424:	4618      	mov	r0, r3
 8005426:	3760      	adds	r7, #96	@ 0x60
 8005428:	46bd      	mov	sp, r7
 800542a:	bd80      	pop	{r7, pc}

0800542c <f_write>:
	FIL* fp,			/* Pointer to the file object */
	const void* buff,	/* Pointer to the data to be written */
	UINT btw,			/* Number of bytes to write */
	UINT* bw			/* Pointer to number of bytes written */
)
{
 800542c:	b580      	push	{r7, lr}
 800542e:	b08c      	sub	sp, #48	@ 0x30
 8005430:	af00      	add	r7, sp, #0
 8005432:	60f8      	str	r0, [r7, #12]
 8005434:	60b9      	str	r1, [r7, #8]
 8005436:	607a      	str	r2, [r7, #4]
 8005438:	603b      	str	r3, [r7, #0]
	FRESULT res;
	FATFS *fs;
	DWORD clst, sect;
	UINT wcnt, cc, csect;
	const BYTE *wbuff = (const BYTE*)buff;
 800543a:	68bb      	ldr	r3, [r7, #8]
 800543c:	61fb      	str	r3, [r7, #28]


	*bw = 0;	/* Clear write byte counter */
 800543e:	683b      	ldr	r3, [r7, #0]
 8005440:	2200      	movs	r2, #0
 8005442:	601a      	str	r2, [r3, #0]
	res = validate(&fp->obj, &fs);			/* Check validity of the file object */
 8005444:	68fb      	ldr	r3, [r7, #12]
 8005446:	f107 0210 	add.w	r2, r7, #16
 800544a:	4611      	mov	r1, r2
 800544c:	4618      	mov	r0, r3
 800544e:	f7ff fdb7 	bl	8004fc0 <validate>
 8005452:	4603      	mov	r3, r0
 8005454:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
	if (res != FR_OK || (res = (FRESULT)fp->err) != FR_OK) LEAVE_FF(fs, res);	/* Check validity */
 8005458:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 800545c:	2b00      	cmp	r3, #0
 800545e:	d107      	bne.n	8005470 <f_write+0x44>
 8005460:	68fb      	ldr	r3, [r7, #12]
 8005462:	7d5b      	ldrb	r3, [r3, #21]
 8005464:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
 8005468:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 800546c:	2b00      	cmp	r3, #0
 800546e:	d002      	beq.n	8005476 <f_write+0x4a>
 8005470:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8005474:	e14b      	b.n	800570e <f_write+0x2e2>
	if (!(fp->flag & FA_WRITE)) LEAVE_FF(fs, FR_DENIED);	/* Check access mode */
 8005476:	68fb      	ldr	r3, [r7, #12]
 8005478:	7d1b      	ldrb	r3, [r3, #20]
 800547a:	f003 0302 	and.w	r3, r3, #2
 800547e:	2b00      	cmp	r3, #0
 8005480:	d101      	bne.n	8005486 <f_write+0x5a>
 8005482:	2307      	movs	r3, #7
 8005484:	e143      	b.n	800570e <f_write+0x2e2>

	/* Check fptr wrap-around (file size cannot reach 4GiB on FATxx) */
	if ((!_FS_EXFAT || fs->fs_type != FS_EXFAT) && (DWORD)(fp->fptr + btw) < (DWORD)fp->fptr) {
 8005486:	68fb      	ldr	r3, [r7, #12]
 8005488:	699a      	ldr	r2, [r3, #24]
 800548a:	687b      	ldr	r3, [r7, #4]
 800548c:	441a      	add	r2, r3
 800548e:	68fb      	ldr	r3, [r7, #12]
 8005490:	699b      	ldr	r3, [r3, #24]
 8005492:	429a      	cmp	r2, r3
 8005494:	f080 812d 	bcs.w	80056f2 <f_write+0x2c6>
		btw = (UINT)(0xFFFFFFFF - (DWORD)fp->fptr);
 8005498:	68fb      	ldr	r3, [r7, #12]
 800549a:	699b      	ldr	r3, [r3, #24]
 800549c:	43db      	mvns	r3, r3
 800549e:	607b      	str	r3, [r7, #4]
	}

	for ( ;  btw;							/* Repeat until all data written */
 80054a0:	e127      	b.n	80056f2 <f_write+0x2c6>
		wbuff += wcnt, fp->fptr += wcnt, fp->obj.objsize = (fp->fptr > fp->obj.objsize) ? fp->fptr : fp->obj.objsize, *bw += wcnt, btw -= wcnt) {
		if (fp->fptr % SS(fs) == 0) {		/* On the sector boundary? */
 80054a2:	68fb      	ldr	r3, [r7, #12]
 80054a4:	699b      	ldr	r3, [r3, #24]
 80054a6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80054aa:	2b00      	cmp	r3, #0
 80054ac:	f040 80e3 	bne.w	8005676 <f_write+0x24a>
			csect = (UINT)(fp->fptr / SS(fs)) & (fs->csize - 1);	/* Sector offset in the cluster */
 80054b0:	68fb      	ldr	r3, [r7, #12]
 80054b2:	699b      	ldr	r3, [r3, #24]
 80054b4:	0a5b      	lsrs	r3, r3, #9
 80054b6:	693a      	ldr	r2, [r7, #16]
 80054b8:	8952      	ldrh	r2, [r2, #10]
 80054ba:	3a01      	subs	r2, #1
 80054bc:	4013      	ands	r3, r2
 80054be:	61bb      	str	r3, [r7, #24]
			if (csect == 0) {				/* On the cluster boundary? */
 80054c0:	69bb      	ldr	r3, [r7, #24]
 80054c2:	2b00      	cmp	r3, #0
 80054c4:	d143      	bne.n	800554e <f_write+0x122>
				if (fp->fptr == 0) {		/* On the top of the file? */
 80054c6:	68fb      	ldr	r3, [r7, #12]
 80054c8:	699b      	ldr	r3, [r3, #24]
 80054ca:	2b00      	cmp	r3, #0
 80054cc:	d10c      	bne.n	80054e8 <f_write+0xbc>
					clst = fp->obj.sclust;	/* Follow from the origin */
 80054ce:	68fb      	ldr	r3, [r7, #12]
 80054d0:	689b      	ldr	r3, [r3, #8]
 80054d2:	62bb      	str	r3, [r7, #40]	@ 0x28
					if (clst == 0) {		/* If no cluster is allocated, */
 80054d4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80054d6:	2b00      	cmp	r3, #0
 80054d8:	d11a      	bne.n	8005510 <f_write+0xe4>
						clst = create_chain(&fp->obj, 0);	/* create a new cluster chain */
 80054da:	68fb      	ldr	r3, [r7, #12]
 80054dc:	2100      	movs	r1, #0
 80054de:	4618      	mov	r0, r3
 80054e0:	f7fe fe69 	bl	80041b6 <create_chain>
 80054e4:	62b8      	str	r0, [r7, #40]	@ 0x28
 80054e6:	e013      	b.n	8005510 <f_write+0xe4>
					}
				} else {					/* On the middle or end of the file */
#if _USE_FASTSEEK
					if (fp->cltbl) {
 80054e8:	68fb      	ldr	r3, [r7, #12]
 80054ea:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80054ec:	2b00      	cmp	r3, #0
 80054ee:	d007      	beq.n	8005500 <f_write+0xd4>
						clst = clmt_clust(fp, fp->fptr);	/* Get cluster# from the CLMT */
 80054f0:	68fb      	ldr	r3, [r7, #12]
 80054f2:	699b      	ldr	r3, [r3, #24]
 80054f4:	4619      	mov	r1, r3
 80054f6:	68f8      	ldr	r0, [r7, #12]
 80054f8:	f7fe fef5 	bl	80042e6 <clmt_clust>
 80054fc:	62b8      	str	r0, [r7, #40]	@ 0x28
 80054fe:	e007      	b.n	8005510 <f_write+0xe4>
					} else
#endif
					{
						clst = create_chain(&fp->obj, fp->clust);	/* Follow or stretch cluster chain on the FAT */
 8005500:	68fa      	ldr	r2, [r7, #12]
 8005502:	68fb      	ldr	r3, [r7, #12]
 8005504:	69db      	ldr	r3, [r3, #28]
 8005506:	4619      	mov	r1, r3
 8005508:	4610      	mov	r0, r2
 800550a:	f7fe fe54 	bl	80041b6 <create_chain>
 800550e:	62b8      	str	r0, [r7, #40]	@ 0x28
					}
				}
				if (clst == 0) break;		/* Could not allocate a new cluster (disk full) */
 8005510:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005512:	2b00      	cmp	r3, #0
 8005514:	f000 80f2 	beq.w	80056fc <f_write+0x2d0>
				if (clst == 1) ABORT(fs, FR_INT_ERR);
 8005518:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800551a:	2b01      	cmp	r3, #1
 800551c:	d104      	bne.n	8005528 <f_write+0xfc>
 800551e:	68fb      	ldr	r3, [r7, #12]
 8005520:	2202      	movs	r2, #2
 8005522:	755a      	strb	r2, [r3, #21]
 8005524:	2302      	movs	r3, #2
 8005526:	e0f2      	b.n	800570e <f_write+0x2e2>
				if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 8005528:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800552a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800552e:	d104      	bne.n	800553a <f_write+0x10e>
 8005530:	68fb      	ldr	r3, [r7, #12]
 8005532:	2201      	movs	r2, #1
 8005534:	755a      	strb	r2, [r3, #21]
 8005536:	2301      	movs	r3, #1
 8005538:	e0e9      	b.n	800570e <f_write+0x2e2>
				fp->clust = clst;			/* Update current cluster */
 800553a:	68fb      	ldr	r3, [r7, #12]
 800553c:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800553e:	61da      	str	r2, [r3, #28]
				if (fp->obj.sclust == 0) fp->obj.sclust = clst;	/* Set start cluster if the first write */
 8005540:	68fb      	ldr	r3, [r7, #12]
 8005542:	689b      	ldr	r3, [r3, #8]
 8005544:	2b00      	cmp	r3, #0
 8005546:	d102      	bne.n	800554e <f_write+0x122>
 8005548:	68fb      	ldr	r3, [r7, #12]
 800554a:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800554c:	609a      	str	r2, [r3, #8]
			}
#if _FS_TINY
			if (fs->winsect == fp->sect && sync_window(fs) != FR_OK) ABORT(fs, FR_DISK_ERR);	/* Write-back sector cache */
#else
			if (fp->flag & FA_DIRTY) {		/* Write-back sector cache */
 800554e:	68fb      	ldr	r3, [r7, #12]
 8005550:	7d1b      	ldrb	r3, [r3, #20]
 8005552:	b25b      	sxtb	r3, r3
 8005554:	2b00      	cmp	r3, #0
 8005556:	da18      	bge.n	800558a <f_write+0x15e>
				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);
 8005558:	693b      	ldr	r3, [r7, #16]
 800555a:	7858      	ldrb	r0, [r3, #1]
 800555c:	68fb      	ldr	r3, [r7, #12]
 800555e:	f103 0130 	add.w	r1, r3, #48	@ 0x30
 8005562:	68fb      	ldr	r3, [r7, #12]
 8005564:	6a1a      	ldr	r2, [r3, #32]
 8005566:	2301      	movs	r3, #1
 8005568:	f7fe f886 	bl	8003678 <disk_write>
 800556c:	4603      	mov	r3, r0
 800556e:	2b00      	cmp	r3, #0
 8005570:	d004      	beq.n	800557c <f_write+0x150>
 8005572:	68fb      	ldr	r3, [r7, #12]
 8005574:	2201      	movs	r2, #1
 8005576:	755a      	strb	r2, [r3, #21]
 8005578:	2301      	movs	r3, #1
 800557a:	e0c8      	b.n	800570e <f_write+0x2e2>
				fp->flag &= (BYTE)~FA_DIRTY;
 800557c:	68fb      	ldr	r3, [r7, #12]
 800557e:	7d1b      	ldrb	r3, [r3, #20]
 8005580:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8005584:	b2da      	uxtb	r2, r3
 8005586:	68fb      	ldr	r3, [r7, #12]
 8005588:	751a      	strb	r2, [r3, #20]
			}
#endif
			sect = clust2sect(fs, fp->clust);	/* Get current sector */
 800558a:	693a      	ldr	r2, [r7, #16]
 800558c:	68fb      	ldr	r3, [r7, #12]
 800558e:	69db      	ldr	r3, [r3, #28]
 8005590:	4619      	mov	r1, r3
 8005592:	4610      	mov	r0, r2
 8005594:	f7fe fbfa 	bl	8003d8c <clust2sect>
 8005598:	6178      	str	r0, [r7, #20]
			if (!sect) ABORT(fs, FR_INT_ERR);
 800559a:	697b      	ldr	r3, [r7, #20]
 800559c:	2b00      	cmp	r3, #0
 800559e:	d104      	bne.n	80055aa <f_write+0x17e>
 80055a0:	68fb      	ldr	r3, [r7, #12]
 80055a2:	2202      	movs	r2, #2
 80055a4:	755a      	strb	r2, [r3, #21]
 80055a6:	2302      	movs	r3, #2
 80055a8:	e0b1      	b.n	800570e <f_write+0x2e2>
			sect += csect;
 80055aa:	697a      	ldr	r2, [r7, #20]
 80055ac:	69bb      	ldr	r3, [r7, #24]
 80055ae:	4413      	add	r3, r2
 80055b0:	617b      	str	r3, [r7, #20]
			cc = btw / SS(fs);				/* When remaining bytes >= sector size, */
 80055b2:	687b      	ldr	r3, [r7, #4]
 80055b4:	0a5b      	lsrs	r3, r3, #9
 80055b6:	623b      	str	r3, [r7, #32]
			if (cc) {						/* Write maximum contiguous sectors directly */
 80055b8:	6a3b      	ldr	r3, [r7, #32]
 80055ba:	2b00      	cmp	r3, #0
 80055bc:	d03c      	beq.n	8005638 <f_write+0x20c>
				if (csect + cc > fs->csize) {	/* Clip at cluster boundary */
 80055be:	69ba      	ldr	r2, [r7, #24]
 80055c0:	6a3b      	ldr	r3, [r7, #32]
 80055c2:	4413      	add	r3, r2
 80055c4:	693a      	ldr	r2, [r7, #16]
 80055c6:	8952      	ldrh	r2, [r2, #10]
 80055c8:	4293      	cmp	r3, r2
 80055ca:	d905      	bls.n	80055d8 <f_write+0x1ac>
					cc = fs->csize - csect;
 80055cc:	693b      	ldr	r3, [r7, #16]
 80055ce:	895b      	ldrh	r3, [r3, #10]
 80055d0:	461a      	mov	r2, r3
 80055d2:	69bb      	ldr	r3, [r7, #24]
 80055d4:	1ad3      	subs	r3, r2, r3
 80055d6:	623b      	str	r3, [r7, #32]
				}
				if (disk_write(fs->drv, wbuff, sect, cc) != RES_OK) ABORT(fs, FR_DISK_ERR);
 80055d8:	693b      	ldr	r3, [r7, #16]
 80055da:	7858      	ldrb	r0, [r3, #1]
 80055dc:	6a3b      	ldr	r3, [r7, #32]
 80055de:	697a      	ldr	r2, [r7, #20]
 80055e0:	69f9      	ldr	r1, [r7, #28]
 80055e2:	f7fe f849 	bl	8003678 <disk_write>
 80055e6:	4603      	mov	r3, r0
 80055e8:	2b00      	cmp	r3, #0
 80055ea:	d004      	beq.n	80055f6 <f_write+0x1ca>
 80055ec:	68fb      	ldr	r3, [r7, #12]
 80055ee:	2201      	movs	r2, #1
 80055f0:	755a      	strb	r2, [r3, #21]
 80055f2:	2301      	movs	r3, #1
 80055f4:	e08b      	b.n	800570e <f_write+0x2e2>
				if (fs->winsect - sect < cc) {	/* Refill sector cache if it gets invalidated by the direct write */
					mem_cpy(fs->win, wbuff + ((fs->winsect - sect) * SS(fs)), SS(fs));
					fs->wflag = 0;
				}
#else
				if (fp->sect - sect < cc) { /* Refill sector cache if it gets invalidated by the direct write */
 80055f6:	68fb      	ldr	r3, [r7, #12]
 80055f8:	6a1a      	ldr	r2, [r3, #32]
 80055fa:	697b      	ldr	r3, [r7, #20]
 80055fc:	1ad3      	subs	r3, r2, r3
 80055fe:	6a3a      	ldr	r2, [r7, #32]
 8005600:	429a      	cmp	r2, r3
 8005602:	d915      	bls.n	8005630 <f_write+0x204>
					mem_cpy(fp->buf, wbuff + ((fp->sect - sect) * SS(fs)), SS(fs));
 8005604:	68fb      	ldr	r3, [r7, #12]
 8005606:	f103 0030 	add.w	r0, r3, #48	@ 0x30
 800560a:	68fb      	ldr	r3, [r7, #12]
 800560c:	6a1a      	ldr	r2, [r3, #32]
 800560e:	697b      	ldr	r3, [r7, #20]
 8005610:	1ad3      	subs	r3, r2, r3
 8005612:	025b      	lsls	r3, r3, #9
 8005614:	69fa      	ldr	r2, [r7, #28]
 8005616:	4413      	add	r3, r2
 8005618:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800561c:	4619      	mov	r1, r3
 800561e:	f7fe f8eb 	bl	80037f8 <mem_cpy>
					fp->flag &= (BYTE)~FA_DIRTY;
 8005622:	68fb      	ldr	r3, [r7, #12]
 8005624:	7d1b      	ldrb	r3, [r3, #20]
 8005626:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800562a:	b2da      	uxtb	r2, r3
 800562c:	68fb      	ldr	r3, [r7, #12]
 800562e:	751a      	strb	r2, [r3, #20]
				}
#endif
#endif
				wcnt = SS(fs) * cc;		/* Number of bytes transferred */
 8005630:	6a3b      	ldr	r3, [r7, #32]
 8005632:	025b      	lsls	r3, r3, #9
 8005634:	627b      	str	r3, [r7, #36]	@ 0x24
				continue;
 8005636:	e03f      	b.n	80056b8 <f_write+0x28c>
			if (fp->fptr >= fp->obj.objsize) {	/* Avoid silly cache filling on the growing edge */
				if (sync_window(fs) != FR_OK) ABORT(fs, FR_DISK_ERR);
				fs->winsect = sect;
			}
#else
			if (fp->sect != sect && 		/* Fill sector cache with file data */
 8005638:	68fb      	ldr	r3, [r7, #12]
 800563a:	6a1b      	ldr	r3, [r3, #32]
 800563c:	697a      	ldr	r2, [r7, #20]
 800563e:	429a      	cmp	r2, r3
 8005640:	d016      	beq.n	8005670 <f_write+0x244>
				fp->fptr < fp->obj.objsize &&
 8005642:	68fb      	ldr	r3, [r7, #12]
 8005644:	699a      	ldr	r2, [r3, #24]
 8005646:	68fb      	ldr	r3, [r7, #12]
 8005648:	68db      	ldr	r3, [r3, #12]
			if (fp->sect != sect && 		/* Fill sector cache with file data */
 800564a:	429a      	cmp	r2, r3
 800564c:	d210      	bcs.n	8005670 <f_write+0x244>
				disk_read(fs->drv, fp->buf, sect, 1) != RES_OK) {
 800564e:	693b      	ldr	r3, [r7, #16]
 8005650:	7858      	ldrb	r0, [r3, #1]
 8005652:	68fb      	ldr	r3, [r7, #12]
 8005654:	f103 0130 	add.w	r1, r3, #48	@ 0x30
 8005658:	2301      	movs	r3, #1
 800565a:	697a      	ldr	r2, [r7, #20]
 800565c:	f7fd ffec 	bl	8003638 <disk_read>
 8005660:	4603      	mov	r3, r0
				fp->fptr < fp->obj.objsize &&
 8005662:	2b00      	cmp	r3, #0
 8005664:	d004      	beq.n	8005670 <f_write+0x244>
					ABORT(fs, FR_DISK_ERR);
 8005666:	68fb      	ldr	r3, [r7, #12]
 8005668:	2201      	movs	r2, #1
 800566a:	755a      	strb	r2, [r3, #21]
 800566c:	2301      	movs	r3, #1
 800566e:	e04e      	b.n	800570e <f_write+0x2e2>
			}
#endif
			fp->sect = sect;
 8005670:	68fb      	ldr	r3, [r7, #12]
 8005672:	697a      	ldr	r2, [r7, #20]
 8005674:	621a      	str	r2, [r3, #32]
		}
		wcnt = SS(fs) - (UINT)fp->fptr % SS(fs);	/* Number of bytes left in the sector */
 8005676:	68fb      	ldr	r3, [r7, #12]
 8005678:	699b      	ldr	r3, [r3, #24]
 800567a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800567e:	f5c3 7300 	rsb	r3, r3, #512	@ 0x200
 8005682:	627b      	str	r3, [r7, #36]	@ 0x24
		if (wcnt > btw) wcnt = btw;					/* Clip it by btw if needed */
 8005684:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8005686:	687b      	ldr	r3, [r7, #4]
 8005688:	429a      	cmp	r2, r3
 800568a:	d901      	bls.n	8005690 <f_write+0x264>
 800568c:	687b      	ldr	r3, [r7, #4]
 800568e:	627b      	str	r3, [r7, #36]	@ 0x24
#if _FS_TINY
		if (move_window(fs, fp->sect) != FR_OK) ABORT(fs, FR_DISK_ERR);	/* Move sector window */
		mem_cpy(fs->win + fp->fptr % SS(fs), wbuff, wcnt);	/* Fit data to the sector */
		fs->wflag = 1;
#else
		mem_cpy(fp->buf + fp->fptr % SS(fs), wbuff, wcnt);	/* Fit data to the sector */
 8005690:	68fb      	ldr	r3, [r7, #12]
 8005692:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 8005696:	68fb      	ldr	r3, [r7, #12]
 8005698:	699b      	ldr	r3, [r3, #24]
 800569a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800569e:	4413      	add	r3, r2
 80056a0:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80056a2:	69f9      	ldr	r1, [r7, #28]
 80056a4:	4618      	mov	r0, r3
 80056a6:	f7fe f8a7 	bl	80037f8 <mem_cpy>
		fp->flag |= FA_DIRTY;
 80056aa:	68fb      	ldr	r3, [r7, #12]
 80056ac:	7d1b      	ldrb	r3, [r3, #20]
 80056ae:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 80056b2:	b2da      	uxtb	r2, r3
 80056b4:	68fb      	ldr	r3, [r7, #12]
 80056b6:	751a      	strb	r2, [r3, #20]
		wbuff += wcnt, fp->fptr += wcnt, fp->obj.objsize = (fp->fptr > fp->obj.objsize) ? fp->fptr : fp->obj.objsize, *bw += wcnt, btw -= wcnt) {
 80056b8:	69fa      	ldr	r2, [r7, #28]
 80056ba:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80056bc:	4413      	add	r3, r2
 80056be:	61fb      	str	r3, [r7, #28]
 80056c0:	68fb      	ldr	r3, [r7, #12]
 80056c2:	699a      	ldr	r2, [r3, #24]
 80056c4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80056c6:	441a      	add	r2, r3
 80056c8:	68fb      	ldr	r3, [r7, #12]
 80056ca:	619a      	str	r2, [r3, #24]
 80056cc:	68fb      	ldr	r3, [r7, #12]
 80056ce:	68da      	ldr	r2, [r3, #12]
 80056d0:	68fb      	ldr	r3, [r7, #12]
 80056d2:	699b      	ldr	r3, [r3, #24]
 80056d4:	429a      	cmp	r2, r3
 80056d6:	bf38      	it	cc
 80056d8:	461a      	movcc	r2, r3
 80056da:	68fb      	ldr	r3, [r7, #12]
 80056dc:	60da      	str	r2, [r3, #12]
 80056de:	683b      	ldr	r3, [r7, #0]
 80056e0:	681a      	ldr	r2, [r3, #0]
 80056e2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80056e4:	441a      	add	r2, r3
 80056e6:	683b      	ldr	r3, [r7, #0]
 80056e8:	601a      	str	r2, [r3, #0]
 80056ea:	687a      	ldr	r2, [r7, #4]
 80056ec:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80056ee:	1ad3      	subs	r3, r2, r3
 80056f0:	607b      	str	r3, [r7, #4]
	for ( ;  btw;							/* Repeat until all data written */
 80056f2:	687b      	ldr	r3, [r7, #4]
 80056f4:	2b00      	cmp	r3, #0
 80056f6:	f47f aed4 	bne.w	80054a2 <f_write+0x76>
 80056fa:	e000      	b.n	80056fe <f_write+0x2d2>
				if (clst == 0) break;		/* Could not allocate a new cluster (disk full) */
 80056fc:	bf00      	nop
#endif
	}

	fp->flag |= FA_MODIFIED;				/* Set file change flag */
 80056fe:	68fb      	ldr	r3, [r7, #12]
 8005700:	7d1b      	ldrb	r3, [r3, #20]
 8005702:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8005706:	b2da      	uxtb	r2, r3
 8005708:	68fb      	ldr	r3, [r7, #12]
 800570a:	751a      	strb	r2, [r3, #20]

	LEAVE_FF(fs, FR_OK);
 800570c:	2300      	movs	r3, #0
}
 800570e:	4618      	mov	r0, r3
 8005710:	3730      	adds	r7, #48	@ 0x30
 8005712:	46bd      	mov	sp, r7
 8005714:	bd80      	pop	{r7, pc}

08005716 <f_sync>:
/*-----------------------------------------------------------------------*/

FRESULT f_sync (
	FIL* fp		/* Pointer to the file object */
)
{
 8005716:	b580      	push	{r7, lr}
 8005718:	b086      	sub	sp, #24
 800571a:	af00      	add	r7, sp, #0
 800571c:	6078      	str	r0, [r7, #4]
#if _FS_EXFAT
	DIR dj;
	DEF_NAMBUF
#endif

	res = validate(&fp->obj, &fs);	/* Check validity of the file object */
 800571e:	687b      	ldr	r3, [r7, #4]
 8005720:	f107 0208 	add.w	r2, r7, #8
 8005724:	4611      	mov	r1, r2
 8005726:	4618      	mov	r0, r3
 8005728:	f7ff fc4a 	bl	8004fc0 <validate>
 800572c:	4603      	mov	r3, r0
 800572e:	75fb      	strb	r3, [r7, #23]
	if (res == FR_OK) {
 8005730:	7dfb      	ldrb	r3, [r7, #23]
 8005732:	2b00      	cmp	r3, #0
 8005734:	d168      	bne.n	8005808 <f_sync+0xf2>
		if (fp->flag & FA_MODIFIED) {	/* Is there any change to the file? */
 8005736:	687b      	ldr	r3, [r7, #4]
 8005738:	7d1b      	ldrb	r3, [r3, #20]
 800573a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800573e:	2b00      	cmp	r3, #0
 8005740:	d062      	beq.n	8005808 <f_sync+0xf2>
#if !_FS_TINY
			if (fp->flag & FA_DIRTY) {	/* Write-back cached data if needed */
 8005742:	687b      	ldr	r3, [r7, #4]
 8005744:	7d1b      	ldrb	r3, [r3, #20]
 8005746:	b25b      	sxtb	r3, r3
 8005748:	2b00      	cmp	r3, #0
 800574a:	da15      	bge.n	8005778 <f_sync+0x62>
				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) LEAVE_FF(fs, FR_DISK_ERR);
 800574c:	68bb      	ldr	r3, [r7, #8]
 800574e:	7858      	ldrb	r0, [r3, #1]
 8005750:	687b      	ldr	r3, [r7, #4]
 8005752:	f103 0130 	add.w	r1, r3, #48	@ 0x30
 8005756:	687b      	ldr	r3, [r7, #4]
 8005758:	6a1a      	ldr	r2, [r3, #32]
 800575a:	2301      	movs	r3, #1
 800575c:	f7fd ff8c 	bl	8003678 <disk_write>
 8005760:	4603      	mov	r3, r0
 8005762:	2b00      	cmp	r3, #0
 8005764:	d001      	beq.n	800576a <f_sync+0x54>
 8005766:	2301      	movs	r3, #1
 8005768:	e04f      	b.n	800580a <f_sync+0xf4>
				fp->flag &= (BYTE)~FA_DIRTY;
 800576a:	687b      	ldr	r3, [r7, #4]
 800576c:	7d1b      	ldrb	r3, [r3, #20]
 800576e:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8005772:	b2da      	uxtb	r2, r3
 8005774:	687b      	ldr	r3, [r7, #4]
 8005776:	751a      	strb	r2, [r3, #20]
			}
#endif
			/* Update the directory entry */
			tm = GET_FATTIME();				/* Modified time */
 8005778:	f7fd f9d0 	bl	8002b1c <get_fattime>
 800577c:	6138      	str	r0, [r7, #16]
					FREE_NAMBUF();
				}
			} else
#endif
			{
				res = move_window(fs, fp->dir_sect);
 800577e:	68ba      	ldr	r2, [r7, #8]
 8005780:	687b      	ldr	r3, [r7, #4]
 8005782:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005784:	4619      	mov	r1, r3
 8005786:	4610      	mov	r0, r2
 8005788:	f7fe fa64 	bl	8003c54 <move_window>
 800578c:	4603      	mov	r3, r0
 800578e:	75fb      	strb	r3, [r7, #23]
				if (res == FR_OK) {
 8005790:	7dfb      	ldrb	r3, [r7, #23]
 8005792:	2b00      	cmp	r3, #0
 8005794:	d138      	bne.n	8005808 <f_sync+0xf2>
					dir = fp->dir_ptr;
 8005796:	687b      	ldr	r3, [r7, #4]
 8005798:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800579a:	60fb      	str	r3, [r7, #12]
					dir[DIR_Attr] |= AM_ARC;						/* Set archive bit */
 800579c:	68fb      	ldr	r3, [r7, #12]
 800579e:	330b      	adds	r3, #11
 80057a0:	781a      	ldrb	r2, [r3, #0]
 80057a2:	68fb      	ldr	r3, [r7, #12]
 80057a4:	330b      	adds	r3, #11
 80057a6:	f042 0220 	orr.w	r2, r2, #32
 80057aa:	b2d2      	uxtb	r2, r2
 80057ac:	701a      	strb	r2, [r3, #0]
					st_clust(fp->obj.fs, dir, fp->obj.sclust);		/* Update file allocation info  */
 80057ae:	687b      	ldr	r3, [r7, #4]
 80057b0:	6818      	ldr	r0, [r3, #0]
 80057b2:	687b      	ldr	r3, [r7, #4]
 80057b4:	689b      	ldr	r3, [r3, #8]
 80057b6:	461a      	mov	r2, r3
 80057b8:	68f9      	ldr	r1, [r7, #12]
 80057ba:	f7fe ff6e 	bl	800469a <st_clust>
					st_dword(dir + DIR_FileSize, (DWORD)fp->obj.objsize);	/* Update file size */
 80057be:	68fb      	ldr	r3, [r7, #12]
 80057c0:	f103 021c 	add.w	r2, r3, #28
 80057c4:	687b      	ldr	r3, [r7, #4]
 80057c6:	68db      	ldr	r3, [r3, #12]
 80057c8:	4619      	mov	r1, r3
 80057ca:	4610      	mov	r0, r2
 80057cc:	f7fd ffe8 	bl	80037a0 <st_dword>
					st_dword(dir + DIR_ModTime, tm);				/* Update modified time */
 80057d0:	68fb      	ldr	r3, [r7, #12]
 80057d2:	3316      	adds	r3, #22
 80057d4:	6939      	ldr	r1, [r7, #16]
 80057d6:	4618      	mov	r0, r3
 80057d8:	f7fd ffe2 	bl	80037a0 <st_dword>
					st_word(dir + DIR_LstAccDate, 0);
 80057dc:	68fb      	ldr	r3, [r7, #12]
 80057de:	3312      	adds	r3, #18
 80057e0:	2100      	movs	r1, #0
 80057e2:	4618      	mov	r0, r3
 80057e4:	f7fd ffc1 	bl	800376a <st_word>
					fs->wflag = 1;
 80057e8:	68bb      	ldr	r3, [r7, #8]
 80057ea:	2201      	movs	r2, #1
 80057ec:	70da      	strb	r2, [r3, #3]
					res = sync_fs(fs);					/* Restore it to the directory */
 80057ee:	68bb      	ldr	r3, [r7, #8]
 80057f0:	4618      	mov	r0, r3
 80057f2:	f7fe fa5d 	bl	8003cb0 <sync_fs>
 80057f6:	4603      	mov	r3, r0
 80057f8:	75fb      	strb	r3, [r7, #23]
					fp->flag &= (BYTE)~FA_MODIFIED;
 80057fa:	687b      	ldr	r3, [r7, #4]
 80057fc:	7d1b      	ldrb	r3, [r3, #20]
 80057fe:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8005802:	b2da      	uxtb	r2, r3
 8005804:	687b      	ldr	r3, [r7, #4]
 8005806:	751a      	strb	r2, [r3, #20]
				}
			}
		}
	}

	LEAVE_FF(fs, res);
 8005808:	7dfb      	ldrb	r3, [r7, #23]
}
 800580a:	4618      	mov	r0, r3
 800580c:	3718      	adds	r7, #24
 800580e:	46bd      	mov	sp, r7
 8005810:	bd80      	pop	{r7, pc}

08005812 <f_close>:
/*-----------------------------------------------------------------------*/

FRESULT f_close (
	FIL* fp		/* Pointer to the file object to be closed */
)
{
 8005812:	b580      	push	{r7, lr}
 8005814:	b084      	sub	sp, #16
 8005816:	af00      	add	r7, sp, #0
 8005818:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs;

#if !_FS_READONLY
	res = f_sync(fp);					/* Flush cached data */
 800581a:	6878      	ldr	r0, [r7, #4]
 800581c:	f7ff ff7b 	bl	8005716 <f_sync>
 8005820:	4603      	mov	r3, r0
 8005822:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK)
 8005824:	7bfb      	ldrb	r3, [r7, #15]
 8005826:	2b00      	cmp	r3, #0
 8005828:	d118      	bne.n	800585c <f_close+0x4a>
#endif
	{
		res = validate(&fp->obj, &fs);	/* Lock volume */
 800582a:	687b      	ldr	r3, [r7, #4]
 800582c:	f107 0208 	add.w	r2, r7, #8
 8005830:	4611      	mov	r1, r2
 8005832:	4618      	mov	r0, r3
 8005834:	f7ff fbc4 	bl	8004fc0 <validate>
 8005838:	4603      	mov	r3, r0
 800583a:	73fb      	strb	r3, [r7, #15]
		if (res == FR_OK) {
 800583c:	7bfb      	ldrb	r3, [r7, #15]
 800583e:	2b00      	cmp	r3, #0
 8005840:	d10c      	bne.n	800585c <f_close+0x4a>
#if _FS_LOCK != 0
			res = dec_lock(fp->obj.lockid);	/* Decrement file open counter */
 8005842:	687b      	ldr	r3, [r7, #4]
 8005844:	691b      	ldr	r3, [r3, #16]
 8005846:	4618      	mov	r0, r3
 8005848:	f7fe f960 	bl	8003b0c <dec_lock>
 800584c:	4603      	mov	r3, r0
 800584e:	73fb      	strb	r3, [r7, #15]
			if (res == FR_OK)
 8005850:	7bfb      	ldrb	r3, [r7, #15]
 8005852:	2b00      	cmp	r3, #0
 8005854:	d102      	bne.n	800585c <f_close+0x4a>
#endif
			{
				fp->obj.fs = 0;			/* Invalidate file object */
 8005856:	687b      	ldr	r3, [r7, #4]
 8005858:	2200      	movs	r2, #0
 800585a:	601a      	str	r2, [r3, #0]
#if _FS_REENTRANT
			unlock_fs(fs, FR_OK);		/* Unlock volume */
#endif
		}
	}
	return res;
 800585c:	7bfb      	ldrb	r3, [r7, #15]
}
 800585e:	4618      	mov	r0, r3
 8005860:	3710      	adds	r7, #16
 8005862:	46bd      	mov	sp, r7
 8005864:	bd80      	pop	{r7, pc}
	...

08005868 <FATFS_LinkDriverEx>:
  * @param  lun : only used for USB Key Disk to add multi-lun management
            else the parameter must be equal to 0
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriverEx(const Diskio_drvTypeDef *drv, char *path, uint8_t lun)
{
 8005868:	b480      	push	{r7}
 800586a:	b087      	sub	sp, #28
 800586c:	af00      	add	r7, sp, #0
 800586e:	60f8      	str	r0, [r7, #12]
 8005870:	60b9      	str	r1, [r7, #8]
 8005872:	4613      	mov	r3, r2
 8005874:	71fb      	strb	r3, [r7, #7]
  uint8_t ret = 1;
 8005876:	2301      	movs	r3, #1
 8005878:	75fb      	strb	r3, [r7, #23]
  uint8_t DiskNum = 0;
 800587a:	2300      	movs	r3, #0
 800587c:	75bb      	strb	r3, [r7, #22]

  if(disk.nbr < _VOLUMES)
 800587e:	4b1f      	ldr	r3, [pc, #124]	@ (80058fc <FATFS_LinkDriverEx+0x94>)
 8005880:	7a5b      	ldrb	r3, [r3, #9]
 8005882:	b2db      	uxtb	r3, r3
 8005884:	2b00      	cmp	r3, #0
 8005886:	d131      	bne.n	80058ec <FATFS_LinkDriverEx+0x84>
  {
    disk.is_initialized[disk.nbr] = 0;
 8005888:	4b1c      	ldr	r3, [pc, #112]	@ (80058fc <FATFS_LinkDriverEx+0x94>)
 800588a:	7a5b      	ldrb	r3, [r3, #9]
 800588c:	b2db      	uxtb	r3, r3
 800588e:	461a      	mov	r2, r3
 8005890:	4b1a      	ldr	r3, [pc, #104]	@ (80058fc <FATFS_LinkDriverEx+0x94>)
 8005892:	2100      	movs	r1, #0
 8005894:	5499      	strb	r1, [r3, r2]
    disk.drv[disk.nbr] = drv;
 8005896:	4b19      	ldr	r3, [pc, #100]	@ (80058fc <FATFS_LinkDriverEx+0x94>)
 8005898:	7a5b      	ldrb	r3, [r3, #9]
 800589a:	b2db      	uxtb	r3, r3
 800589c:	4a17      	ldr	r2, [pc, #92]	@ (80058fc <FATFS_LinkDriverEx+0x94>)
 800589e:	009b      	lsls	r3, r3, #2
 80058a0:	4413      	add	r3, r2
 80058a2:	68fa      	ldr	r2, [r7, #12]
 80058a4:	605a      	str	r2, [r3, #4]
    disk.lun[disk.nbr] = lun;
 80058a6:	4b15      	ldr	r3, [pc, #84]	@ (80058fc <FATFS_LinkDriverEx+0x94>)
 80058a8:	7a5b      	ldrb	r3, [r3, #9]
 80058aa:	b2db      	uxtb	r3, r3
 80058ac:	461a      	mov	r2, r3
 80058ae:	4b13      	ldr	r3, [pc, #76]	@ (80058fc <FATFS_LinkDriverEx+0x94>)
 80058b0:	4413      	add	r3, r2
 80058b2:	79fa      	ldrb	r2, [r7, #7]
 80058b4:	721a      	strb	r2, [r3, #8]
    DiskNum = disk.nbr++;
 80058b6:	4b11      	ldr	r3, [pc, #68]	@ (80058fc <FATFS_LinkDriverEx+0x94>)
 80058b8:	7a5b      	ldrb	r3, [r3, #9]
 80058ba:	b2db      	uxtb	r3, r3
 80058bc:	1c5a      	adds	r2, r3, #1
 80058be:	b2d1      	uxtb	r1, r2
 80058c0:	4a0e      	ldr	r2, [pc, #56]	@ (80058fc <FATFS_LinkDriverEx+0x94>)
 80058c2:	7251      	strb	r1, [r2, #9]
 80058c4:	75bb      	strb	r3, [r7, #22]
    path[0] = DiskNum + '0';
 80058c6:	7dbb      	ldrb	r3, [r7, #22]
 80058c8:	3330      	adds	r3, #48	@ 0x30
 80058ca:	b2da      	uxtb	r2, r3
 80058cc:	68bb      	ldr	r3, [r7, #8]
 80058ce:	701a      	strb	r2, [r3, #0]
    path[1] = ':';
 80058d0:	68bb      	ldr	r3, [r7, #8]
 80058d2:	3301      	adds	r3, #1
 80058d4:	223a      	movs	r2, #58	@ 0x3a
 80058d6:	701a      	strb	r2, [r3, #0]
    path[2] = '/';
 80058d8:	68bb      	ldr	r3, [r7, #8]
 80058da:	3302      	adds	r3, #2
 80058dc:	222f      	movs	r2, #47	@ 0x2f
 80058de:	701a      	strb	r2, [r3, #0]
    path[3] = 0;
 80058e0:	68bb      	ldr	r3, [r7, #8]
 80058e2:	3303      	adds	r3, #3
 80058e4:	2200      	movs	r2, #0
 80058e6:	701a      	strb	r2, [r3, #0]
    ret = 0;
 80058e8:	2300      	movs	r3, #0
 80058ea:	75fb      	strb	r3, [r7, #23]
  }

  return ret;
 80058ec:	7dfb      	ldrb	r3, [r7, #23]
}
 80058ee:	4618      	mov	r0, r3
 80058f0:	371c      	adds	r7, #28
 80058f2:	46bd      	mov	sp, r7
 80058f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058f8:	4770      	bx	lr
 80058fa:	bf00      	nop
 80058fc:	20000134 	.word	0x20000134

08005900 <FATFS_LinkDriver>:
  * @param  drv: pointer to the disk IO Driver structure
  * @param  path: pointer to the logical drive path
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriver(const Diskio_drvTypeDef *drv, char *path)
{
 8005900:	b580      	push	{r7, lr}
 8005902:	b082      	sub	sp, #8
 8005904:	af00      	add	r7, sp, #0
 8005906:	6078      	str	r0, [r7, #4]
 8005908:	6039      	str	r1, [r7, #0]
  return FATFS_LinkDriverEx(drv, path, 0);
 800590a:	2200      	movs	r2, #0
 800590c:	6839      	ldr	r1, [r7, #0]
 800590e:	6878      	ldr	r0, [r7, #4]
 8005910:	f7ff ffaa 	bl	8005868 <FATFS_LinkDriverEx>
 8005914:	4603      	mov	r3, r0
}
 8005916:	4618      	mov	r0, r3
 8005918:	3708      	adds	r7, #8
 800591a:	46bd      	mov	sp, r7
 800591c:	bd80      	pop	{r7, pc}
	...

08005920 <jpeg_CreateCompress>:
 * The error manager must already be set up (in case memory manager fails).
 */

GLOBAL(void)
jpeg_CreateCompress (j_compress_ptr cinfo, int version, size_t structsize)
{
 8005920:	b580      	push	{r7, lr}
 8005922:	b088      	sub	sp, #32
 8005924:	af00      	add	r7, sp, #0
 8005926:	60f8      	str	r0, [r7, #12]
 8005928:	60b9      	str	r1, [r7, #8]
 800592a:	607a      	str	r2, [r7, #4]
  int i;

  /* Guard against version mismatches between library and caller. */
  cinfo->mem = NULL;		/* so jpeg_destroy knows mem mgr not called */
 800592c:	68fb      	ldr	r3, [r7, #12]
 800592e:	2200      	movs	r2, #0
 8005930:	605a      	str	r2, [r3, #4]
  if (version != JPEG_LIB_VERSION)
 8005932:	68bb      	ldr	r3, [r7, #8]
 8005934:	2b50      	cmp	r3, #80	@ 0x50
 8005936:	d010      	beq.n	800595a <jpeg_CreateCompress+0x3a>
    ERREXIT2(cinfo, JERR_BAD_LIB_VERSION, JPEG_LIB_VERSION, version);
 8005938:	68fb      	ldr	r3, [r7, #12]
 800593a:	681b      	ldr	r3, [r3, #0]
 800593c:	220d      	movs	r2, #13
 800593e:	615a      	str	r2, [r3, #20]
 8005940:	68fb      	ldr	r3, [r7, #12]
 8005942:	681b      	ldr	r3, [r3, #0]
 8005944:	2250      	movs	r2, #80	@ 0x50
 8005946:	619a      	str	r2, [r3, #24]
 8005948:	68fb      	ldr	r3, [r7, #12]
 800594a:	681b      	ldr	r3, [r3, #0]
 800594c:	68ba      	ldr	r2, [r7, #8]
 800594e:	61da      	str	r2, [r3, #28]
 8005950:	68fb      	ldr	r3, [r7, #12]
 8005952:	681b      	ldr	r3, [r3, #0]
 8005954:	681b      	ldr	r3, [r3, #0]
 8005956:	68f8      	ldr	r0, [r7, #12]
 8005958:	4798      	blx	r3
  if (structsize != SIZEOF(struct jpeg_compress_struct))
 800595a:	687b      	ldr	r3, [r7, #4]
 800595c:	f5b3 7fd8 	cmp.w	r3, #432	@ 0x1b0
 8005960:	d011      	beq.n	8005986 <jpeg_CreateCompress+0x66>
    ERREXIT2(cinfo, JERR_BAD_STRUCT_SIZE, 
 8005962:	68fb      	ldr	r3, [r7, #12]
 8005964:	681b      	ldr	r3, [r3, #0]
 8005966:	2216      	movs	r2, #22
 8005968:	615a      	str	r2, [r3, #20]
 800596a:	68fb      	ldr	r3, [r7, #12]
 800596c:	681b      	ldr	r3, [r3, #0]
 800596e:	f44f 72d8 	mov.w	r2, #432	@ 0x1b0
 8005972:	619a      	str	r2, [r3, #24]
 8005974:	68fb      	ldr	r3, [r7, #12]
 8005976:	681b      	ldr	r3, [r3, #0]
 8005978:	687a      	ldr	r2, [r7, #4]
 800597a:	61da      	str	r2, [r3, #28]
 800597c:	68fb      	ldr	r3, [r7, #12]
 800597e:	681b      	ldr	r3, [r3, #0]
 8005980:	681b      	ldr	r3, [r3, #0]
 8005982:	68f8      	ldr	r0, [r7, #12]
 8005984:	4798      	blx	r3
   * client_data, so we have to save and restore those fields.
   * Note: if application hasn't set client_data, tools like Purify may
   * complain here.
   */
  {
    struct jpeg_error_mgr * err = cinfo->err;
 8005986:	68fb      	ldr	r3, [r7, #12]
 8005988:	681b      	ldr	r3, [r3, #0]
 800598a:	61bb      	str	r3, [r7, #24]
    void * client_data = cinfo->client_data; /* ignore Purify complaint here */
 800598c:	68fb      	ldr	r3, [r7, #12]
 800598e:	68db      	ldr	r3, [r3, #12]
 8005990:	617b      	str	r3, [r7, #20]
    MEMZERO(cinfo, SIZEOF(struct jpeg_compress_struct));
 8005992:	f44f 72d8 	mov.w	r2, #432	@ 0x1b0
 8005996:	2100      	movs	r1, #0
 8005998:	68f8      	ldr	r0, [r7, #12]
 800599a:	f014 f829 	bl	80199f0 <memset>
    cinfo->err = err;
 800599e:	68fb      	ldr	r3, [r7, #12]
 80059a0:	69ba      	ldr	r2, [r7, #24]
 80059a2:	601a      	str	r2, [r3, #0]
    cinfo->client_data = client_data;
 80059a4:	68fb      	ldr	r3, [r7, #12]
 80059a6:	697a      	ldr	r2, [r7, #20]
 80059a8:	60da      	str	r2, [r3, #12]
  }
  cinfo->is_decompressor = FALSE;
 80059aa:	68fb      	ldr	r3, [r7, #12]
 80059ac:	2200      	movs	r2, #0
 80059ae:	611a      	str	r2, [r3, #16]

  /* Initialize a memory manager instance for this object */
  jinit_memory_mgr((j_common_ptr) cinfo);
 80059b0:	68f8      	ldr	r0, [r7, #12]
 80059b2:	f013 fde9 	bl	8019588 <jinit_memory_mgr>

  /* Zero out pointers to permanent structures. */
  cinfo->progress = NULL;
 80059b6:	68fb      	ldr	r3, [r7, #12]
 80059b8:	2200      	movs	r2, #0
 80059ba:	609a      	str	r2, [r3, #8]
  cinfo->dest = NULL;
 80059bc:	68fb      	ldr	r3, [r7, #12]
 80059be:	2200      	movs	r2, #0
 80059c0:	619a      	str	r2, [r3, #24]

  cinfo->comp_info = NULL;
 80059c2:	68fb      	ldr	r3, [r7, #12]
 80059c4:	2200      	movs	r2, #0
 80059c6:	655a      	str	r2, [r3, #84]	@ 0x54

  for (i = 0; i < NUM_QUANT_TBLS; i++) {
 80059c8:	2300      	movs	r3, #0
 80059ca:	61fb      	str	r3, [r7, #28]
 80059cc:	e00e      	b.n	80059ec <jpeg_CreateCompress+0xcc>
    cinfo->quant_tbl_ptrs[i] = NULL;
 80059ce:	68fb      	ldr	r3, [r7, #12]
 80059d0:	69fa      	ldr	r2, [r7, #28]
 80059d2:	3216      	adds	r2, #22
 80059d4:	2100      	movs	r1, #0
 80059d6:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    cinfo->q_scale_factor[i] = 100;
 80059da:	68fb      	ldr	r3, [r7, #12]
 80059dc:	69fa      	ldr	r2, [r7, #28]
 80059de:	321a      	adds	r2, #26
 80059e0:	2164      	movs	r1, #100	@ 0x64
 80059e2:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  for (i = 0; i < NUM_QUANT_TBLS; i++) {
 80059e6:	69fb      	ldr	r3, [r7, #28]
 80059e8:	3301      	adds	r3, #1
 80059ea:	61fb      	str	r3, [r7, #28]
 80059ec:	69fb      	ldr	r3, [r7, #28]
 80059ee:	2b03      	cmp	r3, #3
 80059f0:	dded      	ble.n	80059ce <jpeg_CreateCompress+0xae>
  }

  for (i = 0; i < NUM_HUFF_TBLS; i++) {
 80059f2:	2300      	movs	r3, #0
 80059f4:	61fb      	str	r3, [r7, #28]
 80059f6:	e00e      	b.n	8005a16 <jpeg_CreateCompress+0xf6>
    cinfo->dc_huff_tbl_ptrs[i] = NULL;
 80059f8:	68fb      	ldr	r3, [r7, #12]
 80059fa:	69fa      	ldr	r2, [r7, #28]
 80059fc:	321e      	adds	r2, #30
 80059fe:	2100      	movs	r1, #0
 8005a00:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    cinfo->ac_huff_tbl_ptrs[i] = NULL;
 8005a04:	68fb      	ldr	r3, [r7, #12]
 8005a06:	69fa      	ldr	r2, [r7, #28]
 8005a08:	3222      	adds	r2, #34	@ 0x22
 8005a0a:	2100      	movs	r1, #0
 8005a0c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  for (i = 0; i < NUM_HUFF_TBLS; i++) {
 8005a10:	69fb      	ldr	r3, [r7, #28]
 8005a12:	3301      	adds	r3, #1
 8005a14:	61fb      	str	r3, [r7, #28]
 8005a16:	69fb      	ldr	r3, [r7, #28]
 8005a18:	2b03      	cmp	r3, #3
 8005a1a:	dded      	ble.n	80059f8 <jpeg_CreateCompress+0xd8>
  }

  /* Must do it here for emit_dqt in case jpeg_write_tables is used */
  cinfo->block_size = DCTSIZE;
 8005a1c:	68fb      	ldr	r3, [r7, #12]
 8005a1e:	2208      	movs	r2, #8
 8005a20:	f8c3 2178 	str.w	r2, [r3, #376]	@ 0x178
  cinfo->natural_order = jpeg_natural_order;
 8005a24:	68fb      	ldr	r3, [r7, #12]
 8005a26:	4a0c      	ldr	r2, [pc, #48]	@ (8005a58 <jpeg_CreateCompress+0x138>)
 8005a28:	f8c3 217c 	str.w	r2, [r3, #380]	@ 0x17c
  cinfo->lim_Se = DCTSIZE2-1;
 8005a2c:	68fb      	ldr	r3, [r7, #12]
 8005a2e:	223f      	movs	r2, #63	@ 0x3f
 8005a30:	f8c3 2180 	str.w	r2, [r3, #384]	@ 0x180

  cinfo->script_space = NULL;
 8005a34:	68fb      	ldr	r3, [r7, #12]
 8005a36:	2200      	movs	r2, #0
 8005a38:	f8c3 21a8 	str.w	r2, [r3, #424]	@ 0x1a8

  cinfo->input_gamma = 1.0;	/* in case application forgets */
 8005a3c:	68f9      	ldr	r1, [r7, #12]
 8005a3e:	f04f 0200 	mov.w	r2, #0
 8005a42:	4b06      	ldr	r3, [pc, #24]	@ (8005a5c <jpeg_CreateCompress+0x13c>)
 8005a44:	e9c1 230c 	strd	r2, r3, [r1, #48]	@ 0x30

  /* OK, I'm ready */
  cinfo->global_state = CSTATE_START;
 8005a48:	68fb      	ldr	r3, [r7, #12]
 8005a4a:	2264      	movs	r2, #100	@ 0x64
 8005a4c:	615a      	str	r2, [r3, #20]
}
 8005a4e:	bf00      	nop
 8005a50:	3720      	adds	r7, #32
 8005a52:	46bd      	mov	sp, r7
 8005a54:	bd80      	pop	{r7, pc}
 8005a56:	bf00      	nop
 8005a58:	0801bde8 	.word	0x0801bde8
 8005a5c:	3ff00000 	.word	0x3ff00000

08005a60 <jpeg_destroy_compress>:
 * Destruction of a JPEG compression object
 */

GLOBAL(void)
jpeg_destroy_compress (j_compress_ptr cinfo)
{
 8005a60:	b580      	push	{r7, lr}
 8005a62:	b082      	sub	sp, #8
 8005a64:	af00      	add	r7, sp, #0
 8005a66:	6078      	str	r0, [r7, #4]
  jpeg_destroy((j_common_ptr) cinfo); /* use common routine */
 8005a68:	6878      	ldr	r0, [r7, #4]
 8005a6a:	f007 fe0c 	bl	800d686 <jpeg_destroy>
}
 8005a6e:	bf00      	nop
 8005a70:	3708      	adds	r7, #8
 8005a72:	46bd      	mov	sp, r7
 8005a74:	bd80      	pop	{r7, pc}

08005a76 <jpeg_suppress_tables>:
 * jcparam.o would be linked whether the application used it or not.
 */

GLOBAL(void)
jpeg_suppress_tables (j_compress_ptr cinfo, boolean suppress)
{
 8005a76:	b480      	push	{r7}
 8005a78:	b087      	sub	sp, #28
 8005a7a:	af00      	add	r7, sp, #0
 8005a7c:	6078      	str	r0, [r7, #4]
 8005a7e:	6039      	str	r1, [r7, #0]
  int i;
  JQUANT_TBL * qtbl;
  JHUFF_TBL * htbl;

  for (i = 0; i < NUM_QUANT_TBLS; i++) {
 8005a80:	2300      	movs	r3, #0
 8005a82:	617b      	str	r3, [r7, #20]
 8005a84:	e00f      	b.n	8005aa6 <jpeg_suppress_tables+0x30>
    if ((qtbl = cinfo->quant_tbl_ptrs[i]) != NULL)
 8005a86:	687b      	ldr	r3, [r7, #4]
 8005a88:	697a      	ldr	r2, [r7, #20]
 8005a8a:	3216      	adds	r2, #22
 8005a8c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005a90:	60fb      	str	r3, [r7, #12]
 8005a92:	68fb      	ldr	r3, [r7, #12]
 8005a94:	2b00      	cmp	r3, #0
 8005a96:	d003      	beq.n	8005aa0 <jpeg_suppress_tables+0x2a>
      qtbl->sent_table = suppress;
 8005a98:	68fb      	ldr	r3, [r7, #12]
 8005a9a:	683a      	ldr	r2, [r7, #0]
 8005a9c:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  for (i = 0; i < NUM_QUANT_TBLS; i++) {
 8005aa0:	697b      	ldr	r3, [r7, #20]
 8005aa2:	3301      	adds	r3, #1
 8005aa4:	617b      	str	r3, [r7, #20]
 8005aa6:	697b      	ldr	r3, [r7, #20]
 8005aa8:	2b03      	cmp	r3, #3
 8005aaa:	ddec      	ble.n	8005a86 <jpeg_suppress_tables+0x10>
  }

  for (i = 0; i < NUM_HUFF_TBLS; i++) {
 8005aac:	2300      	movs	r3, #0
 8005aae:	617b      	str	r3, [r7, #20]
 8005ab0:	e01c      	b.n	8005aec <jpeg_suppress_tables+0x76>
    if ((htbl = cinfo->dc_huff_tbl_ptrs[i]) != NULL)
 8005ab2:	687b      	ldr	r3, [r7, #4]
 8005ab4:	697a      	ldr	r2, [r7, #20]
 8005ab6:	321e      	adds	r2, #30
 8005ab8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005abc:	613b      	str	r3, [r7, #16]
 8005abe:	693b      	ldr	r3, [r7, #16]
 8005ac0:	2b00      	cmp	r3, #0
 8005ac2:	d003      	beq.n	8005acc <jpeg_suppress_tables+0x56>
      htbl->sent_table = suppress;
 8005ac4:	693b      	ldr	r3, [r7, #16]
 8005ac6:	683a      	ldr	r2, [r7, #0]
 8005ac8:	f8c3 2114 	str.w	r2, [r3, #276]	@ 0x114
    if ((htbl = cinfo->ac_huff_tbl_ptrs[i]) != NULL)
 8005acc:	687b      	ldr	r3, [r7, #4]
 8005ace:	697a      	ldr	r2, [r7, #20]
 8005ad0:	3222      	adds	r2, #34	@ 0x22
 8005ad2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005ad6:	613b      	str	r3, [r7, #16]
 8005ad8:	693b      	ldr	r3, [r7, #16]
 8005ada:	2b00      	cmp	r3, #0
 8005adc:	d003      	beq.n	8005ae6 <jpeg_suppress_tables+0x70>
      htbl->sent_table = suppress;
 8005ade:	693b      	ldr	r3, [r7, #16]
 8005ae0:	683a      	ldr	r2, [r7, #0]
 8005ae2:	f8c3 2114 	str.w	r2, [r3, #276]	@ 0x114
  for (i = 0; i < NUM_HUFF_TBLS; i++) {
 8005ae6:	697b      	ldr	r3, [r7, #20]
 8005ae8:	3301      	adds	r3, #1
 8005aea:	617b      	str	r3, [r7, #20]
 8005aec:	697b      	ldr	r3, [r7, #20]
 8005aee:	2b03      	cmp	r3, #3
 8005af0:	dddf      	ble.n	8005ab2 <jpeg_suppress_tables+0x3c>
  }
}
 8005af2:	bf00      	nop
 8005af4:	bf00      	nop
 8005af6:	371c      	adds	r7, #28
 8005af8:	46bd      	mov	sp, r7
 8005afa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005afe:	4770      	bx	lr

08005b00 <jpeg_finish_compress>:
 * work including most of the actual output.
 */

GLOBAL(void)
jpeg_finish_compress (j_compress_ptr cinfo)
{
 8005b00:	b580      	push	{r7, lr}
 8005b02:	b084      	sub	sp, #16
 8005b04:	af00      	add	r7, sp, #0
 8005b06:	6078      	str	r0, [r7, #4]
  JDIMENSION iMCU_row;

  if (cinfo->global_state == CSTATE_SCANNING ||
 8005b08:	687b      	ldr	r3, [r7, #4]
 8005b0a:	695b      	ldr	r3, [r3, #20]
 8005b0c:	2b65      	cmp	r3, #101	@ 0x65
 8005b0e:	d003      	beq.n	8005b18 <jpeg_finish_compress+0x18>
      cinfo->global_state == CSTATE_RAW_OK) {
 8005b10:	687b      	ldr	r3, [r7, #4]
 8005b12:	695b      	ldr	r3, [r3, #20]
  if (cinfo->global_state == CSTATE_SCANNING ||
 8005b14:	2b66      	cmp	r3, #102	@ 0x66
 8005b16:	d116      	bne.n	8005b46 <jpeg_finish_compress+0x46>
    /* Terminate first pass */
    if (cinfo->next_scanline < cinfo->image_height)
 8005b18:	687b      	ldr	r3, [r7, #4]
 8005b1a:	f8d3 2104 	ldr.w	r2, [r3, #260]	@ 0x104
 8005b1e:	687b      	ldr	r3, [r7, #4]
 8005b20:	6a1b      	ldr	r3, [r3, #32]
 8005b22:	429a      	cmp	r2, r3
 8005b24:	d208      	bcs.n	8005b38 <jpeg_finish_compress+0x38>
      ERREXIT(cinfo, JERR_TOO_LITTLE_DATA);
 8005b26:	687b      	ldr	r3, [r7, #4]
 8005b28:	681b      	ldr	r3, [r3, #0]
 8005b2a:	2245      	movs	r2, #69	@ 0x45
 8005b2c:	615a      	str	r2, [r3, #20]
 8005b2e:	687b      	ldr	r3, [r7, #4]
 8005b30:	681b      	ldr	r3, [r3, #0]
 8005b32:	681b      	ldr	r3, [r3, #0]
 8005b34:	6878      	ldr	r0, [r7, #4]
 8005b36:	4798      	blx	r3
    (*cinfo->master->finish_pass) (cinfo);
 8005b38:	687b      	ldr	r3, [r7, #4]
 8005b3a:	f8d3 3184 	ldr.w	r3, [r3, #388]	@ 0x184
 8005b3e:	689b      	ldr	r3, [r3, #8]
 8005b40:	6878      	ldr	r0, [r7, #4]
 8005b42:	4798      	blx	r3
 8005b44:	e011      	b.n	8005b6a <jpeg_finish_compress+0x6a>
  } else if (cinfo->global_state != CSTATE_WRCOEFS)
 8005b46:	687b      	ldr	r3, [r7, #4]
 8005b48:	695b      	ldr	r3, [r3, #20]
 8005b4a:	2b67      	cmp	r3, #103	@ 0x67
 8005b4c:	d04c      	beq.n	8005be8 <jpeg_finish_compress+0xe8>
    ERREXIT1(cinfo, JERR_BAD_STATE, cinfo->global_state);
 8005b4e:	687b      	ldr	r3, [r7, #4]
 8005b50:	681b      	ldr	r3, [r3, #0]
 8005b52:	2215      	movs	r2, #21
 8005b54:	615a      	str	r2, [r3, #20]
 8005b56:	687b      	ldr	r3, [r7, #4]
 8005b58:	681b      	ldr	r3, [r3, #0]
 8005b5a:	687a      	ldr	r2, [r7, #4]
 8005b5c:	6952      	ldr	r2, [r2, #20]
 8005b5e:	619a      	str	r2, [r3, #24]
 8005b60:	687b      	ldr	r3, [r7, #4]
 8005b62:	681b      	ldr	r3, [r3, #0]
 8005b64:	681b      	ldr	r3, [r3, #0]
 8005b66:	6878      	ldr	r0, [r7, #4]
 8005b68:	4798      	blx	r3
  /* Perform any remaining passes */
  while (! cinfo->master->is_last_pass) {
 8005b6a:	e03d      	b.n	8005be8 <jpeg_finish_compress+0xe8>
    (*cinfo->master->prepare_for_pass) (cinfo);
 8005b6c:	687b      	ldr	r3, [r7, #4]
 8005b6e:	f8d3 3184 	ldr.w	r3, [r3, #388]	@ 0x184
 8005b72:	681b      	ldr	r3, [r3, #0]
 8005b74:	6878      	ldr	r0, [r7, #4]
 8005b76:	4798      	blx	r3
    for (iMCU_row = 0; iMCU_row < cinfo->total_iMCU_rows; iMCU_row++) {
 8005b78:	2300      	movs	r3, #0
 8005b7a:	60fb      	str	r3, [r7, #12]
 8005b7c:	e028      	b.n	8005bd0 <jpeg_finish_compress+0xd0>
      if (cinfo->progress != NULL) {
 8005b7e:	687b      	ldr	r3, [r7, #4]
 8005b80:	689b      	ldr	r3, [r3, #8]
 8005b82:	2b00      	cmp	r3, #0
 8005b84:	d00e      	beq.n	8005ba4 <jpeg_finish_compress+0xa4>
	cinfo->progress->pass_counter = (long) iMCU_row;
 8005b86:	687b      	ldr	r3, [r7, #4]
 8005b88:	689b      	ldr	r3, [r3, #8]
 8005b8a:	68fa      	ldr	r2, [r7, #12]
 8005b8c:	605a      	str	r2, [r3, #4]
	cinfo->progress->pass_limit = (long) cinfo->total_iMCU_rows;
 8005b8e:	687b      	ldr	r3, [r7, #4]
 8005b90:	f8d3 211c 	ldr.w	r2, [r3, #284]	@ 0x11c
 8005b94:	687b      	ldr	r3, [r7, #4]
 8005b96:	689b      	ldr	r3, [r3, #8]
 8005b98:	609a      	str	r2, [r3, #8]
	(*cinfo->progress->progress_monitor) ((j_common_ptr) cinfo);
 8005b9a:	687b      	ldr	r3, [r7, #4]
 8005b9c:	689b      	ldr	r3, [r3, #8]
 8005b9e:	681b      	ldr	r3, [r3, #0]
 8005ba0:	6878      	ldr	r0, [r7, #4]
 8005ba2:	4798      	blx	r3
      }
      /* We bypass the main controller and invoke coef controller directly;
       * all work is being done from the coefficient buffer.
       */
      if (! (*cinfo->coef->compress_data) (cinfo, (JSAMPIMAGE) NULL))
 8005ba4:	687b      	ldr	r3, [r7, #4]
 8005ba6:	f8d3 3190 	ldr.w	r3, [r3, #400]	@ 0x190
 8005baa:	685b      	ldr	r3, [r3, #4]
 8005bac:	2100      	movs	r1, #0
 8005bae:	6878      	ldr	r0, [r7, #4]
 8005bb0:	4798      	blx	r3
 8005bb2:	4603      	mov	r3, r0
 8005bb4:	2b00      	cmp	r3, #0
 8005bb6:	d108      	bne.n	8005bca <jpeg_finish_compress+0xca>
	ERREXIT(cinfo, JERR_CANT_SUSPEND);
 8005bb8:	687b      	ldr	r3, [r7, #4]
 8005bba:	681b      	ldr	r3, [r3, #0]
 8005bbc:	2219      	movs	r2, #25
 8005bbe:	615a      	str	r2, [r3, #20]
 8005bc0:	687b      	ldr	r3, [r7, #4]
 8005bc2:	681b      	ldr	r3, [r3, #0]
 8005bc4:	681b      	ldr	r3, [r3, #0]
 8005bc6:	6878      	ldr	r0, [r7, #4]
 8005bc8:	4798      	blx	r3
    for (iMCU_row = 0; iMCU_row < cinfo->total_iMCU_rows; iMCU_row++) {
 8005bca:	68fb      	ldr	r3, [r7, #12]
 8005bcc:	3301      	adds	r3, #1
 8005bce:	60fb      	str	r3, [r7, #12]
 8005bd0:	687b      	ldr	r3, [r7, #4]
 8005bd2:	f8d3 311c 	ldr.w	r3, [r3, #284]	@ 0x11c
 8005bd6:	68fa      	ldr	r2, [r7, #12]
 8005bd8:	429a      	cmp	r2, r3
 8005bda:	d3d0      	bcc.n	8005b7e <jpeg_finish_compress+0x7e>
    }
    (*cinfo->master->finish_pass) (cinfo);
 8005bdc:	687b      	ldr	r3, [r7, #4]
 8005bde:	f8d3 3184 	ldr.w	r3, [r3, #388]	@ 0x184
 8005be2:	689b      	ldr	r3, [r3, #8]
 8005be4:	6878      	ldr	r0, [r7, #4]
 8005be6:	4798      	blx	r3
  while (! cinfo->master->is_last_pass) {
 8005be8:	687b      	ldr	r3, [r7, #4]
 8005bea:	f8d3 3184 	ldr.w	r3, [r3, #388]	@ 0x184
 8005bee:	691b      	ldr	r3, [r3, #16]
 8005bf0:	2b00      	cmp	r3, #0
 8005bf2:	d0bb      	beq.n	8005b6c <jpeg_finish_compress+0x6c>
  }
  /* Write EOI, do final cleanup */
  (*cinfo->marker->write_file_trailer) (cinfo);
 8005bf4:	687b      	ldr	r3, [r7, #4]
 8005bf6:	f8d3 3194 	ldr.w	r3, [r3, #404]	@ 0x194
 8005bfa:	68db      	ldr	r3, [r3, #12]
 8005bfc:	6878      	ldr	r0, [r7, #4]
 8005bfe:	4798      	blx	r3
  (*cinfo->dest->term_destination) (cinfo);
 8005c00:	687b      	ldr	r3, [r7, #4]
 8005c02:	699b      	ldr	r3, [r3, #24]
 8005c04:	691b      	ldr	r3, [r3, #16]
 8005c06:	6878      	ldr	r0, [r7, #4]
 8005c08:	4798      	blx	r3
  /* We can use jpeg_abort to release memory and reset global_state */
  jpeg_abort((j_common_ptr) cinfo);
 8005c0a:	6878      	ldr	r0, [r7, #4]
 8005c0c:	f007 fd10 	bl	800d630 <jpeg_abort>
}
 8005c10:	bf00      	nop
 8005c12:	3710      	adds	r7, #16
 8005c14:	46bd      	mov	sp, r7
 8005c16:	bd80      	pop	{r7, pc}

08005c18 <jpeg_start_compress>:
 * wrong thing.
 */

GLOBAL(void)
jpeg_start_compress (j_compress_ptr cinfo, boolean write_all_tables)
{
 8005c18:	b580      	push	{r7, lr}
 8005c1a:	b082      	sub	sp, #8
 8005c1c:	af00      	add	r7, sp, #0
 8005c1e:	6078      	str	r0, [r7, #4]
 8005c20:	6039      	str	r1, [r7, #0]
  if (cinfo->global_state != CSTATE_START)
 8005c22:	687b      	ldr	r3, [r7, #4]
 8005c24:	695b      	ldr	r3, [r3, #20]
 8005c26:	2b64      	cmp	r3, #100	@ 0x64
 8005c28:	d00d      	beq.n	8005c46 <jpeg_start_compress+0x2e>
    ERREXIT1(cinfo, JERR_BAD_STATE, cinfo->global_state);
 8005c2a:	687b      	ldr	r3, [r7, #4]
 8005c2c:	681b      	ldr	r3, [r3, #0]
 8005c2e:	2215      	movs	r2, #21
 8005c30:	615a      	str	r2, [r3, #20]
 8005c32:	687b      	ldr	r3, [r7, #4]
 8005c34:	681b      	ldr	r3, [r3, #0]
 8005c36:	687a      	ldr	r2, [r7, #4]
 8005c38:	6952      	ldr	r2, [r2, #20]
 8005c3a:	619a      	str	r2, [r3, #24]
 8005c3c:	687b      	ldr	r3, [r7, #4]
 8005c3e:	681b      	ldr	r3, [r3, #0]
 8005c40:	681b      	ldr	r3, [r3, #0]
 8005c42:	6878      	ldr	r0, [r7, #4]
 8005c44:	4798      	blx	r3

  if (write_all_tables)
 8005c46:	683b      	ldr	r3, [r7, #0]
 8005c48:	2b00      	cmp	r3, #0
 8005c4a:	d003      	beq.n	8005c54 <jpeg_start_compress+0x3c>
    jpeg_suppress_tables(cinfo, FALSE);	/* mark all tables to be written */
 8005c4c:	2100      	movs	r1, #0
 8005c4e:	6878      	ldr	r0, [r7, #4]
 8005c50:	f7ff ff11 	bl	8005a76 <jpeg_suppress_tables>

  /* (Re)initialize error mgr and destination modules */
  (*cinfo->err->reset_error_mgr) ((j_common_ptr) cinfo);
 8005c54:	687b      	ldr	r3, [r7, #4]
 8005c56:	681b      	ldr	r3, [r3, #0]
 8005c58:	691b      	ldr	r3, [r3, #16]
 8005c5a:	6878      	ldr	r0, [r7, #4]
 8005c5c:	4798      	blx	r3
  (*cinfo->dest->init_destination) (cinfo);
 8005c5e:	687b      	ldr	r3, [r7, #4]
 8005c60:	699b      	ldr	r3, [r3, #24]
 8005c62:	689b      	ldr	r3, [r3, #8]
 8005c64:	6878      	ldr	r0, [r7, #4]
 8005c66:	4798      	blx	r3
  /* Perform master selection of active modules */
  jinit_compress_master(cinfo);
 8005c68:	6878      	ldr	r0, [r7, #4]
 8005c6a:	f005 f883 	bl	800ad74 <jinit_compress_master>
  /* Set up for the first pass */
  (*cinfo->master->prepare_for_pass) (cinfo);
 8005c6e:	687b      	ldr	r3, [r7, #4]
 8005c70:	f8d3 3184 	ldr.w	r3, [r3, #388]	@ 0x184
 8005c74:	681b      	ldr	r3, [r3, #0]
 8005c76:	6878      	ldr	r0, [r7, #4]
 8005c78:	4798      	blx	r3
  /* Ready for application to drive first pass through jpeg_write_scanlines
   * or jpeg_write_raw_data.
   */
  cinfo->next_scanline = 0;
 8005c7a:	687b      	ldr	r3, [r7, #4]
 8005c7c:	2200      	movs	r2, #0
 8005c7e:	f8c3 2104 	str.w	r2, [r3, #260]	@ 0x104
  cinfo->global_state = (cinfo->raw_data_in ? CSTATE_RAW_OK : CSTATE_SCANNING);
 8005c82:	687b      	ldr	r3, [r7, #4]
 8005c84:	f8d3 30d0 	ldr.w	r3, [r3, #208]	@ 0xd0
 8005c88:	2b00      	cmp	r3, #0
 8005c8a:	d001      	beq.n	8005c90 <jpeg_start_compress+0x78>
 8005c8c:	2266      	movs	r2, #102	@ 0x66
 8005c8e:	e000      	b.n	8005c92 <jpeg_start_compress+0x7a>
 8005c90:	2265      	movs	r2, #101	@ 0x65
 8005c92:	687b      	ldr	r3, [r7, #4]
 8005c94:	615a      	str	r2, [r3, #20]
}
 8005c96:	bf00      	nop
 8005c98:	3708      	adds	r7, #8
 8005c9a:	46bd      	mov	sp, r7
 8005c9c:	bd80      	pop	{r7, pc}

08005c9e <jpeg_write_scanlines>:
 */

GLOBAL(JDIMENSION)
jpeg_write_scanlines (j_compress_ptr cinfo, JSAMPARRAY scanlines,
		      JDIMENSION num_lines)
{
 8005c9e:	b590      	push	{r4, r7, lr}
 8005ca0:	b087      	sub	sp, #28
 8005ca2:	af00      	add	r7, sp, #0
 8005ca4:	60f8      	str	r0, [r7, #12]
 8005ca6:	60b9      	str	r1, [r7, #8]
 8005ca8:	607a      	str	r2, [r7, #4]
  JDIMENSION row_ctr, rows_left;

  if (cinfo->global_state != CSTATE_SCANNING)
 8005caa:	68fb      	ldr	r3, [r7, #12]
 8005cac:	695b      	ldr	r3, [r3, #20]
 8005cae:	2b65      	cmp	r3, #101	@ 0x65
 8005cb0:	d00d      	beq.n	8005cce <jpeg_write_scanlines+0x30>
    ERREXIT1(cinfo, JERR_BAD_STATE, cinfo->global_state);
 8005cb2:	68fb      	ldr	r3, [r7, #12]
 8005cb4:	681b      	ldr	r3, [r3, #0]
 8005cb6:	2215      	movs	r2, #21
 8005cb8:	615a      	str	r2, [r3, #20]
 8005cba:	68fb      	ldr	r3, [r7, #12]
 8005cbc:	681b      	ldr	r3, [r3, #0]
 8005cbe:	68fa      	ldr	r2, [r7, #12]
 8005cc0:	6952      	ldr	r2, [r2, #20]
 8005cc2:	619a      	str	r2, [r3, #24]
 8005cc4:	68fb      	ldr	r3, [r7, #12]
 8005cc6:	681b      	ldr	r3, [r3, #0]
 8005cc8:	681b      	ldr	r3, [r3, #0]
 8005cca:	68f8      	ldr	r0, [r7, #12]
 8005ccc:	4798      	blx	r3
  if (cinfo->next_scanline >= cinfo->image_height)
 8005cce:	68fb      	ldr	r3, [r7, #12]
 8005cd0:	f8d3 2104 	ldr.w	r2, [r3, #260]	@ 0x104
 8005cd4:	68fb      	ldr	r3, [r7, #12]
 8005cd6:	6a1b      	ldr	r3, [r3, #32]
 8005cd8:	429a      	cmp	r2, r3
 8005cda:	d30a      	bcc.n	8005cf2 <jpeg_write_scanlines+0x54>
    WARNMS(cinfo, JWRN_TOO_MUCH_DATA);
 8005cdc:	68fb      	ldr	r3, [r7, #12]
 8005cde:	681b      	ldr	r3, [r3, #0]
 8005ce0:	227e      	movs	r2, #126	@ 0x7e
 8005ce2:	615a      	str	r2, [r3, #20]
 8005ce4:	68fb      	ldr	r3, [r7, #12]
 8005ce6:	681b      	ldr	r3, [r3, #0]
 8005ce8:	685b      	ldr	r3, [r3, #4]
 8005cea:	f04f 31ff 	mov.w	r1, #4294967295
 8005cee:	68f8      	ldr	r0, [r7, #12]
 8005cf0:	4798      	blx	r3

  /* Call progress monitor hook if present */
  if (cinfo->progress != NULL) {
 8005cf2:	68fb      	ldr	r3, [r7, #12]
 8005cf4:	689b      	ldr	r3, [r3, #8]
 8005cf6:	2b00      	cmp	r3, #0
 8005cf8:	d00f      	beq.n	8005d1a <jpeg_write_scanlines+0x7c>
    cinfo->progress->pass_counter = (long) cinfo->next_scanline;
 8005cfa:	68fb      	ldr	r3, [r7, #12]
 8005cfc:	f8d3 2104 	ldr.w	r2, [r3, #260]	@ 0x104
 8005d00:	68fb      	ldr	r3, [r7, #12]
 8005d02:	689b      	ldr	r3, [r3, #8]
 8005d04:	605a      	str	r2, [r3, #4]
    cinfo->progress->pass_limit = (long) cinfo->image_height;
 8005d06:	68fb      	ldr	r3, [r7, #12]
 8005d08:	6a1a      	ldr	r2, [r3, #32]
 8005d0a:	68fb      	ldr	r3, [r7, #12]
 8005d0c:	689b      	ldr	r3, [r3, #8]
 8005d0e:	609a      	str	r2, [r3, #8]
    (*cinfo->progress->progress_monitor) ((j_common_ptr) cinfo);
 8005d10:	68fb      	ldr	r3, [r7, #12]
 8005d12:	689b      	ldr	r3, [r3, #8]
 8005d14:	681b      	ldr	r3, [r3, #0]
 8005d16:	68f8      	ldr	r0, [r7, #12]
 8005d18:	4798      	blx	r3
  /* Give master control module another chance if this is first call to
   * jpeg_write_scanlines.  This lets output of the frame/scan headers be
   * delayed so that application can write COM, etc, markers between
   * jpeg_start_compress and jpeg_write_scanlines.
   */
  if (cinfo->master->call_pass_startup)
 8005d1a:	68fb      	ldr	r3, [r7, #12]
 8005d1c:	f8d3 3184 	ldr.w	r3, [r3, #388]	@ 0x184
 8005d20:	68db      	ldr	r3, [r3, #12]
 8005d22:	2b00      	cmp	r3, #0
 8005d24:	d005      	beq.n	8005d32 <jpeg_write_scanlines+0x94>
    (*cinfo->master->pass_startup) (cinfo);
 8005d26:	68fb      	ldr	r3, [r7, #12]
 8005d28:	f8d3 3184 	ldr.w	r3, [r3, #388]	@ 0x184
 8005d2c:	685b      	ldr	r3, [r3, #4]
 8005d2e:	68f8      	ldr	r0, [r7, #12]
 8005d30:	4798      	blx	r3

  /* Ignore any extra scanlines at bottom of image. */
  rows_left = cinfo->image_height - cinfo->next_scanline;
 8005d32:	68fb      	ldr	r3, [r7, #12]
 8005d34:	6a1a      	ldr	r2, [r3, #32]
 8005d36:	68fb      	ldr	r3, [r7, #12]
 8005d38:	f8d3 3104 	ldr.w	r3, [r3, #260]	@ 0x104
 8005d3c:	1ad3      	subs	r3, r2, r3
 8005d3e:	617b      	str	r3, [r7, #20]
  if (num_lines > rows_left)
 8005d40:	687a      	ldr	r2, [r7, #4]
 8005d42:	697b      	ldr	r3, [r7, #20]
 8005d44:	429a      	cmp	r2, r3
 8005d46:	d901      	bls.n	8005d4c <jpeg_write_scanlines+0xae>
    num_lines = rows_left;
 8005d48:	697b      	ldr	r3, [r7, #20]
 8005d4a:	607b      	str	r3, [r7, #4]

  row_ctr = 0;
 8005d4c:	2300      	movs	r3, #0
 8005d4e:	613b      	str	r3, [r7, #16]
  (*cinfo->main->process_data) (cinfo, scanlines, &row_ctr, num_lines);
 8005d50:	68fb      	ldr	r3, [r7, #12]
 8005d52:	f8d3 3188 	ldr.w	r3, [r3, #392]	@ 0x188
 8005d56:	685c      	ldr	r4, [r3, #4]
 8005d58:	f107 0210 	add.w	r2, r7, #16
 8005d5c:	687b      	ldr	r3, [r7, #4]
 8005d5e:	68b9      	ldr	r1, [r7, #8]
 8005d60:	68f8      	ldr	r0, [r7, #12]
 8005d62:	47a0      	blx	r4
  cinfo->next_scanline += row_ctr;
 8005d64:	68fb      	ldr	r3, [r7, #12]
 8005d66:	f8d3 2104 	ldr.w	r2, [r3, #260]	@ 0x104
 8005d6a:	693b      	ldr	r3, [r7, #16]
 8005d6c:	441a      	add	r2, r3
 8005d6e:	68fb      	ldr	r3, [r7, #12]
 8005d70:	f8c3 2104 	str.w	r2, [r3, #260]	@ 0x104
  return row_ctr;
 8005d74:	693b      	ldr	r3, [r7, #16]
}
 8005d76:	4618      	mov	r0, r3
 8005d78:	371c      	adds	r7, #28
 8005d7a:	46bd      	mov	sp, r7
 8005d7c:	bd90      	pop	{r4, r7, pc}

08005d7e <emit_byte>:


LOCAL(void)
emit_byte (int val, j_compress_ptr cinfo)
/* Write next output byte; we do not support suspension in this module. */
{
 8005d7e:	b580      	push	{r7, lr}
 8005d80:	b084      	sub	sp, #16
 8005d82:	af00      	add	r7, sp, #0
 8005d84:	6078      	str	r0, [r7, #4]
 8005d86:	6039      	str	r1, [r7, #0]
  struct jpeg_destination_mgr * dest = cinfo->dest;
 8005d88:	683b      	ldr	r3, [r7, #0]
 8005d8a:	699b      	ldr	r3, [r3, #24]
 8005d8c:	60fb      	str	r3, [r7, #12]

  *dest->next_output_byte++ = (JOCTET) val;
 8005d8e:	68fb      	ldr	r3, [r7, #12]
 8005d90:	681b      	ldr	r3, [r3, #0]
 8005d92:	1c59      	adds	r1, r3, #1
 8005d94:	68fa      	ldr	r2, [r7, #12]
 8005d96:	6011      	str	r1, [r2, #0]
 8005d98:	687a      	ldr	r2, [r7, #4]
 8005d9a:	b2d2      	uxtb	r2, r2
 8005d9c:	701a      	strb	r2, [r3, #0]
  if (--dest->free_in_buffer == 0)
 8005d9e:	68fb      	ldr	r3, [r7, #12]
 8005da0:	685b      	ldr	r3, [r3, #4]
 8005da2:	1e5a      	subs	r2, r3, #1
 8005da4:	68fb      	ldr	r3, [r7, #12]
 8005da6:	605a      	str	r2, [r3, #4]
 8005da8:	68fb      	ldr	r3, [r7, #12]
 8005daa:	685b      	ldr	r3, [r3, #4]
 8005dac:	2b00      	cmp	r3, #0
 8005dae:	d10f      	bne.n	8005dd0 <emit_byte+0x52>
    if (! (*dest->empty_output_buffer) (cinfo))
 8005db0:	68fb      	ldr	r3, [r7, #12]
 8005db2:	68db      	ldr	r3, [r3, #12]
 8005db4:	6838      	ldr	r0, [r7, #0]
 8005db6:	4798      	blx	r3
 8005db8:	4603      	mov	r3, r0
 8005dba:	2b00      	cmp	r3, #0
 8005dbc:	d108      	bne.n	8005dd0 <emit_byte+0x52>
      ERREXIT(cinfo, JERR_CANT_SUSPEND);
 8005dbe:	683b      	ldr	r3, [r7, #0]
 8005dc0:	681b      	ldr	r3, [r3, #0]
 8005dc2:	2219      	movs	r2, #25
 8005dc4:	615a      	str	r2, [r3, #20]
 8005dc6:	683b      	ldr	r3, [r7, #0]
 8005dc8:	681b      	ldr	r3, [r3, #0]
 8005dca:	681b      	ldr	r3, [r3, #0]
 8005dcc:	6838      	ldr	r0, [r7, #0]
 8005dce:	4798      	blx	r3
}
 8005dd0:	bf00      	nop
 8005dd2:	3710      	adds	r7, #16
 8005dd4:	46bd      	mov	sp, r7
 8005dd6:	bd80      	pop	{r7, pc}

08005dd8 <finish_pass>:
 * Finish up at the end of an arithmetic-compressed scan.
 */

METHODDEF(void)
finish_pass (j_compress_ptr cinfo)
{
 8005dd8:	b580      	push	{r7, lr}
 8005dda:	b084      	sub	sp, #16
 8005ddc:	af00      	add	r7, sp, #0
 8005dde:	6078      	str	r0, [r7, #4]
  arith_entropy_ptr e = (arith_entropy_ptr) cinfo->entropy;
 8005de0:	687b      	ldr	r3, [r7, #4]
 8005de2:	f8d3 31a4 	ldr.w	r3, [r3, #420]	@ 0x1a4
 8005de6:	60fb      	str	r3, [r7, #12]

  /* Section D.1.8: Termination of encoding */

  /* Find the e->c in the coding interval with the largest
   * number of trailing zero bits */
  if ((temp = (e->a - 1 + e->c) & 0xFFFF0000L) < e->c)
 8005de8:	68fb      	ldr	r3, [r7, #12]
 8005dea:	691b      	ldr	r3, [r3, #16]
 8005dec:	1e5a      	subs	r2, r3, #1
 8005dee:	68fb      	ldr	r3, [r7, #12]
 8005df0:	68db      	ldr	r3, [r3, #12]
 8005df2:	4413      	add	r3, r2
 8005df4:	0c1b      	lsrs	r3, r3, #16
 8005df6:	041b      	lsls	r3, r3, #16
 8005df8:	60bb      	str	r3, [r7, #8]
 8005dfa:	68fb      	ldr	r3, [r7, #12]
 8005dfc:	68db      	ldr	r3, [r3, #12]
 8005dfe:	68ba      	ldr	r2, [r7, #8]
 8005e00:	429a      	cmp	r2, r3
 8005e02:	da05      	bge.n	8005e10 <finish_pass+0x38>
    e->c = temp + 0x8000L;
 8005e04:	68bb      	ldr	r3, [r7, #8]
 8005e06:	f503 4200 	add.w	r2, r3, #32768	@ 0x8000
 8005e0a:	68fb      	ldr	r3, [r7, #12]
 8005e0c:	60da      	str	r2, [r3, #12]
 8005e0e:	e002      	b.n	8005e16 <finish_pass+0x3e>
  else
    e->c = temp;
 8005e10:	68fb      	ldr	r3, [r7, #12]
 8005e12:	68ba      	ldr	r2, [r7, #8]
 8005e14:	60da      	str	r2, [r3, #12]
  /* Send remaining bytes to output */
  e->c <<= e->ct;
 8005e16:	68fb      	ldr	r3, [r7, #12]
 8005e18:	68da      	ldr	r2, [r3, #12]
 8005e1a:	68fb      	ldr	r3, [r7, #12]
 8005e1c:	69db      	ldr	r3, [r3, #28]
 8005e1e:	409a      	lsls	r2, r3
 8005e20:	68fb      	ldr	r3, [r7, #12]
 8005e22:	60da      	str	r2, [r3, #12]
  if (e->c & 0xF8000000L) {
 8005e24:	68fb      	ldr	r3, [r7, #12]
 8005e26:	68db      	ldr	r3, [r3, #12]
 8005e28:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8005e2c:	d32e      	bcc.n	8005e8c <finish_pass+0xb4>
    /* One final overflow has to be handled */
    if (e->buffer >= 0) {
 8005e2e:	68fb      	ldr	r3, [r7, #12]
 8005e30:	6a1b      	ldr	r3, [r3, #32]
 8005e32:	2b00      	cmp	r3, #0
 8005e34:	db1f      	blt.n	8005e76 <finish_pass+0x9e>
      if (e->zc)
 8005e36:	68fb      	ldr	r3, [r7, #12]
 8005e38:	699b      	ldr	r3, [r3, #24]
 8005e3a:	2b00      	cmp	r3, #0
 8005e3c:	d00c      	beq.n	8005e58 <finish_pass+0x80>
	do emit_byte(0x00, cinfo);
 8005e3e:	6879      	ldr	r1, [r7, #4]
 8005e40:	2000      	movs	r0, #0
 8005e42:	f7ff ff9c 	bl	8005d7e <emit_byte>
	while (--e->zc);
 8005e46:	68fb      	ldr	r3, [r7, #12]
 8005e48:	699b      	ldr	r3, [r3, #24]
 8005e4a:	1e5a      	subs	r2, r3, #1
 8005e4c:	68fb      	ldr	r3, [r7, #12]
 8005e4e:	619a      	str	r2, [r3, #24]
 8005e50:	68fb      	ldr	r3, [r7, #12]
 8005e52:	699b      	ldr	r3, [r3, #24]
 8005e54:	2b00      	cmp	r3, #0
 8005e56:	d1f2      	bne.n	8005e3e <finish_pass+0x66>
      emit_byte(e->buffer + 1, cinfo);
 8005e58:	68fb      	ldr	r3, [r7, #12]
 8005e5a:	6a1b      	ldr	r3, [r3, #32]
 8005e5c:	3301      	adds	r3, #1
 8005e5e:	6879      	ldr	r1, [r7, #4]
 8005e60:	4618      	mov	r0, r3
 8005e62:	f7ff ff8c 	bl	8005d7e <emit_byte>
      if (e->buffer + 1 == 0xFF)
 8005e66:	68fb      	ldr	r3, [r7, #12]
 8005e68:	6a1b      	ldr	r3, [r3, #32]
 8005e6a:	2bfe      	cmp	r3, #254	@ 0xfe
 8005e6c:	d103      	bne.n	8005e76 <finish_pass+0x9e>
	emit_byte(0x00, cinfo);
 8005e6e:	6879      	ldr	r1, [r7, #4]
 8005e70:	2000      	movs	r0, #0
 8005e72:	f7ff ff84 	bl	8005d7e <emit_byte>
    }
    e->zc += e->sc;  /* carry-over converts stacked 0xFF bytes to 0x00 */
 8005e76:	68fb      	ldr	r3, [r7, #12]
 8005e78:	699a      	ldr	r2, [r3, #24]
 8005e7a:	68fb      	ldr	r3, [r7, #12]
 8005e7c:	695b      	ldr	r3, [r3, #20]
 8005e7e:	441a      	add	r2, r3
 8005e80:	68fb      	ldr	r3, [r7, #12]
 8005e82:	619a      	str	r2, [r3, #24]
    e->sc = 0;
 8005e84:	68fb      	ldr	r3, [r7, #12]
 8005e86:	2200      	movs	r2, #0
 8005e88:	615a      	str	r2, [r3, #20]
 8005e8a:	e04a      	b.n	8005f22 <finish_pass+0x14a>
  } else {
    if (e->buffer == 0)
 8005e8c:	68fb      	ldr	r3, [r7, #12]
 8005e8e:	6a1b      	ldr	r3, [r3, #32]
 8005e90:	2b00      	cmp	r3, #0
 8005e92:	d105      	bne.n	8005ea0 <finish_pass+0xc8>
      ++e->zc;
 8005e94:	68fb      	ldr	r3, [r7, #12]
 8005e96:	699b      	ldr	r3, [r3, #24]
 8005e98:	1c5a      	adds	r2, r3, #1
 8005e9a:	68fb      	ldr	r3, [r7, #12]
 8005e9c:	619a      	str	r2, [r3, #24]
 8005e9e:	e01a      	b.n	8005ed6 <finish_pass+0xfe>
    else if (e->buffer >= 0) {
 8005ea0:	68fb      	ldr	r3, [r7, #12]
 8005ea2:	6a1b      	ldr	r3, [r3, #32]
 8005ea4:	2b00      	cmp	r3, #0
 8005ea6:	db16      	blt.n	8005ed6 <finish_pass+0xfe>
      if (e->zc)
 8005ea8:	68fb      	ldr	r3, [r7, #12]
 8005eaa:	699b      	ldr	r3, [r3, #24]
 8005eac:	2b00      	cmp	r3, #0
 8005eae:	d00c      	beq.n	8005eca <finish_pass+0xf2>
	do emit_byte(0x00, cinfo);
 8005eb0:	6879      	ldr	r1, [r7, #4]
 8005eb2:	2000      	movs	r0, #0
 8005eb4:	f7ff ff63 	bl	8005d7e <emit_byte>
	while (--e->zc);
 8005eb8:	68fb      	ldr	r3, [r7, #12]
 8005eba:	699b      	ldr	r3, [r3, #24]
 8005ebc:	1e5a      	subs	r2, r3, #1
 8005ebe:	68fb      	ldr	r3, [r7, #12]
 8005ec0:	619a      	str	r2, [r3, #24]
 8005ec2:	68fb      	ldr	r3, [r7, #12]
 8005ec4:	699b      	ldr	r3, [r3, #24]
 8005ec6:	2b00      	cmp	r3, #0
 8005ec8:	d1f2      	bne.n	8005eb0 <finish_pass+0xd8>
      emit_byte(e->buffer, cinfo);
 8005eca:	68fb      	ldr	r3, [r7, #12]
 8005ecc:	6a1b      	ldr	r3, [r3, #32]
 8005ece:	6879      	ldr	r1, [r7, #4]
 8005ed0:	4618      	mov	r0, r3
 8005ed2:	f7ff ff54 	bl	8005d7e <emit_byte>
    }
    if (e->sc) {
 8005ed6:	68fb      	ldr	r3, [r7, #12]
 8005ed8:	695b      	ldr	r3, [r3, #20]
 8005eda:	2b00      	cmp	r3, #0
 8005edc:	d021      	beq.n	8005f22 <finish_pass+0x14a>
      if (e->zc)
 8005ede:	68fb      	ldr	r3, [r7, #12]
 8005ee0:	699b      	ldr	r3, [r3, #24]
 8005ee2:	2b00      	cmp	r3, #0
 8005ee4:	d00c      	beq.n	8005f00 <finish_pass+0x128>
	do emit_byte(0x00, cinfo);
 8005ee6:	6879      	ldr	r1, [r7, #4]
 8005ee8:	2000      	movs	r0, #0
 8005eea:	f7ff ff48 	bl	8005d7e <emit_byte>
	while (--e->zc);
 8005eee:	68fb      	ldr	r3, [r7, #12]
 8005ef0:	699b      	ldr	r3, [r3, #24]
 8005ef2:	1e5a      	subs	r2, r3, #1
 8005ef4:	68fb      	ldr	r3, [r7, #12]
 8005ef6:	619a      	str	r2, [r3, #24]
 8005ef8:	68fb      	ldr	r3, [r7, #12]
 8005efa:	699b      	ldr	r3, [r3, #24]
 8005efc:	2b00      	cmp	r3, #0
 8005efe:	d1f2      	bne.n	8005ee6 <finish_pass+0x10e>
      do {
	emit_byte(0xFF, cinfo);
 8005f00:	6879      	ldr	r1, [r7, #4]
 8005f02:	20ff      	movs	r0, #255	@ 0xff
 8005f04:	f7ff ff3b 	bl	8005d7e <emit_byte>
	emit_byte(0x00, cinfo);
 8005f08:	6879      	ldr	r1, [r7, #4]
 8005f0a:	2000      	movs	r0, #0
 8005f0c:	f7ff ff37 	bl	8005d7e <emit_byte>
      } while (--e->sc);
 8005f10:	68fb      	ldr	r3, [r7, #12]
 8005f12:	695b      	ldr	r3, [r3, #20]
 8005f14:	1e5a      	subs	r2, r3, #1
 8005f16:	68fb      	ldr	r3, [r7, #12]
 8005f18:	615a      	str	r2, [r3, #20]
 8005f1a:	68fb      	ldr	r3, [r7, #12]
 8005f1c:	695b      	ldr	r3, [r3, #20]
 8005f1e:	2b00      	cmp	r3, #0
 8005f20:	d1ee      	bne.n	8005f00 <finish_pass+0x128>
    }
  }
  /* Output final bytes only if they are not 0x00 */
  if (e->c & 0x7FFF800L) {
 8005f22:	68fb      	ldr	r3, [r7, #12]
 8005f24:	68da      	ldr	r2, [r3, #12]
 8005f26:	4b21      	ldr	r3, [pc, #132]	@ (8005fac <finish_pass+0x1d4>)
 8005f28:	4013      	ands	r3, r2
 8005f2a:	2b00      	cmp	r3, #0
 8005f2c:	d03a      	beq.n	8005fa4 <finish_pass+0x1cc>
    if (e->zc)  /* output final pending zero bytes */
 8005f2e:	68fb      	ldr	r3, [r7, #12]
 8005f30:	699b      	ldr	r3, [r3, #24]
 8005f32:	2b00      	cmp	r3, #0
 8005f34:	d00c      	beq.n	8005f50 <finish_pass+0x178>
      do emit_byte(0x00, cinfo);
 8005f36:	6879      	ldr	r1, [r7, #4]
 8005f38:	2000      	movs	r0, #0
 8005f3a:	f7ff ff20 	bl	8005d7e <emit_byte>
      while (--e->zc);
 8005f3e:	68fb      	ldr	r3, [r7, #12]
 8005f40:	699b      	ldr	r3, [r3, #24]
 8005f42:	1e5a      	subs	r2, r3, #1
 8005f44:	68fb      	ldr	r3, [r7, #12]
 8005f46:	619a      	str	r2, [r3, #24]
 8005f48:	68fb      	ldr	r3, [r7, #12]
 8005f4a:	699b      	ldr	r3, [r3, #24]
 8005f4c:	2b00      	cmp	r3, #0
 8005f4e:	d1f2      	bne.n	8005f36 <finish_pass+0x15e>
    emit_byte((e->c >> 19) & 0xFF, cinfo);
 8005f50:	68fb      	ldr	r3, [r7, #12]
 8005f52:	68db      	ldr	r3, [r3, #12]
 8005f54:	14db      	asrs	r3, r3, #19
 8005f56:	b2db      	uxtb	r3, r3
 8005f58:	6879      	ldr	r1, [r7, #4]
 8005f5a:	4618      	mov	r0, r3
 8005f5c:	f7ff ff0f 	bl	8005d7e <emit_byte>
    if (((e->c >> 19) & 0xFF) == 0xFF)
 8005f60:	68fb      	ldr	r3, [r7, #12]
 8005f62:	68db      	ldr	r3, [r3, #12]
 8005f64:	14db      	asrs	r3, r3, #19
 8005f66:	b2db      	uxtb	r3, r3
 8005f68:	2bff      	cmp	r3, #255	@ 0xff
 8005f6a:	d103      	bne.n	8005f74 <finish_pass+0x19c>
      emit_byte(0x00, cinfo);
 8005f6c:	6879      	ldr	r1, [r7, #4]
 8005f6e:	2000      	movs	r0, #0
 8005f70:	f7ff ff05 	bl	8005d7e <emit_byte>
    if (e->c & 0x7F800L) {
 8005f74:	68fb      	ldr	r3, [r7, #12]
 8005f76:	68db      	ldr	r3, [r3, #12]
 8005f78:	f403 23ff 	and.w	r3, r3, #522240	@ 0x7f800
 8005f7c:	2b00      	cmp	r3, #0
 8005f7e:	d011      	beq.n	8005fa4 <finish_pass+0x1cc>
      emit_byte((e->c >> 11) & 0xFF, cinfo);
 8005f80:	68fb      	ldr	r3, [r7, #12]
 8005f82:	68db      	ldr	r3, [r3, #12]
 8005f84:	12db      	asrs	r3, r3, #11
 8005f86:	b2db      	uxtb	r3, r3
 8005f88:	6879      	ldr	r1, [r7, #4]
 8005f8a:	4618      	mov	r0, r3
 8005f8c:	f7ff fef7 	bl	8005d7e <emit_byte>
      if (((e->c >> 11) & 0xFF) == 0xFF)
 8005f90:	68fb      	ldr	r3, [r7, #12]
 8005f92:	68db      	ldr	r3, [r3, #12]
 8005f94:	12db      	asrs	r3, r3, #11
 8005f96:	b2db      	uxtb	r3, r3
 8005f98:	2bff      	cmp	r3, #255	@ 0xff
 8005f9a:	d103      	bne.n	8005fa4 <finish_pass+0x1cc>
	emit_byte(0x00, cinfo);
 8005f9c:	6879      	ldr	r1, [r7, #4]
 8005f9e:	2000      	movs	r0, #0
 8005fa0:	f7ff feed 	bl	8005d7e <emit_byte>
    }
  }
}
 8005fa4:	bf00      	nop
 8005fa6:	3710      	adds	r7, #16
 8005fa8:	46bd      	mov	sp, r7
 8005faa:	bd80      	pop	{r7, pc}
 8005fac:	07fff800 	.word	0x07fff800

08005fb0 <arith_encode>:
 * derived from Markus Kuhn's JBIG implementation.
 */

LOCAL(void)
arith_encode (j_compress_ptr cinfo, unsigned char *st, int val) 
{
 8005fb0:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8005fb4:	b085      	sub	sp, #20
 8005fb6:	af00      	add	r7, sp, #0
 8005fb8:	60f8      	str	r0, [r7, #12]
 8005fba:	60b9      	str	r1, [r7, #8]
 8005fbc:	607a      	str	r2, [r7, #4]
  register arith_entropy_ptr e = (arith_entropy_ptr) cinfo->entropy;
 8005fbe:	68fb      	ldr	r3, [r7, #12]
 8005fc0:	f8d3 41a4 	ldr.w	r4, [r3, #420]	@ 0x1a4
  register int sv;

  /* Fetch values from our compact representation of Table D.3(D.2):
   * Qe values and probability estimation state machine
   */
  sv = *st;
 8005fc4:	68bb      	ldr	r3, [r7, #8]
 8005fc6:	781b      	ldrb	r3, [r3, #0]
 8005fc8:	461e      	mov	r6, r3
  qe = jpeg_aritab[sv & 0x7F];	/* => Qe_Value */
 8005fca:	f006 037f 	and.w	r3, r6, #127	@ 0x7f
 8005fce:	4a63      	ldr	r2, [pc, #396]	@ (800615c <arith_encode+0x1ac>)
 8005fd0:	f852 5023 	ldr.w	r5, [r2, r3, lsl #2]
  nl = qe & 0xFF; qe >>= 8;	/* Next_Index_LPS + Switch_MPS */
 8005fd4:	fa5f f985 	uxtb.w	r9, r5
 8005fd8:	122d      	asrs	r5, r5, #8
  nm = qe & 0xFF; qe >>= 8;	/* Next_Index_MPS */
 8005fda:	fa5f f885 	uxtb.w	r8, r5
 8005fde:	122d      	asrs	r5, r5, #8

  /* Encode & estimation procedures per sections D.1.4 & D.1.5 */
  e->a -= qe;
 8005fe0:	6923      	ldr	r3, [r4, #16]
 8005fe2:	1b5b      	subs	r3, r3, r5
 8005fe4:	6123      	str	r3, [r4, #16]
  if (val != (sv >> 7)) {
 8005fe6:	11f3      	asrs	r3, r6, #7
 8005fe8:	687a      	ldr	r2, [r7, #4]
 8005fea:	429a      	cmp	r2, r3
 8005fec:	d013      	beq.n	8006016 <arith_encode+0x66>
    /* Encode the less probable symbol */
    if (e->a >= qe) {
 8005fee:	6923      	ldr	r3, [r4, #16]
 8005ff0:	429d      	cmp	r5, r3
 8005ff2:	dc04      	bgt.n	8005ffe <arith_encode+0x4e>
      /* If the interval size (qe) for the less probable symbol (LPS)
       * is larger than the interval size for the MPS, then exchange
       * the two symbols for coding efficiency, otherwise code the LPS
       * as usual: */
      e->c += e->a;
 8005ff4:	68e2      	ldr	r2, [r4, #12]
 8005ff6:	6923      	ldr	r3, [r4, #16]
 8005ff8:	4413      	add	r3, r2
 8005ffa:	60e3      	str	r3, [r4, #12]
      e->a = qe;
 8005ffc:	6125      	str	r5, [r4, #16]
    }
    *st = (sv & 0x80) ^ nl;	/* Estimate_after_LPS */
 8005ffe:	b273      	sxtb	r3, r6
 8006000:	f023 037f 	bic.w	r3, r3, #127	@ 0x7f
 8006004:	b25a      	sxtb	r2, r3
 8006006:	fa4f f389 	sxtb.w	r3, r9
 800600a:	4053      	eors	r3, r2
 800600c:	b25b      	sxtb	r3, r3
 800600e:	b2da      	uxtb	r2, r3
 8006010:	68bb      	ldr	r3, [r7, #8]
 8006012:	701a      	strb	r2, [r3, #0]
 8006014:	e017      	b.n	8006046 <arith_encode+0x96>
  } else {
    /* Encode the more probable symbol */
    if (e->a >= 0x8000L)
 8006016:	6923      	ldr	r3, [r4, #16]
 8006018:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800601c:	f280 8098 	bge.w	8006150 <arith_encode+0x1a0>
      return;  /* A >= 0x8000 -> ready, no renormalization required */
    if (e->a < qe) {
 8006020:	6923      	ldr	r3, [r4, #16]
 8006022:	429d      	cmp	r5, r3
 8006024:	dd04      	ble.n	8006030 <arith_encode+0x80>
      /* If the interval size (qe) for the less probable symbol (LPS)
       * is larger than the interval size for the MPS, then exchange
       * the two symbols for coding efficiency: */
      e->c += e->a;
 8006026:	68e2      	ldr	r2, [r4, #12]
 8006028:	6923      	ldr	r3, [r4, #16]
 800602a:	4413      	add	r3, r2
 800602c:	60e3      	str	r3, [r4, #12]
      e->a = qe;
 800602e:	6125      	str	r5, [r4, #16]
    }
    *st = (sv & 0x80) ^ nm;	/* Estimate_after_MPS */
 8006030:	b273      	sxtb	r3, r6
 8006032:	f023 037f 	bic.w	r3, r3, #127	@ 0x7f
 8006036:	b25a      	sxtb	r2, r3
 8006038:	fa4f f388 	sxtb.w	r3, r8
 800603c:	4053      	eors	r3, r2
 800603e:	b25b      	sxtb	r3, r3
 8006040:	b2da      	uxtb	r2, r3
 8006042:	68bb      	ldr	r3, [r7, #8]
 8006044:	701a      	strb	r2, [r3, #0]
  }

  /* Renormalization & data output per section D.1.6 */
  do {
    e->a <<= 1;
 8006046:	6923      	ldr	r3, [r4, #16]
 8006048:	005b      	lsls	r3, r3, #1
 800604a:	6123      	str	r3, [r4, #16]
    e->c <<= 1;
 800604c:	68e3      	ldr	r3, [r4, #12]
 800604e:	005b      	lsls	r3, r3, #1
 8006050:	60e3      	str	r3, [r4, #12]
    if (--e->ct == 0) {
 8006052:	69e3      	ldr	r3, [r4, #28]
 8006054:	3b01      	subs	r3, #1
 8006056:	61e3      	str	r3, [r4, #28]
 8006058:	69e3      	ldr	r3, [r4, #28]
 800605a:	2b00      	cmp	r3, #0
 800605c:	d172      	bne.n	8006144 <arith_encode+0x194>
      /* Another byte is ready for output */
      temp = e->c >> 19;
 800605e:	68e3      	ldr	r3, [r4, #12]
 8006060:	14dd      	asrs	r5, r3, #19
      if (temp > 0xFF) {
 8006062:	2dff      	cmp	r5, #255	@ 0xff
 8006064:	dd25      	ble.n	80060b2 <arith_encode+0x102>
	/* Handle overflow over all stacked 0xFF bytes */
	if (e->buffer >= 0) {
 8006066:	6a23      	ldr	r3, [r4, #32]
 8006068:	2b00      	cmp	r3, #0
 800606a:	db19      	blt.n	80060a0 <arith_encode+0xf0>
	  if (e->zc)
 800606c:	69a3      	ldr	r3, [r4, #24]
 800606e:	2b00      	cmp	r3, #0
 8006070:	d009      	beq.n	8006086 <arith_encode+0xd6>
	    do emit_byte(0x00, cinfo);
 8006072:	68f9      	ldr	r1, [r7, #12]
 8006074:	2000      	movs	r0, #0
 8006076:	f7ff fe82 	bl	8005d7e <emit_byte>
	    while (--e->zc);
 800607a:	69a3      	ldr	r3, [r4, #24]
 800607c:	3b01      	subs	r3, #1
 800607e:	61a3      	str	r3, [r4, #24]
 8006080:	69a3      	ldr	r3, [r4, #24]
 8006082:	2b00      	cmp	r3, #0
 8006084:	d1f5      	bne.n	8006072 <arith_encode+0xc2>
	  emit_byte(e->buffer + 1, cinfo);
 8006086:	6a23      	ldr	r3, [r4, #32]
 8006088:	3301      	adds	r3, #1
 800608a:	68f9      	ldr	r1, [r7, #12]
 800608c:	4618      	mov	r0, r3
 800608e:	f7ff fe76 	bl	8005d7e <emit_byte>
	  if (e->buffer + 1 == 0xFF)
 8006092:	6a23      	ldr	r3, [r4, #32]
 8006094:	2bfe      	cmp	r3, #254	@ 0xfe
 8006096:	d103      	bne.n	80060a0 <arith_encode+0xf0>
	    emit_byte(0x00, cinfo);
 8006098:	68f9      	ldr	r1, [r7, #12]
 800609a:	2000      	movs	r0, #0
 800609c:	f7ff fe6f 	bl	8005d7e <emit_byte>
	}
	e->zc += e->sc;  /* carry-over converts stacked 0xFF bytes to 0x00 */
 80060a0:	69a2      	ldr	r2, [r4, #24]
 80060a2:	6963      	ldr	r3, [r4, #20]
 80060a4:	4413      	add	r3, r2
 80060a6:	61a3      	str	r3, [r4, #24]
	e->sc = 0;
 80060a8:	2300      	movs	r3, #0
 80060aa:	6163      	str	r3, [r4, #20]
	/* Note: The 3 spacer bits in the C register guarantee
	 * that the new buffer byte can't be 0xFF here
	 * (see page 160 in the P&M JPEG book). */
	e->buffer = temp & 0xFF;  /* new output byte, might overflow later */
 80060ac:	b2eb      	uxtb	r3, r5
 80060ae:	6223      	str	r3, [r4, #32]
 80060b0:	e041      	b.n	8006136 <arith_encode+0x186>
      } else if (temp == 0xFF) {
 80060b2:	2dff      	cmp	r5, #255	@ 0xff
 80060b4:	d103      	bne.n	80060be <arith_encode+0x10e>
	++e->sc;  /* stack 0xFF byte (which might overflow later) */
 80060b6:	6963      	ldr	r3, [r4, #20]
 80060b8:	3301      	adds	r3, #1
 80060ba:	6163      	str	r3, [r4, #20]
 80060bc:	e03b      	b.n	8006136 <arith_encode+0x186>
      } else {
	/* Output all stacked 0xFF bytes, they will not overflow any more */
	if (e->buffer == 0)
 80060be:	6a23      	ldr	r3, [r4, #32]
 80060c0:	2b00      	cmp	r3, #0
 80060c2:	d103      	bne.n	80060cc <arith_encode+0x11c>
	  ++e->zc;
 80060c4:	69a3      	ldr	r3, [r4, #24]
 80060c6:	3301      	adds	r3, #1
 80060c8:	61a3      	str	r3, [r4, #24]
 80060ca:	e014      	b.n	80060f6 <arith_encode+0x146>
	else if (e->buffer >= 0) {
 80060cc:	6a23      	ldr	r3, [r4, #32]
 80060ce:	2b00      	cmp	r3, #0
 80060d0:	db11      	blt.n	80060f6 <arith_encode+0x146>
	  if (e->zc)
 80060d2:	69a3      	ldr	r3, [r4, #24]
 80060d4:	2b00      	cmp	r3, #0
 80060d6:	d009      	beq.n	80060ec <arith_encode+0x13c>
	    do emit_byte(0x00, cinfo);
 80060d8:	68f9      	ldr	r1, [r7, #12]
 80060da:	2000      	movs	r0, #0
 80060dc:	f7ff fe4f 	bl	8005d7e <emit_byte>
	    while (--e->zc);
 80060e0:	69a3      	ldr	r3, [r4, #24]
 80060e2:	3b01      	subs	r3, #1
 80060e4:	61a3      	str	r3, [r4, #24]
 80060e6:	69a3      	ldr	r3, [r4, #24]
 80060e8:	2b00      	cmp	r3, #0
 80060ea:	d1f5      	bne.n	80060d8 <arith_encode+0x128>
	  emit_byte(e->buffer, cinfo);
 80060ec:	6a23      	ldr	r3, [r4, #32]
 80060ee:	68f9      	ldr	r1, [r7, #12]
 80060f0:	4618      	mov	r0, r3
 80060f2:	f7ff fe44 	bl	8005d7e <emit_byte>
	}
	if (e->sc) {
 80060f6:	6963      	ldr	r3, [r4, #20]
 80060f8:	2b00      	cmp	r3, #0
 80060fa:	d01a      	beq.n	8006132 <arith_encode+0x182>
	  if (e->zc)
 80060fc:	69a3      	ldr	r3, [r4, #24]
 80060fe:	2b00      	cmp	r3, #0
 8006100:	d009      	beq.n	8006116 <arith_encode+0x166>
	    do emit_byte(0x00, cinfo);
 8006102:	68f9      	ldr	r1, [r7, #12]
 8006104:	2000      	movs	r0, #0
 8006106:	f7ff fe3a 	bl	8005d7e <emit_byte>
	    while (--e->zc);
 800610a:	69a3      	ldr	r3, [r4, #24]
 800610c:	3b01      	subs	r3, #1
 800610e:	61a3      	str	r3, [r4, #24]
 8006110:	69a3      	ldr	r3, [r4, #24]
 8006112:	2b00      	cmp	r3, #0
 8006114:	d1f5      	bne.n	8006102 <arith_encode+0x152>
	  do {
	    emit_byte(0xFF, cinfo);
 8006116:	68f9      	ldr	r1, [r7, #12]
 8006118:	20ff      	movs	r0, #255	@ 0xff
 800611a:	f7ff fe30 	bl	8005d7e <emit_byte>
	    emit_byte(0x00, cinfo);
 800611e:	68f9      	ldr	r1, [r7, #12]
 8006120:	2000      	movs	r0, #0
 8006122:	f7ff fe2c 	bl	8005d7e <emit_byte>
	  } while (--e->sc);
 8006126:	6963      	ldr	r3, [r4, #20]
 8006128:	3b01      	subs	r3, #1
 800612a:	6163      	str	r3, [r4, #20]
 800612c:	6963      	ldr	r3, [r4, #20]
 800612e:	2b00      	cmp	r3, #0
 8006130:	d1f1      	bne.n	8006116 <arith_encode+0x166>
	}
	e->buffer = temp & 0xFF;  /* new output byte (can still overflow) */
 8006132:	b2eb      	uxtb	r3, r5
 8006134:	6223      	str	r3, [r4, #32]
      }
      e->c &= 0x7FFFFL;
 8006136:	68e3      	ldr	r3, [r4, #12]
 8006138:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800613c:	60e3      	str	r3, [r4, #12]
      e->ct += 8;
 800613e:	69e3      	ldr	r3, [r4, #28]
 8006140:	3308      	adds	r3, #8
 8006142:	61e3      	str	r3, [r4, #28]
    }
  } while (e->a < 0x8000L);
 8006144:	6923      	ldr	r3, [r4, #16]
 8006146:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800614a:	f6ff af7c 	blt.w	8006046 <arith_encode+0x96>
 800614e:	e000      	b.n	8006152 <arith_encode+0x1a2>
      return;  /* A >= 0x8000 -> ready, no renormalization required */
 8006150:	bf00      	nop
}
 8006152:	3714      	adds	r7, #20
 8006154:	46bd      	mov	sp, r7
 8006156:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800615a:	bf00      	nop
 800615c:	0801b5a0 	.word	0x0801b5a0

08006160 <emit_restart>:
 * Emit a restart marker & resynchronize predictions.
 */

LOCAL(void)
emit_restart (j_compress_ptr cinfo, int restart_num)
{
 8006160:	b580      	push	{r7, lr}
 8006162:	b086      	sub	sp, #24
 8006164:	af00      	add	r7, sp, #0
 8006166:	6078      	str	r0, [r7, #4]
 8006168:	6039      	str	r1, [r7, #0]
  arith_entropy_ptr entropy = (arith_entropy_ptr) cinfo->entropy;
 800616a:	687b      	ldr	r3, [r7, #4]
 800616c:	f8d3 31a4 	ldr.w	r3, [r3, #420]	@ 0x1a4
 8006170:	613b      	str	r3, [r7, #16]
  int ci;
  jpeg_component_info * compptr;

  finish_pass(cinfo);
 8006172:	6878      	ldr	r0, [r7, #4]
 8006174:	f7ff fe30 	bl	8005dd8 <finish_pass>

  emit_byte(0xFF, cinfo);
 8006178:	6879      	ldr	r1, [r7, #4]
 800617a:	20ff      	movs	r0, #255	@ 0xff
 800617c:	f7ff fdff 	bl	8005d7e <emit_byte>
  emit_byte(JPEG_RST0 + restart_num, cinfo);
 8006180:	683b      	ldr	r3, [r7, #0]
 8006182:	33d0      	adds	r3, #208	@ 0xd0
 8006184:	6879      	ldr	r1, [r7, #4]
 8006186:	4618      	mov	r0, r3
 8006188:	f7ff fdf9 	bl	8005d7e <emit_byte>

  /* Re-initialize statistics areas */
  for (ci = 0; ci < cinfo->comps_in_scan; ci++) {
 800618c:	2300      	movs	r3, #0
 800618e:	617b      	str	r3, [r7, #20]
 8006190:	e03f      	b.n	8006212 <emit_restart+0xb2>
    compptr = cinfo->cur_comp_info[ci];
 8006192:	687a      	ldr	r2, [r7, #4]
 8006194:	697b      	ldr	r3, [r7, #20]
 8006196:	3348      	adds	r3, #72	@ 0x48
 8006198:	009b      	lsls	r3, r3, #2
 800619a:	4413      	add	r3, r2
 800619c:	685b      	ldr	r3, [r3, #4]
 800619e:	60fb      	str	r3, [r7, #12]
    /* DC needs no table for refinement scan */
    if (cinfo->Ss == 0 && cinfo->Ah == 0) {
 80061a0:	687b      	ldr	r3, [r7, #4]
 80061a2:	f8d3 3168 	ldr.w	r3, [r3, #360]	@ 0x168
 80061a6:	2b00      	cmp	r3, #0
 80061a8:	d11e      	bne.n	80061e8 <emit_restart+0x88>
 80061aa:	687b      	ldr	r3, [r7, #4]
 80061ac:	f8d3 3170 	ldr.w	r3, [r3, #368]	@ 0x170
 80061b0:	2b00      	cmp	r3, #0
 80061b2:	d119      	bne.n	80061e8 <emit_restart+0x88>
      MEMZERO(entropy->dc_stats[compptr->dc_tbl_no], DC_STAT_BINS);
 80061b4:	68fb      	ldr	r3, [r7, #12]
 80061b6:	695b      	ldr	r3, [r3, #20]
 80061b8:	693a      	ldr	r2, [r7, #16]
 80061ba:	3312      	adds	r3, #18
 80061bc:	009b      	lsls	r3, r3, #2
 80061be:	4413      	add	r3, r2
 80061c0:	685b      	ldr	r3, [r3, #4]
 80061c2:	2240      	movs	r2, #64	@ 0x40
 80061c4:	2100      	movs	r1, #0
 80061c6:	4618      	mov	r0, r3
 80061c8:	f013 fc12 	bl	80199f0 <memset>
      /* Reset DC predictions to 0 */
      entropy->last_dc_val[ci] = 0;
 80061cc:	693a      	ldr	r2, [r7, #16]
 80061ce:	697b      	ldr	r3, [r7, #20]
 80061d0:	3308      	adds	r3, #8
 80061d2:	009b      	lsls	r3, r3, #2
 80061d4:	4413      	add	r3, r2
 80061d6:	2200      	movs	r2, #0
 80061d8:	605a      	str	r2, [r3, #4]
      entropy->dc_context[ci] = 0;
 80061da:	693a      	ldr	r2, [r7, #16]
 80061dc:	697b      	ldr	r3, [r7, #20]
 80061de:	330c      	adds	r3, #12
 80061e0:	009b      	lsls	r3, r3, #2
 80061e2:	4413      	add	r3, r2
 80061e4:	2200      	movs	r2, #0
 80061e6:	605a      	str	r2, [r3, #4]
    }
    /* AC needs no table when not present */
    if (cinfo->Se) {
 80061e8:	687b      	ldr	r3, [r7, #4]
 80061ea:	f8d3 316c 	ldr.w	r3, [r3, #364]	@ 0x16c
 80061ee:	2b00      	cmp	r3, #0
 80061f0:	d00c      	beq.n	800620c <emit_restart+0xac>
      MEMZERO(entropy->ac_stats[compptr->ac_tbl_no], AC_STAT_BINS);
 80061f2:	68fb      	ldr	r3, [r7, #12]
 80061f4:	699b      	ldr	r3, [r3, #24]
 80061f6:	693a      	ldr	r2, [r7, #16]
 80061f8:	3322      	adds	r3, #34	@ 0x22
 80061fa:	009b      	lsls	r3, r3, #2
 80061fc:	4413      	add	r3, r2
 80061fe:	685b      	ldr	r3, [r3, #4]
 8006200:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8006204:	2100      	movs	r1, #0
 8006206:	4618      	mov	r0, r3
 8006208:	f013 fbf2 	bl	80199f0 <memset>
  for (ci = 0; ci < cinfo->comps_in_scan; ci++) {
 800620c:	697b      	ldr	r3, [r7, #20]
 800620e:	3301      	adds	r3, #1
 8006210:	617b      	str	r3, [r7, #20]
 8006212:	687b      	ldr	r3, [r7, #4]
 8006214:	f8d3 3120 	ldr.w	r3, [r3, #288]	@ 0x120
 8006218:	697a      	ldr	r2, [r7, #20]
 800621a:	429a      	cmp	r2, r3
 800621c:	dbb9      	blt.n	8006192 <emit_restart+0x32>
    }
  }

  /* Reset arithmetic encoding variables */
  entropy->c = 0;
 800621e:	693b      	ldr	r3, [r7, #16]
 8006220:	2200      	movs	r2, #0
 8006222:	60da      	str	r2, [r3, #12]
  entropy->a = 0x10000L;
 8006224:	693b      	ldr	r3, [r7, #16]
 8006226:	f44f 3280 	mov.w	r2, #65536	@ 0x10000
 800622a:	611a      	str	r2, [r3, #16]
  entropy->sc = 0;
 800622c:	693b      	ldr	r3, [r7, #16]
 800622e:	2200      	movs	r2, #0
 8006230:	615a      	str	r2, [r3, #20]
  entropy->zc = 0;
 8006232:	693b      	ldr	r3, [r7, #16]
 8006234:	2200      	movs	r2, #0
 8006236:	619a      	str	r2, [r3, #24]
  entropy->ct = 11;
 8006238:	693b      	ldr	r3, [r7, #16]
 800623a:	220b      	movs	r2, #11
 800623c:	61da      	str	r2, [r3, #28]
  entropy->buffer = -1;  /* empty */
 800623e:	693b      	ldr	r3, [r7, #16]
 8006240:	f04f 32ff 	mov.w	r2, #4294967295
 8006244:	621a      	str	r2, [r3, #32]
}
 8006246:	bf00      	nop
 8006248:	3718      	adds	r7, #24
 800624a:	46bd      	mov	sp, r7
 800624c:	bd80      	pop	{r7, pc}

0800624e <encode_mcu_DC_first>:
 * or first pass of successive approximation).
 */

METHODDEF(boolean)
encode_mcu_DC_first (j_compress_ptr cinfo, JBLOCKROW *MCU_data)
{
 800624e:	b580      	push	{r7, lr}
 8006250:	b08c      	sub	sp, #48	@ 0x30
 8006252:	af00      	add	r7, sp, #0
 8006254:	6078      	str	r0, [r7, #4]
 8006256:	6039      	str	r1, [r7, #0]
  arith_entropy_ptr entropy = (arith_entropy_ptr) cinfo->entropy;
 8006258:	687b      	ldr	r3, [r7, #4]
 800625a:	f8d3 31a4 	ldr.w	r3, [r3, #420]	@ 0x1a4
 800625e:	61bb      	str	r3, [r7, #24]
  int blkn, ci, tbl;
  int v, v2, m;
  ISHIFT_TEMPS

  /* Emit restart marker if needed */
  if (cinfo->restart_interval) {
 8006260:	687b      	ldr	r3, [r7, #4]
 8006262:	f8d3 30ec 	ldr.w	r3, [r3, #236]	@ 0xec
 8006266:	2b00      	cmp	r3, #0
 8006268:	d01e      	beq.n	80062a8 <encode_mcu_DC_first+0x5a>
    if (entropy->restarts_to_go == 0) {
 800626a:	69bb      	ldr	r3, [r7, #24]
 800626c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800626e:	2b00      	cmp	r3, #0
 8006270:	d115      	bne.n	800629e <encode_mcu_DC_first+0x50>
      emit_restart(cinfo, entropy->next_restart_num);
 8006272:	69bb      	ldr	r3, [r7, #24]
 8006274:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8006276:	4619      	mov	r1, r3
 8006278:	6878      	ldr	r0, [r7, #4]
 800627a:	f7ff ff71 	bl	8006160 <emit_restart>
      entropy->restarts_to_go = cinfo->restart_interval;
 800627e:	687b      	ldr	r3, [r7, #4]
 8006280:	f8d3 20ec 	ldr.w	r2, [r3, #236]	@ 0xec
 8006284:	69bb      	ldr	r3, [r7, #24]
 8006286:	645a      	str	r2, [r3, #68]	@ 0x44
      entropy->next_restart_num++;
 8006288:	69bb      	ldr	r3, [r7, #24]
 800628a:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800628c:	1c5a      	adds	r2, r3, #1
 800628e:	69bb      	ldr	r3, [r7, #24]
 8006290:	649a      	str	r2, [r3, #72]	@ 0x48
      entropy->next_restart_num &= 7;
 8006292:	69bb      	ldr	r3, [r7, #24]
 8006294:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8006296:	f003 0207 	and.w	r2, r3, #7
 800629a:	69bb      	ldr	r3, [r7, #24]
 800629c:	649a      	str	r2, [r3, #72]	@ 0x48
    }
    entropy->restarts_to_go--;
 800629e:	69bb      	ldr	r3, [r7, #24]
 80062a0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80062a2:	1e5a      	subs	r2, r3, #1
 80062a4:	69bb      	ldr	r3, [r7, #24]
 80062a6:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Encode the MCU data blocks */
  for (blkn = 0; blkn < cinfo->blocks_in_MCU; blkn++) {
 80062a8:	2300      	movs	r3, #0
 80062aa:	62bb      	str	r3, [r7, #40]	@ 0x28
 80062ac:	e0f1      	b.n	8006492 <encode_mcu_DC_first+0x244>
    block = MCU_data[blkn];
 80062ae:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80062b0:	009b      	lsls	r3, r3, #2
 80062b2:	683a      	ldr	r2, [r7, #0]
 80062b4:	4413      	add	r3, r2
 80062b6:	681b      	ldr	r3, [r3, #0]
 80062b8:	617b      	str	r3, [r7, #20]
    ci = cinfo->MCU_membership[blkn];
 80062ba:	687b      	ldr	r3, [r7, #4]
 80062bc:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 80062be:	3250      	adds	r2, #80	@ 0x50
 80062c0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80062c4:	613b      	str	r3, [r7, #16]
    tbl = cinfo->cur_comp_info[ci]->dc_tbl_no;
 80062c6:	687a      	ldr	r2, [r7, #4]
 80062c8:	693b      	ldr	r3, [r7, #16]
 80062ca:	3348      	adds	r3, #72	@ 0x48
 80062cc:	009b      	lsls	r3, r3, #2
 80062ce:	4413      	add	r3, r2
 80062d0:	685b      	ldr	r3, [r3, #4]
 80062d2:	695b      	ldr	r3, [r3, #20]
 80062d4:	60fb      	str	r3, [r7, #12]

    /* Compute the DC value after the required point transform by Al.
     * This is simply an arithmetic right shift.
     */
    m = IRIGHT_SHIFT((int) ((*block)[0]), cinfo->Al);
 80062d6:	697b      	ldr	r3, [r7, #20]
 80062d8:	f9b3 3000 	ldrsh.w	r3, [r3]
 80062dc:	461a      	mov	r2, r3
 80062de:	687b      	ldr	r3, [r7, #4]
 80062e0:	f8d3 3174 	ldr.w	r3, [r3, #372]	@ 0x174
 80062e4:	fa42 f303 	asr.w	r3, r2, r3
 80062e8:	61fb      	str	r3, [r7, #28]

    /* Sections F.1.4.1 & F.1.4.4.1: Encoding of DC coefficients */

    /* Table F.4: Point to statistics bin S0 for DC coefficient coding */
    st = entropy->dc_stats[tbl] + entropy->dc_context[ci];
 80062ea:	69ba      	ldr	r2, [r7, #24]
 80062ec:	68fb      	ldr	r3, [r7, #12]
 80062ee:	3312      	adds	r3, #18
 80062f0:	009b      	lsls	r3, r3, #2
 80062f2:	4413      	add	r3, r2
 80062f4:	685a      	ldr	r2, [r3, #4]
 80062f6:	69b9      	ldr	r1, [r7, #24]
 80062f8:	693b      	ldr	r3, [r7, #16]
 80062fa:	330c      	adds	r3, #12
 80062fc:	009b      	lsls	r3, r3, #2
 80062fe:	440b      	add	r3, r1
 8006300:	685b      	ldr	r3, [r3, #4]
 8006302:	4413      	add	r3, r2
 8006304:	62fb      	str	r3, [r7, #44]	@ 0x2c

    /* Figure F.4: Encode_DC_DIFF */
    if ((v = m - entropy->last_dc_val[ci]) == 0) {
 8006306:	69ba      	ldr	r2, [r7, #24]
 8006308:	693b      	ldr	r3, [r7, #16]
 800630a:	3308      	adds	r3, #8
 800630c:	009b      	lsls	r3, r3, #2
 800630e:	4413      	add	r3, r2
 8006310:	685b      	ldr	r3, [r3, #4]
 8006312:	69fa      	ldr	r2, [r7, #28]
 8006314:	1ad3      	subs	r3, r2, r3
 8006316:	627b      	str	r3, [r7, #36]	@ 0x24
 8006318:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800631a:	2b00      	cmp	r3, #0
 800631c:	d10c      	bne.n	8006338 <encode_mcu_DC_first+0xea>
      arith_encode(cinfo, st, 0);
 800631e:	2200      	movs	r2, #0
 8006320:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8006322:	6878      	ldr	r0, [r7, #4]
 8006324:	f7ff fe44 	bl	8005fb0 <arith_encode>
      entropy->dc_context[ci] = 0;	/* zero diff category */
 8006328:	69ba      	ldr	r2, [r7, #24]
 800632a:	693b      	ldr	r3, [r7, #16]
 800632c:	330c      	adds	r3, #12
 800632e:	009b      	lsls	r3, r3, #2
 8006330:	4413      	add	r3, r2
 8006332:	2200      	movs	r2, #0
 8006334:	605a      	str	r2, [r3, #4]
 8006336:	e0a9      	b.n	800648c <encode_mcu_DC_first+0x23e>
    } else {
      entropy->last_dc_val[ci] = m;
 8006338:	69ba      	ldr	r2, [r7, #24]
 800633a:	693b      	ldr	r3, [r7, #16]
 800633c:	3308      	adds	r3, #8
 800633e:	009b      	lsls	r3, r3, #2
 8006340:	4413      	add	r3, r2
 8006342:	69fa      	ldr	r2, [r7, #28]
 8006344:	605a      	str	r2, [r3, #4]
      arith_encode(cinfo, st, 1);
 8006346:	2201      	movs	r2, #1
 8006348:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800634a:	6878      	ldr	r0, [r7, #4]
 800634c:	f7ff fe30 	bl	8005fb0 <arith_encode>
      /* Figure F.6: Encoding nonzero value v */
      /* Figure F.7: Encoding the sign of v */
      if (v > 0) {
 8006350:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006352:	2b00      	cmp	r3, #0
 8006354:	dd11      	ble.n	800637a <encode_mcu_DC_first+0x12c>
	arith_encode(cinfo, st + 1, 0);	/* Table F.4: SS = S0 + 1 */
 8006356:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006358:	3301      	adds	r3, #1
 800635a:	2200      	movs	r2, #0
 800635c:	4619      	mov	r1, r3
 800635e:	6878      	ldr	r0, [r7, #4]
 8006360:	f7ff fe26 	bl	8005fb0 <arith_encode>
	st += 2;			/* Table F.4: SP = S0 + 2 */
 8006364:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006366:	3302      	adds	r3, #2
 8006368:	62fb      	str	r3, [r7, #44]	@ 0x2c
	entropy->dc_context[ci] = 4;	/* small positive diff category */
 800636a:	69ba      	ldr	r2, [r7, #24]
 800636c:	693b      	ldr	r3, [r7, #16]
 800636e:	330c      	adds	r3, #12
 8006370:	009b      	lsls	r3, r3, #2
 8006372:	4413      	add	r3, r2
 8006374:	2204      	movs	r2, #4
 8006376:	605a      	str	r2, [r3, #4]
 8006378:	e013      	b.n	80063a2 <encode_mcu_DC_first+0x154>
      } else {
	v = -v;
 800637a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800637c:	425b      	negs	r3, r3
 800637e:	627b      	str	r3, [r7, #36]	@ 0x24
	arith_encode(cinfo, st + 1, 1);	/* Table F.4: SS = S0 + 1 */
 8006380:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006382:	3301      	adds	r3, #1
 8006384:	2201      	movs	r2, #1
 8006386:	4619      	mov	r1, r3
 8006388:	6878      	ldr	r0, [r7, #4]
 800638a:	f7ff fe11 	bl	8005fb0 <arith_encode>
	st += 3;			/* Table F.4: SN = S0 + 3 */
 800638e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006390:	3303      	adds	r3, #3
 8006392:	62fb      	str	r3, [r7, #44]	@ 0x2c
	entropy->dc_context[ci] = 8;	/* small negative diff category */
 8006394:	69ba      	ldr	r2, [r7, #24]
 8006396:	693b      	ldr	r3, [r7, #16]
 8006398:	330c      	adds	r3, #12
 800639a:	009b      	lsls	r3, r3, #2
 800639c:	4413      	add	r3, r2
 800639e:	2208      	movs	r2, #8
 80063a0:	605a      	str	r2, [r3, #4]
      }
      /* Figure F.8: Encoding the magnitude category of v */
      m = 0;
 80063a2:	2300      	movs	r3, #0
 80063a4:	61fb      	str	r3, [r7, #28]
      if (v -= 1) {
 80063a6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80063a8:	3b01      	subs	r3, #1
 80063aa:	627b      	str	r3, [r7, #36]	@ 0x24
 80063ac:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80063ae:	2b00      	cmp	r3, #0
 80063b0:	d022      	beq.n	80063f8 <encode_mcu_DC_first+0x1aa>
	arith_encode(cinfo, st, 1);
 80063b2:	2201      	movs	r2, #1
 80063b4:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 80063b6:	6878      	ldr	r0, [r7, #4]
 80063b8:	f7ff fdfa 	bl	8005fb0 <arith_encode>
	m = 1;
 80063bc:	2301      	movs	r3, #1
 80063be:	61fb      	str	r3, [r7, #28]
	v2 = v;
 80063c0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80063c2:	623b      	str	r3, [r7, #32]
	st = entropy->dc_stats[tbl] + 20; /* Table F.4: X1 = 20 */
 80063c4:	69ba      	ldr	r2, [r7, #24]
 80063c6:	68fb      	ldr	r3, [r7, #12]
 80063c8:	3312      	adds	r3, #18
 80063ca:	009b      	lsls	r3, r3, #2
 80063cc:	4413      	add	r3, r2
 80063ce:	685b      	ldr	r3, [r3, #4]
 80063d0:	3314      	adds	r3, #20
 80063d2:	62fb      	str	r3, [r7, #44]	@ 0x2c
	while (v2 >>= 1) {
 80063d4:	e00a      	b.n	80063ec <encode_mcu_DC_first+0x19e>
	  arith_encode(cinfo, st, 1);
 80063d6:	2201      	movs	r2, #1
 80063d8:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 80063da:	6878      	ldr	r0, [r7, #4]
 80063dc:	f7ff fde8 	bl	8005fb0 <arith_encode>
	  m <<= 1;
 80063e0:	69fb      	ldr	r3, [r7, #28]
 80063e2:	005b      	lsls	r3, r3, #1
 80063e4:	61fb      	str	r3, [r7, #28]
	  st += 1;
 80063e6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80063e8:	3301      	adds	r3, #1
 80063ea:	62fb      	str	r3, [r7, #44]	@ 0x2c
	while (v2 >>= 1) {
 80063ec:	6a3b      	ldr	r3, [r7, #32]
 80063ee:	105b      	asrs	r3, r3, #1
 80063f0:	623b      	str	r3, [r7, #32]
 80063f2:	6a3b      	ldr	r3, [r7, #32]
 80063f4:	2b00      	cmp	r3, #0
 80063f6:	d1ee      	bne.n	80063d6 <encode_mcu_DC_first+0x188>
	}
      }
      arith_encode(cinfo, st, 0);
 80063f8:	2200      	movs	r2, #0
 80063fa:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 80063fc:	6878      	ldr	r0, [r7, #4]
 80063fe:	f7ff fdd7 	bl	8005fb0 <arith_encode>
      /* Section F.1.4.4.1.2: Establish dc_context conditioning category */
      if (m < (int) ((1L << cinfo->arith_dc_L[tbl]) >> 1))
 8006402:	687a      	ldr	r2, [r7, #4]
 8006404:	68fb      	ldr	r3, [r7, #12]
 8006406:	4413      	add	r3, r2
 8006408:	3398      	adds	r3, #152	@ 0x98
 800640a:	781b      	ldrb	r3, [r3, #0]
 800640c:	461a      	mov	r2, r3
 800640e:	2301      	movs	r3, #1
 8006410:	4093      	lsls	r3, r2
 8006412:	105b      	asrs	r3, r3, #1
 8006414:	69fa      	ldr	r2, [r7, #28]
 8006416:	429a      	cmp	r2, r3
 8006418:	da07      	bge.n	800642a <encode_mcu_DC_first+0x1dc>
	entropy->dc_context[ci] = 0;	/* zero diff category */
 800641a:	69ba      	ldr	r2, [r7, #24]
 800641c:	693b      	ldr	r3, [r7, #16]
 800641e:	330c      	adds	r3, #12
 8006420:	009b      	lsls	r3, r3, #2
 8006422:	4413      	add	r3, r2
 8006424:	2200      	movs	r2, #0
 8006426:	605a      	str	r2, [r3, #4]
 8006428:	e019      	b.n	800645e <encode_mcu_DC_first+0x210>
      else if (m > (int) ((1L << cinfo->arith_dc_U[tbl]) >> 1))
 800642a:	687a      	ldr	r2, [r7, #4]
 800642c:	68fb      	ldr	r3, [r7, #12]
 800642e:	4413      	add	r3, r2
 8006430:	33a8      	adds	r3, #168	@ 0xa8
 8006432:	781b      	ldrb	r3, [r3, #0]
 8006434:	461a      	mov	r2, r3
 8006436:	2301      	movs	r3, #1
 8006438:	4093      	lsls	r3, r2
 800643a:	105b      	asrs	r3, r3, #1
 800643c:	69fa      	ldr	r2, [r7, #28]
 800643e:	429a      	cmp	r2, r3
 8006440:	dd0d      	ble.n	800645e <encode_mcu_DC_first+0x210>
	entropy->dc_context[ci] += 8;	/* large diff category */
 8006442:	69ba      	ldr	r2, [r7, #24]
 8006444:	693b      	ldr	r3, [r7, #16]
 8006446:	330c      	adds	r3, #12
 8006448:	009b      	lsls	r3, r3, #2
 800644a:	4413      	add	r3, r2
 800644c:	685b      	ldr	r3, [r3, #4]
 800644e:	f103 0208 	add.w	r2, r3, #8
 8006452:	69b9      	ldr	r1, [r7, #24]
 8006454:	693b      	ldr	r3, [r7, #16]
 8006456:	330c      	adds	r3, #12
 8006458:	009b      	lsls	r3, r3, #2
 800645a:	440b      	add	r3, r1
 800645c:	605a      	str	r2, [r3, #4]
      /* Figure F.9: Encoding the magnitude bit pattern of v */
      st += 14;
 800645e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006460:	330e      	adds	r3, #14
 8006462:	62fb      	str	r3, [r7, #44]	@ 0x2c
      while (m >>= 1)
 8006464:	e00c      	b.n	8006480 <encode_mcu_DC_first+0x232>
	arith_encode(cinfo, st, (m & v) ? 1 : 0);
 8006466:	69fa      	ldr	r2, [r7, #28]
 8006468:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800646a:	4013      	ands	r3, r2
 800646c:	2b00      	cmp	r3, #0
 800646e:	bf14      	ite	ne
 8006470:	2301      	movne	r3, #1
 8006472:	2300      	moveq	r3, #0
 8006474:	b2db      	uxtb	r3, r3
 8006476:	461a      	mov	r2, r3
 8006478:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800647a:	6878      	ldr	r0, [r7, #4]
 800647c:	f7ff fd98 	bl	8005fb0 <arith_encode>
      while (m >>= 1)
 8006480:	69fb      	ldr	r3, [r7, #28]
 8006482:	105b      	asrs	r3, r3, #1
 8006484:	61fb      	str	r3, [r7, #28]
 8006486:	69fb      	ldr	r3, [r7, #28]
 8006488:	2b00      	cmp	r3, #0
 800648a:	d1ec      	bne.n	8006466 <encode_mcu_DC_first+0x218>
  for (blkn = 0; blkn < cinfo->blocks_in_MCU; blkn++) {
 800648c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800648e:	3301      	adds	r3, #1
 8006490:	62bb      	str	r3, [r7, #40]	@ 0x28
 8006492:	687b      	ldr	r3, [r7, #4]
 8006494:	f8d3 313c 	ldr.w	r3, [r3, #316]	@ 0x13c
 8006498:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800649a:	429a      	cmp	r2, r3
 800649c:	f6ff af07 	blt.w	80062ae <encode_mcu_DC_first+0x60>
    }
  }

  return TRUE;
 80064a0:	2301      	movs	r3, #1
}
 80064a2:	4618      	mov	r0, r3
 80064a4:	3730      	adds	r7, #48	@ 0x30
 80064a6:	46bd      	mov	sp, r7
 80064a8:	bd80      	pop	{r7, pc}

080064aa <encode_mcu_AC_first>:
 * or first pass of successive approximation).
 */

METHODDEF(boolean)
encode_mcu_AC_first (j_compress_ptr cinfo, JBLOCKROW *MCU_data)
{
 80064aa:	b580      	push	{r7, lr}
 80064ac:	b08c      	sub	sp, #48	@ 0x30
 80064ae:	af00      	add	r7, sp, #0
 80064b0:	6078      	str	r0, [r7, #4]
 80064b2:	6039      	str	r1, [r7, #0]
  arith_entropy_ptr entropy = (arith_entropy_ptr) cinfo->entropy;
 80064b4:	687b      	ldr	r3, [r7, #4]
 80064b6:	f8d3 31a4 	ldr.w	r3, [r3, #420]	@ 0x1a4
 80064ba:	617b      	str	r3, [r7, #20]
  int tbl, k, ke;
  int v, v2, m;
  const int * natural_order;

  /* Emit restart marker if needed */
  if (cinfo->restart_interval) {
 80064bc:	687b      	ldr	r3, [r7, #4]
 80064be:	f8d3 30ec 	ldr.w	r3, [r3, #236]	@ 0xec
 80064c2:	2b00      	cmp	r3, #0
 80064c4:	d01e      	beq.n	8006504 <encode_mcu_AC_first+0x5a>
    if (entropy->restarts_to_go == 0) {
 80064c6:	697b      	ldr	r3, [r7, #20]
 80064c8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80064ca:	2b00      	cmp	r3, #0
 80064cc:	d115      	bne.n	80064fa <encode_mcu_AC_first+0x50>
      emit_restart(cinfo, entropy->next_restart_num);
 80064ce:	697b      	ldr	r3, [r7, #20]
 80064d0:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80064d2:	4619      	mov	r1, r3
 80064d4:	6878      	ldr	r0, [r7, #4]
 80064d6:	f7ff fe43 	bl	8006160 <emit_restart>
      entropy->restarts_to_go = cinfo->restart_interval;
 80064da:	687b      	ldr	r3, [r7, #4]
 80064dc:	f8d3 20ec 	ldr.w	r2, [r3, #236]	@ 0xec
 80064e0:	697b      	ldr	r3, [r7, #20]
 80064e2:	645a      	str	r2, [r3, #68]	@ 0x44
      entropy->next_restart_num++;
 80064e4:	697b      	ldr	r3, [r7, #20]
 80064e6:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80064e8:	1c5a      	adds	r2, r3, #1
 80064ea:	697b      	ldr	r3, [r7, #20]
 80064ec:	649a      	str	r2, [r3, #72]	@ 0x48
      entropy->next_restart_num &= 7;
 80064ee:	697b      	ldr	r3, [r7, #20]
 80064f0:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80064f2:	f003 0207 	and.w	r2, r3, #7
 80064f6:	697b      	ldr	r3, [r7, #20]
 80064f8:	649a      	str	r2, [r3, #72]	@ 0x48
    }
    entropy->restarts_to_go--;
 80064fa:	697b      	ldr	r3, [r7, #20]
 80064fc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80064fe:	1e5a      	subs	r2, r3, #1
 8006500:	697b      	ldr	r3, [r7, #20]
 8006502:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  natural_order = cinfo->natural_order;
 8006504:	687b      	ldr	r3, [r7, #4]
 8006506:	f8d3 317c 	ldr.w	r3, [r3, #380]	@ 0x17c
 800650a:	613b      	str	r3, [r7, #16]

  /* Encode the MCU data block */
  block = MCU_data[0];
 800650c:	683b      	ldr	r3, [r7, #0]
 800650e:	681b      	ldr	r3, [r3, #0]
 8006510:	60fb      	str	r3, [r7, #12]
  tbl = cinfo->cur_comp_info[0]->ac_tbl_no;
 8006512:	687b      	ldr	r3, [r7, #4]
 8006514:	f8d3 3124 	ldr.w	r3, [r3, #292]	@ 0x124
 8006518:	699b      	ldr	r3, [r3, #24]
 800651a:	60bb      	str	r3, [r7, #8]

  /* Sections F.1.4.2 & F.1.4.4.2: Encoding of AC coefficients */

  /* Establish EOB (end-of-block) index */
  for (ke = cinfo->Se; ke > 0; ke--)
 800651c:	687b      	ldr	r3, [r7, #4]
 800651e:	f8d3 316c 	ldr.w	r3, [r3, #364]	@ 0x16c
 8006522:	627b      	str	r3, [r7, #36]	@ 0x24
 8006524:	e026      	b.n	8006574 <encode_mcu_AC_first+0xca>
    /* We must apply the point transform by Al.  For AC coefficients this
     * is an integer division with rounding towards 0.  To do this portably
     * in C, we shift after obtaining the absolute value.
     */
    if ((v = (*block)[natural_order[ke]]) >= 0) {
 8006526:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006528:	009b      	lsls	r3, r3, #2
 800652a:	693a      	ldr	r2, [r7, #16]
 800652c:	4413      	add	r3, r2
 800652e:	681a      	ldr	r2, [r3, #0]
 8006530:	68fb      	ldr	r3, [r7, #12]
 8006532:	f933 3012 	ldrsh.w	r3, [r3, r2, lsl #1]
 8006536:	623b      	str	r3, [r7, #32]
 8006538:	6a3b      	ldr	r3, [r7, #32]
 800653a:	2b00      	cmp	r3, #0
 800653c:	db0a      	blt.n	8006554 <encode_mcu_AC_first+0xaa>
      if (v >>= cinfo->Al) break;
 800653e:	687b      	ldr	r3, [r7, #4]
 8006540:	f8d3 3174 	ldr.w	r3, [r3, #372]	@ 0x174
 8006544:	6a3a      	ldr	r2, [r7, #32]
 8006546:	fa42 f303 	asr.w	r3, r2, r3
 800654a:	623b      	str	r3, [r7, #32]
 800654c:	6a3b      	ldr	r3, [r7, #32]
 800654e:	2b00      	cmp	r3, #0
 8006550:	d00d      	beq.n	800656e <encode_mcu_AC_first+0xc4>
 8006552:	e014      	b.n	800657e <encode_mcu_AC_first+0xd4>
    } else {
      v = -v;
 8006554:	6a3b      	ldr	r3, [r7, #32]
 8006556:	425b      	negs	r3, r3
 8006558:	623b      	str	r3, [r7, #32]
      if (v >>= cinfo->Al) break;
 800655a:	687b      	ldr	r3, [r7, #4]
 800655c:	f8d3 3174 	ldr.w	r3, [r3, #372]	@ 0x174
 8006560:	6a3a      	ldr	r2, [r7, #32]
 8006562:	fa42 f303 	asr.w	r3, r2, r3
 8006566:	623b      	str	r3, [r7, #32]
 8006568:	6a3b      	ldr	r3, [r7, #32]
 800656a:	2b00      	cmp	r3, #0
 800656c:	d106      	bne.n	800657c <encode_mcu_AC_first+0xd2>
  for (ke = cinfo->Se; ke > 0; ke--)
 800656e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006570:	3b01      	subs	r3, #1
 8006572:	627b      	str	r3, [r7, #36]	@ 0x24
 8006574:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006576:	2b00      	cmp	r3, #0
 8006578:	dcd5      	bgt.n	8006526 <encode_mcu_AC_first+0x7c>
 800657a:	e000      	b.n	800657e <encode_mcu_AC_first+0xd4>
      if (v >>= cinfo->Al) break;
 800657c:	bf00      	nop
    }

  /* Figure F.5: Encode_AC_Coefficients */
  for (k = cinfo->Ss; k <= ke; k++) {
 800657e:	687b      	ldr	r3, [r7, #4]
 8006580:	f8d3 3168 	ldr.w	r3, [r3, #360]	@ 0x168
 8006584:	62bb      	str	r3, [r7, #40]	@ 0x28
 8006586:	e0c7      	b.n	8006718 <encode_mcu_AC_first+0x26e>
    st = entropy->ac_stats[tbl] + 3 * (k - 1);
 8006588:	697a      	ldr	r2, [r7, #20]
 800658a:	68bb      	ldr	r3, [r7, #8]
 800658c:	3322      	adds	r3, #34	@ 0x22
 800658e:	009b      	lsls	r3, r3, #2
 8006590:	4413      	add	r3, r2
 8006592:	6859      	ldr	r1, [r3, #4]
 8006594:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006596:	1e5a      	subs	r2, r3, #1
 8006598:	4613      	mov	r3, r2
 800659a:	005b      	lsls	r3, r3, #1
 800659c:	4413      	add	r3, r2
 800659e:	440b      	add	r3, r1
 80065a0:	62fb      	str	r3, [r7, #44]	@ 0x2c
    arith_encode(cinfo, st, 0);		/* EOB decision */
 80065a2:	2200      	movs	r2, #0
 80065a4:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 80065a6:	6878      	ldr	r0, [r7, #4]
 80065a8:	f7ff fd02 	bl	8005fb0 <arith_encode>
    for (;;) {
      if ((v = (*block)[natural_order[k]]) >= 0) {
 80065ac:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80065ae:	009b      	lsls	r3, r3, #2
 80065b0:	693a      	ldr	r2, [r7, #16]
 80065b2:	4413      	add	r3, r2
 80065b4:	681a      	ldr	r2, [r3, #0]
 80065b6:	68fb      	ldr	r3, [r7, #12]
 80065b8:	f933 3012 	ldrsh.w	r3, [r3, r2, lsl #1]
 80065bc:	623b      	str	r3, [r7, #32]
 80065be:	6a3b      	ldr	r3, [r7, #32]
 80065c0:	2b00      	cmp	r3, #0
 80065c2:	db18      	blt.n	80065f6 <encode_mcu_AC_first+0x14c>
	if (v >>= cinfo->Al) {
 80065c4:	687b      	ldr	r3, [r7, #4]
 80065c6:	f8d3 3174 	ldr.w	r3, [r3, #372]	@ 0x174
 80065ca:	6a3a      	ldr	r2, [r7, #32]
 80065cc:	fa42 f303 	asr.w	r3, r2, r3
 80065d0:	623b      	str	r3, [r7, #32]
 80065d2:	6a3b      	ldr	r3, [r7, #32]
 80065d4:	2b00      	cmp	r3, #0
 80065d6:	d02a      	beq.n	800662e <encode_mcu_AC_first+0x184>
	  arith_encode(cinfo, st + 1, 1);
 80065d8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80065da:	3301      	adds	r3, #1
 80065dc:	2201      	movs	r2, #1
 80065de:	4619      	mov	r1, r3
 80065e0:	6878      	ldr	r0, [r7, #4]
 80065e2:	f7ff fce5 	bl	8005fb0 <arith_encode>
	  arith_encode(cinfo, entropy->fixed_bin, 0);
 80065e6:	697b      	ldr	r3, [r7, #20]
 80065e8:	33cc      	adds	r3, #204	@ 0xcc
 80065ea:	2200      	movs	r2, #0
 80065ec:	4619      	mov	r1, r3
 80065ee:	6878      	ldr	r0, [r7, #4]
 80065f0:	f7ff fcde 	bl	8005fb0 <arith_encode>
	  break;
 80065f4:	e029      	b.n	800664a <encode_mcu_AC_first+0x1a0>
	}
      } else {
	v = -v;
 80065f6:	6a3b      	ldr	r3, [r7, #32]
 80065f8:	425b      	negs	r3, r3
 80065fa:	623b      	str	r3, [r7, #32]
	if (v >>= cinfo->Al) {
 80065fc:	687b      	ldr	r3, [r7, #4]
 80065fe:	f8d3 3174 	ldr.w	r3, [r3, #372]	@ 0x174
 8006602:	6a3a      	ldr	r2, [r7, #32]
 8006604:	fa42 f303 	asr.w	r3, r2, r3
 8006608:	623b      	str	r3, [r7, #32]
 800660a:	6a3b      	ldr	r3, [r7, #32]
 800660c:	2b00      	cmp	r3, #0
 800660e:	d00e      	beq.n	800662e <encode_mcu_AC_first+0x184>
	  arith_encode(cinfo, st + 1, 1);
 8006610:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006612:	3301      	adds	r3, #1
 8006614:	2201      	movs	r2, #1
 8006616:	4619      	mov	r1, r3
 8006618:	6878      	ldr	r0, [r7, #4]
 800661a:	f7ff fcc9 	bl	8005fb0 <arith_encode>
	  arith_encode(cinfo, entropy->fixed_bin, 1);
 800661e:	697b      	ldr	r3, [r7, #20]
 8006620:	33cc      	adds	r3, #204	@ 0xcc
 8006622:	2201      	movs	r2, #1
 8006624:	4619      	mov	r1, r3
 8006626:	6878      	ldr	r0, [r7, #4]
 8006628:	f7ff fcc2 	bl	8005fb0 <arith_encode>
	  break;
 800662c:	e00d      	b.n	800664a <encode_mcu_AC_first+0x1a0>
	}
      }
      arith_encode(cinfo, st + 1, 0); st += 3; k++;
 800662e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006630:	3301      	adds	r3, #1
 8006632:	2200      	movs	r2, #0
 8006634:	4619      	mov	r1, r3
 8006636:	6878      	ldr	r0, [r7, #4]
 8006638:	f7ff fcba 	bl	8005fb0 <arith_encode>
 800663c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800663e:	3303      	adds	r3, #3
 8006640:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8006642:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006644:	3301      	adds	r3, #1
 8006646:	62bb      	str	r3, [r7, #40]	@ 0x28
      if ((v = (*block)[natural_order[k]]) >= 0) {
 8006648:	e7b0      	b.n	80065ac <encode_mcu_AC_first+0x102>
    }
    st += 2;
 800664a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800664c:	3302      	adds	r3, #2
 800664e:	62fb      	str	r3, [r7, #44]	@ 0x2c
    /* Figure F.8: Encoding the magnitude category of v */
    m = 0;
 8006650:	2300      	movs	r3, #0
 8006652:	61bb      	str	r3, [r7, #24]
    if (v -= 1) {
 8006654:	6a3b      	ldr	r3, [r7, #32]
 8006656:	3b01      	subs	r3, #1
 8006658:	623b      	str	r3, [r7, #32]
 800665a:	6a3b      	ldr	r3, [r7, #32]
 800665c:	2b00      	cmp	r3, #0
 800665e:	d03c      	beq.n	80066da <encode_mcu_AC_first+0x230>
      arith_encode(cinfo, st, 1);
 8006660:	2201      	movs	r2, #1
 8006662:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8006664:	6878      	ldr	r0, [r7, #4]
 8006666:	f7ff fca3 	bl	8005fb0 <arith_encode>
      m = 1;
 800666a:	2301      	movs	r3, #1
 800666c:	61bb      	str	r3, [r7, #24]
      v2 = v;
 800666e:	6a3b      	ldr	r3, [r7, #32]
 8006670:	61fb      	str	r3, [r7, #28]
      if (v2 >>= 1) {
 8006672:	69fb      	ldr	r3, [r7, #28]
 8006674:	105b      	asrs	r3, r3, #1
 8006676:	61fb      	str	r3, [r7, #28]
 8006678:	69fb      	ldr	r3, [r7, #28]
 800667a:	2b00      	cmp	r3, #0
 800667c:	d02d      	beq.n	80066da <encode_mcu_AC_first+0x230>
	arith_encode(cinfo, st, 1);
 800667e:	2201      	movs	r2, #1
 8006680:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8006682:	6878      	ldr	r0, [r7, #4]
 8006684:	f7ff fc94 	bl	8005fb0 <arith_encode>
	m <<= 1;
 8006688:	69bb      	ldr	r3, [r7, #24]
 800668a:	005b      	lsls	r3, r3, #1
 800668c:	61bb      	str	r3, [r7, #24]
	st = entropy->ac_stats[tbl] +
 800668e:	697a      	ldr	r2, [r7, #20]
 8006690:	68bb      	ldr	r3, [r7, #8]
 8006692:	3322      	adds	r3, #34	@ 0x22
 8006694:	009b      	lsls	r3, r3, #2
 8006696:	4413      	add	r3, r2
 8006698:	685a      	ldr	r2, [r3, #4]
	     (k <= cinfo->arith_ac_K[tbl] ? 189 : 217);
 800669a:	6879      	ldr	r1, [r7, #4]
 800669c:	68bb      	ldr	r3, [r7, #8]
 800669e:	440b      	add	r3, r1
 80066a0:	33b8      	adds	r3, #184	@ 0xb8
 80066a2:	781b      	ldrb	r3, [r3, #0]
 80066a4:	4619      	mov	r1, r3
 80066a6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80066a8:	428b      	cmp	r3, r1
 80066aa:	dc01      	bgt.n	80066b0 <encode_mcu_AC_first+0x206>
 80066ac:	23bd      	movs	r3, #189	@ 0xbd
 80066ae:	e000      	b.n	80066b2 <encode_mcu_AC_first+0x208>
 80066b0:	23d9      	movs	r3, #217	@ 0xd9
	st = entropy->ac_stats[tbl] +
 80066b2:	4413      	add	r3, r2
 80066b4:	62fb      	str	r3, [r7, #44]	@ 0x2c
	while (v2 >>= 1) {
 80066b6:	e00a      	b.n	80066ce <encode_mcu_AC_first+0x224>
	  arith_encode(cinfo, st, 1);
 80066b8:	2201      	movs	r2, #1
 80066ba:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 80066bc:	6878      	ldr	r0, [r7, #4]
 80066be:	f7ff fc77 	bl	8005fb0 <arith_encode>
	  m <<= 1;
 80066c2:	69bb      	ldr	r3, [r7, #24]
 80066c4:	005b      	lsls	r3, r3, #1
 80066c6:	61bb      	str	r3, [r7, #24]
	  st += 1;
 80066c8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80066ca:	3301      	adds	r3, #1
 80066cc:	62fb      	str	r3, [r7, #44]	@ 0x2c
	while (v2 >>= 1) {
 80066ce:	69fb      	ldr	r3, [r7, #28]
 80066d0:	105b      	asrs	r3, r3, #1
 80066d2:	61fb      	str	r3, [r7, #28]
 80066d4:	69fb      	ldr	r3, [r7, #28]
 80066d6:	2b00      	cmp	r3, #0
 80066d8:	d1ee      	bne.n	80066b8 <encode_mcu_AC_first+0x20e>
	}
      }
    }
    arith_encode(cinfo, st, 0);
 80066da:	2200      	movs	r2, #0
 80066dc:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 80066de:	6878      	ldr	r0, [r7, #4]
 80066e0:	f7ff fc66 	bl	8005fb0 <arith_encode>
    /* Figure F.9: Encoding the magnitude bit pattern of v */
    st += 14;
 80066e4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80066e6:	330e      	adds	r3, #14
 80066e8:	62fb      	str	r3, [r7, #44]	@ 0x2c
    while (m >>= 1)
 80066ea:	e00c      	b.n	8006706 <encode_mcu_AC_first+0x25c>
      arith_encode(cinfo, st, (m & v) ? 1 : 0);
 80066ec:	69ba      	ldr	r2, [r7, #24]
 80066ee:	6a3b      	ldr	r3, [r7, #32]
 80066f0:	4013      	ands	r3, r2
 80066f2:	2b00      	cmp	r3, #0
 80066f4:	bf14      	ite	ne
 80066f6:	2301      	movne	r3, #1
 80066f8:	2300      	moveq	r3, #0
 80066fa:	b2db      	uxtb	r3, r3
 80066fc:	461a      	mov	r2, r3
 80066fe:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8006700:	6878      	ldr	r0, [r7, #4]
 8006702:	f7ff fc55 	bl	8005fb0 <arith_encode>
    while (m >>= 1)
 8006706:	69bb      	ldr	r3, [r7, #24]
 8006708:	105b      	asrs	r3, r3, #1
 800670a:	61bb      	str	r3, [r7, #24]
 800670c:	69bb      	ldr	r3, [r7, #24]
 800670e:	2b00      	cmp	r3, #0
 8006710:	d1ec      	bne.n	80066ec <encode_mcu_AC_first+0x242>
  for (k = cinfo->Ss; k <= ke; k++) {
 8006712:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006714:	3301      	adds	r3, #1
 8006716:	62bb      	str	r3, [r7, #40]	@ 0x28
 8006718:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800671a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800671c:	429a      	cmp	r2, r3
 800671e:	f77f af33 	ble.w	8006588 <encode_mcu_AC_first+0xde>
  }
  /* Encode EOB decision only if k <= cinfo->Se */
  if (k <= cinfo->Se) {
 8006722:	687b      	ldr	r3, [r7, #4]
 8006724:	f8d3 316c 	ldr.w	r3, [r3, #364]	@ 0x16c
 8006728:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800672a:	429a      	cmp	r2, r3
 800672c:	dc11      	bgt.n	8006752 <encode_mcu_AC_first+0x2a8>
    st = entropy->ac_stats[tbl] + 3 * (k - 1);
 800672e:	697a      	ldr	r2, [r7, #20]
 8006730:	68bb      	ldr	r3, [r7, #8]
 8006732:	3322      	adds	r3, #34	@ 0x22
 8006734:	009b      	lsls	r3, r3, #2
 8006736:	4413      	add	r3, r2
 8006738:	6859      	ldr	r1, [r3, #4]
 800673a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800673c:	1e5a      	subs	r2, r3, #1
 800673e:	4613      	mov	r3, r2
 8006740:	005b      	lsls	r3, r3, #1
 8006742:	4413      	add	r3, r2
 8006744:	440b      	add	r3, r1
 8006746:	62fb      	str	r3, [r7, #44]	@ 0x2c
    arith_encode(cinfo, st, 1);
 8006748:	2201      	movs	r2, #1
 800674a:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800674c:	6878      	ldr	r0, [r7, #4]
 800674e:	f7ff fc2f 	bl	8005fb0 <arith_encode>
  }

  return TRUE;
 8006752:	2301      	movs	r3, #1
}
 8006754:	4618      	mov	r0, r3
 8006756:	3730      	adds	r7, #48	@ 0x30
 8006758:	46bd      	mov	sp, r7
 800675a:	bd80      	pop	{r7, pc}

0800675c <encode_mcu_DC_refine>:
 * MCU encoding for DC successive approximation refinement scan.
 */

METHODDEF(boolean)
encode_mcu_DC_refine (j_compress_ptr cinfo, JBLOCKROW *MCU_data)
{
 800675c:	b580      	push	{r7, lr}
 800675e:	b086      	sub	sp, #24
 8006760:	af00      	add	r7, sp, #0
 8006762:	6078      	str	r0, [r7, #4]
 8006764:	6039      	str	r1, [r7, #0]
  arith_entropy_ptr entropy = (arith_entropy_ptr) cinfo->entropy;
 8006766:	687b      	ldr	r3, [r7, #4]
 8006768:	f8d3 31a4 	ldr.w	r3, [r3, #420]	@ 0x1a4
 800676c:	613b      	str	r3, [r7, #16]
  unsigned char *st;
  int Al, blkn;

  /* Emit restart marker if needed */
  if (cinfo->restart_interval) {
 800676e:	687b      	ldr	r3, [r7, #4]
 8006770:	f8d3 30ec 	ldr.w	r3, [r3, #236]	@ 0xec
 8006774:	2b00      	cmp	r3, #0
 8006776:	d01e      	beq.n	80067b6 <encode_mcu_DC_refine+0x5a>
    if (entropy->restarts_to_go == 0) {
 8006778:	693b      	ldr	r3, [r7, #16]
 800677a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800677c:	2b00      	cmp	r3, #0
 800677e:	d115      	bne.n	80067ac <encode_mcu_DC_refine+0x50>
      emit_restart(cinfo, entropy->next_restart_num);
 8006780:	693b      	ldr	r3, [r7, #16]
 8006782:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8006784:	4619      	mov	r1, r3
 8006786:	6878      	ldr	r0, [r7, #4]
 8006788:	f7ff fcea 	bl	8006160 <emit_restart>
      entropy->restarts_to_go = cinfo->restart_interval;
 800678c:	687b      	ldr	r3, [r7, #4]
 800678e:	f8d3 20ec 	ldr.w	r2, [r3, #236]	@ 0xec
 8006792:	693b      	ldr	r3, [r7, #16]
 8006794:	645a      	str	r2, [r3, #68]	@ 0x44
      entropy->next_restart_num++;
 8006796:	693b      	ldr	r3, [r7, #16]
 8006798:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800679a:	1c5a      	adds	r2, r3, #1
 800679c:	693b      	ldr	r3, [r7, #16]
 800679e:	649a      	str	r2, [r3, #72]	@ 0x48
      entropy->next_restart_num &= 7;
 80067a0:	693b      	ldr	r3, [r7, #16]
 80067a2:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80067a4:	f003 0207 	and.w	r2, r3, #7
 80067a8:	693b      	ldr	r3, [r7, #16]
 80067aa:	649a      	str	r2, [r3, #72]	@ 0x48
    }
    entropy->restarts_to_go--;
 80067ac:	693b      	ldr	r3, [r7, #16]
 80067ae:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80067b0:	1e5a      	subs	r2, r3, #1
 80067b2:	693b      	ldr	r3, [r7, #16]
 80067b4:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  st = entropy->fixed_bin;	/* use fixed probability estimation */
 80067b6:	693b      	ldr	r3, [r7, #16]
 80067b8:	33cc      	adds	r3, #204	@ 0xcc
 80067ba:	60fb      	str	r3, [r7, #12]
  Al = cinfo->Al;
 80067bc:	687b      	ldr	r3, [r7, #4]
 80067be:	f8d3 3174 	ldr.w	r3, [r3, #372]	@ 0x174
 80067c2:	60bb      	str	r3, [r7, #8]

  /* Encode the MCU data blocks */
  for (blkn = 0; blkn < cinfo->blocks_in_MCU; blkn++) {
 80067c4:	2300      	movs	r3, #0
 80067c6:	617b      	str	r3, [r7, #20]
 80067c8:	e014      	b.n	80067f4 <encode_mcu_DC_refine+0x98>
    /* We simply emit the Al'th bit of the DC coefficient value. */
    arith_encode(cinfo, st, (MCU_data[blkn][0][0] >> Al) & 1);
 80067ca:	697b      	ldr	r3, [r7, #20]
 80067cc:	009b      	lsls	r3, r3, #2
 80067ce:	683a      	ldr	r2, [r7, #0]
 80067d0:	4413      	add	r3, r2
 80067d2:	681b      	ldr	r3, [r3, #0]
 80067d4:	f9b3 3000 	ldrsh.w	r3, [r3]
 80067d8:	461a      	mov	r2, r3
 80067da:	68bb      	ldr	r3, [r7, #8]
 80067dc:	fa42 f303 	asr.w	r3, r2, r3
 80067e0:	f003 0301 	and.w	r3, r3, #1
 80067e4:	461a      	mov	r2, r3
 80067e6:	68f9      	ldr	r1, [r7, #12]
 80067e8:	6878      	ldr	r0, [r7, #4]
 80067ea:	f7ff fbe1 	bl	8005fb0 <arith_encode>
  for (blkn = 0; blkn < cinfo->blocks_in_MCU; blkn++) {
 80067ee:	697b      	ldr	r3, [r7, #20]
 80067f0:	3301      	adds	r3, #1
 80067f2:	617b      	str	r3, [r7, #20]
 80067f4:	687b      	ldr	r3, [r7, #4]
 80067f6:	f8d3 313c 	ldr.w	r3, [r3, #316]	@ 0x13c
 80067fa:	697a      	ldr	r2, [r7, #20]
 80067fc:	429a      	cmp	r2, r3
 80067fe:	dbe4      	blt.n	80067ca <encode_mcu_DC_refine+0x6e>
  }

  return TRUE;
 8006800:	2301      	movs	r3, #1
}
 8006802:	4618      	mov	r0, r3
 8006804:	3718      	adds	r7, #24
 8006806:	46bd      	mov	sp, r7
 8006808:	bd80      	pop	{r7, pc}

0800680a <encode_mcu_AC_refine>:
 * MCU encoding for AC successive approximation refinement scan.
 */

METHODDEF(boolean)
encode_mcu_AC_refine (j_compress_ptr cinfo, JBLOCKROW *MCU_data)
{
 800680a:	b580      	push	{r7, lr}
 800680c:	b08c      	sub	sp, #48	@ 0x30
 800680e:	af00      	add	r7, sp, #0
 8006810:	6078      	str	r0, [r7, #4]
 8006812:	6039      	str	r1, [r7, #0]
  arith_entropy_ptr entropy = (arith_entropy_ptr) cinfo->entropy;
 8006814:	687b      	ldr	r3, [r7, #4]
 8006816:	f8d3 31a4 	ldr.w	r3, [r3, #420]	@ 0x1a4
 800681a:	61fb      	str	r3, [r7, #28]
  int tbl, k, ke, kex;
  int v;
  const int * natural_order;

  /* Emit restart marker if needed */
  if (cinfo->restart_interval) {
 800681c:	687b      	ldr	r3, [r7, #4]
 800681e:	f8d3 30ec 	ldr.w	r3, [r3, #236]	@ 0xec
 8006822:	2b00      	cmp	r3, #0
 8006824:	d01e      	beq.n	8006864 <encode_mcu_AC_refine+0x5a>
    if (entropy->restarts_to_go == 0) {
 8006826:	69fb      	ldr	r3, [r7, #28]
 8006828:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800682a:	2b00      	cmp	r3, #0
 800682c:	d115      	bne.n	800685a <encode_mcu_AC_refine+0x50>
      emit_restart(cinfo, entropy->next_restart_num);
 800682e:	69fb      	ldr	r3, [r7, #28]
 8006830:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8006832:	4619      	mov	r1, r3
 8006834:	6878      	ldr	r0, [r7, #4]
 8006836:	f7ff fc93 	bl	8006160 <emit_restart>
      entropy->restarts_to_go = cinfo->restart_interval;
 800683a:	687b      	ldr	r3, [r7, #4]
 800683c:	f8d3 20ec 	ldr.w	r2, [r3, #236]	@ 0xec
 8006840:	69fb      	ldr	r3, [r7, #28]
 8006842:	645a      	str	r2, [r3, #68]	@ 0x44
      entropy->next_restart_num++;
 8006844:	69fb      	ldr	r3, [r7, #28]
 8006846:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8006848:	1c5a      	adds	r2, r3, #1
 800684a:	69fb      	ldr	r3, [r7, #28]
 800684c:	649a      	str	r2, [r3, #72]	@ 0x48
      entropy->next_restart_num &= 7;
 800684e:	69fb      	ldr	r3, [r7, #28]
 8006850:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8006852:	f003 0207 	and.w	r2, r3, #7
 8006856:	69fb      	ldr	r3, [r7, #28]
 8006858:	649a      	str	r2, [r3, #72]	@ 0x48
    }
    entropy->restarts_to_go--;
 800685a:	69fb      	ldr	r3, [r7, #28]
 800685c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800685e:	1e5a      	subs	r2, r3, #1
 8006860:	69fb      	ldr	r3, [r7, #28]
 8006862:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  natural_order = cinfo->natural_order;
 8006864:	687b      	ldr	r3, [r7, #4]
 8006866:	f8d3 317c 	ldr.w	r3, [r3, #380]	@ 0x17c
 800686a:	61bb      	str	r3, [r7, #24]

  /* Encode the MCU data block */
  block = MCU_data[0];
 800686c:	683b      	ldr	r3, [r7, #0]
 800686e:	681b      	ldr	r3, [r3, #0]
 8006870:	617b      	str	r3, [r7, #20]
  tbl = cinfo->cur_comp_info[0]->ac_tbl_no;
 8006872:	687b      	ldr	r3, [r7, #4]
 8006874:	f8d3 3124 	ldr.w	r3, [r3, #292]	@ 0x124
 8006878:	699b      	ldr	r3, [r3, #24]
 800687a:	613b      	str	r3, [r7, #16]

  /* Section G.1.3.3: Encoding of AC coefficients */

  /* Establish EOB (end-of-block) index */
  for (ke = cinfo->Se; ke > 0; ke--)
 800687c:	687b      	ldr	r3, [r7, #4]
 800687e:	f8d3 316c 	ldr.w	r3, [r3, #364]	@ 0x16c
 8006882:	627b      	str	r3, [r7, #36]	@ 0x24
 8006884:	e026      	b.n	80068d4 <encode_mcu_AC_refine+0xca>
    /* We must apply the point transform by Al.  For AC coefficients this
     * is an integer division with rounding towards 0.  To do this portably
     * in C, we shift after obtaining the absolute value.
     */
    if ((v = (*block)[natural_order[ke]]) >= 0) {
 8006886:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006888:	009b      	lsls	r3, r3, #2
 800688a:	69ba      	ldr	r2, [r7, #24]
 800688c:	4413      	add	r3, r2
 800688e:	681a      	ldr	r2, [r3, #0]
 8006890:	697b      	ldr	r3, [r7, #20]
 8006892:	f933 3012 	ldrsh.w	r3, [r3, r2, lsl #1]
 8006896:	60fb      	str	r3, [r7, #12]
 8006898:	68fb      	ldr	r3, [r7, #12]
 800689a:	2b00      	cmp	r3, #0
 800689c:	db0a      	blt.n	80068b4 <encode_mcu_AC_refine+0xaa>
      if (v >>= cinfo->Al) break;
 800689e:	687b      	ldr	r3, [r7, #4]
 80068a0:	f8d3 3174 	ldr.w	r3, [r3, #372]	@ 0x174
 80068a4:	68fa      	ldr	r2, [r7, #12]
 80068a6:	fa42 f303 	asr.w	r3, r2, r3
 80068aa:	60fb      	str	r3, [r7, #12]
 80068ac:	68fb      	ldr	r3, [r7, #12]
 80068ae:	2b00      	cmp	r3, #0
 80068b0:	d00d      	beq.n	80068ce <encode_mcu_AC_refine+0xc4>
 80068b2:	e014      	b.n	80068de <encode_mcu_AC_refine+0xd4>
    } else {
      v = -v;
 80068b4:	68fb      	ldr	r3, [r7, #12]
 80068b6:	425b      	negs	r3, r3
 80068b8:	60fb      	str	r3, [r7, #12]
      if (v >>= cinfo->Al) break;
 80068ba:	687b      	ldr	r3, [r7, #4]
 80068bc:	f8d3 3174 	ldr.w	r3, [r3, #372]	@ 0x174
 80068c0:	68fa      	ldr	r2, [r7, #12]
 80068c2:	fa42 f303 	asr.w	r3, r2, r3
 80068c6:	60fb      	str	r3, [r7, #12]
 80068c8:	68fb      	ldr	r3, [r7, #12]
 80068ca:	2b00      	cmp	r3, #0
 80068cc:	d106      	bne.n	80068dc <encode_mcu_AC_refine+0xd2>
  for (ke = cinfo->Se; ke > 0; ke--)
 80068ce:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80068d0:	3b01      	subs	r3, #1
 80068d2:	627b      	str	r3, [r7, #36]	@ 0x24
 80068d4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80068d6:	2b00      	cmp	r3, #0
 80068d8:	dcd5      	bgt.n	8006886 <encode_mcu_AC_refine+0x7c>
 80068da:	e000      	b.n	80068de <encode_mcu_AC_refine+0xd4>
      if (v >>= cinfo->Al) break;
 80068dc:	bf00      	nop
    }

  /* Establish EOBx (previous stage end-of-block) index */
  for (kex = ke; kex > 0; kex--)
 80068de:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80068e0:	623b      	str	r3, [r7, #32]
 80068e2:	e026      	b.n	8006932 <encode_mcu_AC_refine+0x128>
    if ((v = (*block)[natural_order[kex]]) >= 0) {
 80068e4:	6a3b      	ldr	r3, [r7, #32]
 80068e6:	009b      	lsls	r3, r3, #2
 80068e8:	69ba      	ldr	r2, [r7, #24]
 80068ea:	4413      	add	r3, r2
 80068ec:	681a      	ldr	r2, [r3, #0]
 80068ee:	697b      	ldr	r3, [r7, #20]
 80068f0:	f933 3012 	ldrsh.w	r3, [r3, r2, lsl #1]
 80068f4:	60fb      	str	r3, [r7, #12]
 80068f6:	68fb      	ldr	r3, [r7, #12]
 80068f8:	2b00      	cmp	r3, #0
 80068fa:	db0a      	blt.n	8006912 <encode_mcu_AC_refine+0x108>
      if (v >>= cinfo->Ah) break;
 80068fc:	687b      	ldr	r3, [r7, #4]
 80068fe:	f8d3 3170 	ldr.w	r3, [r3, #368]	@ 0x170
 8006902:	68fa      	ldr	r2, [r7, #12]
 8006904:	fa42 f303 	asr.w	r3, r2, r3
 8006908:	60fb      	str	r3, [r7, #12]
 800690a:	68fb      	ldr	r3, [r7, #12]
 800690c:	2b00      	cmp	r3, #0
 800690e:	d00d      	beq.n	800692c <encode_mcu_AC_refine+0x122>
 8006910:	e014      	b.n	800693c <encode_mcu_AC_refine+0x132>
    } else {
      v = -v;
 8006912:	68fb      	ldr	r3, [r7, #12]
 8006914:	425b      	negs	r3, r3
 8006916:	60fb      	str	r3, [r7, #12]
      if (v >>= cinfo->Ah) break;
 8006918:	687b      	ldr	r3, [r7, #4]
 800691a:	f8d3 3170 	ldr.w	r3, [r3, #368]	@ 0x170
 800691e:	68fa      	ldr	r2, [r7, #12]
 8006920:	fa42 f303 	asr.w	r3, r2, r3
 8006924:	60fb      	str	r3, [r7, #12]
 8006926:	68fb      	ldr	r3, [r7, #12]
 8006928:	2b00      	cmp	r3, #0
 800692a:	d106      	bne.n	800693a <encode_mcu_AC_refine+0x130>
  for (kex = ke; kex > 0; kex--)
 800692c:	6a3b      	ldr	r3, [r7, #32]
 800692e:	3b01      	subs	r3, #1
 8006930:	623b      	str	r3, [r7, #32]
 8006932:	6a3b      	ldr	r3, [r7, #32]
 8006934:	2b00      	cmp	r3, #0
 8006936:	dcd5      	bgt.n	80068e4 <encode_mcu_AC_refine+0xda>
 8006938:	e000      	b.n	800693c <encode_mcu_AC_refine+0x132>
      if (v >>= cinfo->Ah) break;
 800693a:	bf00      	nop
    }

  /* Figure G.10: Encode_AC_Coefficients_SA */
  for (k = cinfo->Ss; k <= ke; k++) {
 800693c:	687b      	ldr	r3, [r7, #4]
 800693e:	f8d3 3168 	ldr.w	r3, [r3, #360]	@ 0x168
 8006942:	62bb      	str	r3, [r7, #40]	@ 0x28
 8006944:	e083      	b.n	8006a4e <encode_mcu_AC_refine+0x244>
    st = entropy->ac_stats[tbl] + 3 * (k - 1);
 8006946:	69fa      	ldr	r2, [r7, #28]
 8006948:	693b      	ldr	r3, [r7, #16]
 800694a:	3322      	adds	r3, #34	@ 0x22
 800694c:	009b      	lsls	r3, r3, #2
 800694e:	4413      	add	r3, r2
 8006950:	6859      	ldr	r1, [r3, #4]
 8006952:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006954:	1e5a      	subs	r2, r3, #1
 8006956:	4613      	mov	r3, r2
 8006958:	005b      	lsls	r3, r3, #1
 800695a:	4413      	add	r3, r2
 800695c:	440b      	add	r3, r1
 800695e:	62fb      	str	r3, [r7, #44]	@ 0x2c
    if (k > kex)
 8006960:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8006962:	6a3b      	ldr	r3, [r7, #32]
 8006964:	429a      	cmp	r2, r3
 8006966:	dd04      	ble.n	8006972 <encode_mcu_AC_refine+0x168>
      arith_encode(cinfo, st, 0);	/* EOB decision */
 8006968:	2200      	movs	r2, #0
 800696a:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800696c:	6878      	ldr	r0, [r7, #4]
 800696e:	f7ff fb1f 	bl	8005fb0 <arith_encode>
    for (;;) {
      if ((v = (*block)[natural_order[k]]) >= 0) {
 8006972:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006974:	009b      	lsls	r3, r3, #2
 8006976:	69ba      	ldr	r2, [r7, #24]
 8006978:	4413      	add	r3, r2
 800697a:	681a      	ldr	r2, [r3, #0]
 800697c:	697b      	ldr	r3, [r7, #20]
 800697e:	f933 3012 	ldrsh.w	r3, [r3, r2, lsl #1]
 8006982:	60fb      	str	r3, [r7, #12]
 8006984:	68fb      	ldr	r3, [r7, #12]
 8006986:	2b00      	cmp	r3, #0
 8006988:	db26      	blt.n	80069d8 <encode_mcu_AC_refine+0x1ce>
	if (v >>= cinfo->Al) {
 800698a:	687b      	ldr	r3, [r7, #4]
 800698c:	f8d3 3174 	ldr.w	r3, [r3, #372]	@ 0x174
 8006990:	68fa      	ldr	r2, [r7, #12]
 8006992:	fa42 f303 	asr.w	r3, r2, r3
 8006996:	60fb      	str	r3, [r7, #12]
 8006998:	68fb      	ldr	r3, [r7, #12]
 800699a:	2b00      	cmp	r3, #0
 800699c:	d046      	beq.n	8006a2c <encode_mcu_AC_refine+0x222>
	  if (v >> 1)			/* previously nonzero coef */
 800699e:	68fb      	ldr	r3, [r7, #12]
 80069a0:	105b      	asrs	r3, r3, #1
 80069a2:	2b00      	cmp	r3, #0
 80069a4:	d009      	beq.n	80069ba <encode_mcu_AC_refine+0x1b0>
	    arith_encode(cinfo, st + 2, (v & 1));
 80069a6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80069a8:	1c99      	adds	r1, r3, #2
 80069aa:	68fb      	ldr	r3, [r7, #12]
 80069ac:	f003 0301 	and.w	r3, r3, #1
 80069b0:	461a      	mov	r2, r3
 80069b2:	6878      	ldr	r0, [r7, #4]
 80069b4:	f7ff fafc 	bl	8005fb0 <arith_encode>
	  else {			/* newly nonzero coef */
	    arith_encode(cinfo, st + 1, 1);
	    arith_encode(cinfo, entropy->fixed_bin, 0);
	  }
	  break;
 80069b8:	e046      	b.n	8006a48 <encode_mcu_AC_refine+0x23e>
	    arith_encode(cinfo, st + 1, 1);
 80069ba:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80069bc:	3301      	adds	r3, #1
 80069be:	2201      	movs	r2, #1
 80069c0:	4619      	mov	r1, r3
 80069c2:	6878      	ldr	r0, [r7, #4]
 80069c4:	f7ff faf4 	bl	8005fb0 <arith_encode>
	    arith_encode(cinfo, entropy->fixed_bin, 0);
 80069c8:	69fb      	ldr	r3, [r7, #28]
 80069ca:	33cc      	adds	r3, #204	@ 0xcc
 80069cc:	2200      	movs	r2, #0
 80069ce:	4619      	mov	r1, r3
 80069d0:	6878      	ldr	r0, [r7, #4]
 80069d2:	f7ff faed 	bl	8005fb0 <arith_encode>
	  break;
 80069d6:	e037      	b.n	8006a48 <encode_mcu_AC_refine+0x23e>
	}
      } else {
	v = -v;
 80069d8:	68fb      	ldr	r3, [r7, #12]
 80069da:	425b      	negs	r3, r3
 80069dc:	60fb      	str	r3, [r7, #12]
	if (v >>= cinfo->Al) {
 80069de:	687b      	ldr	r3, [r7, #4]
 80069e0:	f8d3 3174 	ldr.w	r3, [r3, #372]	@ 0x174
 80069e4:	68fa      	ldr	r2, [r7, #12]
 80069e6:	fa42 f303 	asr.w	r3, r2, r3
 80069ea:	60fb      	str	r3, [r7, #12]
 80069ec:	68fb      	ldr	r3, [r7, #12]
 80069ee:	2b00      	cmp	r3, #0
 80069f0:	d01c      	beq.n	8006a2c <encode_mcu_AC_refine+0x222>
	  if (v >> 1)			/* previously nonzero coef */
 80069f2:	68fb      	ldr	r3, [r7, #12]
 80069f4:	105b      	asrs	r3, r3, #1
 80069f6:	2b00      	cmp	r3, #0
 80069f8:	d009      	beq.n	8006a0e <encode_mcu_AC_refine+0x204>
	    arith_encode(cinfo, st + 2, (v & 1));
 80069fa:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80069fc:	1c99      	adds	r1, r3, #2
 80069fe:	68fb      	ldr	r3, [r7, #12]
 8006a00:	f003 0301 	and.w	r3, r3, #1
 8006a04:	461a      	mov	r2, r3
 8006a06:	6878      	ldr	r0, [r7, #4]
 8006a08:	f7ff fad2 	bl	8005fb0 <arith_encode>
	  else {			/* newly nonzero coef */
	    arith_encode(cinfo, st + 1, 1);
	    arith_encode(cinfo, entropy->fixed_bin, 1);
	  }
	  break;
 8006a0c:	e01c      	b.n	8006a48 <encode_mcu_AC_refine+0x23e>
	    arith_encode(cinfo, st + 1, 1);
 8006a0e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006a10:	3301      	adds	r3, #1
 8006a12:	2201      	movs	r2, #1
 8006a14:	4619      	mov	r1, r3
 8006a16:	6878      	ldr	r0, [r7, #4]
 8006a18:	f7ff faca 	bl	8005fb0 <arith_encode>
	    arith_encode(cinfo, entropy->fixed_bin, 1);
 8006a1c:	69fb      	ldr	r3, [r7, #28]
 8006a1e:	33cc      	adds	r3, #204	@ 0xcc
 8006a20:	2201      	movs	r2, #1
 8006a22:	4619      	mov	r1, r3
 8006a24:	6878      	ldr	r0, [r7, #4]
 8006a26:	f7ff fac3 	bl	8005fb0 <arith_encode>
	  break;
 8006a2a:	e00d      	b.n	8006a48 <encode_mcu_AC_refine+0x23e>
	}
      }
      arith_encode(cinfo, st + 1, 0); st += 3; k++;
 8006a2c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006a2e:	3301      	adds	r3, #1
 8006a30:	2200      	movs	r2, #0
 8006a32:	4619      	mov	r1, r3
 8006a34:	6878      	ldr	r0, [r7, #4]
 8006a36:	f7ff fabb 	bl	8005fb0 <arith_encode>
 8006a3a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006a3c:	3303      	adds	r3, #3
 8006a3e:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8006a40:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006a42:	3301      	adds	r3, #1
 8006a44:	62bb      	str	r3, [r7, #40]	@ 0x28
      if ((v = (*block)[natural_order[k]]) >= 0) {
 8006a46:	e794      	b.n	8006972 <encode_mcu_AC_refine+0x168>
  for (k = cinfo->Ss; k <= ke; k++) {
 8006a48:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006a4a:	3301      	adds	r3, #1
 8006a4c:	62bb      	str	r3, [r7, #40]	@ 0x28
 8006a4e:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8006a50:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006a52:	429a      	cmp	r2, r3
 8006a54:	f77f af77 	ble.w	8006946 <encode_mcu_AC_refine+0x13c>
    }
  }
  /* Encode EOB decision only if k <= cinfo->Se */
  if (k <= cinfo->Se) {
 8006a58:	687b      	ldr	r3, [r7, #4]
 8006a5a:	f8d3 316c 	ldr.w	r3, [r3, #364]	@ 0x16c
 8006a5e:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8006a60:	429a      	cmp	r2, r3
 8006a62:	dc11      	bgt.n	8006a88 <encode_mcu_AC_refine+0x27e>
    st = entropy->ac_stats[tbl] + 3 * (k - 1);
 8006a64:	69fa      	ldr	r2, [r7, #28]
 8006a66:	693b      	ldr	r3, [r7, #16]
 8006a68:	3322      	adds	r3, #34	@ 0x22
 8006a6a:	009b      	lsls	r3, r3, #2
 8006a6c:	4413      	add	r3, r2
 8006a6e:	6859      	ldr	r1, [r3, #4]
 8006a70:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006a72:	1e5a      	subs	r2, r3, #1
 8006a74:	4613      	mov	r3, r2
 8006a76:	005b      	lsls	r3, r3, #1
 8006a78:	4413      	add	r3, r2
 8006a7a:	440b      	add	r3, r1
 8006a7c:	62fb      	str	r3, [r7, #44]	@ 0x2c
    arith_encode(cinfo, st, 1);
 8006a7e:	2201      	movs	r2, #1
 8006a80:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8006a82:	6878      	ldr	r0, [r7, #4]
 8006a84:	f7ff fa94 	bl	8005fb0 <arith_encode>
  }

  return TRUE;
 8006a88:	2301      	movs	r3, #1
}
 8006a8a:	4618      	mov	r0, r3
 8006a8c:	3730      	adds	r7, #48	@ 0x30
 8006a8e:	46bd      	mov	sp, r7
 8006a90:	bd80      	pop	{r7, pc}

08006a92 <encode_mcu>:
 * Encode and output one MCU's worth of arithmetic-compressed coefficients.
 */

METHODDEF(boolean)
encode_mcu (j_compress_ptr cinfo, JBLOCKROW *MCU_data)
{
 8006a92:	b580      	push	{r7, lr}
 8006a94:	b090      	sub	sp, #64	@ 0x40
 8006a96:	af00      	add	r7, sp, #0
 8006a98:	6078      	str	r0, [r7, #4]
 8006a9a:	6039      	str	r1, [r7, #0]
  arith_entropy_ptr entropy = (arith_entropy_ptr) cinfo->entropy;
 8006a9c:	687b      	ldr	r3, [r7, #4]
 8006a9e:	f8d3 31a4 	ldr.w	r3, [r3, #420]	@ 0x1a4
 8006aa2:	623b      	str	r3, [r7, #32]
  int blkn, ci, tbl, k, ke;
  int v, v2, m;
  const int * natural_order;

  /* Emit restart marker if needed */
  if (cinfo->restart_interval) {
 8006aa4:	687b      	ldr	r3, [r7, #4]
 8006aa6:	f8d3 30ec 	ldr.w	r3, [r3, #236]	@ 0xec
 8006aaa:	2b00      	cmp	r3, #0
 8006aac:	d01e      	beq.n	8006aec <encode_mcu+0x5a>
    if (entropy->restarts_to_go == 0) {
 8006aae:	6a3b      	ldr	r3, [r7, #32]
 8006ab0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006ab2:	2b00      	cmp	r3, #0
 8006ab4:	d115      	bne.n	8006ae2 <encode_mcu+0x50>
      emit_restart(cinfo, entropy->next_restart_num);
 8006ab6:	6a3b      	ldr	r3, [r7, #32]
 8006ab8:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8006aba:	4619      	mov	r1, r3
 8006abc:	6878      	ldr	r0, [r7, #4]
 8006abe:	f7ff fb4f 	bl	8006160 <emit_restart>
      entropy->restarts_to_go = cinfo->restart_interval;
 8006ac2:	687b      	ldr	r3, [r7, #4]
 8006ac4:	f8d3 20ec 	ldr.w	r2, [r3, #236]	@ 0xec
 8006ac8:	6a3b      	ldr	r3, [r7, #32]
 8006aca:	645a      	str	r2, [r3, #68]	@ 0x44
      entropy->next_restart_num++;
 8006acc:	6a3b      	ldr	r3, [r7, #32]
 8006ace:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8006ad0:	1c5a      	adds	r2, r3, #1
 8006ad2:	6a3b      	ldr	r3, [r7, #32]
 8006ad4:	649a      	str	r2, [r3, #72]	@ 0x48
      entropy->next_restart_num &= 7;
 8006ad6:	6a3b      	ldr	r3, [r7, #32]
 8006ad8:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8006ada:	f003 0207 	and.w	r2, r3, #7
 8006ade:	6a3b      	ldr	r3, [r7, #32]
 8006ae0:	649a      	str	r2, [r3, #72]	@ 0x48
    }
    entropy->restarts_to_go--;
 8006ae2:	6a3b      	ldr	r3, [r7, #32]
 8006ae4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006ae6:	1e5a      	subs	r2, r3, #1
 8006ae8:	6a3b      	ldr	r3, [r7, #32]
 8006aea:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  natural_order = cinfo->natural_order;
 8006aec:	687b      	ldr	r3, [r7, #4]
 8006aee:	f8d3 317c 	ldr.w	r3, [r3, #380]	@ 0x17c
 8006af2:	61fb      	str	r3, [r7, #28]

  /* Encode the MCU data blocks */
  for (blkn = 0; blkn < cinfo->blocks_in_MCU; blkn++) {
 8006af4:	2300      	movs	r3, #0
 8006af6:	63bb      	str	r3, [r7, #56]	@ 0x38
 8006af8:	e1d8      	b.n	8006eac <encode_mcu+0x41a>
    block = MCU_data[blkn];
 8006afa:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006afc:	009b      	lsls	r3, r3, #2
 8006afe:	683a      	ldr	r2, [r7, #0]
 8006b00:	4413      	add	r3, r2
 8006b02:	681b      	ldr	r3, [r3, #0]
 8006b04:	61bb      	str	r3, [r7, #24]
    ci = cinfo->MCU_membership[blkn];
 8006b06:	687b      	ldr	r3, [r7, #4]
 8006b08:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8006b0a:	3250      	adds	r2, #80	@ 0x50
 8006b0c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006b10:	617b      	str	r3, [r7, #20]
    compptr = cinfo->cur_comp_info[ci];
 8006b12:	687a      	ldr	r2, [r7, #4]
 8006b14:	697b      	ldr	r3, [r7, #20]
 8006b16:	3348      	adds	r3, #72	@ 0x48
 8006b18:	009b      	lsls	r3, r3, #2
 8006b1a:	4413      	add	r3, r2
 8006b1c:	685b      	ldr	r3, [r3, #4]
 8006b1e:	613b      	str	r3, [r7, #16]

    /* Sections F.1.4.1 & F.1.4.4.1: Encoding of DC coefficients */

    tbl = compptr->dc_tbl_no;
 8006b20:	693b      	ldr	r3, [r7, #16]
 8006b22:	695b      	ldr	r3, [r3, #20]
 8006b24:	60fb      	str	r3, [r7, #12]

    /* Table F.4: Point to statistics bin S0 for DC coefficient coding */
    st = entropy->dc_stats[tbl] + entropy->dc_context[ci];
 8006b26:	6a3a      	ldr	r2, [r7, #32]
 8006b28:	68fb      	ldr	r3, [r7, #12]
 8006b2a:	3312      	adds	r3, #18
 8006b2c:	009b      	lsls	r3, r3, #2
 8006b2e:	4413      	add	r3, r2
 8006b30:	685a      	ldr	r2, [r3, #4]
 8006b32:	6a39      	ldr	r1, [r7, #32]
 8006b34:	697b      	ldr	r3, [r7, #20]
 8006b36:	330c      	adds	r3, #12
 8006b38:	009b      	lsls	r3, r3, #2
 8006b3a:	440b      	add	r3, r1
 8006b3c:	685b      	ldr	r3, [r3, #4]
 8006b3e:	4413      	add	r3, r2
 8006b40:	63fb      	str	r3, [r7, #60]	@ 0x3c

    /* Figure F.4: Encode_DC_DIFF */
    if ((v = (*block)[0] - entropy->last_dc_val[ci]) == 0) {
 8006b42:	69bb      	ldr	r3, [r7, #24]
 8006b44:	f9b3 3000 	ldrsh.w	r3, [r3]
 8006b48:	4619      	mov	r1, r3
 8006b4a:	6a3a      	ldr	r2, [r7, #32]
 8006b4c:	697b      	ldr	r3, [r7, #20]
 8006b4e:	3308      	adds	r3, #8
 8006b50:	009b      	lsls	r3, r3, #2
 8006b52:	4413      	add	r3, r2
 8006b54:	685b      	ldr	r3, [r3, #4]
 8006b56:	1acb      	subs	r3, r1, r3
 8006b58:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8006b5a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006b5c:	2b00      	cmp	r3, #0
 8006b5e:	d10c      	bne.n	8006b7a <encode_mcu+0xe8>
      arith_encode(cinfo, st, 0);
 8006b60:	2200      	movs	r2, #0
 8006b62:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8006b64:	6878      	ldr	r0, [r7, #4]
 8006b66:	f7ff fa23 	bl	8005fb0 <arith_encode>
      entropy->dc_context[ci] = 0;	/* zero diff category */
 8006b6a:	6a3a      	ldr	r2, [r7, #32]
 8006b6c:	697b      	ldr	r3, [r7, #20]
 8006b6e:	330c      	adds	r3, #12
 8006b70:	009b      	lsls	r3, r3, #2
 8006b72:	4413      	add	r3, r2
 8006b74:	2200      	movs	r2, #0
 8006b76:	605a      	str	r2, [r3, #4]
 8006b78:	e0ac      	b.n	8006cd4 <encode_mcu+0x242>
    } else {
      entropy->last_dc_val[ci] = (*block)[0];
 8006b7a:	69bb      	ldr	r3, [r7, #24]
 8006b7c:	f9b3 3000 	ldrsh.w	r3, [r3]
 8006b80:	4619      	mov	r1, r3
 8006b82:	6a3a      	ldr	r2, [r7, #32]
 8006b84:	697b      	ldr	r3, [r7, #20]
 8006b86:	3308      	adds	r3, #8
 8006b88:	009b      	lsls	r3, r3, #2
 8006b8a:	4413      	add	r3, r2
 8006b8c:	6059      	str	r1, [r3, #4]
      arith_encode(cinfo, st, 1);
 8006b8e:	2201      	movs	r2, #1
 8006b90:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8006b92:	6878      	ldr	r0, [r7, #4]
 8006b94:	f7ff fa0c 	bl	8005fb0 <arith_encode>
      /* Figure F.6: Encoding nonzero value v */
      /* Figure F.7: Encoding the sign of v */
      if (v > 0) {
 8006b98:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006b9a:	2b00      	cmp	r3, #0
 8006b9c:	dd11      	ble.n	8006bc2 <encode_mcu+0x130>
	arith_encode(cinfo, st + 1, 0);	/* Table F.4: SS = S0 + 1 */
 8006b9e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8006ba0:	3301      	adds	r3, #1
 8006ba2:	2200      	movs	r2, #0
 8006ba4:	4619      	mov	r1, r3
 8006ba6:	6878      	ldr	r0, [r7, #4]
 8006ba8:	f7ff fa02 	bl	8005fb0 <arith_encode>
	st += 2;			/* Table F.4: SP = S0 + 2 */
 8006bac:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8006bae:	3302      	adds	r3, #2
 8006bb0:	63fb      	str	r3, [r7, #60]	@ 0x3c
	entropy->dc_context[ci] = 4;	/* small positive diff category */
 8006bb2:	6a3a      	ldr	r2, [r7, #32]
 8006bb4:	697b      	ldr	r3, [r7, #20]
 8006bb6:	330c      	adds	r3, #12
 8006bb8:	009b      	lsls	r3, r3, #2
 8006bba:	4413      	add	r3, r2
 8006bbc:	2204      	movs	r2, #4
 8006bbe:	605a      	str	r2, [r3, #4]
 8006bc0:	e013      	b.n	8006bea <encode_mcu+0x158>
      } else {
	v = -v;
 8006bc2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006bc4:	425b      	negs	r3, r3
 8006bc6:	62fb      	str	r3, [r7, #44]	@ 0x2c
	arith_encode(cinfo, st + 1, 1);	/* Table F.4: SS = S0 + 1 */
 8006bc8:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8006bca:	3301      	adds	r3, #1
 8006bcc:	2201      	movs	r2, #1
 8006bce:	4619      	mov	r1, r3
 8006bd0:	6878      	ldr	r0, [r7, #4]
 8006bd2:	f7ff f9ed 	bl	8005fb0 <arith_encode>
	st += 3;			/* Table F.4: SN = S0 + 3 */
 8006bd6:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8006bd8:	3303      	adds	r3, #3
 8006bda:	63fb      	str	r3, [r7, #60]	@ 0x3c
	entropy->dc_context[ci] = 8;	/* small negative diff category */
 8006bdc:	6a3a      	ldr	r2, [r7, #32]
 8006bde:	697b      	ldr	r3, [r7, #20]
 8006be0:	330c      	adds	r3, #12
 8006be2:	009b      	lsls	r3, r3, #2
 8006be4:	4413      	add	r3, r2
 8006be6:	2208      	movs	r2, #8
 8006be8:	605a      	str	r2, [r3, #4]
      }
      /* Figure F.8: Encoding the magnitude category of v */
      m = 0;
 8006bea:	2300      	movs	r3, #0
 8006bec:	627b      	str	r3, [r7, #36]	@ 0x24
      if (v -= 1) {
 8006bee:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006bf0:	3b01      	subs	r3, #1
 8006bf2:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8006bf4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006bf6:	2b00      	cmp	r3, #0
 8006bf8:	d022      	beq.n	8006c40 <encode_mcu+0x1ae>
	arith_encode(cinfo, st, 1);
 8006bfa:	2201      	movs	r2, #1
 8006bfc:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8006bfe:	6878      	ldr	r0, [r7, #4]
 8006c00:	f7ff f9d6 	bl	8005fb0 <arith_encode>
	m = 1;
 8006c04:	2301      	movs	r3, #1
 8006c06:	627b      	str	r3, [r7, #36]	@ 0x24
	v2 = v;
 8006c08:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006c0a:	62bb      	str	r3, [r7, #40]	@ 0x28
	st = entropy->dc_stats[tbl] + 20; /* Table F.4: X1 = 20 */
 8006c0c:	6a3a      	ldr	r2, [r7, #32]
 8006c0e:	68fb      	ldr	r3, [r7, #12]
 8006c10:	3312      	adds	r3, #18
 8006c12:	009b      	lsls	r3, r3, #2
 8006c14:	4413      	add	r3, r2
 8006c16:	685b      	ldr	r3, [r3, #4]
 8006c18:	3314      	adds	r3, #20
 8006c1a:	63fb      	str	r3, [r7, #60]	@ 0x3c
	while (v2 >>= 1) {
 8006c1c:	e00a      	b.n	8006c34 <encode_mcu+0x1a2>
	  arith_encode(cinfo, st, 1);
 8006c1e:	2201      	movs	r2, #1
 8006c20:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8006c22:	6878      	ldr	r0, [r7, #4]
 8006c24:	f7ff f9c4 	bl	8005fb0 <arith_encode>
	  m <<= 1;
 8006c28:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006c2a:	005b      	lsls	r3, r3, #1
 8006c2c:	627b      	str	r3, [r7, #36]	@ 0x24
	  st += 1;
 8006c2e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8006c30:	3301      	adds	r3, #1
 8006c32:	63fb      	str	r3, [r7, #60]	@ 0x3c
	while (v2 >>= 1) {
 8006c34:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006c36:	105b      	asrs	r3, r3, #1
 8006c38:	62bb      	str	r3, [r7, #40]	@ 0x28
 8006c3a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006c3c:	2b00      	cmp	r3, #0
 8006c3e:	d1ee      	bne.n	8006c1e <encode_mcu+0x18c>
	}
      }
      arith_encode(cinfo, st, 0);
 8006c40:	2200      	movs	r2, #0
 8006c42:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8006c44:	6878      	ldr	r0, [r7, #4]
 8006c46:	f7ff f9b3 	bl	8005fb0 <arith_encode>
      /* Section F.1.4.4.1.2: Establish dc_context conditioning category */
      if (m < (int) ((1L << cinfo->arith_dc_L[tbl]) >> 1))
 8006c4a:	687a      	ldr	r2, [r7, #4]
 8006c4c:	68fb      	ldr	r3, [r7, #12]
 8006c4e:	4413      	add	r3, r2
 8006c50:	3398      	adds	r3, #152	@ 0x98
 8006c52:	781b      	ldrb	r3, [r3, #0]
 8006c54:	461a      	mov	r2, r3
 8006c56:	2301      	movs	r3, #1
 8006c58:	4093      	lsls	r3, r2
 8006c5a:	105b      	asrs	r3, r3, #1
 8006c5c:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8006c5e:	429a      	cmp	r2, r3
 8006c60:	da07      	bge.n	8006c72 <encode_mcu+0x1e0>
	entropy->dc_context[ci] = 0;	/* zero diff category */
 8006c62:	6a3a      	ldr	r2, [r7, #32]
 8006c64:	697b      	ldr	r3, [r7, #20]
 8006c66:	330c      	adds	r3, #12
 8006c68:	009b      	lsls	r3, r3, #2
 8006c6a:	4413      	add	r3, r2
 8006c6c:	2200      	movs	r2, #0
 8006c6e:	605a      	str	r2, [r3, #4]
 8006c70:	e019      	b.n	8006ca6 <encode_mcu+0x214>
      else if (m > (int) ((1L << cinfo->arith_dc_U[tbl]) >> 1))
 8006c72:	687a      	ldr	r2, [r7, #4]
 8006c74:	68fb      	ldr	r3, [r7, #12]
 8006c76:	4413      	add	r3, r2
 8006c78:	33a8      	adds	r3, #168	@ 0xa8
 8006c7a:	781b      	ldrb	r3, [r3, #0]
 8006c7c:	461a      	mov	r2, r3
 8006c7e:	2301      	movs	r3, #1
 8006c80:	4093      	lsls	r3, r2
 8006c82:	105b      	asrs	r3, r3, #1
 8006c84:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8006c86:	429a      	cmp	r2, r3
 8006c88:	dd0d      	ble.n	8006ca6 <encode_mcu+0x214>
	entropy->dc_context[ci] += 8;	/* large diff category */
 8006c8a:	6a3a      	ldr	r2, [r7, #32]
 8006c8c:	697b      	ldr	r3, [r7, #20]
 8006c8e:	330c      	adds	r3, #12
 8006c90:	009b      	lsls	r3, r3, #2
 8006c92:	4413      	add	r3, r2
 8006c94:	685b      	ldr	r3, [r3, #4]
 8006c96:	f103 0208 	add.w	r2, r3, #8
 8006c9a:	6a39      	ldr	r1, [r7, #32]
 8006c9c:	697b      	ldr	r3, [r7, #20]
 8006c9e:	330c      	adds	r3, #12
 8006ca0:	009b      	lsls	r3, r3, #2
 8006ca2:	440b      	add	r3, r1
 8006ca4:	605a      	str	r2, [r3, #4]
      /* Figure F.9: Encoding the magnitude bit pattern of v */
      st += 14;
 8006ca6:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8006ca8:	330e      	adds	r3, #14
 8006caa:	63fb      	str	r3, [r7, #60]	@ 0x3c
      while (m >>= 1)
 8006cac:	e00c      	b.n	8006cc8 <encode_mcu+0x236>
	arith_encode(cinfo, st, (m & v) ? 1 : 0);
 8006cae:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8006cb0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006cb2:	4013      	ands	r3, r2
 8006cb4:	2b00      	cmp	r3, #0
 8006cb6:	bf14      	ite	ne
 8006cb8:	2301      	movne	r3, #1
 8006cba:	2300      	moveq	r3, #0
 8006cbc:	b2db      	uxtb	r3, r3
 8006cbe:	461a      	mov	r2, r3
 8006cc0:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8006cc2:	6878      	ldr	r0, [r7, #4]
 8006cc4:	f7ff f974 	bl	8005fb0 <arith_encode>
      while (m >>= 1)
 8006cc8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006cca:	105b      	asrs	r3, r3, #1
 8006ccc:	627b      	str	r3, [r7, #36]	@ 0x24
 8006cce:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006cd0:	2b00      	cmp	r3, #0
 8006cd2:	d1ec      	bne.n	8006cae <encode_mcu+0x21c>
    }

    /* Sections F.1.4.2 & F.1.4.4.2: Encoding of AC coefficients */

    if ((ke = cinfo->lim_Se) == 0) continue;
 8006cd4:	687b      	ldr	r3, [r7, #4]
 8006cd6:	f8d3 3180 	ldr.w	r3, [r3, #384]	@ 0x180
 8006cda:	633b      	str	r3, [r7, #48]	@ 0x30
 8006cdc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006cde:	2b00      	cmp	r3, #0
 8006ce0:	f000 80e0 	beq.w	8006ea4 <encode_mcu+0x412>
    tbl = compptr->ac_tbl_no;
 8006ce4:	693b      	ldr	r3, [r7, #16]
 8006ce6:	699b      	ldr	r3, [r3, #24]
 8006ce8:	60fb      	str	r3, [r7, #12]

    /* Establish EOB (end-of-block) index */
    do {
      if ((*block)[natural_order[ke]]) break;
 8006cea:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006cec:	009b      	lsls	r3, r3, #2
 8006cee:	69fa      	ldr	r2, [r7, #28]
 8006cf0:	4413      	add	r3, r2
 8006cf2:	681a      	ldr	r2, [r3, #0]
 8006cf4:	69bb      	ldr	r3, [r7, #24]
 8006cf6:	f933 3012 	ldrsh.w	r3, [r3, r2, lsl #1]
 8006cfa:	2b00      	cmp	r3, #0
 8006cfc:	d106      	bne.n	8006d0c <encode_mcu+0x27a>
    } while (--ke);
 8006cfe:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006d00:	3b01      	subs	r3, #1
 8006d02:	633b      	str	r3, [r7, #48]	@ 0x30
 8006d04:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006d06:	2b00      	cmp	r3, #0
 8006d08:	d1ef      	bne.n	8006cea <encode_mcu+0x258>
 8006d0a:	e000      	b.n	8006d0e <encode_mcu+0x27c>
      if ((*block)[natural_order[ke]]) break;
 8006d0c:	bf00      	nop

    /* Figure F.5: Encode_AC_Coefficients */
    for (k = 0; k < ke;) {
 8006d0e:	2300      	movs	r3, #0
 8006d10:	637b      	str	r3, [r7, #52]	@ 0x34
 8006d12:	e0aa      	b.n	8006e6a <encode_mcu+0x3d8>
      st = entropy->ac_stats[tbl] + 3 * k;
 8006d14:	6a3a      	ldr	r2, [r7, #32]
 8006d16:	68fb      	ldr	r3, [r7, #12]
 8006d18:	3322      	adds	r3, #34	@ 0x22
 8006d1a:	009b      	lsls	r3, r3, #2
 8006d1c:	4413      	add	r3, r2
 8006d1e:	6859      	ldr	r1, [r3, #4]
 8006d20:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8006d22:	4613      	mov	r3, r2
 8006d24:	005b      	lsls	r3, r3, #1
 8006d26:	4413      	add	r3, r2
 8006d28:	440b      	add	r3, r1
 8006d2a:	63fb      	str	r3, [r7, #60]	@ 0x3c
      arith_encode(cinfo, st, 0);	/* EOB decision */
 8006d2c:	2200      	movs	r2, #0
 8006d2e:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8006d30:	6878      	ldr	r0, [r7, #4]
 8006d32:	f7ff f93d 	bl	8005fb0 <arith_encode>
      while ((v = (*block)[natural_order[++k]]) == 0) {
 8006d36:	e009      	b.n	8006d4c <encode_mcu+0x2ba>
	arith_encode(cinfo, st + 1, 0);
 8006d38:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8006d3a:	3301      	adds	r3, #1
 8006d3c:	2200      	movs	r2, #0
 8006d3e:	4619      	mov	r1, r3
 8006d40:	6878      	ldr	r0, [r7, #4]
 8006d42:	f7ff f935 	bl	8005fb0 <arith_encode>
	st += 3;
 8006d46:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8006d48:	3303      	adds	r3, #3
 8006d4a:	63fb      	str	r3, [r7, #60]	@ 0x3c
      while ((v = (*block)[natural_order[++k]]) == 0) {
 8006d4c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006d4e:	3301      	adds	r3, #1
 8006d50:	637b      	str	r3, [r7, #52]	@ 0x34
 8006d52:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006d54:	009b      	lsls	r3, r3, #2
 8006d56:	69fa      	ldr	r2, [r7, #28]
 8006d58:	4413      	add	r3, r2
 8006d5a:	681a      	ldr	r2, [r3, #0]
 8006d5c:	69bb      	ldr	r3, [r7, #24]
 8006d5e:	f933 3012 	ldrsh.w	r3, [r3, r2, lsl #1]
 8006d62:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8006d64:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006d66:	2b00      	cmp	r3, #0
 8006d68:	d0e6      	beq.n	8006d38 <encode_mcu+0x2a6>
      }
      arith_encode(cinfo, st + 1, 1);
 8006d6a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8006d6c:	3301      	adds	r3, #1
 8006d6e:	2201      	movs	r2, #1
 8006d70:	4619      	mov	r1, r3
 8006d72:	6878      	ldr	r0, [r7, #4]
 8006d74:	f7ff f91c 	bl	8005fb0 <arith_encode>
      /* Figure F.6: Encoding nonzero value v */
      /* Figure F.7: Encoding the sign of v */
      if (v > 0) {
 8006d78:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006d7a:	2b00      	cmp	r3, #0
 8006d7c:	dd07      	ble.n	8006d8e <encode_mcu+0x2fc>
	arith_encode(cinfo, entropy->fixed_bin, 0);
 8006d7e:	6a3b      	ldr	r3, [r7, #32]
 8006d80:	33cc      	adds	r3, #204	@ 0xcc
 8006d82:	2200      	movs	r2, #0
 8006d84:	4619      	mov	r1, r3
 8006d86:	6878      	ldr	r0, [r7, #4]
 8006d88:	f7ff f912 	bl	8005fb0 <arith_encode>
 8006d8c:	e009      	b.n	8006da2 <encode_mcu+0x310>
      } else {
	v = -v;
 8006d8e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006d90:	425b      	negs	r3, r3
 8006d92:	62fb      	str	r3, [r7, #44]	@ 0x2c
	arith_encode(cinfo, entropy->fixed_bin, 1);
 8006d94:	6a3b      	ldr	r3, [r7, #32]
 8006d96:	33cc      	adds	r3, #204	@ 0xcc
 8006d98:	2201      	movs	r2, #1
 8006d9a:	4619      	mov	r1, r3
 8006d9c:	6878      	ldr	r0, [r7, #4]
 8006d9e:	f7ff f907 	bl	8005fb0 <arith_encode>
      }
      st += 2;
 8006da2:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8006da4:	3302      	adds	r3, #2
 8006da6:	63fb      	str	r3, [r7, #60]	@ 0x3c
      /* Figure F.8: Encoding the magnitude category of v */
      m = 0;
 8006da8:	2300      	movs	r3, #0
 8006daa:	627b      	str	r3, [r7, #36]	@ 0x24
      if (v -= 1) {
 8006dac:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006dae:	3b01      	subs	r3, #1
 8006db0:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8006db2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006db4:	2b00      	cmp	r3, #0
 8006db6:	d03c      	beq.n	8006e32 <encode_mcu+0x3a0>
	arith_encode(cinfo, st, 1);
 8006db8:	2201      	movs	r2, #1
 8006dba:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8006dbc:	6878      	ldr	r0, [r7, #4]
 8006dbe:	f7ff f8f7 	bl	8005fb0 <arith_encode>
	m = 1;
 8006dc2:	2301      	movs	r3, #1
 8006dc4:	627b      	str	r3, [r7, #36]	@ 0x24
	v2 = v;
 8006dc6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006dc8:	62bb      	str	r3, [r7, #40]	@ 0x28
	if (v2 >>= 1) {
 8006dca:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006dcc:	105b      	asrs	r3, r3, #1
 8006dce:	62bb      	str	r3, [r7, #40]	@ 0x28
 8006dd0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006dd2:	2b00      	cmp	r3, #0
 8006dd4:	d02d      	beq.n	8006e32 <encode_mcu+0x3a0>
	  arith_encode(cinfo, st, 1);
 8006dd6:	2201      	movs	r2, #1
 8006dd8:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8006dda:	6878      	ldr	r0, [r7, #4]
 8006ddc:	f7ff f8e8 	bl	8005fb0 <arith_encode>
	  m <<= 1;
 8006de0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006de2:	005b      	lsls	r3, r3, #1
 8006de4:	627b      	str	r3, [r7, #36]	@ 0x24
	  st = entropy->ac_stats[tbl] +
 8006de6:	6a3a      	ldr	r2, [r7, #32]
 8006de8:	68fb      	ldr	r3, [r7, #12]
 8006dea:	3322      	adds	r3, #34	@ 0x22
 8006dec:	009b      	lsls	r3, r3, #2
 8006dee:	4413      	add	r3, r2
 8006df0:	685a      	ldr	r2, [r3, #4]
	       (k <= cinfo->arith_ac_K[tbl] ? 189 : 217);
 8006df2:	6879      	ldr	r1, [r7, #4]
 8006df4:	68fb      	ldr	r3, [r7, #12]
 8006df6:	440b      	add	r3, r1
 8006df8:	33b8      	adds	r3, #184	@ 0xb8
 8006dfa:	781b      	ldrb	r3, [r3, #0]
 8006dfc:	4619      	mov	r1, r3
 8006dfe:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006e00:	428b      	cmp	r3, r1
 8006e02:	dc01      	bgt.n	8006e08 <encode_mcu+0x376>
 8006e04:	23bd      	movs	r3, #189	@ 0xbd
 8006e06:	e000      	b.n	8006e0a <encode_mcu+0x378>
 8006e08:	23d9      	movs	r3, #217	@ 0xd9
	  st = entropy->ac_stats[tbl] +
 8006e0a:	4413      	add	r3, r2
 8006e0c:	63fb      	str	r3, [r7, #60]	@ 0x3c
	  while (v2 >>= 1) {
 8006e0e:	e00a      	b.n	8006e26 <encode_mcu+0x394>
	    arith_encode(cinfo, st, 1);
 8006e10:	2201      	movs	r2, #1
 8006e12:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8006e14:	6878      	ldr	r0, [r7, #4]
 8006e16:	f7ff f8cb 	bl	8005fb0 <arith_encode>
	    m <<= 1;
 8006e1a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006e1c:	005b      	lsls	r3, r3, #1
 8006e1e:	627b      	str	r3, [r7, #36]	@ 0x24
	    st += 1;
 8006e20:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8006e22:	3301      	adds	r3, #1
 8006e24:	63fb      	str	r3, [r7, #60]	@ 0x3c
	  while (v2 >>= 1) {
 8006e26:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006e28:	105b      	asrs	r3, r3, #1
 8006e2a:	62bb      	str	r3, [r7, #40]	@ 0x28
 8006e2c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006e2e:	2b00      	cmp	r3, #0
 8006e30:	d1ee      	bne.n	8006e10 <encode_mcu+0x37e>
	  }
	}
      }
      arith_encode(cinfo, st, 0);
 8006e32:	2200      	movs	r2, #0
 8006e34:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8006e36:	6878      	ldr	r0, [r7, #4]
 8006e38:	f7ff f8ba 	bl	8005fb0 <arith_encode>
      /* Figure F.9: Encoding the magnitude bit pattern of v */
      st += 14;
 8006e3c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8006e3e:	330e      	adds	r3, #14
 8006e40:	63fb      	str	r3, [r7, #60]	@ 0x3c
      while (m >>= 1)
 8006e42:	e00c      	b.n	8006e5e <encode_mcu+0x3cc>
	arith_encode(cinfo, st, (m & v) ? 1 : 0);
 8006e44:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8006e46:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006e48:	4013      	ands	r3, r2
 8006e4a:	2b00      	cmp	r3, #0
 8006e4c:	bf14      	ite	ne
 8006e4e:	2301      	movne	r3, #1
 8006e50:	2300      	moveq	r3, #0
 8006e52:	b2db      	uxtb	r3, r3
 8006e54:	461a      	mov	r2, r3
 8006e56:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8006e58:	6878      	ldr	r0, [r7, #4]
 8006e5a:	f7ff f8a9 	bl	8005fb0 <arith_encode>
      while (m >>= 1)
 8006e5e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006e60:	105b      	asrs	r3, r3, #1
 8006e62:	627b      	str	r3, [r7, #36]	@ 0x24
 8006e64:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006e66:	2b00      	cmp	r3, #0
 8006e68:	d1ec      	bne.n	8006e44 <encode_mcu+0x3b2>
    for (k = 0; k < ke;) {
 8006e6a:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8006e6c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006e6e:	429a      	cmp	r2, r3
 8006e70:	f6ff af50 	blt.w	8006d14 <encode_mcu+0x282>
    }
    /* Encode EOB decision only if k < cinfo->lim_Se */
    if (k < cinfo->lim_Se) {
 8006e74:	687b      	ldr	r3, [r7, #4]
 8006e76:	f8d3 3180 	ldr.w	r3, [r3, #384]	@ 0x180
 8006e7a:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8006e7c:	429a      	cmp	r2, r3
 8006e7e:	da12      	bge.n	8006ea6 <encode_mcu+0x414>
      st = entropy->ac_stats[tbl] + 3 * k;
 8006e80:	6a3a      	ldr	r2, [r7, #32]
 8006e82:	68fb      	ldr	r3, [r7, #12]
 8006e84:	3322      	adds	r3, #34	@ 0x22
 8006e86:	009b      	lsls	r3, r3, #2
 8006e88:	4413      	add	r3, r2
 8006e8a:	6859      	ldr	r1, [r3, #4]
 8006e8c:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8006e8e:	4613      	mov	r3, r2
 8006e90:	005b      	lsls	r3, r3, #1
 8006e92:	4413      	add	r3, r2
 8006e94:	440b      	add	r3, r1
 8006e96:	63fb      	str	r3, [r7, #60]	@ 0x3c
      arith_encode(cinfo, st, 1);
 8006e98:	2201      	movs	r2, #1
 8006e9a:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8006e9c:	6878      	ldr	r0, [r7, #4]
 8006e9e:	f7ff f887 	bl	8005fb0 <arith_encode>
 8006ea2:	e000      	b.n	8006ea6 <encode_mcu+0x414>
    if ((ke = cinfo->lim_Se) == 0) continue;
 8006ea4:	bf00      	nop
  for (blkn = 0; blkn < cinfo->blocks_in_MCU; blkn++) {
 8006ea6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006ea8:	3301      	adds	r3, #1
 8006eaa:	63bb      	str	r3, [r7, #56]	@ 0x38
 8006eac:	687b      	ldr	r3, [r7, #4]
 8006eae:	f8d3 313c 	ldr.w	r3, [r3, #316]	@ 0x13c
 8006eb2:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8006eb4:	429a      	cmp	r2, r3
 8006eb6:	f6ff ae20 	blt.w	8006afa <encode_mcu+0x68>
    }
  }

  return TRUE;
 8006eba:	2301      	movs	r3, #1
}
 8006ebc:	4618      	mov	r0, r3
 8006ebe:	3740      	adds	r7, #64	@ 0x40
 8006ec0:	46bd      	mov	sp, r7
 8006ec2:	bd80      	pop	{r7, pc}

08006ec4 <start_pass>:
 * Initialize for an arithmetic-compressed scan.
 */

METHODDEF(void)
start_pass (j_compress_ptr cinfo, boolean gather_statistics)
{
 8006ec4:	b580      	push	{r7, lr}
 8006ec6:	b086      	sub	sp, #24
 8006ec8:	af00      	add	r7, sp, #0
 8006eca:	6078      	str	r0, [r7, #4]
 8006ecc:	6039      	str	r1, [r7, #0]
  arith_entropy_ptr entropy = (arith_entropy_ptr) cinfo->entropy;
 8006ece:	687b      	ldr	r3, [r7, #4]
 8006ed0:	f8d3 31a4 	ldr.w	r3, [r3, #420]	@ 0x1a4
 8006ed4:	613b      	str	r3, [r7, #16]
  int ci, tbl;
  jpeg_component_info * compptr;

  if (gather_statistics)
 8006ed6:	683b      	ldr	r3, [r7, #0]
 8006ed8:	2b00      	cmp	r3, #0
 8006eda:	d008      	beq.n	8006eee <start_pass+0x2a>
    /* Make sure to avoid that in the master control logic!
     * We are fully adaptive here and need no extra
     * statistics gathering pass!
     */
    ERREXIT(cinfo, JERR_NOT_COMPILED);
 8006edc:	687b      	ldr	r3, [r7, #4]
 8006ede:	681b      	ldr	r3, [r3, #0]
 8006ee0:	2231      	movs	r2, #49	@ 0x31
 8006ee2:	615a      	str	r2, [r3, #20]
 8006ee4:	687b      	ldr	r3, [r7, #4]
 8006ee6:	681b      	ldr	r3, [r3, #0]
 8006ee8:	681b      	ldr	r3, [r3, #0]
 8006eea:	6878      	ldr	r0, [r7, #4]
 8006eec:	4798      	blx	r3

  /* We assume jcmaster.c already validated the progressive scan parameters. */

  /* Select execution routines */
  if (cinfo->progressive_mode) {
 8006eee:	687b      	ldr	r3, [r7, #4]
 8006ef0:	f8d3 3108 	ldr.w	r3, [r3, #264]	@ 0x108
 8006ef4:	2b00      	cmp	r3, #0
 8006ef6:	d01e      	beq.n	8006f36 <start_pass+0x72>
    if (cinfo->Ah == 0) {
 8006ef8:	687b      	ldr	r3, [r7, #4]
 8006efa:	f8d3 3170 	ldr.w	r3, [r3, #368]	@ 0x170
 8006efe:	2b00      	cmp	r3, #0
 8006f00:	d10c      	bne.n	8006f1c <start_pass+0x58>
      if (cinfo->Ss == 0)
 8006f02:	687b      	ldr	r3, [r7, #4]
 8006f04:	f8d3 3168 	ldr.w	r3, [r3, #360]	@ 0x168
 8006f08:	2b00      	cmp	r3, #0
 8006f0a:	d103      	bne.n	8006f14 <start_pass+0x50>
	entropy->pub.encode_mcu = encode_mcu_DC_first;
 8006f0c:	693b      	ldr	r3, [r7, #16]
 8006f0e:	4a6c      	ldr	r2, [pc, #432]	@ (80070c0 <start_pass+0x1fc>)
 8006f10:	605a      	str	r2, [r3, #4]
 8006f12:	e013      	b.n	8006f3c <start_pass+0x78>
      else
	entropy->pub.encode_mcu = encode_mcu_AC_first;
 8006f14:	693b      	ldr	r3, [r7, #16]
 8006f16:	4a6b      	ldr	r2, [pc, #428]	@ (80070c4 <start_pass+0x200>)
 8006f18:	605a      	str	r2, [r3, #4]
 8006f1a:	e00f      	b.n	8006f3c <start_pass+0x78>
    } else {
      if (cinfo->Ss == 0)
 8006f1c:	687b      	ldr	r3, [r7, #4]
 8006f1e:	f8d3 3168 	ldr.w	r3, [r3, #360]	@ 0x168
 8006f22:	2b00      	cmp	r3, #0
 8006f24:	d103      	bne.n	8006f2e <start_pass+0x6a>
	entropy->pub.encode_mcu = encode_mcu_DC_refine;
 8006f26:	693b      	ldr	r3, [r7, #16]
 8006f28:	4a67      	ldr	r2, [pc, #412]	@ (80070c8 <start_pass+0x204>)
 8006f2a:	605a      	str	r2, [r3, #4]
 8006f2c:	e006      	b.n	8006f3c <start_pass+0x78>
      else
	entropy->pub.encode_mcu = encode_mcu_AC_refine;
 8006f2e:	693b      	ldr	r3, [r7, #16]
 8006f30:	4a66      	ldr	r2, [pc, #408]	@ (80070cc <start_pass+0x208>)
 8006f32:	605a      	str	r2, [r3, #4]
 8006f34:	e002      	b.n	8006f3c <start_pass+0x78>
    }
  } else
    entropy->pub.encode_mcu = encode_mcu;
 8006f36:	693b      	ldr	r3, [r7, #16]
 8006f38:	4a65      	ldr	r2, [pc, #404]	@ (80070d0 <start_pass+0x20c>)
 8006f3a:	605a      	str	r2, [r3, #4]

  /* Allocate & initialize requested statistics areas */
  for (ci = 0; ci < cinfo->comps_in_scan; ci++) {
 8006f3c:	2300      	movs	r3, #0
 8006f3e:	617b      	str	r3, [r7, #20]
 8006f40:	e096      	b.n	8007070 <start_pass+0x1ac>
    compptr = cinfo->cur_comp_info[ci];
 8006f42:	687a      	ldr	r2, [r7, #4]
 8006f44:	697b      	ldr	r3, [r7, #20]
 8006f46:	3348      	adds	r3, #72	@ 0x48
 8006f48:	009b      	lsls	r3, r3, #2
 8006f4a:	4413      	add	r3, r2
 8006f4c:	685b      	ldr	r3, [r3, #4]
 8006f4e:	60fb      	str	r3, [r7, #12]
    /* DC needs no table for refinement scan */
    if (cinfo->Ss == 0 && cinfo->Ah == 0) {
 8006f50:	687b      	ldr	r3, [r7, #4]
 8006f52:	f8d3 3168 	ldr.w	r3, [r3, #360]	@ 0x168
 8006f56:	2b00      	cmp	r3, #0
 8006f58:	d149      	bne.n	8006fee <start_pass+0x12a>
 8006f5a:	687b      	ldr	r3, [r7, #4]
 8006f5c:	f8d3 3170 	ldr.w	r3, [r3, #368]	@ 0x170
 8006f60:	2b00      	cmp	r3, #0
 8006f62:	d144      	bne.n	8006fee <start_pass+0x12a>
      tbl = compptr->dc_tbl_no;
 8006f64:	68fb      	ldr	r3, [r7, #12]
 8006f66:	695b      	ldr	r3, [r3, #20]
 8006f68:	60bb      	str	r3, [r7, #8]
      if (tbl < 0 || tbl >= NUM_ARITH_TBLS)
 8006f6a:	68bb      	ldr	r3, [r7, #8]
 8006f6c:	2b00      	cmp	r3, #0
 8006f6e:	db02      	blt.n	8006f76 <start_pass+0xb2>
 8006f70:	68bb      	ldr	r3, [r7, #8]
 8006f72:	2b0f      	cmp	r3, #15
 8006f74:	dd0c      	ble.n	8006f90 <start_pass+0xcc>
	ERREXIT1(cinfo, JERR_NO_ARITH_TABLE, tbl);
 8006f76:	687b      	ldr	r3, [r7, #4]
 8006f78:	681b      	ldr	r3, [r3, #0]
 8006f7a:	2232      	movs	r2, #50	@ 0x32
 8006f7c:	615a      	str	r2, [r3, #20]
 8006f7e:	687b      	ldr	r3, [r7, #4]
 8006f80:	681b      	ldr	r3, [r3, #0]
 8006f82:	68ba      	ldr	r2, [r7, #8]
 8006f84:	619a      	str	r2, [r3, #24]
 8006f86:	687b      	ldr	r3, [r7, #4]
 8006f88:	681b      	ldr	r3, [r3, #0]
 8006f8a:	681b      	ldr	r3, [r3, #0]
 8006f8c:	6878      	ldr	r0, [r7, #4]
 8006f8e:	4798      	blx	r3
      if (entropy->dc_stats[tbl] == NULL)
 8006f90:	693a      	ldr	r2, [r7, #16]
 8006f92:	68bb      	ldr	r3, [r7, #8]
 8006f94:	3312      	adds	r3, #18
 8006f96:	009b      	lsls	r3, r3, #2
 8006f98:	4413      	add	r3, r2
 8006f9a:	685b      	ldr	r3, [r3, #4]
 8006f9c:	2b00      	cmp	r3, #0
 8006f9e:	d10d      	bne.n	8006fbc <start_pass+0xf8>
	entropy->dc_stats[tbl] = (unsigned char *) (*cinfo->mem->alloc_small)
 8006fa0:	687b      	ldr	r3, [r7, #4]
 8006fa2:	685b      	ldr	r3, [r3, #4]
 8006fa4:	681b      	ldr	r3, [r3, #0]
 8006fa6:	2240      	movs	r2, #64	@ 0x40
 8006fa8:	2101      	movs	r1, #1
 8006faa:	6878      	ldr	r0, [r7, #4]
 8006fac:	4798      	blx	r3
 8006fae:	4601      	mov	r1, r0
 8006fb0:	693a      	ldr	r2, [r7, #16]
 8006fb2:	68bb      	ldr	r3, [r7, #8]
 8006fb4:	3312      	adds	r3, #18
 8006fb6:	009b      	lsls	r3, r3, #2
 8006fb8:	4413      	add	r3, r2
 8006fba:	6059      	str	r1, [r3, #4]
	  ((j_common_ptr) cinfo, JPOOL_IMAGE, DC_STAT_BINS);
      MEMZERO(entropy->dc_stats[tbl], DC_STAT_BINS);
 8006fbc:	693a      	ldr	r2, [r7, #16]
 8006fbe:	68bb      	ldr	r3, [r7, #8]
 8006fc0:	3312      	adds	r3, #18
 8006fc2:	009b      	lsls	r3, r3, #2
 8006fc4:	4413      	add	r3, r2
 8006fc6:	685b      	ldr	r3, [r3, #4]
 8006fc8:	2240      	movs	r2, #64	@ 0x40
 8006fca:	2100      	movs	r1, #0
 8006fcc:	4618      	mov	r0, r3
 8006fce:	f012 fd0f 	bl	80199f0 <memset>
      /* Initialize DC predictions to 0 */
      entropy->last_dc_val[ci] = 0;
 8006fd2:	693a      	ldr	r2, [r7, #16]
 8006fd4:	697b      	ldr	r3, [r7, #20]
 8006fd6:	3308      	adds	r3, #8
 8006fd8:	009b      	lsls	r3, r3, #2
 8006fda:	4413      	add	r3, r2
 8006fdc:	2200      	movs	r2, #0
 8006fde:	605a      	str	r2, [r3, #4]
      entropy->dc_context[ci] = 0;
 8006fe0:	693a      	ldr	r2, [r7, #16]
 8006fe2:	697b      	ldr	r3, [r7, #20]
 8006fe4:	330c      	adds	r3, #12
 8006fe6:	009b      	lsls	r3, r3, #2
 8006fe8:	4413      	add	r3, r2
 8006fea:	2200      	movs	r2, #0
 8006fec:	605a      	str	r2, [r3, #4]
    }
    /* AC needs no table when not present */
    if (cinfo->Se) {
 8006fee:	687b      	ldr	r3, [r7, #4]
 8006ff0:	f8d3 316c 	ldr.w	r3, [r3, #364]	@ 0x16c
 8006ff4:	2b00      	cmp	r3, #0
 8006ff6:	d038      	beq.n	800706a <start_pass+0x1a6>
      tbl = compptr->ac_tbl_no;
 8006ff8:	68fb      	ldr	r3, [r7, #12]
 8006ffa:	699b      	ldr	r3, [r3, #24]
 8006ffc:	60bb      	str	r3, [r7, #8]
      if (tbl < 0 || tbl >= NUM_ARITH_TBLS)
 8006ffe:	68bb      	ldr	r3, [r7, #8]
 8007000:	2b00      	cmp	r3, #0
 8007002:	db02      	blt.n	800700a <start_pass+0x146>
 8007004:	68bb      	ldr	r3, [r7, #8]
 8007006:	2b0f      	cmp	r3, #15
 8007008:	dd0c      	ble.n	8007024 <start_pass+0x160>
	ERREXIT1(cinfo, JERR_NO_ARITH_TABLE, tbl);
 800700a:	687b      	ldr	r3, [r7, #4]
 800700c:	681b      	ldr	r3, [r3, #0]
 800700e:	2232      	movs	r2, #50	@ 0x32
 8007010:	615a      	str	r2, [r3, #20]
 8007012:	687b      	ldr	r3, [r7, #4]
 8007014:	681b      	ldr	r3, [r3, #0]
 8007016:	68ba      	ldr	r2, [r7, #8]
 8007018:	619a      	str	r2, [r3, #24]
 800701a:	687b      	ldr	r3, [r7, #4]
 800701c:	681b      	ldr	r3, [r3, #0]
 800701e:	681b      	ldr	r3, [r3, #0]
 8007020:	6878      	ldr	r0, [r7, #4]
 8007022:	4798      	blx	r3
      if (entropy->ac_stats[tbl] == NULL)
 8007024:	693a      	ldr	r2, [r7, #16]
 8007026:	68bb      	ldr	r3, [r7, #8]
 8007028:	3322      	adds	r3, #34	@ 0x22
 800702a:	009b      	lsls	r3, r3, #2
 800702c:	4413      	add	r3, r2
 800702e:	685b      	ldr	r3, [r3, #4]
 8007030:	2b00      	cmp	r3, #0
 8007032:	d10e      	bne.n	8007052 <start_pass+0x18e>
	entropy->ac_stats[tbl] = (unsigned char *) (*cinfo->mem->alloc_small)
 8007034:	687b      	ldr	r3, [r7, #4]
 8007036:	685b      	ldr	r3, [r3, #4]
 8007038:	681b      	ldr	r3, [r3, #0]
 800703a:	f44f 7280 	mov.w	r2, #256	@ 0x100
 800703e:	2101      	movs	r1, #1
 8007040:	6878      	ldr	r0, [r7, #4]
 8007042:	4798      	blx	r3
 8007044:	4601      	mov	r1, r0
 8007046:	693a      	ldr	r2, [r7, #16]
 8007048:	68bb      	ldr	r3, [r7, #8]
 800704a:	3322      	adds	r3, #34	@ 0x22
 800704c:	009b      	lsls	r3, r3, #2
 800704e:	4413      	add	r3, r2
 8007050:	6059      	str	r1, [r3, #4]
	  ((j_common_ptr) cinfo, JPOOL_IMAGE, AC_STAT_BINS);
      MEMZERO(entropy->ac_stats[tbl], AC_STAT_BINS);
 8007052:	693a      	ldr	r2, [r7, #16]
 8007054:	68bb      	ldr	r3, [r7, #8]
 8007056:	3322      	adds	r3, #34	@ 0x22
 8007058:	009b      	lsls	r3, r3, #2
 800705a:	4413      	add	r3, r2
 800705c:	685b      	ldr	r3, [r3, #4]
 800705e:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8007062:	2100      	movs	r1, #0
 8007064:	4618      	mov	r0, r3
 8007066:	f012 fcc3 	bl	80199f0 <memset>
  for (ci = 0; ci < cinfo->comps_in_scan; ci++) {
 800706a:	697b      	ldr	r3, [r7, #20]
 800706c:	3301      	adds	r3, #1
 800706e:	617b      	str	r3, [r7, #20]
 8007070:	687b      	ldr	r3, [r7, #4]
 8007072:	f8d3 3120 	ldr.w	r3, [r3, #288]	@ 0x120
 8007076:	697a      	ldr	r2, [r7, #20]
 8007078:	429a      	cmp	r2, r3
 800707a:	f6ff af62 	blt.w	8006f42 <start_pass+0x7e>
#endif
    }
  }

  /* Initialize arithmetic encoding variables */
  entropy->c = 0;
 800707e:	693b      	ldr	r3, [r7, #16]
 8007080:	2200      	movs	r2, #0
 8007082:	60da      	str	r2, [r3, #12]
  entropy->a = 0x10000L;
 8007084:	693b      	ldr	r3, [r7, #16]
 8007086:	f44f 3280 	mov.w	r2, #65536	@ 0x10000
 800708a:	611a      	str	r2, [r3, #16]
  entropy->sc = 0;
 800708c:	693b      	ldr	r3, [r7, #16]
 800708e:	2200      	movs	r2, #0
 8007090:	615a      	str	r2, [r3, #20]
  entropy->zc = 0;
 8007092:	693b      	ldr	r3, [r7, #16]
 8007094:	2200      	movs	r2, #0
 8007096:	619a      	str	r2, [r3, #24]
  entropy->ct = 11;
 8007098:	693b      	ldr	r3, [r7, #16]
 800709a:	220b      	movs	r2, #11
 800709c:	61da      	str	r2, [r3, #28]
  entropy->buffer = -1;  /* empty */
 800709e:	693b      	ldr	r3, [r7, #16]
 80070a0:	f04f 32ff 	mov.w	r2, #4294967295
 80070a4:	621a      	str	r2, [r3, #32]

  /* Initialize restart stuff */
  entropy->restarts_to_go = cinfo->restart_interval;
 80070a6:	687b      	ldr	r3, [r7, #4]
 80070a8:	f8d3 20ec 	ldr.w	r2, [r3, #236]	@ 0xec
 80070ac:	693b      	ldr	r3, [r7, #16]
 80070ae:	645a      	str	r2, [r3, #68]	@ 0x44
  entropy->next_restart_num = 0;
 80070b0:	693b      	ldr	r3, [r7, #16]
 80070b2:	2200      	movs	r2, #0
 80070b4:	649a      	str	r2, [r3, #72]	@ 0x48
}
 80070b6:	bf00      	nop
 80070b8:	3718      	adds	r7, #24
 80070ba:	46bd      	mov	sp, r7
 80070bc:	bd80      	pop	{r7, pc}
 80070be:	bf00      	nop
 80070c0:	0800624f 	.word	0x0800624f
 80070c4:	080064ab 	.word	0x080064ab
 80070c8:	0800675d 	.word	0x0800675d
 80070cc:	0800680b 	.word	0x0800680b
 80070d0:	08006a93 	.word	0x08006a93

080070d4 <jinit_arith_encoder>:
 * Module initialization routine for arithmetic entropy encoding.
 */

GLOBAL(void)
jinit_arith_encoder (j_compress_ptr cinfo)
{
 80070d4:	b580      	push	{r7, lr}
 80070d6:	b084      	sub	sp, #16
 80070d8:	af00      	add	r7, sp, #0
 80070da:	6078      	str	r0, [r7, #4]
  arith_entropy_ptr entropy;
  int i;

  entropy = (arith_entropy_ptr)
    (*cinfo->mem->alloc_small) ((j_common_ptr) cinfo, JPOOL_IMAGE,
 80070dc:	687b      	ldr	r3, [r7, #4]
 80070de:	685b      	ldr	r3, [r3, #4]
 80070e0:	681b      	ldr	r3, [r3, #0]
 80070e2:	22d0      	movs	r2, #208	@ 0xd0
 80070e4:	2101      	movs	r1, #1
 80070e6:	6878      	ldr	r0, [r7, #4]
 80070e8:	4798      	blx	r3
 80070ea:	60b8      	str	r0, [r7, #8]
				SIZEOF(arith_entropy_encoder));
  cinfo->entropy = (struct jpeg_entropy_encoder *) entropy;
 80070ec:	687b      	ldr	r3, [r7, #4]
 80070ee:	68ba      	ldr	r2, [r7, #8]
 80070f0:	f8c3 21a4 	str.w	r2, [r3, #420]	@ 0x1a4
  entropy->pub.start_pass = start_pass;
 80070f4:	68bb      	ldr	r3, [r7, #8]
 80070f6:	4a12      	ldr	r2, [pc, #72]	@ (8007140 <jinit_arith_encoder+0x6c>)
 80070f8:	601a      	str	r2, [r3, #0]
  entropy->pub.finish_pass = finish_pass;
 80070fa:	68bb      	ldr	r3, [r7, #8]
 80070fc:	4a11      	ldr	r2, [pc, #68]	@ (8007144 <jinit_arith_encoder+0x70>)
 80070fe:	609a      	str	r2, [r3, #8]

  /* Mark tables unallocated */
  for (i = 0; i < NUM_ARITH_TBLS; i++) {
 8007100:	2300      	movs	r3, #0
 8007102:	60fb      	str	r3, [r7, #12]
 8007104:	e010      	b.n	8007128 <jinit_arith_encoder+0x54>
    entropy->dc_stats[i] = NULL;
 8007106:	68ba      	ldr	r2, [r7, #8]
 8007108:	68fb      	ldr	r3, [r7, #12]
 800710a:	3312      	adds	r3, #18
 800710c:	009b      	lsls	r3, r3, #2
 800710e:	4413      	add	r3, r2
 8007110:	2200      	movs	r2, #0
 8007112:	605a      	str	r2, [r3, #4]
    entropy->ac_stats[i] = NULL;
 8007114:	68ba      	ldr	r2, [r7, #8]
 8007116:	68fb      	ldr	r3, [r7, #12]
 8007118:	3322      	adds	r3, #34	@ 0x22
 800711a:	009b      	lsls	r3, r3, #2
 800711c:	4413      	add	r3, r2
 800711e:	2200      	movs	r2, #0
 8007120:	605a      	str	r2, [r3, #4]
  for (i = 0; i < NUM_ARITH_TBLS; i++) {
 8007122:	68fb      	ldr	r3, [r7, #12]
 8007124:	3301      	adds	r3, #1
 8007126:	60fb      	str	r3, [r7, #12]
 8007128:	68fb      	ldr	r3, [r7, #12]
 800712a:	2b0f      	cmp	r3, #15
 800712c:	ddeb      	ble.n	8007106 <jinit_arith_encoder+0x32>
  }

  /* Initialize index for fixed probability estimation */
  entropy->fixed_bin[0] = 113;
 800712e:	68bb      	ldr	r3, [r7, #8]
 8007130:	2271      	movs	r2, #113	@ 0x71
 8007132:	f883 20cc 	strb.w	r2, [r3, #204]	@ 0xcc
}
 8007136:	bf00      	nop
 8007138:	3710      	adds	r7, #16
 800713a:	46bd      	mov	sp, r7
 800713c:	bd80      	pop	{r7, pc}
 800713e:	bf00      	nop
 8007140:	08006ec5 	.word	0x08006ec5
 8007144:	08005dd9 	.word	0x08005dd9

08007148 <start_iMCU_row>:


LOCAL(void)
start_iMCU_row (j_compress_ptr cinfo)
/* Reset within-iMCU-row counters for a new row */
{
 8007148:	b480      	push	{r7}
 800714a:	b085      	sub	sp, #20
 800714c:	af00      	add	r7, sp, #0
 800714e:	6078      	str	r0, [r7, #4]
  my_coef_ptr coef = (my_coef_ptr) cinfo->coef;
 8007150:	687b      	ldr	r3, [r7, #4]
 8007152:	f8d3 3190 	ldr.w	r3, [r3, #400]	@ 0x190
 8007156:	60fb      	str	r3, [r7, #12]

  /* In an interleaved scan, an MCU row is the same as an iMCU row.
   * In a noninterleaved scan, an iMCU row has v_samp_factor MCU rows.
   * But at the bottom of the image, process only what's left.
   */
  if (cinfo->comps_in_scan > 1) {
 8007158:	687b      	ldr	r3, [r7, #4]
 800715a:	f8d3 3120 	ldr.w	r3, [r3, #288]	@ 0x120
 800715e:	2b01      	cmp	r3, #1
 8007160:	dd03      	ble.n	800716a <start_iMCU_row+0x22>
    coef->MCU_rows_per_iMCU_row = 1;
 8007162:	68fb      	ldr	r3, [r7, #12]
 8007164:	2201      	movs	r2, #1
 8007166:	615a      	str	r2, [r3, #20]
 8007168:	e014      	b.n	8007194 <start_iMCU_row+0x4c>
  } else {
    if (coef->iMCU_row_num < (cinfo->total_iMCU_rows-1))
 800716a:	68fb      	ldr	r3, [r7, #12]
 800716c:	689a      	ldr	r2, [r3, #8]
 800716e:	687b      	ldr	r3, [r7, #4]
 8007170:	f8d3 311c 	ldr.w	r3, [r3, #284]	@ 0x11c
 8007174:	3b01      	subs	r3, #1
 8007176:	429a      	cmp	r2, r3
 8007178:	d206      	bcs.n	8007188 <start_iMCU_row+0x40>
      coef->MCU_rows_per_iMCU_row = cinfo->cur_comp_info[0]->v_samp_factor;
 800717a:	687b      	ldr	r3, [r7, #4]
 800717c:	f8d3 3124 	ldr.w	r3, [r3, #292]	@ 0x124
 8007180:	68da      	ldr	r2, [r3, #12]
 8007182:	68fb      	ldr	r3, [r7, #12]
 8007184:	615a      	str	r2, [r3, #20]
 8007186:	e005      	b.n	8007194 <start_iMCU_row+0x4c>
    else
      coef->MCU_rows_per_iMCU_row = cinfo->cur_comp_info[0]->last_row_height;
 8007188:	687b      	ldr	r3, [r7, #4]
 800718a:	f8d3 3124 	ldr.w	r3, [r3, #292]	@ 0x124
 800718e:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8007190:	68fb      	ldr	r3, [r7, #12]
 8007192:	615a      	str	r2, [r3, #20]
  }

  coef->mcu_ctr = 0;
 8007194:	68fb      	ldr	r3, [r7, #12]
 8007196:	2200      	movs	r2, #0
 8007198:	60da      	str	r2, [r3, #12]
  coef->MCU_vert_offset = 0;
 800719a:	68fb      	ldr	r3, [r7, #12]
 800719c:	2200      	movs	r2, #0
 800719e:	611a      	str	r2, [r3, #16]
}
 80071a0:	bf00      	nop
 80071a2:	3714      	adds	r7, #20
 80071a4:	46bd      	mov	sp, r7
 80071a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80071aa:	4770      	bx	lr

080071ac <start_pass_coef>:
 * Initialize for a processing pass.
 */

METHODDEF(void)
start_pass_coef (j_compress_ptr cinfo, J_BUF_MODE pass_mode)
{
 80071ac:	b580      	push	{r7, lr}
 80071ae:	b084      	sub	sp, #16
 80071b0:	af00      	add	r7, sp, #0
 80071b2:	6078      	str	r0, [r7, #4]
 80071b4:	460b      	mov	r3, r1
 80071b6:	70fb      	strb	r3, [r7, #3]
  my_coef_ptr coef = (my_coef_ptr) cinfo->coef;
 80071b8:	687b      	ldr	r3, [r7, #4]
 80071ba:	f8d3 3190 	ldr.w	r3, [r3, #400]	@ 0x190
 80071be:	60fb      	str	r3, [r7, #12]

  coef->iMCU_row_num = 0;
 80071c0:	68fb      	ldr	r3, [r7, #12]
 80071c2:	2200      	movs	r2, #0
 80071c4:	609a      	str	r2, [r3, #8]
  start_iMCU_row(cinfo);
 80071c6:	6878      	ldr	r0, [r7, #4]
 80071c8:	f7ff ffbe 	bl	8007148 <start_iMCU_row>

  switch (pass_mode) {
 80071cc:	78fb      	ldrb	r3, [r7, #3]
 80071ce:	2b03      	cmp	r3, #3
 80071d0:	d017      	beq.n	8007202 <start_pass_coef+0x56>
 80071d2:	2b03      	cmp	r3, #3
 80071d4:	dc37      	bgt.n	8007246 <start_pass_coef+0x9a>
 80071d6:	2b00      	cmp	r3, #0
 80071d8:	d002      	beq.n	80071e0 <start_pass_coef+0x34>
 80071da:	2b02      	cmp	r3, #2
 80071dc:	d022      	beq.n	8007224 <start_pass_coef+0x78>
 80071de:	e032      	b.n	8007246 <start_pass_coef+0x9a>
  case JBUF_PASS_THRU:
    if (coef->whole_image[0] != NULL)
 80071e0:	68fb      	ldr	r3, [r7, #12]
 80071e2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80071e4:	2b00      	cmp	r3, #0
 80071e6:	d008      	beq.n	80071fa <start_pass_coef+0x4e>
      ERREXIT(cinfo, JERR_BAD_BUFFER_MODE);
 80071e8:	687b      	ldr	r3, [r7, #4]
 80071ea:	681b      	ldr	r3, [r3, #0]
 80071ec:	2203      	movs	r2, #3
 80071ee:	615a      	str	r2, [r3, #20]
 80071f0:	687b      	ldr	r3, [r7, #4]
 80071f2:	681b      	ldr	r3, [r3, #0]
 80071f4:	681b      	ldr	r3, [r3, #0]
 80071f6:	6878      	ldr	r0, [r7, #4]
 80071f8:	4798      	blx	r3
    coef->pub.compress_data = compress_data;
 80071fa:	68fb      	ldr	r3, [r7, #12]
 80071fc:	4a19      	ldr	r2, [pc, #100]	@ (8007264 <start_pass_coef+0xb8>)
 80071fe:	605a      	str	r2, [r3, #4]
    break;
 8007200:	e02b      	b.n	800725a <start_pass_coef+0xae>
#ifdef FULL_COEF_BUFFER_SUPPORTED
  case JBUF_SAVE_AND_PASS:
    if (coef->whole_image[0] == NULL)
 8007202:	68fb      	ldr	r3, [r7, #12]
 8007204:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007206:	2b00      	cmp	r3, #0
 8007208:	d108      	bne.n	800721c <start_pass_coef+0x70>
      ERREXIT(cinfo, JERR_BAD_BUFFER_MODE);
 800720a:	687b      	ldr	r3, [r7, #4]
 800720c:	681b      	ldr	r3, [r3, #0]
 800720e:	2203      	movs	r2, #3
 8007210:	615a      	str	r2, [r3, #20]
 8007212:	687b      	ldr	r3, [r7, #4]
 8007214:	681b      	ldr	r3, [r3, #0]
 8007216:	681b      	ldr	r3, [r3, #0]
 8007218:	6878      	ldr	r0, [r7, #4]
 800721a:	4798      	blx	r3
    coef->pub.compress_data = compress_first_pass;
 800721c:	68fb      	ldr	r3, [r7, #12]
 800721e:	4a12      	ldr	r2, [pc, #72]	@ (8007268 <start_pass_coef+0xbc>)
 8007220:	605a      	str	r2, [r3, #4]
    break;
 8007222:	e01a      	b.n	800725a <start_pass_coef+0xae>
  case JBUF_CRANK_DEST:
    if (coef->whole_image[0] == NULL)
 8007224:	68fb      	ldr	r3, [r7, #12]
 8007226:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007228:	2b00      	cmp	r3, #0
 800722a:	d108      	bne.n	800723e <start_pass_coef+0x92>
      ERREXIT(cinfo, JERR_BAD_BUFFER_MODE);
 800722c:	687b      	ldr	r3, [r7, #4]
 800722e:	681b      	ldr	r3, [r3, #0]
 8007230:	2203      	movs	r2, #3
 8007232:	615a      	str	r2, [r3, #20]
 8007234:	687b      	ldr	r3, [r7, #4]
 8007236:	681b      	ldr	r3, [r3, #0]
 8007238:	681b      	ldr	r3, [r3, #0]
 800723a:	6878      	ldr	r0, [r7, #4]
 800723c:	4798      	blx	r3
    coef->pub.compress_data = compress_output;
 800723e:	68fb      	ldr	r3, [r7, #12]
 8007240:	4a0a      	ldr	r2, [pc, #40]	@ (800726c <start_pass_coef+0xc0>)
 8007242:	605a      	str	r2, [r3, #4]
    break;
 8007244:	e009      	b.n	800725a <start_pass_coef+0xae>
#endif
  default:
    ERREXIT(cinfo, JERR_BAD_BUFFER_MODE);
 8007246:	687b      	ldr	r3, [r7, #4]
 8007248:	681b      	ldr	r3, [r3, #0]
 800724a:	2203      	movs	r2, #3
 800724c:	615a      	str	r2, [r3, #20]
 800724e:	687b      	ldr	r3, [r7, #4]
 8007250:	681b      	ldr	r3, [r3, #0]
 8007252:	681b      	ldr	r3, [r3, #0]
 8007254:	6878      	ldr	r0, [r7, #4]
 8007256:	4798      	blx	r3
    break;
 8007258:	bf00      	nop
  }
}
 800725a:	bf00      	nop
 800725c:	3710      	adds	r7, #16
 800725e:	46bd      	mov	sp, r7
 8007260:	bd80      	pop	{r7, pc}
 8007262:	bf00      	nop
 8007264:	08007271 	.word	0x08007271
 8007268:	080074a5 	.word	0x080074a5
 800726c:	080076db 	.word	0x080076db

08007270 <compress_data>:
 * which we index according to the component's SOF position.
 */

METHODDEF(boolean)
compress_data (j_compress_ptr cinfo, JSAMPIMAGE input_buf)
{
 8007270:	b590      	push	{r4, r7, lr}
 8007272:	b095      	sub	sp, #84	@ 0x54
 8007274:	af04      	add	r7, sp, #16
 8007276:	6078      	str	r0, [r7, #4]
 8007278:	6039      	str	r1, [r7, #0]
  my_coef_ptr coef = (my_coef_ptr) cinfo->coef;
 800727a:	687b      	ldr	r3, [r7, #4]
 800727c:	f8d3 3190 	ldr.w	r3, [r3, #400]	@ 0x190
 8007280:	623b      	str	r3, [r7, #32]
  JDIMENSION MCU_col_num;	/* index of current MCU within row */
  JDIMENSION last_MCU_col = cinfo->MCUs_per_row - 1;
 8007282:	687b      	ldr	r3, [r7, #4]
 8007284:	f8d3 3134 	ldr.w	r3, [r3, #308]	@ 0x134
 8007288:	3b01      	subs	r3, #1
 800728a:	61fb      	str	r3, [r7, #28]
  JDIMENSION last_iMCU_row = cinfo->total_iMCU_rows - 1;
 800728c:	687b      	ldr	r3, [r7, #4]
 800728e:	f8d3 311c 	ldr.w	r3, [r3, #284]	@ 0x11c
 8007292:	3b01      	subs	r3, #1
 8007294:	61bb      	str	r3, [r7, #24]
  JDIMENSION ypos, xpos;
  jpeg_component_info *compptr;
  forward_DCT_ptr forward_DCT;

  /* Loop to write as much as one whole iMCU row */
  for (yoffset = coef->MCU_vert_offset; yoffset < coef->MCU_rows_per_iMCU_row;
 8007296:	6a3b      	ldr	r3, [r7, #32]
 8007298:	691b      	ldr	r3, [r3, #16]
 800729a:	62bb      	str	r3, [r7, #40]	@ 0x28
 800729c:	e0ef      	b.n	800747e <compress_data+0x20e>
       yoffset++) {
    for (MCU_col_num = coef->mcu_ctr; MCU_col_num <= last_MCU_col;
 800729e:	6a3b      	ldr	r3, [r7, #32]
 80072a0:	68db      	ldr	r3, [r3, #12]
 80072a2:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80072a4:	e0e0      	b.n	8007468 <compress_data+0x1f8>
       * specially.  The data in them does not matter for image reconstruction,
       * so we fill them with values that will encode to the smallest amount of
       * data, viz: all zeroes in the AC entries, DC entries equal to previous
       * block's DC value.  (Thanks to Thomas Kinsman for this idea.)
       */
      blkn = 0;
 80072a6:	2300      	movs	r3, #0
 80072a8:	63bb      	str	r3, [r7, #56]	@ 0x38
      for (ci = 0; ci < cinfo->comps_in_scan; ci++) {
 80072aa:	2300      	movs	r3, #0
 80072ac:	633b      	str	r3, [r7, #48]	@ 0x30
 80072ae:	e0bd      	b.n	800742c <compress_data+0x1bc>
	compptr = cinfo->cur_comp_info[ci];
 80072b0:	687a      	ldr	r2, [r7, #4]
 80072b2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80072b4:	3348      	adds	r3, #72	@ 0x48
 80072b6:	009b      	lsls	r3, r3, #2
 80072b8:	4413      	add	r3, r2
 80072ba:	685b      	ldr	r3, [r3, #4]
 80072bc:	617b      	str	r3, [r7, #20]
	forward_DCT = cinfo->fdct->forward_DCT[compptr->component_index];
 80072be:	687b      	ldr	r3, [r7, #4]
 80072c0:	f8d3 21a0 	ldr.w	r2, [r3, #416]	@ 0x1a0
 80072c4:	697b      	ldr	r3, [r7, #20]
 80072c6:	685b      	ldr	r3, [r3, #4]
 80072c8:	009b      	lsls	r3, r3, #2
 80072ca:	4413      	add	r3, r2
 80072cc:	685b      	ldr	r3, [r3, #4]
 80072ce:	613b      	str	r3, [r7, #16]
	blockcnt = (MCU_col_num < last_MCU_col) ? compptr->MCU_width
						: compptr->last_col_width;
 80072d0:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 80072d2:	69fb      	ldr	r3, [r7, #28]
 80072d4:	429a      	cmp	r2, r3
 80072d6:	d202      	bcs.n	80072de <compress_data+0x6e>
 80072d8:	697b      	ldr	r3, [r7, #20]
 80072da:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80072dc:	e001      	b.n	80072e2 <compress_data+0x72>
 80072de:	697b      	ldr	r3, [r7, #20]
 80072e0:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
	blockcnt = (MCU_col_num < last_MCU_col) ? compptr->MCU_width
 80072e2:	60fb      	str	r3, [r7, #12]
	xpos = MCU_col_num * compptr->MCU_sample_width;
 80072e4:	697b      	ldr	r3, [r7, #20]
 80072e6:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80072e8:	461a      	mov	r2, r3
 80072ea:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80072ec:	fb02 f303 	mul.w	r3, r2, r3
 80072f0:	60bb      	str	r3, [r7, #8]
	ypos = yoffset * compptr->DCT_v_scaled_size;
 80072f2:	697b      	ldr	r3, [r7, #20]
 80072f4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80072f6:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 80072f8:	fb02 f303 	mul.w	r3, r2, r3
 80072fc:	627b      	str	r3, [r7, #36]	@ 0x24
	/* ypos == (yoffset+yindex) * DCTSIZE */
	for (yindex = 0; yindex < compptr->MCU_height; yindex++) {
 80072fe:	2300      	movs	r3, #0
 8007300:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8007302:	e08a      	b.n	800741a <compress_data+0x1aa>
	  if (coef->iMCU_row_num < last_iMCU_row ||
 8007304:	6a3b      	ldr	r3, [r7, #32]
 8007306:	689b      	ldr	r3, [r3, #8]
 8007308:	69ba      	ldr	r2, [r7, #24]
 800730a:	429a      	cmp	r2, r3
 800730c:	d806      	bhi.n	800731c <compress_data+0xac>
	      yoffset+yindex < compptr->last_row_height) {
 800730e:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8007310:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007312:	441a      	add	r2, r3
 8007314:	697b      	ldr	r3, [r7, #20]
 8007316:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
	  if (coef->iMCU_row_num < last_iMCU_row ||
 8007318:	429a      	cmp	r2, r3
 800731a:	da49      	bge.n	80073b0 <compress_data+0x140>
	    (*forward_DCT) (cinfo, compptr,
			    input_buf[compptr->component_index],
 800731c:	697b      	ldr	r3, [r7, #20]
 800731e:	685b      	ldr	r3, [r3, #4]
 8007320:	009b      	lsls	r3, r3, #2
 8007322:	683a      	ldr	r2, [r7, #0]
 8007324:	4413      	add	r3, r2
	    (*forward_DCT) (cinfo, compptr,
 8007326:	6819      	ldr	r1, [r3, #0]
 8007328:	6a3b      	ldr	r3, [r7, #32]
 800732a:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800732c:	3206      	adds	r2, #6
 800732e:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8007332:	68fb      	ldr	r3, [r7, #12]
 8007334:	9302      	str	r3, [sp, #8]
 8007336:	68bb      	ldr	r3, [r7, #8]
 8007338:	9301      	str	r3, [sp, #4]
 800733a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800733c:	9300      	str	r3, [sp, #0]
 800733e:	693c      	ldr	r4, [r7, #16]
 8007340:	4613      	mov	r3, r2
 8007342:	460a      	mov	r2, r1
 8007344:	6979      	ldr	r1, [r7, #20]
 8007346:	6878      	ldr	r0, [r7, #4]
 8007348:	47a0      	blx	r4
			    coef->MCU_buffer[blkn],
			    ypos, xpos, (JDIMENSION) blockcnt);
	    if (blockcnt < compptr->MCU_width) {
 800734a:	697b      	ldr	r3, [r7, #20]
 800734c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800734e:	68fa      	ldr	r2, [r7, #12]
 8007350:	429a      	cmp	r2, r3
 8007352:	da54      	bge.n	80073fe <compress_data+0x18e>
	      /* Create some dummy blocks at the right edge of the image. */
	      FMEMZERO((void FAR *) coef->MCU_buffer[blkn + blockcnt],
 8007354:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8007356:	68fb      	ldr	r3, [r7, #12]
 8007358:	441a      	add	r2, r3
 800735a:	6a3b      	ldr	r3, [r7, #32]
 800735c:	3206      	adds	r2, #6
 800735e:	f853 0022 	ldr.w	r0, [r3, r2, lsl #2]
 8007362:	697b      	ldr	r3, [r7, #20]
 8007364:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8007366:	68fb      	ldr	r3, [r7, #12]
 8007368:	1ad3      	subs	r3, r2, r3
 800736a:	01db      	lsls	r3, r3, #7
 800736c:	461a      	mov	r2, r3
 800736e:	2100      	movs	r1, #0
 8007370:	f012 fb3e 	bl	80199f0 <memset>
		       (compptr->MCU_width - blockcnt) * SIZEOF(JBLOCK));
	      for (bi = blockcnt; bi < compptr->MCU_width; bi++) {
 8007374:	68fb      	ldr	r3, [r7, #12]
 8007376:	637b      	str	r3, [r7, #52]	@ 0x34
 8007378:	e014      	b.n	80073a4 <compress_data+0x134>
		coef->MCU_buffer[blkn+bi][0][0] = coef->MCU_buffer[blkn+bi-1][0][0];
 800737a:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800737c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800737e:	4413      	add	r3, r2
 8007380:	1e5a      	subs	r2, r3, #1
 8007382:	6a3b      	ldr	r3, [r7, #32]
 8007384:	3206      	adds	r2, #6
 8007386:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 800738a:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 800738c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800738e:	4419      	add	r1, r3
 8007390:	6a3b      	ldr	r3, [r7, #32]
 8007392:	3106      	adds	r1, #6
 8007394:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8007398:	f9b2 2000 	ldrsh.w	r2, [r2]
 800739c:	801a      	strh	r2, [r3, #0]
	      for (bi = blockcnt; bi < compptr->MCU_width; bi++) {
 800739e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80073a0:	3301      	adds	r3, #1
 80073a2:	637b      	str	r3, [r7, #52]	@ 0x34
 80073a4:	697b      	ldr	r3, [r7, #20]
 80073a6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80073a8:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 80073aa:	429a      	cmp	r2, r3
 80073ac:	dbe5      	blt.n	800737a <compress_data+0x10a>
	    if (blockcnt < compptr->MCU_width) {
 80073ae:	e026      	b.n	80073fe <compress_data+0x18e>
	      }
	    }
	  } else {
	    /* Create a row of dummy blocks at the bottom of the image. */
	    FMEMZERO((void FAR *) coef->MCU_buffer[blkn],
 80073b0:	6a3b      	ldr	r3, [r7, #32]
 80073b2:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 80073b4:	3206      	adds	r2, #6
 80073b6:	f853 0022 	ldr.w	r0, [r3, r2, lsl #2]
 80073ba:	697b      	ldr	r3, [r7, #20]
 80073bc:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80073be:	01db      	lsls	r3, r3, #7
 80073c0:	461a      	mov	r2, r3
 80073c2:	2100      	movs	r1, #0
 80073c4:	f012 fb14 	bl	80199f0 <memset>
		     compptr->MCU_width * SIZEOF(JBLOCK));
	    for (bi = 0; bi < compptr->MCU_width; bi++) {
 80073c8:	2300      	movs	r3, #0
 80073ca:	637b      	str	r3, [r7, #52]	@ 0x34
 80073cc:	e012      	b.n	80073f4 <compress_data+0x184>
	      coef->MCU_buffer[blkn+bi][0][0] = coef->MCU_buffer[blkn-1][0][0];
 80073ce:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80073d0:	1e5a      	subs	r2, r3, #1
 80073d2:	6a3b      	ldr	r3, [r7, #32]
 80073d4:	3206      	adds	r2, #6
 80073d6:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 80073da:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 80073dc:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80073de:	4419      	add	r1, r3
 80073e0:	6a3b      	ldr	r3, [r7, #32]
 80073e2:	3106      	adds	r1, #6
 80073e4:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 80073e8:	f9b2 2000 	ldrsh.w	r2, [r2]
 80073ec:	801a      	strh	r2, [r3, #0]
	    for (bi = 0; bi < compptr->MCU_width; bi++) {
 80073ee:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80073f0:	3301      	adds	r3, #1
 80073f2:	637b      	str	r3, [r7, #52]	@ 0x34
 80073f4:	697b      	ldr	r3, [r7, #20]
 80073f6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80073f8:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 80073fa:	429a      	cmp	r2, r3
 80073fc:	dbe7      	blt.n	80073ce <compress_data+0x15e>
	    }
	  }
	  blkn += compptr->MCU_width;
 80073fe:	697b      	ldr	r3, [r7, #20]
 8007400:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007402:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8007404:	4413      	add	r3, r2
 8007406:	63bb      	str	r3, [r7, #56]	@ 0x38
	  ypos += compptr->DCT_v_scaled_size;
 8007408:	697b      	ldr	r3, [r7, #20]
 800740a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800740c:	461a      	mov	r2, r3
 800740e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007410:	4413      	add	r3, r2
 8007412:	627b      	str	r3, [r7, #36]	@ 0x24
	for (yindex = 0; yindex < compptr->MCU_height; yindex++) {
 8007414:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007416:	3301      	adds	r3, #1
 8007418:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800741a:	697b      	ldr	r3, [r7, #20]
 800741c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800741e:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8007420:	429a      	cmp	r2, r3
 8007422:	f6ff af6f 	blt.w	8007304 <compress_data+0x94>
      for (ci = 0; ci < cinfo->comps_in_scan; ci++) {
 8007426:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007428:	3301      	adds	r3, #1
 800742a:	633b      	str	r3, [r7, #48]	@ 0x30
 800742c:	687b      	ldr	r3, [r7, #4]
 800742e:	f8d3 3120 	ldr.w	r3, [r3, #288]	@ 0x120
 8007432:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8007434:	429a      	cmp	r2, r3
 8007436:	f6ff af3b 	blt.w	80072b0 <compress_data+0x40>
	}
      }
      /* Try to write the MCU.  In event of a suspension failure, we will
       * re-DCT the MCU on restart (a bit inefficient, could be fixed...)
       */
      if (! (*cinfo->entropy->encode_mcu) (cinfo, coef->MCU_buffer)) {
 800743a:	687b      	ldr	r3, [r7, #4]
 800743c:	f8d3 31a4 	ldr.w	r3, [r3, #420]	@ 0x1a4
 8007440:	685b      	ldr	r3, [r3, #4]
 8007442:	6a3a      	ldr	r2, [r7, #32]
 8007444:	3218      	adds	r2, #24
 8007446:	4611      	mov	r1, r2
 8007448:	6878      	ldr	r0, [r7, #4]
 800744a:	4798      	blx	r3
 800744c:	4603      	mov	r3, r0
 800744e:	2b00      	cmp	r3, #0
 8007450:	d107      	bne.n	8007462 <compress_data+0x1f2>
	/* Suspension forced; update state counters and exit */
	coef->MCU_vert_offset = yoffset;
 8007452:	6a3b      	ldr	r3, [r7, #32]
 8007454:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8007456:	611a      	str	r2, [r3, #16]
	coef->mcu_ctr = MCU_col_num;
 8007458:	6a3b      	ldr	r3, [r7, #32]
 800745a:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 800745c:	60da      	str	r2, [r3, #12]
	return FALSE;
 800745e:	2300      	movs	r3, #0
 8007460:	e01c      	b.n	800749c <compress_data+0x22c>
	 MCU_col_num++) {
 8007462:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8007464:	3301      	adds	r3, #1
 8007466:	63fb      	str	r3, [r7, #60]	@ 0x3c
    for (MCU_col_num = coef->mcu_ctr; MCU_col_num <= last_MCU_col;
 8007468:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 800746a:	69fb      	ldr	r3, [r7, #28]
 800746c:	429a      	cmp	r2, r3
 800746e:	f67f af1a 	bls.w	80072a6 <compress_data+0x36>
      }
    }
    /* Completed an MCU row, but perhaps not an iMCU row */
    coef->mcu_ctr = 0;
 8007472:	6a3b      	ldr	r3, [r7, #32]
 8007474:	2200      	movs	r2, #0
 8007476:	60da      	str	r2, [r3, #12]
       yoffset++) {
 8007478:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800747a:	3301      	adds	r3, #1
 800747c:	62bb      	str	r3, [r7, #40]	@ 0x28
  for (yoffset = coef->MCU_vert_offset; yoffset < coef->MCU_rows_per_iMCU_row;
 800747e:	6a3b      	ldr	r3, [r7, #32]
 8007480:	695b      	ldr	r3, [r3, #20]
 8007482:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8007484:	429a      	cmp	r2, r3
 8007486:	f6ff af0a 	blt.w	800729e <compress_data+0x2e>
  }
  /* Completed the iMCU row, advance counters for next one */
  coef->iMCU_row_num++;
 800748a:	6a3b      	ldr	r3, [r7, #32]
 800748c:	689b      	ldr	r3, [r3, #8]
 800748e:	1c5a      	adds	r2, r3, #1
 8007490:	6a3b      	ldr	r3, [r7, #32]
 8007492:	609a      	str	r2, [r3, #8]
  start_iMCU_row(cinfo);
 8007494:	6878      	ldr	r0, [r7, #4]
 8007496:	f7ff fe57 	bl	8007148 <start_iMCU_row>
  return TRUE;
 800749a:	2301      	movs	r3, #1
}
 800749c:	4618      	mov	r0, r3
 800749e:	3744      	adds	r7, #68	@ 0x44
 80074a0:	46bd      	mov	sp, r7
 80074a2:	bd90      	pop	{r4, r7, pc}

080074a4 <compress_first_pass>:
 * at the scan-dependent variables (MCU dimensions, etc).
 */

METHODDEF(boolean)
compress_first_pass (j_compress_ptr cinfo, JSAMPIMAGE input_buf)
{
 80074a4:	b590      	push	{r4, r7, lr}
 80074a6:	b099      	sub	sp, #100	@ 0x64
 80074a8:	af04      	add	r7, sp, #16
 80074aa:	6078      	str	r0, [r7, #4]
 80074ac:	6039      	str	r1, [r7, #0]
  my_coef_ptr coef = (my_coef_ptr) cinfo->coef;
 80074ae:	687b      	ldr	r3, [r7, #4]
 80074b0:	f8d3 3190 	ldr.w	r3, [r3, #400]	@ 0x190
 80074b4:	62bb      	str	r3, [r7, #40]	@ 0x28
  JDIMENSION last_iMCU_row = cinfo->total_iMCU_rows - 1;
 80074b6:	687b      	ldr	r3, [r7, #4]
 80074b8:	f8d3 311c 	ldr.w	r3, [r3, #284]	@ 0x11c
 80074bc:	3b01      	subs	r3, #1
 80074be:	627b      	str	r3, [r7, #36]	@ 0x24
  jpeg_component_info *compptr;
  JBLOCKARRAY buffer;
  JBLOCKROW thisblockrow, lastblockrow;
  forward_DCT_ptr forward_DCT;

  for (ci = 0, compptr = cinfo->comp_info; ci < cinfo->num_components;
 80074c0:	2300      	movs	r3, #0
 80074c2:	647b      	str	r3, [r7, #68]	@ 0x44
 80074c4:	687b      	ldr	r3, [r7, #4]
 80074c6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80074c8:	637b      	str	r3, [r7, #52]	@ 0x34
 80074ca:	e0f7      	b.n	80076bc <compress_first_pass+0x218>
       ci++, compptr++) {
    /* Align the virtual buffer for this component. */
    buffer = (*cinfo->mem->access_virt_barray)
 80074cc:	687b      	ldr	r3, [r7, #4]
 80074ce:	685b      	ldr	r3, [r3, #4]
 80074d0:	6a1c      	ldr	r4, [r3, #32]
 80074d2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80074d4:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 80074d6:	3210      	adds	r2, #16
 80074d8:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
      ((j_common_ptr) cinfo, coef->whole_image[ci],
       coef->iMCU_row_num * compptr->v_samp_factor,
 80074dc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80074de:	689b      	ldr	r3, [r3, #8]
 80074e0:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 80074e2:	68d2      	ldr	r2, [r2, #12]
    buffer = (*cinfo->mem->access_virt_barray)
 80074e4:	fb03 f202 	mul.w	r2, r3, r2
       (JDIMENSION) compptr->v_samp_factor, TRUE);
 80074e8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80074ea:	68db      	ldr	r3, [r3, #12]
    buffer = (*cinfo->mem->access_virt_barray)
 80074ec:	4618      	mov	r0, r3
 80074ee:	2301      	movs	r3, #1
 80074f0:	9300      	str	r3, [sp, #0]
 80074f2:	4603      	mov	r3, r0
 80074f4:	6878      	ldr	r0, [r7, #4]
 80074f6:	47a0      	blx	r4
 80074f8:	6238      	str	r0, [r7, #32]
    /* Count non-dummy DCT block rows in this iMCU row. */
    if (coef->iMCU_row_num < last_iMCU_row)
 80074fa:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80074fc:	689b      	ldr	r3, [r3, #8]
 80074fe:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8007500:	429a      	cmp	r2, r3
 8007502:	d903      	bls.n	800750c <compress_first_pass+0x68>
      block_rows = compptr->v_samp_factor;
 8007504:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8007506:	68db      	ldr	r3, [r3, #12]
 8007508:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800750a:	e00f      	b.n	800752c <compress_first_pass+0x88>
    else {
      /* NB: can't use last_row_height here, since may not be set! */
      block_rows = (int) (compptr->height_in_blocks % compptr->v_samp_factor);
 800750c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800750e:	6a1b      	ldr	r3, [r3, #32]
 8007510:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8007512:	68d2      	ldr	r2, [r2, #12]
 8007514:	fbb3 f1f2 	udiv	r1, r3, r2
 8007518:	fb01 f202 	mul.w	r2, r1, r2
 800751c:	1a9b      	subs	r3, r3, r2
 800751e:	63fb      	str	r3, [r7, #60]	@ 0x3c
      if (block_rows == 0) block_rows = compptr->v_samp_factor;
 8007520:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8007522:	2b00      	cmp	r3, #0
 8007524:	d102      	bne.n	800752c <compress_first_pass+0x88>
 8007526:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8007528:	68db      	ldr	r3, [r3, #12]
 800752a:	63fb      	str	r3, [r7, #60]	@ 0x3c
    }
    blocks_across = compptr->width_in_blocks;
 800752c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800752e:	69db      	ldr	r3, [r3, #28]
 8007530:	61fb      	str	r3, [r7, #28]
    h_samp_factor = compptr->h_samp_factor;
 8007532:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8007534:	689b      	ldr	r3, [r3, #8]
 8007536:	61bb      	str	r3, [r7, #24]
    /* Count number of dummy blocks to be added at the right margin. */
    ndummy = (int) (blocks_across % h_samp_factor);
 8007538:	69ba      	ldr	r2, [r7, #24]
 800753a:	69fb      	ldr	r3, [r7, #28]
 800753c:	fbb3 f1f2 	udiv	r1, r3, r2
 8007540:	fb01 f202 	mul.w	r2, r1, r2
 8007544:	1a9b      	subs	r3, r3, r2
 8007546:	63bb      	str	r3, [r7, #56]	@ 0x38
    if (ndummy > 0)
 8007548:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800754a:	2b00      	cmp	r3, #0
 800754c:	dd03      	ble.n	8007556 <compress_first_pass+0xb2>
      ndummy = h_samp_factor - ndummy;
 800754e:	69ba      	ldr	r2, [r7, #24]
 8007550:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007552:	1ad3      	subs	r3, r2, r3
 8007554:	63bb      	str	r3, [r7, #56]	@ 0x38
    forward_DCT = cinfo->fdct->forward_DCT[ci];
 8007556:	687b      	ldr	r3, [r7, #4]
 8007558:	f8d3 21a0 	ldr.w	r2, [r3, #416]	@ 0x1a0
 800755c:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800755e:	009b      	lsls	r3, r3, #2
 8007560:	4413      	add	r3, r2
 8007562:	685b      	ldr	r3, [r3, #4]
 8007564:	617b      	str	r3, [r7, #20]
    /* Perform DCT for all non-dummy blocks in this iMCU row.  Each call
     * on forward_DCT processes a complete horizontal row of DCT blocks.
     */
    for (block_row = 0; block_row < block_rows; block_row++) {
 8007566:	2300      	movs	r3, #0
 8007568:	643b      	str	r3, [r7, #64]	@ 0x40
 800756a:	e041      	b.n	80075f0 <compress_first_pass+0x14c>
      thisblockrow = buffer[block_row];
 800756c:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800756e:	009b      	lsls	r3, r3, #2
 8007570:	6a3a      	ldr	r2, [r7, #32]
 8007572:	4413      	add	r3, r2
 8007574:	681b      	ldr	r3, [r3, #0]
 8007576:	633b      	str	r3, [r7, #48]	@ 0x30
      (*forward_DCT) (cinfo, compptr, input_buf[ci], thisblockrow,
 8007578:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800757a:	009b      	lsls	r3, r3, #2
 800757c:	683a      	ldr	r2, [r7, #0]
 800757e:	4413      	add	r3, r2
 8007580:	6819      	ldr	r1, [r3, #0]
		      (JDIMENSION) (block_row * compptr->DCT_v_scaled_size),
 8007582:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8007584:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007586:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8007588:	fb02 f303 	mul.w	r3, r2, r3
      (*forward_DCT) (cinfo, compptr, input_buf[ci], thisblockrow,
 800758c:	461a      	mov	r2, r3
 800758e:	69fb      	ldr	r3, [r7, #28]
 8007590:	9302      	str	r3, [sp, #8]
 8007592:	2300      	movs	r3, #0
 8007594:	9301      	str	r3, [sp, #4]
 8007596:	9200      	str	r2, [sp, #0]
 8007598:	697c      	ldr	r4, [r7, #20]
 800759a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800759c:	460a      	mov	r2, r1
 800759e:	6b79      	ldr	r1, [r7, #52]	@ 0x34
 80075a0:	6878      	ldr	r0, [r7, #4]
 80075a2:	47a0      	blx	r4
		      (JDIMENSION) 0, blocks_across);
      if (ndummy > 0) {
 80075a4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80075a6:	2b00      	cmp	r3, #0
 80075a8:	dd1f      	ble.n	80075ea <compress_first_pass+0x146>
	/* Create dummy blocks at the right edge of the image. */
	thisblockrow += blocks_across; /* => first dummy block */
 80075aa:	69fb      	ldr	r3, [r7, #28]
 80075ac:	01db      	lsls	r3, r3, #7
 80075ae:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80075b0:	4413      	add	r3, r2
 80075b2:	633b      	str	r3, [r7, #48]	@ 0x30
	FMEMZERO((void FAR *) thisblockrow, ndummy * SIZEOF(JBLOCK));
 80075b4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80075b6:	01db      	lsls	r3, r3, #7
 80075b8:	461a      	mov	r2, r3
 80075ba:	2100      	movs	r1, #0
 80075bc:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 80075be:	f012 fa17 	bl	80199f0 <memset>
	lastDC = thisblockrow[-1][0];
 80075c2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80075c4:	3b80      	subs	r3, #128	@ 0x80
 80075c6:	881b      	ldrh	r3, [r3, #0]
 80075c8:	81fb      	strh	r3, [r7, #14]
	for (bi = 0; bi < ndummy; bi++) {
 80075ca:	2300      	movs	r3, #0
 80075cc:	64bb      	str	r3, [r7, #72]	@ 0x48
 80075ce:	e008      	b.n	80075e2 <compress_first_pass+0x13e>
	  thisblockrow[bi][0] = lastDC;
 80075d0:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80075d2:	01db      	lsls	r3, r3, #7
 80075d4:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80075d6:	4413      	add	r3, r2
 80075d8:	89fa      	ldrh	r2, [r7, #14]
 80075da:	801a      	strh	r2, [r3, #0]
	for (bi = 0; bi < ndummy; bi++) {
 80075dc:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80075de:	3301      	adds	r3, #1
 80075e0:	64bb      	str	r3, [r7, #72]	@ 0x48
 80075e2:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 80075e4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80075e6:	429a      	cmp	r2, r3
 80075e8:	dbf2      	blt.n	80075d0 <compress_first_pass+0x12c>
    for (block_row = 0; block_row < block_rows; block_row++) {
 80075ea:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80075ec:	3301      	adds	r3, #1
 80075ee:	643b      	str	r3, [r7, #64]	@ 0x40
 80075f0:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 80075f2:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80075f4:	429a      	cmp	r2, r3
 80075f6:	dbb9      	blt.n	800756c <compress_first_pass+0xc8>
    /* If at end of image, create dummy block rows as needed.
     * The tricky part here is that within each MCU, we want the DC values
     * of the dummy blocks to match the last real block's DC value.
     * This squeezes a few more bytes out of the resulting file...
     */
    if (coef->iMCU_row_num == last_iMCU_row) {
 80075f8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80075fa:	689b      	ldr	r3, [r3, #8]
 80075fc:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80075fe:	429a      	cmp	r2, r3
 8007600:	d156      	bne.n	80076b0 <compress_first_pass+0x20c>
      blocks_across += ndummy;	/* include lower right corner */
 8007602:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007604:	69fa      	ldr	r2, [r7, #28]
 8007606:	4413      	add	r3, r2
 8007608:	61fb      	str	r3, [r7, #28]
      MCUs_across = blocks_across / h_samp_factor;
 800760a:	69bb      	ldr	r3, [r7, #24]
 800760c:	69fa      	ldr	r2, [r7, #28]
 800760e:	fbb2 f3f3 	udiv	r3, r2, r3
 8007612:	613b      	str	r3, [r7, #16]
      for (block_row = block_rows; block_row < compptr->v_samp_factor;
 8007614:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8007616:	643b      	str	r3, [r7, #64]	@ 0x40
 8007618:	e045      	b.n	80076a6 <compress_first_pass+0x202>
	   block_row++) {
	thisblockrow = buffer[block_row];
 800761a:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800761c:	009b      	lsls	r3, r3, #2
 800761e:	6a3a      	ldr	r2, [r7, #32]
 8007620:	4413      	add	r3, r2
 8007622:	681b      	ldr	r3, [r3, #0]
 8007624:	633b      	str	r3, [r7, #48]	@ 0x30
	lastblockrow = buffer[block_row-1];
 8007626:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8007628:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800762c:	3b01      	subs	r3, #1
 800762e:	009b      	lsls	r3, r3, #2
 8007630:	6a3a      	ldr	r2, [r7, #32]
 8007632:	4413      	add	r3, r2
 8007634:	681b      	ldr	r3, [r3, #0]
 8007636:	62fb      	str	r3, [r7, #44]	@ 0x2c
	FMEMZERO((void FAR *) thisblockrow,
 8007638:	69fb      	ldr	r3, [r7, #28]
 800763a:	01db      	lsls	r3, r3, #7
 800763c:	461a      	mov	r2, r3
 800763e:	2100      	movs	r1, #0
 8007640:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8007642:	f012 f9d5 	bl	80199f0 <memset>
		 (size_t) (blocks_across * SIZEOF(JBLOCK)));
	for (MCUindex = 0; MCUindex < MCUs_across; MCUindex++) {
 8007646:	2300      	movs	r3, #0
 8007648:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800764a:	e025      	b.n	8007698 <compress_first_pass+0x1f4>
	  lastDC = lastblockrow[h_samp_factor-1][0];
 800764c:	69bb      	ldr	r3, [r7, #24]
 800764e:	f103 7300 	add.w	r3, r3, #33554432	@ 0x2000000
 8007652:	3b01      	subs	r3, #1
 8007654:	01db      	lsls	r3, r3, #7
 8007656:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8007658:	4413      	add	r3, r2
 800765a:	881b      	ldrh	r3, [r3, #0]
 800765c:	81fb      	strh	r3, [r7, #14]
	  for (bi = 0; bi < h_samp_factor; bi++) {
 800765e:	2300      	movs	r3, #0
 8007660:	64bb      	str	r3, [r7, #72]	@ 0x48
 8007662:	e008      	b.n	8007676 <compress_first_pass+0x1d2>
	    thisblockrow[bi][0] = lastDC;
 8007664:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8007666:	01db      	lsls	r3, r3, #7
 8007668:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800766a:	4413      	add	r3, r2
 800766c:	89fa      	ldrh	r2, [r7, #14]
 800766e:	801a      	strh	r2, [r3, #0]
	  for (bi = 0; bi < h_samp_factor; bi++) {
 8007670:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8007672:	3301      	adds	r3, #1
 8007674:	64bb      	str	r3, [r7, #72]	@ 0x48
 8007676:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8007678:	69bb      	ldr	r3, [r7, #24]
 800767a:	429a      	cmp	r2, r3
 800767c:	dbf2      	blt.n	8007664 <compress_first_pass+0x1c0>
	  }
	  thisblockrow += h_samp_factor; /* advance to next MCU in row */
 800767e:	69bb      	ldr	r3, [r7, #24]
 8007680:	01db      	lsls	r3, r3, #7
 8007682:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8007684:	4413      	add	r3, r2
 8007686:	633b      	str	r3, [r7, #48]	@ 0x30
	  lastblockrow += h_samp_factor;
 8007688:	69bb      	ldr	r3, [r7, #24]
 800768a:	01db      	lsls	r3, r3, #7
 800768c:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800768e:	4413      	add	r3, r2
 8007690:	62fb      	str	r3, [r7, #44]	@ 0x2c
	for (MCUindex = 0; MCUindex < MCUs_across; MCUindex++) {
 8007692:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8007694:	3301      	adds	r3, #1
 8007696:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8007698:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 800769a:	693b      	ldr	r3, [r7, #16]
 800769c:	429a      	cmp	r2, r3
 800769e:	d3d5      	bcc.n	800764c <compress_first_pass+0x1a8>
	   block_row++) {
 80076a0:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80076a2:	3301      	adds	r3, #1
 80076a4:	643b      	str	r3, [r7, #64]	@ 0x40
      for (block_row = block_rows; block_row < compptr->v_samp_factor;
 80076a6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80076a8:	68db      	ldr	r3, [r3, #12]
 80076aa:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 80076ac:	429a      	cmp	r2, r3
 80076ae:	dbb4      	blt.n	800761a <compress_first_pass+0x176>
       ci++, compptr++) {
 80076b0:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80076b2:	3301      	adds	r3, #1
 80076b4:	647b      	str	r3, [r7, #68]	@ 0x44
 80076b6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80076b8:	3358      	adds	r3, #88	@ 0x58
 80076ba:	637b      	str	r3, [r7, #52]	@ 0x34
  for (ci = 0, compptr = cinfo->comp_info; ci < cinfo->num_components;
 80076bc:	687b      	ldr	r3, [r7, #4]
 80076be:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80076c0:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 80076c2:	429a      	cmp	r2, r3
 80076c4:	f6ff af02 	blt.w	80074cc <compress_first_pass+0x28>
  /* NB: compress_output will increment iMCU_row_num if successful.
   * A suspension return will result in redoing all the work above next time.
   */

  /* Emit data to the entropy encoder, sharing code with subsequent passes */
  return compress_output(cinfo, input_buf);
 80076c8:	6839      	ldr	r1, [r7, #0]
 80076ca:	6878      	ldr	r0, [r7, #4]
 80076cc:	f000 f805 	bl	80076da <compress_output>
 80076d0:	4603      	mov	r3, r0
}
 80076d2:	4618      	mov	r0, r3
 80076d4:	3754      	adds	r7, #84	@ 0x54
 80076d6:	46bd      	mov	sp, r7
 80076d8:	bd90      	pop	{r4, r7, pc}

080076da <compress_output>:
 * NB: input_buf is ignored; it is likely to be a NULL pointer.
 */

METHODDEF(boolean)
compress_output (j_compress_ptr cinfo, JSAMPIMAGE input_buf)
{
 80076da:	b590      	push	{r4, r7, lr}
 80076dc:	b093      	sub	sp, #76	@ 0x4c
 80076de:	af02      	add	r7, sp, #8
 80076e0:	6078      	str	r0, [r7, #4]
 80076e2:	6039      	str	r1, [r7, #0]
  my_coef_ptr coef = (my_coef_ptr) cinfo->coef;
 80076e4:	687b      	ldr	r3, [r7, #4]
 80076e6:	f8d3 3190 	ldr.w	r3, [r3, #400]	@ 0x190
 80076ea:	623b      	str	r3, [r7, #32]

  /* Align the virtual buffers for the components used in this scan.
   * NB: during first pass, this is safe only because the buffers will
   * already be aligned properly, so jmemmgr.c won't need to do any I/O.
   */
  for (ci = 0; ci < cinfo->comps_in_scan; ci++) {
 80076ec:	2300      	movs	r3, #0
 80076ee:	637b      	str	r3, [r7, #52]	@ 0x34
 80076f0:	e027      	b.n	8007742 <compress_output+0x68>
    compptr = cinfo->cur_comp_info[ci];
 80076f2:	687a      	ldr	r2, [r7, #4]
 80076f4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80076f6:	3348      	adds	r3, #72	@ 0x48
 80076f8:	009b      	lsls	r3, r3, #2
 80076fa:	4413      	add	r3, r2
 80076fc:	685b      	ldr	r3, [r3, #4]
 80076fe:	61fb      	str	r3, [r7, #28]
    buffer[ci] = (*cinfo->mem->access_virt_barray)
 8007700:	687b      	ldr	r3, [r7, #4]
 8007702:	685b      	ldr	r3, [r3, #4]
 8007704:	6a1c      	ldr	r4, [r3, #32]
      ((j_common_ptr) cinfo, coef->whole_image[compptr->component_index],
 8007706:	69fb      	ldr	r3, [r7, #28]
 8007708:	685a      	ldr	r2, [r3, #4]
    buffer[ci] = (*cinfo->mem->access_virt_barray)
 800770a:	6a3b      	ldr	r3, [r7, #32]
 800770c:	3210      	adds	r2, #16
 800770e:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
       coef->iMCU_row_num * compptr->v_samp_factor,
 8007712:	6a3b      	ldr	r3, [r7, #32]
 8007714:	689b      	ldr	r3, [r3, #8]
 8007716:	69fa      	ldr	r2, [r7, #28]
 8007718:	68d2      	ldr	r2, [r2, #12]
    buffer[ci] = (*cinfo->mem->access_virt_barray)
 800771a:	fb03 f202 	mul.w	r2, r3, r2
       (JDIMENSION) compptr->v_samp_factor, FALSE);
 800771e:	69fb      	ldr	r3, [r7, #28]
 8007720:	68db      	ldr	r3, [r3, #12]
    buffer[ci] = (*cinfo->mem->access_virt_barray)
 8007722:	4618      	mov	r0, r3
 8007724:	2300      	movs	r3, #0
 8007726:	9300      	str	r3, [sp, #0]
 8007728:	4603      	mov	r3, r0
 800772a:	6878      	ldr	r0, [r7, #4]
 800772c:	47a0      	blx	r4
 800772e:	4602      	mov	r2, r0
 8007730:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8007732:	009b      	lsls	r3, r3, #2
 8007734:	3340      	adds	r3, #64	@ 0x40
 8007736:	443b      	add	r3, r7
 8007738:	f843 2c38 	str.w	r2, [r3, #-56]
  for (ci = 0; ci < cinfo->comps_in_scan; ci++) {
 800773c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800773e:	3301      	adds	r3, #1
 8007740:	637b      	str	r3, [r7, #52]	@ 0x34
 8007742:	687b      	ldr	r3, [r7, #4]
 8007744:	f8d3 3120 	ldr.w	r3, [r3, #288]	@ 0x120
 8007748:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800774a:	429a      	cmp	r2, r3
 800774c:	dbd1      	blt.n	80076f2 <compress_output+0x18>
  }

  /* Loop to process one whole iMCU row */
  for (yoffset = coef->MCU_vert_offset; yoffset < coef->MCU_rows_per_iMCU_row;
 800774e:	6a3b      	ldr	r3, [r7, #32]
 8007750:	691b      	ldr	r3, [r3, #16]
 8007752:	62bb      	str	r3, [r7, #40]	@ 0x28
 8007754:	e073      	b.n	800783e <compress_output+0x164>
       yoffset++) {
    for (MCU_col_num = coef->mcu_ctr; MCU_col_num < cinfo->MCUs_per_row;
 8007756:	6a3b      	ldr	r3, [r7, #32]
 8007758:	68db      	ldr	r3, [r3, #12]
 800775a:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800775c:	e063      	b.n	8007826 <compress_output+0x14c>
	 MCU_col_num++) {
      /* Construct list of pointers to DCT blocks belonging to this MCU */
      blkn = 0;			/* index of current DCT block within MCU */
 800775e:	2300      	movs	r3, #0
 8007760:	63bb      	str	r3, [r7, #56]	@ 0x38
      for (ci = 0; ci < cinfo->comps_in_scan; ci++) {
 8007762:	2300      	movs	r3, #0
 8007764:	637b      	str	r3, [r7, #52]	@ 0x34
 8007766:	e041      	b.n	80077ec <compress_output+0x112>
	compptr = cinfo->cur_comp_info[ci];
 8007768:	687a      	ldr	r2, [r7, #4]
 800776a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800776c:	3348      	adds	r3, #72	@ 0x48
 800776e:	009b      	lsls	r3, r3, #2
 8007770:	4413      	add	r3, r2
 8007772:	685b      	ldr	r3, [r3, #4]
 8007774:	61fb      	str	r3, [r7, #28]
	start_col = MCU_col_num * compptr->MCU_width;
 8007776:	69fb      	ldr	r3, [r7, #28]
 8007778:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800777a:	461a      	mov	r2, r3
 800777c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800777e:	fb02 f303 	mul.w	r3, r2, r3
 8007782:	61bb      	str	r3, [r7, #24]
	for (yindex = 0; yindex < compptr->MCU_height; yindex++) {
 8007784:	2300      	movs	r3, #0
 8007786:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8007788:	e028      	b.n	80077dc <compress_output+0x102>
	  buffer_ptr = buffer[ci][yindex+yoffset] + start_col;
 800778a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800778c:	009b      	lsls	r3, r3, #2
 800778e:	3340      	adds	r3, #64	@ 0x40
 8007790:	443b      	add	r3, r7
 8007792:	f853 2c38 	ldr.w	r2, [r3, #-56]
 8007796:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8007798:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800779a:	440b      	add	r3, r1
 800779c:	009b      	lsls	r3, r3, #2
 800779e:	4413      	add	r3, r2
 80077a0:	681a      	ldr	r2, [r3, #0]
 80077a2:	69bb      	ldr	r3, [r7, #24]
 80077a4:	01db      	lsls	r3, r3, #7
 80077a6:	4413      	add	r3, r2
 80077a8:	627b      	str	r3, [r7, #36]	@ 0x24
	  for (xindex = 0; xindex < compptr->MCU_width; xindex++) {
 80077aa:	2300      	movs	r3, #0
 80077ac:	633b      	str	r3, [r7, #48]	@ 0x30
 80077ae:	e00d      	b.n	80077cc <compress_output+0xf2>
	    coef->MCU_buffer[blkn++] = buffer_ptr++;
 80077b0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80077b2:	f103 0280 	add.w	r2, r3, #128	@ 0x80
 80077b6:	627a      	str	r2, [r7, #36]	@ 0x24
 80077b8:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 80077ba:	1c51      	adds	r1, r2, #1
 80077bc:	63b9      	str	r1, [r7, #56]	@ 0x38
 80077be:	6a39      	ldr	r1, [r7, #32]
 80077c0:	3206      	adds	r2, #6
 80077c2:	f841 3022 	str.w	r3, [r1, r2, lsl #2]
	  for (xindex = 0; xindex < compptr->MCU_width; xindex++) {
 80077c6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80077c8:	3301      	adds	r3, #1
 80077ca:	633b      	str	r3, [r7, #48]	@ 0x30
 80077cc:	69fb      	ldr	r3, [r7, #28]
 80077ce:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80077d0:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80077d2:	429a      	cmp	r2, r3
 80077d4:	dbec      	blt.n	80077b0 <compress_output+0xd6>
	for (yindex = 0; yindex < compptr->MCU_height; yindex++) {
 80077d6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80077d8:	3301      	adds	r3, #1
 80077da:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80077dc:	69fb      	ldr	r3, [r7, #28]
 80077de:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80077e0:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80077e2:	429a      	cmp	r2, r3
 80077e4:	dbd1      	blt.n	800778a <compress_output+0xb0>
      for (ci = 0; ci < cinfo->comps_in_scan; ci++) {
 80077e6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80077e8:	3301      	adds	r3, #1
 80077ea:	637b      	str	r3, [r7, #52]	@ 0x34
 80077ec:	687b      	ldr	r3, [r7, #4]
 80077ee:	f8d3 3120 	ldr.w	r3, [r3, #288]	@ 0x120
 80077f2:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 80077f4:	429a      	cmp	r2, r3
 80077f6:	dbb7      	blt.n	8007768 <compress_output+0x8e>
	  }
	}
      }
      /* Try to write the MCU. */
      if (! (*cinfo->entropy->encode_mcu) (cinfo, coef->MCU_buffer)) {
 80077f8:	687b      	ldr	r3, [r7, #4]
 80077fa:	f8d3 31a4 	ldr.w	r3, [r3, #420]	@ 0x1a4
 80077fe:	685b      	ldr	r3, [r3, #4]
 8007800:	6a3a      	ldr	r2, [r7, #32]
 8007802:	3218      	adds	r2, #24
 8007804:	4611      	mov	r1, r2
 8007806:	6878      	ldr	r0, [r7, #4]
 8007808:	4798      	blx	r3
 800780a:	4603      	mov	r3, r0
 800780c:	2b00      	cmp	r3, #0
 800780e:	d107      	bne.n	8007820 <compress_output+0x146>
	/* Suspension forced; update state counters and exit */
	coef->MCU_vert_offset = yoffset;
 8007810:	6a3b      	ldr	r3, [r7, #32]
 8007812:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8007814:	611a      	str	r2, [r3, #16]
	coef->mcu_ctr = MCU_col_num;
 8007816:	6a3b      	ldr	r3, [r7, #32]
 8007818:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 800781a:	60da      	str	r2, [r3, #12]
	return FALSE;
 800781c:	2300      	movs	r3, #0
 800781e:	e01c      	b.n	800785a <compress_output+0x180>
	 MCU_col_num++) {
 8007820:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8007822:	3301      	adds	r3, #1
 8007824:	63fb      	str	r3, [r7, #60]	@ 0x3c
    for (MCU_col_num = coef->mcu_ctr; MCU_col_num < cinfo->MCUs_per_row;
 8007826:	687b      	ldr	r3, [r7, #4]
 8007828:	f8d3 3134 	ldr.w	r3, [r3, #308]	@ 0x134
 800782c:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 800782e:	429a      	cmp	r2, r3
 8007830:	d395      	bcc.n	800775e <compress_output+0x84>
      }
    }
    /* Completed an MCU row, but perhaps not an iMCU row */
    coef->mcu_ctr = 0;
 8007832:	6a3b      	ldr	r3, [r7, #32]
 8007834:	2200      	movs	r2, #0
 8007836:	60da      	str	r2, [r3, #12]
       yoffset++) {
 8007838:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800783a:	3301      	adds	r3, #1
 800783c:	62bb      	str	r3, [r7, #40]	@ 0x28
  for (yoffset = coef->MCU_vert_offset; yoffset < coef->MCU_rows_per_iMCU_row;
 800783e:	6a3b      	ldr	r3, [r7, #32]
 8007840:	695b      	ldr	r3, [r3, #20]
 8007842:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8007844:	429a      	cmp	r2, r3
 8007846:	db86      	blt.n	8007756 <compress_output+0x7c>
  }
  /* Completed the iMCU row, advance counters for next one */
  coef->iMCU_row_num++;
 8007848:	6a3b      	ldr	r3, [r7, #32]
 800784a:	689b      	ldr	r3, [r3, #8]
 800784c:	1c5a      	adds	r2, r3, #1
 800784e:	6a3b      	ldr	r3, [r7, #32]
 8007850:	609a      	str	r2, [r3, #8]
  start_iMCU_row(cinfo);
 8007852:	6878      	ldr	r0, [r7, #4]
 8007854:	f7ff fc78 	bl	8007148 <start_iMCU_row>
  return TRUE;
 8007858:	2301      	movs	r3, #1
}
 800785a:	4618      	mov	r0, r3
 800785c:	3744      	adds	r7, #68	@ 0x44
 800785e:	46bd      	mov	sp, r7
 8007860:	bd90      	pop	{r4, r7, pc}
	...

08007864 <jinit_c_coef_controller>:
 * Initialize coefficient buffer controller.
 */

GLOBAL(void)
jinit_c_coef_controller (j_compress_ptr cinfo, boolean need_full_buffer)
{
 8007864:	b5b0      	push	{r4, r5, r7, lr}
 8007866:	b08a      	sub	sp, #40	@ 0x28
 8007868:	af02      	add	r7, sp, #8
 800786a:	6078      	str	r0, [r7, #4]
 800786c:	6039      	str	r1, [r7, #0]
  my_coef_ptr coef;

  coef = (my_coef_ptr)
    (*cinfo->mem->alloc_small) ((j_common_ptr) cinfo, JPOOL_IMAGE,
 800786e:	687b      	ldr	r3, [r7, #4]
 8007870:	685b      	ldr	r3, [r3, #4]
 8007872:	681b      	ldr	r3, [r3, #0]
 8007874:	2268      	movs	r2, #104	@ 0x68
 8007876:	2101      	movs	r1, #1
 8007878:	6878      	ldr	r0, [r7, #4]
 800787a:	4798      	blx	r3
 800787c:	6138      	str	r0, [r7, #16]
				SIZEOF(my_coef_controller));
  cinfo->coef = (struct jpeg_c_coef_controller *) coef;
 800787e:	687b      	ldr	r3, [r7, #4]
 8007880:	693a      	ldr	r2, [r7, #16]
 8007882:	f8c3 2190 	str.w	r2, [r3, #400]	@ 0x190
  coef->pub.start_pass = start_pass_coef;
 8007886:	693b      	ldr	r3, [r7, #16]
 8007888:	4a30      	ldr	r2, [pc, #192]	@ (800794c <jinit_c_coef_controller+0xe8>)
 800788a:	601a      	str	r2, [r3, #0]

  /* Create the coefficient buffer. */
  if (need_full_buffer) {
 800788c:	683b      	ldr	r3, [r7, #0]
 800788e:	2b00      	cmp	r3, #0
 8007890:	d039      	beq.n	8007906 <jinit_c_coef_controller+0xa2>
    /* Allocate a full-image virtual array for each component, */
    /* padded to a multiple of samp_factor DCT blocks in each direction. */
    int ci;
    jpeg_component_info *compptr;

    for (ci = 0, compptr = cinfo->comp_info; ci < cinfo->num_components;
 8007892:	2300      	movs	r3, #0
 8007894:	61fb      	str	r3, [r7, #28]
 8007896:	687b      	ldr	r3, [r7, #4]
 8007898:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800789a:	61bb      	str	r3, [r7, #24]
 800789c:	e02d      	b.n	80078fa <jinit_c_coef_controller+0x96>
	 ci++, compptr++) {
      coef->whole_image[ci] = (*cinfo->mem->request_virt_barray)
 800789e:	687b      	ldr	r3, [r7, #4]
 80078a0:	685b      	ldr	r3, [r3, #4]
 80078a2:	695c      	ldr	r4, [r3, #20]
	((j_common_ptr) cinfo, JPOOL_IMAGE, FALSE,
	 (JDIMENSION) jround_up((long) compptr->width_in_blocks,
 80078a4:	69bb      	ldr	r3, [r7, #24]
 80078a6:	69db      	ldr	r3, [r3, #28]
 80078a8:	461a      	mov	r2, r3
				(long) compptr->h_samp_factor),
 80078aa:	69bb      	ldr	r3, [r7, #24]
 80078ac:	689b      	ldr	r3, [r3, #8]
	 (JDIMENSION) jround_up((long) compptr->width_in_blocks,
 80078ae:	4619      	mov	r1, r3
 80078b0:	4610      	mov	r0, r2
 80078b2:	f011 ff7d 	bl	80197b0 <jround_up>
 80078b6:	4603      	mov	r3, r0
      coef->whole_image[ci] = (*cinfo->mem->request_virt_barray)
 80078b8:	461d      	mov	r5, r3
	 (JDIMENSION) jround_up((long) compptr->height_in_blocks,
 80078ba:	69bb      	ldr	r3, [r7, #24]
 80078bc:	6a1b      	ldr	r3, [r3, #32]
 80078be:	461a      	mov	r2, r3
				(long) compptr->v_samp_factor),
 80078c0:	69bb      	ldr	r3, [r7, #24]
 80078c2:	68db      	ldr	r3, [r3, #12]
	 (JDIMENSION) jround_up((long) compptr->height_in_blocks,
 80078c4:	4619      	mov	r1, r3
 80078c6:	4610      	mov	r0, r2
 80078c8:	f011 ff72 	bl	80197b0 <jround_up>
 80078cc:	4603      	mov	r3, r0
      coef->whole_image[ci] = (*cinfo->mem->request_virt_barray)
 80078ce:	461a      	mov	r2, r3
	 (JDIMENSION) compptr->v_samp_factor);
 80078d0:	69bb      	ldr	r3, [r7, #24]
 80078d2:	68db      	ldr	r3, [r3, #12]
      coef->whole_image[ci] = (*cinfo->mem->request_virt_barray)
 80078d4:	9301      	str	r3, [sp, #4]
 80078d6:	9200      	str	r2, [sp, #0]
 80078d8:	462b      	mov	r3, r5
 80078da:	2200      	movs	r2, #0
 80078dc:	2101      	movs	r1, #1
 80078de:	6878      	ldr	r0, [r7, #4]
 80078e0:	47a0      	blx	r4
 80078e2:	4601      	mov	r1, r0
 80078e4:	693b      	ldr	r3, [r7, #16]
 80078e6:	69fa      	ldr	r2, [r7, #28]
 80078e8:	3210      	adds	r2, #16
 80078ea:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
	 ci++, compptr++) {
 80078ee:	69fb      	ldr	r3, [r7, #28]
 80078f0:	3301      	adds	r3, #1
 80078f2:	61fb      	str	r3, [r7, #28]
 80078f4:	69bb      	ldr	r3, [r7, #24]
 80078f6:	3358      	adds	r3, #88	@ 0x58
 80078f8:	61bb      	str	r3, [r7, #24]
    for (ci = 0, compptr = cinfo->comp_info; ci < cinfo->num_components;
 80078fa:	687b      	ldr	r3, [r7, #4]
 80078fc:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80078fe:	69fa      	ldr	r2, [r7, #28]
 8007900:	429a      	cmp	r2, r3
 8007902:	dbcc      	blt.n	800789e <jinit_c_coef_controller+0x3a>
    for (i = 0; i < C_MAX_BLOCKS_IN_MCU; i++) {
      coef->MCU_buffer[i] = buffer + i;
    }
    coef->whole_image[0] = NULL; /* flag for no virtual arrays */
  }
}
 8007904:	e01d      	b.n	8007942 <jinit_c_coef_controller+0xde>
      (*cinfo->mem->alloc_large) ((j_common_ptr) cinfo, JPOOL_IMAGE,
 8007906:	687b      	ldr	r3, [r7, #4]
 8007908:	685b      	ldr	r3, [r3, #4]
 800790a:	685b      	ldr	r3, [r3, #4]
 800790c:	f44f 62a0 	mov.w	r2, #1280	@ 0x500
 8007910:	2101      	movs	r1, #1
 8007912:	6878      	ldr	r0, [r7, #4]
 8007914:	4798      	blx	r3
 8007916:	60f8      	str	r0, [r7, #12]
    for (i = 0; i < C_MAX_BLOCKS_IN_MCU; i++) {
 8007918:	2300      	movs	r3, #0
 800791a:	617b      	str	r3, [r7, #20]
 800791c:	e00b      	b.n	8007936 <jinit_c_coef_controller+0xd2>
      coef->MCU_buffer[i] = buffer + i;
 800791e:	697b      	ldr	r3, [r7, #20]
 8007920:	01db      	lsls	r3, r3, #7
 8007922:	68fa      	ldr	r2, [r7, #12]
 8007924:	18d1      	adds	r1, r2, r3
 8007926:	693b      	ldr	r3, [r7, #16]
 8007928:	697a      	ldr	r2, [r7, #20]
 800792a:	3206      	adds	r2, #6
 800792c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    for (i = 0; i < C_MAX_BLOCKS_IN_MCU; i++) {
 8007930:	697b      	ldr	r3, [r7, #20]
 8007932:	3301      	adds	r3, #1
 8007934:	617b      	str	r3, [r7, #20]
 8007936:	697b      	ldr	r3, [r7, #20]
 8007938:	2b09      	cmp	r3, #9
 800793a:	ddf0      	ble.n	800791e <jinit_c_coef_controller+0xba>
    coef->whole_image[0] = NULL; /* flag for no virtual arrays */
 800793c:	693b      	ldr	r3, [r7, #16]
 800793e:	2200      	movs	r2, #0
 8007940:	641a      	str	r2, [r3, #64]	@ 0x40
}
 8007942:	bf00      	nop
 8007944:	3720      	adds	r7, #32
 8007946:	46bd      	mov	sp, r7
 8007948:	bdb0      	pop	{r4, r5, r7, pc}
 800794a:	bf00      	nop
 800794c:	080071ad 	.word	0x080071ad

08007950 <rgb_ycc_start>:
 * Initialize for RGB->YCC colorspace conversion.
 */

METHODDEF(void)
rgb_ycc_start (j_compress_ptr cinfo)
{
 8007950:	b580      	push	{r7, lr}
 8007952:	b086      	sub	sp, #24
 8007954:	af00      	add	r7, sp, #0
 8007956:	6078      	str	r0, [r7, #4]
  my_cconvert_ptr cconvert = (my_cconvert_ptr) cinfo->cconvert;
 8007958:	687b      	ldr	r3, [r7, #4]
 800795a:	f8d3 3198 	ldr.w	r3, [r3, #408]	@ 0x198
 800795e:	613b      	str	r3, [r7, #16]
  INT32 * rgb_ycc_tab;
  INT32 i;

  /* Allocate and fill in the conversion tables. */
  cconvert->rgb_ycc_tab = rgb_ycc_tab = (INT32 *)
    (*cinfo->mem->alloc_small) ((j_common_ptr) cinfo, JPOOL_IMAGE,
 8007960:	687b      	ldr	r3, [r7, #4]
 8007962:	685b      	ldr	r3, [r3, #4]
 8007964:	681b      	ldr	r3, [r3, #0]
 8007966:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 800796a:	2101      	movs	r1, #1
 800796c:	6878      	ldr	r0, [r7, #4]
 800796e:	4798      	blx	r3
 8007970:	60f8      	str	r0, [r7, #12]
  cconvert->rgb_ycc_tab = rgb_ycc_tab = (INT32 *)
 8007972:	693b      	ldr	r3, [r7, #16]
 8007974:	68fa      	ldr	r2, [r7, #12]
 8007976:	609a      	str	r2, [r3, #8]
				(TABLE_SIZE * SIZEOF(INT32)));

  for (i = 0; i <= MAXJSAMPLE; i++) {
 8007978:	2300      	movs	r3, #0
 800797a:	617b      	str	r3, [r7, #20]
 800797c:	e05e      	b.n	8007a3c <rgb_ycc_start+0xec>
    rgb_ycc_tab[i+R_Y_OFF] = FIX(0.29900) * i;
 800797e:	697b      	ldr	r3, [r7, #20]
 8007980:	009b      	lsls	r3, r3, #2
 8007982:	68fa      	ldr	r2, [r7, #12]
 8007984:	4413      	add	r3, r2
 8007986:	697a      	ldr	r2, [r7, #20]
 8007988:	f644 418b 	movw	r1, #19595	@ 0x4c8b
 800798c:	fb01 f202 	mul.w	r2, r1, r2
 8007990:	601a      	str	r2, [r3, #0]
    rgb_ycc_tab[i+G_Y_OFF] = FIX(0.58700) * i;
 8007992:	697b      	ldr	r3, [r7, #20]
 8007994:	f503 7380 	add.w	r3, r3, #256	@ 0x100
 8007998:	009b      	lsls	r3, r3, #2
 800799a:	68fa      	ldr	r2, [r7, #12]
 800799c:	4413      	add	r3, r2
 800799e:	697a      	ldr	r2, [r7, #20]
 80079a0:	f249 6146 	movw	r1, #38470	@ 0x9646
 80079a4:	fb01 f202 	mul.w	r2, r1, r2
 80079a8:	601a      	str	r2, [r3, #0]
    rgb_ycc_tab[i+B_Y_OFF] = FIX(0.11400) * i     + ONE_HALF;
 80079aa:	697b      	ldr	r3, [r7, #20]
 80079ac:	f641 522f 	movw	r2, #7471	@ 0x1d2f
 80079b0:	fb03 f202 	mul.w	r2, r3, r2
 80079b4:	697b      	ldr	r3, [r7, #20]
 80079b6:	f503 7300 	add.w	r3, r3, #512	@ 0x200
 80079ba:	009b      	lsls	r3, r3, #2
 80079bc:	68f9      	ldr	r1, [r7, #12]
 80079be:	440b      	add	r3, r1
 80079c0:	f502 4200 	add.w	r2, r2, #32768	@ 0x8000
 80079c4:	601a      	str	r2, [r3, #0]
    rgb_ycc_tab[i+R_CB_OFF] = (-FIX(0.16874)) * i;
 80079c6:	697b      	ldr	r3, [r7, #20]
 80079c8:	f503 7340 	add.w	r3, r3, #768	@ 0x300
 80079cc:	009b      	lsls	r3, r3, #2
 80079ce:	68fa      	ldr	r2, [r7, #12]
 80079d0:	4413      	add	r3, r2
 80079d2:	697a      	ldr	r2, [r7, #20]
 80079d4:	491d      	ldr	r1, [pc, #116]	@ (8007a4c <rgb_ycc_start+0xfc>)
 80079d6:	fb01 f202 	mul.w	r2, r1, r2
 80079da:	601a      	str	r2, [r3, #0]
    rgb_ycc_tab[i+G_CB_OFF] = (-FIX(0.33126)) * i;
 80079dc:	697b      	ldr	r3, [r7, #20]
 80079de:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 80079e2:	009b      	lsls	r3, r3, #2
 80079e4:	68fa      	ldr	r2, [r7, #12]
 80079e6:	4413      	add	r3, r2
 80079e8:	697a      	ldr	r2, [r7, #20]
 80079ea:	4919      	ldr	r1, [pc, #100]	@ (8007a50 <rgb_ycc_start+0x100>)
 80079ec:	fb01 f202 	mul.w	r2, r1, r2
 80079f0:	601a      	str	r2, [r3, #0]
    /* We use a rounding fudge-factor of 0.5-epsilon for Cb and Cr.
     * This ensures that the maximum output will round to MAXJSAMPLE
     * not MAXJSAMPLE+1, and thus that we don't have to range-limit.
     */
    rgb_ycc_tab[i+B_CB_OFF] = FIX(0.50000) * i    + CBCR_OFFSET + ONE_HALF-1;
 80079f2:	697b      	ldr	r3, [r7, #20]
 80079f4:	f203 1301 	addw	r3, r3, #257	@ 0x101
 80079f8:	03da      	lsls	r2, r3, #15
 80079fa:	697b      	ldr	r3, [r7, #20]
 80079fc:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8007a00:	009b      	lsls	r3, r3, #2
 8007a02:	68f9      	ldr	r1, [r7, #12]
 8007a04:	440b      	add	r3, r1
 8007a06:	3a01      	subs	r2, #1
 8007a08:	601a      	str	r2, [r3, #0]
/*  B=>Cb and R=>Cr tables are the same
    rgb_ycc_tab[i+R_CR_OFF] = FIX(0.50000) * i    + CBCR_OFFSET + ONE_HALF-1;
*/
    rgb_ycc_tab[i+G_CR_OFF] = (-FIX(0.41869)) * i;
 8007a0a:	697b      	ldr	r3, [r7, #20]
 8007a0c:	f503 63c0 	add.w	r3, r3, #1536	@ 0x600
 8007a10:	009b      	lsls	r3, r3, #2
 8007a12:	68fa      	ldr	r2, [r7, #12]
 8007a14:	4413      	add	r3, r2
 8007a16:	697a      	ldr	r2, [r7, #20]
 8007a18:	490e      	ldr	r1, [pc, #56]	@ (8007a54 <rgb_ycc_start+0x104>)
 8007a1a:	fb01 f202 	mul.w	r2, r1, r2
 8007a1e:	601a      	str	r2, [r3, #0]
    rgb_ycc_tab[i+B_CR_OFF] = (-FIX(0.08131)) * i;
 8007a20:	697b      	ldr	r3, [r7, #20]
 8007a22:	f503 63e0 	add.w	r3, r3, #1792	@ 0x700
 8007a26:	009b      	lsls	r3, r3, #2
 8007a28:	68fa      	ldr	r2, [r7, #12]
 8007a2a:	4413      	add	r3, r2
 8007a2c:	697a      	ldr	r2, [r7, #20]
 8007a2e:	490a      	ldr	r1, [pc, #40]	@ (8007a58 <rgb_ycc_start+0x108>)
 8007a30:	fb01 f202 	mul.w	r2, r1, r2
 8007a34:	601a      	str	r2, [r3, #0]
  for (i = 0; i <= MAXJSAMPLE; i++) {
 8007a36:	697b      	ldr	r3, [r7, #20]
 8007a38:	3301      	adds	r3, #1
 8007a3a:	617b      	str	r3, [r7, #20]
 8007a3c:	697b      	ldr	r3, [r7, #20]
 8007a3e:	2bff      	cmp	r3, #255	@ 0xff
 8007a40:	dd9d      	ble.n	800797e <rgb_ycc_start+0x2e>
  }
}
 8007a42:	bf00      	nop
 8007a44:	bf00      	nop
 8007a46:	3718      	adds	r7, #24
 8007a48:	46bd      	mov	sp, r7
 8007a4a:	bd80      	pop	{r7, pc}
 8007a4c:	ffffd4cd 	.word	0xffffd4cd
 8007a50:	ffffab33 	.word	0xffffab33
 8007a54:	ffff94d1 	.word	0xffff94d1
 8007a58:	ffffeb2f 	.word	0xffffeb2f

08007a5c <rgb_ycc_convert>:

METHODDEF(void)
rgb_ycc_convert (j_compress_ptr cinfo,
		 JSAMPARRAY input_buf, JSAMPIMAGE output_buf,
		 JDIMENSION output_row, int num_rows)
{
 8007a5c:	e92d 07f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl}
 8007a60:	b089      	sub	sp, #36	@ 0x24
 8007a62:	af00      	add	r7, sp, #0
 8007a64:	6178      	str	r0, [r7, #20]
 8007a66:	6139      	str	r1, [r7, #16]
 8007a68:	60fa      	str	r2, [r7, #12]
 8007a6a:	60bb      	str	r3, [r7, #8]
  my_cconvert_ptr cconvert = (my_cconvert_ptr) cinfo->cconvert;
 8007a6c:	697b      	ldr	r3, [r7, #20]
 8007a6e:	f8d3 3198 	ldr.w	r3, [r3, #408]	@ 0x198
 8007a72:	61fb      	str	r3, [r7, #28]
  register int r, g, b;
  register INT32 * ctab = cconvert->rgb_ycc_tab;
 8007a74:	69fb      	ldr	r3, [r7, #28]
 8007a76:	689c      	ldr	r4, [r3, #8]
  register JSAMPROW inptr;
  register JSAMPROW outptr0, outptr1, outptr2;
  register JDIMENSION col;
  JDIMENSION num_cols = cinfo->image_width;
 8007a78:	697b      	ldr	r3, [r7, #20]
 8007a7a:	69db      	ldr	r3, [r3, #28]
 8007a7c:	61bb      	str	r3, [r7, #24]

  while (--num_rows >= 0) {
 8007a7e:	e075      	b.n	8007b6c <rgb_ycc_convert+0x110>
    inptr = *input_buf++;
 8007a80:	693b      	ldr	r3, [r7, #16]
 8007a82:	1d1a      	adds	r2, r3, #4
 8007a84:	613a      	str	r2, [r7, #16]
 8007a86:	681e      	ldr	r6, [r3, #0]
    outptr0 = output_buf[0][output_row];
 8007a88:	68fb      	ldr	r3, [r7, #12]
 8007a8a:	681a      	ldr	r2, [r3, #0]
 8007a8c:	68bb      	ldr	r3, [r7, #8]
 8007a8e:	009b      	lsls	r3, r3, #2
 8007a90:	4413      	add	r3, r2
 8007a92:	681b      	ldr	r3, [r3, #0]
 8007a94:	4619      	mov	r1, r3
    outptr1 = output_buf[1][output_row];
 8007a96:	68fb      	ldr	r3, [r7, #12]
 8007a98:	3304      	adds	r3, #4
 8007a9a:	681a      	ldr	r2, [r3, #0]
 8007a9c:	68bb      	ldr	r3, [r7, #8]
 8007a9e:	009b      	lsls	r3, r3, #2
 8007aa0:	4413      	add	r3, r2
 8007aa2:	681b      	ldr	r3, [r3, #0]
 8007aa4:	4618      	mov	r0, r3
    outptr2 = output_buf[2][output_row];
 8007aa6:	68fb      	ldr	r3, [r7, #12]
 8007aa8:	3308      	adds	r3, #8
 8007aaa:	681a      	ldr	r2, [r3, #0]
 8007aac:	68bb      	ldr	r3, [r7, #8]
 8007aae:	009b      	lsls	r3, r3, #2
 8007ab0:	4413      	add	r3, r2
 8007ab2:	681b      	ldr	r3, [r3, #0]
 8007ab4:	607b      	str	r3, [r7, #4]
    output_row++;
 8007ab6:	68bb      	ldr	r3, [r7, #8]
 8007ab8:	3301      	adds	r3, #1
 8007aba:	60bb      	str	r3, [r7, #8]
    for (col = 0; col < num_cols; col++) {
 8007abc:	2500      	movs	r5, #0
 8007abe:	e052      	b.n	8007b66 <rgb_ycc_convert+0x10a>
      r = GETJSAMPLE(inptr[RGB_RED]);
 8007ac0:	7833      	ldrb	r3, [r6, #0]
 8007ac2:	469a      	mov	sl, r3
      g = GETJSAMPLE(inptr[RGB_GREEN]);
 8007ac4:	1c73      	adds	r3, r6, #1
 8007ac6:	781b      	ldrb	r3, [r3, #0]
 8007ac8:	4699      	mov	r9, r3
      b = GETJSAMPLE(inptr[RGB_BLUE]);
 8007aca:	1cb3      	adds	r3, r6, #2
 8007acc:	781b      	ldrb	r3, [r3, #0]
 8007ace:	4698      	mov	r8, r3
      inptr += RGB_PIXELSIZE;
 8007ad0:	3603      	adds	r6, #3
       * Hence the value being shifted is never negative, and we don't
       * need the general RIGHT_SHIFT macro.
       */
      /* Y */
      outptr0[col] = (JSAMPLE)
		((ctab[r+R_Y_OFF] + ctab[g+G_Y_OFF] + ctab[b+B_Y_OFF])
 8007ad2:	4653      	mov	r3, sl
 8007ad4:	009b      	lsls	r3, r3, #2
 8007ad6:	4423      	add	r3, r4
 8007ad8:	681a      	ldr	r2, [r3, #0]
 8007ada:	464b      	mov	r3, r9
 8007adc:	f503 7380 	add.w	r3, r3, #256	@ 0x100
 8007ae0:	009b      	lsls	r3, r3, #2
 8007ae2:	4423      	add	r3, r4
 8007ae4:	681b      	ldr	r3, [r3, #0]
 8007ae6:	441a      	add	r2, r3
 8007ae8:	4643      	mov	r3, r8
 8007aea:	f503 7300 	add.w	r3, r3, #512	@ 0x200
 8007aee:	009b      	lsls	r3, r3, #2
 8007af0:	4423      	add	r3, r4
 8007af2:	681b      	ldr	r3, [r3, #0]
 8007af4:	4413      	add	r3, r2
		 >> SCALEBITS);
 8007af6:	141a      	asrs	r2, r3, #16
      outptr0[col] = (JSAMPLE)
 8007af8:	460b      	mov	r3, r1
 8007afa:	442b      	add	r3, r5
 8007afc:	b2d2      	uxtb	r2, r2
 8007afe:	701a      	strb	r2, [r3, #0]
      /* Cb */
      outptr1[col] = (JSAMPLE)
		((ctab[r+R_CB_OFF] + ctab[g+G_CB_OFF] + ctab[b+B_CB_OFF])
 8007b00:	4653      	mov	r3, sl
 8007b02:	f503 7340 	add.w	r3, r3, #768	@ 0x300
 8007b06:	009b      	lsls	r3, r3, #2
 8007b08:	4423      	add	r3, r4
 8007b0a:	681a      	ldr	r2, [r3, #0]
 8007b0c:	464b      	mov	r3, r9
 8007b0e:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8007b12:	009b      	lsls	r3, r3, #2
 8007b14:	4423      	add	r3, r4
 8007b16:	681b      	ldr	r3, [r3, #0]
 8007b18:	441a      	add	r2, r3
 8007b1a:	4643      	mov	r3, r8
 8007b1c:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8007b20:	009b      	lsls	r3, r3, #2
 8007b22:	4423      	add	r3, r4
 8007b24:	681b      	ldr	r3, [r3, #0]
 8007b26:	4413      	add	r3, r2
		 >> SCALEBITS);
 8007b28:	141a      	asrs	r2, r3, #16
      outptr1[col] = (JSAMPLE)
 8007b2a:	4603      	mov	r3, r0
 8007b2c:	442b      	add	r3, r5
 8007b2e:	b2d2      	uxtb	r2, r2
 8007b30:	701a      	strb	r2, [r3, #0]
      /* Cr */
      outptr2[col] = (JSAMPLE)
		((ctab[r+R_CR_OFF] + ctab[g+G_CR_OFF] + ctab[b+B_CR_OFF])
 8007b32:	4653      	mov	r3, sl
 8007b34:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8007b38:	009b      	lsls	r3, r3, #2
 8007b3a:	4423      	add	r3, r4
 8007b3c:	681a      	ldr	r2, [r3, #0]
 8007b3e:	464b      	mov	r3, r9
 8007b40:	f503 63c0 	add.w	r3, r3, #1536	@ 0x600
 8007b44:	009b      	lsls	r3, r3, #2
 8007b46:	4423      	add	r3, r4
 8007b48:	681b      	ldr	r3, [r3, #0]
 8007b4a:	441a      	add	r2, r3
 8007b4c:	4643      	mov	r3, r8
 8007b4e:	f503 63e0 	add.w	r3, r3, #1792	@ 0x700
 8007b52:	009b      	lsls	r3, r3, #2
 8007b54:	4423      	add	r3, r4
 8007b56:	681b      	ldr	r3, [r3, #0]
 8007b58:	4413      	add	r3, r2
		 >> SCALEBITS);
 8007b5a:	141a      	asrs	r2, r3, #16
      outptr2[col] = (JSAMPLE)
 8007b5c:	687b      	ldr	r3, [r7, #4]
 8007b5e:	442b      	add	r3, r5
 8007b60:	b2d2      	uxtb	r2, r2
 8007b62:	701a      	strb	r2, [r3, #0]
    for (col = 0; col < num_cols; col++) {
 8007b64:	3501      	adds	r5, #1
 8007b66:	69bb      	ldr	r3, [r7, #24]
 8007b68:	429d      	cmp	r5, r3
 8007b6a:	d3a9      	bcc.n	8007ac0 <rgb_ycc_convert+0x64>
  while (--num_rows >= 0) {
 8007b6c:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8007b6e:	3b01      	subs	r3, #1
 8007b70:	643b      	str	r3, [r7, #64]	@ 0x40
 8007b72:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8007b74:	2b00      	cmp	r3, #0
 8007b76:	da83      	bge.n	8007a80 <rgb_ycc_convert+0x24>
    }
  }
}
 8007b78:	bf00      	nop
 8007b7a:	bf00      	nop
 8007b7c:	3724      	adds	r7, #36	@ 0x24
 8007b7e:	46bd      	mov	sp, r7
 8007b80:	e8bd 07f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl}
 8007b84:	4770      	bx	lr

08007b86 <rgb_gray_convert>:

METHODDEF(void)
rgb_gray_convert (j_compress_ptr cinfo,
		  JSAMPARRAY input_buf, JSAMPIMAGE output_buf,
		  JDIMENSION output_row, int num_rows)
{
 8007b86:	e92d 07f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl}
 8007b8a:	b087      	sub	sp, #28
 8007b8c:	af00      	add	r7, sp, #0
 8007b8e:	60f8      	str	r0, [r7, #12]
 8007b90:	60b9      	str	r1, [r7, #8]
 8007b92:	607a      	str	r2, [r7, #4]
 8007b94:	603b      	str	r3, [r7, #0]
  my_cconvert_ptr cconvert = (my_cconvert_ptr) cinfo->cconvert;
 8007b96:	68fb      	ldr	r3, [r7, #12]
 8007b98:	f8d3 3198 	ldr.w	r3, [r3, #408]	@ 0x198
 8007b9c:	617b      	str	r3, [r7, #20]
  register int r, g, b;
  register INT32 * ctab = cconvert->rgb_ycc_tab;
 8007b9e:	697b      	ldr	r3, [r7, #20]
 8007ba0:	689e      	ldr	r6, [r3, #8]
  register JSAMPROW inptr;
  register JSAMPROW outptr;
  register JDIMENSION col;
  JDIMENSION num_cols = cinfo->image_width;
 8007ba2:	68fb      	ldr	r3, [r7, #12]
 8007ba4:	69db      	ldr	r3, [r3, #28]
 8007ba6:	613b      	str	r3, [r7, #16]

  while (--num_rows >= 0) {
 8007ba8:	e033      	b.n	8007c12 <rgb_gray_convert+0x8c>
    inptr = *input_buf++;
 8007baa:	68bb      	ldr	r3, [r7, #8]
 8007bac:	1d1a      	adds	r2, r3, #4
 8007bae:	60ba      	str	r2, [r7, #8]
 8007bb0:	681c      	ldr	r4, [r3, #0]
    outptr = output_buf[0][output_row];
 8007bb2:	687b      	ldr	r3, [r7, #4]
 8007bb4:	681a      	ldr	r2, [r3, #0]
 8007bb6:	683b      	ldr	r3, [r7, #0]
 8007bb8:	009b      	lsls	r3, r3, #2
 8007bba:	4413      	add	r3, r2
 8007bbc:	681b      	ldr	r3, [r3, #0]
 8007bbe:	4619      	mov	r1, r3
    output_row++;
 8007bc0:	683b      	ldr	r3, [r7, #0]
 8007bc2:	3301      	adds	r3, #1
 8007bc4:	603b      	str	r3, [r7, #0]
    for (col = 0; col < num_cols; col++) {
 8007bc6:	2500      	movs	r5, #0
 8007bc8:	e020      	b.n	8007c0c <rgb_gray_convert+0x86>
      r = GETJSAMPLE(inptr[RGB_RED]);
 8007bca:	7823      	ldrb	r3, [r4, #0]
 8007bcc:	469a      	mov	sl, r3
      g = GETJSAMPLE(inptr[RGB_GREEN]);
 8007bce:	1c63      	adds	r3, r4, #1
 8007bd0:	781b      	ldrb	r3, [r3, #0]
 8007bd2:	4699      	mov	r9, r3
      b = GETJSAMPLE(inptr[RGB_BLUE]);
 8007bd4:	1ca3      	adds	r3, r4, #2
 8007bd6:	781b      	ldrb	r3, [r3, #0]
 8007bd8:	4698      	mov	r8, r3
      inptr += RGB_PIXELSIZE;
 8007bda:	3403      	adds	r4, #3
      /* Y */
      outptr[col] = (JSAMPLE)
		((ctab[r+R_Y_OFF] + ctab[g+G_Y_OFF] + ctab[b+B_Y_OFF])
 8007bdc:	4653      	mov	r3, sl
 8007bde:	009b      	lsls	r3, r3, #2
 8007be0:	4433      	add	r3, r6
 8007be2:	681a      	ldr	r2, [r3, #0]
 8007be4:	464b      	mov	r3, r9
 8007be6:	f503 7380 	add.w	r3, r3, #256	@ 0x100
 8007bea:	009b      	lsls	r3, r3, #2
 8007bec:	4433      	add	r3, r6
 8007bee:	681b      	ldr	r3, [r3, #0]
 8007bf0:	441a      	add	r2, r3
 8007bf2:	4643      	mov	r3, r8
 8007bf4:	f503 7300 	add.w	r3, r3, #512	@ 0x200
 8007bf8:	009b      	lsls	r3, r3, #2
 8007bfa:	4433      	add	r3, r6
 8007bfc:	681b      	ldr	r3, [r3, #0]
 8007bfe:	4413      	add	r3, r2
		 >> SCALEBITS);
 8007c00:	141a      	asrs	r2, r3, #16
      outptr[col] = (JSAMPLE)
 8007c02:	460b      	mov	r3, r1
 8007c04:	442b      	add	r3, r5
 8007c06:	b2d2      	uxtb	r2, r2
 8007c08:	701a      	strb	r2, [r3, #0]
    for (col = 0; col < num_cols; col++) {
 8007c0a:	3501      	adds	r5, #1
 8007c0c:	693b      	ldr	r3, [r7, #16]
 8007c0e:	429d      	cmp	r5, r3
 8007c10:	d3db      	bcc.n	8007bca <rgb_gray_convert+0x44>
  while (--num_rows >= 0) {
 8007c12:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007c14:	3b01      	subs	r3, #1
 8007c16:	63bb      	str	r3, [r7, #56]	@ 0x38
 8007c18:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007c1a:	2b00      	cmp	r3, #0
 8007c1c:	dac5      	bge.n	8007baa <rgb_gray_convert+0x24>
    }
  }
}
 8007c1e:	bf00      	nop
 8007c20:	bf00      	nop
 8007c22:	371c      	adds	r7, #28
 8007c24:	46bd      	mov	sp, r7
 8007c26:	e8bd 07f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl}
 8007c2a:	4770      	bx	lr

08007c2c <cmyk_ycck_convert>:

METHODDEF(void)
cmyk_ycck_convert (j_compress_ptr cinfo,
		   JSAMPARRAY input_buf, JSAMPIMAGE output_buf,
		   JDIMENSION output_row, int num_rows)
{
 8007c2c:	e92d 07f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl}
 8007c30:	b089      	sub	sp, #36	@ 0x24
 8007c32:	af00      	add	r7, sp, #0
 8007c34:	6178      	str	r0, [r7, #20]
 8007c36:	6139      	str	r1, [r7, #16]
 8007c38:	60fa      	str	r2, [r7, #12]
 8007c3a:	60bb      	str	r3, [r7, #8]
  my_cconvert_ptr cconvert = (my_cconvert_ptr) cinfo->cconvert;
 8007c3c:	697b      	ldr	r3, [r7, #20]
 8007c3e:	f8d3 3198 	ldr.w	r3, [r3, #408]	@ 0x198
 8007c42:	61fb      	str	r3, [r7, #28]
  register int r, g, b;
  register INT32 * ctab = cconvert->rgb_ycc_tab;
 8007c44:	69fb      	ldr	r3, [r7, #28]
 8007c46:	689c      	ldr	r4, [r3, #8]
  register JSAMPROW inptr;
  register JSAMPROW outptr0, outptr1, outptr2, outptr3;
  register JDIMENSION col;
  JDIMENSION num_cols = cinfo->image_width;
 8007c48:	697b      	ldr	r3, [r7, #20]
 8007c4a:	69db      	ldr	r3, [r3, #28]
 8007c4c:	61bb      	str	r3, [r7, #24]

  while (--num_rows >= 0) {
 8007c4e:	e084      	b.n	8007d5a <cmyk_ycck_convert+0x12e>
    inptr = *input_buf++;
 8007c50:	693b      	ldr	r3, [r7, #16]
 8007c52:	1d1a      	adds	r2, r3, #4
 8007c54:	613a      	str	r2, [r7, #16]
 8007c56:	681e      	ldr	r6, [r3, #0]
    outptr0 = output_buf[0][output_row];
 8007c58:	68fb      	ldr	r3, [r7, #12]
 8007c5a:	681a      	ldr	r2, [r3, #0]
 8007c5c:	68bb      	ldr	r3, [r7, #8]
 8007c5e:	009b      	lsls	r3, r3, #2
 8007c60:	4413      	add	r3, r2
 8007c62:	681b      	ldr	r3, [r3, #0]
 8007c64:	4619      	mov	r1, r3
    outptr1 = output_buf[1][output_row];
 8007c66:	68fb      	ldr	r3, [r7, #12]
 8007c68:	3304      	adds	r3, #4
 8007c6a:	681a      	ldr	r2, [r3, #0]
 8007c6c:	68bb      	ldr	r3, [r7, #8]
 8007c6e:	009b      	lsls	r3, r3, #2
 8007c70:	4413      	add	r3, r2
 8007c72:	681b      	ldr	r3, [r3, #0]
 8007c74:	4618      	mov	r0, r3
    outptr2 = output_buf[2][output_row];
 8007c76:	68fb      	ldr	r3, [r7, #12]
 8007c78:	3308      	adds	r3, #8
 8007c7a:	681a      	ldr	r2, [r3, #0]
 8007c7c:	68bb      	ldr	r3, [r7, #8]
 8007c7e:	009b      	lsls	r3, r3, #2
 8007c80:	4413      	add	r3, r2
 8007c82:	681b      	ldr	r3, [r3, #0]
 8007c84:	607b      	str	r3, [r7, #4]
    outptr3 = output_buf[3][output_row];
 8007c86:	68fb      	ldr	r3, [r7, #12]
 8007c88:	330c      	adds	r3, #12
 8007c8a:	681a      	ldr	r2, [r3, #0]
 8007c8c:	68bb      	ldr	r3, [r7, #8]
 8007c8e:	009b      	lsls	r3, r3, #2
 8007c90:	4413      	add	r3, r2
 8007c92:	681b      	ldr	r3, [r3, #0]
 8007c94:	603b      	str	r3, [r7, #0]
    output_row++;
 8007c96:	68bb      	ldr	r3, [r7, #8]
 8007c98:	3301      	adds	r3, #1
 8007c9a:	60bb      	str	r3, [r7, #8]
    for (col = 0; col < num_cols; col++) {
 8007c9c:	2500      	movs	r5, #0
 8007c9e:	e059      	b.n	8007d54 <cmyk_ycck_convert+0x128>
      r = MAXJSAMPLE - GETJSAMPLE(inptr[0]);
 8007ca0:	7833      	ldrb	r3, [r6, #0]
 8007ca2:	f1c3 0aff 	rsb	sl, r3, #255	@ 0xff
      g = MAXJSAMPLE - GETJSAMPLE(inptr[1]);
 8007ca6:	1c73      	adds	r3, r6, #1
 8007ca8:	781b      	ldrb	r3, [r3, #0]
 8007caa:	f1c3 09ff 	rsb	r9, r3, #255	@ 0xff
      b = MAXJSAMPLE - GETJSAMPLE(inptr[2]);
 8007cae:	1cb3      	adds	r3, r6, #2
 8007cb0:	781b      	ldrb	r3, [r3, #0]
 8007cb2:	f1c3 08ff 	rsb	r8, r3, #255	@ 0xff
      /* K passes through as-is */
      outptr3[col] = inptr[3];	/* don't need GETJSAMPLE here */
 8007cb6:	683b      	ldr	r3, [r7, #0]
 8007cb8:	442b      	add	r3, r5
 8007cba:	78f2      	ldrb	r2, [r6, #3]
 8007cbc:	701a      	strb	r2, [r3, #0]
      inptr += 4;
 8007cbe:	3604      	adds	r6, #4
       * Hence the value being shifted is never negative, and we don't
       * need the general RIGHT_SHIFT macro.
       */
      /* Y */
      outptr0[col] = (JSAMPLE)
		((ctab[r+R_Y_OFF] + ctab[g+G_Y_OFF] + ctab[b+B_Y_OFF])
 8007cc0:	4653      	mov	r3, sl
 8007cc2:	009b      	lsls	r3, r3, #2
 8007cc4:	4423      	add	r3, r4
 8007cc6:	681a      	ldr	r2, [r3, #0]
 8007cc8:	464b      	mov	r3, r9
 8007cca:	f503 7380 	add.w	r3, r3, #256	@ 0x100
 8007cce:	009b      	lsls	r3, r3, #2
 8007cd0:	4423      	add	r3, r4
 8007cd2:	681b      	ldr	r3, [r3, #0]
 8007cd4:	441a      	add	r2, r3
 8007cd6:	4643      	mov	r3, r8
 8007cd8:	f503 7300 	add.w	r3, r3, #512	@ 0x200
 8007cdc:	009b      	lsls	r3, r3, #2
 8007cde:	4423      	add	r3, r4
 8007ce0:	681b      	ldr	r3, [r3, #0]
 8007ce2:	4413      	add	r3, r2
		 >> SCALEBITS);
 8007ce4:	141a      	asrs	r2, r3, #16
      outptr0[col] = (JSAMPLE)
 8007ce6:	460b      	mov	r3, r1
 8007ce8:	442b      	add	r3, r5
 8007cea:	b2d2      	uxtb	r2, r2
 8007cec:	701a      	strb	r2, [r3, #0]
      /* Cb */
      outptr1[col] = (JSAMPLE)
		((ctab[r+R_CB_OFF] + ctab[g+G_CB_OFF] + ctab[b+B_CB_OFF])
 8007cee:	4653      	mov	r3, sl
 8007cf0:	f503 7340 	add.w	r3, r3, #768	@ 0x300
 8007cf4:	009b      	lsls	r3, r3, #2
 8007cf6:	4423      	add	r3, r4
 8007cf8:	681a      	ldr	r2, [r3, #0]
 8007cfa:	464b      	mov	r3, r9
 8007cfc:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8007d00:	009b      	lsls	r3, r3, #2
 8007d02:	4423      	add	r3, r4
 8007d04:	681b      	ldr	r3, [r3, #0]
 8007d06:	441a      	add	r2, r3
 8007d08:	4643      	mov	r3, r8
 8007d0a:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8007d0e:	009b      	lsls	r3, r3, #2
 8007d10:	4423      	add	r3, r4
 8007d12:	681b      	ldr	r3, [r3, #0]
 8007d14:	4413      	add	r3, r2
		 >> SCALEBITS);
 8007d16:	141a      	asrs	r2, r3, #16
      outptr1[col] = (JSAMPLE)
 8007d18:	4603      	mov	r3, r0
 8007d1a:	442b      	add	r3, r5
 8007d1c:	b2d2      	uxtb	r2, r2
 8007d1e:	701a      	strb	r2, [r3, #0]
      /* Cr */
      outptr2[col] = (JSAMPLE)
		((ctab[r+R_CR_OFF] + ctab[g+G_CR_OFF] + ctab[b+B_CR_OFF])
 8007d20:	4653      	mov	r3, sl
 8007d22:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8007d26:	009b      	lsls	r3, r3, #2
 8007d28:	4423      	add	r3, r4
 8007d2a:	681a      	ldr	r2, [r3, #0]
 8007d2c:	464b      	mov	r3, r9
 8007d2e:	f503 63c0 	add.w	r3, r3, #1536	@ 0x600
 8007d32:	009b      	lsls	r3, r3, #2
 8007d34:	4423      	add	r3, r4
 8007d36:	681b      	ldr	r3, [r3, #0]
 8007d38:	441a      	add	r2, r3
 8007d3a:	4643      	mov	r3, r8
 8007d3c:	f503 63e0 	add.w	r3, r3, #1792	@ 0x700
 8007d40:	009b      	lsls	r3, r3, #2
 8007d42:	4423      	add	r3, r4
 8007d44:	681b      	ldr	r3, [r3, #0]
 8007d46:	4413      	add	r3, r2
		 >> SCALEBITS);
 8007d48:	141a      	asrs	r2, r3, #16
      outptr2[col] = (JSAMPLE)
 8007d4a:	687b      	ldr	r3, [r7, #4]
 8007d4c:	442b      	add	r3, r5
 8007d4e:	b2d2      	uxtb	r2, r2
 8007d50:	701a      	strb	r2, [r3, #0]
    for (col = 0; col < num_cols; col++) {
 8007d52:	3501      	adds	r5, #1
 8007d54:	69bb      	ldr	r3, [r7, #24]
 8007d56:	429d      	cmp	r5, r3
 8007d58:	d3a2      	bcc.n	8007ca0 <cmyk_ycck_convert+0x74>
  while (--num_rows >= 0) {
 8007d5a:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8007d5c:	3b01      	subs	r3, #1
 8007d5e:	643b      	str	r3, [r7, #64]	@ 0x40
 8007d60:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8007d62:	2b00      	cmp	r3, #0
 8007d64:	f6bf af74 	bge.w	8007c50 <cmyk_ycck_convert+0x24>
    }
  }
}
 8007d68:	bf00      	nop
 8007d6a:	bf00      	nop
 8007d6c:	3724      	adds	r7, #36	@ 0x24
 8007d6e:	46bd      	mov	sp, r7
 8007d70:	e8bd 07f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl}
 8007d74:	4770      	bx	lr

08007d76 <grayscale_convert>:

METHODDEF(void)
grayscale_convert (j_compress_ptr cinfo,
		   JSAMPARRAY input_buf, JSAMPIMAGE output_buf,
		   JDIMENSION output_row, int num_rows)
{
 8007d76:	b4f0      	push	{r4, r5, r6, r7}
 8007d78:	b086      	sub	sp, #24
 8007d7a:	af00      	add	r7, sp, #0
 8007d7c:	60f8      	str	r0, [r7, #12]
 8007d7e:	60b9      	str	r1, [r7, #8]
 8007d80:	607a      	str	r2, [r7, #4]
 8007d82:	603b      	str	r3, [r7, #0]
  register JSAMPROW inptr;
  register JSAMPROW outptr;
  register JDIMENSION col;
  JDIMENSION num_cols = cinfo->image_width;
 8007d84:	68fb      	ldr	r3, [r7, #12]
 8007d86:	69db      	ldr	r3, [r3, #28]
 8007d88:	617b      	str	r3, [r7, #20]
  int instride = cinfo->input_components;
 8007d8a:	68fb      	ldr	r3, [r7, #12]
 8007d8c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007d8e:	613b      	str	r3, [r7, #16]

  while (--num_rows >= 0) {
 8007d90:	e017      	b.n	8007dc2 <grayscale_convert+0x4c>
    inptr = *input_buf++;
 8007d92:	68bb      	ldr	r3, [r7, #8]
 8007d94:	1d1a      	adds	r2, r3, #4
 8007d96:	60ba      	str	r2, [r7, #8]
 8007d98:	681d      	ldr	r5, [r3, #0]
    outptr = output_buf[0][output_row];
 8007d9a:	687b      	ldr	r3, [r7, #4]
 8007d9c:	681a      	ldr	r2, [r3, #0]
 8007d9e:	683b      	ldr	r3, [r7, #0]
 8007da0:	009b      	lsls	r3, r3, #2
 8007da2:	4413      	add	r3, r2
 8007da4:	681e      	ldr	r6, [r3, #0]
    output_row++;
 8007da6:	683b      	ldr	r3, [r7, #0]
 8007da8:	3301      	adds	r3, #1
 8007daa:	603b      	str	r3, [r7, #0]
    for (col = 0; col < num_cols; col++) {
 8007dac:	2400      	movs	r4, #0
 8007dae:	e005      	b.n	8007dbc <grayscale_convert+0x46>
      outptr[col] = inptr[0];	/* don't need GETJSAMPLE() here */
 8007db0:	1933      	adds	r3, r6, r4
 8007db2:	782a      	ldrb	r2, [r5, #0]
 8007db4:	701a      	strb	r2, [r3, #0]
      inptr += instride;
 8007db6:	693b      	ldr	r3, [r7, #16]
 8007db8:	441d      	add	r5, r3
    for (col = 0; col < num_cols; col++) {
 8007dba:	3401      	adds	r4, #1
 8007dbc:	697b      	ldr	r3, [r7, #20]
 8007dbe:	429c      	cmp	r4, r3
 8007dc0:	d3f6      	bcc.n	8007db0 <grayscale_convert+0x3a>
  while (--num_rows >= 0) {
 8007dc2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007dc4:	3b01      	subs	r3, #1
 8007dc6:	62bb      	str	r3, [r7, #40]	@ 0x28
 8007dc8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007dca:	2b00      	cmp	r3, #0
 8007dcc:	dae1      	bge.n	8007d92 <grayscale_convert+0x1c>
    }
  }
}
 8007dce:	bf00      	nop
 8007dd0:	bf00      	nop
 8007dd2:	3718      	adds	r7, #24
 8007dd4:	46bd      	mov	sp, r7
 8007dd6:	bcf0      	pop	{r4, r5, r6, r7}
 8007dd8:	4770      	bx	lr

08007dda <rgb_convert>:

METHODDEF(void)
rgb_convert (j_compress_ptr cinfo,
	     JSAMPARRAY input_buf, JSAMPIMAGE output_buf,
	     JDIMENSION output_row, int num_rows)
{
 8007dda:	b4f0      	push	{r4, r5, r6, r7}
 8007ddc:	b086      	sub	sp, #24
 8007dde:	af00      	add	r7, sp, #0
 8007de0:	60f8      	str	r0, [r7, #12]
 8007de2:	60b9      	str	r1, [r7, #8]
 8007de4:	607a      	str	r2, [r7, #4]
 8007de6:	603b      	str	r3, [r7, #0]
  register JSAMPROW inptr;
  register JSAMPROW outptr0, outptr1, outptr2;
  register JDIMENSION col;
  JDIMENSION num_cols = cinfo->image_width;
 8007de8:	68fb      	ldr	r3, [r7, #12]
 8007dea:	69db      	ldr	r3, [r3, #28]
 8007dec:	617b      	str	r3, [r7, #20]

  while (--num_rows >= 0) {
 8007dee:	e02e      	b.n	8007e4e <rgb_convert+0x74>
    inptr = *input_buf++;
 8007df0:	68bb      	ldr	r3, [r7, #8]
 8007df2:	1d1a      	adds	r2, r3, #4
 8007df4:	60ba      	str	r2, [r7, #8]
 8007df6:	681d      	ldr	r5, [r3, #0]
    outptr0 = output_buf[0][output_row];
 8007df8:	687b      	ldr	r3, [r7, #4]
 8007dfa:	681a      	ldr	r2, [r3, #0]
 8007dfc:	683b      	ldr	r3, [r7, #0]
 8007dfe:	009b      	lsls	r3, r3, #2
 8007e00:	4413      	add	r3, r2
 8007e02:	681e      	ldr	r6, [r3, #0]
    outptr1 = output_buf[1][output_row];
 8007e04:	687b      	ldr	r3, [r7, #4]
 8007e06:	3304      	adds	r3, #4
 8007e08:	681a      	ldr	r2, [r3, #0]
 8007e0a:	683b      	ldr	r3, [r7, #0]
 8007e0c:	009b      	lsls	r3, r3, #2
 8007e0e:	4413      	add	r3, r2
 8007e10:	681b      	ldr	r3, [r3, #0]
 8007e12:	4619      	mov	r1, r3
    outptr2 = output_buf[2][output_row];
 8007e14:	687b      	ldr	r3, [r7, #4]
 8007e16:	3308      	adds	r3, #8
 8007e18:	681a      	ldr	r2, [r3, #0]
 8007e1a:	683b      	ldr	r3, [r7, #0]
 8007e1c:	009b      	lsls	r3, r3, #2
 8007e1e:	4413      	add	r3, r2
 8007e20:	681b      	ldr	r3, [r3, #0]
 8007e22:	4618      	mov	r0, r3
    output_row++;
 8007e24:	683b      	ldr	r3, [r7, #0]
 8007e26:	3301      	adds	r3, #1
 8007e28:	603b      	str	r3, [r7, #0]
    for (col = 0; col < num_cols; col++) {
 8007e2a:	2400      	movs	r4, #0
 8007e2c:	e00c      	b.n	8007e48 <rgb_convert+0x6e>
      /* We can dispense with GETJSAMPLE() here */
      outptr0[col] = inptr[RGB_RED];
 8007e2e:	1933      	adds	r3, r6, r4
 8007e30:	782a      	ldrb	r2, [r5, #0]
 8007e32:	701a      	strb	r2, [r3, #0]
      outptr1[col] = inptr[RGB_GREEN];
 8007e34:	460b      	mov	r3, r1
 8007e36:	4423      	add	r3, r4
 8007e38:	786a      	ldrb	r2, [r5, #1]
 8007e3a:	701a      	strb	r2, [r3, #0]
      outptr2[col] = inptr[RGB_BLUE];
 8007e3c:	4603      	mov	r3, r0
 8007e3e:	4423      	add	r3, r4
 8007e40:	78aa      	ldrb	r2, [r5, #2]
 8007e42:	701a      	strb	r2, [r3, #0]
      inptr += RGB_PIXELSIZE;
 8007e44:	3503      	adds	r5, #3
    for (col = 0; col < num_cols; col++) {
 8007e46:	3401      	adds	r4, #1
 8007e48:	697b      	ldr	r3, [r7, #20]
 8007e4a:	429c      	cmp	r4, r3
 8007e4c:	d3ef      	bcc.n	8007e2e <rgb_convert+0x54>
  while (--num_rows >= 0) {
 8007e4e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007e50:	3b01      	subs	r3, #1
 8007e52:	62bb      	str	r3, [r7, #40]	@ 0x28
 8007e54:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007e56:	2b00      	cmp	r3, #0
 8007e58:	daca      	bge.n	8007df0 <rgb_convert+0x16>
    }
  }
}
 8007e5a:	bf00      	nop
 8007e5c:	bf00      	nop
 8007e5e:	3718      	adds	r7, #24
 8007e60:	46bd      	mov	sp, r7
 8007e62:	bcf0      	pop	{r4, r5, r6, r7}
 8007e64:	4770      	bx	lr

08007e66 <null_convert>:

METHODDEF(void)
null_convert (j_compress_ptr cinfo,
	      JSAMPARRAY input_buf, JSAMPIMAGE output_buf,
	      JDIMENSION output_row, int num_rows)
{
 8007e66:	b4f0      	push	{r4, r5, r6, r7}
 8007e68:	b086      	sub	sp, #24
 8007e6a:	af00      	add	r7, sp, #0
 8007e6c:	60f8      	str	r0, [r7, #12]
 8007e6e:	60b9      	str	r1, [r7, #8]
 8007e70:	607a      	str	r2, [r7, #4]
 8007e72:	603b      	str	r3, [r7, #0]
  register JSAMPROW inptr;
  register JSAMPROW outptr;
  register JDIMENSION col;
  register int ci;
  int nc = cinfo->num_components;
 8007e74:	68fb      	ldr	r3, [r7, #12]
 8007e76:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8007e78:	617b      	str	r3, [r7, #20]
  JDIMENSION num_cols = cinfo->image_width;
 8007e7a:	68fb      	ldr	r3, [r7, #12]
 8007e7c:	69db      	ldr	r3, [r3, #28]
 8007e7e:	613b      	str	r3, [r7, #16]

  while (--num_rows >= 0) {
 8007e80:	e025      	b.n	8007ece <null_convert+0x68>
    /* It seems fastest to make a separate pass for each component. */
    for (ci = 0; ci < nc; ci++) {
 8007e82:	2600      	movs	r6, #0
 8007e84:	e01a      	b.n	8007ebc <null_convert+0x56>
      inptr = *input_buf;
 8007e86:	68bb      	ldr	r3, [r7, #8]
 8007e88:	681d      	ldr	r5, [r3, #0]
      outptr = output_buf[ci][output_row];
 8007e8a:	4633      	mov	r3, r6
 8007e8c:	009b      	lsls	r3, r3, #2
 8007e8e:	687a      	ldr	r2, [r7, #4]
 8007e90:	4413      	add	r3, r2
 8007e92:	681a      	ldr	r2, [r3, #0]
 8007e94:	683b      	ldr	r3, [r7, #0]
 8007e96:	009b      	lsls	r3, r3, #2
 8007e98:	4413      	add	r3, r2
 8007e9a:	681b      	ldr	r3, [r3, #0]
 8007e9c:	4619      	mov	r1, r3
      for (col = 0; col < num_cols; col++) {
 8007e9e:	2400      	movs	r4, #0
 8007ea0:	e008      	b.n	8007eb4 <null_convert+0x4e>
	outptr[col] = inptr[ci]; /* don't need GETJSAMPLE() here */
 8007ea2:	4633      	mov	r3, r6
 8007ea4:	18ea      	adds	r2, r5, r3
 8007ea6:	460b      	mov	r3, r1
 8007ea8:	4423      	add	r3, r4
 8007eaa:	7812      	ldrb	r2, [r2, #0]
 8007eac:	701a      	strb	r2, [r3, #0]
	inptr += nc;
 8007eae:	697b      	ldr	r3, [r7, #20]
 8007eb0:	441d      	add	r5, r3
      for (col = 0; col < num_cols; col++) {
 8007eb2:	3401      	adds	r4, #1
 8007eb4:	693b      	ldr	r3, [r7, #16]
 8007eb6:	429c      	cmp	r4, r3
 8007eb8:	d3f3      	bcc.n	8007ea2 <null_convert+0x3c>
    for (ci = 0; ci < nc; ci++) {
 8007eba:	3601      	adds	r6, #1
 8007ebc:	697b      	ldr	r3, [r7, #20]
 8007ebe:	429e      	cmp	r6, r3
 8007ec0:	dbe1      	blt.n	8007e86 <null_convert+0x20>
      }
    }
    input_buf++;
 8007ec2:	68bb      	ldr	r3, [r7, #8]
 8007ec4:	3304      	adds	r3, #4
 8007ec6:	60bb      	str	r3, [r7, #8]
    output_row++;
 8007ec8:	683b      	ldr	r3, [r7, #0]
 8007eca:	3301      	adds	r3, #1
 8007ecc:	603b      	str	r3, [r7, #0]
  while (--num_rows >= 0) {
 8007ece:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007ed0:	3b01      	subs	r3, #1
 8007ed2:	62bb      	str	r3, [r7, #40]	@ 0x28
 8007ed4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007ed6:	2b00      	cmp	r3, #0
 8007ed8:	dad3      	bge.n	8007e82 <null_convert+0x1c>
  }
}
 8007eda:	bf00      	nop
 8007edc:	bf00      	nop
 8007ede:	3718      	adds	r7, #24
 8007ee0:	46bd      	mov	sp, r7
 8007ee2:	bcf0      	pop	{r4, r5, r6, r7}
 8007ee4:	4770      	bx	lr

08007ee6 <null_method>:
 * Empty method for start_pass.
 */

METHODDEF(void)
null_method (j_compress_ptr cinfo)
{
 8007ee6:	b480      	push	{r7}
 8007ee8:	b083      	sub	sp, #12
 8007eea:	af00      	add	r7, sp, #0
 8007eec:	6078      	str	r0, [r7, #4]
  /* no work needed */
}
 8007eee:	bf00      	nop
 8007ef0:	370c      	adds	r7, #12
 8007ef2:	46bd      	mov	sp, r7
 8007ef4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ef8:	4770      	bx	lr
	...

08007efc <jinit_color_converter>:
 * Module initialization routine for input colorspace conversion.
 */

GLOBAL(void)
jinit_color_converter (j_compress_ptr cinfo)
{
 8007efc:	b580      	push	{r7, lr}
 8007efe:	b084      	sub	sp, #16
 8007f00:	af00      	add	r7, sp, #0
 8007f02:	6078      	str	r0, [r7, #4]
  my_cconvert_ptr cconvert;

  cconvert = (my_cconvert_ptr)
    (*cinfo->mem->alloc_small) ((j_common_ptr) cinfo, JPOOL_IMAGE,
 8007f04:	687b      	ldr	r3, [r7, #4]
 8007f06:	685b      	ldr	r3, [r3, #4]
 8007f08:	681b      	ldr	r3, [r3, #0]
 8007f0a:	220c      	movs	r2, #12
 8007f0c:	2101      	movs	r1, #1
 8007f0e:	6878      	ldr	r0, [r7, #4]
 8007f10:	4798      	blx	r3
 8007f12:	60f8      	str	r0, [r7, #12]
				SIZEOF(my_color_converter));
  cinfo->cconvert = (struct jpeg_color_converter *) cconvert;
 8007f14:	687b      	ldr	r3, [r7, #4]
 8007f16:	68fa      	ldr	r2, [r7, #12]
 8007f18:	f8c3 2198 	str.w	r2, [r3, #408]	@ 0x198
  /* set start_pass to null method until we find out differently */
  cconvert->pub.start_pass = null_method;
 8007f1c:	68fb      	ldr	r3, [r7, #12]
 8007f1e:	4a8b      	ldr	r2, [pc, #556]	@ (800814c <jinit_color_converter+0x250>)
 8007f20:	601a      	str	r2, [r3, #0]

  /* Make sure input_components agrees with in_color_space */
  switch (cinfo->in_color_space) {
 8007f22:	687b      	ldr	r3, [r7, #4]
 8007f24:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8007f28:	3b01      	subs	r3, #1
 8007f2a:	2b04      	cmp	r3, #4
 8007f2c:	d844      	bhi.n	8007fb8 <jinit_color_converter+0xbc>
 8007f2e:	a201      	add	r2, pc, #4	@ (adr r2, 8007f34 <jinit_color_converter+0x38>)
 8007f30:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007f34:	08007f49 	.word	0x08007f49
 8007f38:	08007f65 	.word	0x08007f65
 8007f3c:	08007f81 	.word	0x08007f81
 8007f40:	08007f9d 	.word	0x08007f9d
 8007f44:	08007f9d 	.word	0x08007f9d
  case JCS_GRAYSCALE:
    if (cinfo->input_components != 1)
 8007f48:	687b      	ldr	r3, [r7, #4]
 8007f4a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007f4c:	2b01      	cmp	r3, #1
 8007f4e:	d041      	beq.n	8007fd4 <jinit_color_converter+0xd8>
      ERREXIT(cinfo, JERR_BAD_IN_COLORSPACE);
 8007f50:	687b      	ldr	r3, [r7, #4]
 8007f52:	681b      	ldr	r3, [r3, #0]
 8007f54:	220a      	movs	r2, #10
 8007f56:	615a      	str	r2, [r3, #20]
 8007f58:	687b      	ldr	r3, [r7, #4]
 8007f5a:	681b      	ldr	r3, [r3, #0]
 8007f5c:	681b      	ldr	r3, [r3, #0]
 8007f5e:	6878      	ldr	r0, [r7, #4]
 8007f60:	4798      	blx	r3
    break;
 8007f62:	e037      	b.n	8007fd4 <jinit_color_converter+0xd8>

  case JCS_RGB:
    if (cinfo->input_components != RGB_PIXELSIZE)
 8007f64:	687b      	ldr	r3, [r7, #4]
 8007f66:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007f68:	2b03      	cmp	r3, #3
 8007f6a:	d035      	beq.n	8007fd8 <jinit_color_converter+0xdc>
      ERREXIT(cinfo, JERR_BAD_IN_COLORSPACE);
 8007f6c:	687b      	ldr	r3, [r7, #4]
 8007f6e:	681b      	ldr	r3, [r3, #0]
 8007f70:	220a      	movs	r2, #10
 8007f72:	615a      	str	r2, [r3, #20]
 8007f74:	687b      	ldr	r3, [r7, #4]
 8007f76:	681b      	ldr	r3, [r3, #0]
 8007f78:	681b      	ldr	r3, [r3, #0]
 8007f7a:	6878      	ldr	r0, [r7, #4]
 8007f7c:	4798      	blx	r3
    break;
 8007f7e:	e02b      	b.n	8007fd8 <jinit_color_converter+0xdc>

  case JCS_YCbCr:
    if (cinfo->input_components != 3)
 8007f80:	687b      	ldr	r3, [r7, #4]
 8007f82:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007f84:	2b03      	cmp	r3, #3
 8007f86:	d029      	beq.n	8007fdc <jinit_color_converter+0xe0>
      ERREXIT(cinfo, JERR_BAD_IN_COLORSPACE);
 8007f88:	687b      	ldr	r3, [r7, #4]
 8007f8a:	681b      	ldr	r3, [r3, #0]
 8007f8c:	220a      	movs	r2, #10
 8007f8e:	615a      	str	r2, [r3, #20]
 8007f90:	687b      	ldr	r3, [r7, #4]
 8007f92:	681b      	ldr	r3, [r3, #0]
 8007f94:	681b      	ldr	r3, [r3, #0]
 8007f96:	6878      	ldr	r0, [r7, #4]
 8007f98:	4798      	blx	r3
    break;
 8007f9a:	e01f      	b.n	8007fdc <jinit_color_converter+0xe0>

  case JCS_CMYK:
  case JCS_YCCK:
    if (cinfo->input_components != 4)
 8007f9c:	687b      	ldr	r3, [r7, #4]
 8007f9e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007fa0:	2b04      	cmp	r3, #4
 8007fa2:	d01d      	beq.n	8007fe0 <jinit_color_converter+0xe4>
      ERREXIT(cinfo, JERR_BAD_IN_COLORSPACE);
 8007fa4:	687b      	ldr	r3, [r7, #4]
 8007fa6:	681b      	ldr	r3, [r3, #0]
 8007fa8:	220a      	movs	r2, #10
 8007faa:	615a      	str	r2, [r3, #20]
 8007fac:	687b      	ldr	r3, [r7, #4]
 8007fae:	681b      	ldr	r3, [r3, #0]
 8007fb0:	681b      	ldr	r3, [r3, #0]
 8007fb2:	6878      	ldr	r0, [r7, #4]
 8007fb4:	4798      	blx	r3
    break;
 8007fb6:	e013      	b.n	8007fe0 <jinit_color_converter+0xe4>

  default:			/* JCS_UNKNOWN can be anything */
    if (cinfo->input_components < 1)
 8007fb8:	687b      	ldr	r3, [r7, #4]
 8007fba:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007fbc:	2b00      	cmp	r3, #0
 8007fbe:	dc11      	bgt.n	8007fe4 <jinit_color_converter+0xe8>
      ERREXIT(cinfo, JERR_BAD_IN_COLORSPACE);
 8007fc0:	687b      	ldr	r3, [r7, #4]
 8007fc2:	681b      	ldr	r3, [r3, #0]
 8007fc4:	220a      	movs	r2, #10
 8007fc6:	615a      	str	r2, [r3, #20]
 8007fc8:	687b      	ldr	r3, [r7, #4]
 8007fca:	681b      	ldr	r3, [r3, #0]
 8007fcc:	681b      	ldr	r3, [r3, #0]
 8007fce:	6878      	ldr	r0, [r7, #4]
 8007fd0:	4798      	blx	r3
    break;
 8007fd2:	e007      	b.n	8007fe4 <jinit_color_converter+0xe8>
    break;
 8007fd4:	bf00      	nop
 8007fd6:	e006      	b.n	8007fe6 <jinit_color_converter+0xea>
    break;
 8007fd8:	bf00      	nop
 8007fda:	e004      	b.n	8007fe6 <jinit_color_converter+0xea>
    break;
 8007fdc:	bf00      	nop
 8007fde:	e002      	b.n	8007fe6 <jinit_color_converter+0xea>
    break;
 8007fe0:	bf00      	nop
 8007fe2:	e000      	b.n	8007fe6 <jinit_color_converter+0xea>
    break;
 8007fe4:	bf00      	nop
  }

  /* Check num_components, set conversion method based on requested space */
  switch (cinfo->jpeg_color_space) {
 8007fe6:	687b      	ldr	r3, [r7, #4]
 8007fe8:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 8007fec:	3b01      	subs	r3, #1
 8007fee:	2b04      	cmp	r3, #4
 8007ff0:	f200 80e6 	bhi.w	80081c0 <jinit_color_converter+0x2c4>
 8007ff4:	a201      	add	r2, pc, #4	@ (adr r2, 8007ffc <jinit_color_converter+0x100>)
 8007ff6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007ffa:	bf00      	nop
 8007ffc:	08008011 	.word	0x08008011
 8008000:	08008073 	.word	0x08008073
 8008004:	080080b3 	.word	0x080080b3
 8008008:	0800810b 	.word	0x0800810b
 800800c:	08008169 	.word	0x08008169
  case JCS_GRAYSCALE:
    if (cinfo->num_components != 1)
 8008010:	687b      	ldr	r3, [r7, #4]
 8008012:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8008014:	2b01      	cmp	r3, #1
 8008016:	d008      	beq.n	800802a <jinit_color_converter+0x12e>
      ERREXIT(cinfo, JERR_BAD_J_COLORSPACE);
 8008018:	687b      	ldr	r3, [r7, #4]
 800801a:	681b      	ldr	r3, [r3, #0]
 800801c:	220b      	movs	r2, #11
 800801e:	615a      	str	r2, [r3, #20]
 8008020:	687b      	ldr	r3, [r7, #4]
 8008022:	681b      	ldr	r3, [r3, #0]
 8008024:	681b      	ldr	r3, [r3, #0]
 8008026:	6878      	ldr	r0, [r7, #4]
 8008028:	4798      	blx	r3
    if (cinfo->in_color_space == JCS_GRAYSCALE ||
 800802a:	687b      	ldr	r3, [r7, #4]
 800802c:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8008030:	2b01      	cmp	r3, #1
 8008032:	d004      	beq.n	800803e <jinit_color_converter+0x142>
	cinfo->in_color_space == JCS_YCbCr)
 8008034:	687b      	ldr	r3, [r7, #4]
 8008036:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
    if (cinfo->in_color_space == JCS_GRAYSCALE ||
 800803a:	2b03      	cmp	r3, #3
 800803c:	d103      	bne.n	8008046 <jinit_color_converter+0x14a>
      cconvert->pub.color_convert = grayscale_convert;
 800803e:	68fb      	ldr	r3, [r7, #12]
 8008040:	4a43      	ldr	r2, [pc, #268]	@ (8008150 <jinit_color_converter+0x254>)
 8008042:	605a      	str	r2, [r3, #4]
    else if (cinfo->in_color_space == JCS_RGB) {
      cconvert->pub.start_pass = rgb_ycc_start;
      cconvert->pub.color_convert = rgb_gray_convert;
    } else
      ERREXIT(cinfo, JERR_CONVERSION_NOTIMPL);
    break;
 8008044:	e0d7      	b.n	80081f6 <jinit_color_converter+0x2fa>
    else if (cinfo->in_color_space == JCS_RGB) {
 8008046:	687b      	ldr	r3, [r7, #4]
 8008048:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800804c:	2b02      	cmp	r3, #2
 800804e:	d106      	bne.n	800805e <jinit_color_converter+0x162>
      cconvert->pub.start_pass = rgb_ycc_start;
 8008050:	68fb      	ldr	r3, [r7, #12]
 8008052:	4a40      	ldr	r2, [pc, #256]	@ (8008154 <jinit_color_converter+0x258>)
 8008054:	601a      	str	r2, [r3, #0]
      cconvert->pub.color_convert = rgb_gray_convert;
 8008056:	68fb      	ldr	r3, [r7, #12]
 8008058:	4a3f      	ldr	r2, [pc, #252]	@ (8008158 <jinit_color_converter+0x25c>)
 800805a:	605a      	str	r2, [r3, #4]
    break;
 800805c:	e0cb      	b.n	80081f6 <jinit_color_converter+0x2fa>
      ERREXIT(cinfo, JERR_CONVERSION_NOTIMPL);
 800805e:	687b      	ldr	r3, [r7, #4]
 8008060:	681b      	ldr	r3, [r3, #0]
 8008062:	221c      	movs	r2, #28
 8008064:	615a      	str	r2, [r3, #20]
 8008066:	687b      	ldr	r3, [r7, #4]
 8008068:	681b      	ldr	r3, [r3, #0]
 800806a:	681b      	ldr	r3, [r3, #0]
 800806c:	6878      	ldr	r0, [r7, #4]
 800806e:	4798      	blx	r3
    break;
 8008070:	e0c1      	b.n	80081f6 <jinit_color_converter+0x2fa>

  case JCS_RGB:
    if (cinfo->num_components != 3)
 8008072:	687b      	ldr	r3, [r7, #4]
 8008074:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8008076:	2b03      	cmp	r3, #3
 8008078:	d008      	beq.n	800808c <jinit_color_converter+0x190>
      ERREXIT(cinfo, JERR_BAD_J_COLORSPACE);
 800807a:	687b      	ldr	r3, [r7, #4]
 800807c:	681b      	ldr	r3, [r3, #0]
 800807e:	220b      	movs	r2, #11
 8008080:	615a      	str	r2, [r3, #20]
 8008082:	687b      	ldr	r3, [r7, #4]
 8008084:	681b      	ldr	r3, [r3, #0]
 8008086:	681b      	ldr	r3, [r3, #0]
 8008088:	6878      	ldr	r0, [r7, #4]
 800808a:	4798      	blx	r3
    if (cinfo->in_color_space == JCS_RGB)
 800808c:	687b      	ldr	r3, [r7, #4]
 800808e:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8008092:	2b02      	cmp	r3, #2
 8008094:	d103      	bne.n	800809e <jinit_color_converter+0x1a2>
      cconvert->pub.color_convert = rgb_convert;
 8008096:	68fb      	ldr	r3, [r7, #12]
 8008098:	4a30      	ldr	r2, [pc, #192]	@ (800815c <jinit_color_converter+0x260>)
 800809a:	605a      	str	r2, [r3, #4]
    else
      ERREXIT(cinfo, JERR_CONVERSION_NOTIMPL);
    break;
 800809c:	e0ab      	b.n	80081f6 <jinit_color_converter+0x2fa>
      ERREXIT(cinfo, JERR_CONVERSION_NOTIMPL);
 800809e:	687b      	ldr	r3, [r7, #4]
 80080a0:	681b      	ldr	r3, [r3, #0]
 80080a2:	221c      	movs	r2, #28
 80080a4:	615a      	str	r2, [r3, #20]
 80080a6:	687b      	ldr	r3, [r7, #4]
 80080a8:	681b      	ldr	r3, [r3, #0]
 80080aa:	681b      	ldr	r3, [r3, #0]
 80080ac:	6878      	ldr	r0, [r7, #4]
 80080ae:	4798      	blx	r3
    break;
 80080b0:	e0a1      	b.n	80081f6 <jinit_color_converter+0x2fa>

  case JCS_YCbCr:
    if (cinfo->num_components != 3)
 80080b2:	687b      	ldr	r3, [r7, #4]
 80080b4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80080b6:	2b03      	cmp	r3, #3
 80080b8:	d008      	beq.n	80080cc <jinit_color_converter+0x1d0>
      ERREXIT(cinfo, JERR_BAD_J_COLORSPACE);
 80080ba:	687b      	ldr	r3, [r7, #4]
 80080bc:	681b      	ldr	r3, [r3, #0]
 80080be:	220b      	movs	r2, #11
 80080c0:	615a      	str	r2, [r3, #20]
 80080c2:	687b      	ldr	r3, [r7, #4]
 80080c4:	681b      	ldr	r3, [r3, #0]
 80080c6:	681b      	ldr	r3, [r3, #0]
 80080c8:	6878      	ldr	r0, [r7, #4]
 80080ca:	4798      	blx	r3
    if (cinfo->in_color_space == JCS_RGB) {
 80080cc:	687b      	ldr	r3, [r7, #4]
 80080ce:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 80080d2:	2b02      	cmp	r3, #2
 80080d4:	d106      	bne.n	80080e4 <jinit_color_converter+0x1e8>
      cconvert->pub.start_pass = rgb_ycc_start;
 80080d6:	68fb      	ldr	r3, [r7, #12]
 80080d8:	4a1e      	ldr	r2, [pc, #120]	@ (8008154 <jinit_color_converter+0x258>)
 80080da:	601a      	str	r2, [r3, #0]
      cconvert->pub.color_convert = rgb_ycc_convert;
 80080dc:	68fb      	ldr	r3, [r7, #12]
 80080de:	4a20      	ldr	r2, [pc, #128]	@ (8008160 <jinit_color_converter+0x264>)
 80080e0:	605a      	str	r2, [r3, #4]
    } else if (cinfo->in_color_space == JCS_YCbCr)
      cconvert->pub.color_convert = null_convert;
    else
      ERREXIT(cinfo, JERR_CONVERSION_NOTIMPL);
    break;
 80080e2:	e088      	b.n	80081f6 <jinit_color_converter+0x2fa>
    } else if (cinfo->in_color_space == JCS_YCbCr)
 80080e4:	687b      	ldr	r3, [r7, #4]
 80080e6:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 80080ea:	2b03      	cmp	r3, #3
 80080ec:	d103      	bne.n	80080f6 <jinit_color_converter+0x1fa>
      cconvert->pub.color_convert = null_convert;
 80080ee:	68fb      	ldr	r3, [r7, #12]
 80080f0:	4a1c      	ldr	r2, [pc, #112]	@ (8008164 <jinit_color_converter+0x268>)
 80080f2:	605a      	str	r2, [r3, #4]
    break;
 80080f4:	e07f      	b.n	80081f6 <jinit_color_converter+0x2fa>
      ERREXIT(cinfo, JERR_CONVERSION_NOTIMPL);
 80080f6:	687b      	ldr	r3, [r7, #4]
 80080f8:	681b      	ldr	r3, [r3, #0]
 80080fa:	221c      	movs	r2, #28
 80080fc:	615a      	str	r2, [r3, #20]
 80080fe:	687b      	ldr	r3, [r7, #4]
 8008100:	681b      	ldr	r3, [r3, #0]
 8008102:	681b      	ldr	r3, [r3, #0]
 8008104:	6878      	ldr	r0, [r7, #4]
 8008106:	4798      	blx	r3
    break;
 8008108:	e075      	b.n	80081f6 <jinit_color_converter+0x2fa>

  case JCS_CMYK:
    if (cinfo->num_components != 4)
 800810a:	687b      	ldr	r3, [r7, #4]
 800810c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800810e:	2b04      	cmp	r3, #4
 8008110:	d008      	beq.n	8008124 <jinit_color_converter+0x228>
      ERREXIT(cinfo, JERR_BAD_J_COLORSPACE);
 8008112:	687b      	ldr	r3, [r7, #4]
 8008114:	681b      	ldr	r3, [r3, #0]
 8008116:	220b      	movs	r2, #11
 8008118:	615a      	str	r2, [r3, #20]
 800811a:	687b      	ldr	r3, [r7, #4]
 800811c:	681b      	ldr	r3, [r3, #0]
 800811e:	681b      	ldr	r3, [r3, #0]
 8008120:	6878      	ldr	r0, [r7, #4]
 8008122:	4798      	blx	r3
    if (cinfo->in_color_space == JCS_CMYK)
 8008124:	687b      	ldr	r3, [r7, #4]
 8008126:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800812a:	2b04      	cmp	r3, #4
 800812c:	d103      	bne.n	8008136 <jinit_color_converter+0x23a>
      cconvert->pub.color_convert = null_convert;
 800812e:	68fb      	ldr	r3, [r7, #12]
 8008130:	4a0c      	ldr	r2, [pc, #48]	@ (8008164 <jinit_color_converter+0x268>)
 8008132:	605a      	str	r2, [r3, #4]
    else
      ERREXIT(cinfo, JERR_CONVERSION_NOTIMPL);
    break;
 8008134:	e05f      	b.n	80081f6 <jinit_color_converter+0x2fa>
      ERREXIT(cinfo, JERR_CONVERSION_NOTIMPL);
 8008136:	687b      	ldr	r3, [r7, #4]
 8008138:	681b      	ldr	r3, [r3, #0]
 800813a:	221c      	movs	r2, #28
 800813c:	615a      	str	r2, [r3, #20]
 800813e:	687b      	ldr	r3, [r7, #4]
 8008140:	681b      	ldr	r3, [r3, #0]
 8008142:	681b      	ldr	r3, [r3, #0]
 8008144:	6878      	ldr	r0, [r7, #4]
 8008146:	4798      	blx	r3
    break;
 8008148:	e055      	b.n	80081f6 <jinit_color_converter+0x2fa>
 800814a:	bf00      	nop
 800814c:	08007ee7 	.word	0x08007ee7
 8008150:	08007d77 	.word	0x08007d77
 8008154:	08007951 	.word	0x08007951
 8008158:	08007b87 	.word	0x08007b87
 800815c:	08007ddb 	.word	0x08007ddb
 8008160:	08007a5d 	.word	0x08007a5d
 8008164:	08007e67 	.word	0x08007e67

  case JCS_YCCK:
    if (cinfo->num_components != 4)
 8008168:	687b      	ldr	r3, [r7, #4]
 800816a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800816c:	2b04      	cmp	r3, #4
 800816e:	d008      	beq.n	8008182 <jinit_color_converter+0x286>
      ERREXIT(cinfo, JERR_BAD_J_COLORSPACE);
 8008170:	687b      	ldr	r3, [r7, #4]
 8008172:	681b      	ldr	r3, [r3, #0]
 8008174:	220b      	movs	r2, #11
 8008176:	615a      	str	r2, [r3, #20]
 8008178:	687b      	ldr	r3, [r7, #4]
 800817a:	681b      	ldr	r3, [r3, #0]
 800817c:	681b      	ldr	r3, [r3, #0]
 800817e:	6878      	ldr	r0, [r7, #4]
 8008180:	4798      	blx	r3
    if (cinfo->in_color_space == JCS_CMYK) {
 8008182:	687b      	ldr	r3, [r7, #4]
 8008184:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8008188:	2b04      	cmp	r3, #4
 800818a:	d106      	bne.n	800819a <jinit_color_converter+0x29e>
      cconvert->pub.start_pass = rgb_ycc_start;
 800818c:	68fb      	ldr	r3, [r7, #12]
 800818e:	4a1c      	ldr	r2, [pc, #112]	@ (8008200 <jinit_color_converter+0x304>)
 8008190:	601a      	str	r2, [r3, #0]
      cconvert->pub.color_convert = cmyk_ycck_convert;
 8008192:	68fb      	ldr	r3, [r7, #12]
 8008194:	4a1b      	ldr	r2, [pc, #108]	@ (8008204 <jinit_color_converter+0x308>)
 8008196:	605a      	str	r2, [r3, #4]
    } else if (cinfo->in_color_space == JCS_YCCK)
      cconvert->pub.color_convert = null_convert;
    else
      ERREXIT(cinfo, JERR_CONVERSION_NOTIMPL);
    break;
 8008198:	e02d      	b.n	80081f6 <jinit_color_converter+0x2fa>
    } else if (cinfo->in_color_space == JCS_YCCK)
 800819a:	687b      	ldr	r3, [r7, #4]
 800819c:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 80081a0:	2b05      	cmp	r3, #5
 80081a2:	d103      	bne.n	80081ac <jinit_color_converter+0x2b0>
      cconvert->pub.color_convert = null_convert;
 80081a4:	68fb      	ldr	r3, [r7, #12]
 80081a6:	4a18      	ldr	r2, [pc, #96]	@ (8008208 <jinit_color_converter+0x30c>)
 80081a8:	605a      	str	r2, [r3, #4]
    break;
 80081aa:	e024      	b.n	80081f6 <jinit_color_converter+0x2fa>
      ERREXIT(cinfo, JERR_CONVERSION_NOTIMPL);
 80081ac:	687b      	ldr	r3, [r7, #4]
 80081ae:	681b      	ldr	r3, [r3, #0]
 80081b0:	221c      	movs	r2, #28
 80081b2:	615a      	str	r2, [r3, #20]
 80081b4:	687b      	ldr	r3, [r7, #4]
 80081b6:	681b      	ldr	r3, [r3, #0]
 80081b8:	681b      	ldr	r3, [r3, #0]
 80081ba:	6878      	ldr	r0, [r7, #4]
 80081bc:	4798      	blx	r3
    break;
 80081be:	e01a      	b.n	80081f6 <jinit_color_converter+0x2fa>

  default:			/* allow null conversion of JCS_UNKNOWN */
    if (cinfo->jpeg_color_space != cinfo->in_color_space ||
 80081c0:	687b      	ldr	r3, [r7, #4]
 80081c2:	f893 2050 	ldrb.w	r2, [r3, #80]	@ 0x50
 80081c6:	687b      	ldr	r3, [r7, #4]
 80081c8:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 80081cc:	429a      	cmp	r2, r3
 80081ce:	d105      	bne.n	80081dc <jinit_color_converter+0x2e0>
	cinfo->num_components != cinfo->input_components)
 80081d0:	687b      	ldr	r3, [r7, #4]
 80081d2:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 80081d4:	687b      	ldr	r3, [r7, #4]
 80081d6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
    if (cinfo->jpeg_color_space != cinfo->in_color_space ||
 80081d8:	429a      	cmp	r2, r3
 80081da:	d008      	beq.n	80081ee <jinit_color_converter+0x2f2>
      ERREXIT(cinfo, JERR_CONVERSION_NOTIMPL);
 80081dc:	687b      	ldr	r3, [r7, #4]
 80081de:	681b      	ldr	r3, [r3, #0]
 80081e0:	221c      	movs	r2, #28
 80081e2:	615a      	str	r2, [r3, #20]
 80081e4:	687b      	ldr	r3, [r7, #4]
 80081e6:	681b      	ldr	r3, [r3, #0]
 80081e8:	681b      	ldr	r3, [r3, #0]
 80081ea:	6878      	ldr	r0, [r7, #4]
 80081ec:	4798      	blx	r3
    cconvert->pub.color_convert = null_convert;
 80081ee:	68fb      	ldr	r3, [r7, #12]
 80081f0:	4a05      	ldr	r2, [pc, #20]	@ (8008208 <jinit_color_converter+0x30c>)
 80081f2:	605a      	str	r2, [r3, #4]
    break;
 80081f4:	bf00      	nop
  }
}
 80081f6:	bf00      	nop
 80081f8:	3710      	adds	r7, #16
 80081fa:	46bd      	mov	sp, r7
 80081fc:	bd80      	pop	{r7, pc}
 80081fe:	bf00      	nop
 8008200:	08007951 	.word	0x08007951
 8008204:	08007c2d 	.word	0x08007c2d
 8008208:	08007e67 	.word	0x08007e67

0800820c <forward_DCT>:
forward_DCT (j_compress_ptr cinfo, jpeg_component_info * compptr,
	     JSAMPARRAY sample_data, JBLOCKROW coef_blocks,
	     JDIMENSION start_row, JDIMENSION start_col,
	     JDIMENSION num_blocks)
/* This version is used for integer DCT implementations. */
{
 800820c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008210:	b0c8      	sub	sp, #288	@ 0x120
 8008212:	af00      	add	r7, sp, #0
 8008214:	f507 7490 	add.w	r4, r7, #288	@ 0x120
 8008218:	f5a4 748a 	sub.w	r4, r4, #276	@ 0x114
 800821c:	6020      	str	r0, [r4, #0]
 800821e:	f507 7090 	add.w	r0, r7, #288	@ 0x120
 8008222:	f5a0 708c 	sub.w	r0, r0, #280	@ 0x118
 8008226:	6001      	str	r1, [r0, #0]
 8008228:	f507 7190 	add.w	r1, r7, #288	@ 0x120
 800822c:	f5a1 718e 	sub.w	r1, r1, #284	@ 0x11c
 8008230:	600a      	str	r2, [r1, #0]
 8008232:	f507 7290 	add.w	r2, r7, #288	@ 0x120
 8008236:	f5a2 7290 	sub.w	r2, r2, #288	@ 0x120
 800823a:	6013      	str	r3, [r2, #0]
  /* This routine is heavily used, so it's worth coding it tightly. */
  my_fdct_ptr fdct = (my_fdct_ptr) cinfo->fdct;
 800823c:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 8008240:	f5a3 738a 	sub.w	r3, r3, #276	@ 0x114
 8008244:	681b      	ldr	r3, [r3, #0]
 8008246:	f8d3 31a0 	ldr.w	r3, [r3, #416]	@ 0x1a0
 800824a:	f8c7 3118 	str.w	r3, [r7, #280]	@ 0x118
  forward_DCT_method_ptr do_dct = fdct->do_dct[compptr->component_index];
 800824e:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 8008252:	f5a3 738c 	sub.w	r3, r3, #280	@ 0x118
 8008256:	681b      	ldr	r3, [r3, #0]
 8008258:	685b      	ldr	r3, [r3, #4]
 800825a:	f8d7 2118 	ldr.w	r2, [r7, #280]	@ 0x118
 800825e:	330a      	adds	r3, #10
 8008260:	009b      	lsls	r3, r3, #2
 8008262:	4413      	add	r3, r2
 8008264:	685b      	ldr	r3, [r3, #4]
 8008266:	f8c7 3114 	str.w	r3, [r7, #276]	@ 0x114
  DCTELEM * divisors = fdct->divisors[compptr->quant_tbl_no];
 800826a:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 800826e:	f5a3 738c 	sub.w	r3, r3, #280	@ 0x118
 8008272:	681b      	ldr	r3, [r3, #0]
 8008274:	691b      	ldr	r3, [r3, #16]
 8008276:	f8d7 2118 	ldr.w	r2, [r7, #280]	@ 0x118
 800827a:	3314      	adds	r3, #20
 800827c:	009b      	lsls	r3, r3, #2
 800827e:	4413      	add	r3, r2
 8008280:	685b      	ldr	r3, [r3, #4]
 8008282:	f8c7 3110 	str.w	r3, [r7, #272]	@ 0x110
  DCTELEM workspace[DCTSIZE2];	/* work area for FDCT subroutine */
  JDIMENSION bi;

  sample_data += start_row;	/* fold in the vertical offset once */
 8008286:	f8d7 3138 	ldr.w	r3, [r7, #312]	@ 0x138
 800828a:	009a      	lsls	r2, r3, #2
 800828c:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 8008290:	f5a3 738e 	sub.w	r3, r3, #284	@ 0x11c
 8008294:	f507 7190 	add.w	r1, r7, #288	@ 0x120
 8008298:	f5a1 718e 	sub.w	r1, r1, #284	@ 0x11c
 800829c:	6809      	ldr	r1, [r1, #0]
 800829e:	440a      	add	r2, r1
 80082a0:	601a      	str	r2, [r3, #0]

  for (bi = 0; bi < num_blocks; bi++, start_col += compptr->DCT_h_scaled_size) {
 80082a2:	2300      	movs	r3, #0
 80082a4:	f8c7 311c 	str.w	r3, [r7, #284]	@ 0x11c
 80082a8:	e051      	b.n	800834e <forward_DCT+0x142>
    /* Perform the DCT */
    (*do_dct) (workspace, sample_data, start_col);
 80082aa:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 80082ae:	f5a3 718e 	sub.w	r1, r3, #284	@ 0x11c
 80082b2:	f107 0010 	add.w	r0, r7, #16
 80082b6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80082ba:	f8d7 213c 	ldr.w	r2, [r7, #316]	@ 0x13c
 80082be:	6809      	ldr	r1, [r1, #0]
 80082c0:	4798      	blx	r3

    /* Quantize/descale the coefficients, and store into coef_blocks[] */
    { register DCTELEM temp, qval;
      register int i;
      register JCOEFPTR output_ptr = coef_blocks[bi];
 80082c2:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 80082c6:	01db      	lsls	r3, r3, #7
 80082c8:	f507 7290 	add.w	r2, r7, #288	@ 0x120
 80082cc:	f5a2 7290 	sub.w	r2, r2, #288	@ 0x120
 80082d0:	6812      	ldr	r2, [r2, #0]
 80082d2:	eb02 0803 	add.w	r8, r2, r3

      for (i = 0; i < DCTSIZE2; i++) {
 80082d6:	2600      	movs	r6, #0
 80082d8:	e026      	b.n	8008328 <forward_DCT+0x11c>
	qval = divisors[i];
 80082da:	4633      	mov	r3, r6
 80082dc:	009b      	lsls	r3, r3, #2
 80082de:	f8d7 2110 	ldr.w	r2, [r7, #272]	@ 0x110
 80082e2:	4413      	add	r3, r2
 80082e4:	681d      	ldr	r5, [r3, #0]
	temp = workspace[i];
 80082e6:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 80082ea:	f5a3 7388 	sub.w	r3, r3, #272	@ 0x110
 80082ee:	f853 4026 	ldr.w	r4, [r3, r6, lsl #2]
#ifdef FAST_DIVIDE
#define DIVIDE_BY(a,b)	a /= b
#else
#define DIVIDE_BY(a,b)	if (a >= b) a /= b; else a = 0
#endif
	if (temp < 0) {
 80082f2:	2c00      	cmp	r4, #0
 80082f4:	da0a      	bge.n	800830c <forward_DCT+0x100>
	  temp = -temp;
 80082f6:	4264      	negs	r4, r4
	  temp += qval>>1;	/* for rounding */
 80082f8:	106b      	asrs	r3, r5, #1
 80082fa:	441c      	add	r4, r3
	  DIVIDE_BY(temp, qval);
 80082fc:	42ac      	cmp	r4, r5
 80082fe:	db02      	blt.n	8008306 <forward_DCT+0xfa>
 8008300:	fb94 f4f5 	sdiv	r4, r4, r5
 8008304:	e000      	b.n	8008308 <forward_DCT+0xfc>
 8008306:	2400      	movs	r4, #0
	  temp = -temp;
 8008308:	4264      	negs	r4, r4
 800830a:	e007      	b.n	800831c <forward_DCT+0x110>
	} else {
	  temp += qval>>1;	/* for rounding */
 800830c:	106b      	asrs	r3, r5, #1
 800830e:	441c      	add	r4, r3
	  DIVIDE_BY(temp, qval);
 8008310:	42ac      	cmp	r4, r5
 8008312:	db02      	blt.n	800831a <forward_DCT+0x10e>
 8008314:	fb94 f4f5 	sdiv	r4, r4, r5
 8008318:	e000      	b.n	800831c <forward_DCT+0x110>
 800831a:	2400      	movs	r4, #0
	}
	output_ptr[i] = (JCOEF) temp;
 800831c:	4633      	mov	r3, r6
 800831e:	005b      	lsls	r3, r3, #1
 8008320:	4443      	add	r3, r8
 8008322:	b222      	sxth	r2, r4
 8008324:	801a      	strh	r2, [r3, #0]
      for (i = 0; i < DCTSIZE2; i++) {
 8008326:	3601      	adds	r6, #1
 8008328:	2e3f      	cmp	r6, #63	@ 0x3f
 800832a:	ddd6      	ble.n	80082da <forward_DCT+0xce>
  for (bi = 0; bi < num_blocks; bi++, start_col += compptr->DCT_h_scaled_size) {
 800832c:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8008330:	3301      	adds	r3, #1
 8008332:	f8c7 311c 	str.w	r3, [r7, #284]	@ 0x11c
 8008336:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 800833a:	f5a3 738c 	sub.w	r3, r3, #280	@ 0x118
 800833e:	681b      	ldr	r3, [r3, #0]
 8008340:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008342:	461a      	mov	r2, r3
 8008344:	f8d7 313c 	ldr.w	r3, [r7, #316]	@ 0x13c
 8008348:	4413      	add	r3, r2
 800834a:	f8c7 313c 	str.w	r3, [r7, #316]	@ 0x13c
 800834e:	f8d7 211c 	ldr.w	r2, [r7, #284]	@ 0x11c
 8008352:	f8d7 3140 	ldr.w	r3, [r7, #320]	@ 0x140
 8008356:	429a      	cmp	r2, r3
 8008358:	d3a7      	bcc.n	80082aa <forward_DCT+0x9e>
      }
    }
  }
}
 800835a:	bf00      	nop
 800835c:	bf00      	nop
 800835e:	f507 7790 	add.w	r7, r7, #288	@ 0x120
 8008362:	46bd      	mov	sp, r7
 8008364:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

08008368 <forward_DCT_float>:
forward_DCT_float (j_compress_ptr cinfo, jpeg_component_info * compptr,
		   JSAMPARRAY sample_data, JBLOCKROW coef_blocks,
		   JDIMENSION start_row, JDIMENSION start_col,
		   JDIMENSION num_blocks)
/* This version is used for floating-point DCT implementations. */
{
 8008368:	b5b0      	push	{r4, r5, r7, lr}
 800836a:	ed2d 8b02 	vpush	{d8}
 800836e:	b0c8      	sub	sp, #288	@ 0x120
 8008370:	af00      	add	r7, sp, #0
 8008372:	f507 7490 	add.w	r4, r7, #288	@ 0x120
 8008376:	f5a4 748a 	sub.w	r4, r4, #276	@ 0x114
 800837a:	6020      	str	r0, [r4, #0]
 800837c:	f507 7090 	add.w	r0, r7, #288	@ 0x120
 8008380:	f5a0 708c 	sub.w	r0, r0, #280	@ 0x118
 8008384:	6001      	str	r1, [r0, #0]
 8008386:	f507 7190 	add.w	r1, r7, #288	@ 0x120
 800838a:	f5a1 718e 	sub.w	r1, r1, #284	@ 0x11c
 800838e:	600a      	str	r2, [r1, #0]
 8008390:	f507 7290 	add.w	r2, r7, #288	@ 0x120
 8008394:	f5a2 7290 	sub.w	r2, r2, #288	@ 0x120
 8008398:	6013      	str	r3, [r2, #0]
  /* This routine is heavily used, so it's worth coding it tightly. */
  my_fdct_ptr fdct = (my_fdct_ptr) cinfo->fdct;
 800839a:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 800839e:	f5a3 738a 	sub.w	r3, r3, #276	@ 0x114
 80083a2:	681b      	ldr	r3, [r3, #0]
 80083a4:	f8d3 31a0 	ldr.w	r3, [r3, #416]	@ 0x1a0
 80083a8:	f8c7 3118 	str.w	r3, [r7, #280]	@ 0x118
  float_DCT_method_ptr do_dct = fdct->do_float_dct[compptr->component_index];
 80083ac:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 80083b0:	f5a3 738c 	sub.w	r3, r3, #280	@ 0x118
 80083b4:	681b      	ldr	r3, [r3, #0]
 80083b6:	685b      	ldr	r3, [r3, #4]
 80083b8:	f8d7 2118 	ldr.w	r2, [r7, #280]	@ 0x118
 80083bc:	3318      	adds	r3, #24
 80083be:	009b      	lsls	r3, r3, #2
 80083c0:	4413      	add	r3, r2
 80083c2:	685b      	ldr	r3, [r3, #4]
 80083c4:	f8c7 3114 	str.w	r3, [r7, #276]	@ 0x114
  FAST_FLOAT * divisors = fdct->float_divisors[compptr->quant_tbl_no];
 80083c8:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 80083cc:	f5a3 738c 	sub.w	r3, r3, #280	@ 0x118
 80083d0:	681b      	ldr	r3, [r3, #0]
 80083d2:	691b      	ldr	r3, [r3, #16]
 80083d4:	f8d7 2118 	ldr.w	r2, [r7, #280]	@ 0x118
 80083d8:	3322      	adds	r3, #34	@ 0x22
 80083da:	009b      	lsls	r3, r3, #2
 80083dc:	4413      	add	r3, r2
 80083de:	685b      	ldr	r3, [r3, #4]
 80083e0:	f8c7 3110 	str.w	r3, [r7, #272]	@ 0x110
  FAST_FLOAT workspace[DCTSIZE2]; /* work area for FDCT subroutine */
  JDIMENSION bi;

  sample_data += start_row;	/* fold in the vertical offset once */
 80083e4:	f8d7 3138 	ldr.w	r3, [r7, #312]	@ 0x138
 80083e8:	009a      	lsls	r2, r3, #2
 80083ea:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 80083ee:	f5a3 738e 	sub.w	r3, r3, #284	@ 0x11c
 80083f2:	f507 7190 	add.w	r1, r7, #288	@ 0x120
 80083f6:	f5a1 718e 	sub.w	r1, r1, #284	@ 0x11c
 80083fa:	6809      	ldr	r1, [r1, #0]
 80083fc:	440a      	add	r2, r1
 80083fe:	601a      	str	r2, [r3, #0]

  for (bi = 0; bi < num_blocks; bi++, start_col += compptr->DCT_h_scaled_size) {
 8008400:	2300      	movs	r3, #0
 8008402:	f8c7 311c 	str.w	r3, [r7, #284]	@ 0x11c
 8008406:	e04c      	b.n	80084a2 <forward_DCT_float+0x13a>
    /* Perform the DCT */
    (*do_dct) (workspace, sample_data, start_col);
 8008408:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 800840c:	f5a3 718e 	sub.w	r1, r3, #284	@ 0x11c
 8008410:	f107 0010 	add.w	r0, r7, #16
 8008414:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008418:	f8d7 213c 	ldr.w	r2, [r7, #316]	@ 0x13c
 800841c:	6809      	ldr	r1, [r1, #0]
 800841e:	4798      	blx	r3

    /* Quantize/descale the coefficients, and store into coef_blocks[] */
    { register FAST_FLOAT temp;
      register int i;
      register JCOEFPTR output_ptr = coef_blocks[bi];
 8008420:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8008424:	01db      	lsls	r3, r3, #7
 8008426:	f507 7290 	add.w	r2, r7, #288	@ 0x120
 800842a:	f5a2 7290 	sub.w	r2, r2, #288	@ 0x120
 800842e:	6812      	ldr	r2, [r2, #0]
 8008430:	18d5      	adds	r5, r2, r3

      for (i = 0; i < DCTSIZE2; i++) {
 8008432:	2400      	movs	r4, #0
 8008434:	e022      	b.n	800847c <forward_DCT_float+0x114>
	/* Apply the quantization and scaling factor */
	temp = workspace[i] * divisors[i];
 8008436:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 800843a:	f5a3 7288 	sub.w	r2, r3, #272	@ 0x110
 800843e:	00a3      	lsls	r3, r4, #2
 8008440:	4413      	add	r3, r2
 8008442:	ed93 7a00 	vldr	s14, [r3]
 8008446:	4623      	mov	r3, r4
 8008448:	009b      	lsls	r3, r3, #2
 800844a:	f8d7 2110 	ldr.w	r2, [r7, #272]	@ 0x110
 800844e:	4413      	add	r3, r2
 8008450:	edd3 7a00 	vldr	s15, [r3]
 8008454:	ee27 8a27 	vmul.f32	s16, s14, s15
	 * Since C does not specify the direction of rounding for negative
	 * quotients, we have to force the dividend positive for portability.
	 * The maximum coefficient size is +-16K (for 12-bit data), so this
	 * code should work for either 16-bit or 32-bit ints.
	 */
	output_ptr[i] = (JCOEF) ((int) (temp + (FAST_FLOAT) 16384.5) - 16384);
 8008458:	eddf 7a19 	vldr	s15, [pc, #100]	@ 80084c0 <forward_DCT_float+0x158>
 800845c:	ee78 7a27 	vadd.f32	s15, s16, s15
 8008460:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8008464:	ee17 3a90 	vmov	r3, s15
 8008468:	b29b      	uxth	r3, r3
 800846a:	f5a3 4380 	sub.w	r3, r3, #16384	@ 0x4000
 800846e:	b29a      	uxth	r2, r3
 8008470:	4623      	mov	r3, r4
 8008472:	005b      	lsls	r3, r3, #1
 8008474:	442b      	add	r3, r5
 8008476:	b212      	sxth	r2, r2
 8008478:	801a      	strh	r2, [r3, #0]
      for (i = 0; i < DCTSIZE2; i++) {
 800847a:	3401      	adds	r4, #1
 800847c:	2c3f      	cmp	r4, #63	@ 0x3f
 800847e:	ddda      	ble.n	8008436 <forward_DCT_float+0xce>
  for (bi = 0; bi < num_blocks; bi++, start_col += compptr->DCT_h_scaled_size) {
 8008480:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8008484:	3301      	adds	r3, #1
 8008486:	f8c7 311c 	str.w	r3, [r7, #284]	@ 0x11c
 800848a:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 800848e:	f5a3 738c 	sub.w	r3, r3, #280	@ 0x118
 8008492:	681b      	ldr	r3, [r3, #0]
 8008494:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008496:	461a      	mov	r2, r3
 8008498:	f8d7 313c 	ldr.w	r3, [r7, #316]	@ 0x13c
 800849c:	4413      	add	r3, r2
 800849e:	f8c7 313c 	str.w	r3, [r7, #316]	@ 0x13c
 80084a2:	f8d7 211c 	ldr.w	r2, [r7, #284]	@ 0x11c
 80084a6:	f8d7 3140 	ldr.w	r3, [r7, #320]	@ 0x140
 80084aa:	429a      	cmp	r2, r3
 80084ac:	d3ac      	bcc.n	8008408 <forward_DCT_float+0xa0>
      }
    }
  }
}
 80084ae:	bf00      	nop
 80084b0:	bf00      	nop
 80084b2:	f507 7790 	add.w	r7, r7, #288	@ 0x120
 80084b6:	46bd      	mov	sp, r7
 80084b8:	ecbd 8b02 	vpop	{d8}
 80084bc:	bdb0      	pop	{r4, r5, r7, pc}
 80084be:	bf00      	nop
 80084c0:	46800100 	.word	0x46800100

080084c4 <start_pass_fdctmgr>:
 * first scan.  Hence all components should be examined here.
 */

METHODDEF(void)
start_pass_fdctmgr (j_compress_ptr cinfo)
{
 80084c4:	b590      	push	{r4, r7, lr}
 80084c6:	b08f      	sub	sp, #60	@ 0x3c
 80084c8:	af00      	add	r7, sp, #0
 80084ca:	6078      	str	r0, [r7, #4]
  my_fdct_ptr fdct = (my_fdct_ptr) cinfo->fdct;
 80084cc:	687b      	ldr	r3, [r7, #4]
 80084ce:	f8d3 31a0 	ldr.w	r3, [r3, #416]	@ 0x1a0
 80084d2:	61fb      	str	r3, [r7, #28]
  int ci, qtblno, i;
  jpeg_component_info *compptr;
  int method = 0;
 80084d4:	2300      	movs	r3, #0
 80084d6:	62bb      	str	r3, [r7, #40]	@ 0x28
  JQUANT_TBL * qtbl;
  DCTELEM * dtbl;

  for (ci = 0, compptr = cinfo->comp_info; ci < cinfo->num_components;
 80084d8:	2300      	movs	r3, #0
 80084da:	637b      	str	r3, [r7, #52]	@ 0x34
 80084dc:	687b      	ldr	r3, [r7, #4]
 80084de:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80084e0:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80084e2:	f000 bc26 	b.w	8008d32 <start_pass_fdctmgr+0x86e>
       ci++, compptr++) {
    /* Select the proper DCT routine for this component's scaling */
    switch ((compptr->DCT_h_scaled_size << 8) + compptr->DCT_v_scaled_size) {
 80084e6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80084e8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80084ea:	021a      	lsls	r2, r3, #8
 80084ec:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80084ee:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80084f0:	4413      	add	r3, r2
 80084f2:	f241 0210 	movw	r2, #4112	@ 0x1010
 80084f6:	4293      	cmp	r3, r2
 80084f8:	f000 81af 	beq.w	800885a <start_pass_fdctmgr+0x396>
 80084fc:	f241 0210 	movw	r2, #4112	@ 0x1010
 8008500:	4293      	cmp	r3, r2
 8008502:	f300 82c8 	bgt.w	8008a96 <start_pass_fdctmgr+0x5d2>
 8008506:	f241 0208 	movw	r2, #4104	@ 0x1008
 800850a:	4293      	cmp	r3, r2
 800850c:	f000 81af 	beq.w	800886e <start_pass_fdctmgr+0x3aa>
 8008510:	f241 0208 	movw	r2, #4104	@ 0x1008
 8008514:	4293      	cmp	r3, r2
 8008516:	f300 82be 	bgt.w	8008a96 <start_pass_fdctmgr+0x5d2>
 800851a:	f640 720f 	movw	r2, #3855	@ 0xf0f
 800851e:	4293      	cmp	r3, r2
 8008520:	f000 8191 	beq.w	8008846 <start_pass_fdctmgr+0x382>
 8008524:	f5b3 6f71 	cmp.w	r3, #3856	@ 0xf10
 8008528:	f280 82b5 	bge.w	8008a96 <start_pass_fdctmgr+0x5d2>
 800852c:	f640 620e 	movw	r2, #3598	@ 0xe0e
 8008530:	4293      	cmp	r3, r2
 8008532:	f000 817e 	beq.w	8008832 <start_pass_fdctmgr+0x36e>
 8008536:	f640 620e 	movw	r2, #3598	@ 0xe0e
 800853a:	4293      	cmp	r3, r2
 800853c:	f300 82ab 	bgt.w	8008a96 <start_pass_fdctmgr+0x5d2>
 8008540:	f640 6207 	movw	r2, #3591	@ 0xe07
 8008544:	4293      	cmp	r3, r2
 8008546:	f000 819c 	beq.w	8008882 <start_pass_fdctmgr+0x3be>
 800854a:	f640 6207 	movw	r2, #3591	@ 0xe07
 800854e:	4293      	cmp	r3, r2
 8008550:	f300 82a1 	bgt.w	8008a96 <start_pass_fdctmgr+0x5d2>
 8008554:	f640 520d 	movw	r2, #3341	@ 0xd0d
 8008558:	4293      	cmp	r3, r2
 800855a:	f000 8160 	beq.w	800881e <start_pass_fdctmgr+0x35a>
 800855e:	f640 520d 	movw	r2, #3341	@ 0xd0d
 8008562:	4293      	cmp	r3, r2
 8008564:	f300 8297 	bgt.w	8008a96 <start_pass_fdctmgr+0x5d2>
 8008568:	f640 420c 	movw	r2, #3084	@ 0xc0c
 800856c:	4293      	cmp	r3, r2
 800856e:	f000 814c 	beq.w	800880a <start_pass_fdctmgr+0x346>
 8008572:	f640 420c 	movw	r2, #3084	@ 0xc0c
 8008576:	4293      	cmp	r3, r2
 8008578:	f300 828d 	bgt.w	8008a96 <start_pass_fdctmgr+0x5d2>
 800857c:	f640 4206 	movw	r2, #3078	@ 0xc06
 8008580:	4293      	cmp	r3, r2
 8008582:	f000 8188 	beq.w	8008896 <start_pass_fdctmgr+0x3d2>
 8008586:	f640 4206 	movw	r2, #3078	@ 0xc06
 800858a:	4293      	cmp	r3, r2
 800858c:	f300 8283 	bgt.w	8008a96 <start_pass_fdctmgr+0x5d2>
 8008590:	f640 320b 	movw	r2, #2827	@ 0xb0b
 8008594:	4293      	cmp	r3, r2
 8008596:	f000 812e 	beq.w	80087f6 <start_pass_fdctmgr+0x332>
 800859a:	f640 320b 	movw	r2, #2827	@ 0xb0b
 800859e:	4293      	cmp	r3, r2
 80085a0:	f300 8279 	bgt.w	8008a96 <start_pass_fdctmgr+0x5d2>
 80085a4:	f640 220a 	movw	r2, #2570	@ 0xa0a
 80085a8:	4293      	cmp	r3, r2
 80085aa:	f000 811a 	beq.w	80087e2 <start_pass_fdctmgr+0x31e>
 80085ae:	f640 220a 	movw	r2, #2570	@ 0xa0a
 80085b2:	4293      	cmp	r3, r2
 80085b4:	f300 826f 	bgt.w	8008a96 <start_pass_fdctmgr+0x5d2>
 80085b8:	f640 2205 	movw	r2, #2565	@ 0xa05
 80085bc:	4293      	cmp	r3, r2
 80085be:	f000 8174 	beq.w	80088aa <start_pass_fdctmgr+0x3e6>
 80085c2:	f640 2205 	movw	r2, #2565	@ 0xa05
 80085c6:	4293      	cmp	r3, r2
 80085c8:	f300 8265 	bgt.w	8008a96 <start_pass_fdctmgr+0x5d2>
 80085cc:	f640 1209 	movw	r2, #2313	@ 0x909
 80085d0:	4293      	cmp	r3, r2
 80085d2:	f000 80fc 	beq.w	80087ce <start_pass_fdctmgr+0x30a>
 80085d6:	f640 1209 	movw	r2, #2313	@ 0x909
 80085da:	4293      	cmp	r3, r2
 80085dc:	f300 825b 	bgt.w	8008a96 <start_pass_fdctmgr+0x5d2>
 80085e0:	f5b3 6f01 	cmp.w	r3, #2064	@ 0x810
 80085e4:	f000 8193 	beq.w	800890e <start_pass_fdctmgr+0x44a>
 80085e8:	f5b3 6f01 	cmp.w	r3, #2064	@ 0x810
 80085ec:	f300 8253 	bgt.w	8008a96 <start_pass_fdctmgr+0x5d2>
 80085f0:	f640 0208 	movw	r2, #2056	@ 0x808
 80085f4:	4293      	cmp	r3, r2
 80085f6:	f000 8219 	beq.w	8008a2c <start_pass_fdctmgr+0x568>
 80085fa:	f640 0208 	movw	r2, #2056	@ 0x808
 80085fe:	4293      	cmp	r3, r2
 8008600:	f300 8249 	bgt.w	8008a96 <start_pass_fdctmgr+0x5d2>
 8008604:	f640 0204 	movw	r2, #2052	@ 0x804
 8008608:	4293      	cmp	r3, r2
 800860a:	f000 8158 	beq.w	80088be <start_pass_fdctmgr+0x3fa>
 800860e:	f640 0204 	movw	r2, #2052	@ 0x804
 8008612:	4293      	cmp	r3, r2
 8008614:	f300 823f 	bgt.w	8008a96 <start_pass_fdctmgr+0x5d2>
 8008618:	f240 720e 	movw	r2, #1806	@ 0x70e
 800861c:	4293      	cmp	r3, r2
 800861e:	f000 8180 	beq.w	8008922 <start_pass_fdctmgr+0x45e>
 8008622:	f240 720e 	movw	r2, #1806	@ 0x70e
 8008626:	4293      	cmp	r3, r2
 8008628:	f300 8235 	bgt.w	8008a96 <start_pass_fdctmgr+0x5d2>
 800862c:	f240 7207 	movw	r2, #1799	@ 0x707
 8008630:	4293      	cmp	r3, r2
 8008632:	f000 80c2 	beq.w	80087ba <start_pass_fdctmgr+0x2f6>
 8008636:	f5b3 6fe1 	cmp.w	r3, #1800	@ 0x708
 800863a:	f280 822c 	bge.w	8008a96 <start_pass_fdctmgr+0x5d2>
 800863e:	f240 620c 	movw	r2, #1548	@ 0x60c
 8008642:	4293      	cmp	r3, r2
 8008644:	f000 8177 	beq.w	8008936 <start_pass_fdctmgr+0x472>
 8008648:	f240 620c 	movw	r2, #1548	@ 0x60c
 800864c:	4293      	cmp	r3, r2
 800864e:	f300 8222 	bgt.w	8008a96 <start_pass_fdctmgr+0x5d2>
 8008652:	f240 6206 	movw	r2, #1542	@ 0x606
 8008656:	4293      	cmp	r3, r2
 8008658:	f000 80a5 	beq.w	80087a6 <start_pass_fdctmgr+0x2e2>
 800865c:	f240 6206 	movw	r2, #1542	@ 0x606
 8008660:	4293      	cmp	r3, r2
 8008662:	f300 8218 	bgt.w	8008a96 <start_pass_fdctmgr+0x5d2>
 8008666:	f240 6203 	movw	r2, #1539	@ 0x603
 800866a:	4293      	cmp	r3, r2
 800866c:	f000 8131 	beq.w	80088d2 <start_pass_fdctmgr+0x40e>
 8008670:	f240 6203 	movw	r2, #1539	@ 0x603
 8008674:	4293      	cmp	r3, r2
 8008676:	f300 820e 	bgt.w	8008a96 <start_pass_fdctmgr+0x5d2>
 800867a:	f240 520a 	movw	r2, #1290	@ 0x50a
 800867e:	4293      	cmp	r3, r2
 8008680:	f000 8163 	beq.w	800894a <start_pass_fdctmgr+0x486>
 8008684:	f240 520a 	movw	r2, #1290	@ 0x50a
 8008688:	4293      	cmp	r3, r2
 800868a:	f300 8204 	bgt.w	8008a96 <start_pass_fdctmgr+0x5d2>
 800868e:	f240 5205 	movw	r2, #1285	@ 0x505
 8008692:	4293      	cmp	r3, r2
 8008694:	d07d      	beq.n	8008792 <start_pass_fdctmgr+0x2ce>
 8008696:	f240 5205 	movw	r2, #1285	@ 0x505
 800869a:	4293      	cmp	r3, r2
 800869c:	f300 81fb 	bgt.w	8008a96 <start_pass_fdctmgr+0x5d2>
 80086a0:	f5b3 6f81 	cmp.w	r3, #1032	@ 0x408
 80086a4:	f000 815b 	beq.w	800895e <start_pass_fdctmgr+0x49a>
 80086a8:	f5b3 6f81 	cmp.w	r3, #1032	@ 0x408
 80086ac:	f300 81f3 	bgt.w	8008a96 <start_pass_fdctmgr+0x5d2>
 80086b0:	f240 4204 	movw	r2, #1028	@ 0x404
 80086b4:	4293      	cmp	r3, r2
 80086b6:	d062      	beq.n	800877e <start_pass_fdctmgr+0x2ba>
 80086b8:	f240 4204 	movw	r2, #1028	@ 0x404
 80086bc:	4293      	cmp	r3, r2
 80086be:	f300 81ea 	bgt.w	8008a96 <start_pass_fdctmgr+0x5d2>
 80086c2:	f240 4202 	movw	r2, #1026	@ 0x402
 80086c6:	4293      	cmp	r3, r2
 80086c8:	f000 810d 	beq.w	80088e6 <start_pass_fdctmgr+0x422>
 80086cc:	f240 4202 	movw	r2, #1026	@ 0x402
 80086d0:	4293      	cmp	r3, r2
 80086d2:	f300 81e0 	bgt.w	8008a96 <start_pass_fdctmgr+0x5d2>
 80086d6:	f240 3206 	movw	r2, #774	@ 0x306
 80086da:	4293      	cmp	r3, r2
 80086dc:	f000 8149 	beq.w	8008972 <start_pass_fdctmgr+0x4ae>
 80086e0:	f240 3206 	movw	r2, #774	@ 0x306
 80086e4:	4293      	cmp	r3, r2
 80086e6:	f300 81d6 	bgt.w	8008a96 <start_pass_fdctmgr+0x5d2>
 80086ea:	f240 3203 	movw	r2, #771	@ 0x303
 80086ee:	4293      	cmp	r3, r2
 80086f0:	d03b      	beq.n	800876a <start_pass_fdctmgr+0x2a6>
 80086f2:	f5b3 7f41 	cmp.w	r3, #772	@ 0x304
 80086f6:	f280 81ce 	bge.w	8008a96 <start_pass_fdctmgr+0x5d2>
 80086fa:	f5b3 7f01 	cmp.w	r3, #516	@ 0x204
 80086fe:	f000 8142 	beq.w	8008986 <start_pass_fdctmgr+0x4c2>
 8008702:	f5b3 7f01 	cmp.w	r3, #516	@ 0x204
 8008706:	f300 81c6 	bgt.w	8008a96 <start_pass_fdctmgr+0x5d2>
 800870a:	f240 2202 	movw	r2, #514	@ 0x202
 800870e:	4293      	cmp	r3, r2
 8008710:	d021      	beq.n	8008756 <start_pass_fdctmgr+0x292>
 8008712:	f240 2202 	movw	r2, #514	@ 0x202
 8008716:	4293      	cmp	r3, r2
 8008718:	f300 81bd 	bgt.w	8008a96 <start_pass_fdctmgr+0x5d2>
 800871c:	f240 2201 	movw	r2, #513	@ 0x201
 8008720:	4293      	cmp	r3, r2
 8008722:	f000 80ea 	beq.w	80088fa <start_pass_fdctmgr+0x436>
 8008726:	f240 2201 	movw	r2, #513	@ 0x201
 800872a:	4293      	cmp	r3, r2
 800872c:	f300 81b3 	bgt.w	8008a96 <start_pass_fdctmgr+0x5d2>
 8008730:	f240 1201 	movw	r2, #257	@ 0x101
 8008734:	4293      	cmp	r3, r2
 8008736:	d004      	beq.n	8008742 <start_pass_fdctmgr+0x27e>
 8008738:	f5b3 7f81 	cmp.w	r3, #258	@ 0x102
 800873c:	f000 812d 	beq.w	800899a <start_pass_fdctmgr+0x4d6>
 8008740:	e1a9      	b.n	8008a96 <start_pass_fdctmgr+0x5d2>
#ifdef DCT_SCALING_SUPPORTED
    case ((1 << 8) + 1):
      fdct->do_dct[ci] = jpeg_fdct_1x1;
 8008742:	69fa      	ldr	r2, [r7, #28]
 8008744:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8008746:	330a      	adds	r3, #10
 8008748:	009b      	lsls	r3, r3, #2
 800874a:	4413      	add	r3, r2
 800874c:	4a98      	ldr	r2, [pc, #608]	@ (80089b0 <start_pass_fdctmgr+0x4ec>)
 800874e:	605a      	str	r2, [r3, #4]
      method = JDCT_ISLOW;	/* jfdctint uses islow-style table */
 8008750:	2300      	movs	r3, #0
 8008752:	62bb      	str	r3, [r7, #40]	@ 0x28
      break;
 8008754:	e1b3      	b.n	8008abe <start_pass_fdctmgr+0x5fa>
    case ((2 << 8) + 2):
      fdct->do_dct[ci] = jpeg_fdct_2x2;
 8008756:	69fa      	ldr	r2, [r7, #28]
 8008758:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800875a:	330a      	adds	r3, #10
 800875c:	009b      	lsls	r3, r3, #2
 800875e:	4413      	add	r3, r2
 8008760:	4a94      	ldr	r2, [pc, #592]	@ (80089b4 <start_pass_fdctmgr+0x4f0>)
 8008762:	605a      	str	r2, [r3, #4]
      method = JDCT_ISLOW;	/* jfdctint uses islow-style table */
 8008764:	2300      	movs	r3, #0
 8008766:	62bb      	str	r3, [r7, #40]	@ 0x28
      break;
 8008768:	e1a9      	b.n	8008abe <start_pass_fdctmgr+0x5fa>
    case ((3 << 8) + 3):
      fdct->do_dct[ci] = jpeg_fdct_3x3;
 800876a:	69fa      	ldr	r2, [r7, #28]
 800876c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800876e:	330a      	adds	r3, #10
 8008770:	009b      	lsls	r3, r3, #2
 8008772:	4413      	add	r3, r2
 8008774:	4a90      	ldr	r2, [pc, #576]	@ (80089b8 <start_pass_fdctmgr+0x4f4>)
 8008776:	605a      	str	r2, [r3, #4]
      method = JDCT_ISLOW;	/* jfdctint uses islow-style table */
 8008778:	2300      	movs	r3, #0
 800877a:	62bb      	str	r3, [r7, #40]	@ 0x28
      break;
 800877c:	e19f      	b.n	8008abe <start_pass_fdctmgr+0x5fa>
    case ((4 << 8) + 4):
      fdct->do_dct[ci] = jpeg_fdct_4x4;
 800877e:	69fa      	ldr	r2, [r7, #28]
 8008780:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8008782:	330a      	adds	r3, #10
 8008784:	009b      	lsls	r3, r3, #2
 8008786:	4413      	add	r3, r2
 8008788:	4a8c      	ldr	r2, [pc, #560]	@ (80089bc <start_pass_fdctmgr+0x4f8>)
 800878a:	605a      	str	r2, [r3, #4]
      method = JDCT_ISLOW;	/* jfdctint uses islow-style table */
 800878c:	2300      	movs	r3, #0
 800878e:	62bb      	str	r3, [r7, #40]	@ 0x28
      break;
 8008790:	e195      	b.n	8008abe <start_pass_fdctmgr+0x5fa>
    case ((5 << 8) + 5):
      fdct->do_dct[ci] = jpeg_fdct_5x5;
 8008792:	69fa      	ldr	r2, [r7, #28]
 8008794:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8008796:	330a      	adds	r3, #10
 8008798:	009b      	lsls	r3, r3, #2
 800879a:	4413      	add	r3, r2
 800879c:	4a88      	ldr	r2, [pc, #544]	@ (80089c0 <start_pass_fdctmgr+0x4fc>)
 800879e:	605a      	str	r2, [r3, #4]
      method = JDCT_ISLOW;	/* jfdctint uses islow-style table */
 80087a0:	2300      	movs	r3, #0
 80087a2:	62bb      	str	r3, [r7, #40]	@ 0x28
      break;
 80087a4:	e18b      	b.n	8008abe <start_pass_fdctmgr+0x5fa>
    case ((6 << 8) + 6):
      fdct->do_dct[ci] = jpeg_fdct_6x6;
 80087a6:	69fa      	ldr	r2, [r7, #28]
 80087a8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80087aa:	330a      	adds	r3, #10
 80087ac:	009b      	lsls	r3, r3, #2
 80087ae:	4413      	add	r3, r2
 80087b0:	4a84      	ldr	r2, [pc, #528]	@ (80089c4 <start_pass_fdctmgr+0x500>)
 80087b2:	605a      	str	r2, [r3, #4]
      method = JDCT_ISLOW;	/* jfdctint uses islow-style table */
 80087b4:	2300      	movs	r3, #0
 80087b6:	62bb      	str	r3, [r7, #40]	@ 0x28
      break;
 80087b8:	e181      	b.n	8008abe <start_pass_fdctmgr+0x5fa>
    case ((7 << 8) + 7):
      fdct->do_dct[ci] = jpeg_fdct_7x7;
 80087ba:	69fa      	ldr	r2, [r7, #28]
 80087bc:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80087be:	330a      	adds	r3, #10
 80087c0:	009b      	lsls	r3, r3, #2
 80087c2:	4413      	add	r3, r2
 80087c4:	4a80      	ldr	r2, [pc, #512]	@ (80089c8 <start_pass_fdctmgr+0x504>)
 80087c6:	605a      	str	r2, [r3, #4]
      method = JDCT_ISLOW;	/* jfdctint uses islow-style table */
 80087c8:	2300      	movs	r3, #0
 80087ca:	62bb      	str	r3, [r7, #40]	@ 0x28
      break;
 80087cc:	e177      	b.n	8008abe <start_pass_fdctmgr+0x5fa>
    case ((9 << 8) + 9):
      fdct->do_dct[ci] = jpeg_fdct_9x9;
 80087ce:	69fa      	ldr	r2, [r7, #28]
 80087d0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80087d2:	330a      	adds	r3, #10
 80087d4:	009b      	lsls	r3, r3, #2
 80087d6:	4413      	add	r3, r2
 80087d8:	4a7c      	ldr	r2, [pc, #496]	@ (80089cc <start_pass_fdctmgr+0x508>)
 80087da:	605a      	str	r2, [r3, #4]
      method = JDCT_ISLOW;	/* jfdctint uses islow-style table */
 80087dc:	2300      	movs	r3, #0
 80087de:	62bb      	str	r3, [r7, #40]	@ 0x28
      break;
 80087e0:	e16d      	b.n	8008abe <start_pass_fdctmgr+0x5fa>
    case ((10 << 8) + 10):
      fdct->do_dct[ci] = jpeg_fdct_10x10;
 80087e2:	69fa      	ldr	r2, [r7, #28]
 80087e4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80087e6:	330a      	adds	r3, #10
 80087e8:	009b      	lsls	r3, r3, #2
 80087ea:	4413      	add	r3, r2
 80087ec:	4a78      	ldr	r2, [pc, #480]	@ (80089d0 <start_pass_fdctmgr+0x50c>)
 80087ee:	605a      	str	r2, [r3, #4]
      method = JDCT_ISLOW;	/* jfdctint uses islow-style table */
 80087f0:	2300      	movs	r3, #0
 80087f2:	62bb      	str	r3, [r7, #40]	@ 0x28
      break;
 80087f4:	e163      	b.n	8008abe <start_pass_fdctmgr+0x5fa>
    case ((11 << 8) + 11):
      fdct->do_dct[ci] = jpeg_fdct_11x11;
 80087f6:	69fa      	ldr	r2, [r7, #28]
 80087f8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80087fa:	330a      	adds	r3, #10
 80087fc:	009b      	lsls	r3, r3, #2
 80087fe:	4413      	add	r3, r2
 8008800:	4a74      	ldr	r2, [pc, #464]	@ (80089d4 <start_pass_fdctmgr+0x510>)
 8008802:	605a      	str	r2, [r3, #4]
      method = JDCT_ISLOW;	/* jfdctint uses islow-style table */
 8008804:	2300      	movs	r3, #0
 8008806:	62bb      	str	r3, [r7, #40]	@ 0x28
      break;
 8008808:	e159      	b.n	8008abe <start_pass_fdctmgr+0x5fa>
    case ((12 << 8) + 12):
      fdct->do_dct[ci] = jpeg_fdct_12x12;
 800880a:	69fa      	ldr	r2, [r7, #28]
 800880c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800880e:	330a      	adds	r3, #10
 8008810:	009b      	lsls	r3, r3, #2
 8008812:	4413      	add	r3, r2
 8008814:	4a70      	ldr	r2, [pc, #448]	@ (80089d8 <start_pass_fdctmgr+0x514>)
 8008816:	605a      	str	r2, [r3, #4]
      method = JDCT_ISLOW;	/* jfdctint uses islow-style table */
 8008818:	2300      	movs	r3, #0
 800881a:	62bb      	str	r3, [r7, #40]	@ 0x28
      break;
 800881c:	e14f      	b.n	8008abe <start_pass_fdctmgr+0x5fa>
    case ((13 << 8) + 13):
      fdct->do_dct[ci] = jpeg_fdct_13x13;
 800881e:	69fa      	ldr	r2, [r7, #28]
 8008820:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8008822:	330a      	adds	r3, #10
 8008824:	009b      	lsls	r3, r3, #2
 8008826:	4413      	add	r3, r2
 8008828:	4a6c      	ldr	r2, [pc, #432]	@ (80089dc <start_pass_fdctmgr+0x518>)
 800882a:	605a      	str	r2, [r3, #4]
      method = JDCT_ISLOW;	/* jfdctint uses islow-style table */
 800882c:	2300      	movs	r3, #0
 800882e:	62bb      	str	r3, [r7, #40]	@ 0x28
      break;
 8008830:	e145      	b.n	8008abe <start_pass_fdctmgr+0x5fa>
    case ((14 << 8) + 14):
      fdct->do_dct[ci] = jpeg_fdct_14x14;
 8008832:	69fa      	ldr	r2, [r7, #28]
 8008834:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8008836:	330a      	adds	r3, #10
 8008838:	009b      	lsls	r3, r3, #2
 800883a:	4413      	add	r3, r2
 800883c:	4a68      	ldr	r2, [pc, #416]	@ (80089e0 <start_pass_fdctmgr+0x51c>)
 800883e:	605a      	str	r2, [r3, #4]
      method = JDCT_ISLOW;	/* jfdctint uses islow-style table */
 8008840:	2300      	movs	r3, #0
 8008842:	62bb      	str	r3, [r7, #40]	@ 0x28
      break;
 8008844:	e13b      	b.n	8008abe <start_pass_fdctmgr+0x5fa>
    case ((15 << 8) + 15):
      fdct->do_dct[ci] = jpeg_fdct_15x15;
 8008846:	69fa      	ldr	r2, [r7, #28]
 8008848:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800884a:	330a      	adds	r3, #10
 800884c:	009b      	lsls	r3, r3, #2
 800884e:	4413      	add	r3, r2
 8008850:	4a64      	ldr	r2, [pc, #400]	@ (80089e4 <start_pass_fdctmgr+0x520>)
 8008852:	605a      	str	r2, [r3, #4]
      method = JDCT_ISLOW;	/* jfdctint uses islow-style table */
 8008854:	2300      	movs	r3, #0
 8008856:	62bb      	str	r3, [r7, #40]	@ 0x28
      break;
 8008858:	e131      	b.n	8008abe <start_pass_fdctmgr+0x5fa>
    case ((16 << 8) + 16):
      fdct->do_dct[ci] = jpeg_fdct_16x16;
 800885a:	69fa      	ldr	r2, [r7, #28]
 800885c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800885e:	330a      	adds	r3, #10
 8008860:	009b      	lsls	r3, r3, #2
 8008862:	4413      	add	r3, r2
 8008864:	4a60      	ldr	r2, [pc, #384]	@ (80089e8 <start_pass_fdctmgr+0x524>)
 8008866:	605a      	str	r2, [r3, #4]
      method = JDCT_ISLOW;	/* jfdctint uses islow-style table */
 8008868:	2300      	movs	r3, #0
 800886a:	62bb      	str	r3, [r7, #40]	@ 0x28
      break;
 800886c:	e127      	b.n	8008abe <start_pass_fdctmgr+0x5fa>
    case ((16 << 8) + 8):
      fdct->do_dct[ci] = jpeg_fdct_16x8;
 800886e:	69fa      	ldr	r2, [r7, #28]
 8008870:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8008872:	330a      	adds	r3, #10
 8008874:	009b      	lsls	r3, r3, #2
 8008876:	4413      	add	r3, r2
 8008878:	4a5c      	ldr	r2, [pc, #368]	@ (80089ec <start_pass_fdctmgr+0x528>)
 800887a:	605a      	str	r2, [r3, #4]
      method = JDCT_ISLOW;	/* jfdctint uses islow-style table */
 800887c:	2300      	movs	r3, #0
 800887e:	62bb      	str	r3, [r7, #40]	@ 0x28
      break;
 8008880:	e11d      	b.n	8008abe <start_pass_fdctmgr+0x5fa>
    case ((14 << 8) + 7):
      fdct->do_dct[ci] = jpeg_fdct_14x7;
 8008882:	69fa      	ldr	r2, [r7, #28]
 8008884:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8008886:	330a      	adds	r3, #10
 8008888:	009b      	lsls	r3, r3, #2
 800888a:	4413      	add	r3, r2
 800888c:	4a58      	ldr	r2, [pc, #352]	@ (80089f0 <start_pass_fdctmgr+0x52c>)
 800888e:	605a      	str	r2, [r3, #4]
      method = JDCT_ISLOW;	/* jfdctint uses islow-style table */
 8008890:	2300      	movs	r3, #0
 8008892:	62bb      	str	r3, [r7, #40]	@ 0x28
      break;
 8008894:	e113      	b.n	8008abe <start_pass_fdctmgr+0x5fa>
    case ((12 << 8) + 6):
      fdct->do_dct[ci] = jpeg_fdct_12x6;
 8008896:	69fa      	ldr	r2, [r7, #28]
 8008898:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800889a:	330a      	adds	r3, #10
 800889c:	009b      	lsls	r3, r3, #2
 800889e:	4413      	add	r3, r2
 80088a0:	4a54      	ldr	r2, [pc, #336]	@ (80089f4 <start_pass_fdctmgr+0x530>)
 80088a2:	605a      	str	r2, [r3, #4]
      method = JDCT_ISLOW;	/* jfdctint uses islow-style table */
 80088a4:	2300      	movs	r3, #0
 80088a6:	62bb      	str	r3, [r7, #40]	@ 0x28
      break;
 80088a8:	e109      	b.n	8008abe <start_pass_fdctmgr+0x5fa>
    case ((10 << 8) + 5):
      fdct->do_dct[ci] = jpeg_fdct_10x5;
 80088aa:	69fa      	ldr	r2, [r7, #28]
 80088ac:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80088ae:	330a      	adds	r3, #10
 80088b0:	009b      	lsls	r3, r3, #2
 80088b2:	4413      	add	r3, r2
 80088b4:	4a50      	ldr	r2, [pc, #320]	@ (80089f8 <start_pass_fdctmgr+0x534>)
 80088b6:	605a      	str	r2, [r3, #4]
      method = JDCT_ISLOW;	/* jfdctint uses islow-style table */
 80088b8:	2300      	movs	r3, #0
 80088ba:	62bb      	str	r3, [r7, #40]	@ 0x28
      break;
 80088bc:	e0ff      	b.n	8008abe <start_pass_fdctmgr+0x5fa>
    case ((8 << 8) + 4):
      fdct->do_dct[ci] = jpeg_fdct_8x4;
 80088be:	69fa      	ldr	r2, [r7, #28]
 80088c0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80088c2:	330a      	adds	r3, #10
 80088c4:	009b      	lsls	r3, r3, #2
 80088c6:	4413      	add	r3, r2
 80088c8:	4a4c      	ldr	r2, [pc, #304]	@ (80089fc <start_pass_fdctmgr+0x538>)
 80088ca:	605a      	str	r2, [r3, #4]
      method = JDCT_ISLOW;	/* jfdctint uses islow-style table */
 80088cc:	2300      	movs	r3, #0
 80088ce:	62bb      	str	r3, [r7, #40]	@ 0x28
      break;
 80088d0:	e0f5      	b.n	8008abe <start_pass_fdctmgr+0x5fa>
    case ((6 << 8) + 3):
      fdct->do_dct[ci] = jpeg_fdct_6x3;
 80088d2:	69fa      	ldr	r2, [r7, #28]
 80088d4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80088d6:	330a      	adds	r3, #10
 80088d8:	009b      	lsls	r3, r3, #2
 80088da:	4413      	add	r3, r2
 80088dc:	4a48      	ldr	r2, [pc, #288]	@ (8008a00 <start_pass_fdctmgr+0x53c>)
 80088de:	605a      	str	r2, [r3, #4]
      method = JDCT_ISLOW;	/* jfdctint uses islow-style table */
 80088e0:	2300      	movs	r3, #0
 80088e2:	62bb      	str	r3, [r7, #40]	@ 0x28
      break;
 80088e4:	e0eb      	b.n	8008abe <start_pass_fdctmgr+0x5fa>
    case ((4 << 8) + 2):
      fdct->do_dct[ci] = jpeg_fdct_4x2;
 80088e6:	69fa      	ldr	r2, [r7, #28]
 80088e8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80088ea:	330a      	adds	r3, #10
 80088ec:	009b      	lsls	r3, r3, #2
 80088ee:	4413      	add	r3, r2
 80088f0:	4a44      	ldr	r2, [pc, #272]	@ (8008a04 <start_pass_fdctmgr+0x540>)
 80088f2:	605a      	str	r2, [r3, #4]
      method = JDCT_ISLOW;	/* jfdctint uses islow-style table */
 80088f4:	2300      	movs	r3, #0
 80088f6:	62bb      	str	r3, [r7, #40]	@ 0x28
      break;
 80088f8:	e0e1      	b.n	8008abe <start_pass_fdctmgr+0x5fa>
    case ((2 << 8) + 1):
      fdct->do_dct[ci] = jpeg_fdct_2x1;
 80088fa:	69fa      	ldr	r2, [r7, #28]
 80088fc:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80088fe:	330a      	adds	r3, #10
 8008900:	009b      	lsls	r3, r3, #2
 8008902:	4413      	add	r3, r2
 8008904:	4a40      	ldr	r2, [pc, #256]	@ (8008a08 <start_pass_fdctmgr+0x544>)
 8008906:	605a      	str	r2, [r3, #4]
      method = JDCT_ISLOW;	/* jfdctint uses islow-style table */
 8008908:	2300      	movs	r3, #0
 800890a:	62bb      	str	r3, [r7, #40]	@ 0x28
      break;
 800890c:	e0d7      	b.n	8008abe <start_pass_fdctmgr+0x5fa>
    case ((8 << 8) + 16):
      fdct->do_dct[ci] = jpeg_fdct_8x16;
 800890e:	69fa      	ldr	r2, [r7, #28]
 8008910:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8008912:	330a      	adds	r3, #10
 8008914:	009b      	lsls	r3, r3, #2
 8008916:	4413      	add	r3, r2
 8008918:	4a3c      	ldr	r2, [pc, #240]	@ (8008a0c <start_pass_fdctmgr+0x548>)
 800891a:	605a      	str	r2, [r3, #4]
      method = JDCT_ISLOW;	/* jfdctint uses islow-style table */
 800891c:	2300      	movs	r3, #0
 800891e:	62bb      	str	r3, [r7, #40]	@ 0x28
      break;
 8008920:	e0cd      	b.n	8008abe <start_pass_fdctmgr+0x5fa>
    case ((7 << 8) + 14):
      fdct->do_dct[ci] = jpeg_fdct_7x14;
 8008922:	69fa      	ldr	r2, [r7, #28]
 8008924:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8008926:	330a      	adds	r3, #10
 8008928:	009b      	lsls	r3, r3, #2
 800892a:	4413      	add	r3, r2
 800892c:	4a38      	ldr	r2, [pc, #224]	@ (8008a10 <start_pass_fdctmgr+0x54c>)
 800892e:	605a      	str	r2, [r3, #4]
      method = JDCT_ISLOW;	/* jfdctint uses islow-style table */
 8008930:	2300      	movs	r3, #0
 8008932:	62bb      	str	r3, [r7, #40]	@ 0x28
      break;
 8008934:	e0c3      	b.n	8008abe <start_pass_fdctmgr+0x5fa>
    case ((6 << 8) + 12):
      fdct->do_dct[ci] = jpeg_fdct_6x12;
 8008936:	69fa      	ldr	r2, [r7, #28]
 8008938:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800893a:	330a      	adds	r3, #10
 800893c:	009b      	lsls	r3, r3, #2
 800893e:	4413      	add	r3, r2
 8008940:	4a34      	ldr	r2, [pc, #208]	@ (8008a14 <start_pass_fdctmgr+0x550>)
 8008942:	605a      	str	r2, [r3, #4]
      method = JDCT_ISLOW;	/* jfdctint uses islow-style table */
 8008944:	2300      	movs	r3, #0
 8008946:	62bb      	str	r3, [r7, #40]	@ 0x28
      break;
 8008948:	e0b9      	b.n	8008abe <start_pass_fdctmgr+0x5fa>
    case ((5 << 8) + 10):
      fdct->do_dct[ci] = jpeg_fdct_5x10;
 800894a:	69fa      	ldr	r2, [r7, #28]
 800894c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800894e:	330a      	adds	r3, #10
 8008950:	009b      	lsls	r3, r3, #2
 8008952:	4413      	add	r3, r2
 8008954:	4a30      	ldr	r2, [pc, #192]	@ (8008a18 <start_pass_fdctmgr+0x554>)
 8008956:	605a      	str	r2, [r3, #4]
      method = JDCT_ISLOW;	/* jfdctint uses islow-style table */
 8008958:	2300      	movs	r3, #0
 800895a:	62bb      	str	r3, [r7, #40]	@ 0x28
      break;
 800895c:	e0af      	b.n	8008abe <start_pass_fdctmgr+0x5fa>
    case ((4 << 8) + 8):
      fdct->do_dct[ci] = jpeg_fdct_4x8;
 800895e:	69fa      	ldr	r2, [r7, #28]
 8008960:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8008962:	330a      	adds	r3, #10
 8008964:	009b      	lsls	r3, r3, #2
 8008966:	4413      	add	r3, r2
 8008968:	4a2c      	ldr	r2, [pc, #176]	@ (8008a1c <start_pass_fdctmgr+0x558>)
 800896a:	605a      	str	r2, [r3, #4]
      method = JDCT_ISLOW;	/* jfdctint uses islow-style table */
 800896c:	2300      	movs	r3, #0
 800896e:	62bb      	str	r3, [r7, #40]	@ 0x28
      break;
 8008970:	e0a5      	b.n	8008abe <start_pass_fdctmgr+0x5fa>
    case ((3 << 8) + 6):
      fdct->do_dct[ci] = jpeg_fdct_3x6;
 8008972:	69fa      	ldr	r2, [r7, #28]
 8008974:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8008976:	330a      	adds	r3, #10
 8008978:	009b      	lsls	r3, r3, #2
 800897a:	4413      	add	r3, r2
 800897c:	4a28      	ldr	r2, [pc, #160]	@ (8008a20 <start_pass_fdctmgr+0x55c>)
 800897e:	605a      	str	r2, [r3, #4]
      method = JDCT_ISLOW;	/* jfdctint uses islow-style table */
 8008980:	2300      	movs	r3, #0
 8008982:	62bb      	str	r3, [r7, #40]	@ 0x28
      break;
 8008984:	e09b      	b.n	8008abe <start_pass_fdctmgr+0x5fa>
    case ((2 << 8) + 4):
      fdct->do_dct[ci] = jpeg_fdct_2x4;
 8008986:	69fa      	ldr	r2, [r7, #28]
 8008988:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800898a:	330a      	adds	r3, #10
 800898c:	009b      	lsls	r3, r3, #2
 800898e:	4413      	add	r3, r2
 8008990:	4a24      	ldr	r2, [pc, #144]	@ (8008a24 <start_pass_fdctmgr+0x560>)
 8008992:	605a      	str	r2, [r3, #4]
      method = JDCT_ISLOW;	/* jfdctint uses islow-style table */
 8008994:	2300      	movs	r3, #0
 8008996:	62bb      	str	r3, [r7, #40]	@ 0x28
      break;
 8008998:	e091      	b.n	8008abe <start_pass_fdctmgr+0x5fa>
    case ((1 << 8) + 2):
      fdct->do_dct[ci] = jpeg_fdct_1x2;
 800899a:	69fa      	ldr	r2, [r7, #28]
 800899c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800899e:	330a      	adds	r3, #10
 80089a0:	009b      	lsls	r3, r3, #2
 80089a2:	4413      	add	r3, r2
 80089a4:	4a20      	ldr	r2, [pc, #128]	@ (8008a28 <start_pass_fdctmgr+0x564>)
 80089a6:	605a      	str	r2, [r3, #4]
      method = JDCT_ISLOW;	/* jfdctint uses islow-style table */
 80089a8:	2300      	movs	r3, #0
 80089aa:	62bb      	str	r3, [r7, #40]	@ 0x28
      break;
 80089ac:	e087      	b.n	8008abe <start_pass_fdctmgr+0x5fa>
 80089ae:	bf00      	nop
 80089b0:	08010dab 	.word	0x08010dab
 80089b4:	08010cfb 	.word	0x08010cfb
 80089b8:	08010bb5 	.word	0x08010bb5
 80089bc:	08010a09 	.word	0x08010a09
 80089c0:	080107a9 	.word	0x080107a9
 80089c4:	08010511 	.word	0x08010511
 80089c8:	08010105 	.word	0x08010105
 80089cc:	08010ddd 	.word	0x08010ddd
 80089d0:	08011205 	.word	0x08011205
 80089d4:	08011731 	.word	0x08011731
 80089d8:	08011fc5 	.word	0x08011fc5
 80089dc:	08012781 	.word	0x08012781
 80089e0:	0801313d 	.word	0x0801313d
 80089e4:	08013a2d 	.word	0x08013a2d
 80089e8:	08014375 	.word	0x08014375
 80089ec:	08014ded 	.word	0x08014ded
 80089f0:	080153fd 	.word	0x080153fd
 80089f4:	08015939 	.word	0x08015939
 80089f8:	08015d65 	.word	0x08015d65
 80089fc:	080160f1 	.word	0x080160f1
 8008a00:	08016401 	.word	0x08016401
 8008a04:	080165e5 	.word	0x080165e5
 8008a08:	08016721 	.word	0x08016721
 8008a0c:	08016779 	.word	0x08016779
 8008a10:	08016ff5 	.word	0x08016ff5
 8008a14:	08017781 	.word	0x08017781
 8008a18:	08017d25 	.word	0x08017d25
 8008a1c:	08018125 	.word	0x08018125
 8008a20:	0801842d 	.word	0x0801842d
 8008a24:	08018629 	.word	0x08018629
 8008a28:	08018759 	.word	0x08018759
#endif
    case ((DCTSIZE << 8) + DCTSIZE):
      switch (cinfo->dct_method) {
 8008a2c:	687b      	ldr	r3, [r7, #4]
 8008a2e:	f893 30e8 	ldrb.w	r3, [r3, #232]	@ 0xe8
 8008a32:	2b02      	cmp	r3, #2
 8008a34:	d01a      	beq.n	8008a6c <start_pass_fdctmgr+0x5a8>
 8008a36:	2b02      	cmp	r3, #2
 8008a38:	dc22      	bgt.n	8008a80 <start_pass_fdctmgr+0x5bc>
 8008a3a:	2b00      	cmp	r3, #0
 8008a3c:	d002      	beq.n	8008a44 <start_pass_fdctmgr+0x580>
 8008a3e:	2b01      	cmp	r3, #1
 8008a40:	d00a      	beq.n	8008a58 <start_pass_fdctmgr+0x594>
 8008a42:	e01d      	b.n	8008a80 <start_pass_fdctmgr+0x5bc>
#ifdef DCT_ISLOW_SUPPORTED
      case JDCT_ISLOW:
	fdct->do_dct[ci] = jpeg_fdct_islow;
 8008a44:	69fa      	ldr	r2, [r7, #28]
 8008a46:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8008a48:	330a      	adds	r3, #10
 8008a4a:	009b      	lsls	r3, r3, #2
 8008a4c:	4413      	add	r3, r2
 8008a4e:	4a85      	ldr	r2, [pc, #532]	@ (8008c64 <start_pass_fdctmgr+0x7a0>)
 8008a50:	605a      	str	r2, [r3, #4]
	method = JDCT_ISLOW;
 8008a52:	2300      	movs	r3, #0
 8008a54:	62bb      	str	r3, [r7, #40]	@ 0x28
	break;
 8008a56:	e01d      	b.n	8008a94 <start_pass_fdctmgr+0x5d0>
#endif
#ifdef DCT_IFAST_SUPPORTED
      case JDCT_IFAST:
	fdct->do_dct[ci] = jpeg_fdct_ifast;
 8008a58:	69fa      	ldr	r2, [r7, #28]
 8008a5a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8008a5c:	330a      	adds	r3, #10
 8008a5e:	009b      	lsls	r3, r3, #2
 8008a60:	4413      	add	r3, r2
 8008a62:	4a81      	ldr	r2, [pc, #516]	@ (8008c68 <start_pass_fdctmgr+0x7a4>)
 8008a64:	605a      	str	r2, [r3, #4]
	method = JDCT_IFAST;
 8008a66:	2301      	movs	r3, #1
 8008a68:	62bb      	str	r3, [r7, #40]	@ 0x28
	break;
 8008a6a:	e013      	b.n	8008a94 <start_pass_fdctmgr+0x5d0>
#endif
#ifdef DCT_FLOAT_SUPPORTED
      case JDCT_FLOAT:
	fdct->do_float_dct[ci] = jpeg_fdct_float;
 8008a6c:	69fa      	ldr	r2, [r7, #28]
 8008a6e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8008a70:	3318      	adds	r3, #24
 8008a72:	009b      	lsls	r3, r3, #2
 8008a74:	4413      	add	r3, r2
 8008a76:	4a7d      	ldr	r2, [pc, #500]	@ (8008c6c <start_pass_fdctmgr+0x7a8>)
 8008a78:	605a      	str	r2, [r3, #4]
	method = JDCT_FLOAT;
 8008a7a:	2302      	movs	r3, #2
 8008a7c:	62bb      	str	r3, [r7, #40]	@ 0x28
	break;
 8008a7e:	e009      	b.n	8008a94 <start_pass_fdctmgr+0x5d0>
#endif
      default:
	ERREXIT(cinfo, JERR_NOT_COMPILED);
 8008a80:	687b      	ldr	r3, [r7, #4]
 8008a82:	681b      	ldr	r3, [r3, #0]
 8008a84:	2231      	movs	r2, #49	@ 0x31
 8008a86:	615a      	str	r2, [r3, #20]
 8008a88:	687b      	ldr	r3, [r7, #4]
 8008a8a:	681b      	ldr	r3, [r3, #0]
 8008a8c:	681b      	ldr	r3, [r3, #0]
 8008a8e:	6878      	ldr	r0, [r7, #4]
 8008a90:	4798      	blx	r3
	break;
 8008a92:	bf00      	nop
      }
      break;
 8008a94:	e013      	b.n	8008abe <start_pass_fdctmgr+0x5fa>
    default:
      ERREXIT2(cinfo, JERR_BAD_DCTSIZE,
 8008a96:	687b      	ldr	r3, [r7, #4]
 8008a98:	681b      	ldr	r3, [r3, #0]
 8008a9a:	2207      	movs	r2, #7
 8008a9c:	615a      	str	r2, [r3, #20]
 8008a9e:	687b      	ldr	r3, [r7, #4]
 8008aa0:	681b      	ldr	r3, [r3, #0]
 8008aa2:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8008aa4:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8008aa6:	619a      	str	r2, [r3, #24]
 8008aa8:	687b      	ldr	r3, [r7, #4]
 8008aaa:	681b      	ldr	r3, [r3, #0]
 8008aac:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8008aae:	6a92      	ldr	r2, [r2, #40]	@ 0x28
 8008ab0:	61da      	str	r2, [r3, #28]
 8008ab2:	687b      	ldr	r3, [r7, #4]
 8008ab4:	681b      	ldr	r3, [r3, #0]
 8008ab6:	681b      	ldr	r3, [r3, #0]
 8008ab8:	6878      	ldr	r0, [r7, #4]
 8008aba:	4798      	blx	r3
	       compptr->DCT_h_scaled_size, compptr->DCT_v_scaled_size);
      break;
 8008abc:	bf00      	nop
    }
    qtblno = compptr->quant_tbl_no;
 8008abe:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008ac0:	691b      	ldr	r3, [r3, #16]
 8008ac2:	61bb      	str	r3, [r7, #24]
    /* Make sure specified quantization table is present */
    if (qtblno < 0 || qtblno >= NUM_QUANT_TBLS ||
 8008ac4:	69bb      	ldr	r3, [r7, #24]
 8008ac6:	2b00      	cmp	r3, #0
 8008ac8:	db09      	blt.n	8008ade <start_pass_fdctmgr+0x61a>
 8008aca:	69bb      	ldr	r3, [r7, #24]
 8008acc:	2b03      	cmp	r3, #3
 8008ace:	dc06      	bgt.n	8008ade <start_pass_fdctmgr+0x61a>
	cinfo->quant_tbl_ptrs[qtblno] == NULL)
 8008ad0:	687b      	ldr	r3, [r7, #4]
 8008ad2:	69ba      	ldr	r2, [r7, #24]
 8008ad4:	3216      	adds	r2, #22
 8008ad6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
    if (qtblno < 0 || qtblno >= NUM_QUANT_TBLS ||
 8008ada:	2b00      	cmp	r3, #0
 8008adc:	d10c      	bne.n	8008af8 <start_pass_fdctmgr+0x634>
      ERREXIT1(cinfo, JERR_NO_QUANT_TABLE, qtblno);
 8008ade:	687b      	ldr	r3, [r7, #4]
 8008ae0:	681b      	ldr	r3, [r3, #0]
 8008ae2:	2236      	movs	r2, #54	@ 0x36
 8008ae4:	615a      	str	r2, [r3, #20]
 8008ae6:	687b      	ldr	r3, [r7, #4]
 8008ae8:	681b      	ldr	r3, [r3, #0]
 8008aea:	69ba      	ldr	r2, [r7, #24]
 8008aec:	619a      	str	r2, [r3, #24]
 8008aee:	687b      	ldr	r3, [r7, #4]
 8008af0:	681b      	ldr	r3, [r3, #0]
 8008af2:	681b      	ldr	r3, [r3, #0]
 8008af4:	6878      	ldr	r0, [r7, #4]
 8008af6:	4798      	blx	r3
    qtbl = cinfo->quant_tbl_ptrs[qtblno];
 8008af8:	687b      	ldr	r3, [r7, #4]
 8008afa:	69ba      	ldr	r2, [r7, #24]
 8008afc:	3216      	adds	r2, #22
 8008afe:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008b02:	617b      	str	r3, [r7, #20]
    /* Compute divisors for this quant table */
    /* We may do this more than once for same table, but it's not a big deal */
    switch (method) {
 8008b04:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008b06:	2b02      	cmp	r3, #2
 8008b08:	f000 8085 	beq.w	8008c16 <start_pass_fdctmgr+0x752>
 8008b0c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008b0e:	2b02      	cmp	r3, #2
 8008b10:	f300 80ff 	bgt.w	8008d12 <start_pass_fdctmgr+0x84e>
 8008b14:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008b16:	2b00      	cmp	r3, #0
 8008b18:	d003      	beq.n	8008b22 <start_pass_fdctmgr+0x65e>
 8008b1a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008b1c:	2b01      	cmp	r3, #1
 8008b1e:	d039      	beq.n	8008b94 <start_pass_fdctmgr+0x6d0>
 8008b20:	e0f7      	b.n	8008d12 <start_pass_fdctmgr+0x84e>
#ifdef PROVIDE_ISLOW_TABLES
    case JDCT_ISLOW:
      /* For LL&M IDCT method, divisors are equal to raw quantization
       * coefficients multiplied by 8 (to counteract scaling).
       */
      if (fdct->divisors[qtblno] == NULL) {
 8008b22:	69fa      	ldr	r2, [r7, #28]
 8008b24:	69bb      	ldr	r3, [r7, #24]
 8008b26:	3314      	adds	r3, #20
 8008b28:	009b      	lsls	r3, r3, #2
 8008b2a:	4413      	add	r3, r2
 8008b2c:	685b      	ldr	r3, [r3, #4]
 8008b2e:	2b00      	cmp	r3, #0
 8008b30:	d10e      	bne.n	8008b50 <start_pass_fdctmgr+0x68c>
	fdct->divisors[qtblno] = (DCTELEM *)
	  (*cinfo->mem->alloc_small) ((j_common_ptr) cinfo, JPOOL_IMAGE,
 8008b32:	687b      	ldr	r3, [r7, #4]
 8008b34:	685b      	ldr	r3, [r3, #4]
 8008b36:	681b      	ldr	r3, [r3, #0]
 8008b38:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8008b3c:	2101      	movs	r1, #1
 8008b3e:	6878      	ldr	r0, [r7, #4]
 8008b40:	4798      	blx	r3
 8008b42:	4601      	mov	r1, r0
	fdct->divisors[qtblno] = (DCTELEM *)
 8008b44:	69fa      	ldr	r2, [r7, #28]
 8008b46:	69bb      	ldr	r3, [r7, #24]
 8008b48:	3314      	adds	r3, #20
 8008b4a:	009b      	lsls	r3, r3, #2
 8008b4c:	4413      	add	r3, r2
 8008b4e:	6059      	str	r1, [r3, #4]
				      DCTSIZE2 * SIZEOF(DCTELEM));
      }
      dtbl = fdct->divisors[qtblno];
 8008b50:	69fa      	ldr	r2, [r7, #28]
 8008b52:	69bb      	ldr	r3, [r7, #24]
 8008b54:	3314      	adds	r3, #20
 8008b56:	009b      	lsls	r3, r3, #2
 8008b58:	4413      	add	r3, r2
 8008b5a:	685b      	ldr	r3, [r3, #4]
 8008b5c:	60fb      	str	r3, [r7, #12]
      for (i = 0; i < DCTSIZE2; i++) {
 8008b5e:	2300      	movs	r3, #0
 8008b60:	633b      	str	r3, [r7, #48]	@ 0x30
 8008b62:	e00d      	b.n	8008b80 <start_pass_fdctmgr+0x6bc>
	dtbl[i] = ((DCTELEM) qtbl->quantval[i]) << 3;
 8008b64:	697b      	ldr	r3, [r7, #20]
 8008b66:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8008b68:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
 8008b6c:	4619      	mov	r1, r3
 8008b6e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008b70:	009b      	lsls	r3, r3, #2
 8008b72:	68fa      	ldr	r2, [r7, #12]
 8008b74:	4413      	add	r3, r2
 8008b76:	00ca      	lsls	r2, r1, #3
 8008b78:	601a      	str	r2, [r3, #0]
      for (i = 0; i < DCTSIZE2; i++) {
 8008b7a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008b7c:	3301      	adds	r3, #1
 8008b7e:	633b      	str	r3, [r7, #48]	@ 0x30
 8008b80:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008b82:	2b3f      	cmp	r3, #63	@ 0x3f
 8008b84:	ddee      	ble.n	8008b64 <start_pass_fdctmgr+0x6a0>
      }
      fdct->pub.forward_DCT[ci] = forward_DCT;
 8008b86:	69fa      	ldr	r2, [r7, #28]
 8008b88:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8008b8a:	009b      	lsls	r3, r3, #2
 8008b8c:	4413      	add	r3, r2
 8008b8e:	4a38      	ldr	r2, [pc, #224]	@ (8008c70 <start_pass_fdctmgr+0x7ac>)
 8008b90:	605a      	str	r2, [r3, #4]
      break;
 8008b92:	e0c8      	b.n	8008d26 <start_pass_fdctmgr+0x862>
	   8867, 12299, 11585, 10426,  8867,  6967,  4799,  2446,
	   4520,  6270,  5906,  5315,  4520,  3552,  2446,  1247
	};
	SHIFT_TEMPS

	if (fdct->divisors[qtblno] == NULL) {
 8008b94:	69fa      	ldr	r2, [r7, #28]
 8008b96:	69bb      	ldr	r3, [r7, #24]
 8008b98:	3314      	adds	r3, #20
 8008b9a:	009b      	lsls	r3, r3, #2
 8008b9c:	4413      	add	r3, r2
 8008b9e:	685b      	ldr	r3, [r3, #4]
 8008ba0:	2b00      	cmp	r3, #0
 8008ba2:	d10e      	bne.n	8008bc2 <start_pass_fdctmgr+0x6fe>
	  fdct->divisors[qtblno] = (DCTELEM *)
	    (*cinfo->mem->alloc_small) ((j_common_ptr) cinfo, JPOOL_IMAGE,
 8008ba4:	687b      	ldr	r3, [r7, #4]
 8008ba6:	685b      	ldr	r3, [r3, #4]
 8008ba8:	681b      	ldr	r3, [r3, #0]
 8008baa:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8008bae:	2101      	movs	r1, #1
 8008bb0:	6878      	ldr	r0, [r7, #4]
 8008bb2:	4798      	blx	r3
 8008bb4:	4601      	mov	r1, r0
	  fdct->divisors[qtblno] = (DCTELEM *)
 8008bb6:	69fa      	ldr	r2, [r7, #28]
 8008bb8:	69bb      	ldr	r3, [r7, #24]
 8008bba:	3314      	adds	r3, #20
 8008bbc:	009b      	lsls	r3, r3, #2
 8008bbe:	4413      	add	r3, r2
 8008bc0:	6059      	str	r1, [r3, #4]
					DCTSIZE2 * SIZEOF(DCTELEM));
	}
	dtbl = fdct->divisors[qtblno];
 8008bc2:	69fa      	ldr	r2, [r7, #28]
 8008bc4:	69bb      	ldr	r3, [r7, #24]
 8008bc6:	3314      	adds	r3, #20
 8008bc8:	009b      	lsls	r3, r3, #2
 8008bca:	4413      	add	r3, r2
 8008bcc:	685b      	ldr	r3, [r3, #4]
 8008bce:	60fb      	str	r3, [r7, #12]
	for (i = 0; i < DCTSIZE2; i++) {
 8008bd0:	2300      	movs	r3, #0
 8008bd2:	633b      	str	r3, [r7, #48]	@ 0x30
 8008bd4:	e015      	b.n	8008c02 <start_pass_fdctmgr+0x73e>
	  dtbl[i] = (DCTELEM)
	    DESCALE(MULTIPLY16V16((INT32) qtbl->quantval[i],
 8008bd6:	697b      	ldr	r3, [r7, #20]
 8008bd8:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8008bda:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
 8008bde:	4619      	mov	r1, r3
 8008be0:	4a24      	ldr	r2, [pc, #144]	@ (8008c74 <start_pass_fdctmgr+0x7b0>)
 8008be2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008be4:	f932 3013 	ldrsh.w	r3, [r2, r3, lsl #1]
 8008be8:	fb01 f303 	mul.w	r3, r1, r3
 8008bec:	f503 6280 	add.w	r2, r3, #1024	@ 0x400
	  dtbl[i] = (DCTELEM)
 8008bf0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008bf2:	009b      	lsls	r3, r3, #2
 8008bf4:	68f9      	ldr	r1, [r7, #12]
 8008bf6:	440b      	add	r3, r1
	    DESCALE(MULTIPLY16V16((INT32) qtbl->quantval[i],
 8008bf8:	12d2      	asrs	r2, r2, #11
	  dtbl[i] = (DCTELEM)
 8008bfa:	601a      	str	r2, [r3, #0]
	for (i = 0; i < DCTSIZE2; i++) {
 8008bfc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008bfe:	3301      	adds	r3, #1
 8008c00:	633b      	str	r3, [r7, #48]	@ 0x30
 8008c02:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008c04:	2b3f      	cmp	r3, #63	@ 0x3f
 8008c06:	dde6      	ble.n	8008bd6 <start_pass_fdctmgr+0x712>
				  (INT32) aanscales[i]),
		    CONST_BITS-3);
	}
      }
      fdct->pub.forward_DCT[ci] = forward_DCT;
 8008c08:	69fa      	ldr	r2, [r7, #28]
 8008c0a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8008c0c:	009b      	lsls	r3, r3, #2
 8008c0e:	4413      	add	r3, r2
 8008c10:	4a17      	ldr	r2, [pc, #92]	@ (8008c70 <start_pass_fdctmgr+0x7ac>)
 8008c12:	605a      	str	r2, [r3, #4]
      break;
 8008c14:	e087      	b.n	8008d26 <start_pass_fdctmgr+0x862>
	static const double aanscalefactor[DCTSIZE] = {
	  1.0, 1.387039845, 1.306562965, 1.175875602,
	  1.0, 0.785694958, 0.541196100, 0.275899379
	};

	if (fdct->float_divisors[qtblno] == NULL) {
 8008c16:	69fa      	ldr	r2, [r7, #28]
 8008c18:	69bb      	ldr	r3, [r7, #24]
 8008c1a:	3322      	adds	r3, #34	@ 0x22
 8008c1c:	009b      	lsls	r3, r3, #2
 8008c1e:	4413      	add	r3, r2
 8008c20:	685b      	ldr	r3, [r3, #4]
 8008c22:	2b00      	cmp	r3, #0
 8008c24:	d10e      	bne.n	8008c44 <start_pass_fdctmgr+0x780>
	  fdct->float_divisors[qtblno] = (FAST_FLOAT *)
	    (*cinfo->mem->alloc_small) ((j_common_ptr) cinfo, JPOOL_IMAGE,
 8008c26:	687b      	ldr	r3, [r7, #4]
 8008c28:	685b      	ldr	r3, [r3, #4]
 8008c2a:	681b      	ldr	r3, [r3, #0]
 8008c2c:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8008c30:	2101      	movs	r1, #1
 8008c32:	6878      	ldr	r0, [r7, #4]
 8008c34:	4798      	blx	r3
 8008c36:	4601      	mov	r1, r0
	  fdct->float_divisors[qtblno] = (FAST_FLOAT *)
 8008c38:	69fa      	ldr	r2, [r7, #28]
 8008c3a:	69bb      	ldr	r3, [r7, #24]
 8008c3c:	3322      	adds	r3, #34	@ 0x22
 8008c3e:	009b      	lsls	r3, r3, #2
 8008c40:	4413      	add	r3, r2
 8008c42:	6059      	str	r1, [r3, #4]
					DCTSIZE2 * SIZEOF(FAST_FLOAT));
	}
	fdtbl = fdct->float_divisors[qtblno];
 8008c44:	69fa      	ldr	r2, [r7, #28]
 8008c46:	69bb      	ldr	r3, [r7, #24]
 8008c48:	3322      	adds	r3, #34	@ 0x22
 8008c4a:	009b      	lsls	r3, r3, #2
 8008c4c:	4413      	add	r3, r2
 8008c4e:	685b      	ldr	r3, [r3, #4]
 8008c50:	613b      	str	r3, [r7, #16]
	i = 0;
 8008c52:	2300      	movs	r3, #0
 8008c54:	633b      	str	r3, [r7, #48]	@ 0x30
	for (row = 0; row < DCTSIZE; row++) {
 8008c56:	2300      	movs	r3, #0
 8008c58:	627b      	str	r3, [r7, #36]	@ 0x24
 8008c5a:	e050      	b.n	8008cfe <start_pass_fdctmgr+0x83a>
	  for (col = 0; col < DCTSIZE; col++) {
 8008c5c:	2300      	movs	r3, #0
 8008c5e:	623b      	str	r3, [r7, #32]
 8008c60:	e047      	b.n	8008cf2 <start_pass_fdctmgr+0x82e>
 8008c62:	bf00      	nop
 8008c64:	0800fca1 	.word	0x0800fca1
 8008c68:	0800f945 	.word	0x0800f945
 8008c6c:	0800f3ed 	.word	0x0800f3ed
 8008c70:	0800820d 	.word	0x0800820d
 8008c74:	0801b768 	.word	0x0801b768
	    fdtbl[i] = (FAST_FLOAT)
	      (1.0 / (((double) qtbl->quantval[i] *
 8008c78:	697b      	ldr	r3, [r7, #20]
 8008c7a:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8008c7c:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
 8008c80:	4618      	mov	r0, r3
 8008c82:	f7f7 fc3f 	bl	8000504 <__aeabi_ui2d>
		       aanscalefactor[row] * aanscalefactor[col] * 8.0)));
 8008c86:	4a30      	ldr	r2, [pc, #192]	@ (8008d48 <start_pass_fdctmgr+0x884>)
 8008c88:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008c8a:	00db      	lsls	r3, r3, #3
 8008c8c:	4413      	add	r3, r2
 8008c8e:	e9d3 2300 	ldrd	r2, r3, [r3]
	      (1.0 / (((double) qtbl->quantval[i] *
 8008c92:	f7f7 fcb1 	bl	80005f8 <__aeabi_dmul>
 8008c96:	4602      	mov	r2, r0
 8008c98:	460b      	mov	r3, r1
 8008c9a:	4610      	mov	r0, r2
 8008c9c:	4619      	mov	r1, r3
		       aanscalefactor[row] * aanscalefactor[col] * 8.0)));
 8008c9e:	4a2a      	ldr	r2, [pc, #168]	@ (8008d48 <start_pass_fdctmgr+0x884>)
 8008ca0:	6a3b      	ldr	r3, [r7, #32]
 8008ca2:	00db      	lsls	r3, r3, #3
 8008ca4:	4413      	add	r3, r2
 8008ca6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008caa:	f7f7 fca5 	bl	80005f8 <__aeabi_dmul>
 8008cae:	4602      	mov	r2, r0
 8008cb0:	460b      	mov	r3, r1
 8008cb2:	4610      	mov	r0, r2
 8008cb4:	4619      	mov	r1, r3
 8008cb6:	f04f 0200 	mov.w	r2, #0
 8008cba:	4b24      	ldr	r3, [pc, #144]	@ (8008d4c <start_pass_fdctmgr+0x888>)
 8008cbc:	f7f7 fc9c 	bl	80005f8 <__aeabi_dmul>
 8008cc0:	4602      	mov	r2, r0
 8008cc2:	460b      	mov	r3, r1
	      (1.0 / (((double) qtbl->quantval[i] *
 8008cc4:	f04f 0000 	mov.w	r0, #0
 8008cc8:	4921      	ldr	r1, [pc, #132]	@ (8008d50 <start_pass_fdctmgr+0x88c>)
 8008cca:	f7f7 fdbf 	bl	800084c <__aeabi_ddiv>
 8008cce:	4602      	mov	r2, r0
 8008cd0:	460b      	mov	r3, r1
 8008cd2:	4610      	mov	r0, r2
 8008cd4:	4619      	mov	r1, r3
	    fdtbl[i] = (FAST_FLOAT)
 8008cd6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008cd8:	009b      	lsls	r3, r3, #2
 8008cda:	693a      	ldr	r2, [r7, #16]
 8008cdc:	18d4      	adds	r4, r2, r3
 8008cde:	f7f7 fe9d 	bl	8000a1c <__aeabi_d2f>
 8008ce2:	4603      	mov	r3, r0
 8008ce4:	6023      	str	r3, [r4, #0]
	    i++;
 8008ce6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008ce8:	3301      	adds	r3, #1
 8008cea:	633b      	str	r3, [r7, #48]	@ 0x30
	  for (col = 0; col < DCTSIZE; col++) {
 8008cec:	6a3b      	ldr	r3, [r7, #32]
 8008cee:	3301      	adds	r3, #1
 8008cf0:	623b      	str	r3, [r7, #32]
 8008cf2:	6a3b      	ldr	r3, [r7, #32]
 8008cf4:	2b07      	cmp	r3, #7
 8008cf6:	ddbf      	ble.n	8008c78 <start_pass_fdctmgr+0x7b4>
	for (row = 0; row < DCTSIZE; row++) {
 8008cf8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008cfa:	3301      	adds	r3, #1
 8008cfc:	627b      	str	r3, [r7, #36]	@ 0x24
 8008cfe:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008d00:	2b07      	cmp	r3, #7
 8008d02:	ddab      	ble.n	8008c5c <start_pass_fdctmgr+0x798>
	  }
	}
      }
      fdct->pub.forward_DCT[ci] = forward_DCT_float;
 8008d04:	69fa      	ldr	r2, [r7, #28]
 8008d06:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8008d08:	009b      	lsls	r3, r3, #2
 8008d0a:	4413      	add	r3, r2
 8008d0c:	4a11      	ldr	r2, [pc, #68]	@ (8008d54 <start_pass_fdctmgr+0x890>)
 8008d0e:	605a      	str	r2, [r3, #4]
      break;
 8008d10:	e009      	b.n	8008d26 <start_pass_fdctmgr+0x862>
#endif
    default:
      ERREXIT(cinfo, JERR_NOT_COMPILED);
 8008d12:	687b      	ldr	r3, [r7, #4]
 8008d14:	681b      	ldr	r3, [r3, #0]
 8008d16:	2231      	movs	r2, #49	@ 0x31
 8008d18:	615a      	str	r2, [r3, #20]
 8008d1a:	687b      	ldr	r3, [r7, #4]
 8008d1c:	681b      	ldr	r3, [r3, #0]
 8008d1e:	681b      	ldr	r3, [r3, #0]
 8008d20:	6878      	ldr	r0, [r7, #4]
 8008d22:	4798      	blx	r3
      break;
 8008d24:	bf00      	nop
       ci++, compptr++) {
 8008d26:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8008d28:	3301      	adds	r3, #1
 8008d2a:	637b      	str	r3, [r7, #52]	@ 0x34
 8008d2c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008d2e:	3358      	adds	r3, #88	@ 0x58
 8008d30:	62fb      	str	r3, [r7, #44]	@ 0x2c
  for (ci = 0, compptr = cinfo->comp_info; ci < cinfo->num_components;
 8008d32:	687b      	ldr	r3, [r7, #4]
 8008d34:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8008d36:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8008d38:	429a      	cmp	r2, r3
 8008d3a:	f6ff abd4 	blt.w	80084e6 <start_pass_fdctmgr+0x22>
    }
  }
}
 8008d3e:	bf00      	nop
 8008d40:	bf00      	nop
 8008d42:	373c      	adds	r7, #60	@ 0x3c
 8008d44:	46bd      	mov	sp, r7
 8008d46:	bd90      	pop	{r4, r7, pc}
 8008d48:	0801b7e8 	.word	0x0801b7e8
 8008d4c:	40200000 	.word	0x40200000
 8008d50:	3ff00000 	.word	0x3ff00000
 8008d54:	08008369 	.word	0x08008369

08008d58 <jinit_forward_dct>:
 * Initialize FDCT manager.
 */

GLOBAL(void)
jinit_forward_dct (j_compress_ptr cinfo)
{
 8008d58:	b580      	push	{r7, lr}
 8008d5a:	b084      	sub	sp, #16
 8008d5c:	af00      	add	r7, sp, #0
 8008d5e:	6078      	str	r0, [r7, #4]
  my_fdct_ptr fdct;
  int i;

  fdct = (my_fdct_ptr)
    (*cinfo->mem->alloc_small) ((j_common_ptr) cinfo, JPOOL_IMAGE,
 8008d60:	687b      	ldr	r3, [r7, #4]
 8008d62:	685b      	ldr	r3, [r3, #4]
 8008d64:	681b      	ldr	r3, [r3, #0]
 8008d66:	229c      	movs	r2, #156	@ 0x9c
 8008d68:	2101      	movs	r1, #1
 8008d6a:	6878      	ldr	r0, [r7, #4]
 8008d6c:	4798      	blx	r3
 8008d6e:	60b8      	str	r0, [r7, #8]
				SIZEOF(my_fdct_controller));
  cinfo->fdct = (struct jpeg_forward_dct *) fdct;
 8008d70:	687b      	ldr	r3, [r7, #4]
 8008d72:	68ba      	ldr	r2, [r7, #8]
 8008d74:	f8c3 21a0 	str.w	r2, [r3, #416]	@ 0x1a0
  fdct->pub.start_pass = start_pass_fdctmgr;
 8008d78:	68bb      	ldr	r3, [r7, #8]
 8008d7a:	4a0f      	ldr	r2, [pc, #60]	@ (8008db8 <jinit_forward_dct+0x60>)
 8008d7c:	601a      	str	r2, [r3, #0]

  /* Mark divisor tables unallocated */
  for (i = 0; i < NUM_QUANT_TBLS; i++) {
 8008d7e:	2300      	movs	r3, #0
 8008d80:	60fb      	str	r3, [r7, #12]
 8008d82:	e010      	b.n	8008da6 <jinit_forward_dct+0x4e>
    fdct->divisors[i] = NULL;
 8008d84:	68ba      	ldr	r2, [r7, #8]
 8008d86:	68fb      	ldr	r3, [r7, #12]
 8008d88:	3314      	adds	r3, #20
 8008d8a:	009b      	lsls	r3, r3, #2
 8008d8c:	4413      	add	r3, r2
 8008d8e:	2200      	movs	r2, #0
 8008d90:	605a      	str	r2, [r3, #4]
#ifdef DCT_FLOAT_SUPPORTED
    fdct->float_divisors[i] = NULL;
 8008d92:	68ba      	ldr	r2, [r7, #8]
 8008d94:	68fb      	ldr	r3, [r7, #12]
 8008d96:	3322      	adds	r3, #34	@ 0x22
 8008d98:	009b      	lsls	r3, r3, #2
 8008d9a:	4413      	add	r3, r2
 8008d9c:	2200      	movs	r2, #0
 8008d9e:	605a      	str	r2, [r3, #4]
  for (i = 0; i < NUM_QUANT_TBLS; i++) {
 8008da0:	68fb      	ldr	r3, [r7, #12]
 8008da2:	3301      	adds	r3, #1
 8008da4:	60fb      	str	r3, [r7, #12]
 8008da6:	68fb      	ldr	r3, [r7, #12]
 8008da8:	2b03      	cmp	r3, #3
 8008daa:	ddeb      	ble.n	8008d84 <jinit_forward_dct+0x2c>
#endif
  }
}
 8008dac:	bf00      	nop
 8008dae:	bf00      	nop
 8008db0:	3710      	adds	r7, #16
 8008db2:	46bd      	mov	sp, r7
 8008db4:	bd80      	pop	{r7, pc}
 8008db6:	bf00      	nop
 8008db8:	080084c5 	.word	0x080084c5

08008dbc <jpeg_make_c_derived_tbl>:
 */

LOCAL(void)
jpeg_make_c_derived_tbl (j_compress_ptr cinfo, boolean isDC, int tblno,
			 c_derived_tbl ** pdtbl)
{
 8008dbc:	b590      	push	{r4, r7, lr}
 8008dbe:	f2ad 5d44 	subw	sp, sp, #1348	@ 0x544
 8008dc2:	af00      	add	r7, sp, #0
 8008dc4:	f507 64a8 	add.w	r4, r7, #1344	@ 0x540
 8008dc8:	f2a4 5434 	subw	r4, r4, #1332	@ 0x534
 8008dcc:	6020      	str	r0, [r4, #0]
 8008dce:	f507 60a8 	add.w	r0, r7, #1344	@ 0x540
 8008dd2:	f5a0 60a7 	sub.w	r0, r0, #1336	@ 0x538
 8008dd6:	6001      	str	r1, [r0, #0]
 8008dd8:	f507 61a8 	add.w	r1, r7, #1344	@ 0x540
 8008ddc:	f2a1 513c 	subw	r1, r1, #1340	@ 0x53c
 8008de0:	600a      	str	r2, [r1, #0]
 8008de2:	f507 62a8 	add.w	r2, r7, #1344	@ 0x540
 8008de6:	f5a2 62a8 	sub.w	r2, r2, #1344	@ 0x540
 8008dea:	6013      	str	r3, [r2, #0]
  /* Note that huffsize[] and huffcode[] are filled in code-length order,
   * paralleling the order of the symbols themselves in htbl->huffval[].
   */

  /* Find the input Huffman table */
  if (tblno < 0 || tblno >= NUM_HUFF_TBLS)
 8008dec:	f507 63a8 	add.w	r3, r7, #1344	@ 0x540
 8008df0:	f2a3 533c 	subw	r3, r3, #1340	@ 0x53c
 8008df4:	681b      	ldr	r3, [r3, #0]
 8008df6:	2b00      	cmp	r3, #0
 8008df8:	db06      	blt.n	8008e08 <jpeg_make_c_derived_tbl+0x4c>
 8008dfa:	f507 63a8 	add.w	r3, r7, #1344	@ 0x540
 8008dfe:	f2a3 533c 	subw	r3, r3, #1340	@ 0x53c
 8008e02:	681b      	ldr	r3, [r3, #0]
 8008e04:	2b03      	cmp	r3, #3
 8008e06:	dd20      	ble.n	8008e4a <jpeg_make_c_derived_tbl+0x8e>
    ERREXIT1(cinfo, JERR_NO_HUFF_TABLE, tblno);
 8008e08:	f507 63a8 	add.w	r3, r7, #1344	@ 0x540
 8008e0c:	f2a3 5334 	subw	r3, r3, #1332	@ 0x534
 8008e10:	681b      	ldr	r3, [r3, #0]
 8008e12:	681b      	ldr	r3, [r3, #0]
 8008e14:	2234      	movs	r2, #52	@ 0x34
 8008e16:	615a      	str	r2, [r3, #20]
 8008e18:	f507 63a8 	add.w	r3, r7, #1344	@ 0x540
 8008e1c:	f2a3 5334 	subw	r3, r3, #1332	@ 0x534
 8008e20:	681b      	ldr	r3, [r3, #0]
 8008e22:	681b      	ldr	r3, [r3, #0]
 8008e24:	f507 62a8 	add.w	r2, r7, #1344	@ 0x540
 8008e28:	f2a2 523c 	subw	r2, r2, #1340	@ 0x53c
 8008e2c:	6812      	ldr	r2, [r2, #0]
 8008e2e:	619a      	str	r2, [r3, #24]
 8008e30:	f507 63a8 	add.w	r3, r7, #1344	@ 0x540
 8008e34:	f2a3 5334 	subw	r3, r3, #1332	@ 0x534
 8008e38:	681b      	ldr	r3, [r3, #0]
 8008e3a:	681b      	ldr	r3, [r3, #0]
 8008e3c:	681b      	ldr	r3, [r3, #0]
 8008e3e:	f507 62a8 	add.w	r2, r7, #1344	@ 0x540
 8008e42:	f2a2 5234 	subw	r2, r2, #1332	@ 0x534
 8008e46:	6810      	ldr	r0, [r2, #0]
 8008e48:	4798      	blx	r3
  htbl =
    isDC ? cinfo->dc_huff_tbl_ptrs[tblno] : cinfo->ac_huff_tbl_ptrs[tblno];
 8008e4a:	f507 63a8 	add.w	r3, r7, #1344	@ 0x540
 8008e4e:	f5a3 63a7 	sub.w	r3, r3, #1336	@ 0x538
 8008e52:	681b      	ldr	r3, [r3, #0]
 8008e54:	2b00      	cmp	r3, #0
 8008e56:	d00d      	beq.n	8008e74 <jpeg_make_c_derived_tbl+0xb8>
 8008e58:	f507 63a8 	add.w	r3, r7, #1344	@ 0x540
 8008e5c:	f2a3 5334 	subw	r3, r3, #1332	@ 0x534
 8008e60:	681b      	ldr	r3, [r3, #0]
 8008e62:	f507 62a8 	add.w	r2, r7, #1344	@ 0x540
 8008e66:	f2a2 523c 	subw	r2, r2, #1340	@ 0x53c
 8008e6a:	6812      	ldr	r2, [r2, #0]
 8008e6c:	321e      	adds	r2, #30
 8008e6e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008e72:	e00c      	b.n	8008e8e <jpeg_make_c_derived_tbl+0xd2>
 8008e74:	f507 63a8 	add.w	r3, r7, #1344	@ 0x540
 8008e78:	f2a3 5334 	subw	r3, r3, #1332	@ 0x534
 8008e7c:	681b      	ldr	r3, [r3, #0]
 8008e7e:	f507 62a8 	add.w	r2, r7, #1344	@ 0x540
 8008e82:	f2a2 523c 	subw	r2, r2, #1340	@ 0x53c
 8008e86:	6812      	ldr	r2, [r2, #0]
 8008e88:	3222      	adds	r2, #34	@ 0x22
 8008e8a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
  htbl =
 8008e8e:	f8c7 3528 	str.w	r3, [r7, #1320]	@ 0x528
  if (htbl == NULL)
 8008e92:	f8d7 3528 	ldr.w	r3, [r7, #1320]	@ 0x528
 8008e96:	2b00      	cmp	r3, #0
 8008e98:	d120      	bne.n	8008edc <jpeg_make_c_derived_tbl+0x120>
    ERREXIT1(cinfo, JERR_NO_HUFF_TABLE, tblno);
 8008e9a:	f507 63a8 	add.w	r3, r7, #1344	@ 0x540
 8008e9e:	f2a3 5334 	subw	r3, r3, #1332	@ 0x534
 8008ea2:	681b      	ldr	r3, [r3, #0]
 8008ea4:	681b      	ldr	r3, [r3, #0]
 8008ea6:	2234      	movs	r2, #52	@ 0x34
 8008ea8:	615a      	str	r2, [r3, #20]
 8008eaa:	f507 63a8 	add.w	r3, r7, #1344	@ 0x540
 8008eae:	f2a3 5334 	subw	r3, r3, #1332	@ 0x534
 8008eb2:	681b      	ldr	r3, [r3, #0]
 8008eb4:	681b      	ldr	r3, [r3, #0]
 8008eb6:	f507 62a8 	add.w	r2, r7, #1344	@ 0x540
 8008eba:	f2a2 523c 	subw	r2, r2, #1340	@ 0x53c
 8008ebe:	6812      	ldr	r2, [r2, #0]
 8008ec0:	619a      	str	r2, [r3, #24]
 8008ec2:	f507 63a8 	add.w	r3, r7, #1344	@ 0x540
 8008ec6:	f2a3 5334 	subw	r3, r3, #1332	@ 0x534
 8008eca:	681b      	ldr	r3, [r3, #0]
 8008ecc:	681b      	ldr	r3, [r3, #0]
 8008ece:	681b      	ldr	r3, [r3, #0]
 8008ed0:	f507 62a8 	add.w	r2, r7, #1344	@ 0x540
 8008ed4:	f2a2 5234 	subw	r2, r2, #1332	@ 0x534
 8008ed8:	6810      	ldr	r0, [r2, #0]
 8008eda:	4798      	blx	r3

  /* Allocate a workspace if we haven't already done so. */
  if (*pdtbl == NULL)
 8008edc:	f507 63a8 	add.w	r3, r7, #1344	@ 0x540
 8008ee0:	f5a3 63a8 	sub.w	r3, r3, #1344	@ 0x540
 8008ee4:	681b      	ldr	r3, [r3, #0]
 8008ee6:	681b      	ldr	r3, [r3, #0]
 8008ee8:	2b00      	cmp	r3, #0
 8008eea:	d116      	bne.n	8008f1a <jpeg_make_c_derived_tbl+0x15e>
    *pdtbl = (c_derived_tbl *)
      (*cinfo->mem->alloc_small) ((j_common_ptr) cinfo, JPOOL_IMAGE,
 8008eec:	f507 63a8 	add.w	r3, r7, #1344	@ 0x540
 8008ef0:	f2a3 5334 	subw	r3, r3, #1332	@ 0x534
 8008ef4:	681b      	ldr	r3, [r3, #0]
 8008ef6:	685b      	ldr	r3, [r3, #4]
 8008ef8:	681b      	ldr	r3, [r3, #0]
 8008efa:	f507 62a8 	add.w	r2, r7, #1344	@ 0x540
 8008efe:	f2a2 5034 	subw	r0, r2, #1332	@ 0x534
 8008f02:	f44f 62a0 	mov.w	r2, #1280	@ 0x500
 8008f06:	2101      	movs	r1, #1
 8008f08:	6800      	ldr	r0, [r0, #0]
 8008f0a:	4798      	blx	r3
 8008f0c:	4602      	mov	r2, r0
    *pdtbl = (c_derived_tbl *)
 8008f0e:	f507 63a8 	add.w	r3, r7, #1344	@ 0x540
 8008f12:	f5a3 63a8 	sub.w	r3, r3, #1344	@ 0x540
 8008f16:	681b      	ldr	r3, [r3, #0]
 8008f18:	601a      	str	r2, [r3, #0]
				  SIZEOF(c_derived_tbl));
  dtbl = *pdtbl;
 8008f1a:	f507 63a8 	add.w	r3, r7, #1344	@ 0x540
 8008f1e:	f5a3 63a8 	sub.w	r3, r3, #1344	@ 0x540
 8008f22:	681b      	ldr	r3, [r3, #0]
 8008f24:	681b      	ldr	r3, [r3, #0]
 8008f26:	f8c7 3524 	str.w	r3, [r7, #1316]	@ 0x524
  
  /* Figure C.1: make table of Huffman code length for each symbol */

  p = 0;
 8008f2a:	2300      	movs	r3, #0
 8008f2c:	f8c7 353c 	str.w	r3, [r7, #1340]	@ 0x53c
  for (l = 1; l <= 16; l++) {
 8008f30:	2301      	movs	r3, #1
 8008f32:	f8c7 3534 	str.w	r3, [r7, #1332]	@ 0x534
 8008f36:	e042      	b.n	8008fbe <jpeg_make_c_derived_tbl+0x202>
    i = (int) htbl->bits[l];
 8008f38:	f8d7 2528 	ldr.w	r2, [r7, #1320]	@ 0x528
 8008f3c:	f8d7 3534 	ldr.w	r3, [r7, #1332]	@ 0x534
 8008f40:	4413      	add	r3, r2
 8008f42:	781b      	ldrb	r3, [r3, #0]
 8008f44:	f8c7 3538 	str.w	r3, [r7, #1336]	@ 0x538
    if (i < 0 || p + i > 256)	/* protect against table overrun */
 8008f48:	f8d7 3538 	ldr.w	r3, [r7, #1336]	@ 0x538
 8008f4c:	2b00      	cmp	r3, #0
 8008f4e:	db07      	blt.n	8008f60 <jpeg_make_c_derived_tbl+0x1a4>
 8008f50:	f8d7 253c 	ldr.w	r2, [r7, #1340]	@ 0x53c
 8008f54:	f8d7 3538 	ldr.w	r3, [r7, #1336]	@ 0x538
 8008f58:	4413      	add	r3, r2
 8008f5a:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8008f5e:	dd22      	ble.n	8008fa6 <jpeg_make_c_derived_tbl+0x1ea>
      ERREXIT(cinfo, JERR_BAD_HUFF_TABLE);
 8008f60:	f507 63a8 	add.w	r3, r7, #1344	@ 0x540
 8008f64:	f2a3 5334 	subw	r3, r3, #1332	@ 0x534
 8008f68:	681b      	ldr	r3, [r3, #0]
 8008f6a:	681b      	ldr	r3, [r3, #0]
 8008f6c:	2209      	movs	r2, #9
 8008f6e:	615a      	str	r2, [r3, #20]
 8008f70:	f507 63a8 	add.w	r3, r7, #1344	@ 0x540
 8008f74:	f2a3 5334 	subw	r3, r3, #1332	@ 0x534
 8008f78:	681b      	ldr	r3, [r3, #0]
 8008f7a:	681b      	ldr	r3, [r3, #0]
 8008f7c:	681b      	ldr	r3, [r3, #0]
 8008f7e:	f507 62a8 	add.w	r2, r7, #1344	@ 0x540
 8008f82:	f2a2 5234 	subw	r2, r2, #1332	@ 0x534
 8008f86:	6810      	ldr	r0, [r2, #0]
 8008f88:	4798      	blx	r3
    while (i--)
 8008f8a:	e00c      	b.n	8008fa6 <jpeg_make_c_derived_tbl+0x1ea>
      huffsize[p++] = (char) l;
 8008f8c:	f8d7 353c 	ldr.w	r3, [r7, #1340]	@ 0x53c
 8008f90:	1c5a      	adds	r2, r3, #1
 8008f92:	f8c7 253c 	str.w	r2, [r7, #1340]	@ 0x53c
 8008f96:	f8d7 2534 	ldr.w	r2, [r7, #1332]	@ 0x534
 8008f9a:	b2d1      	uxtb	r1, r2
 8008f9c:	f507 62a8 	add.w	r2, r7, #1344	@ 0x540
 8008fa0:	f5a2 7294 	sub.w	r2, r2, #296	@ 0x128
 8008fa4:	54d1      	strb	r1, [r2, r3]
    while (i--)
 8008fa6:	f8d7 3538 	ldr.w	r3, [r7, #1336]	@ 0x538
 8008faa:	1e5a      	subs	r2, r3, #1
 8008fac:	f8c7 2538 	str.w	r2, [r7, #1336]	@ 0x538
 8008fb0:	2b00      	cmp	r3, #0
 8008fb2:	d1eb      	bne.n	8008f8c <jpeg_make_c_derived_tbl+0x1d0>
  for (l = 1; l <= 16; l++) {
 8008fb4:	f8d7 3534 	ldr.w	r3, [r7, #1332]	@ 0x534
 8008fb8:	3301      	adds	r3, #1
 8008fba:	f8c7 3534 	str.w	r3, [r7, #1332]	@ 0x534
 8008fbe:	f8d7 3534 	ldr.w	r3, [r7, #1332]	@ 0x534
 8008fc2:	2b10      	cmp	r3, #16
 8008fc4:	ddb8      	ble.n	8008f38 <jpeg_make_c_derived_tbl+0x17c>
  }
  huffsize[p] = 0;
 8008fc6:	f507 63a8 	add.w	r3, r7, #1344	@ 0x540
 8008fca:	f5a3 7294 	sub.w	r2, r3, #296	@ 0x128
 8008fce:	f8d7 353c 	ldr.w	r3, [r7, #1340]	@ 0x53c
 8008fd2:	4413      	add	r3, r2
 8008fd4:	2200      	movs	r2, #0
 8008fd6:	701a      	strb	r2, [r3, #0]
  lastp = p;
 8008fd8:	f8d7 353c 	ldr.w	r3, [r7, #1340]	@ 0x53c
 8008fdc:	f8c7 3520 	str.w	r3, [r7, #1312]	@ 0x520
  
  /* Figure C.2: generate the codes themselves */
  /* We also validate that the counts represent a legal Huffman code tree. */

  code = 0;
 8008fe0:	2300      	movs	r3, #0
 8008fe2:	f8c7 352c 	str.w	r3, [r7, #1324]	@ 0x52c
  si = huffsize[0];
 8008fe6:	f507 63a8 	add.w	r3, r7, #1344	@ 0x540
 8008fea:	f5a3 7394 	sub.w	r3, r3, #296	@ 0x128
 8008fee:	781b      	ldrb	r3, [r3, #0]
 8008ff0:	f8c7 3530 	str.w	r3, [r7, #1328]	@ 0x530
  p = 0;
 8008ff4:	2300      	movs	r3, #0
 8008ff6:	f8c7 353c 	str.w	r3, [r7, #1340]	@ 0x53c
  while (huffsize[p]) {
 8008ffa:	e045      	b.n	8009088 <jpeg_make_c_derived_tbl+0x2cc>
    while (((int) huffsize[p]) == si) {
      huffcode[p++] = code;
 8008ffc:	f8d7 353c 	ldr.w	r3, [r7, #1340]	@ 0x53c
 8009000:	1c5a      	adds	r2, r3, #1
 8009002:	f8c7 253c 	str.w	r2, [r7, #1340]	@ 0x53c
 8009006:	f507 62a8 	add.w	r2, r7, #1344	@ 0x540
 800900a:	f2a2 522c 	subw	r2, r2, #1324	@ 0x52c
 800900e:	f8d7 152c 	ldr.w	r1, [r7, #1324]	@ 0x52c
 8009012:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
      code++;
 8009016:	f8d7 352c 	ldr.w	r3, [r7, #1324]	@ 0x52c
 800901a:	3301      	adds	r3, #1
 800901c:	f8c7 352c 	str.w	r3, [r7, #1324]	@ 0x52c
    while (((int) huffsize[p]) == si) {
 8009020:	f507 63a8 	add.w	r3, r7, #1344	@ 0x540
 8009024:	f5a3 7294 	sub.w	r2, r3, #296	@ 0x128
 8009028:	f8d7 353c 	ldr.w	r3, [r7, #1340]	@ 0x53c
 800902c:	4413      	add	r3, r2
 800902e:	781b      	ldrb	r3, [r3, #0]
 8009030:	461a      	mov	r2, r3
 8009032:	f8d7 3530 	ldr.w	r3, [r7, #1328]	@ 0x530
 8009036:	4293      	cmp	r3, r2
 8009038:	d0e0      	beq.n	8008ffc <jpeg_make_c_derived_tbl+0x240>
    }
    /* code is now 1 more than the last code used for codelength si; but
     * it must still fit in si bits, since no code is allowed to be all ones.
     */
    if (((INT32) code) >= (((INT32) 1) << si))
 800903a:	2201      	movs	r2, #1
 800903c:	f8d7 3530 	ldr.w	r3, [r7, #1328]	@ 0x530
 8009040:	409a      	lsls	r2, r3
 8009042:	f8d7 352c 	ldr.w	r3, [r7, #1324]	@ 0x52c
 8009046:	429a      	cmp	r2, r3
 8009048:	dc14      	bgt.n	8009074 <jpeg_make_c_derived_tbl+0x2b8>
      ERREXIT(cinfo, JERR_BAD_HUFF_TABLE);
 800904a:	f507 63a8 	add.w	r3, r7, #1344	@ 0x540
 800904e:	f2a3 5334 	subw	r3, r3, #1332	@ 0x534
 8009052:	681b      	ldr	r3, [r3, #0]
 8009054:	681b      	ldr	r3, [r3, #0]
 8009056:	2209      	movs	r2, #9
 8009058:	615a      	str	r2, [r3, #20]
 800905a:	f507 63a8 	add.w	r3, r7, #1344	@ 0x540
 800905e:	f2a3 5334 	subw	r3, r3, #1332	@ 0x534
 8009062:	681b      	ldr	r3, [r3, #0]
 8009064:	681b      	ldr	r3, [r3, #0]
 8009066:	681b      	ldr	r3, [r3, #0]
 8009068:	f507 62a8 	add.w	r2, r7, #1344	@ 0x540
 800906c:	f2a2 5234 	subw	r2, r2, #1332	@ 0x534
 8009070:	6810      	ldr	r0, [r2, #0]
 8009072:	4798      	blx	r3
    code <<= 1;
 8009074:	f8d7 352c 	ldr.w	r3, [r7, #1324]	@ 0x52c
 8009078:	005b      	lsls	r3, r3, #1
 800907a:	f8c7 352c 	str.w	r3, [r7, #1324]	@ 0x52c
    si++;
 800907e:	f8d7 3530 	ldr.w	r3, [r7, #1328]	@ 0x530
 8009082:	3301      	adds	r3, #1
 8009084:	f8c7 3530 	str.w	r3, [r7, #1328]	@ 0x530
  while (huffsize[p]) {
 8009088:	f507 63a8 	add.w	r3, r7, #1344	@ 0x540
 800908c:	f5a3 7294 	sub.w	r2, r3, #296	@ 0x128
 8009090:	f8d7 353c 	ldr.w	r3, [r7, #1340]	@ 0x53c
 8009094:	4413      	add	r3, r2
 8009096:	781b      	ldrb	r3, [r3, #0]
 8009098:	2b00      	cmp	r3, #0
 800909a:	d1c1      	bne.n	8009020 <jpeg_make_c_derived_tbl+0x264>

  /* Set all codeless symbols to have code length 0;
   * this lets us detect duplicate VAL entries here, and later
   * allows emit_bits to detect any attempt to emit such symbols.
   */
  MEMZERO(dtbl->ehufsi, SIZEOF(dtbl->ehufsi));
 800909c:	f8d7 3524 	ldr.w	r3, [r7, #1316]	@ 0x524
 80090a0:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 80090a4:	f44f 7280 	mov.w	r2, #256	@ 0x100
 80090a8:	2100      	movs	r1, #0
 80090aa:	4618      	mov	r0, r3
 80090ac:	f010 fca0 	bl	80199f0 <memset>
  /* This is also a convenient place to check for out-of-range
   * and duplicated VAL entries.  We allow 0..255 for AC symbols
   * but only 0..15 for DC.  (We could constrain them further
   * based on data depth and mode, but this seems enough.)
   */
  maxsymbol = isDC ? 15 : 255;
 80090b0:	f507 63a8 	add.w	r3, r7, #1344	@ 0x540
 80090b4:	f5a3 63a7 	sub.w	r3, r3, #1336	@ 0x538
 80090b8:	681b      	ldr	r3, [r3, #0]
 80090ba:	2b00      	cmp	r3, #0
 80090bc:	d001      	beq.n	80090c2 <jpeg_make_c_derived_tbl+0x306>
 80090be:	230f      	movs	r3, #15
 80090c0:	e000      	b.n	80090c4 <jpeg_make_c_derived_tbl+0x308>
 80090c2:	23ff      	movs	r3, #255	@ 0xff
 80090c4:	f8c7 351c 	str.w	r3, [r7, #1308]	@ 0x51c

  for (p = 0; p < lastp; p++) {
 80090c8:	2300      	movs	r3, #0
 80090ca:	f8c7 353c 	str.w	r3, [r7, #1340]	@ 0x53c
 80090ce:	e055      	b.n	800917c <jpeg_make_c_derived_tbl+0x3c0>
    i = htbl->huffval[p];
 80090d0:	f8d7 2528 	ldr.w	r2, [r7, #1320]	@ 0x528
 80090d4:	f8d7 353c 	ldr.w	r3, [r7, #1340]	@ 0x53c
 80090d8:	4413      	add	r3, r2
 80090da:	3311      	adds	r3, #17
 80090dc:	781b      	ldrb	r3, [r3, #0]
 80090de:	f8c7 3538 	str.w	r3, [r7, #1336]	@ 0x538
    if (i < 0 || i > maxsymbol || dtbl->ehufsi[i])
 80090e2:	f8d7 3538 	ldr.w	r3, [r7, #1336]	@ 0x538
 80090e6:	2b00      	cmp	r3, #0
 80090e8:	db0f      	blt.n	800910a <jpeg_make_c_derived_tbl+0x34e>
 80090ea:	f8d7 2538 	ldr.w	r2, [r7, #1336]	@ 0x538
 80090ee:	f8d7 351c 	ldr.w	r3, [r7, #1308]	@ 0x51c
 80090f2:	429a      	cmp	r2, r3
 80090f4:	dc09      	bgt.n	800910a <jpeg_make_c_derived_tbl+0x34e>
 80090f6:	f8d7 2524 	ldr.w	r2, [r7, #1316]	@ 0x524
 80090fa:	f8d7 3538 	ldr.w	r3, [r7, #1336]	@ 0x538
 80090fe:	4413      	add	r3, r2
 8009100:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8009104:	781b      	ldrb	r3, [r3, #0]
 8009106:	2b00      	cmp	r3, #0
 8009108:	d014      	beq.n	8009134 <jpeg_make_c_derived_tbl+0x378>
      ERREXIT(cinfo, JERR_BAD_HUFF_TABLE);
 800910a:	f507 63a8 	add.w	r3, r7, #1344	@ 0x540
 800910e:	f2a3 5334 	subw	r3, r3, #1332	@ 0x534
 8009112:	681b      	ldr	r3, [r3, #0]
 8009114:	681b      	ldr	r3, [r3, #0]
 8009116:	2209      	movs	r2, #9
 8009118:	615a      	str	r2, [r3, #20]
 800911a:	f507 63a8 	add.w	r3, r7, #1344	@ 0x540
 800911e:	f2a3 5334 	subw	r3, r3, #1332	@ 0x534
 8009122:	681b      	ldr	r3, [r3, #0]
 8009124:	681b      	ldr	r3, [r3, #0]
 8009126:	681b      	ldr	r3, [r3, #0]
 8009128:	f507 62a8 	add.w	r2, r7, #1344	@ 0x540
 800912c:	f2a2 5234 	subw	r2, r2, #1332	@ 0x534
 8009130:	6810      	ldr	r0, [r2, #0]
 8009132:	4798      	blx	r3
    dtbl->ehufco[i] = huffcode[p];
 8009134:	f507 63a8 	add.w	r3, r7, #1344	@ 0x540
 8009138:	f2a3 532c 	subw	r3, r3, #1324	@ 0x52c
 800913c:	f8d7 253c 	ldr.w	r2, [r7, #1340]	@ 0x53c
 8009140:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8009144:	f8d7 3524 	ldr.w	r3, [r7, #1316]	@ 0x524
 8009148:	f8d7 2538 	ldr.w	r2, [r7, #1336]	@ 0x538
 800914c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    dtbl->ehufsi[i] = huffsize[p];
 8009150:	f507 63a8 	add.w	r3, r7, #1344	@ 0x540
 8009154:	f5a3 7294 	sub.w	r2, r3, #296	@ 0x128
 8009158:	f8d7 353c 	ldr.w	r3, [r7, #1340]	@ 0x53c
 800915c:	4413      	add	r3, r2
 800915e:	7819      	ldrb	r1, [r3, #0]
 8009160:	f8d7 2524 	ldr.w	r2, [r7, #1316]	@ 0x524
 8009164:	f8d7 3538 	ldr.w	r3, [r7, #1336]	@ 0x538
 8009168:	4413      	add	r3, r2
 800916a:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 800916e:	460a      	mov	r2, r1
 8009170:	701a      	strb	r2, [r3, #0]
  for (p = 0; p < lastp; p++) {
 8009172:	f8d7 353c 	ldr.w	r3, [r7, #1340]	@ 0x53c
 8009176:	3301      	adds	r3, #1
 8009178:	f8c7 353c 	str.w	r3, [r7, #1340]	@ 0x53c
 800917c:	f8d7 253c 	ldr.w	r2, [r7, #1340]	@ 0x53c
 8009180:	f8d7 3520 	ldr.w	r3, [r7, #1312]	@ 0x520
 8009184:	429a      	cmp	r2, r3
 8009186:	dba3      	blt.n	80090d0 <jpeg_make_c_derived_tbl+0x314>
  }
}
 8009188:	bf00      	nop
 800918a:	bf00      	nop
 800918c:	f207 5744 	addw	r7, r7, #1348	@ 0x544
 8009190:	46bd      	mov	sp, r7
 8009192:	bd90      	pop	{r4, r7, pc}

08009194 <dump_buffer_s>:


LOCAL(boolean)
dump_buffer_s (working_state * state)
/* Empty the output buffer; return TRUE if successful, FALSE if must suspend */
{
 8009194:	b580      	push	{r7, lr}
 8009196:	b084      	sub	sp, #16
 8009198:	af00      	add	r7, sp, #0
 800919a:	6078      	str	r0, [r7, #4]
  struct jpeg_destination_mgr * dest = state->cinfo->dest;
 800919c:	687b      	ldr	r3, [r7, #4]
 800919e:	6a1b      	ldr	r3, [r3, #32]
 80091a0:	699b      	ldr	r3, [r3, #24]
 80091a2:	60fb      	str	r3, [r7, #12]

  if (! (*dest->empty_output_buffer) (state->cinfo))
 80091a4:	68fb      	ldr	r3, [r7, #12]
 80091a6:	68db      	ldr	r3, [r3, #12]
 80091a8:	687a      	ldr	r2, [r7, #4]
 80091aa:	6a12      	ldr	r2, [r2, #32]
 80091ac:	4610      	mov	r0, r2
 80091ae:	4798      	blx	r3
 80091b0:	4603      	mov	r3, r0
 80091b2:	2b00      	cmp	r3, #0
 80091b4:	d101      	bne.n	80091ba <dump_buffer_s+0x26>
    return FALSE;
 80091b6:	2300      	movs	r3, #0
 80091b8:	e008      	b.n	80091cc <dump_buffer_s+0x38>
  /* After a successful buffer dump, must reset buffer pointers */
  state->next_output_byte = dest->next_output_byte;
 80091ba:	68fb      	ldr	r3, [r7, #12]
 80091bc:	681a      	ldr	r2, [r3, #0]
 80091be:	687b      	ldr	r3, [r7, #4]
 80091c0:	601a      	str	r2, [r3, #0]
  state->free_in_buffer = dest->free_in_buffer;
 80091c2:	68fb      	ldr	r3, [r7, #12]
 80091c4:	685a      	ldr	r2, [r3, #4]
 80091c6:	687b      	ldr	r3, [r7, #4]
 80091c8:	605a      	str	r2, [r3, #4]
  return TRUE;
 80091ca:	2301      	movs	r3, #1
}
 80091cc:	4618      	mov	r0, r3
 80091ce:	3710      	adds	r7, #16
 80091d0:	46bd      	mov	sp, r7
 80091d2:	bd80      	pop	{r7, pc}

080091d4 <dump_buffer_e>:


LOCAL(void)
dump_buffer_e (huff_entropy_ptr entropy)
/* Empty the output buffer; we do not support suspension in this case. */
{
 80091d4:	b580      	push	{r7, lr}
 80091d6:	b084      	sub	sp, #16
 80091d8:	af00      	add	r7, sp, #0
 80091da:	6078      	str	r0, [r7, #4]
  struct jpeg_destination_mgr * dest = entropy->cinfo->dest;
 80091dc:	687b      	ldr	r3, [r7, #4]
 80091de:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 80091e0:	699b      	ldr	r3, [r3, #24]
 80091e2:	60fb      	str	r3, [r7, #12]

  if (! (*dest->empty_output_buffer) (entropy->cinfo))
 80091e4:	68fb      	ldr	r3, [r7, #12]
 80091e6:	68db      	ldr	r3, [r3, #12]
 80091e8:	687a      	ldr	r2, [r7, #4]
 80091ea:	6f92      	ldr	r2, [r2, #120]	@ 0x78
 80091ec:	4610      	mov	r0, r2
 80091ee:	4798      	blx	r3
 80091f0:	4603      	mov	r3, r0
 80091f2:	2b00      	cmp	r3, #0
 80091f4:	d10c      	bne.n	8009210 <dump_buffer_e+0x3c>
    ERREXIT(entropy->cinfo, JERR_CANT_SUSPEND);
 80091f6:	687b      	ldr	r3, [r7, #4]
 80091f8:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 80091fa:	681b      	ldr	r3, [r3, #0]
 80091fc:	2219      	movs	r2, #25
 80091fe:	615a      	str	r2, [r3, #20]
 8009200:	687b      	ldr	r3, [r7, #4]
 8009202:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8009204:	681b      	ldr	r3, [r3, #0]
 8009206:	681b      	ldr	r3, [r3, #0]
 8009208:	687a      	ldr	r2, [r7, #4]
 800920a:	6f92      	ldr	r2, [r2, #120]	@ 0x78
 800920c:	4610      	mov	r0, r2
 800920e:	4798      	blx	r3
  /* After a successful buffer dump, must reset buffer pointers */
  entropy->next_output_byte = dest->next_output_byte;
 8009210:	68fb      	ldr	r3, [r7, #12]
 8009212:	681a      	ldr	r2, [r3, #0]
 8009214:	687b      	ldr	r3, [r7, #4]
 8009216:	671a      	str	r2, [r3, #112]	@ 0x70
  entropy->free_in_buffer = dest->free_in_buffer;
 8009218:	68fb      	ldr	r3, [r7, #12]
 800921a:	685a      	ldr	r2, [r3, #4]
 800921c:	687b      	ldr	r3, [r7, #4]
 800921e:	675a      	str	r2, [r3, #116]	@ 0x74
}
 8009220:	bf00      	nop
 8009222:	3710      	adds	r7, #16
 8009224:	46bd      	mov	sp, r7
 8009226:	bd80      	pop	{r7, pc}

08009228 <emit_bits_s>:

INLINE
LOCAL(boolean)
emit_bits_s (working_state * state, unsigned int code, int size)
/* Emit some bits; return TRUE if successful, FALSE if must suspend */
{
 8009228:	b5b0      	push	{r4, r5, r7, lr}
 800922a:	b086      	sub	sp, #24
 800922c:	af00      	add	r7, sp, #0
 800922e:	60f8      	str	r0, [r7, #12]
 8009230:	60b9      	str	r1, [r7, #8]
 8009232:	607a      	str	r2, [r7, #4]
  /* This routine is heavily used, so it's worth coding tightly. */
  register INT32 put_buffer = (INT32) code;
 8009234:	68bc      	ldr	r4, [r7, #8]
  register int put_bits = state->cur.put_bits;
 8009236:	68fb      	ldr	r3, [r7, #12]
 8009238:	68dd      	ldr	r5, [r3, #12]

  /* if size is 0, caller used an invalid Huffman table entry */
  if (size == 0)
 800923a:	687b      	ldr	r3, [r7, #4]
 800923c:	2b00      	cmp	r3, #0
 800923e:	d10c      	bne.n	800925a <emit_bits_s+0x32>
    ERREXIT(state->cinfo, JERR_HUFF_MISSING_CODE);
 8009240:	68fb      	ldr	r3, [r7, #12]
 8009242:	6a1b      	ldr	r3, [r3, #32]
 8009244:	681b      	ldr	r3, [r3, #0]
 8009246:	2229      	movs	r2, #41	@ 0x29
 8009248:	615a      	str	r2, [r3, #20]
 800924a:	68fb      	ldr	r3, [r7, #12]
 800924c:	6a1b      	ldr	r3, [r3, #32]
 800924e:	681b      	ldr	r3, [r3, #0]
 8009250:	681b      	ldr	r3, [r3, #0]
 8009252:	68fa      	ldr	r2, [r7, #12]
 8009254:	6a12      	ldr	r2, [r2, #32]
 8009256:	4610      	mov	r0, r2
 8009258:	4798      	blx	r3

  put_buffer &= (((INT32) 1)<<size) - 1; /* mask off any extra bits in code */
 800925a:	2201      	movs	r2, #1
 800925c:	687b      	ldr	r3, [r7, #4]
 800925e:	fa02 f303 	lsl.w	r3, r2, r3
 8009262:	3b01      	subs	r3, #1
 8009264:	401c      	ands	r4, r3
  
  put_bits += size;		/* new number of bits in buffer */
 8009266:	687b      	ldr	r3, [r7, #4]
 8009268:	441d      	add	r5, r3
  
  put_buffer <<= 24 - put_bits; /* align incoming bits */
 800926a:	f1c5 0318 	rsb	r3, r5, #24
 800926e:	409c      	lsls	r4, r3

  put_buffer |= state->cur.put_buffer; /* and merge with old buffer contents */
 8009270:	68fb      	ldr	r3, [r7, #12]
 8009272:	689b      	ldr	r3, [r3, #8]
 8009274:	431c      	orrs	r4, r3
  
  while (put_bits >= 8) {
 8009276:	e038      	b.n	80092ea <emit_bits_s+0xc2>
    int c = (int) ((put_buffer >> 16) & 0xFF);
 8009278:	1423      	asrs	r3, r4, #16
 800927a:	b2db      	uxtb	r3, r3
 800927c:	617b      	str	r3, [r7, #20]
    
    emit_byte_s(state, c, return FALSE);
 800927e:	68fb      	ldr	r3, [r7, #12]
 8009280:	681b      	ldr	r3, [r3, #0]
 8009282:	1c59      	adds	r1, r3, #1
 8009284:	68fa      	ldr	r2, [r7, #12]
 8009286:	6011      	str	r1, [r2, #0]
 8009288:	697a      	ldr	r2, [r7, #20]
 800928a:	b2d2      	uxtb	r2, r2
 800928c:	701a      	strb	r2, [r3, #0]
 800928e:	68fb      	ldr	r3, [r7, #12]
 8009290:	685b      	ldr	r3, [r3, #4]
 8009292:	1e5a      	subs	r2, r3, #1
 8009294:	68fb      	ldr	r3, [r7, #12]
 8009296:	605a      	str	r2, [r3, #4]
 8009298:	68fb      	ldr	r3, [r7, #12]
 800929a:	685b      	ldr	r3, [r3, #4]
 800929c:	2b00      	cmp	r3, #0
 800929e:	d107      	bne.n	80092b0 <emit_bits_s+0x88>
 80092a0:	68f8      	ldr	r0, [r7, #12]
 80092a2:	f7ff ff77 	bl	8009194 <dump_buffer_s>
 80092a6:	4603      	mov	r3, r0
 80092a8:	2b00      	cmp	r3, #0
 80092aa:	d101      	bne.n	80092b0 <emit_bits_s+0x88>
 80092ac:	2300      	movs	r3, #0
 80092ae:	e023      	b.n	80092f8 <emit_bits_s+0xd0>
    if (c == 0xFF) {		/* need to stuff a zero byte? */
 80092b0:	697b      	ldr	r3, [r7, #20]
 80092b2:	2bff      	cmp	r3, #255	@ 0xff
 80092b4:	d117      	bne.n	80092e6 <emit_bits_s+0xbe>
      emit_byte_s(state, 0, return FALSE);
 80092b6:	68fb      	ldr	r3, [r7, #12]
 80092b8:	681b      	ldr	r3, [r3, #0]
 80092ba:	1c59      	adds	r1, r3, #1
 80092bc:	68fa      	ldr	r2, [r7, #12]
 80092be:	6011      	str	r1, [r2, #0]
 80092c0:	2200      	movs	r2, #0
 80092c2:	701a      	strb	r2, [r3, #0]
 80092c4:	68fb      	ldr	r3, [r7, #12]
 80092c6:	685b      	ldr	r3, [r3, #4]
 80092c8:	1e5a      	subs	r2, r3, #1
 80092ca:	68fb      	ldr	r3, [r7, #12]
 80092cc:	605a      	str	r2, [r3, #4]
 80092ce:	68fb      	ldr	r3, [r7, #12]
 80092d0:	685b      	ldr	r3, [r3, #4]
 80092d2:	2b00      	cmp	r3, #0
 80092d4:	d107      	bne.n	80092e6 <emit_bits_s+0xbe>
 80092d6:	68f8      	ldr	r0, [r7, #12]
 80092d8:	f7ff ff5c 	bl	8009194 <dump_buffer_s>
 80092dc:	4603      	mov	r3, r0
 80092de:	2b00      	cmp	r3, #0
 80092e0:	d101      	bne.n	80092e6 <emit_bits_s+0xbe>
 80092e2:	2300      	movs	r3, #0
 80092e4:	e008      	b.n	80092f8 <emit_bits_s+0xd0>
    }
    put_buffer <<= 8;
 80092e6:	0224      	lsls	r4, r4, #8
    put_bits -= 8;
 80092e8:	3d08      	subs	r5, #8
  while (put_bits >= 8) {
 80092ea:	2d07      	cmp	r5, #7
 80092ec:	dcc4      	bgt.n	8009278 <emit_bits_s+0x50>
  }

  state->cur.put_buffer = put_buffer; /* update state variables */
 80092ee:	68fb      	ldr	r3, [r7, #12]
 80092f0:	609c      	str	r4, [r3, #8]
  state->cur.put_bits = put_bits;
 80092f2:	68fb      	ldr	r3, [r7, #12]
 80092f4:	60dd      	str	r5, [r3, #12]

  return TRUE;
 80092f6:	2301      	movs	r3, #1
}
 80092f8:	4618      	mov	r0, r3
 80092fa:	3718      	adds	r7, #24
 80092fc:	46bd      	mov	sp, r7
 80092fe:	bdb0      	pop	{r4, r5, r7, pc}

08009300 <emit_bits_e>:

INLINE
LOCAL(void)
emit_bits_e (huff_entropy_ptr entropy, unsigned int code, int size)
/* Emit some bits, unless we are in gather mode */
{
 8009300:	b5b0      	push	{r4, r5, r7, lr}
 8009302:	b086      	sub	sp, #24
 8009304:	af00      	add	r7, sp, #0
 8009306:	60f8      	str	r0, [r7, #12]
 8009308:	60b9      	str	r1, [r7, #8]
 800930a:	607a      	str	r2, [r7, #4]
  /* This routine is heavily used, so it's worth coding tightly. */
  register INT32 put_buffer = (INT32) code;
 800930c:	68bc      	ldr	r4, [r7, #8]
  register int put_bits = entropy->saved.put_bits;
 800930e:	68fb      	ldr	r3, [r7, #12]
 8009310:	691d      	ldr	r5, [r3, #16]

  /* if size is 0, caller used an invalid Huffman table entry */
  if (size == 0)
 8009312:	687b      	ldr	r3, [r7, #4]
 8009314:	2b00      	cmp	r3, #0
 8009316:	d10c      	bne.n	8009332 <emit_bits_e+0x32>
    ERREXIT(entropy->cinfo, JERR_HUFF_MISSING_CODE);
 8009318:	68fb      	ldr	r3, [r7, #12]
 800931a:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800931c:	681b      	ldr	r3, [r3, #0]
 800931e:	2229      	movs	r2, #41	@ 0x29
 8009320:	615a      	str	r2, [r3, #20]
 8009322:	68fb      	ldr	r3, [r7, #12]
 8009324:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8009326:	681b      	ldr	r3, [r3, #0]
 8009328:	681b      	ldr	r3, [r3, #0]
 800932a:	68fa      	ldr	r2, [r7, #12]
 800932c:	6f92      	ldr	r2, [r2, #120]	@ 0x78
 800932e:	4610      	mov	r0, r2
 8009330:	4798      	blx	r3

  if (entropy->gather_statistics)
 8009332:	68fb      	ldr	r3, [r7, #12]
 8009334:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8009336:	2b00      	cmp	r3, #0
 8009338:	d144      	bne.n	80093c4 <emit_bits_e+0xc4>
    return;			/* do nothing if we're only getting stats */

  put_buffer &= (((INT32) 1)<<size) - 1; /* mask off any extra bits in code */
 800933a:	2201      	movs	r2, #1
 800933c:	687b      	ldr	r3, [r7, #4]
 800933e:	fa02 f303 	lsl.w	r3, r2, r3
 8009342:	3b01      	subs	r3, #1
 8009344:	401c      	ands	r4, r3
  
  put_bits += size;		/* new number of bits in buffer */
 8009346:	687b      	ldr	r3, [r7, #4]
 8009348:	441d      	add	r5, r3

  put_buffer <<= 24 - put_bits; /* align incoming bits */
 800934a:	f1c5 0318 	rsb	r3, r5, #24
 800934e:	409c      	lsls	r4, r3

  /* and merge with old buffer contents */
  put_buffer |= entropy->saved.put_buffer;
 8009350:	68fb      	ldr	r3, [r7, #12]
 8009352:	68db      	ldr	r3, [r3, #12]
 8009354:	431c      	orrs	r4, r3

  while (put_bits >= 8) {
 8009356:	e02e      	b.n	80093b6 <emit_bits_e+0xb6>
    int c = (int) ((put_buffer >> 16) & 0xFF);
 8009358:	1423      	asrs	r3, r4, #16
 800935a:	b2db      	uxtb	r3, r3
 800935c:	617b      	str	r3, [r7, #20]

    emit_byte_e(entropy, c);
 800935e:	68fb      	ldr	r3, [r7, #12]
 8009360:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8009362:	1c59      	adds	r1, r3, #1
 8009364:	68fa      	ldr	r2, [r7, #12]
 8009366:	6711      	str	r1, [r2, #112]	@ 0x70
 8009368:	697a      	ldr	r2, [r7, #20]
 800936a:	b2d2      	uxtb	r2, r2
 800936c:	701a      	strb	r2, [r3, #0]
 800936e:	68fb      	ldr	r3, [r7, #12]
 8009370:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8009372:	1e5a      	subs	r2, r3, #1
 8009374:	68fb      	ldr	r3, [r7, #12]
 8009376:	675a      	str	r2, [r3, #116]	@ 0x74
 8009378:	68fb      	ldr	r3, [r7, #12]
 800937a:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800937c:	2b00      	cmp	r3, #0
 800937e:	d102      	bne.n	8009386 <emit_bits_e+0x86>
 8009380:	68f8      	ldr	r0, [r7, #12]
 8009382:	f7ff ff27 	bl	80091d4 <dump_buffer_e>
    if (c == 0xFF) {		/* need to stuff a zero byte? */
 8009386:	697b      	ldr	r3, [r7, #20]
 8009388:	2bff      	cmp	r3, #255	@ 0xff
 800938a:	d112      	bne.n	80093b2 <emit_bits_e+0xb2>
      emit_byte_e(entropy, 0);
 800938c:	68fb      	ldr	r3, [r7, #12]
 800938e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8009390:	1c59      	adds	r1, r3, #1
 8009392:	68fa      	ldr	r2, [r7, #12]
 8009394:	6711      	str	r1, [r2, #112]	@ 0x70
 8009396:	2200      	movs	r2, #0
 8009398:	701a      	strb	r2, [r3, #0]
 800939a:	68fb      	ldr	r3, [r7, #12]
 800939c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800939e:	1e5a      	subs	r2, r3, #1
 80093a0:	68fb      	ldr	r3, [r7, #12]
 80093a2:	675a      	str	r2, [r3, #116]	@ 0x74
 80093a4:	68fb      	ldr	r3, [r7, #12]
 80093a6:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80093a8:	2b00      	cmp	r3, #0
 80093aa:	d102      	bne.n	80093b2 <emit_bits_e+0xb2>
 80093ac:	68f8      	ldr	r0, [r7, #12]
 80093ae:	f7ff ff11 	bl	80091d4 <dump_buffer_e>
    }
    put_buffer <<= 8;
 80093b2:	0224      	lsls	r4, r4, #8
    put_bits -= 8;
 80093b4:	3d08      	subs	r5, #8
  while (put_bits >= 8) {
 80093b6:	2d07      	cmp	r5, #7
 80093b8:	dcce      	bgt.n	8009358 <emit_bits_e+0x58>
  }

  entropy->saved.put_buffer = put_buffer; /* update variables */
 80093ba:	68fb      	ldr	r3, [r7, #12]
 80093bc:	60dc      	str	r4, [r3, #12]
  entropy->saved.put_bits = put_bits;
 80093be:	68fb      	ldr	r3, [r7, #12]
 80093c0:	611d      	str	r5, [r3, #16]
 80093c2:	e000      	b.n	80093c6 <emit_bits_e+0xc6>
    return;			/* do nothing if we're only getting stats */
 80093c4:	bf00      	nop
}
 80093c6:	3718      	adds	r7, #24
 80093c8:	46bd      	mov	sp, r7
 80093ca:	bdb0      	pop	{r4, r5, r7, pc}

080093cc <flush_bits_s>:


LOCAL(boolean)
flush_bits_s (working_state * state)
{
 80093cc:	b580      	push	{r7, lr}
 80093ce:	b082      	sub	sp, #8
 80093d0:	af00      	add	r7, sp, #0
 80093d2:	6078      	str	r0, [r7, #4]
  if (! emit_bits_s(state, 0x7F, 7)) /* fill any partial byte with ones */
 80093d4:	2207      	movs	r2, #7
 80093d6:	217f      	movs	r1, #127	@ 0x7f
 80093d8:	6878      	ldr	r0, [r7, #4]
 80093da:	f7ff ff25 	bl	8009228 <emit_bits_s>
 80093de:	4603      	mov	r3, r0
 80093e0:	2b00      	cmp	r3, #0
 80093e2:	d101      	bne.n	80093e8 <flush_bits_s+0x1c>
    return FALSE;
 80093e4:	2300      	movs	r3, #0
 80093e6:	e006      	b.n	80093f6 <flush_bits_s+0x2a>
  state->cur.put_buffer = 0;	     /* and reset bit-buffer to empty */
 80093e8:	687b      	ldr	r3, [r7, #4]
 80093ea:	2200      	movs	r2, #0
 80093ec:	609a      	str	r2, [r3, #8]
  state->cur.put_bits = 0;
 80093ee:	687b      	ldr	r3, [r7, #4]
 80093f0:	2200      	movs	r2, #0
 80093f2:	60da      	str	r2, [r3, #12]
  return TRUE;
 80093f4:	2301      	movs	r3, #1
}
 80093f6:	4618      	mov	r0, r3
 80093f8:	3708      	adds	r7, #8
 80093fa:	46bd      	mov	sp, r7
 80093fc:	bd80      	pop	{r7, pc}

080093fe <flush_bits_e>:


LOCAL(void)
flush_bits_e (huff_entropy_ptr entropy)
{
 80093fe:	b580      	push	{r7, lr}
 8009400:	b082      	sub	sp, #8
 8009402:	af00      	add	r7, sp, #0
 8009404:	6078      	str	r0, [r7, #4]
  emit_bits_e(entropy, 0x7F, 7); /* fill any partial byte with ones */
 8009406:	2207      	movs	r2, #7
 8009408:	217f      	movs	r1, #127	@ 0x7f
 800940a:	6878      	ldr	r0, [r7, #4]
 800940c:	f7ff ff78 	bl	8009300 <emit_bits_e>
  entropy->saved.put_buffer = 0; /* and reset bit-buffer to empty */
 8009410:	687b      	ldr	r3, [r7, #4]
 8009412:	2200      	movs	r2, #0
 8009414:	60da      	str	r2, [r3, #12]
  entropy->saved.put_bits = 0;
 8009416:	687b      	ldr	r3, [r7, #4]
 8009418:	2200      	movs	r2, #0
 800941a:	611a      	str	r2, [r3, #16]
}
 800941c:	bf00      	nop
 800941e:	3708      	adds	r7, #8
 8009420:	46bd      	mov	sp, r7
 8009422:	bd80      	pop	{r7, pc}

08009424 <emit_dc_symbol>:
 */

INLINE
LOCAL(void)
emit_dc_symbol (huff_entropy_ptr entropy, int tbl_no, int symbol)
{
 8009424:	b580      	push	{r7, lr}
 8009426:	b086      	sub	sp, #24
 8009428:	af00      	add	r7, sp, #0
 800942a:	60f8      	str	r0, [r7, #12]
 800942c:	60b9      	str	r1, [r7, #8]
 800942e:	607a      	str	r2, [r7, #4]
  if (entropy->gather_statistics)
 8009430:	68fb      	ldr	r3, [r7, #12]
 8009432:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8009434:	2b00      	cmp	r3, #0
 8009436:	d00c      	beq.n	8009452 <emit_dc_symbol+0x2e>
    entropy->dc_count_ptrs[tbl_no][symbol]++;
 8009438:	68fa      	ldr	r2, [r7, #12]
 800943a:	68bb      	ldr	r3, [r7, #8]
 800943c:	3312      	adds	r3, #18
 800943e:	009b      	lsls	r3, r3, #2
 8009440:	4413      	add	r3, r2
 8009442:	685a      	ldr	r2, [r3, #4]
 8009444:	687b      	ldr	r3, [r7, #4]
 8009446:	009b      	lsls	r3, r3, #2
 8009448:	4413      	add	r3, r2
 800944a:	681a      	ldr	r2, [r3, #0]
 800944c:	3201      	adds	r2, #1
 800944e:	601a      	str	r2, [r3, #0]
  else {
    c_derived_tbl * tbl = entropy->dc_derived_tbls[tbl_no];
    emit_bits_e(entropy, tbl->ehufco[symbol], tbl->ehufsi[symbol]);
  }
}
 8009450:	e014      	b.n	800947c <emit_dc_symbol+0x58>
    c_derived_tbl * tbl = entropy->dc_derived_tbls[tbl_no];
 8009452:	68fa      	ldr	r2, [r7, #12]
 8009454:	68bb      	ldr	r3, [r7, #8]
 8009456:	330a      	adds	r3, #10
 8009458:	009b      	lsls	r3, r3, #2
 800945a:	4413      	add	r3, r2
 800945c:	685b      	ldr	r3, [r3, #4]
 800945e:	617b      	str	r3, [r7, #20]
    emit_bits_e(entropy, tbl->ehufco[symbol], tbl->ehufsi[symbol]);
 8009460:	697b      	ldr	r3, [r7, #20]
 8009462:	687a      	ldr	r2, [r7, #4]
 8009464:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8009468:	697a      	ldr	r2, [r7, #20]
 800946a:	687b      	ldr	r3, [r7, #4]
 800946c:	4413      	add	r3, r2
 800946e:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8009472:	781b      	ldrb	r3, [r3, #0]
 8009474:	461a      	mov	r2, r3
 8009476:	68f8      	ldr	r0, [r7, #12]
 8009478:	f7ff ff42 	bl	8009300 <emit_bits_e>
}
 800947c:	bf00      	nop
 800947e:	3718      	adds	r7, #24
 8009480:	46bd      	mov	sp, r7
 8009482:	bd80      	pop	{r7, pc}

08009484 <emit_ac_symbol>:


INLINE
LOCAL(void)
emit_ac_symbol (huff_entropy_ptr entropy, int tbl_no, int symbol)
{
 8009484:	b580      	push	{r7, lr}
 8009486:	b086      	sub	sp, #24
 8009488:	af00      	add	r7, sp, #0
 800948a:	60f8      	str	r0, [r7, #12]
 800948c:	60b9      	str	r1, [r7, #8]
 800948e:	607a      	str	r2, [r7, #4]
  if (entropy->gather_statistics)
 8009490:	68fb      	ldr	r3, [r7, #12]
 8009492:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8009494:	2b00      	cmp	r3, #0
 8009496:	d00c      	beq.n	80094b2 <emit_ac_symbol+0x2e>
    entropy->ac_count_ptrs[tbl_no][symbol]++;
 8009498:	68fa      	ldr	r2, [r7, #12]
 800949a:	68bb      	ldr	r3, [r7, #8]
 800949c:	3316      	adds	r3, #22
 800949e:	009b      	lsls	r3, r3, #2
 80094a0:	4413      	add	r3, r2
 80094a2:	685a      	ldr	r2, [r3, #4]
 80094a4:	687b      	ldr	r3, [r7, #4]
 80094a6:	009b      	lsls	r3, r3, #2
 80094a8:	4413      	add	r3, r2
 80094aa:	681a      	ldr	r2, [r3, #0]
 80094ac:	3201      	adds	r2, #1
 80094ae:	601a      	str	r2, [r3, #0]
  else {
    c_derived_tbl * tbl = entropy->ac_derived_tbls[tbl_no];
    emit_bits_e(entropy, tbl->ehufco[symbol], tbl->ehufsi[symbol]);
  }
}
 80094b0:	e014      	b.n	80094dc <emit_ac_symbol+0x58>
    c_derived_tbl * tbl = entropy->ac_derived_tbls[tbl_no];
 80094b2:	68fa      	ldr	r2, [r7, #12]
 80094b4:	68bb      	ldr	r3, [r7, #8]
 80094b6:	330e      	adds	r3, #14
 80094b8:	009b      	lsls	r3, r3, #2
 80094ba:	4413      	add	r3, r2
 80094bc:	685b      	ldr	r3, [r3, #4]
 80094be:	617b      	str	r3, [r7, #20]
    emit_bits_e(entropy, tbl->ehufco[symbol], tbl->ehufsi[symbol]);
 80094c0:	697b      	ldr	r3, [r7, #20]
 80094c2:	687a      	ldr	r2, [r7, #4]
 80094c4:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 80094c8:	697a      	ldr	r2, [r7, #20]
 80094ca:	687b      	ldr	r3, [r7, #4]
 80094cc:	4413      	add	r3, r2
 80094ce:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 80094d2:	781b      	ldrb	r3, [r3, #0]
 80094d4:	461a      	mov	r2, r3
 80094d6:	68f8      	ldr	r0, [r7, #12]
 80094d8:	f7ff ff12 	bl	8009300 <emit_bits_e>
}
 80094dc:	bf00      	nop
 80094de:	3718      	adds	r7, #24
 80094e0:	46bd      	mov	sp, r7
 80094e2:	bd80      	pop	{r7, pc}

080094e4 <emit_buffered_bits>:
 */

LOCAL(void)
emit_buffered_bits (huff_entropy_ptr entropy, char * bufstart,
		    unsigned int nbits)
{
 80094e4:	b580      	push	{r7, lr}
 80094e6:	b084      	sub	sp, #16
 80094e8:	af00      	add	r7, sp, #0
 80094ea:	60f8      	str	r0, [r7, #12]
 80094ec:	60b9      	str	r1, [r7, #8]
 80094ee:	607a      	str	r2, [r7, #4]
  if (entropy->gather_statistics)
 80094f0:	68fb      	ldr	r3, [r7, #12]
 80094f2:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80094f4:	2b00      	cmp	r3, #0
 80094f6:	d111      	bne.n	800951c <emit_buffered_bits+0x38>
    return;			/* no real work */

  while (nbits > 0) {
 80094f8:	e00c      	b.n	8009514 <emit_buffered_bits+0x30>
    emit_bits_e(entropy, (unsigned int) (*bufstart), 1);
 80094fa:	68bb      	ldr	r3, [r7, #8]
 80094fc:	781b      	ldrb	r3, [r3, #0]
 80094fe:	2201      	movs	r2, #1
 8009500:	4619      	mov	r1, r3
 8009502:	68f8      	ldr	r0, [r7, #12]
 8009504:	f7ff fefc 	bl	8009300 <emit_bits_e>
    bufstart++;
 8009508:	68bb      	ldr	r3, [r7, #8]
 800950a:	3301      	adds	r3, #1
 800950c:	60bb      	str	r3, [r7, #8]
    nbits--;
 800950e:	687b      	ldr	r3, [r7, #4]
 8009510:	3b01      	subs	r3, #1
 8009512:	607b      	str	r3, [r7, #4]
  while (nbits > 0) {
 8009514:	687b      	ldr	r3, [r7, #4]
 8009516:	2b00      	cmp	r3, #0
 8009518:	d1ef      	bne.n	80094fa <emit_buffered_bits+0x16>
 800951a:	e000      	b.n	800951e <emit_buffered_bits+0x3a>
    return;			/* no real work */
 800951c:	bf00      	nop
  }
}
 800951e:	3710      	adds	r7, #16
 8009520:	46bd      	mov	sp, r7
 8009522:	bd80      	pop	{r7, pc}

08009524 <emit_eobrun>:
 * Emit any pending EOBRUN symbol.
 */

LOCAL(void)
emit_eobrun (huff_entropy_ptr entropy)
{
 8009524:	b5b0      	push	{r4, r5, r7, lr}
 8009526:	b082      	sub	sp, #8
 8009528:	af00      	add	r7, sp, #0
 800952a:	6078      	str	r0, [r7, #4]
  register int temp, nbits;

  if (entropy->EOBRUN > 0) {	/* if there is any pending EOBRUN */
 800952c:	687b      	ldr	r3, [r7, #4]
 800952e:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8009532:	2b00      	cmp	r3, #0
 8009534:	d03b      	beq.n	80095ae <emit_eobrun+0x8a>
    temp = entropy->EOBRUN;
 8009536:	687b      	ldr	r3, [r7, #4]
 8009538:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800953c:	461d      	mov	r5, r3
    nbits = 0;
 800953e:	2400      	movs	r4, #0
    while ((temp >>= 1))
 8009540:	e000      	b.n	8009544 <emit_eobrun+0x20>
      nbits++;
 8009542:	3401      	adds	r4, #1
    while ((temp >>= 1))
 8009544:	106d      	asrs	r5, r5, #1
 8009546:	2d00      	cmp	r5, #0
 8009548:	d1fb      	bne.n	8009542 <emit_eobrun+0x1e>
    /* safety check: shouldn't happen given limited correction-bit buffer */
    if (nbits > 14)
 800954a:	2c0e      	cmp	r4, #14
 800954c:	dd0c      	ble.n	8009568 <emit_eobrun+0x44>
      ERREXIT(entropy->cinfo, JERR_HUFF_MISSING_CODE);
 800954e:	687b      	ldr	r3, [r7, #4]
 8009550:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8009552:	681b      	ldr	r3, [r3, #0]
 8009554:	2229      	movs	r2, #41	@ 0x29
 8009556:	615a      	str	r2, [r3, #20]
 8009558:	687b      	ldr	r3, [r7, #4]
 800955a:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800955c:	681b      	ldr	r3, [r3, #0]
 800955e:	681b      	ldr	r3, [r3, #0]
 8009560:	687a      	ldr	r2, [r7, #4]
 8009562:	6f92      	ldr	r2, [r2, #120]	@ 0x78
 8009564:	4610      	mov	r0, r2
 8009566:	4798      	blx	r3

    emit_ac_symbol(entropy, entropy->ac_tbl_no, nbits << 4);
 8009568:	687b      	ldr	r3, [r7, #4]
 800956a:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800956c:	0122      	lsls	r2, r4, #4
 800956e:	4619      	mov	r1, r3
 8009570:	6878      	ldr	r0, [r7, #4]
 8009572:	f7ff ff87 	bl	8009484 <emit_ac_symbol>
    if (nbits)
 8009576:	2c00      	cmp	r4, #0
 8009578:	d007      	beq.n	800958a <emit_eobrun+0x66>
      emit_bits_e(entropy, entropy->EOBRUN, nbits);
 800957a:	687b      	ldr	r3, [r7, #4]
 800957c:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8009580:	4622      	mov	r2, r4
 8009582:	4619      	mov	r1, r3
 8009584:	6878      	ldr	r0, [r7, #4]
 8009586:	f7ff febb 	bl	8009300 <emit_bits_e>

    entropy->EOBRUN = 0;
 800958a:	687b      	ldr	r3, [r7, #4]
 800958c:	2200      	movs	r2, #0
 800958e:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

    /* Emit any buffered correction bits */
    emit_buffered_bits(entropy, entropy->bit_buffer, entropy->BE);
 8009592:	687b      	ldr	r3, [r7, #4]
 8009594:	f8d3 1088 	ldr.w	r1, [r3, #136]	@ 0x88
 8009598:	687b      	ldr	r3, [r7, #4]
 800959a:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800959e:	461a      	mov	r2, r3
 80095a0:	6878      	ldr	r0, [r7, #4]
 80095a2:	f7ff ff9f 	bl	80094e4 <emit_buffered_bits>
    entropy->BE = 0;
 80095a6:	687b      	ldr	r3, [r7, #4]
 80095a8:	2200      	movs	r2, #0
 80095aa:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
  }
}
 80095ae:	bf00      	nop
 80095b0:	3708      	adds	r7, #8
 80095b2:	46bd      	mov	sp, r7
 80095b4:	bdb0      	pop	{r4, r5, r7, pc}

080095b6 <emit_restart_s>:
 * Emit a restart marker & resynchronize predictions.
 */

LOCAL(boolean)
emit_restart_s (working_state * state, int restart_num)
{
 80095b6:	b580      	push	{r7, lr}
 80095b8:	b084      	sub	sp, #16
 80095ba:	af00      	add	r7, sp, #0
 80095bc:	6078      	str	r0, [r7, #4]
 80095be:	6039      	str	r1, [r7, #0]
  int ci;

  if (! flush_bits_s(state))
 80095c0:	6878      	ldr	r0, [r7, #4]
 80095c2:	f7ff ff03 	bl	80093cc <flush_bits_s>
 80095c6:	4603      	mov	r3, r0
 80095c8:	2b00      	cmp	r3, #0
 80095ca:	d101      	bne.n	80095d0 <emit_restart_s+0x1a>
    return FALSE;
 80095cc:	2300      	movs	r3, #0
 80095ce:	e046      	b.n	800965e <emit_restart_s+0xa8>

  emit_byte_s(state, 0xFF, return FALSE);
 80095d0:	687b      	ldr	r3, [r7, #4]
 80095d2:	681b      	ldr	r3, [r3, #0]
 80095d4:	1c59      	adds	r1, r3, #1
 80095d6:	687a      	ldr	r2, [r7, #4]
 80095d8:	6011      	str	r1, [r2, #0]
 80095da:	22ff      	movs	r2, #255	@ 0xff
 80095dc:	701a      	strb	r2, [r3, #0]
 80095de:	687b      	ldr	r3, [r7, #4]
 80095e0:	685b      	ldr	r3, [r3, #4]
 80095e2:	1e5a      	subs	r2, r3, #1
 80095e4:	687b      	ldr	r3, [r7, #4]
 80095e6:	605a      	str	r2, [r3, #4]
 80095e8:	687b      	ldr	r3, [r7, #4]
 80095ea:	685b      	ldr	r3, [r3, #4]
 80095ec:	2b00      	cmp	r3, #0
 80095ee:	d107      	bne.n	8009600 <emit_restart_s+0x4a>
 80095f0:	6878      	ldr	r0, [r7, #4]
 80095f2:	f7ff fdcf 	bl	8009194 <dump_buffer_s>
 80095f6:	4603      	mov	r3, r0
 80095f8:	2b00      	cmp	r3, #0
 80095fa:	d101      	bne.n	8009600 <emit_restart_s+0x4a>
 80095fc:	2300      	movs	r3, #0
 80095fe:	e02e      	b.n	800965e <emit_restart_s+0xa8>
  emit_byte_s(state, JPEG_RST0 + restart_num, return FALSE);
 8009600:	683b      	ldr	r3, [r7, #0]
 8009602:	b2da      	uxtb	r2, r3
 8009604:	687b      	ldr	r3, [r7, #4]
 8009606:	681b      	ldr	r3, [r3, #0]
 8009608:	1c58      	adds	r0, r3, #1
 800960a:	6879      	ldr	r1, [r7, #4]
 800960c:	6008      	str	r0, [r1, #0]
 800960e:	3a30      	subs	r2, #48	@ 0x30
 8009610:	b2d2      	uxtb	r2, r2
 8009612:	701a      	strb	r2, [r3, #0]
 8009614:	687b      	ldr	r3, [r7, #4]
 8009616:	685b      	ldr	r3, [r3, #4]
 8009618:	1e5a      	subs	r2, r3, #1
 800961a:	687b      	ldr	r3, [r7, #4]
 800961c:	605a      	str	r2, [r3, #4]
 800961e:	687b      	ldr	r3, [r7, #4]
 8009620:	685b      	ldr	r3, [r3, #4]
 8009622:	2b00      	cmp	r3, #0
 8009624:	d107      	bne.n	8009636 <emit_restart_s+0x80>
 8009626:	6878      	ldr	r0, [r7, #4]
 8009628:	f7ff fdb4 	bl	8009194 <dump_buffer_s>
 800962c:	4603      	mov	r3, r0
 800962e:	2b00      	cmp	r3, #0
 8009630:	d101      	bne.n	8009636 <emit_restart_s+0x80>
 8009632:	2300      	movs	r3, #0
 8009634:	e013      	b.n	800965e <emit_restart_s+0xa8>

  /* Re-initialize DC predictions to 0 */
  for (ci = 0; ci < state->cinfo->comps_in_scan; ci++)
 8009636:	2300      	movs	r3, #0
 8009638:	60fb      	str	r3, [r7, #12]
 800963a:	e008      	b.n	800964e <emit_restart_s+0x98>
    state->cur.last_dc_val[ci] = 0;
 800963c:	687b      	ldr	r3, [r7, #4]
 800963e:	68fa      	ldr	r2, [r7, #12]
 8009640:	3204      	adds	r2, #4
 8009642:	2100      	movs	r1, #0
 8009644:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  for (ci = 0; ci < state->cinfo->comps_in_scan; ci++)
 8009648:	68fb      	ldr	r3, [r7, #12]
 800964a:	3301      	adds	r3, #1
 800964c:	60fb      	str	r3, [r7, #12]
 800964e:	687b      	ldr	r3, [r7, #4]
 8009650:	6a1b      	ldr	r3, [r3, #32]
 8009652:	f8d3 3120 	ldr.w	r3, [r3, #288]	@ 0x120
 8009656:	68fa      	ldr	r2, [r7, #12]
 8009658:	429a      	cmp	r2, r3
 800965a:	dbef      	blt.n	800963c <emit_restart_s+0x86>

  /* The restart counter is not updated until we successfully write the MCU. */

  return TRUE;
 800965c:	2301      	movs	r3, #1
}
 800965e:	4618      	mov	r0, r3
 8009660:	3710      	adds	r7, #16
 8009662:	46bd      	mov	sp, r7
 8009664:	bd80      	pop	{r7, pc}

08009666 <emit_restart_e>:


LOCAL(void)
emit_restart_e (huff_entropy_ptr entropy, int restart_num)
{
 8009666:	b580      	push	{r7, lr}
 8009668:	b084      	sub	sp, #16
 800966a:	af00      	add	r7, sp, #0
 800966c:	6078      	str	r0, [r7, #4]
 800966e:	6039      	str	r1, [r7, #0]
  int ci;

  emit_eobrun(entropy);
 8009670:	6878      	ldr	r0, [r7, #4]
 8009672:	f7ff ff57 	bl	8009524 <emit_eobrun>

  if (! entropy->gather_statistics) {
 8009676:	687b      	ldr	r3, [r7, #4]
 8009678:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800967a:	2b00      	cmp	r3, #0
 800967c:	d12b      	bne.n	80096d6 <emit_restart_e+0x70>
    flush_bits_e(entropy);
 800967e:	6878      	ldr	r0, [r7, #4]
 8009680:	f7ff febd 	bl	80093fe <flush_bits_e>
    emit_byte_e(entropy, 0xFF);
 8009684:	687b      	ldr	r3, [r7, #4]
 8009686:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8009688:	1c59      	adds	r1, r3, #1
 800968a:	687a      	ldr	r2, [r7, #4]
 800968c:	6711      	str	r1, [r2, #112]	@ 0x70
 800968e:	22ff      	movs	r2, #255	@ 0xff
 8009690:	701a      	strb	r2, [r3, #0]
 8009692:	687b      	ldr	r3, [r7, #4]
 8009694:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8009696:	1e5a      	subs	r2, r3, #1
 8009698:	687b      	ldr	r3, [r7, #4]
 800969a:	675a      	str	r2, [r3, #116]	@ 0x74
 800969c:	687b      	ldr	r3, [r7, #4]
 800969e:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80096a0:	2b00      	cmp	r3, #0
 80096a2:	d102      	bne.n	80096aa <emit_restart_e+0x44>
 80096a4:	6878      	ldr	r0, [r7, #4]
 80096a6:	f7ff fd95 	bl	80091d4 <dump_buffer_e>
    emit_byte_e(entropy, JPEG_RST0 + restart_num);
 80096aa:	683b      	ldr	r3, [r7, #0]
 80096ac:	b2da      	uxtb	r2, r3
 80096ae:	687b      	ldr	r3, [r7, #4]
 80096b0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80096b2:	1c58      	adds	r0, r3, #1
 80096b4:	6879      	ldr	r1, [r7, #4]
 80096b6:	6708      	str	r0, [r1, #112]	@ 0x70
 80096b8:	3a30      	subs	r2, #48	@ 0x30
 80096ba:	b2d2      	uxtb	r2, r2
 80096bc:	701a      	strb	r2, [r3, #0]
 80096be:	687b      	ldr	r3, [r7, #4]
 80096c0:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80096c2:	1e5a      	subs	r2, r3, #1
 80096c4:	687b      	ldr	r3, [r7, #4]
 80096c6:	675a      	str	r2, [r3, #116]	@ 0x74
 80096c8:	687b      	ldr	r3, [r7, #4]
 80096ca:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80096cc:	2b00      	cmp	r3, #0
 80096ce:	d102      	bne.n	80096d6 <emit_restart_e+0x70>
 80096d0:	6878      	ldr	r0, [r7, #4]
 80096d2:	f7ff fd7f 	bl	80091d4 <dump_buffer_e>
  }

  if (entropy->cinfo->Ss == 0) {
 80096d6:	687b      	ldr	r3, [r7, #4]
 80096d8:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 80096da:	f8d3 3168 	ldr.w	r3, [r3, #360]	@ 0x168
 80096de:	2b00      	cmp	r3, #0
 80096e0:	d114      	bne.n	800970c <emit_restart_e+0xa6>
    /* Re-initialize DC predictions to 0 */
    for (ci = 0; ci < entropy->cinfo->comps_in_scan; ci++)
 80096e2:	2300      	movs	r3, #0
 80096e4:	60fb      	str	r3, [r7, #12]
 80096e6:	e009      	b.n	80096fc <emit_restart_e+0x96>
      entropy->saved.last_dc_val[ci] = 0;
 80096e8:	687a      	ldr	r2, [r7, #4]
 80096ea:	68fb      	ldr	r3, [r7, #12]
 80096ec:	3304      	adds	r3, #4
 80096ee:	009b      	lsls	r3, r3, #2
 80096f0:	4413      	add	r3, r2
 80096f2:	2200      	movs	r2, #0
 80096f4:	605a      	str	r2, [r3, #4]
    for (ci = 0; ci < entropy->cinfo->comps_in_scan; ci++)
 80096f6:	68fb      	ldr	r3, [r7, #12]
 80096f8:	3301      	adds	r3, #1
 80096fa:	60fb      	str	r3, [r7, #12]
 80096fc:	687b      	ldr	r3, [r7, #4]
 80096fe:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8009700:	f8d3 3120 	ldr.w	r3, [r3, #288]	@ 0x120
 8009704:	68fa      	ldr	r2, [r7, #12]
 8009706:	429a      	cmp	r2, r3
 8009708:	dbee      	blt.n	80096e8 <emit_restart_e+0x82>
  } else {
    /* Re-initialize all AC-related fields to 0 */
    entropy->EOBRUN = 0;
    entropy->BE = 0;
  }
}
 800970a:	e007      	b.n	800971c <emit_restart_e+0xb6>
    entropy->EOBRUN = 0;
 800970c:	687b      	ldr	r3, [r7, #4]
 800970e:	2200      	movs	r2, #0
 8009710:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
    entropy->BE = 0;
 8009714:	687b      	ldr	r3, [r7, #4]
 8009716:	2200      	movs	r2, #0
 8009718:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
}
 800971c:	bf00      	nop
 800971e:	3710      	adds	r7, #16
 8009720:	46bd      	mov	sp, r7
 8009722:	bd80      	pop	{r7, pc}

08009724 <encode_mcu_DC_first>:
 * or first pass of successive approximation).
 */

METHODDEF(boolean)
encode_mcu_DC_first (j_compress_ptr cinfo, JBLOCKROW *MCU_data)
{
 8009724:	b5f0      	push	{r4, r5, r6, r7, lr}
 8009726:	b089      	sub	sp, #36	@ 0x24
 8009728:	af00      	add	r7, sp, #0
 800972a:	6078      	str	r0, [r7, #4]
 800972c:	6039      	str	r1, [r7, #0]
  huff_entropy_ptr entropy = (huff_entropy_ptr) cinfo->entropy;
 800972e:	687b      	ldr	r3, [r7, #4]
 8009730:	f8d3 31a4 	ldr.w	r3, [r3, #420]	@ 0x1a4
 8009734:	61bb      	str	r3, [r7, #24]
  register int temp, temp2;
  register int nbits;
  int blkn, ci;
  int Al = cinfo->Al;
 8009736:	687b      	ldr	r3, [r7, #4]
 8009738:	f8d3 3174 	ldr.w	r3, [r3, #372]	@ 0x174
 800973c:	617b      	str	r3, [r7, #20]
  JBLOCKROW block;
  jpeg_component_info * compptr;
  ISHIFT_TEMPS

  entropy->next_output_byte = cinfo->dest->next_output_byte;
 800973e:	687b      	ldr	r3, [r7, #4]
 8009740:	699b      	ldr	r3, [r3, #24]
 8009742:	681a      	ldr	r2, [r3, #0]
 8009744:	69bb      	ldr	r3, [r7, #24]
 8009746:	671a      	str	r2, [r3, #112]	@ 0x70
  entropy->free_in_buffer = cinfo->dest->free_in_buffer;
 8009748:	687b      	ldr	r3, [r7, #4]
 800974a:	699b      	ldr	r3, [r3, #24]
 800974c:	685a      	ldr	r2, [r3, #4]
 800974e:	69bb      	ldr	r3, [r7, #24]
 8009750:	675a      	str	r2, [r3, #116]	@ 0x74

  /* Emit restart marker if needed */
  if (cinfo->restart_interval)
 8009752:	687b      	ldr	r3, [r7, #4]
 8009754:	f8d3 30ec 	ldr.w	r3, [r3, #236]	@ 0xec
 8009758:	2b00      	cmp	r3, #0
 800975a:	d009      	beq.n	8009770 <encode_mcu_DC_first+0x4c>
    if (entropy->restarts_to_go == 0)
 800975c:	69bb      	ldr	r3, [r7, #24]
 800975e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009760:	2b00      	cmp	r3, #0
 8009762:	d105      	bne.n	8009770 <encode_mcu_DC_first+0x4c>
      emit_restart_e(entropy, entropy->next_restart_num);
 8009764:	69bb      	ldr	r3, [r7, #24]
 8009766:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009768:	4619      	mov	r1, r3
 800976a:	69b8      	ldr	r0, [r7, #24]
 800976c:	f7ff ff7b 	bl	8009666 <emit_restart_e>

  /* Encode the MCU data blocks */
  for (blkn = 0; blkn < cinfo->blocks_in_MCU; blkn++) {
 8009770:	2300      	movs	r3, #0
 8009772:	61fb      	str	r3, [r7, #28]
 8009774:	e04e      	b.n	8009814 <encode_mcu_DC_first+0xf0>
    block = MCU_data[blkn];
 8009776:	69fb      	ldr	r3, [r7, #28]
 8009778:	009b      	lsls	r3, r3, #2
 800977a:	683a      	ldr	r2, [r7, #0]
 800977c:	4413      	add	r3, r2
 800977e:	681b      	ldr	r3, [r3, #0]
 8009780:	613b      	str	r3, [r7, #16]
    ci = cinfo->MCU_membership[blkn];
 8009782:	687b      	ldr	r3, [r7, #4]
 8009784:	69fa      	ldr	r2, [r7, #28]
 8009786:	3250      	adds	r2, #80	@ 0x50
 8009788:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800978c:	60fb      	str	r3, [r7, #12]
    compptr = cinfo->cur_comp_info[ci];
 800978e:	687a      	ldr	r2, [r7, #4]
 8009790:	68fb      	ldr	r3, [r7, #12]
 8009792:	3348      	adds	r3, #72	@ 0x48
 8009794:	009b      	lsls	r3, r3, #2
 8009796:	4413      	add	r3, r2
 8009798:	685b      	ldr	r3, [r3, #4]
 800979a:	60bb      	str	r3, [r7, #8]

    /* Compute the DC value after the required point transform by Al.
     * This is simply an arithmetic right shift.
     */
    temp2 = IRIGHT_SHIFT((int) ((*block)[0]), Al);
 800979c:	693b      	ldr	r3, [r7, #16]
 800979e:	f9b3 3000 	ldrsh.w	r3, [r3]
 80097a2:	461a      	mov	r2, r3
 80097a4:	697b      	ldr	r3, [r7, #20]
 80097a6:	fa42 f603 	asr.w	r6, r2, r3

    /* DC differences are figured on the point-transformed values. */
    temp = temp2 - entropy->saved.last_dc_val[ci];
 80097aa:	69ba      	ldr	r2, [r7, #24]
 80097ac:	68fb      	ldr	r3, [r7, #12]
 80097ae:	3304      	adds	r3, #4
 80097b0:	009b      	lsls	r3, r3, #2
 80097b2:	4413      	add	r3, r2
 80097b4:	685b      	ldr	r3, [r3, #4]
 80097b6:	1af4      	subs	r4, r6, r3
    entropy->saved.last_dc_val[ci] = temp2;
 80097b8:	69ba      	ldr	r2, [r7, #24]
 80097ba:	68fb      	ldr	r3, [r7, #12]
 80097bc:	3304      	adds	r3, #4
 80097be:	009b      	lsls	r3, r3, #2
 80097c0:	4413      	add	r3, r2
 80097c2:	605e      	str	r6, [r3, #4]

    /* Encode the DC coefficient difference per section G.1.2.1 */
    temp2 = temp;
 80097c4:	4626      	mov	r6, r4
    if (temp < 0) {
 80097c6:	2c00      	cmp	r4, #0
 80097c8:	da01      	bge.n	80097ce <encode_mcu_DC_first+0xaa>
      temp = -temp;		/* temp is abs value of input */
 80097ca:	4264      	negs	r4, r4
      /* For a negative input, want temp2 = bitwise complement of abs(input) */
      /* This code assumes we are on a two's complement machine */
      temp2--;
 80097cc:	3e01      	subs	r6, #1
    }
    
    /* Find the number of bits needed for the magnitude of the coefficient */
    nbits = 0;
 80097ce:	2500      	movs	r5, #0
    while (temp) {
 80097d0:	e001      	b.n	80097d6 <encode_mcu_DC_first+0xb2>
      nbits++;
 80097d2:	3501      	adds	r5, #1
      temp >>= 1;
 80097d4:	1064      	asrs	r4, r4, #1
    while (temp) {
 80097d6:	2c00      	cmp	r4, #0
 80097d8:	d1fb      	bne.n	80097d2 <encode_mcu_DC_first+0xae>
    }
    /* Check for out-of-range coefficient values.
     * Since we're encoding a difference, the range limit is twice as much.
     */
    if (nbits > MAX_COEF_BITS+1)
 80097da:	2d0b      	cmp	r5, #11
 80097dc:	dd08      	ble.n	80097f0 <encode_mcu_DC_first+0xcc>
      ERREXIT(cinfo, JERR_BAD_DCT_COEF);
 80097de:	687b      	ldr	r3, [r7, #4]
 80097e0:	681b      	ldr	r3, [r3, #0]
 80097e2:	2206      	movs	r2, #6
 80097e4:	615a      	str	r2, [r3, #20]
 80097e6:	687b      	ldr	r3, [r7, #4]
 80097e8:	681b      	ldr	r3, [r3, #0]
 80097ea:	681b      	ldr	r3, [r3, #0]
 80097ec:	6878      	ldr	r0, [r7, #4]
 80097ee:	4798      	blx	r3
    
    /* Count/emit the Huffman-coded symbol for the number of bits */
    emit_dc_symbol(entropy, compptr->dc_tbl_no, nbits);
 80097f0:	68bb      	ldr	r3, [r7, #8]
 80097f2:	695b      	ldr	r3, [r3, #20]
 80097f4:	462a      	mov	r2, r5
 80097f6:	4619      	mov	r1, r3
 80097f8:	69b8      	ldr	r0, [r7, #24]
 80097fa:	f7ff fe13 	bl	8009424 <emit_dc_symbol>
    
    /* Emit that number of bits of the value, if positive, */
    /* or the complement of its magnitude, if negative. */
    if (nbits)			/* emit_bits rejects calls with size 0 */
 80097fe:	2d00      	cmp	r5, #0
 8009800:	d005      	beq.n	800980e <encode_mcu_DC_first+0xea>
      emit_bits_e(entropy, (unsigned int) temp2, nbits);
 8009802:	4633      	mov	r3, r6
 8009804:	462a      	mov	r2, r5
 8009806:	4619      	mov	r1, r3
 8009808:	69b8      	ldr	r0, [r7, #24]
 800980a:	f7ff fd79 	bl	8009300 <emit_bits_e>
  for (blkn = 0; blkn < cinfo->blocks_in_MCU; blkn++) {
 800980e:	69fb      	ldr	r3, [r7, #28]
 8009810:	3301      	adds	r3, #1
 8009812:	61fb      	str	r3, [r7, #28]
 8009814:	687b      	ldr	r3, [r7, #4]
 8009816:	f8d3 313c 	ldr.w	r3, [r3, #316]	@ 0x13c
 800981a:	69fa      	ldr	r2, [r7, #28]
 800981c:	429a      	cmp	r2, r3
 800981e:	dbaa      	blt.n	8009776 <encode_mcu_DC_first+0x52>
  }

  cinfo->dest->next_output_byte = entropy->next_output_byte;
 8009820:	687b      	ldr	r3, [r7, #4]
 8009822:	699b      	ldr	r3, [r3, #24]
 8009824:	69ba      	ldr	r2, [r7, #24]
 8009826:	6f12      	ldr	r2, [r2, #112]	@ 0x70
 8009828:	601a      	str	r2, [r3, #0]
  cinfo->dest->free_in_buffer = entropy->free_in_buffer;
 800982a:	687b      	ldr	r3, [r7, #4]
 800982c:	699b      	ldr	r3, [r3, #24]
 800982e:	69ba      	ldr	r2, [r7, #24]
 8009830:	6f52      	ldr	r2, [r2, #116]	@ 0x74
 8009832:	605a      	str	r2, [r3, #4]

  /* Update restart-interval state too */
  if (cinfo->restart_interval) {
 8009834:	687b      	ldr	r3, [r7, #4]
 8009836:	f8d3 30ec 	ldr.w	r3, [r3, #236]	@ 0xec
 800983a:	2b00      	cmp	r3, #0
 800983c:	d018      	beq.n	8009870 <encode_mcu_DC_first+0x14c>
    if (entropy->restarts_to_go == 0) {
 800983e:	69bb      	ldr	r3, [r7, #24]
 8009840:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009842:	2b00      	cmp	r3, #0
 8009844:	d10f      	bne.n	8009866 <encode_mcu_DC_first+0x142>
      entropy->restarts_to_go = cinfo->restart_interval;
 8009846:	687b      	ldr	r3, [r7, #4]
 8009848:	f8d3 20ec 	ldr.w	r2, [r3, #236]	@ 0xec
 800984c:	69bb      	ldr	r3, [r7, #24]
 800984e:	625a      	str	r2, [r3, #36]	@ 0x24
      entropy->next_restart_num++;
 8009850:	69bb      	ldr	r3, [r7, #24]
 8009852:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009854:	1c5a      	adds	r2, r3, #1
 8009856:	69bb      	ldr	r3, [r7, #24]
 8009858:	629a      	str	r2, [r3, #40]	@ 0x28
      entropy->next_restart_num &= 7;
 800985a:	69bb      	ldr	r3, [r7, #24]
 800985c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800985e:	f003 0207 	and.w	r2, r3, #7
 8009862:	69bb      	ldr	r3, [r7, #24]
 8009864:	629a      	str	r2, [r3, #40]	@ 0x28
    }
    entropy->restarts_to_go--;
 8009866:	69bb      	ldr	r3, [r7, #24]
 8009868:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800986a:	1e5a      	subs	r2, r3, #1
 800986c:	69bb      	ldr	r3, [r7, #24]
 800986e:	625a      	str	r2, [r3, #36]	@ 0x24
  }

  return TRUE;
 8009870:	2301      	movs	r3, #1
}
 8009872:	4618      	mov	r0, r3
 8009874:	3724      	adds	r7, #36	@ 0x24
 8009876:	46bd      	mov	sp, r7
 8009878:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800987a <encode_mcu_AC_first>:
 * or first pass of successive approximation).
 */

METHODDEF(boolean)
encode_mcu_AC_first (j_compress_ptr cinfo, JBLOCKROW *MCU_data)
{
 800987a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800987e:	b08a      	sub	sp, #40	@ 0x28
 8009880:	af00      	add	r7, sp, #0
 8009882:	60f8      	str	r0, [r7, #12]
 8009884:	60b9      	str	r1, [r7, #8]
  huff_entropy_ptr entropy = (huff_entropy_ptr) cinfo->entropy;
 8009886:	68fb      	ldr	r3, [r7, #12]
 8009888:	f8d3 31a4 	ldr.w	r3, [r3, #420]	@ 0x1a4
 800988c:	627b      	str	r3, [r7, #36]	@ 0x24
  register int r, k;
  int Se, Al;
  const int * natural_order;
  JBLOCKROW block;

  entropy->next_output_byte = cinfo->dest->next_output_byte;
 800988e:	68fb      	ldr	r3, [r7, #12]
 8009890:	699b      	ldr	r3, [r3, #24]
 8009892:	681a      	ldr	r2, [r3, #0]
 8009894:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009896:	671a      	str	r2, [r3, #112]	@ 0x70
  entropy->free_in_buffer = cinfo->dest->free_in_buffer;
 8009898:	68fb      	ldr	r3, [r7, #12]
 800989a:	699b      	ldr	r3, [r3, #24]
 800989c:	685a      	ldr	r2, [r3, #4]
 800989e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80098a0:	675a      	str	r2, [r3, #116]	@ 0x74

  /* Emit restart marker if needed */
  if (cinfo->restart_interval)
 80098a2:	68fb      	ldr	r3, [r7, #12]
 80098a4:	f8d3 30ec 	ldr.w	r3, [r3, #236]	@ 0xec
 80098a8:	2b00      	cmp	r3, #0
 80098aa:	d009      	beq.n	80098c0 <encode_mcu_AC_first+0x46>
    if (entropy->restarts_to_go == 0)
 80098ac:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80098ae:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80098b0:	2b00      	cmp	r3, #0
 80098b2:	d105      	bne.n	80098c0 <encode_mcu_AC_first+0x46>
      emit_restart_e(entropy, entropy->next_restart_num);
 80098b4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80098b6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80098b8:	4619      	mov	r1, r3
 80098ba:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 80098bc:	f7ff fed3 	bl	8009666 <emit_restart_e>

  Se = cinfo->Se;
 80098c0:	68fb      	ldr	r3, [r7, #12]
 80098c2:	f8d3 316c 	ldr.w	r3, [r3, #364]	@ 0x16c
 80098c6:	623b      	str	r3, [r7, #32]
  Al = cinfo->Al;
 80098c8:	68fb      	ldr	r3, [r7, #12]
 80098ca:	f8d3 3174 	ldr.w	r3, [r3, #372]	@ 0x174
 80098ce:	61fb      	str	r3, [r7, #28]
  natural_order = cinfo->natural_order;
 80098d0:	68fb      	ldr	r3, [r7, #12]
 80098d2:	f8d3 317c 	ldr.w	r3, [r3, #380]	@ 0x17c
 80098d6:	61bb      	str	r3, [r7, #24]

  /* Encode the MCU data block */
  block = MCU_data[0];
 80098d8:	68bb      	ldr	r3, [r7, #8]
 80098da:	681b      	ldr	r3, [r3, #0]
 80098dc:	617b      	str	r3, [r7, #20]

  /* Encode the AC coefficients per section G.1.2.2, fig. G.3 */
  
  r = 0;			/* r = run length of zeros */
 80098de:	2500      	movs	r5, #0
   
  for (k = cinfo->Ss; k <= Se; k++) {
 80098e0:	68fb      	ldr	r3, [r7, #12]
 80098e2:	f8d3 3168 	ldr.w	r3, [r3, #360]	@ 0x168
 80098e6:	607b      	str	r3, [r7, #4]
 80098e8:	e051      	b.n	800998e <encode_mcu_AC_first+0x114>
    if ((temp = (*block)[natural_order[k]]) == 0) {
 80098ea:	687b      	ldr	r3, [r7, #4]
 80098ec:	009b      	lsls	r3, r3, #2
 80098ee:	69ba      	ldr	r2, [r7, #24]
 80098f0:	4413      	add	r3, r2
 80098f2:	681a      	ldr	r2, [r3, #0]
 80098f4:	697b      	ldr	r3, [r7, #20]
 80098f6:	f933 3012 	ldrsh.w	r3, [r3, r2, lsl #1]
 80098fa:	461c      	mov	r4, r3
 80098fc:	2c00      	cmp	r4, #0
 80098fe:	d101      	bne.n	8009904 <encode_mcu_AC_first+0x8a>
      r++;
 8009900:	3501      	adds	r5, #1
      continue;
 8009902:	e041      	b.n	8009988 <encode_mcu_AC_first+0x10e>
    /* We must apply the point transform by Al.  For AC coefficients this
     * is an integer division with rounding towards 0.  To do this portably
     * in C, we shift after obtaining the absolute value; so the code is
     * interwoven with finding the abs value (temp) and output bits (temp2).
     */
    if (temp < 0) {
 8009904:	2c00      	cmp	r4, #0
 8009906:	da05      	bge.n	8009914 <encode_mcu_AC_first+0x9a>
      temp = -temp;		/* temp is abs value of input */
 8009908:	4264      	negs	r4, r4
      temp >>= Al;		/* apply the point transform */
 800990a:	69fb      	ldr	r3, [r7, #28]
 800990c:	411c      	asrs	r4, r3
      /* For a negative coef, want temp2 = bitwise complement of abs(coef) */
      temp2 = ~temp;
 800990e:	ea6f 0804 	mvn.w	r8, r4
 8009912:	e002      	b.n	800991a <encode_mcu_AC_first+0xa0>
    } else {
      temp >>= Al;		/* apply the point transform */
 8009914:	69fb      	ldr	r3, [r7, #28]
 8009916:	411c      	asrs	r4, r3
      temp2 = temp;
 8009918:	46a0      	mov	r8, r4
    }
    /* Watch out for case that nonzero coef is zero after point transform */
    if (temp == 0) {
 800991a:	2c00      	cmp	r4, #0
 800991c:	d101      	bne.n	8009922 <encode_mcu_AC_first+0xa8>
      r++;
 800991e:	3501      	adds	r5, #1
      continue;
 8009920:	e032      	b.n	8009988 <encode_mcu_AC_first+0x10e>
    }

    /* Emit any pending EOBRUN */
    if (entropy->EOBRUN > 0)
 8009922:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009924:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8009928:	2b00      	cmp	r3, #0
 800992a:	d00b      	beq.n	8009944 <encode_mcu_AC_first+0xca>
      emit_eobrun(entropy);
 800992c:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 800992e:	f7ff fdf9 	bl	8009524 <emit_eobrun>
    /* if run length > 15, must emit special run-length-16 codes (0xF0) */
    while (r > 15) {
 8009932:	e007      	b.n	8009944 <encode_mcu_AC_first+0xca>
      emit_ac_symbol(entropy, entropy->ac_tbl_no, 0xF0);
 8009934:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009936:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8009938:	22f0      	movs	r2, #240	@ 0xf0
 800993a:	4619      	mov	r1, r3
 800993c:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 800993e:	f7ff fda1 	bl	8009484 <emit_ac_symbol>
      r -= 16;
 8009942:	3d10      	subs	r5, #16
    while (r > 15) {
 8009944:	2d0f      	cmp	r5, #15
 8009946:	dcf5      	bgt.n	8009934 <encode_mcu_AC_first+0xba>
    }

    /* Find the number of bits needed for the magnitude of the coefficient */
    nbits = 1;			/* there must be at least one 1 bit */
 8009948:	2601      	movs	r6, #1
    while ((temp >>= 1))
 800994a:	e000      	b.n	800994e <encode_mcu_AC_first+0xd4>
      nbits++;
 800994c:	3601      	adds	r6, #1
    while ((temp >>= 1))
 800994e:	1064      	asrs	r4, r4, #1
 8009950:	2c00      	cmp	r4, #0
 8009952:	d1fb      	bne.n	800994c <encode_mcu_AC_first+0xd2>
    /* Check for out-of-range coefficient values */
    if (nbits > MAX_COEF_BITS)
 8009954:	2e0a      	cmp	r6, #10
 8009956:	dd08      	ble.n	800996a <encode_mcu_AC_first+0xf0>
      ERREXIT(cinfo, JERR_BAD_DCT_COEF);
 8009958:	68fb      	ldr	r3, [r7, #12]
 800995a:	681b      	ldr	r3, [r3, #0]
 800995c:	2206      	movs	r2, #6
 800995e:	615a      	str	r2, [r3, #20]
 8009960:	68fb      	ldr	r3, [r7, #12]
 8009962:	681b      	ldr	r3, [r3, #0]
 8009964:	681b      	ldr	r3, [r3, #0]
 8009966:	68f8      	ldr	r0, [r7, #12]
 8009968:	4798      	blx	r3

    /* Count/emit Huffman symbol for run length / number of bits */
    emit_ac_symbol(entropy, entropy->ac_tbl_no, (r << 4) + nbits);
 800996a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800996c:	6fd9      	ldr	r1, [r3, #124]	@ 0x7c
 800996e:	012b      	lsls	r3, r5, #4
 8009970:	4433      	add	r3, r6
 8009972:	461a      	mov	r2, r3
 8009974:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8009976:	f7ff fd85 	bl	8009484 <emit_ac_symbol>

    /* Emit that number of bits of the value, if positive, */
    /* or the complement of its magnitude, if negative. */
    emit_bits_e(entropy, (unsigned int) temp2, nbits);
 800997a:	4643      	mov	r3, r8
 800997c:	4632      	mov	r2, r6
 800997e:	4619      	mov	r1, r3
 8009980:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8009982:	f7ff fcbd 	bl	8009300 <emit_bits_e>

    r = 0;			/* reset zero run length */
 8009986:	2500      	movs	r5, #0
  for (k = cinfo->Ss; k <= Se; k++) {
 8009988:	687b      	ldr	r3, [r7, #4]
 800998a:	3301      	adds	r3, #1
 800998c:	607b      	str	r3, [r7, #4]
 800998e:	6a3b      	ldr	r3, [r7, #32]
 8009990:	687a      	ldr	r2, [r7, #4]
 8009992:	429a      	cmp	r2, r3
 8009994:	dda9      	ble.n	80098ea <encode_mcu_AC_first+0x70>
  }

  if (r > 0) {			/* If there are trailing zeroes, */
 8009996:	2d00      	cmp	r5, #0
 8009998:	dd10      	ble.n	80099bc <encode_mcu_AC_first+0x142>
    entropy->EOBRUN++;		/* count an EOB */
 800999a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800999c:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80099a0:	1c5a      	adds	r2, r3, #1
 80099a2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80099a4:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
    if (entropy->EOBRUN == 0x7FFF)
 80099a8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80099aa:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80099ae:	f647 72ff 	movw	r2, #32767	@ 0x7fff
 80099b2:	4293      	cmp	r3, r2
 80099b4:	d102      	bne.n	80099bc <encode_mcu_AC_first+0x142>
      emit_eobrun(entropy);	/* force it out to avoid overflow */
 80099b6:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 80099b8:	f7ff fdb4 	bl	8009524 <emit_eobrun>
  }

  cinfo->dest->next_output_byte = entropy->next_output_byte;
 80099bc:	68fb      	ldr	r3, [r7, #12]
 80099be:	699b      	ldr	r3, [r3, #24]
 80099c0:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80099c2:	6f12      	ldr	r2, [r2, #112]	@ 0x70
 80099c4:	601a      	str	r2, [r3, #0]
  cinfo->dest->free_in_buffer = entropy->free_in_buffer;
 80099c6:	68fb      	ldr	r3, [r7, #12]
 80099c8:	699b      	ldr	r3, [r3, #24]
 80099ca:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80099cc:	6f52      	ldr	r2, [r2, #116]	@ 0x74
 80099ce:	605a      	str	r2, [r3, #4]

  /* Update restart-interval state too */
  if (cinfo->restart_interval) {
 80099d0:	68fb      	ldr	r3, [r7, #12]
 80099d2:	f8d3 30ec 	ldr.w	r3, [r3, #236]	@ 0xec
 80099d6:	2b00      	cmp	r3, #0
 80099d8:	d018      	beq.n	8009a0c <encode_mcu_AC_first+0x192>
    if (entropy->restarts_to_go == 0) {
 80099da:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80099dc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80099de:	2b00      	cmp	r3, #0
 80099e0:	d10f      	bne.n	8009a02 <encode_mcu_AC_first+0x188>
      entropy->restarts_to_go = cinfo->restart_interval;
 80099e2:	68fb      	ldr	r3, [r7, #12]
 80099e4:	f8d3 20ec 	ldr.w	r2, [r3, #236]	@ 0xec
 80099e8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80099ea:	625a      	str	r2, [r3, #36]	@ 0x24
      entropy->next_restart_num++;
 80099ec:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80099ee:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80099f0:	1c5a      	adds	r2, r3, #1
 80099f2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80099f4:	629a      	str	r2, [r3, #40]	@ 0x28
      entropy->next_restart_num &= 7;
 80099f6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80099f8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80099fa:	f003 0207 	and.w	r2, r3, #7
 80099fe:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009a00:	629a      	str	r2, [r3, #40]	@ 0x28
    }
    entropy->restarts_to_go--;
 8009a02:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009a04:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009a06:	1e5a      	subs	r2, r3, #1
 8009a08:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009a0a:	625a      	str	r2, [r3, #36]	@ 0x24
  }

  return TRUE;
 8009a0c:	2301      	movs	r3, #1
}
 8009a0e:	4618      	mov	r0, r3
 8009a10:	3728      	adds	r7, #40	@ 0x28
 8009a12:	46bd      	mov	sp, r7
 8009a14:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

08009a18 <encode_mcu_DC_refine>:
 * is not very clear on the point.
 */

METHODDEF(boolean)
encode_mcu_DC_refine (j_compress_ptr cinfo, JBLOCKROW *MCU_data)
{
 8009a18:	b590      	push	{r4, r7, lr}
 8009a1a:	b087      	sub	sp, #28
 8009a1c:	af00      	add	r7, sp, #0
 8009a1e:	6078      	str	r0, [r7, #4]
 8009a20:	6039      	str	r1, [r7, #0]
  huff_entropy_ptr entropy = (huff_entropy_ptr) cinfo->entropy;
 8009a22:	687b      	ldr	r3, [r7, #4]
 8009a24:	f8d3 31a4 	ldr.w	r3, [r3, #420]	@ 0x1a4
 8009a28:	613b      	str	r3, [r7, #16]
  register int temp;
  int blkn;
  int Al = cinfo->Al;
 8009a2a:	687b      	ldr	r3, [r7, #4]
 8009a2c:	f8d3 3174 	ldr.w	r3, [r3, #372]	@ 0x174
 8009a30:	60fb      	str	r3, [r7, #12]
  JBLOCKROW block;

  entropy->next_output_byte = cinfo->dest->next_output_byte;
 8009a32:	687b      	ldr	r3, [r7, #4]
 8009a34:	699b      	ldr	r3, [r3, #24]
 8009a36:	681a      	ldr	r2, [r3, #0]
 8009a38:	693b      	ldr	r3, [r7, #16]
 8009a3a:	671a      	str	r2, [r3, #112]	@ 0x70
  entropy->free_in_buffer = cinfo->dest->free_in_buffer;
 8009a3c:	687b      	ldr	r3, [r7, #4]
 8009a3e:	699b      	ldr	r3, [r3, #24]
 8009a40:	685a      	ldr	r2, [r3, #4]
 8009a42:	693b      	ldr	r3, [r7, #16]
 8009a44:	675a      	str	r2, [r3, #116]	@ 0x74

  /* Emit restart marker if needed */
  if (cinfo->restart_interval)
 8009a46:	687b      	ldr	r3, [r7, #4]
 8009a48:	f8d3 30ec 	ldr.w	r3, [r3, #236]	@ 0xec
 8009a4c:	2b00      	cmp	r3, #0
 8009a4e:	d009      	beq.n	8009a64 <encode_mcu_DC_refine+0x4c>
    if (entropy->restarts_to_go == 0)
 8009a50:	693b      	ldr	r3, [r7, #16]
 8009a52:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009a54:	2b00      	cmp	r3, #0
 8009a56:	d105      	bne.n	8009a64 <encode_mcu_DC_refine+0x4c>
      emit_restart_e(entropy, entropy->next_restart_num);
 8009a58:	693b      	ldr	r3, [r7, #16]
 8009a5a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009a5c:	4619      	mov	r1, r3
 8009a5e:	6938      	ldr	r0, [r7, #16]
 8009a60:	f7ff fe01 	bl	8009666 <emit_restart_e>

  /* Encode the MCU data blocks */
  for (blkn = 0; blkn < cinfo->blocks_in_MCU; blkn++) {
 8009a64:	2300      	movs	r3, #0
 8009a66:	617b      	str	r3, [r7, #20]
 8009a68:	e014      	b.n	8009a94 <encode_mcu_DC_refine+0x7c>
    block = MCU_data[blkn];
 8009a6a:	697b      	ldr	r3, [r7, #20]
 8009a6c:	009b      	lsls	r3, r3, #2
 8009a6e:	683a      	ldr	r2, [r7, #0]
 8009a70:	4413      	add	r3, r2
 8009a72:	681b      	ldr	r3, [r3, #0]
 8009a74:	60bb      	str	r3, [r7, #8]

    /* We simply emit the Al'th bit of the DC coefficient value. */
    temp = (*block)[0];
 8009a76:	68bb      	ldr	r3, [r7, #8]
 8009a78:	f9b3 3000 	ldrsh.w	r3, [r3]
 8009a7c:	461c      	mov	r4, r3
    emit_bits_e(entropy, (unsigned int) (temp >> Al), 1);
 8009a7e:	68fb      	ldr	r3, [r7, #12]
 8009a80:	fa44 f303 	asr.w	r3, r4, r3
 8009a84:	2201      	movs	r2, #1
 8009a86:	4619      	mov	r1, r3
 8009a88:	6938      	ldr	r0, [r7, #16]
 8009a8a:	f7ff fc39 	bl	8009300 <emit_bits_e>
  for (blkn = 0; blkn < cinfo->blocks_in_MCU; blkn++) {
 8009a8e:	697b      	ldr	r3, [r7, #20]
 8009a90:	3301      	adds	r3, #1
 8009a92:	617b      	str	r3, [r7, #20]
 8009a94:	687b      	ldr	r3, [r7, #4]
 8009a96:	f8d3 313c 	ldr.w	r3, [r3, #316]	@ 0x13c
 8009a9a:	697a      	ldr	r2, [r7, #20]
 8009a9c:	429a      	cmp	r2, r3
 8009a9e:	dbe4      	blt.n	8009a6a <encode_mcu_DC_refine+0x52>
  }

  cinfo->dest->next_output_byte = entropy->next_output_byte;
 8009aa0:	687b      	ldr	r3, [r7, #4]
 8009aa2:	699b      	ldr	r3, [r3, #24]
 8009aa4:	693a      	ldr	r2, [r7, #16]
 8009aa6:	6f12      	ldr	r2, [r2, #112]	@ 0x70
 8009aa8:	601a      	str	r2, [r3, #0]
  cinfo->dest->free_in_buffer = entropy->free_in_buffer;
 8009aaa:	687b      	ldr	r3, [r7, #4]
 8009aac:	699b      	ldr	r3, [r3, #24]
 8009aae:	693a      	ldr	r2, [r7, #16]
 8009ab0:	6f52      	ldr	r2, [r2, #116]	@ 0x74
 8009ab2:	605a      	str	r2, [r3, #4]

  /* Update restart-interval state too */
  if (cinfo->restart_interval) {
 8009ab4:	687b      	ldr	r3, [r7, #4]
 8009ab6:	f8d3 30ec 	ldr.w	r3, [r3, #236]	@ 0xec
 8009aba:	2b00      	cmp	r3, #0
 8009abc:	d018      	beq.n	8009af0 <encode_mcu_DC_refine+0xd8>
    if (entropy->restarts_to_go == 0) {
 8009abe:	693b      	ldr	r3, [r7, #16]
 8009ac0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009ac2:	2b00      	cmp	r3, #0
 8009ac4:	d10f      	bne.n	8009ae6 <encode_mcu_DC_refine+0xce>
      entropy->restarts_to_go = cinfo->restart_interval;
 8009ac6:	687b      	ldr	r3, [r7, #4]
 8009ac8:	f8d3 20ec 	ldr.w	r2, [r3, #236]	@ 0xec
 8009acc:	693b      	ldr	r3, [r7, #16]
 8009ace:	625a      	str	r2, [r3, #36]	@ 0x24
      entropy->next_restart_num++;
 8009ad0:	693b      	ldr	r3, [r7, #16]
 8009ad2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009ad4:	1c5a      	adds	r2, r3, #1
 8009ad6:	693b      	ldr	r3, [r7, #16]
 8009ad8:	629a      	str	r2, [r3, #40]	@ 0x28
      entropy->next_restart_num &= 7;
 8009ada:	693b      	ldr	r3, [r7, #16]
 8009adc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009ade:	f003 0207 	and.w	r2, r3, #7
 8009ae2:	693b      	ldr	r3, [r7, #16]
 8009ae4:	629a      	str	r2, [r3, #40]	@ 0x28
    }
    entropy->restarts_to_go--;
 8009ae6:	693b      	ldr	r3, [r7, #16]
 8009ae8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009aea:	1e5a      	subs	r2, r3, #1
 8009aec:	693b      	ldr	r3, [r7, #16]
 8009aee:	625a      	str	r2, [r3, #36]	@ 0x24
  }

  return TRUE;
 8009af0:	2301      	movs	r3, #1
}
 8009af2:	4618      	mov	r0, r3
 8009af4:	371c      	adds	r7, #28
 8009af6:	46bd      	mov	sp, r7
 8009af8:	bd90      	pop	{r4, r7, pc}

08009afa <encode_mcu_AC_refine>:
 * MCU encoding for AC successive approximation refinement scan.
 */

METHODDEF(boolean)
encode_mcu_AC_refine (j_compress_ptr cinfo, JBLOCKROW *MCU_data)
{
 8009afa:	b5f0      	push	{r4, r5, r6, r7, lr}
 8009afc:	b0cb      	sub	sp, #300	@ 0x12c
 8009afe:	af00      	add	r7, sp, #0
 8009b00:	f507 7394 	add.w	r3, r7, #296	@ 0x128
 8009b04:	f5a3 7392 	sub.w	r3, r3, #292	@ 0x124
 8009b08:	6018      	str	r0, [r3, #0]
 8009b0a:	f507 7394 	add.w	r3, r7, #296	@ 0x128
 8009b0e:	f5a3 7394 	sub.w	r3, r3, #296	@ 0x128
 8009b12:	6019      	str	r1, [r3, #0]
  huff_entropy_ptr entropy = (huff_entropy_ptr) cinfo->entropy;
 8009b14:	f507 7394 	add.w	r3, r7, #296	@ 0x128
 8009b18:	f5a3 7392 	sub.w	r3, r3, #292	@ 0x124
 8009b1c:	681b      	ldr	r3, [r3, #0]
 8009b1e:	f8d3 31a4 	ldr.w	r3, [r3, #420]	@ 0x1a4
 8009b22:	f8c7 3118 	str.w	r3, [r7, #280]	@ 0x118
  int Se, Al;
  const int * natural_order;
  JBLOCKROW block;
  int absvalues[DCTSIZE2];

  entropy->next_output_byte = cinfo->dest->next_output_byte;
 8009b26:	f507 7394 	add.w	r3, r7, #296	@ 0x128
 8009b2a:	f5a3 7392 	sub.w	r3, r3, #292	@ 0x124
 8009b2e:	681b      	ldr	r3, [r3, #0]
 8009b30:	699b      	ldr	r3, [r3, #24]
 8009b32:	681a      	ldr	r2, [r3, #0]
 8009b34:	f8d7 3118 	ldr.w	r3, [r7, #280]	@ 0x118
 8009b38:	671a      	str	r2, [r3, #112]	@ 0x70
  entropy->free_in_buffer = cinfo->dest->free_in_buffer;
 8009b3a:	f507 7394 	add.w	r3, r7, #296	@ 0x128
 8009b3e:	f5a3 7392 	sub.w	r3, r3, #292	@ 0x124
 8009b42:	681b      	ldr	r3, [r3, #0]
 8009b44:	699b      	ldr	r3, [r3, #24]
 8009b46:	685a      	ldr	r2, [r3, #4]
 8009b48:	f8d7 3118 	ldr.w	r3, [r7, #280]	@ 0x118
 8009b4c:	675a      	str	r2, [r3, #116]	@ 0x74

  /* Emit restart marker if needed */
  if (cinfo->restart_interval)
 8009b4e:	f507 7394 	add.w	r3, r7, #296	@ 0x128
 8009b52:	f5a3 7392 	sub.w	r3, r3, #292	@ 0x124
 8009b56:	681b      	ldr	r3, [r3, #0]
 8009b58:	f8d3 30ec 	ldr.w	r3, [r3, #236]	@ 0xec
 8009b5c:	2b00      	cmp	r3, #0
 8009b5e:	d00c      	beq.n	8009b7a <encode_mcu_AC_refine+0x80>
    if (entropy->restarts_to_go == 0)
 8009b60:	f8d7 3118 	ldr.w	r3, [r7, #280]	@ 0x118
 8009b64:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009b66:	2b00      	cmp	r3, #0
 8009b68:	d107      	bne.n	8009b7a <encode_mcu_AC_refine+0x80>
      emit_restart_e(entropy, entropy->next_restart_num);
 8009b6a:	f8d7 3118 	ldr.w	r3, [r7, #280]	@ 0x118
 8009b6e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009b70:	4619      	mov	r1, r3
 8009b72:	f8d7 0118 	ldr.w	r0, [r7, #280]	@ 0x118
 8009b76:	f7ff fd76 	bl	8009666 <emit_restart_e>

  Se = cinfo->Se;
 8009b7a:	f507 7394 	add.w	r3, r7, #296	@ 0x128
 8009b7e:	f5a3 7392 	sub.w	r3, r3, #292	@ 0x124
 8009b82:	681b      	ldr	r3, [r3, #0]
 8009b84:	f8d3 316c 	ldr.w	r3, [r3, #364]	@ 0x16c
 8009b88:	f8c7 3114 	str.w	r3, [r7, #276]	@ 0x114
  Al = cinfo->Al;
 8009b8c:	f507 7394 	add.w	r3, r7, #296	@ 0x128
 8009b90:	f5a3 7392 	sub.w	r3, r3, #292	@ 0x124
 8009b94:	681b      	ldr	r3, [r3, #0]
 8009b96:	f8d3 3174 	ldr.w	r3, [r3, #372]	@ 0x174
 8009b9a:	f8c7 3110 	str.w	r3, [r7, #272]	@ 0x110
  natural_order = cinfo->natural_order;
 8009b9e:	f507 7394 	add.w	r3, r7, #296	@ 0x128
 8009ba2:	f5a3 7392 	sub.w	r3, r3, #292	@ 0x124
 8009ba6:	681b      	ldr	r3, [r3, #0]
 8009ba8:	f8d3 317c 	ldr.w	r3, [r3, #380]	@ 0x17c
 8009bac:	f8c7 310c 	str.w	r3, [r7, #268]	@ 0x10c

  /* Encode the MCU data block */
  block = MCU_data[0];
 8009bb0:	f507 7394 	add.w	r3, r7, #296	@ 0x128
 8009bb4:	f5a3 7394 	sub.w	r3, r3, #296	@ 0x128
 8009bb8:	681b      	ldr	r3, [r3, #0]
 8009bba:	681b      	ldr	r3, [r3, #0]
 8009bbc:	f8c7 3108 	str.w	r3, [r7, #264]	@ 0x108

  /* It is convenient to make a pre-pass to determine the transformed
   * coefficients' absolute values and the EOB position.
   */
  EOB = 0;
 8009bc0:	2300      	movs	r3, #0
 8009bc2:	f8c7 3124 	str.w	r3, [r7, #292]	@ 0x124
  for (k = cinfo->Ss; k <= Se; k++) {
 8009bc6:	f507 7394 	add.w	r3, r7, #296	@ 0x128
 8009bca:	f5a3 7392 	sub.w	r3, r3, #292	@ 0x124
 8009bce:	681b      	ldr	r3, [r3, #0]
 8009bd0:	f8d3 4168 	ldr.w	r4, [r3, #360]	@ 0x168
 8009bd4:	e01b      	b.n	8009c0e <encode_mcu_AC_refine+0x114>
    temp = (*block)[natural_order[k]];
 8009bd6:	4623      	mov	r3, r4
 8009bd8:	009b      	lsls	r3, r3, #2
 8009bda:	f8d7 210c 	ldr.w	r2, [r7, #268]	@ 0x10c
 8009bde:	4413      	add	r3, r2
 8009be0:	681a      	ldr	r2, [r3, #0]
 8009be2:	f8d7 3108 	ldr.w	r3, [r7, #264]	@ 0x108
 8009be6:	f933 3012 	ldrsh.w	r3, [r3, r2, lsl #1]
 8009bea:	461d      	mov	r5, r3
    /* We must apply the point transform by Al.  For AC coefficients this
     * is an integer division with rounding towards 0.  To do this portably
     * in C, we shift after obtaining the absolute value.
     */
    if (temp < 0)
 8009bec:	2d00      	cmp	r5, #0
 8009bee:	da00      	bge.n	8009bf2 <encode_mcu_AC_refine+0xf8>
      temp = -temp;		/* temp is abs value of input */
 8009bf0:	426d      	negs	r5, r5
    temp >>= Al;		/* apply the point transform */
 8009bf2:	f8d7 3110 	ldr.w	r3, [r7, #272]	@ 0x110
 8009bf6:	411d      	asrs	r5, r3
    absvalues[k] = temp;	/* save abs value for main pass */
 8009bf8:	f507 7394 	add.w	r3, r7, #296	@ 0x128
 8009bfc:	f5a3 7390 	sub.w	r3, r3, #288	@ 0x120
 8009c00:	f843 5024 	str.w	r5, [r3, r4, lsl #2]
    if (temp == 1)
 8009c04:	2d01      	cmp	r5, #1
 8009c06:	d101      	bne.n	8009c0c <encode_mcu_AC_refine+0x112>
      EOB = k;			/* EOB = index of last newly-nonzero coef */
 8009c08:	f8c7 4124 	str.w	r4, [r7, #292]	@ 0x124
  for (k = cinfo->Ss; k <= Se; k++) {
 8009c0c:	3401      	adds	r4, #1
 8009c0e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8009c12:	429c      	cmp	r4, r3
 8009c14:	dddf      	ble.n	8009bd6 <encode_mcu_AC_refine+0xdc>
  }

  /* Encode the AC coefficients per section G.1.2.3, fig. G.7 */
  
  r = 0;			/* r = run length of zeros */
 8009c16:	2600      	movs	r6, #0
  BR = 0;			/* BR = count of buffered bits added now */
 8009c18:	2300      	movs	r3, #0
 8009c1a:	f8c7 311c 	str.w	r3, [r7, #284]	@ 0x11c
  BR_buffer = entropy->bit_buffer + entropy->BE; /* Append bits to buffer */
 8009c1e:	f8d7 3118 	ldr.w	r3, [r7, #280]	@ 0x118
 8009c22:	f8d3 2088 	ldr.w	r2, [r3, #136]	@ 0x88
 8009c26:	f8d7 3118 	ldr.w	r3, [r7, #280]	@ 0x118
 8009c2a:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8009c2e:	4413      	add	r3, r2
 8009c30:	f8c7 3120 	str.w	r3, [r7, #288]	@ 0x120

  for (k = cinfo->Ss; k <= Se; k++) {
 8009c34:	f507 7394 	add.w	r3, r7, #296	@ 0x128
 8009c38:	f5a3 7392 	sub.w	r3, r3, #292	@ 0x124
 8009c3c:	681b      	ldr	r3, [r3, #0]
 8009c3e:	f8d3 4168 	ldr.w	r4, [r3, #360]	@ 0x168
 8009c42:	e075      	b.n	8009d30 <encode_mcu_AC_refine+0x236>
    if ((temp = absvalues[k]) == 0) {
 8009c44:	f507 7394 	add.w	r3, r7, #296	@ 0x128
 8009c48:	f5a3 7390 	sub.w	r3, r3, #288	@ 0x120
 8009c4c:	f853 5024 	ldr.w	r5, [r3, r4, lsl #2]
 8009c50:	2d00      	cmp	r5, #0
 8009c52:	d120      	bne.n	8009c96 <encode_mcu_AC_refine+0x19c>
      r++;
 8009c54:	3601      	adds	r6, #1
      continue;
 8009c56:	e06a      	b.n	8009d2e <encode_mcu_AC_refine+0x234>
    }

    /* Emit any required ZRLs, but not if they can be folded into EOB */
    while (r > 15 && k <= EOB) {
      /* emit any pending EOBRUN and the BE correction bits */
      emit_eobrun(entropy);
 8009c58:	f8d7 0118 	ldr.w	r0, [r7, #280]	@ 0x118
 8009c5c:	f7ff fc62 	bl	8009524 <emit_eobrun>
      /* Emit ZRL */
      emit_ac_symbol(entropy, entropy->ac_tbl_no, 0xF0);
 8009c60:	f8d7 3118 	ldr.w	r3, [r7, #280]	@ 0x118
 8009c64:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8009c66:	22f0      	movs	r2, #240	@ 0xf0
 8009c68:	4619      	mov	r1, r3
 8009c6a:	f8d7 0118 	ldr.w	r0, [r7, #280]	@ 0x118
 8009c6e:	f7ff fc09 	bl	8009484 <emit_ac_symbol>
      r -= 16;
 8009c72:	3e10      	subs	r6, #16
      /* Emit buffered correction bits that must be associated with ZRL */
      emit_buffered_bits(entropy, BR_buffer, BR);
 8009c74:	f8d7 211c 	ldr.w	r2, [r7, #284]	@ 0x11c
 8009c78:	f8d7 1120 	ldr.w	r1, [r7, #288]	@ 0x120
 8009c7c:	f8d7 0118 	ldr.w	r0, [r7, #280]	@ 0x118
 8009c80:	f7ff fc30 	bl	80094e4 <emit_buffered_bits>
      BR_buffer = entropy->bit_buffer; /* BE bits are gone now */
 8009c84:	f8d7 3118 	ldr.w	r3, [r7, #280]	@ 0x118
 8009c88:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8009c8c:	f8c7 3120 	str.w	r3, [r7, #288]	@ 0x120
      BR = 0;
 8009c90:	2300      	movs	r3, #0
 8009c92:	f8c7 311c 	str.w	r3, [r7, #284]	@ 0x11c
    while (r > 15 && k <= EOB) {
 8009c96:	2e0f      	cmp	r6, #15
 8009c98:	dd03      	ble.n	8009ca2 <encode_mcu_AC_refine+0x1a8>
 8009c9a:	f8d7 3124 	ldr.w	r3, [r7, #292]	@ 0x124
 8009c9e:	429c      	cmp	r4, r3
 8009ca0:	ddda      	ble.n	8009c58 <encode_mcu_AC_refine+0x15e>
    /* If the coef was previously nonzero, it only needs a correction bit.
     * NOTE: a straight translation of the spec's figure G.7 would suggest
     * that we also need to test r > 15.  But if r > 15, we can only get here
     * if k > EOB, which implies that this coefficient is not 1.
     */
    if (temp > 1) {
 8009ca2:	2d01      	cmp	r5, #1
 8009ca4:	dd0d      	ble.n	8009cc2 <encode_mcu_AC_refine+0x1c8>
      /* The correction bit is the next bit of the absolute value. */
      BR_buffer[BR++] = (char) (temp & 1);
 8009ca6:	b2ea      	uxtb	r2, r5
 8009ca8:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8009cac:	1c59      	adds	r1, r3, #1
 8009cae:	f8c7 111c 	str.w	r1, [r7, #284]	@ 0x11c
 8009cb2:	f8d7 1120 	ldr.w	r1, [r7, #288]	@ 0x120
 8009cb6:	440b      	add	r3, r1
 8009cb8:	f002 0201 	and.w	r2, r2, #1
 8009cbc:	b2d2      	uxtb	r2, r2
 8009cbe:	701a      	strb	r2, [r3, #0]
      continue;
 8009cc0:	e035      	b.n	8009d2e <encode_mcu_AC_refine+0x234>
    }

    /* Emit any pending EOBRUN and the BE correction bits */
    emit_eobrun(entropy);
 8009cc2:	f8d7 0118 	ldr.w	r0, [r7, #280]	@ 0x118
 8009cc6:	f7ff fc2d 	bl	8009524 <emit_eobrun>

    /* Count/emit Huffman symbol for run length / number of bits */
    emit_ac_symbol(entropy, entropy->ac_tbl_no, (r << 4) + 1);
 8009cca:	f8d7 3118 	ldr.w	r3, [r7, #280]	@ 0x118
 8009cce:	6fd9      	ldr	r1, [r3, #124]	@ 0x7c
 8009cd0:	0133      	lsls	r3, r6, #4
 8009cd2:	3301      	adds	r3, #1
 8009cd4:	461a      	mov	r2, r3
 8009cd6:	f8d7 0118 	ldr.w	r0, [r7, #280]	@ 0x118
 8009cda:	f7ff fbd3 	bl	8009484 <emit_ac_symbol>

    /* Emit output bit for newly-nonzero coef */
    temp = ((*block)[natural_order[k]] < 0) ? 0 : 1;
 8009cde:	4623      	mov	r3, r4
 8009ce0:	009b      	lsls	r3, r3, #2
 8009ce2:	f8d7 210c 	ldr.w	r2, [r7, #268]	@ 0x10c
 8009ce6:	4413      	add	r3, r2
 8009ce8:	681a      	ldr	r2, [r3, #0]
 8009cea:	f8d7 3108 	ldr.w	r3, [r7, #264]	@ 0x108
 8009cee:	f933 3012 	ldrsh.w	r3, [r3, r2, lsl #1]
 8009cf2:	43db      	mvns	r3, r3
 8009cf4:	b29b      	uxth	r3, r3
 8009cf6:	0bdb      	lsrs	r3, r3, #15
 8009cf8:	b2db      	uxtb	r3, r3
 8009cfa:	461d      	mov	r5, r3
    emit_bits_e(entropy, (unsigned int) temp, 1);
 8009cfc:	462b      	mov	r3, r5
 8009cfe:	2201      	movs	r2, #1
 8009d00:	4619      	mov	r1, r3
 8009d02:	f8d7 0118 	ldr.w	r0, [r7, #280]	@ 0x118
 8009d06:	f7ff fafb 	bl	8009300 <emit_bits_e>

    /* Emit buffered correction bits that must be associated with this code */
    emit_buffered_bits(entropy, BR_buffer, BR);
 8009d0a:	f8d7 211c 	ldr.w	r2, [r7, #284]	@ 0x11c
 8009d0e:	f8d7 1120 	ldr.w	r1, [r7, #288]	@ 0x120
 8009d12:	f8d7 0118 	ldr.w	r0, [r7, #280]	@ 0x118
 8009d16:	f7ff fbe5 	bl	80094e4 <emit_buffered_bits>
    BR_buffer = entropy->bit_buffer; /* BE bits are gone now */
 8009d1a:	f8d7 3118 	ldr.w	r3, [r7, #280]	@ 0x118
 8009d1e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8009d22:	f8c7 3120 	str.w	r3, [r7, #288]	@ 0x120
    BR = 0;
 8009d26:	2300      	movs	r3, #0
 8009d28:	f8c7 311c 	str.w	r3, [r7, #284]	@ 0x11c
    r = 0;			/* reset zero run length */
 8009d2c:	2600      	movs	r6, #0
  for (k = cinfo->Ss; k <= Se; k++) {
 8009d2e:	3401      	adds	r4, #1
 8009d30:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8009d34:	429c      	cmp	r4, r3
 8009d36:	dd85      	ble.n	8009c44 <encode_mcu_AC_refine+0x14a>
  }

  if (r > 0 || BR > 0) {	/* If there are trailing zeroes, */
 8009d38:	2e00      	cmp	r6, #0
 8009d3a:	dc03      	bgt.n	8009d44 <encode_mcu_AC_refine+0x24a>
 8009d3c:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8009d40:	2b00      	cmp	r3, #0
 8009d42:	d027      	beq.n	8009d94 <encode_mcu_AC_refine+0x29a>
    entropy->EOBRUN++;		/* count an EOB */
 8009d44:	f8d7 3118 	ldr.w	r3, [r7, #280]	@ 0x118
 8009d48:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8009d4c:	1c5a      	adds	r2, r3, #1
 8009d4e:	f8d7 3118 	ldr.w	r3, [r7, #280]	@ 0x118
 8009d52:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
    entropy->BE += BR;		/* concat my correction bits to older ones */
 8009d56:	f8d7 3118 	ldr.w	r3, [r7, #280]	@ 0x118
 8009d5a:	f8d3 2084 	ldr.w	r2, [r3, #132]	@ 0x84
 8009d5e:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8009d62:	441a      	add	r2, r3
 8009d64:	f8d7 3118 	ldr.w	r3, [r7, #280]	@ 0x118
 8009d68:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    /* We force out the EOB if we risk either:
     * 1. overflow of the EOB counter;
     * 2. overflow of the correction bit buffer during the next MCU.
     */
    if (entropy->EOBRUN == 0x7FFF || entropy->BE > (MAX_CORR_BITS-DCTSIZE2+1))
 8009d6c:	f8d7 3118 	ldr.w	r3, [r7, #280]	@ 0x118
 8009d70:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8009d74:	f647 72ff 	movw	r2, #32767	@ 0x7fff
 8009d78:	4293      	cmp	r3, r2
 8009d7a:	d007      	beq.n	8009d8c <encode_mcu_AC_refine+0x292>
 8009d7c:	f8d7 3118 	ldr.w	r3, [r7, #280]	@ 0x118
 8009d80:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8009d84:	f240 32a9 	movw	r2, #937	@ 0x3a9
 8009d88:	4293      	cmp	r3, r2
 8009d8a:	d903      	bls.n	8009d94 <encode_mcu_AC_refine+0x29a>
      emit_eobrun(entropy);
 8009d8c:	f8d7 0118 	ldr.w	r0, [r7, #280]	@ 0x118
 8009d90:	f7ff fbc8 	bl	8009524 <emit_eobrun>
  }

  cinfo->dest->next_output_byte = entropy->next_output_byte;
 8009d94:	f507 7394 	add.w	r3, r7, #296	@ 0x128
 8009d98:	f5a3 7392 	sub.w	r3, r3, #292	@ 0x124
 8009d9c:	681b      	ldr	r3, [r3, #0]
 8009d9e:	699b      	ldr	r3, [r3, #24]
 8009da0:	f8d7 2118 	ldr.w	r2, [r7, #280]	@ 0x118
 8009da4:	6f12      	ldr	r2, [r2, #112]	@ 0x70
 8009da6:	601a      	str	r2, [r3, #0]
  cinfo->dest->free_in_buffer = entropy->free_in_buffer;
 8009da8:	f507 7394 	add.w	r3, r7, #296	@ 0x128
 8009dac:	f5a3 7392 	sub.w	r3, r3, #292	@ 0x124
 8009db0:	681b      	ldr	r3, [r3, #0]
 8009db2:	699b      	ldr	r3, [r3, #24]
 8009db4:	f8d7 2118 	ldr.w	r2, [r7, #280]	@ 0x118
 8009db8:	6f52      	ldr	r2, [r2, #116]	@ 0x74
 8009dba:	605a      	str	r2, [r3, #4]

  /* Update restart-interval state too */
  if (cinfo->restart_interval) {
 8009dbc:	f507 7394 	add.w	r3, r7, #296	@ 0x128
 8009dc0:	f5a3 7392 	sub.w	r3, r3, #292	@ 0x124
 8009dc4:	681b      	ldr	r3, [r3, #0]
 8009dc6:	f8d3 30ec 	ldr.w	r3, [r3, #236]	@ 0xec
 8009dca:	2b00      	cmp	r3, #0
 8009dcc:	d024      	beq.n	8009e18 <encode_mcu_AC_refine+0x31e>
    if (entropy->restarts_to_go == 0) {
 8009dce:	f8d7 3118 	ldr.w	r3, [r7, #280]	@ 0x118
 8009dd2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009dd4:	2b00      	cmp	r3, #0
 8009dd6:	d118      	bne.n	8009e0a <encode_mcu_AC_refine+0x310>
      entropy->restarts_to_go = cinfo->restart_interval;
 8009dd8:	f507 7394 	add.w	r3, r7, #296	@ 0x128
 8009ddc:	f5a3 7392 	sub.w	r3, r3, #292	@ 0x124
 8009de0:	681b      	ldr	r3, [r3, #0]
 8009de2:	f8d3 20ec 	ldr.w	r2, [r3, #236]	@ 0xec
 8009de6:	f8d7 3118 	ldr.w	r3, [r7, #280]	@ 0x118
 8009dea:	625a      	str	r2, [r3, #36]	@ 0x24
      entropy->next_restart_num++;
 8009dec:	f8d7 3118 	ldr.w	r3, [r7, #280]	@ 0x118
 8009df0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009df2:	1c5a      	adds	r2, r3, #1
 8009df4:	f8d7 3118 	ldr.w	r3, [r7, #280]	@ 0x118
 8009df8:	629a      	str	r2, [r3, #40]	@ 0x28
      entropy->next_restart_num &= 7;
 8009dfa:	f8d7 3118 	ldr.w	r3, [r7, #280]	@ 0x118
 8009dfe:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009e00:	f003 0207 	and.w	r2, r3, #7
 8009e04:	f8d7 3118 	ldr.w	r3, [r7, #280]	@ 0x118
 8009e08:	629a      	str	r2, [r3, #40]	@ 0x28
    }
    entropy->restarts_to_go--;
 8009e0a:	f8d7 3118 	ldr.w	r3, [r7, #280]	@ 0x118
 8009e0e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009e10:	1e5a      	subs	r2, r3, #1
 8009e12:	f8d7 3118 	ldr.w	r3, [r7, #280]	@ 0x118
 8009e16:	625a      	str	r2, [r3, #36]	@ 0x24
  }

  return TRUE;
 8009e18:	2301      	movs	r3, #1
}
 8009e1a:	4618      	mov	r0, r3
 8009e1c:	f507 7796 	add.w	r7, r7, #300	@ 0x12c
 8009e20:	46bd      	mov	sp, r7
 8009e22:	bdf0      	pop	{r4, r5, r6, r7, pc}

08009e24 <encode_one_block>:
/* Encode a single block's worth of coefficients */

LOCAL(boolean)
encode_one_block (working_state * state, JCOEFPTR block, int last_dc_val,
		  c_derived_tbl *dctbl, c_derived_tbl *actbl)
{
 8009e24:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8009e28:	b087      	sub	sp, #28
 8009e2a:	af00      	add	r7, sp, #0
 8009e2c:	60f8      	str	r0, [r7, #12]
 8009e2e:	60b9      	str	r1, [r7, #8]
 8009e30:	607a      	str	r2, [r7, #4]
 8009e32:	603b      	str	r3, [r7, #0]
  register int temp, temp2;
  register int nbits;
  register int k, r, i;
  int Se = state->cinfo->lim_Se;
 8009e34:	68fb      	ldr	r3, [r7, #12]
 8009e36:	6a1b      	ldr	r3, [r3, #32]
 8009e38:	f8d3 3180 	ldr.w	r3, [r3, #384]	@ 0x180
 8009e3c:	617b      	str	r3, [r7, #20]
  const int * natural_order = state->cinfo->natural_order;
 8009e3e:	68fb      	ldr	r3, [r7, #12]
 8009e40:	6a1b      	ldr	r3, [r3, #32]
 8009e42:	f8d3 317c 	ldr.w	r3, [r3, #380]	@ 0x17c
 8009e46:	613b      	str	r3, [r7, #16]

  /* Encode the DC coefficient difference per section F.1.2.1 */

  temp = temp2 = block[0] - last_dc_val;
 8009e48:	68bb      	ldr	r3, [r7, #8]
 8009e4a:	f9b3 3000 	ldrsh.w	r3, [r3]
 8009e4e:	461a      	mov	r2, r3
 8009e50:	687b      	ldr	r3, [r7, #4]
 8009e52:	eba2 0803 	sub.w	r8, r2, r3
 8009e56:	4644      	mov	r4, r8

  if (temp < 0) {
 8009e58:	2c00      	cmp	r4, #0
 8009e5a:	da02      	bge.n	8009e62 <encode_one_block+0x3e>
    temp = -temp;		/* temp is abs value of input */
 8009e5c:	4264      	negs	r4, r4
    /* For a negative input, want temp2 = bitwise complement of abs(input) */
    /* This code assumes we are on a two's complement machine */
    temp2--;
 8009e5e:	f108 38ff 	add.w	r8, r8, #4294967295
  }

  /* Find the number of bits needed for the magnitude of the coefficient */
  nbits = 0;
 8009e62:	2500      	movs	r5, #0
  while (temp) {
 8009e64:	e001      	b.n	8009e6a <encode_one_block+0x46>
    nbits++;
 8009e66:	3501      	adds	r5, #1
    temp >>= 1;
 8009e68:	1064      	asrs	r4, r4, #1
  while (temp) {
 8009e6a:	2c00      	cmp	r4, #0
 8009e6c:	d1fb      	bne.n	8009e66 <encode_one_block+0x42>
  }
  /* Check for out-of-range coefficient values.
   * Since we're encoding a difference, the range limit is twice as much.
   */
  if (nbits > MAX_COEF_BITS+1)
 8009e6e:	2d0b      	cmp	r5, #11
 8009e70:	dd0c      	ble.n	8009e8c <encode_one_block+0x68>
    ERREXIT(state->cinfo, JERR_BAD_DCT_COEF);
 8009e72:	68fb      	ldr	r3, [r7, #12]
 8009e74:	6a1b      	ldr	r3, [r3, #32]
 8009e76:	681b      	ldr	r3, [r3, #0]
 8009e78:	2206      	movs	r2, #6
 8009e7a:	615a      	str	r2, [r3, #20]
 8009e7c:	68fb      	ldr	r3, [r7, #12]
 8009e7e:	6a1b      	ldr	r3, [r3, #32]
 8009e80:	681b      	ldr	r3, [r3, #0]
 8009e82:	681b      	ldr	r3, [r3, #0]
 8009e84:	68fa      	ldr	r2, [r7, #12]
 8009e86:	6a12      	ldr	r2, [r2, #32]
 8009e88:	4610      	mov	r0, r2
 8009e8a:	4798      	blx	r3

  /* Emit the Huffman-coded symbol for the number of bits */
  if (! emit_bits_s(state, dctbl->ehufco[nbits], dctbl->ehufsi[nbits]))
 8009e8c:	683b      	ldr	r3, [r7, #0]
 8009e8e:	f853 1025 	ldr.w	r1, [r3, r5, lsl #2]
 8009e92:	683b      	ldr	r3, [r7, #0]
 8009e94:	442b      	add	r3, r5
 8009e96:	f893 3400 	ldrb.w	r3, [r3, #1024]	@ 0x400
 8009e9a:	461a      	mov	r2, r3
 8009e9c:	68f8      	ldr	r0, [r7, #12]
 8009e9e:	f7ff f9c3 	bl	8009228 <emit_bits_s>
 8009ea2:	4603      	mov	r3, r0
 8009ea4:	2b00      	cmp	r3, #0
 8009ea6:	d101      	bne.n	8009eac <encode_one_block+0x88>
    return FALSE;
 8009ea8:	2300      	movs	r3, #0
 8009eaa:	e080      	b.n	8009fae <encode_one_block+0x18a>

  /* Emit that number of bits of the value, if positive, */
  /* or the complement of its magnitude, if negative. */
  if (nbits)			/* emit_bits rejects calls with size 0 */
 8009eac:	2d00      	cmp	r5, #0
 8009eae:	d00a      	beq.n	8009ec6 <encode_one_block+0xa2>
    if (! emit_bits_s(state, (unsigned int) temp2, nbits))
 8009eb0:	4643      	mov	r3, r8
 8009eb2:	462a      	mov	r2, r5
 8009eb4:	4619      	mov	r1, r3
 8009eb6:	68f8      	ldr	r0, [r7, #12]
 8009eb8:	f7ff f9b6 	bl	8009228 <emit_bits_s>
 8009ebc:	4603      	mov	r3, r0
 8009ebe:	2b00      	cmp	r3, #0
 8009ec0:	d101      	bne.n	8009ec6 <encode_one_block+0xa2>
      return FALSE;
 8009ec2:	2300      	movs	r3, #0
 8009ec4:	e073      	b.n	8009fae <encode_one_block+0x18a>

  /* Encode the AC coefficients per section F.1.2.2 */

  r = 0;			/* r = run length of zeros */
 8009ec6:	2600      	movs	r6, #0

  for (k = 1; k <= Se; k++) {
 8009ec8:	f04f 0901 	mov.w	r9, #1
 8009ecc:	e05b      	b.n	8009f86 <encode_one_block+0x162>
    if ((temp = block[natural_order[k]]) == 0) {
 8009ece:	464b      	mov	r3, r9
 8009ed0:	009b      	lsls	r3, r3, #2
 8009ed2:	693a      	ldr	r2, [r7, #16]
 8009ed4:	4413      	add	r3, r2
 8009ed6:	681b      	ldr	r3, [r3, #0]
 8009ed8:	005b      	lsls	r3, r3, #1
 8009eda:	68ba      	ldr	r2, [r7, #8]
 8009edc:	4413      	add	r3, r2
 8009ede:	f9b3 3000 	ldrsh.w	r3, [r3]
 8009ee2:	461c      	mov	r4, r3
 8009ee4:	2c00      	cmp	r4, #0
 8009ee6:	d111      	bne.n	8009f0c <encode_one_block+0xe8>
      r++;
 8009ee8:	3601      	adds	r6, #1
 8009eea:	e04a      	b.n	8009f82 <encode_one_block+0x15e>
    } else {
      /* if run length > 15, must emit special run-length-16 codes (0xF0) */
      while (r > 15) {
	if (! emit_bits_s(state, actbl->ehufco[0xF0], actbl->ehufsi[0xF0]))
 8009eec:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009eee:	f8d3 13c0 	ldr.w	r1, [r3, #960]	@ 0x3c0
 8009ef2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009ef4:	f893 34f0 	ldrb.w	r3, [r3, #1264]	@ 0x4f0
 8009ef8:	461a      	mov	r2, r3
 8009efa:	68f8      	ldr	r0, [r7, #12]
 8009efc:	f7ff f994 	bl	8009228 <emit_bits_s>
 8009f00:	4603      	mov	r3, r0
 8009f02:	2b00      	cmp	r3, #0
 8009f04:	d101      	bne.n	8009f0a <encode_one_block+0xe6>
	  return FALSE;
 8009f06:	2300      	movs	r3, #0
 8009f08:	e051      	b.n	8009fae <encode_one_block+0x18a>
	r -= 16;
 8009f0a:	3e10      	subs	r6, #16
      while (r > 15) {
 8009f0c:	2e0f      	cmp	r6, #15
 8009f0e:	dced      	bgt.n	8009eec <encode_one_block+0xc8>
      }

      temp2 = temp;
 8009f10:	46a0      	mov	r8, r4
      if (temp < 0) {
 8009f12:	2c00      	cmp	r4, #0
 8009f14:	da02      	bge.n	8009f1c <encode_one_block+0xf8>
	temp = -temp;		/* temp is abs value of input */
 8009f16:	4264      	negs	r4, r4
	/* This code assumes we are on a two's complement machine */
	temp2--;
 8009f18:	f108 38ff 	add.w	r8, r8, #4294967295
      }

      /* Find the number of bits needed for the magnitude of the coefficient */
      nbits = 1;		/* there must be at least one 1 bit */
 8009f1c:	2501      	movs	r5, #1
      while ((temp >>= 1))
 8009f1e:	e000      	b.n	8009f22 <encode_one_block+0xfe>
	nbits++;
 8009f20:	3501      	adds	r5, #1
      while ((temp >>= 1))
 8009f22:	1064      	asrs	r4, r4, #1
 8009f24:	2c00      	cmp	r4, #0
 8009f26:	d1fb      	bne.n	8009f20 <encode_one_block+0xfc>
      /* Check for out-of-range coefficient values */
      if (nbits > MAX_COEF_BITS)
 8009f28:	2d0a      	cmp	r5, #10
 8009f2a:	dd0c      	ble.n	8009f46 <encode_one_block+0x122>
	ERREXIT(state->cinfo, JERR_BAD_DCT_COEF);
 8009f2c:	68fb      	ldr	r3, [r7, #12]
 8009f2e:	6a1b      	ldr	r3, [r3, #32]
 8009f30:	681b      	ldr	r3, [r3, #0]
 8009f32:	2206      	movs	r2, #6
 8009f34:	615a      	str	r2, [r3, #20]
 8009f36:	68fb      	ldr	r3, [r7, #12]
 8009f38:	6a1b      	ldr	r3, [r3, #32]
 8009f3a:	681b      	ldr	r3, [r3, #0]
 8009f3c:	681b      	ldr	r3, [r3, #0]
 8009f3e:	68fa      	ldr	r2, [r7, #12]
 8009f40:	6a12      	ldr	r2, [r2, #32]
 8009f42:	4610      	mov	r0, r2
 8009f44:	4798      	blx	r3

      /* Emit Huffman symbol for run length / number of bits */
      i = (r << 4) + nbits;
 8009f46:	0133      	lsls	r3, r6, #4
 8009f48:	18ec      	adds	r4, r5, r3
      if (! emit_bits_s(state, actbl->ehufco[i], actbl->ehufsi[i]))
 8009f4a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009f4c:	f853 1024 	ldr.w	r1, [r3, r4, lsl #2]
 8009f50:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009f52:	4423      	add	r3, r4
 8009f54:	f893 3400 	ldrb.w	r3, [r3, #1024]	@ 0x400
 8009f58:	461a      	mov	r2, r3
 8009f5a:	68f8      	ldr	r0, [r7, #12]
 8009f5c:	f7ff f964 	bl	8009228 <emit_bits_s>
 8009f60:	4603      	mov	r3, r0
 8009f62:	2b00      	cmp	r3, #0
 8009f64:	d101      	bne.n	8009f6a <encode_one_block+0x146>
	return FALSE;
 8009f66:	2300      	movs	r3, #0
 8009f68:	e021      	b.n	8009fae <encode_one_block+0x18a>

      /* Emit that number of bits of the value, if positive, */
      /* or the complement of its magnitude, if negative. */
      if (! emit_bits_s(state, (unsigned int) temp2, nbits))
 8009f6a:	4643      	mov	r3, r8
 8009f6c:	462a      	mov	r2, r5
 8009f6e:	4619      	mov	r1, r3
 8009f70:	68f8      	ldr	r0, [r7, #12]
 8009f72:	f7ff f959 	bl	8009228 <emit_bits_s>
 8009f76:	4603      	mov	r3, r0
 8009f78:	2b00      	cmp	r3, #0
 8009f7a:	d101      	bne.n	8009f80 <encode_one_block+0x15c>
	return FALSE;
 8009f7c:	2300      	movs	r3, #0
 8009f7e:	e016      	b.n	8009fae <encode_one_block+0x18a>

      r = 0;
 8009f80:	2600      	movs	r6, #0
  for (k = 1; k <= Se; k++) {
 8009f82:	f109 0901 	add.w	r9, r9, #1
 8009f86:	697b      	ldr	r3, [r7, #20]
 8009f88:	4599      	cmp	r9, r3
 8009f8a:	dda0      	ble.n	8009ece <encode_one_block+0xaa>
    }
  }

  /* If the last coef(s) were zero, emit an end-of-block code */
  if (r > 0)
 8009f8c:	2e00      	cmp	r6, #0
 8009f8e:	dd0d      	ble.n	8009fac <encode_one_block+0x188>
    if (! emit_bits_s(state, actbl->ehufco[0], actbl->ehufsi[0]))
 8009f90:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009f92:	6819      	ldr	r1, [r3, #0]
 8009f94:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009f96:	f893 3400 	ldrb.w	r3, [r3, #1024]	@ 0x400
 8009f9a:	461a      	mov	r2, r3
 8009f9c:	68f8      	ldr	r0, [r7, #12]
 8009f9e:	f7ff f943 	bl	8009228 <emit_bits_s>
 8009fa2:	4603      	mov	r3, r0
 8009fa4:	2b00      	cmp	r3, #0
 8009fa6:	d101      	bne.n	8009fac <encode_one_block+0x188>
      return FALSE;
 8009fa8:	2300      	movs	r3, #0
 8009faa:	e000      	b.n	8009fae <encode_one_block+0x18a>

  return TRUE;
 8009fac:	2301      	movs	r3, #1
}
 8009fae:	4618      	mov	r0, r3
 8009fb0:	371c      	adds	r7, #28
 8009fb2:	46bd      	mov	sp, r7
 8009fb4:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}

08009fb8 <encode_mcu_huff>:
 * Encode and output one MCU's worth of Huffman-compressed coefficients.
 */

METHODDEF(boolean)
encode_mcu_huff (j_compress_ptr cinfo, JBLOCKROW *MCU_data)
{
 8009fb8:	b5b0      	push	{r4, r5, r7, lr}
 8009fba:	b092      	sub	sp, #72	@ 0x48
 8009fbc:	af02      	add	r7, sp, #8
 8009fbe:	6078      	str	r0, [r7, #4]
 8009fc0:	6039      	str	r1, [r7, #0]
  huff_entropy_ptr entropy = (huff_entropy_ptr) cinfo->entropy;
 8009fc2:	687b      	ldr	r3, [r7, #4]
 8009fc4:	f8d3 31a4 	ldr.w	r3, [r3, #420]	@ 0x1a4
 8009fc8:	63bb      	str	r3, [r7, #56]	@ 0x38
  working_state state;
  int blkn, ci;
  jpeg_component_info * compptr;

  /* Load up working state */
  state.next_output_byte = cinfo->dest->next_output_byte;
 8009fca:	687b      	ldr	r3, [r7, #4]
 8009fcc:	699b      	ldr	r3, [r3, #24]
 8009fce:	681b      	ldr	r3, [r3, #0]
 8009fd0:	60fb      	str	r3, [r7, #12]
  state.free_in_buffer = cinfo->dest->free_in_buffer;
 8009fd2:	687b      	ldr	r3, [r7, #4]
 8009fd4:	699b      	ldr	r3, [r3, #24]
 8009fd6:	685b      	ldr	r3, [r3, #4]
 8009fd8:	613b      	str	r3, [r7, #16]
  ASSIGN_STATE(state.cur, entropy->saved);
 8009fda:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009fdc:	f107 0414 	add.w	r4, r7, #20
 8009fe0:	f103 050c 	add.w	r5, r3, #12
 8009fe4:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8009fe6:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8009fe8:	e895 0003 	ldmia.w	r5, {r0, r1}
 8009fec:	e884 0003 	stmia.w	r4, {r0, r1}
  state.cinfo = cinfo;
 8009ff0:	687b      	ldr	r3, [r7, #4]
 8009ff2:	62fb      	str	r3, [r7, #44]	@ 0x2c

  /* Emit restart marker if needed */
  if (cinfo->restart_interval) {
 8009ff4:	687b      	ldr	r3, [r7, #4]
 8009ff6:	f8d3 30ec 	ldr.w	r3, [r3, #236]	@ 0xec
 8009ffa:	2b00      	cmp	r3, #0
 8009ffc:	d010      	beq.n	800a020 <encode_mcu_huff+0x68>
    if (entropy->restarts_to_go == 0)
 8009ffe:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a000:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800a002:	2b00      	cmp	r3, #0
 800a004:	d10c      	bne.n	800a020 <encode_mcu_huff+0x68>
      if (! emit_restart_s(&state, entropy->next_restart_num))
 800a006:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a008:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 800a00a:	f107 030c 	add.w	r3, r7, #12
 800a00e:	4611      	mov	r1, r2
 800a010:	4618      	mov	r0, r3
 800a012:	f7ff fad0 	bl	80095b6 <emit_restart_s>
 800a016:	4603      	mov	r3, r0
 800a018:	2b00      	cmp	r3, #0
 800a01a:	d101      	bne.n	800a020 <encode_mcu_huff+0x68>
	return FALSE;
 800a01c:	2300      	movs	r3, #0
 800a01e:	e07f      	b.n	800a120 <encode_mcu_huff+0x168>
  }

  /* Encode the MCU data blocks */
  for (blkn = 0; blkn < cinfo->blocks_in_MCU; blkn++) {
 800a020:	2300      	movs	r3, #0
 800a022:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800a024:	e044      	b.n	800a0b0 <encode_mcu_huff+0xf8>
    ci = cinfo->MCU_membership[blkn];
 800a026:	687b      	ldr	r3, [r7, #4]
 800a028:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 800a02a:	3250      	adds	r2, #80	@ 0x50
 800a02c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a030:	637b      	str	r3, [r7, #52]	@ 0x34
    compptr = cinfo->cur_comp_info[ci];
 800a032:	687a      	ldr	r2, [r7, #4]
 800a034:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800a036:	3348      	adds	r3, #72	@ 0x48
 800a038:	009b      	lsls	r3, r3, #2
 800a03a:	4413      	add	r3, r2
 800a03c:	685b      	ldr	r3, [r3, #4]
 800a03e:	633b      	str	r3, [r7, #48]	@ 0x30
    if (! encode_one_block(&state,
			   MCU_data[blkn][0], state.cur.last_dc_val[ci],
 800a040:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800a042:	009b      	lsls	r3, r3, #2
 800a044:	683a      	ldr	r2, [r7, #0]
 800a046:	4413      	add	r3, r2
    if (! encode_one_block(&state,
 800a048:	6819      	ldr	r1, [r3, #0]
 800a04a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800a04c:	3304      	adds	r3, #4
 800a04e:	009b      	lsls	r3, r3, #2
 800a050:	3340      	adds	r3, #64	@ 0x40
 800a052:	443b      	add	r3, r7
 800a054:	f853 4c34 	ldr.w	r4, [r3, #-52]
			   entropy->dc_derived_tbls[compptr->dc_tbl_no],
 800a058:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a05a:	695b      	ldr	r3, [r3, #20]
    if (! encode_one_block(&state,
 800a05c:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800a05e:	330a      	adds	r3, #10
 800a060:	009b      	lsls	r3, r3, #2
 800a062:	4413      	add	r3, r2
 800a064:	685d      	ldr	r5, [r3, #4]
			   entropy->ac_derived_tbls[compptr->ac_tbl_no]))
 800a066:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a068:	699b      	ldr	r3, [r3, #24]
    if (! encode_one_block(&state,
 800a06a:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800a06c:	330e      	adds	r3, #14
 800a06e:	009b      	lsls	r3, r3, #2
 800a070:	4413      	add	r3, r2
 800a072:	685b      	ldr	r3, [r3, #4]
 800a074:	f107 000c 	add.w	r0, r7, #12
 800a078:	9300      	str	r3, [sp, #0]
 800a07a:	462b      	mov	r3, r5
 800a07c:	4622      	mov	r2, r4
 800a07e:	f7ff fed1 	bl	8009e24 <encode_one_block>
 800a082:	4603      	mov	r3, r0
 800a084:	2b00      	cmp	r3, #0
 800a086:	d101      	bne.n	800a08c <encode_mcu_huff+0xd4>
      return FALSE;
 800a088:	2300      	movs	r3, #0
 800a08a:	e049      	b.n	800a120 <encode_mcu_huff+0x168>
    /* Update last_dc_val */
    state.cur.last_dc_val[ci] = MCU_data[blkn][0][0];
 800a08c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800a08e:	009b      	lsls	r3, r3, #2
 800a090:	683a      	ldr	r2, [r7, #0]
 800a092:	4413      	add	r3, r2
 800a094:	681b      	ldr	r3, [r3, #0]
 800a096:	f9b3 3000 	ldrsh.w	r3, [r3]
 800a09a:	461a      	mov	r2, r3
 800a09c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800a09e:	3304      	adds	r3, #4
 800a0a0:	009b      	lsls	r3, r3, #2
 800a0a2:	3340      	adds	r3, #64	@ 0x40
 800a0a4:	443b      	add	r3, r7
 800a0a6:	f843 2c34 	str.w	r2, [r3, #-52]
  for (blkn = 0; blkn < cinfo->blocks_in_MCU; blkn++) {
 800a0aa:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800a0ac:	3301      	adds	r3, #1
 800a0ae:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800a0b0:	687b      	ldr	r3, [r7, #4]
 800a0b2:	f8d3 313c 	ldr.w	r3, [r3, #316]	@ 0x13c
 800a0b6:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 800a0b8:	429a      	cmp	r2, r3
 800a0ba:	dbb4      	blt.n	800a026 <encode_mcu_huff+0x6e>
  }

  /* Completed MCU, so update state */
  cinfo->dest->next_output_byte = state.next_output_byte;
 800a0bc:	687b      	ldr	r3, [r7, #4]
 800a0be:	699b      	ldr	r3, [r3, #24]
 800a0c0:	68fa      	ldr	r2, [r7, #12]
 800a0c2:	601a      	str	r2, [r3, #0]
  cinfo->dest->free_in_buffer = state.free_in_buffer;
 800a0c4:	687b      	ldr	r3, [r7, #4]
 800a0c6:	699b      	ldr	r3, [r3, #24]
 800a0c8:	693a      	ldr	r2, [r7, #16]
 800a0ca:	605a      	str	r2, [r3, #4]
  ASSIGN_STATE(entropy->saved, state.cur);
 800a0cc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a0ce:	f103 040c 	add.w	r4, r3, #12
 800a0d2:	f107 0514 	add.w	r5, r7, #20
 800a0d6:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800a0d8:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800a0da:	e895 0003 	ldmia.w	r5, {r0, r1}
 800a0de:	e884 0003 	stmia.w	r4, {r0, r1}

  /* Update restart-interval state too */
  if (cinfo->restart_interval) {
 800a0e2:	687b      	ldr	r3, [r7, #4]
 800a0e4:	f8d3 30ec 	ldr.w	r3, [r3, #236]	@ 0xec
 800a0e8:	2b00      	cmp	r3, #0
 800a0ea:	d018      	beq.n	800a11e <encode_mcu_huff+0x166>
    if (entropy->restarts_to_go == 0) {
 800a0ec:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a0ee:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800a0f0:	2b00      	cmp	r3, #0
 800a0f2:	d10f      	bne.n	800a114 <encode_mcu_huff+0x15c>
      entropy->restarts_to_go = cinfo->restart_interval;
 800a0f4:	687b      	ldr	r3, [r7, #4]
 800a0f6:	f8d3 20ec 	ldr.w	r2, [r3, #236]	@ 0xec
 800a0fa:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a0fc:	625a      	str	r2, [r3, #36]	@ 0x24
      entropy->next_restart_num++;
 800a0fe:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a100:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800a102:	1c5a      	adds	r2, r3, #1
 800a104:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a106:	629a      	str	r2, [r3, #40]	@ 0x28
      entropy->next_restart_num &= 7;
 800a108:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a10a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800a10c:	f003 0207 	and.w	r2, r3, #7
 800a110:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a112:	629a      	str	r2, [r3, #40]	@ 0x28
    }
    entropy->restarts_to_go--;
 800a114:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a116:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800a118:	1e5a      	subs	r2, r3, #1
 800a11a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a11c:	625a      	str	r2, [r3, #36]	@ 0x24
  }

  return TRUE;
 800a11e:	2301      	movs	r3, #1
}
 800a120:	4618      	mov	r0, r3
 800a122:	3740      	adds	r7, #64	@ 0x40
 800a124:	46bd      	mov	sp, r7
 800a126:	bdb0      	pop	{r4, r5, r7, pc}

0800a128 <finish_pass_huff>:
 * Finish up at the end of a Huffman-compressed scan.
 */

METHODDEF(void)
finish_pass_huff (j_compress_ptr cinfo)
{
 800a128:	b5b0      	push	{r4, r5, r7, lr}
 800a12a:	b08c      	sub	sp, #48	@ 0x30
 800a12c:	af00      	add	r7, sp, #0
 800a12e:	6078      	str	r0, [r7, #4]
  huff_entropy_ptr entropy = (huff_entropy_ptr) cinfo->entropy;
 800a130:	687b      	ldr	r3, [r7, #4]
 800a132:	f8d3 31a4 	ldr.w	r3, [r3, #420]	@ 0x1a4
 800a136:	62fb      	str	r3, [r7, #44]	@ 0x2c
  working_state state;

  if (cinfo->progressive_mode) {
 800a138:	687b      	ldr	r3, [r7, #4]
 800a13a:	f8d3 3108 	ldr.w	r3, [r3, #264]	@ 0x108
 800a13e:	2b00      	cmp	r3, #0
 800a140:	d01a      	beq.n	800a178 <finish_pass_huff+0x50>
    entropy->next_output_byte = cinfo->dest->next_output_byte;
 800a142:	687b      	ldr	r3, [r7, #4]
 800a144:	699b      	ldr	r3, [r3, #24]
 800a146:	681a      	ldr	r2, [r3, #0]
 800a148:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800a14a:	671a      	str	r2, [r3, #112]	@ 0x70
    entropy->free_in_buffer = cinfo->dest->free_in_buffer;
 800a14c:	687b      	ldr	r3, [r7, #4]
 800a14e:	699b      	ldr	r3, [r3, #24]
 800a150:	685a      	ldr	r2, [r3, #4]
 800a152:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800a154:	675a      	str	r2, [r3, #116]	@ 0x74

    /* Flush out any buffered data */
    emit_eobrun(entropy);
 800a156:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 800a158:	f7ff f9e4 	bl	8009524 <emit_eobrun>
    flush_bits_e(entropy);
 800a15c:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 800a15e:	f7ff f94e 	bl	80093fe <flush_bits_e>

    cinfo->dest->next_output_byte = entropy->next_output_byte;
 800a162:	687b      	ldr	r3, [r7, #4]
 800a164:	699b      	ldr	r3, [r3, #24]
 800a166:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800a168:	6f12      	ldr	r2, [r2, #112]	@ 0x70
 800a16a:	601a      	str	r2, [r3, #0]
    cinfo->dest->free_in_buffer = entropy->free_in_buffer;
 800a16c:	687b      	ldr	r3, [r7, #4]
 800a16e:	699b      	ldr	r3, [r3, #24]
 800a170:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800a172:	6f52      	ldr	r2, [r2, #116]	@ 0x74
 800a174:	605a      	str	r2, [r3, #4]
    /* Update state */
    cinfo->dest->next_output_byte = state.next_output_byte;
    cinfo->dest->free_in_buffer = state.free_in_buffer;
    ASSIGN_STATE(entropy->saved, state.cur);
  }
}
 800a176:	e038      	b.n	800a1ea <finish_pass_huff+0xc2>
    state.next_output_byte = cinfo->dest->next_output_byte;
 800a178:	687b      	ldr	r3, [r7, #4]
 800a17a:	699b      	ldr	r3, [r3, #24]
 800a17c:	681b      	ldr	r3, [r3, #0]
 800a17e:	60bb      	str	r3, [r7, #8]
    state.free_in_buffer = cinfo->dest->free_in_buffer;
 800a180:	687b      	ldr	r3, [r7, #4]
 800a182:	699b      	ldr	r3, [r3, #24]
 800a184:	685b      	ldr	r3, [r3, #4]
 800a186:	60fb      	str	r3, [r7, #12]
    ASSIGN_STATE(state.cur, entropy->saved);
 800a188:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800a18a:	f107 0410 	add.w	r4, r7, #16
 800a18e:	f103 050c 	add.w	r5, r3, #12
 800a192:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800a194:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800a196:	e895 0003 	ldmia.w	r5, {r0, r1}
 800a19a:	e884 0003 	stmia.w	r4, {r0, r1}
    state.cinfo = cinfo;
 800a19e:	687b      	ldr	r3, [r7, #4]
 800a1a0:	62bb      	str	r3, [r7, #40]	@ 0x28
    if (! flush_bits_s(&state))
 800a1a2:	f107 0308 	add.w	r3, r7, #8
 800a1a6:	4618      	mov	r0, r3
 800a1a8:	f7ff f910 	bl	80093cc <flush_bits_s>
 800a1ac:	4603      	mov	r3, r0
 800a1ae:	2b00      	cmp	r3, #0
 800a1b0:	d108      	bne.n	800a1c4 <finish_pass_huff+0x9c>
      ERREXIT(cinfo, JERR_CANT_SUSPEND);
 800a1b2:	687b      	ldr	r3, [r7, #4]
 800a1b4:	681b      	ldr	r3, [r3, #0]
 800a1b6:	2219      	movs	r2, #25
 800a1b8:	615a      	str	r2, [r3, #20]
 800a1ba:	687b      	ldr	r3, [r7, #4]
 800a1bc:	681b      	ldr	r3, [r3, #0]
 800a1be:	681b      	ldr	r3, [r3, #0]
 800a1c0:	6878      	ldr	r0, [r7, #4]
 800a1c2:	4798      	blx	r3
    cinfo->dest->next_output_byte = state.next_output_byte;
 800a1c4:	687b      	ldr	r3, [r7, #4]
 800a1c6:	699b      	ldr	r3, [r3, #24]
 800a1c8:	68ba      	ldr	r2, [r7, #8]
 800a1ca:	601a      	str	r2, [r3, #0]
    cinfo->dest->free_in_buffer = state.free_in_buffer;
 800a1cc:	687b      	ldr	r3, [r7, #4]
 800a1ce:	699b      	ldr	r3, [r3, #24]
 800a1d0:	68fa      	ldr	r2, [r7, #12]
 800a1d2:	605a      	str	r2, [r3, #4]
    ASSIGN_STATE(entropy->saved, state.cur);
 800a1d4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800a1d6:	f103 040c 	add.w	r4, r3, #12
 800a1da:	f107 0510 	add.w	r5, r7, #16
 800a1de:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800a1e0:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800a1e2:	e895 0003 	ldmia.w	r5, {r0, r1}
 800a1e6:	e884 0003 	stmia.w	r4, {r0, r1}
}
 800a1ea:	bf00      	nop
 800a1ec:	3730      	adds	r7, #48	@ 0x30
 800a1ee:	46bd      	mov	sp, r7
 800a1f0:	bdb0      	pop	{r4, r5, r7, pc}

0800a1f2 <htest_one_block>:
/* Process a single block's worth of coefficients */

LOCAL(void)
htest_one_block (j_compress_ptr cinfo, JCOEFPTR block, int last_dc_val,
		 long dc_counts[], long ac_counts[])
{
 800a1f2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800a1f6:	b086      	sub	sp, #24
 800a1f8:	af00      	add	r7, sp, #0
 800a1fa:	60f8      	str	r0, [r7, #12]
 800a1fc:	60b9      	str	r1, [r7, #8]
 800a1fe:	607a      	str	r2, [r7, #4]
 800a200:	603b      	str	r3, [r7, #0]
  register int temp;
  register int nbits;
  register int k, r;
  int Se = cinfo->lim_Se;
 800a202:	68fb      	ldr	r3, [r7, #12]
 800a204:	f8d3 3180 	ldr.w	r3, [r3, #384]	@ 0x180
 800a208:	617b      	str	r3, [r7, #20]
  const int * natural_order = cinfo->natural_order;
 800a20a:	68fb      	ldr	r3, [r7, #12]
 800a20c:	f8d3 317c 	ldr.w	r3, [r3, #380]	@ 0x17c
 800a210:	613b      	str	r3, [r7, #16]
  
  /* Encode the DC coefficient difference per section F.1.2.1 */
  
  temp = block[0] - last_dc_val;
 800a212:	68bb      	ldr	r3, [r7, #8]
 800a214:	f9b3 3000 	ldrsh.w	r3, [r3]
 800a218:	461a      	mov	r2, r3
 800a21a:	687b      	ldr	r3, [r7, #4]
 800a21c:	1ad4      	subs	r4, r2, r3
  if (temp < 0)
 800a21e:	2c00      	cmp	r4, #0
 800a220:	da00      	bge.n	800a224 <htest_one_block+0x32>
    temp = -temp;
 800a222:	4264      	negs	r4, r4
  
  /* Find the number of bits needed for the magnitude of the coefficient */
  nbits = 0;
 800a224:	2500      	movs	r5, #0
  while (temp) {
 800a226:	e001      	b.n	800a22c <htest_one_block+0x3a>
    nbits++;
 800a228:	3501      	adds	r5, #1
    temp >>= 1;
 800a22a:	1064      	asrs	r4, r4, #1
  while (temp) {
 800a22c:	2c00      	cmp	r4, #0
 800a22e:	d1fb      	bne.n	800a228 <htest_one_block+0x36>
  }
  /* Check for out-of-range coefficient values.
   * Since we're encoding a difference, the range limit is twice as much.
   */
  if (nbits > MAX_COEF_BITS+1)
 800a230:	2d0b      	cmp	r5, #11
 800a232:	dd08      	ble.n	800a246 <htest_one_block+0x54>
    ERREXIT(cinfo, JERR_BAD_DCT_COEF);
 800a234:	68fb      	ldr	r3, [r7, #12]
 800a236:	681b      	ldr	r3, [r3, #0]
 800a238:	2206      	movs	r2, #6
 800a23a:	615a      	str	r2, [r3, #20]
 800a23c:	68fb      	ldr	r3, [r7, #12]
 800a23e:	681b      	ldr	r3, [r3, #0]
 800a240:	681b      	ldr	r3, [r3, #0]
 800a242:	68f8      	ldr	r0, [r7, #12]
 800a244:	4798      	blx	r3

  /* Count the Huffman symbol for the number of bits */
  dc_counts[nbits]++;
 800a246:	462b      	mov	r3, r5
 800a248:	009b      	lsls	r3, r3, #2
 800a24a:	683a      	ldr	r2, [r7, #0]
 800a24c:	4413      	add	r3, r2
 800a24e:	681a      	ldr	r2, [r3, #0]
 800a250:	3201      	adds	r2, #1
 800a252:	601a      	str	r2, [r3, #0]
  
  /* Encode the AC coefficients per section F.1.2.2 */
  
  r = 0;			/* r = run length of zeros */
 800a254:	2600      	movs	r6, #0
  
  for (k = 1; k <= Se; k++) {
 800a256:	f04f 0801 	mov.w	r8, #1
 800a25a:	e036      	b.n	800a2ca <htest_one_block+0xd8>
    if ((temp = block[natural_order[k]]) == 0) {
 800a25c:	4643      	mov	r3, r8
 800a25e:	009b      	lsls	r3, r3, #2
 800a260:	693a      	ldr	r2, [r7, #16]
 800a262:	4413      	add	r3, r2
 800a264:	681b      	ldr	r3, [r3, #0]
 800a266:	005b      	lsls	r3, r3, #1
 800a268:	68ba      	ldr	r2, [r7, #8]
 800a26a:	4413      	add	r3, r2
 800a26c:	f9b3 3000 	ldrsh.w	r3, [r3]
 800a270:	461c      	mov	r4, r3
 800a272:	2c00      	cmp	r4, #0
 800a274:	d108      	bne.n	800a288 <htest_one_block+0x96>
      r++;
 800a276:	3601      	adds	r6, #1
 800a278:	e025      	b.n	800a2c6 <htest_one_block+0xd4>
    } else {
      /* if run length > 15, must emit special run-length-16 codes (0xF0) */
      while (r > 15) {
	ac_counts[0xF0]++;
 800a27a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a27c:	f503 7370 	add.w	r3, r3, #960	@ 0x3c0
 800a280:	681a      	ldr	r2, [r3, #0]
 800a282:	3201      	adds	r2, #1
 800a284:	601a      	str	r2, [r3, #0]
	r -= 16;
 800a286:	3e10      	subs	r6, #16
      while (r > 15) {
 800a288:	2e0f      	cmp	r6, #15
 800a28a:	dcf6      	bgt.n	800a27a <htest_one_block+0x88>
      }
      
      /* Find the number of bits needed for the magnitude of the coefficient */
      if (temp < 0)
 800a28c:	2c00      	cmp	r4, #0
 800a28e:	da00      	bge.n	800a292 <htest_one_block+0xa0>
	temp = -temp;
 800a290:	4264      	negs	r4, r4
      
      /* Find the number of bits needed for the magnitude of the coefficient */
      nbits = 1;		/* there must be at least one 1 bit */
 800a292:	2501      	movs	r5, #1
      while ((temp >>= 1))
 800a294:	e000      	b.n	800a298 <htest_one_block+0xa6>
	nbits++;
 800a296:	3501      	adds	r5, #1
      while ((temp >>= 1))
 800a298:	1064      	asrs	r4, r4, #1
 800a29a:	2c00      	cmp	r4, #0
 800a29c:	d1fb      	bne.n	800a296 <htest_one_block+0xa4>
      /* Check for out-of-range coefficient values */
      if (nbits > MAX_COEF_BITS)
 800a29e:	2d0a      	cmp	r5, #10
 800a2a0:	dd08      	ble.n	800a2b4 <htest_one_block+0xc2>
	ERREXIT(cinfo, JERR_BAD_DCT_COEF);
 800a2a2:	68fb      	ldr	r3, [r7, #12]
 800a2a4:	681b      	ldr	r3, [r3, #0]
 800a2a6:	2206      	movs	r2, #6
 800a2a8:	615a      	str	r2, [r3, #20]
 800a2aa:	68fb      	ldr	r3, [r7, #12]
 800a2ac:	681b      	ldr	r3, [r3, #0]
 800a2ae:	681b      	ldr	r3, [r3, #0]
 800a2b0:	68f8      	ldr	r0, [r7, #12]
 800a2b2:	4798      	blx	r3
      
      /* Count Huffman symbol for run length / number of bits */
      ac_counts[(r << 4) + nbits]++;
 800a2b4:	0133      	lsls	r3, r6, #4
 800a2b6:	442b      	add	r3, r5
 800a2b8:	009b      	lsls	r3, r3, #2
 800a2ba:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800a2bc:	4413      	add	r3, r2
 800a2be:	681a      	ldr	r2, [r3, #0]
 800a2c0:	3201      	adds	r2, #1
 800a2c2:	601a      	str	r2, [r3, #0]
      
      r = 0;
 800a2c4:	2600      	movs	r6, #0
  for (k = 1; k <= Se; k++) {
 800a2c6:	f108 0801 	add.w	r8, r8, #1
 800a2ca:	697b      	ldr	r3, [r7, #20]
 800a2cc:	4598      	cmp	r8, r3
 800a2ce:	ddc5      	ble.n	800a25c <htest_one_block+0x6a>
    }
  }

  /* If the last coef(s) were zero, emit an end-of-block code */
  if (r > 0)
 800a2d0:	2e00      	cmp	r6, #0
 800a2d2:	dd04      	ble.n	800a2de <htest_one_block+0xec>
    ac_counts[0]++;
 800a2d4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a2d6:	681b      	ldr	r3, [r3, #0]
 800a2d8:	1c5a      	adds	r2, r3, #1
 800a2da:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a2dc:	601a      	str	r2, [r3, #0]
}
 800a2de:	bf00      	nop
 800a2e0:	3718      	adds	r7, #24
 800a2e2:	46bd      	mov	sp, r7
 800a2e4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0800a2e8 <encode_mcu_gather>:
 * No data is actually output, so no suspension return is possible.
 */

METHODDEF(boolean)
encode_mcu_gather (j_compress_ptr cinfo, JBLOCKROW *MCU_data)
{
 800a2e8:	b590      	push	{r4, r7, lr}
 800a2ea:	b089      	sub	sp, #36	@ 0x24
 800a2ec:	af02      	add	r7, sp, #8
 800a2ee:	6078      	str	r0, [r7, #4]
 800a2f0:	6039      	str	r1, [r7, #0]
  huff_entropy_ptr entropy = (huff_entropy_ptr) cinfo->entropy;
 800a2f2:	687b      	ldr	r3, [r7, #4]
 800a2f4:	f8d3 31a4 	ldr.w	r3, [r3, #420]	@ 0x1a4
 800a2f8:	60fb      	str	r3, [r7, #12]
  int blkn, ci;
  jpeg_component_info * compptr;

  /* Take care of restart intervals if needed */
  if (cinfo->restart_interval) {
 800a2fa:	687b      	ldr	r3, [r7, #4]
 800a2fc:	f8d3 30ec 	ldr.w	r3, [r3, #236]	@ 0xec
 800a300:	2b00      	cmp	r3, #0
 800a302:	d020      	beq.n	800a346 <encode_mcu_gather+0x5e>
    if (entropy->restarts_to_go == 0) {
 800a304:	68fb      	ldr	r3, [r7, #12]
 800a306:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800a308:	2b00      	cmp	r3, #0
 800a30a:	d117      	bne.n	800a33c <encode_mcu_gather+0x54>
      /* Re-initialize DC predictions to 0 */
      for (ci = 0; ci < cinfo->comps_in_scan; ci++)
 800a30c:	2300      	movs	r3, #0
 800a30e:	613b      	str	r3, [r7, #16]
 800a310:	e009      	b.n	800a326 <encode_mcu_gather+0x3e>
	entropy->saved.last_dc_val[ci] = 0;
 800a312:	68fa      	ldr	r2, [r7, #12]
 800a314:	693b      	ldr	r3, [r7, #16]
 800a316:	3304      	adds	r3, #4
 800a318:	009b      	lsls	r3, r3, #2
 800a31a:	4413      	add	r3, r2
 800a31c:	2200      	movs	r2, #0
 800a31e:	605a      	str	r2, [r3, #4]
      for (ci = 0; ci < cinfo->comps_in_scan; ci++)
 800a320:	693b      	ldr	r3, [r7, #16]
 800a322:	3301      	adds	r3, #1
 800a324:	613b      	str	r3, [r7, #16]
 800a326:	687b      	ldr	r3, [r7, #4]
 800a328:	f8d3 3120 	ldr.w	r3, [r3, #288]	@ 0x120
 800a32c:	693a      	ldr	r2, [r7, #16]
 800a32e:	429a      	cmp	r2, r3
 800a330:	dbef      	blt.n	800a312 <encode_mcu_gather+0x2a>
      /* Update restart state */
      entropy->restarts_to_go = cinfo->restart_interval;
 800a332:	687b      	ldr	r3, [r7, #4]
 800a334:	f8d3 20ec 	ldr.w	r2, [r3, #236]	@ 0xec
 800a338:	68fb      	ldr	r3, [r7, #12]
 800a33a:	625a      	str	r2, [r3, #36]	@ 0x24
    }
    entropy->restarts_to_go--;
 800a33c:	68fb      	ldr	r3, [r7, #12]
 800a33e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800a340:	1e5a      	subs	r2, r3, #1
 800a342:	68fb      	ldr	r3, [r7, #12]
 800a344:	625a      	str	r2, [r3, #36]	@ 0x24
  }

  for (blkn = 0; blkn < cinfo->blocks_in_MCU; blkn++) {
 800a346:	2300      	movs	r3, #0
 800a348:	617b      	str	r3, [r7, #20]
 800a34a:	e03c      	b.n	800a3c6 <encode_mcu_gather+0xde>
    ci = cinfo->MCU_membership[blkn];
 800a34c:	687b      	ldr	r3, [r7, #4]
 800a34e:	697a      	ldr	r2, [r7, #20]
 800a350:	3250      	adds	r2, #80	@ 0x50
 800a352:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a356:	613b      	str	r3, [r7, #16]
    compptr = cinfo->cur_comp_info[ci];
 800a358:	687a      	ldr	r2, [r7, #4]
 800a35a:	693b      	ldr	r3, [r7, #16]
 800a35c:	3348      	adds	r3, #72	@ 0x48
 800a35e:	009b      	lsls	r3, r3, #2
 800a360:	4413      	add	r3, r2
 800a362:	685b      	ldr	r3, [r3, #4]
 800a364:	60bb      	str	r3, [r7, #8]
    htest_one_block(cinfo, MCU_data[blkn][0], entropy->saved.last_dc_val[ci],
 800a366:	697b      	ldr	r3, [r7, #20]
 800a368:	009b      	lsls	r3, r3, #2
 800a36a:	683a      	ldr	r2, [r7, #0]
 800a36c:	4413      	add	r3, r2
 800a36e:	6819      	ldr	r1, [r3, #0]
 800a370:	68fa      	ldr	r2, [r7, #12]
 800a372:	693b      	ldr	r3, [r7, #16]
 800a374:	3304      	adds	r3, #4
 800a376:	009b      	lsls	r3, r3, #2
 800a378:	4413      	add	r3, r2
 800a37a:	6858      	ldr	r0, [r3, #4]
		    entropy->dc_count_ptrs[compptr->dc_tbl_no],
 800a37c:	68bb      	ldr	r3, [r7, #8]
 800a37e:	695b      	ldr	r3, [r3, #20]
    htest_one_block(cinfo, MCU_data[blkn][0], entropy->saved.last_dc_val[ci],
 800a380:	68fa      	ldr	r2, [r7, #12]
 800a382:	3312      	adds	r3, #18
 800a384:	009b      	lsls	r3, r3, #2
 800a386:	4413      	add	r3, r2
 800a388:	685c      	ldr	r4, [r3, #4]
		    entropy->ac_count_ptrs[compptr->ac_tbl_no]);
 800a38a:	68bb      	ldr	r3, [r7, #8]
 800a38c:	699b      	ldr	r3, [r3, #24]
    htest_one_block(cinfo, MCU_data[blkn][0], entropy->saved.last_dc_val[ci],
 800a38e:	68fa      	ldr	r2, [r7, #12]
 800a390:	3316      	adds	r3, #22
 800a392:	009b      	lsls	r3, r3, #2
 800a394:	4413      	add	r3, r2
 800a396:	685b      	ldr	r3, [r3, #4]
 800a398:	9300      	str	r3, [sp, #0]
 800a39a:	4623      	mov	r3, r4
 800a39c:	4602      	mov	r2, r0
 800a39e:	6878      	ldr	r0, [r7, #4]
 800a3a0:	f7ff ff27 	bl	800a1f2 <htest_one_block>
    entropy->saved.last_dc_val[ci] = MCU_data[blkn][0][0];
 800a3a4:	697b      	ldr	r3, [r7, #20]
 800a3a6:	009b      	lsls	r3, r3, #2
 800a3a8:	683a      	ldr	r2, [r7, #0]
 800a3aa:	4413      	add	r3, r2
 800a3ac:	681b      	ldr	r3, [r3, #0]
 800a3ae:	f9b3 3000 	ldrsh.w	r3, [r3]
 800a3b2:	4619      	mov	r1, r3
 800a3b4:	68fa      	ldr	r2, [r7, #12]
 800a3b6:	693b      	ldr	r3, [r7, #16]
 800a3b8:	3304      	adds	r3, #4
 800a3ba:	009b      	lsls	r3, r3, #2
 800a3bc:	4413      	add	r3, r2
 800a3be:	6059      	str	r1, [r3, #4]
  for (blkn = 0; blkn < cinfo->blocks_in_MCU; blkn++) {
 800a3c0:	697b      	ldr	r3, [r7, #20]
 800a3c2:	3301      	adds	r3, #1
 800a3c4:	617b      	str	r3, [r7, #20]
 800a3c6:	687b      	ldr	r3, [r7, #4]
 800a3c8:	f8d3 313c 	ldr.w	r3, [r3, #316]	@ 0x13c
 800a3cc:	697a      	ldr	r2, [r7, #20]
 800a3ce:	429a      	cmp	r2, r3
 800a3d0:	dbbc      	blt.n	800a34c <encode_mcu_gather+0x64>
  }

  return TRUE;
 800a3d2:	2301      	movs	r3, #1
}
 800a3d4:	4618      	mov	r0, r3
 800a3d6:	371c      	adds	r7, #28
 800a3d8:	46bd      	mov	sp, r7
 800a3da:	bd90      	pop	{r4, r7, pc}

0800a3dc <jpeg_gen_optimal_table>:
 * So the extra complexity of an optimal algorithm doesn't seem worthwhile.
 */

LOCAL(void)
jpeg_gen_optimal_table (j_compress_ptr cinfo, JHUFF_TBL * htbl, long freq[])
{
 800a3dc:	b580      	push	{r7, lr}
 800a3de:	f6ad 0d58 	subw	sp, sp, #2136	@ 0x858
 800a3e2:	af00      	add	r7, sp, #0
 800a3e4:	f607 0358 	addw	r3, r7, #2136	@ 0x858
 800a3e8:	f6a3 034c 	subw	r3, r3, #2124	@ 0x84c
 800a3ec:	6018      	str	r0, [r3, #0]
 800a3ee:	f607 0358 	addw	r3, r7, #2136	@ 0x858
 800a3f2:	f5a3 6305 	sub.w	r3, r3, #2128	@ 0x850
 800a3f6:	6019      	str	r1, [r3, #0]
 800a3f8:	f607 0358 	addw	r3, r7, #2136	@ 0x858
 800a3fc:	f6a3 0354 	subw	r3, r3, #2132	@ 0x854
 800a400:	601a      	str	r2, [r3, #0]
  int p, i, j;
  long v;

  /* This algorithm is explained in section K.2 of the JPEG standard */

  MEMZERO(bits, SIZEOF(bits));
 800a402:	f607 031c 	addw	r3, r7, #2076	@ 0x81c
 800a406:	2221      	movs	r2, #33	@ 0x21
 800a408:	2100      	movs	r1, #0
 800a40a:	4618      	mov	r0, r3
 800a40c:	f00f faf0 	bl	80199f0 <memset>
  MEMZERO(codesize, SIZEOF(codesize));
 800a410:	f507 6383 	add.w	r3, r7, #1048	@ 0x418
 800a414:	f240 4204 	movw	r2, #1028	@ 0x404
 800a418:	2100      	movs	r1, #0
 800a41a:	4618      	mov	r0, r3
 800a41c:	f00f fae8 	bl	80199f0 <memset>
  for (i = 0; i < 257; i++)
 800a420:	2300      	movs	r3, #0
 800a422:	f8c7 3848 	str.w	r3, [r7, #2120]	@ 0x848
 800a426:	e00e      	b.n	800a446 <jpeg_gen_optimal_table+0x6a>
    others[i] = -1;		/* init links to empty */
 800a428:	f607 0358 	addw	r3, r7, #2136	@ 0x858
 800a42c:	f6a3 0344 	subw	r3, r3, #2116	@ 0x844
 800a430:	f8d7 2848 	ldr.w	r2, [r7, #2120]	@ 0x848
 800a434:	f04f 31ff 	mov.w	r1, #4294967295
 800a438:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  for (i = 0; i < 257; i++)
 800a43c:	f8d7 3848 	ldr.w	r3, [r7, #2120]	@ 0x848
 800a440:	3301      	adds	r3, #1
 800a442:	f8c7 3848 	str.w	r3, [r7, #2120]	@ 0x848
 800a446:	f8d7 3848 	ldr.w	r3, [r7, #2120]	@ 0x848
 800a44a:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800a44e:	ddeb      	ble.n	800a428 <jpeg_gen_optimal_table+0x4c>
  
  freq[256] = 1;		/* make sure 256 has a nonzero count */
 800a450:	f607 0358 	addw	r3, r7, #2136	@ 0x858
 800a454:	f6a3 0354 	subw	r3, r3, #2132	@ 0x854
 800a458:	681b      	ldr	r3, [r3, #0]
 800a45a:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 800a45e:	2201      	movs	r2, #1
 800a460:	601a      	str	r2, [r3, #0]
  /* Huffman's basic algorithm to assign optimal code lengths to symbols */

  for (;;) {
    /* Find the smallest nonzero frequency, set c1 = its symbol */
    /* In case of ties, take the larger symbol number */
    c1 = -1;
 800a462:	f04f 33ff 	mov.w	r3, #4294967295
 800a466:	f8c7 3854 	str.w	r3, [r7, #2132]	@ 0x854
    v = 1000000000L;
 800a46a:	4bbf      	ldr	r3, [pc, #764]	@ (800a768 <jpeg_gen_optimal_table+0x38c>)
 800a46c:	f8c7 3840 	str.w	r3, [r7, #2112]	@ 0x840
    for (i = 0; i <= 256; i++) {
 800a470:	2300      	movs	r3, #0
 800a472:	f8c7 3848 	str.w	r3, [r7, #2120]	@ 0x848
 800a476:	e02e      	b.n	800a4d6 <jpeg_gen_optimal_table+0xfa>
      if (freq[i] && freq[i] <= v) {
 800a478:	f8d7 3848 	ldr.w	r3, [r7, #2120]	@ 0x848
 800a47c:	009b      	lsls	r3, r3, #2
 800a47e:	f607 0258 	addw	r2, r7, #2136	@ 0x858
 800a482:	f6a2 0254 	subw	r2, r2, #2132	@ 0x854
 800a486:	6812      	ldr	r2, [r2, #0]
 800a488:	4413      	add	r3, r2
 800a48a:	681b      	ldr	r3, [r3, #0]
 800a48c:	2b00      	cmp	r3, #0
 800a48e:	d01d      	beq.n	800a4cc <jpeg_gen_optimal_table+0xf0>
 800a490:	f8d7 3848 	ldr.w	r3, [r7, #2120]	@ 0x848
 800a494:	009b      	lsls	r3, r3, #2
 800a496:	f607 0258 	addw	r2, r7, #2136	@ 0x858
 800a49a:	f6a2 0254 	subw	r2, r2, #2132	@ 0x854
 800a49e:	6812      	ldr	r2, [r2, #0]
 800a4a0:	4413      	add	r3, r2
 800a4a2:	681b      	ldr	r3, [r3, #0]
 800a4a4:	f8d7 2840 	ldr.w	r2, [r7, #2112]	@ 0x840
 800a4a8:	429a      	cmp	r2, r3
 800a4aa:	db0f      	blt.n	800a4cc <jpeg_gen_optimal_table+0xf0>
	v = freq[i];
 800a4ac:	f8d7 3848 	ldr.w	r3, [r7, #2120]	@ 0x848
 800a4b0:	009b      	lsls	r3, r3, #2
 800a4b2:	f607 0258 	addw	r2, r7, #2136	@ 0x858
 800a4b6:	f6a2 0254 	subw	r2, r2, #2132	@ 0x854
 800a4ba:	6812      	ldr	r2, [r2, #0]
 800a4bc:	4413      	add	r3, r2
 800a4be:	681b      	ldr	r3, [r3, #0]
 800a4c0:	f8c7 3840 	str.w	r3, [r7, #2112]	@ 0x840
	c1 = i;
 800a4c4:	f8d7 3848 	ldr.w	r3, [r7, #2120]	@ 0x848
 800a4c8:	f8c7 3854 	str.w	r3, [r7, #2132]	@ 0x854
    for (i = 0; i <= 256; i++) {
 800a4cc:	f8d7 3848 	ldr.w	r3, [r7, #2120]	@ 0x848
 800a4d0:	3301      	adds	r3, #1
 800a4d2:	f8c7 3848 	str.w	r3, [r7, #2120]	@ 0x848
 800a4d6:	f8d7 3848 	ldr.w	r3, [r7, #2120]	@ 0x848
 800a4da:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800a4de:	ddcb      	ble.n	800a478 <jpeg_gen_optimal_table+0x9c>
      }
    }

    /* Find the next smallest nonzero frequency, set c2 = its symbol */
    /* In case of ties, take the larger symbol number */
    c2 = -1;
 800a4e0:	f04f 33ff 	mov.w	r3, #4294967295
 800a4e4:	f8c7 3850 	str.w	r3, [r7, #2128]	@ 0x850
    v = 1000000000L;
 800a4e8:	4b9f      	ldr	r3, [pc, #636]	@ (800a768 <jpeg_gen_optimal_table+0x38c>)
 800a4ea:	f8c7 3840 	str.w	r3, [r7, #2112]	@ 0x840
    for (i = 0; i <= 256; i++) {
 800a4ee:	2300      	movs	r3, #0
 800a4f0:	f8c7 3848 	str.w	r3, [r7, #2120]	@ 0x848
 800a4f4:	e034      	b.n	800a560 <jpeg_gen_optimal_table+0x184>
      if (freq[i] && freq[i] <= v && i != c1) {
 800a4f6:	f8d7 3848 	ldr.w	r3, [r7, #2120]	@ 0x848
 800a4fa:	009b      	lsls	r3, r3, #2
 800a4fc:	f607 0258 	addw	r2, r7, #2136	@ 0x858
 800a500:	f6a2 0254 	subw	r2, r2, #2132	@ 0x854
 800a504:	6812      	ldr	r2, [r2, #0]
 800a506:	4413      	add	r3, r2
 800a508:	681b      	ldr	r3, [r3, #0]
 800a50a:	2b00      	cmp	r3, #0
 800a50c:	d023      	beq.n	800a556 <jpeg_gen_optimal_table+0x17a>
 800a50e:	f8d7 3848 	ldr.w	r3, [r7, #2120]	@ 0x848
 800a512:	009b      	lsls	r3, r3, #2
 800a514:	f607 0258 	addw	r2, r7, #2136	@ 0x858
 800a518:	f6a2 0254 	subw	r2, r2, #2132	@ 0x854
 800a51c:	6812      	ldr	r2, [r2, #0]
 800a51e:	4413      	add	r3, r2
 800a520:	681b      	ldr	r3, [r3, #0]
 800a522:	f8d7 2840 	ldr.w	r2, [r7, #2112]	@ 0x840
 800a526:	429a      	cmp	r2, r3
 800a528:	db15      	blt.n	800a556 <jpeg_gen_optimal_table+0x17a>
 800a52a:	f8d7 2848 	ldr.w	r2, [r7, #2120]	@ 0x848
 800a52e:	f8d7 3854 	ldr.w	r3, [r7, #2132]	@ 0x854
 800a532:	429a      	cmp	r2, r3
 800a534:	d00f      	beq.n	800a556 <jpeg_gen_optimal_table+0x17a>
	v = freq[i];
 800a536:	f8d7 3848 	ldr.w	r3, [r7, #2120]	@ 0x848
 800a53a:	009b      	lsls	r3, r3, #2
 800a53c:	f607 0258 	addw	r2, r7, #2136	@ 0x858
 800a540:	f6a2 0254 	subw	r2, r2, #2132	@ 0x854
 800a544:	6812      	ldr	r2, [r2, #0]
 800a546:	4413      	add	r3, r2
 800a548:	681b      	ldr	r3, [r3, #0]
 800a54a:	f8c7 3840 	str.w	r3, [r7, #2112]	@ 0x840
	c2 = i;
 800a54e:	f8d7 3848 	ldr.w	r3, [r7, #2120]	@ 0x848
 800a552:	f8c7 3850 	str.w	r3, [r7, #2128]	@ 0x850
    for (i = 0; i <= 256; i++) {
 800a556:	f8d7 3848 	ldr.w	r3, [r7, #2120]	@ 0x848
 800a55a:	3301      	adds	r3, #1
 800a55c:	f8c7 3848 	str.w	r3, [r7, #2120]	@ 0x848
 800a560:	f8d7 3848 	ldr.w	r3, [r7, #2120]	@ 0x848
 800a564:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800a568:	ddc5      	ble.n	800a4f6 <jpeg_gen_optimal_table+0x11a>
      }
    }

    /* Done if we've merged everything into one frequency */
    if (c2 < 0)
 800a56a:	f8d7 3850 	ldr.w	r3, [r7, #2128]	@ 0x850
 800a56e:	2b00      	cmp	r3, #0
 800a570:	f2c0 80a3 	blt.w	800a6ba <jpeg_gen_optimal_table+0x2de>
      break;
    
    /* Else merge the two counts/trees */
    freq[c1] += freq[c2];
 800a574:	f8d7 3854 	ldr.w	r3, [r7, #2132]	@ 0x854
 800a578:	009b      	lsls	r3, r3, #2
 800a57a:	f607 0258 	addw	r2, r7, #2136	@ 0x858
 800a57e:	f6a2 0254 	subw	r2, r2, #2132	@ 0x854
 800a582:	6812      	ldr	r2, [r2, #0]
 800a584:	4413      	add	r3, r2
 800a586:	6819      	ldr	r1, [r3, #0]
 800a588:	f8d7 3850 	ldr.w	r3, [r7, #2128]	@ 0x850
 800a58c:	009b      	lsls	r3, r3, #2
 800a58e:	f607 0258 	addw	r2, r7, #2136	@ 0x858
 800a592:	f6a2 0254 	subw	r2, r2, #2132	@ 0x854
 800a596:	6812      	ldr	r2, [r2, #0]
 800a598:	4413      	add	r3, r2
 800a59a:	681a      	ldr	r2, [r3, #0]
 800a59c:	f8d7 3854 	ldr.w	r3, [r7, #2132]	@ 0x854
 800a5a0:	009b      	lsls	r3, r3, #2
 800a5a2:	f607 0058 	addw	r0, r7, #2136	@ 0x858
 800a5a6:	f6a0 0054 	subw	r0, r0, #2132	@ 0x854
 800a5aa:	6800      	ldr	r0, [r0, #0]
 800a5ac:	4403      	add	r3, r0
 800a5ae:	440a      	add	r2, r1
 800a5b0:	601a      	str	r2, [r3, #0]
    freq[c2] = 0;
 800a5b2:	f8d7 3850 	ldr.w	r3, [r7, #2128]	@ 0x850
 800a5b6:	009b      	lsls	r3, r3, #2
 800a5b8:	f607 0258 	addw	r2, r7, #2136	@ 0x858
 800a5bc:	f6a2 0254 	subw	r2, r2, #2132	@ 0x854
 800a5c0:	6812      	ldr	r2, [r2, #0]
 800a5c2:	4413      	add	r3, r2
 800a5c4:	2200      	movs	r2, #0
 800a5c6:	601a      	str	r2, [r3, #0]

    /* Increment the codesize of everything in c1's tree branch */
    codesize[c1]++;
 800a5c8:	f607 0358 	addw	r3, r7, #2136	@ 0x858
 800a5cc:	f5a3 6388 	sub.w	r3, r3, #1088	@ 0x440
 800a5d0:	f8d7 2854 	ldr.w	r2, [r7, #2132]	@ 0x854
 800a5d4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a5d8:	1c59      	adds	r1, r3, #1
 800a5da:	f607 0358 	addw	r3, r7, #2136	@ 0x858
 800a5de:	f5a3 6388 	sub.w	r3, r3, #1088	@ 0x440
 800a5e2:	f8d7 2854 	ldr.w	r2, [r7, #2132]	@ 0x854
 800a5e6:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    while (others[c1] >= 0) {
 800a5ea:	e01a      	b.n	800a622 <jpeg_gen_optimal_table+0x246>
      c1 = others[c1];
 800a5ec:	f607 0358 	addw	r3, r7, #2136	@ 0x858
 800a5f0:	f6a3 0344 	subw	r3, r3, #2116	@ 0x844
 800a5f4:	f8d7 2854 	ldr.w	r2, [r7, #2132]	@ 0x854
 800a5f8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a5fc:	f8c7 3854 	str.w	r3, [r7, #2132]	@ 0x854
      codesize[c1]++;
 800a600:	f607 0358 	addw	r3, r7, #2136	@ 0x858
 800a604:	f5a3 6388 	sub.w	r3, r3, #1088	@ 0x440
 800a608:	f8d7 2854 	ldr.w	r2, [r7, #2132]	@ 0x854
 800a60c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a610:	1c59      	adds	r1, r3, #1
 800a612:	f607 0358 	addw	r3, r7, #2136	@ 0x858
 800a616:	f5a3 6388 	sub.w	r3, r3, #1088	@ 0x440
 800a61a:	f8d7 2854 	ldr.w	r2, [r7, #2132]	@ 0x854
 800a61e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    while (others[c1] >= 0) {
 800a622:	f607 0358 	addw	r3, r7, #2136	@ 0x858
 800a626:	f6a3 0344 	subw	r3, r3, #2116	@ 0x844
 800a62a:	f8d7 2854 	ldr.w	r2, [r7, #2132]	@ 0x854
 800a62e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a632:	2b00      	cmp	r3, #0
 800a634:	dada      	bge.n	800a5ec <jpeg_gen_optimal_table+0x210>
    }
    
    others[c1] = c2;		/* chain c2 onto c1's tree branch */
 800a636:	f607 0358 	addw	r3, r7, #2136	@ 0x858
 800a63a:	f6a3 0344 	subw	r3, r3, #2116	@ 0x844
 800a63e:	f8d7 2854 	ldr.w	r2, [r7, #2132]	@ 0x854
 800a642:	f8d7 1850 	ldr.w	r1, [r7, #2128]	@ 0x850
 800a646:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    
    /* Increment the codesize of everything in c2's tree branch */
    codesize[c2]++;
 800a64a:	f607 0358 	addw	r3, r7, #2136	@ 0x858
 800a64e:	f5a3 6388 	sub.w	r3, r3, #1088	@ 0x440
 800a652:	f8d7 2850 	ldr.w	r2, [r7, #2128]	@ 0x850
 800a656:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a65a:	1c59      	adds	r1, r3, #1
 800a65c:	f607 0358 	addw	r3, r7, #2136	@ 0x858
 800a660:	f5a3 6388 	sub.w	r3, r3, #1088	@ 0x440
 800a664:	f8d7 2850 	ldr.w	r2, [r7, #2128]	@ 0x850
 800a668:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    while (others[c2] >= 0) {
 800a66c:	e01a      	b.n	800a6a4 <jpeg_gen_optimal_table+0x2c8>
      c2 = others[c2];
 800a66e:	f607 0358 	addw	r3, r7, #2136	@ 0x858
 800a672:	f6a3 0344 	subw	r3, r3, #2116	@ 0x844
 800a676:	f8d7 2850 	ldr.w	r2, [r7, #2128]	@ 0x850
 800a67a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a67e:	f8c7 3850 	str.w	r3, [r7, #2128]	@ 0x850
      codesize[c2]++;
 800a682:	f607 0358 	addw	r3, r7, #2136	@ 0x858
 800a686:	f5a3 6388 	sub.w	r3, r3, #1088	@ 0x440
 800a68a:	f8d7 2850 	ldr.w	r2, [r7, #2128]	@ 0x850
 800a68e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a692:	1c59      	adds	r1, r3, #1
 800a694:	f607 0358 	addw	r3, r7, #2136	@ 0x858
 800a698:	f5a3 6388 	sub.w	r3, r3, #1088	@ 0x440
 800a69c:	f8d7 2850 	ldr.w	r2, [r7, #2128]	@ 0x850
 800a6a0:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    while (others[c2] >= 0) {
 800a6a4:	f607 0358 	addw	r3, r7, #2136	@ 0x858
 800a6a8:	f6a3 0344 	subw	r3, r3, #2116	@ 0x844
 800a6ac:	f8d7 2850 	ldr.w	r2, [r7, #2128]	@ 0x850
 800a6b0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a6b4:	2b00      	cmp	r3, #0
 800a6b6:	dada      	bge.n	800a66e <jpeg_gen_optimal_table+0x292>
    c1 = -1;
 800a6b8:	e6d3      	b.n	800a462 <jpeg_gen_optimal_table+0x86>
      break;
 800a6ba:	bf00      	nop
    }
  }

  /* Now count the number of symbols of each code length */
  for (i = 0; i <= 256; i++) {
 800a6bc:	2300      	movs	r3, #0
 800a6be:	f8c7 3848 	str.w	r3, [r7, #2120]	@ 0x848
 800a6c2:	e041      	b.n	800a748 <jpeg_gen_optimal_table+0x36c>
    if (codesize[i]) {
 800a6c4:	f607 0358 	addw	r3, r7, #2136	@ 0x858
 800a6c8:	f5a3 6388 	sub.w	r3, r3, #1088	@ 0x440
 800a6cc:	f8d7 2848 	ldr.w	r2, [r7, #2120]	@ 0x848
 800a6d0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a6d4:	2b00      	cmp	r3, #0
 800a6d6:	d032      	beq.n	800a73e <jpeg_gen_optimal_table+0x362>
      /* The JPEG standard seems to think that this can't happen, */
      /* but I'm paranoid... */
      if (codesize[i] > MAX_CLEN)
 800a6d8:	f607 0358 	addw	r3, r7, #2136	@ 0x858
 800a6dc:	f5a3 6388 	sub.w	r3, r3, #1088	@ 0x440
 800a6e0:	f8d7 2848 	ldr.w	r2, [r7, #2120]	@ 0x848
 800a6e4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a6e8:	2b20      	cmp	r3, #32
 800a6ea:	dd14      	ble.n	800a716 <jpeg_gen_optimal_table+0x33a>
	ERREXIT(cinfo, JERR_HUFF_CLEN_OVERFLOW);
 800a6ec:	f607 0358 	addw	r3, r7, #2136	@ 0x858
 800a6f0:	f6a3 034c 	subw	r3, r3, #2124	@ 0x84c
 800a6f4:	681b      	ldr	r3, [r3, #0]
 800a6f6:	681b      	ldr	r3, [r3, #0]
 800a6f8:	2228      	movs	r2, #40	@ 0x28
 800a6fa:	615a      	str	r2, [r3, #20]
 800a6fc:	f607 0358 	addw	r3, r7, #2136	@ 0x858
 800a700:	f6a3 034c 	subw	r3, r3, #2124	@ 0x84c
 800a704:	681b      	ldr	r3, [r3, #0]
 800a706:	681b      	ldr	r3, [r3, #0]
 800a708:	681b      	ldr	r3, [r3, #0]
 800a70a:	f607 0258 	addw	r2, r7, #2136	@ 0x858
 800a70e:	f6a2 024c 	subw	r2, r2, #2124	@ 0x84c
 800a712:	6810      	ldr	r0, [r2, #0]
 800a714:	4798      	blx	r3

      bits[codesize[i]]++;
 800a716:	f607 0358 	addw	r3, r7, #2136	@ 0x858
 800a71a:	f5a3 6388 	sub.w	r3, r3, #1088	@ 0x440
 800a71e:	f8d7 2848 	ldr.w	r2, [r7, #2120]	@ 0x848
 800a722:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a726:	f603 0258 	addw	r2, r3, #2136	@ 0x858
 800a72a:	443a      	add	r2, r7
 800a72c:	f812 2c3c 	ldrb.w	r2, [r2, #-60]
 800a730:	3201      	adds	r2, #1
 800a732:	b2d2      	uxtb	r2, r2
 800a734:	f603 0358 	addw	r3, r3, #2136	@ 0x858
 800a738:	443b      	add	r3, r7
 800a73a:	f803 2c3c 	strb.w	r2, [r3, #-60]
  for (i = 0; i <= 256; i++) {
 800a73e:	f8d7 3848 	ldr.w	r3, [r7, #2120]	@ 0x848
 800a742:	3301      	adds	r3, #1
 800a744:	f8c7 3848 	str.w	r3, [r7, #2120]	@ 0x848
 800a748:	f8d7 3848 	ldr.w	r3, [r7, #2120]	@ 0x848
 800a74c:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800a750:	ddb8      	ble.n	800a6c4 <jpeg_gen_optimal_table+0x2e8>
   * skipping the BITS entry for that prefix length, a code word from the next
   * shortest nonzero BITS entry is converted into a prefix for two code words
   * one bit longer.
   */
  
  for (i = MAX_CLEN; i > 16; i--) {
 800a752:	2320      	movs	r3, #32
 800a754:	f8c7 3848 	str.w	r3, [r7, #2120]	@ 0x848
 800a758:	e061      	b.n	800a81e <jpeg_gen_optimal_table+0x442>
    while (bits[i] > 0) {
      j = i - 2;		/* find length of new prefix to be used */
 800a75a:	f8d7 3848 	ldr.w	r3, [r7, #2120]	@ 0x848
 800a75e:	3b02      	subs	r3, #2
 800a760:	f8c7 3844 	str.w	r3, [r7, #2116]	@ 0x844
      while (bits[j] == 0)
 800a764:	e007      	b.n	800a776 <jpeg_gen_optimal_table+0x39a>
 800a766:	bf00      	nop
 800a768:	3b9aca00 	.word	0x3b9aca00
	j--;
 800a76c:	f8d7 3844 	ldr.w	r3, [r7, #2116]	@ 0x844
 800a770:	3b01      	subs	r3, #1
 800a772:	f8c7 3844 	str.w	r3, [r7, #2116]	@ 0x844
      while (bits[j] == 0)
 800a776:	f607 021c 	addw	r2, r7, #2076	@ 0x81c
 800a77a:	f8d7 3844 	ldr.w	r3, [r7, #2116]	@ 0x844
 800a77e:	4413      	add	r3, r2
 800a780:	781b      	ldrb	r3, [r3, #0]
 800a782:	2b00      	cmp	r3, #0
 800a784:	d0f2      	beq.n	800a76c <jpeg_gen_optimal_table+0x390>
      
      bits[i] -= 2;		/* remove two symbols */
 800a786:	f607 021c 	addw	r2, r7, #2076	@ 0x81c
 800a78a:	f8d7 3848 	ldr.w	r3, [r7, #2120]	@ 0x848
 800a78e:	4413      	add	r3, r2
 800a790:	781b      	ldrb	r3, [r3, #0]
 800a792:	3b02      	subs	r3, #2
 800a794:	b2d9      	uxtb	r1, r3
 800a796:	f607 021c 	addw	r2, r7, #2076	@ 0x81c
 800a79a:	f8d7 3848 	ldr.w	r3, [r7, #2120]	@ 0x848
 800a79e:	4413      	add	r3, r2
 800a7a0:	460a      	mov	r2, r1
 800a7a2:	701a      	strb	r2, [r3, #0]
      bits[i-1]++;		/* one goes in this length */
 800a7a4:	f8d7 3848 	ldr.w	r3, [r7, #2120]	@ 0x848
 800a7a8:	3b01      	subs	r3, #1
 800a7aa:	f603 0258 	addw	r2, r3, #2136	@ 0x858
 800a7ae:	443a      	add	r2, r7
 800a7b0:	f812 2c3c 	ldrb.w	r2, [r2, #-60]
 800a7b4:	3201      	adds	r2, #1
 800a7b6:	b2d2      	uxtb	r2, r2
 800a7b8:	f603 0358 	addw	r3, r3, #2136	@ 0x858
 800a7bc:	443b      	add	r3, r7
 800a7be:	f803 2c3c 	strb.w	r2, [r3, #-60]
      bits[j+1] += 2;		/* two new symbols in this length */
 800a7c2:	f8d7 3844 	ldr.w	r3, [r7, #2116]	@ 0x844
 800a7c6:	3301      	adds	r3, #1
 800a7c8:	f603 0358 	addw	r3, r3, #2136	@ 0x858
 800a7cc:	443b      	add	r3, r7
 800a7ce:	f813 2c3c 	ldrb.w	r2, [r3, #-60]
 800a7d2:	f8d7 3844 	ldr.w	r3, [r7, #2116]	@ 0x844
 800a7d6:	3301      	adds	r3, #1
 800a7d8:	3202      	adds	r2, #2
 800a7da:	b2d2      	uxtb	r2, r2
 800a7dc:	f603 0358 	addw	r3, r3, #2136	@ 0x858
 800a7e0:	443b      	add	r3, r7
 800a7e2:	f803 2c3c 	strb.w	r2, [r3, #-60]
      bits[j]--;		/* symbol of this length is now a prefix */
 800a7e6:	f607 021c 	addw	r2, r7, #2076	@ 0x81c
 800a7ea:	f8d7 3844 	ldr.w	r3, [r7, #2116]	@ 0x844
 800a7ee:	4413      	add	r3, r2
 800a7f0:	781b      	ldrb	r3, [r3, #0]
 800a7f2:	3b01      	subs	r3, #1
 800a7f4:	b2d9      	uxtb	r1, r3
 800a7f6:	f607 021c 	addw	r2, r7, #2076	@ 0x81c
 800a7fa:	f8d7 3844 	ldr.w	r3, [r7, #2116]	@ 0x844
 800a7fe:	4413      	add	r3, r2
 800a800:	460a      	mov	r2, r1
 800a802:	701a      	strb	r2, [r3, #0]
    while (bits[i] > 0) {
 800a804:	f607 021c 	addw	r2, r7, #2076	@ 0x81c
 800a808:	f8d7 3848 	ldr.w	r3, [r7, #2120]	@ 0x848
 800a80c:	4413      	add	r3, r2
 800a80e:	781b      	ldrb	r3, [r3, #0]
 800a810:	2b00      	cmp	r3, #0
 800a812:	d1a2      	bne.n	800a75a <jpeg_gen_optimal_table+0x37e>
  for (i = MAX_CLEN; i > 16; i--) {
 800a814:	f8d7 3848 	ldr.w	r3, [r7, #2120]	@ 0x848
 800a818:	3b01      	subs	r3, #1
 800a81a:	f8c7 3848 	str.w	r3, [r7, #2120]	@ 0x848
 800a81e:	f8d7 3848 	ldr.w	r3, [r7, #2120]	@ 0x848
 800a822:	2b10      	cmp	r3, #16
 800a824:	dcee      	bgt.n	800a804 <jpeg_gen_optimal_table+0x428>
    }
  }

  /* Remove the count for the pseudo-symbol 256 from the largest codelength */
  while (bits[i] == 0)		/* find largest codelength still in use */
 800a826:	e004      	b.n	800a832 <jpeg_gen_optimal_table+0x456>
    i--;
 800a828:	f8d7 3848 	ldr.w	r3, [r7, #2120]	@ 0x848
 800a82c:	3b01      	subs	r3, #1
 800a82e:	f8c7 3848 	str.w	r3, [r7, #2120]	@ 0x848
  while (bits[i] == 0)		/* find largest codelength still in use */
 800a832:	f607 021c 	addw	r2, r7, #2076	@ 0x81c
 800a836:	f8d7 3848 	ldr.w	r3, [r7, #2120]	@ 0x848
 800a83a:	4413      	add	r3, r2
 800a83c:	781b      	ldrb	r3, [r3, #0]
 800a83e:	2b00      	cmp	r3, #0
 800a840:	d0f2      	beq.n	800a828 <jpeg_gen_optimal_table+0x44c>
  bits[i]--;
 800a842:	f607 021c 	addw	r2, r7, #2076	@ 0x81c
 800a846:	f8d7 3848 	ldr.w	r3, [r7, #2120]	@ 0x848
 800a84a:	4413      	add	r3, r2
 800a84c:	781b      	ldrb	r3, [r3, #0]
 800a84e:	3b01      	subs	r3, #1
 800a850:	b2d9      	uxtb	r1, r3
 800a852:	f607 021c 	addw	r2, r7, #2076	@ 0x81c
 800a856:	f8d7 3848 	ldr.w	r3, [r7, #2120]	@ 0x848
 800a85a:	4413      	add	r3, r2
 800a85c:	460a      	mov	r2, r1
 800a85e:	701a      	strb	r2, [r3, #0]
  
  /* Return final symbol counts (only for lengths 0..16) */
  MEMCOPY(htbl->bits, bits, SIZEOF(htbl->bits));
 800a860:	f607 0358 	addw	r3, r7, #2136	@ 0x858
 800a864:	f5a3 6305 	sub.w	r3, r3, #2128	@ 0x850
 800a868:	681b      	ldr	r3, [r3, #0]
 800a86a:	f607 011c 	addw	r1, r7, #2076	@ 0x81c
 800a86e:	2211      	movs	r2, #17
 800a870:	4618      	mov	r0, r3
 800a872:	f00f f901 	bl	8019a78 <memcpy>
  
  /* Return a list of the symbols sorted by code length */
  /* It's not real clear to me why we don't need to consider the codelength
   * changes made above, but the JPEG spec seems to think this works.
   */
  p = 0;
 800a876:	2300      	movs	r3, #0
 800a878:	f8c7 384c 	str.w	r3, [r7, #2124]	@ 0x84c
  for (i = 1; i <= MAX_CLEN; i++) {
 800a87c:	2301      	movs	r3, #1
 800a87e:	f8c7 3848 	str.w	r3, [r7, #2120]	@ 0x848
 800a882:	e030      	b.n	800a8e6 <jpeg_gen_optimal_table+0x50a>
    for (j = 0; j <= 255; j++) {
 800a884:	2300      	movs	r3, #0
 800a886:	f8c7 3844 	str.w	r3, [r7, #2116]	@ 0x844
 800a88a:	e023      	b.n	800a8d4 <jpeg_gen_optimal_table+0x4f8>
      if (codesize[j] == i) {
 800a88c:	f607 0358 	addw	r3, r7, #2136	@ 0x858
 800a890:	f5a3 6388 	sub.w	r3, r3, #1088	@ 0x440
 800a894:	f8d7 2844 	ldr.w	r2, [r7, #2116]	@ 0x844
 800a898:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a89c:	f8d7 2848 	ldr.w	r2, [r7, #2120]	@ 0x848
 800a8a0:	429a      	cmp	r2, r3
 800a8a2:	d112      	bne.n	800a8ca <jpeg_gen_optimal_table+0x4ee>
	htbl->huffval[p] = (UINT8) j;
 800a8a4:	f8d7 3844 	ldr.w	r3, [r7, #2116]	@ 0x844
 800a8a8:	b2d9      	uxtb	r1, r3
 800a8aa:	f607 0358 	addw	r3, r7, #2136	@ 0x858
 800a8ae:	f5a3 6305 	sub.w	r3, r3, #2128	@ 0x850
 800a8b2:	681a      	ldr	r2, [r3, #0]
 800a8b4:	f8d7 384c 	ldr.w	r3, [r7, #2124]	@ 0x84c
 800a8b8:	4413      	add	r3, r2
 800a8ba:	3311      	adds	r3, #17
 800a8bc:	460a      	mov	r2, r1
 800a8be:	701a      	strb	r2, [r3, #0]
	p++;
 800a8c0:	f8d7 384c 	ldr.w	r3, [r7, #2124]	@ 0x84c
 800a8c4:	3301      	adds	r3, #1
 800a8c6:	f8c7 384c 	str.w	r3, [r7, #2124]	@ 0x84c
    for (j = 0; j <= 255; j++) {
 800a8ca:	f8d7 3844 	ldr.w	r3, [r7, #2116]	@ 0x844
 800a8ce:	3301      	adds	r3, #1
 800a8d0:	f8c7 3844 	str.w	r3, [r7, #2116]	@ 0x844
 800a8d4:	f8d7 3844 	ldr.w	r3, [r7, #2116]	@ 0x844
 800a8d8:	2bff      	cmp	r3, #255	@ 0xff
 800a8da:	ddd7      	ble.n	800a88c <jpeg_gen_optimal_table+0x4b0>
  for (i = 1; i <= MAX_CLEN; i++) {
 800a8dc:	f8d7 3848 	ldr.w	r3, [r7, #2120]	@ 0x848
 800a8e0:	3301      	adds	r3, #1
 800a8e2:	f8c7 3848 	str.w	r3, [r7, #2120]	@ 0x848
 800a8e6:	f8d7 3848 	ldr.w	r3, [r7, #2120]	@ 0x848
 800a8ea:	2b20      	cmp	r3, #32
 800a8ec:	ddca      	ble.n	800a884 <jpeg_gen_optimal_table+0x4a8>
      }
    }
  }

  /* Set sent_table FALSE so updated table will be written to JPEG file. */
  htbl->sent_table = FALSE;
 800a8ee:	f607 0358 	addw	r3, r7, #2136	@ 0x858
 800a8f2:	f5a3 6305 	sub.w	r3, r3, #2128	@ 0x850
 800a8f6:	681b      	ldr	r3, [r3, #0]
 800a8f8:	2200      	movs	r2, #0
 800a8fa:	f8c3 2114 	str.w	r2, [r3, #276]	@ 0x114
}
 800a8fe:	bf00      	nop
 800a900:	f607 0758 	addw	r7, r7, #2136	@ 0x858
 800a904:	46bd      	mov	sp, r7
 800a906:	bd80      	pop	{r7, pc}

0800a908 <finish_pass_gather>:
 * Finish up a statistics-gathering pass and create the new Huffman tables.
 */

METHODDEF(void)
finish_pass_gather (j_compress_ptr cinfo)
{
 800a908:	b580      	push	{r7, lr}
 800a90a:	b090      	sub	sp, #64	@ 0x40
 800a90c:	af00      	add	r7, sp, #0
 800a90e:	6078      	str	r0, [r7, #4]
  huff_entropy_ptr entropy = (huff_entropy_ptr) cinfo->entropy;
 800a910:	687b      	ldr	r3, [r7, #4]
 800a912:	f8d3 31a4 	ldr.w	r3, [r3, #420]	@ 0x1a4
 800a916:	63bb      	str	r3, [r7, #56]	@ 0x38
  boolean did_ac[NUM_HUFF_TBLS];

  /* It's important not to apply jpeg_gen_optimal_table more than once
   * per table, because it clobbers the input frequency counts!
   */
  if (cinfo->progressive_mode)
 800a918:	687b      	ldr	r3, [r7, #4]
 800a91a:	f8d3 3108 	ldr.w	r3, [r3, #264]	@ 0x108
 800a91e:	2b00      	cmp	r3, #0
 800a920:	d002      	beq.n	800a928 <finish_pass_gather+0x20>
    /* Flush out buffered data (all we care about is counting the EOB symbol) */
    emit_eobrun(entropy);
 800a922:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 800a924:	f7fe fdfe 	bl	8009524 <emit_eobrun>

  MEMZERO(did_dc, SIZEOF(did_dc));
 800a928:	f107 031c 	add.w	r3, r7, #28
 800a92c:	2210      	movs	r2, #16
 800a92e:	2100      	movs	r1, #0
 800a930:	4618      	mov	r0, r3
 800a932:	f00f f85d 	bl	80199f0 <memset>
  MEMZERO(did_ac, SIZEOF(did_ac));
 800a936:	f107 030c 	add.w	r3, r7, #12
 800a93a:	2210      	movs	r2, #16
 800a93c:	2100      	movs	r1, #0
 800a93e:	4618      	mov	r0, r3
 800a940:	f00f f856 	bl	80199f0 <memset>

  for (ci = 0; ci < cinfo->comps_in_scan; ci++) {
 800a944:	2300      	movs	r3, #0
 800a946:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800a948:	e074      	b.n	800aa34 <finish_pass_gather+0x12c>
    compptr = cinfo->cur_comp_info[ci];
 800a94a:	687a      	ldr	r2, [r7, #4]
 800a94c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800a94e:	3348      	adds	r3, #72	@ 0x48
 800a950:	009b      	lsls	r3, r3, #2
 800a952:	4413      	add	r3, r2
 800a954:	685b      	ldr	r3, [r3, #4]
 800a956:	637b      	str	r3, [r7, #52]	@ 0x34
    /* DC needs no table for refinement scan */
    if (cinfo->Ss == 0 && cinfo->Ah == 0) {
 800a958:	687b      	ldr	r3, [r7, #4]
 800a95a:	f8d3 3168 	ldr.w	r3, [r3, #360]	@ 0x168
 800a95e:	2b00      	cmp	r3, #0
 800a960:	d132      	bne.n	800a9c8 <finish_pass_gather+0xc0>
 800a962:	687b      	ldr	r3, [r7, #4]
 800a964:	f8d3 3170 	ldr.w	r3, [r3, #368]	@ 0x170
 800a968:	2b00      	cmp	r3, #0
 800a96a:	d12d      	bne.n	800a9c8 <finish_pass_gather+0xc0>
      tbl = compptr->dc_tbl_no;
 800a96c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800a96e:	695b      	ldr	r3, [r3, #20]
 800a970:	633b      	str	r3, [r7, #48]	@ 0x30
      if (! did_dc[tbl]) {
 800a972:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a974:	009b      	lsls	r3, r3, #2
 800a976:	3340      	adds	r3, #64	@ 0x40
 800a978:	443b      	add	r3, r7
 800a97a:	f853 3c24 	ldr.w	r3, [r3, #-36]
 800a97e:	2b00      	cmp	r3, #0
 800a980:	d122      	bne.n	800a9c8 <finish_pass_gather+0xc0>
	htblptr = & cinfo->dc_huff_tbl_ptrs[tbl];
 800a982:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a984:	331e      	adds	r3, #30
 800a986:	009b      	lsls	r3, r3, #2
 800a988:	687a      	ldr	r2, [r7, #4]
 800a98a:	4413      	add	r3, r2
 800a98c:	62fb      	str	r3, [r7, #44]	@ 0x2c
	if (*htblptr == NULL)
 800a98e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800a990:	681b      	ldr	r3, [r3, #0]
 800a992:	2b00      	cmp	r3, #0
 800a994:	d105      	bne.n	800a9a2 <finish_pass_gather+0x9a>
	  *htblptr = jpeg_alloc_huff_table((j_common_ptr) cinfo);
 800a996:	6878      	ldr	r0, [r7, #4]
 800a998:	f002 fea1 	bl	800d6de <jpeg_alloc_huff_table>
 800a99c:	4602      	mov	r2, r0
 800a99e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800a9a0:	601a      	str	r2, [r3, #0]
	jpeg_gen_optimal_table(cinfo, *htblptr, entropy->dc_count_ptrs[tbl]);
 800a9a2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800a9a4:	6819      	ldr	r1, [r3, #0]
 800a9a6:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800a9a8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a9aa:	3312      	adds	r3, #18
 800a9ac:	009b      	lsls	r3, r3, #2
 800a9ae:	4413      	add	r3, r2
 800a9b0:	685b      	ldr	r3, [r3, #4]
 800a9b2:	461a      	mov	r2, r3
 800a9b4:	6878      	ldr	r0, [r7, #4]
 800a9b6:	f7ff fd11 	bl	800a3dc <jpeg_gen_optimal_table>
	did_dc[tbl] = TRUE;
 800a9ba:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a9bc:	009b      	lsls	r3, r3, #2
 800a9be:	3340      	adds	r3, #64	@ 0x40
 800a9c0:	443b      	add	r3, r7
 800a9c2:	2201      	movs	r2, #1
 800a9c4:	f843 2c24 	str.w	r2, [r3, #-36]
      }
    }
    /* AC needs no table when not present */
    if (cinfo->Se) {
 800a9c8:	687b      	ldr	r3, [r7, #4]
 800a9ca:	f8d3 316c 	ldr.w	r3, [r3, #364]	@ 0x16c
 800a9ce:	2b00      	cmp	r3, #0
 800a9d0:	d02d      	beq.n	800aa2e <finish_pass_gather+0x126>
      tbl = compptr->ac_tbl_no;
 800a9d2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800a9d4:	699b      	ldr	r3, [r3, #24]
 800a9d6:	633b      	str	r3, [r7, #48]	@ 0x30
      if (! did_ac[tbl]) {
 800a9d8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a9da:	009b      	lsls	r3, r3, #2
 800a9dc:	3340      	adds	r3, #64	@ 0x40
 800a9de:	443b      	add	r3, r7
 800a9e0:	f853 3c34 	ldr.w	r3, [r3, #-52]
 800a9e4:	2b00      	cmp	r3, #0
 800a9e6:	d122      	bne.n	800aa2e <finish_pass_gather+0x126>
	htblptr = & cinfo->ac_huff_tbl_ptrs[tbl];
 800a9e8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a9ea:	3322      	adds	r3, #34	@ 0x22
 800a9ec:	009b      	lsls	r3, r3, #2
 800a9ee:	687a      	ldr	r2, [r7, #4]
 800a9f0:	4413      	add	r3, r2
 800a9f2:	62fb      	str	r3, [r7, #44]	@ 0x2c
	if (*htblptr == NULL)
 800a9f4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800a9f6:	681b      	ldr	r3, [r3, #0]
 800a9f8:	2b00      	cmp	r3, #0
 800a9fa:	d105      	bne.n	800aa08 <finish_pass_gather+0x100>
	  *htblptr = jpeg_alloc_huff_table((j_common_ptr) cinfo);
 800a9fc:	6878      	ldr	r0, [r7, #4]
 800a9fe:	f002 fe6e 	bl	800d6de <jpeg_alloc_huff_table>
 800aa02:	4602      	mov	r2, r0
 800aa04:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800aa06:	601a      	str	r2, [r3, #0]
	jpeg_gen_optimal_table(cinfo, *htblptr, entropy->ac_count_ptrs[tbl]);
 800aa08:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800aa0a:	6819      	ldr	r1, [r3, #0]
 800aa0c:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800aa0e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800aa10:	3316      	adds	r3, #22
 800aa12:	009b      	lsls	r3, r3, #2
 800aa14:	4413      	add	r3, r2
 800aa16:	685b      	ldr	r3, [r3, #4]
 800aa18:	461a      	mov	r2, r3
 800aa1a:	6878      	ldr	r0, [r7, #4]
 800aa1c:	f7ff fcde 	bl	800a3dc <jpeg_gen_optimal_table>
	did_ac[tbl] = TRUE;
 800aa20:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800aa22:	009b      	lsls	r3, r3, #2
 800aa24:	3340      	adds	r3, #64	@ 0x40
 800aa26:	443b      	add	r3, r7
 800aa28:	2201      	movs	r2, #1
 800aa2a:	f843 2c34 	str.w	r2, [r3, #-52]
  for (ci = 0; ci < cinfo->comps_in_scan; ci++) {
 800aa2e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800aa30:	3301      	adds	r3, #1
 800aa32:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800aa34:	687b      	ldr	r3, [r7, #4]
 800aa36:	f8d3 3120 	ldr.w	r3, [r3, #288]	@ 0x120
 800aa3a:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 800aa3c:	429a      	cmp	r2, r3
 800aa3e:	db84      	blt.n	800a94a <finish_pass_gather+0x42>
      }
    }
  }
}
 800aa40:	bf00      	nop
 800aa42:	bf00      	nop
 800aa44:	3740      	adds	r7, #64	@ 0x40
 800aa46:	46bd      	mov	sp, r7
 800aa48:	bd80      	pop	{r7, pc}
	...

0800aa4c <start_pass_huff>:
 * just count the Huffman symbols used and generate Huffman code tables.
 */

METHODDEF(void)
start_pass_huff (j_compress_ptr cinfo, boolean gather_statistics)
{
 800aa4c:	b580      	push	{r7, lr}
 800aa4e:	b086      	sub	sp, #24
 800aa50:	af00      	add	r7, sp, #0
 800aa52:	6078      	str	r0, [r7, #4]
 800aa54:	6039      	str	r1, [r7, #0]
  huff_entropy_ptr entropy = (huff_entropy_ptr) cinfo->entropy;
 800aa56:	687b      	ldr	r3, [r7, #4]
 800aa58:	f8d3 31a4 	ldr.w	r3, [r3, #420]	@ 0x1a4
 800aa5c:	613b      	str	r3, [r7, #16]
  int ci, tbl;
  jpeg_component_info * compptr;

  if (gather_statistics)
 800aa5e:	683b      	ldr	r3, [r7, #0]
 800aa60:	2b00      	cmp	r3, #0
 800aa62:	d003      	beq.n	800aa6c <start_pass_huff+0x20>
    entropy->pub.finish_pass = finish_pass_gather;
 800aa64:	693b      	ldr	r3, [r7, #16]
 800aa66:	4a92      	ldr	r2, [pc, #584]	@ (800acb0 <start_pass_huff+0x264>)
 800aa68:	609a      	str	r2, [r3, #8]
 800aa6a:	e002      	b.n	800aa72 <start_pass_huff+0x26>
  else
    entropy->pub.finish_pass = finish_pass_huff;
 800aa6c:	693b      	ldr	r3, [r7, #16]
 800aa6e:	4a91      	ldr	r2, [pc, #580]	@ (800acb4 <start_pass_huff+0x268>)
 800aa70:	609a      	str	r2, [r3, #8]

  if (cinfo->progressive_mode) {
 800aa72:	687b      	ldr	r3, [r7, #4]
 800aa74:	f8d3 3108 	ldr.w	r3, [r3, #264]	@ 0x108
 800aa78:	2b00      	cmp	r3, #0
 800aa7a:	d043      	beq.n	800ab04 <start_pass_huff+0xb8>
    entropy->cinfo = cinfo;
 800aa7c:	693b      	ldr	r3, [r7, #16]
 800aa7e:	687a      	ldr	r2, [r7, #4]
 800aa80:	679a      	str	r2, [r3, #120]	@ 0x78
    entropy->gather_statistics = gather_statistics;
 800aa82:	693b      	ldr	r3, [r7, #16]
 800aa84:	683a      	ldr	r2, [r7, #0]
 800aa86:	66da      	str	r2, [r3, #108]	@ 0x6c

    /* We assume jcmaster.c already validated the scan parameters. */

    /* Select execution routine */
    if (cinfo->Ah == 0) {
 800aa88:	687b      	ldr	r3, [r7, #4]
 800aa8a:	f8d3 3170 	ldr.w	r3, [r3, #368]	@ 0x170
 800aa8e:	2b00      	cmp	r3, #0
 800aa90:	d10c      	bne.n	800aaac <start_pass_huff+0x60>
      if (cinfo->Ss == 0)
 800aa92:	687b      	ldr	r3, [r7, #4]
 800aa94:	f8d3 3168 	ldr.w	r3, [r3, #360]	@ 0x168
 800aa98:	2b00      	cmp	r3, #0
 800aa9a:	d103      	bne.n	800aaa4 <start_pass_huff+0x58>
	entropy->pub.encode_mcu = encode_mcu_DC_first;
 800aa9c:	693b      	ldr	r3, [r7, #16]
 800aa9e:	4a86      	ldr	r2, [pc, #536]	@ (800acb8 <start_pass_huff+0x26c>)
 800aaa0:	605a      	str	r2, [r3, #4]
 800aaa2:	e020      	b.n	800aae6 <start_pass_huff+0x9a>
      else
	entropy->pub.encode_mcu = encode_mcu_AC_first;
 800aaa4:	693b      	ldr	r3, [r7, #16]
 800aaa6:	4a85      	ldr	r2, [pc, #532]	@ (800acbc <start_pass_huff+0x270>)
 800aaa8:	605a      	str	r2, [r3, #4]
 800aaaa:	e01c      	b.n	800aae6 <start_pass_huff+0x9a>
    } else {
      if (cinfo->Ss == 0)
 800aaac:	687b      	ldr	r3, [r7, #4]
 800aaae:	f8d3 3168 	ldr.w	r3, [r3, #360]	@ 0x168
 800aab2:	2b00      	cmp	r3, #0
 800aab4:	d103      	bne.n	800aabe <start_pass_huff+0x72>
	entropy->pub.encode_mcu = encode_mcu_DC_refine;
 800aab6:	693b      	ldr	r3, [r7, #16]
 800aab8:	4a81      	ldr	r2, [pc, #516]	@ (800acc0 <start_pass_huff+0x274>)
 800aaba:	605a      	str	r2, [r3, #4]
 800aabc:	e013      	b.n	800aae6 <start_pass_huff+0x9a>
      else {
	entropy->pub.encode_mcu = encode_mcu_AC_refine;
 800aabe:	693b      	ldr	r3, [r7, #16]
 800aac0:	4a80      	ldr	r2, [pc, #512]	@ (800acc4 <start_pass_huff+0x278>)
 800aac2:	605a      	str	r2, [r3, #4]
	/* AC refinement needs a correction bit buffer */
	if (entropy->bit_buffer == NULL)
 800aac4:	693b      	ldr	r3, [r7, #16]
 800aac6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800aaca:	2b00      	cmp	r3, #0
 800aacc:	d10b      	bne.n	800aae6 <start_pass_huff+0x9a>
	  entropy->bit_buffer = (char *)
	    (*cinfo->mem->alloc_small) ((j_common_ptr) cinfo, JPOOL_IMAGE,
 800aace:	687b      	ldr	r3, [r7, #4]
 800aad0:	685b      	ldr	r3, [r3, #4]
 800aad2:	681b      	ldr	r3, [r3, #0]
 800aad4:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 800aad8:	2101      	movs	r1, #1
 800aada:	6878      	ldr	r0, [r7, #4]
 800aadc:	4798      	blx	r3
 800aade:	4602      	mov	r2, r0
	  entropy->bit_buffer = (char *)
 800aae0:	693b      	ldr	r3, [r7, #16]
 800aae2:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
					MAX_CORR_BITS * SIZEOF(char));
      }
    }

    /* Initialize AC stuff */
    entropy->ac_tbl_no = cinfo->cur_comp_info[0]->ac_tbl_no;
 800aae6:	687b      	ldr	r3, [r7, #4]
 800aae8:	f8d3 3124 	ldr.w	r3, [r3, #292]	@ 0x124
 800aaec:	699a      	ldr	r2, [r3, #24]
 800aaee:	693b      	ldr	r3, [r7, #16]
 800aaf0:	67da      	str	r2, [r3, #124]	@ 0x7c
    entropy->EOBRUN = 0;
 800aaf2:	693b      	ldr	r3, [r7, #16]
 800aaf4:	2200      	movs	r2, #0
 800aaf6:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
    entropy->BE = 0;
 800aafa:	693b      	ldr	r3, [r7, #16]
 800aafc:	2200      	movs	r2, #0
 800aafe:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
 800ab02:	e009      	b.n	800ab18 <start_pass_huff+0xcc>
  } else {
    if (gather_statistics)
 800ab04:	683b      	ldr	r3, [r7, #0]
 800ab06:	2b00      	cmp	r3, #0
 800ab08:	d003      	beq.n	800ab12 <start_pass_huff+0xc6>
      entropy->pub.encode_mcu = encode_mcu_gather;
 800ab0a:	693b      	ldr	r3, [r7, #16]
 800ab0c:	4a6e      	ldr	r2, [pc, #440]	@ (800acc8 <start_pass_huff+0x27c>)
 800ab0e:	605a      	str	r2, [r3, #4]
 800ab10:	e002      	b.n	800ab18 <start_pass_huff+0xcc>
    else
      entropy->pub.encode_mcu = encode_mcu_huff;
 800ab12:	693b      	ldr	r3, [r7, #16]
 800ab14:	4a6d      	ldr	r2, [pc, #436]	@ (800accc <start_pass_huff+0x280>)
 800ab16:	605a      	str	r2, [r3, #4]
  }

  for (ci = 0; ci < cinfo->comps_in_scan; ci++) {
 800ab18:	2300      	movs	r3, #0
 800ab1a:	617b      	str	r3, [r7, #20]
 800ab1c:	e0af      	b.n	800ac7e <start_pass_huff+0x232>
    compptr = cinfo->cur_comp_info[ci];
 800ab1e:	687a      	ldr	r2, [r7, #4]
 800ab20:	697b      	ldr	r3, [r7, #20]
 800ab22:	3348      	adds	r3, #72	@ 0x48
 800ab24:	009b      	lsls	r3, r3, #2
 800ab26:	4413      	add	r3, r2
 800ab28:	685b      	ldr	r3, [r3, #4]
 800ab2a:	60fb      	str	r3, [r7, #12]
    /* DC needs no table for refinement scan */
    if (cinfo->Ss == 0 && cinfo->Ah == 0) {
 800ab2c:	687b      	ldr	r3, [r7, #4]
 800ab2e:	f8d3 3168 	ldr.w	r3, [r3, #360]	@ 0x168
 800ab32:	2b00      	cmp	r3, #0
 800ab34:	d153      	bne.n	800abde <start_pass_huff+0x192>
 800ab36:	687b      	ldr	r3, [r7, #4]
 800ab38:	f8d3 3170 	ldr.w	r3, [r3, #368]	@ 0x170
 800ab3c:	2b00      	cmp	r3, #0
 800ab3e:	d14e      	bne.n	800abde <start_pass_huff+0x192>
      tbl = compptr->dc_tbl_no;
 800ab40:	68fb      	ldr	r3, [r7, #12]
 800ab42:	695b      	ldr	r3, [r3, #20]
 800ab44:	60bb      	str	r3, [r7, #8]
      if (gather_statistics) {
 800ab46:	683b      	ldr	r3, [r7, #0]
 800ab48:	2b00      	cmp	r3, #0
 800ab4a:	d036      	beq.n	800abba <start_pass_huff+0x16e>
	/* Check for invalid table index */
	/* (make_c_derived_tbl does this in the other path) */
	if (tbl < 0 || tbl >= NUM_HUFF_TBLS)
 800ab4c:	68bb      	ldr	r3, [r7, #8]
 800ab4e:	2b00      	cmp	r3, #0
 800ab50:	db02      	blt.n	800ab58 <start_pass_huff+0x10c>
 800ab52:	68bb      	ldr	r3, [r7, #8]
 800ab54:	2b03      	cmp	r3, #3
 800ab56:	dd0c      	ble.n	800ab72 <start_pass_huff+0x126>
	  ERREXIT1(cinfo, JERR_NO_HUFF_TABLE, tbl);
 800ab58:	687b      	ldr	r3, [r7, #4]
 800ab5a:	681b      	ldr	r3, [r3, #0]
 800ab5c:	2234      	movs	r2, #52	@ 0x34
 800ab5e:	615a      	str	r2, [r3, #20]
 800ab60:	687b      	ldr	r3, [r7, #4]
 800ab62:	681b      	ldr	r3, [r3, #0]
 800ab64:	68ba      	ldr	r2, [r7, #8]
 800ab66:	619a      	str	r2, [r3, #24]
 800ab68:	687b      	ldr	r3, [r7, #4]
 800ab6a:	681b      	ldr	r3, [r3, #0]
 800ab6c:	681b      	ldr	r3, [r3, #0]
 800ab6e:	6878      	ldr	r0, [r7, #4]
 800ab70:	4798      	blx	r3
	/* Allocate and zero the statistics tables */
	/* Note that jpeg_gen_optimal_table expects 257 entries in each table! */
	if (entropy->dc_count_ptrs[tbl] == NULL)
 800ab72:	693a      	ldr	r2, [r7, #16]
 800ab74:	68bb      	ldr	r3, [r7, #8]
 800ab76:	3312      	adds	r3, #18
 800ab78:	009b      	lsls	r3, r3, #2
 800ab7a:	4413      	add	r3, r2
 800ab7c:	685b      	ldr	r3, [r3, #4]
 800ab7e:	2b00      	cmp	r3, #0
 800ab80:	d10e      	bne.n	800aba0 <start_pass_huff+0x154>
	  entropy->dc_count_ptrs[tbl] = (long *)
	    (*cinfo->mem->alloc_small) ((j_common_ptr) cinfo, JPOOL_IMAGE,
 800ab82:	687b      	ldr	r3, [r7, #4]
 800ab84:	685b      	ldr	r3, [r3, #4]
 800ab86:	681b      	ldr	r3, [r3, #0]
 800ab88:	f240 4204 	movw	r2, #1028	@ 0x404
 800ab8c:	2101      	movs	r1, #1
 800ab8e:	6878      	ldr	r0, [r7, #4]
 800ab90:	4798      	blx	r3
 800ab92:	4601      	mov	r1, r0
	  entropy->dc_count_ptrs[tbl] = (long *)
 800ab94:	693a      	ldr	r2, [r7, #16]
 800ab96:	68bb      	ldr	r3, [r7, #8]
 800ab98:	3312      	adds	r3, #18
 800ab9a:	009b      	lsls	r3, r3, #2
 800ab9c:	4413      	add	r3, r2
 800ab9e:	6059      	str	r1, [r3, #4]
					257 * SIZEOF(long));
	MEMZERO(entropy->dc_count_ptrs[tbl], 257 * SIZEOF(long));
 800aba0:	693a      	ldr	r2, [r7, #16]
 800aba2:	68bb      	ldr	r3, [r7, #8]
 800aba4:	3312      	adds	r3, #18
 800aba6:	009b      	lsls	r3, r3, #2
 800aba8:	4413      	add	r3, r2
 800abaa:	685b      	ldr	r3, [r3, #4]
 800abac:	f240 4204 	movw	r2, #1028	@ 0x404
 800abb0:	2100      	movs	r1, #0
 800abb2:	4618      	mov	r0, r3
 800abb4:	f00e ff1c 	bl	80199f0 <memset>
 800abb8:	e00a      	b.n	800abd0 <start_pass_huff+0x184>
      } else {
	/* Compute derived values for Huffman tables */
	/* We may do this more than once for a table, but it's not expensive */
	jpeg_make_c_derived_tbl(cinfo, TRUE, tbl,
 800abba:	68bb      	ldr	r3, [r7, #8]
 800abbc:	330a      	adds	r3, #10
 800abbe:	009b      	lsls	r3, r3, #2
 800abc0:	693a      	ldr	r2, [r7, #16]
 800abc2:	4413      	add	r3, r2
 800abc4:	3304      	adds	r3, #4
 800abc6:	68ba      	ldr	r2, [r7, #8]
 800abc8:	2101      	movs	r1, #1
 800abca:	6878      	ldr	r0, [r7, #4]
 800abcc:	f7fe f8f6 	bl	8008dbc <jpeg_make_c_derived_tbl>
				& entropy->dc_derived_tbls[tbl]);
      }
      /* Initialize DC predictions to 0 */
      entropy->saved.last_dc_val[ci] = 0;
 800abd0:	693a      	ldr	r2, [r7, #16]
 800abd2:	697b      	ldr	r3, [r7, #20]
 800abd4:	3304      	adds	r3, #4
 800abd6:	009b      	lsls	r3, r3, #2
 800abd8:	4413      	add	r3, r2
 800abda:	2200      	movs	r2, #0
 800abdc:	605a      	str	r2, [r3, #4]
    }
    /* AC needs no table when not present */
    if (cinfo->Se) {
 800abde:	687b      	ldr	r3, [r7, #4]
 800abe0:	f8d3 316c 	ldr.w	r3, [r3, #364]	@ 0x16c
 800abe4:	2b00      	cmp	r3, #0
 800abe6:	d047      	beq.n	800ac78 <start_pass_huff+0x22c>
      tbl = compptr->ac_tbl_no;
 800abe8:	68fb      	ldr	r3, [r7, #12]
 800abea:	699b      	ldr	r3, [r3, #24]
 800abec:	60bb      	str	r3, [r7, #8]
      if (gather_statistics) {
 800abee:	683b      	ldr	r3, [r7, #0]
 800abf0:	2b00      	cmp	r3, #0
 800abf2:	d036      	beq.n	800ac62 <start_pass_huff+0x216>
	if (tbl < 0 || tbl >= NUM_HUFF_TBLS)
 800abf4:	68bb      	ldr	r3, [r7, #8]
 800abf6:	2b00      	cmp	r3, #0
 800abf8:	db02      	blt.n	800ac00 <start_pass_huff+0x1b4>
 800abfa:	68bb      	ldr	r3, [r7, #8]
 800abfc:	2b03      	cmp	r3, #3
 800abfe:	dd0c      	ble.n	800ac1a <start_pass_huff+0x1ce>
	  ERREXIT1(cinfo, JERR_NO_HUFF_TABLE, tbl);
 800ac00:	687b      	ldr	r3, [r7, #4]
 800ac02:	681b      	ldr	r3, [r3, #0]
 800ac04:	2234      	movs	r2, #52	@ 0x34
 800ac06:	615a      	str	r2, [r3, #20]
 800ac08:	687b      	ldr	r3, [r7, #4]
 800ac0a:	681b      	ldr	r3, [r3, #0]
 800ac0c:	68ba      	ldr	r2, [r7, #8]
 800ac0e:	619a      	str	r2, [r3, #24]
 800ac10:	687b      	ldr	r3, [r7, #4]
 800ac12:	681b      	ldr	r3, [r3, #0]
 800ac14:	681b      	ldr	r3, [r3, #0]
 800ac16:	6878      	ldr	r0, [r7, #4]
 800ac18:	4798      	blx	r3
	if (entropy->ac_count_ptrs[tbl] == NULL)
 800ac1a:	693a      	ldr	r2, [r7, #16]
 800ac1c:	68bb      	ldr	r3, [r7, #8]
 800ac1e:	3316      	adds	r3, #22
 800ac20:	009b      	lsls	r3, r3, #2
 800ac22:	4413      	add	r3, r2
 800ac24:	685b      	ldr	r3, [r3, #4]
 800ac26:	2b00      	cmp	r3, #0
 800ac28:	d10e      	bne.n	800ac48 <start_pass_huff+0x1fc>
	  entropy->ac_count_ptrs[tbl] = (long *)
	    (*cinfo->mem->alloc_small) ((j_common_ptr) cinfo, JPOOL_IMAGE,
 800ac2a:	687b      	ldr	r3, [r7, #4]
 800ac2c:	685b      	ldr	r3, [r3, #4]
 800ac2e:	681b      	ldr	r3, [r3, #0]
 800ac30:	f240 4204 	movw	r2, #1028	@ 0x404
 800ac34:	2101      	movs	r1, #1
 800ac36:	6878      	ldr	r0, [r7, #4]
 800ac38:	4798      	blx	r3
 800ac3a:	4601      	mov	r1, r0
	  entropy->ac_count_ptrs[tbl] = (long *)
 800ac3c:	693a      	ldr	r2, [r7, #16]
 800ac3e:	68bb      	ldr	r3, [r7, #8]
 800ac40:	3316      	adds	r3, #22
 800ac42:	009b      	lsls	r3, r3, #2
 800ac44:	4413      	add	r3, r2
 800ac46:	6059      	str	r1, [r3, #4]
					257 * SIZEOF(long));
	MEMZERO(entropy->ac_count_ptrs[tbl], 257 * SIZEOF(long));
 800ac48:	693a      	ldr	r2, [r7, #16]
 800ac4a:	68bb      	ldr	r3, [r7, #8]
 800ac4c:	3316      	adds	r3, #22
 800ac4e:	009b      	lsls	r3, r3, #2
 800ac50:	4413      	add	r3, r2
 800ac52:	685b      	ldr	r3, [r3, #4]
 800ac54:	f240 4204 	movw	r2, #1028	@ 0x404
 800ac58:	2100      	movs	r1, #0
 800ac5a:	4618      	mov	r0, r3
 800ac5c:	f00e fec8 	bl	80199f0 <memset>
 800ac60:	e00a      	b.n	800ac78 <start_pass_huff+0x22c>
      } else {
	jpeg_make_c_derived_tbl(cinfo, FALSE, tbl,
 800ac62:	68bb      	ldr	r3, [r7, #8]
 800ac64:	330e      	adds	r3, #14
 800ac66:	009b      	lsls	r3, r3, #2
 800ac68:	693a      	ldr	r2, [r7, #16]
 800ac6a:	4413      	add	r3, r2
 800ac6c:	3304      	adds	r3, #4
 800ac6e:	68ba      	ldr	r2, [r7, #8]
 800ac70:	2100      	movs	r1, #0
 800ac72:	6878      	ldr	r0, [r7, #4]
 800ac74:	f7fe f8a2 	bl	8008dbc <jpeg_make_c_derived_tbl>
  for (ci = 0; ci < cinfo->comps_in_scan; ci++) {
 800ac78:	697b      	ldr	r3, [r7, #20]
 800ac7a:	3301      	adds	r3, #1
 800ac7c:	617b      	str	r3, [r7, #20]
 800ac7e:	687b      	ldr	r3, [r7, #4]
 800ac80:	f8d3 3120 	ldr.w	r3, [r3, #288]	@ 0x120
 800ac84:	697a      	ldr	r2, [r7, #20]
 800ac86:	429a      	cmp	r2, r3
 800ac88:	f6ff af49 	blt.w	800ab1e <start_pass_huff+0xd2>
      }
    }
  }

  /* Initialize bit buffer to empty */
  entropy->saved.put_buffer = 0;
 800ac8c:	693b      	ldr	r3, [r7, #16]
 800ac8e:	2200      	movs	r2, #0
 800ac90:	60da      	str	r2, [r3, #12]
  entropy->saved.put_bits = 0;
 800ac92:	693b      	ldr	r3, [r7, #16]
 800ac94:	2200      	movs	r2, #0
 800ac96:	611a      	str	r2, [r3, #16]

  /* Initialize restart stuff */
  entropy->restarts_to_go = cinfo->restart_interval;
 800ac98:	687b      	ldr	r3, [r7, #4]
 800ac9a:	f8d3 20ec 	ldr.w	r2, [r3, #236]	@ 0xec
 800ac9e:	693b      	ldr	r3, [r7, #16]
 800aca0:	625a      	str	r2, [r3, #36]	@ 0x24
  entropy->next_restart_num = 0;
 800aca2:	693b      	ldr	r3, [r7, #16]
 800aca4:	2200      	movs	r2, #0
 800aca6:	629a      	str	r2, [r3, #40]	@ 0x28
}
 800aca8:	bf00      	nop
 800acaa:	3718      	adds	r7, #24
 800acac:	46bd      	mov	sp, r7
 800acae:	bd80      	pop	{r7, pc}
 800acb0:	0800a909 	.word	0x0800a909
 800acb4:	0800a129 	.word	0x0800a129
 800acb8:	08009725 	.word	0x08009725
 800acbc:	0800987b 	.word	0x0800987b
 800acc0:	08009a19 	.word	0x08009a19
 800acc4:	08009afb 	.word	0x08009afb
 800acc8:	0800a2e9 	.word	0x0800a2e9
 800accc:	08009fb9 	.word	0x08009fb9

0800acd0 <jinit_huff_encoder>:
 * Module initialization routine for Huffman entropy encoding.
 */

GLOBAL(void)
jinit_huff_encoder (j_compress_ptr cinfo)
{
 800acd0:	b580      	push	{r7, lr}
 800acd2:	b084      	sub	sp, #16
 800acd4:	af00      	add	r7, sp, #0
 800acd6:	6078      	str	r0, [r7, #4]
  huff_entropy_ptr entropy;
  int i;

  entropy = (huff_entropy_ptr)
    (*cinfo->mem->alloc_small) ((j_common_ptr) cinfo, JPOOL_IMAGE,
 800acd8:	687b      	ldr	r3, [r7, #4]
 800acda:	685b      	ldr	r3, [r3, #4]
 800acdc:	681b      	ldr	r3, [r3, #0]
 800acde:	228c      	movs	r2, #140	@ 0x8c
 800ace0:	2101      	movs	r1, #1
 800ace2:	6878      	ldr	r0, [r7, #4]
 800ace4:	4798      	blx	r3
 800ace6:	60b8      	str	r0, [r7, #8]
				SIZEOF(huff_entropy_encoder));
  cinfo->entropy = (struct jpeg_entropy_encoder *) entropy;
 800ace8:	687b      	ldr	r3, [r7, #4]
 800acea:	68ba      	ldr	r2, [r7, #8]
 800acec:	f8c3 21a4 	str.w	r2, [r3, #420]	@ 0x1a4
  entropy->pub.start_pass = start_pass_huff;
 800acf0:	68bb      	ldr	r3, [r7, #8]
 800acf2:	4a1f      	ldr	r2, [pc, #124]	@ (800ad70 <jinit_huff_encoder+0xa0>)
 800acf4:	601a      	str	r2, [r3, #0]

  /* Mark tables unallocated */
  for (i = 0; i < NUM_HUFF_TBLS; i++) {
 800acf6:	2300      	movs	r3, #0
 800acf8:	60fb      	str	r3, [r7, #12]
 800acfa:	e028      	b.n	800ad4e <jinit_huff_encoder+0x7e>
    entropy->dc_derived_tbls[i] = entropy->ac_derived_tbls[i] = NULL;
 800acfc:	68ba      	ldr	r2, [r7, #8]
 800acfe:	68fb      	ldr	r3, [r7, #12]
 800ad00:	330e      	adds	r3, #14
 800ad02:	009b      	lsls	r3, r3, #2
 800ad04:	4413      	add	r3, r2
 800ad06:	2200      	movs	r2, #0
 800ad08:	605a      	str	r2, [r3, #4]
 800ad0a:	68ba      	ldr	r2, [r7, #8]
 800ad0c:	68fb      	ldr	r3, [r7, #12]
 800ad0e:	330e      	adds	r3, #14
 800ad10:	009b      	lsls	r3, r3, #2
 800ad12:	4413      	add	r3, r2
 800ad14:	685a      	ldr	r2, [r3, #4]
 800ad16:	68b9      	ldr	r1, [r7, #8]
 800ad18:	68fb      	ldr	r3, [r7, #12]
 800ad1a:	330a      	adds	r3, #10
 800ad1c:	009b      	lsls	r3, r3, #2
 800ad1e:	440b      	add	r3, r1
 800ad20:	605a      	str	r2, [r3, #4]
    entropy->dc_count_ptrs[i] = entropy->ac_count_ptrs[i] = NULL;
 800ad22:	68ba      	ldr	r2, [r7, #8]
 800ad24:	68fb      	ldr	r3, [r7, #12]
 800ad26:	3316      	adds	r3, #22
 800ad28:	009b      	lsls	r3, r3, #2
 800ad2a:	4413      	add	r3, r2
 800ad2c:	2200      	movs	r2, #0
 800ad2e:	605a      	str	r2, [r3, #4]
 800ad30:	68ba      	ldr	r2, [r7, #8]
 800ad32:	68fb      	ldr	r3, [r7, #12]
 800ad34:	3316      	adds	r3, #22
 800ad36:	009b      	lsls	r3, r3, #2
 800ad38:	4413      	add	r3, r2
 800ad3a:	685a      	ldr	r2, [r3, #4]
 800ad3c:	68b9      	ldr	r1, [r7, #8]
 800ad3e:	68fb      	ldr	r3, [r7, #12]
 800ad40:	3312      	adds	r3, #18
 800ad42:	009b      	lsls	r3, r3, #2
 800ad44:	440b      	add	r3, r1
 800ad46:	605a      	str	r2, [r3, #4]
  for (i = 0; i < NUM_HUFF_TBLS; i++) {
 800ad48:	68fb      	ldr	r3, [r7, #12]
 800ad4a:	3301      	adds	r3, #1
 800ad4c:	60fb      	str	r3, [r7, #12]
 800ad4e:	68fb      	ldr	r3, [r7, #12]
 800ad50:	2b03      	cmp	r3, #3
 800ad52:	ddd3      	ble.n	800acfc <jinit_huff_encoder+0x2c>
  }

  if (cinfo->progressive_mode)
 800ad54:	687b      	ldr	r3, [r7, #4]
 800ad56:	f8d3 3108 	ldr.w	r3, [r3, #264]	@ 0x108
 800ad5a:	2b00      	cmp	r3, #0
 800ad5c:	d003      	beq.n	800ad66 <jinit_huff_encoder+0x96>
    entropy->bit_buffer = NULL;	/* needed only in AC refinement scan */
 800ad5e:	68bb      	ldr	r3, [r7, #8]
 800ad60:	2200      	movs	r2, #0
 800ad62:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
}
 800ad66:	bf00      	nop
 800ad68:	3710      	adds	r7, #16
 800ad6a:	46bd      	mov	sp, r7
 800ad6c:	bd80      	pop	{r7, pc}
 800ad6e:	bf00      	nop
 800ad70:	0800aa4d 	.word	0x0800aa4d

0800ad74 <jinit_compress_master>:
 * which modules will be used and give them appropriate initialization calls.
 */

GLOBAL(void)
jinit_compress_master (j_compress_ptr cinfo)
{
 800ad74:	b580      	push	{r7, lr}
 800ad76:	b082      	sub	sp, #8
 800ad78:	af00      	add	r7, sp, #0
 800ad7a:	6078      	str	r0, [r7, #4]
  /* Initialize master control (includes parameter checking/processing) */
  jinit_c_master_control(cinfo, FALSE /* full compression */);
 800ad7c:	2100      	movs	r1, #0
 800ad7e:	6878      	ldr	r0, [r7, #4]
 800ad80:	f002 fbd4 	bl	800d52c <jinit_c_master_control>

  /* Preprocessing */
  if (! cinfo->raw_data_in) {
 800ad84:	687b      	ldr	r3, [r7, #4]
 800ad86:	f8d3 30d0 	ldr.w	r3, [r3, #208]	@ 0xd0
 800ad8a:	2b00      	cmp	r3, #0
 800ad8c:	d109      	bne.n	800ada2 <jinit_compress_master+0x2e>
    jinit_color_converter(cinfo);
 800ad8e:	6878      	ldr	r0, [r7, #4]
 800ad90:	f7fd f8b4 	bl	8007efc <jinit_color_converter>
    jinit_downsampler(cinfo);
 800ad94:	6878      	ldr	r0, [r7, #4]
 800ad96:	f004 f803 	bl	800eda0 <jinit_downsampler>
    jinit_c_prep_controller(cinfo, FALSE /* never need full buffer here */);
 800ad9a:	2100      	movs	r1, #0
 800ad9c:	6878      	ldr	r0, [r7, #4]
 800ad9e:	f003 fb91 	bl	800e4c4 <jinit_c_prep_controller>
  }
  /* Forward DCT */
  jinit_forward_dct(cinfo);
 800ada2:	6878      	ldr	r0, [r7, #4]
 800ada4:	f7fd ffd8 	bl	8008d58 <jinit_forward_dct>
  /* Entropy encoding: either Huffman or arithmetic coding. */
  if (cinfo->arith_code)
 800ada8:	687b      	ldr	r3, [r7, #4]
 800adaa:	f8d3 30d4 	ldr.w	r3, [r3, #212]	@ 0xd4
 800adae:	2b00      	cmp	r3, #0
 800adb0:	d003      	beq.n	800adba <jinit_compress_master+0x46>
    jinit_arith_encoder(cinfo);
 800adb2:	6878      	ldr	r0, [r7, #4]
 800adb4:	f7fc f98e 	bl	80070d4 <jinit_arith_encoder>
 800adb8:	e002      	b.n	800adc0 <jinit_compress_master+0x4c>
  else {
    jinit_huff_encoder(cinfo);
 800adba:	6878      	ldr	r0, [r7, #4]
 800adbc:	f7ff ff88 	bl	800acd0 <jinit_huff_encoder>
  }

  /* Need a full-image coefficient buffer in any multi-pass mode. */
  jinit_c_coef_controller(cinfo,
		(boolean) (cinfo->num_scans > 1 || cinfo->optimize_coding));
 800adc0:	687b      	ldr	r3, [r7, #4]
 800adc2:	f8d3 30c8 	ldr.w	r3, [r3, #200]	@ 0xc8
  jinit_c_coef_controller(cinfo,
 800adc6:	2b01      	cmp	r3, #1
 800adc8:	dc04      	bgt.n	800add4 <jinit_compress_master+0x60>
		(boolean) (cinfo->num_scans > 1 || cinfo->optimize_coding));
 800adca:	687b      	ldr	r3, [r7, #4]
 800adcc:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
  jinit_c_coef_controller(cinfo,
 800add0:	2b00      	cmp	r3, #0
 800add2:	d001      	beq.n	800add8 <jinit_compress_master+0x64>
 800add4:	2301      	movs	r3, #1
 800add6:	e000      	b.n	800adda <jinit_compress_master+0x66>
 800add8:	2300      	movs	r3, #0
 800adda:	4619      	mov	r1, r3
 800addc:	6878      	ldr	r0, [r7, #4]
 800adde:	f7fc fd41 	bl	8007864 <jinit_c_coef_controller>
  jinit_c_main_controller(cinfo, FALSE /* never need full buffer here */);
 800ade2:	2100      	movs	r1, #0
 800ade4:	6878      	ldr	r0, [r7, #4]
 800ade6:	f000 f8ad 	bl	800af44 <jinit_c_main_controller>

  jinit_marker_writer(cinfo);
 800adea:	6878      	ldr	r0, [r7, #4]
 800adec:	f000 fe6a 	bl	800bac4 <jinit_marker_writer>

  /* We can now tell the memory manager to allocate virtual arrays. */
  (*cinfo->mem->realize_virt_arrays) ((j_common_ptr) cinfo);
 800adf0:	687b      	ldr	r3, [r7, #4]
 800adf2:	685b      	ldr	r3, [r3, #4]
 800adf4:	699b      	ldr	r3, [r3, #24]
 800adf6:	6878      	ldr	r0, [r7, #4]
 800adf8:	4798      	blx	r3

  /* Write the datastream header (SOI) immediately.
   * Frame and scan headers are postponed till later.
   * This lets application insert special markers after the SOI.
   */
  (*cinfo->marker->write_file_header) (cinfo);
 800adfa:	687b      	ldr	r3, [r7, #4]
 800adfc:	f8d3 3194 	ldr.w	r3, [r3, #404]	@ 0x194
 800ae00:	681b      	ldr	r3, [r3, #0]
 800ae02:	6878      	ldr	r0, [r7, #4]
 800ae04:	4798      	blx	r3
}
 800ae06:	bf00      	nop
 800ae08:	3708      	adds	r7, #8
 800ae0a:	46bd      	mov	sp, r7
 800ae0c:	bd80      	pop	{r7, pc}
	...

0800ae10 <start_pass_main>:
 * Initialize for a processing pass.
 */

METHODDEF(void)
start_pass_main (j_compress_ptr cinfo, J_BUF_MODE pass_mode)
{
 800ae10:	b580      	push	{r7, lr}
 800ae12:	b084      	sub	sp, #16
 800ae14:	af00      	add	r7, sp, #0
 800ae16:	6078      	str	r0, [r7, #4]
 800ae18:	460b      	mov	r3, r1
 800ae1a:	70fb      	strb	r3, [r7, #3]
  my_main_ptr main = (my_main_ptr) cinfo->main;
 800ae1c:	687b      	ldr	r3, [r7, #4]
 800ae1e:	f8d3 3188 	ldr.w	r3, [r3, #392]	@ 0x188
 800ae22:	60fb      	str	r3, [r7, #12]

  /* Do nothing in raw-data mode. */
  if (cinfo->raw_data_in)
 800ae24:	687b      	ldr	r3, [r7, #4]
 800ae26:	f8d3 30d0 	ldr.w	r3, [r3, #208]	@ 0xd0
 800ae2a:	2b00      	cmp	r3, #0
 800ae2c:	d11c      	bne.n	800ae68 <start_pass_main+0x58>
    return;

  main->cur_iMCU_row = 0;	/* initialize counters */
 800ae2e:	68fb      	ldr	r3, [r7, #12]
 800ae30:	2200      	movs	r2, #0
 800ae32:	609a      	str	r2, [r3, #8]
  main->rowgroup_ctr = 0;
 800ae34:	68fb      	ldr	r3, [r7, #12]
 800ae36:	2200      	movs	r2, #0
 800ae38:	60da      	str	r2, [r3, #12]
  main->suspended = FALSE;
 800ae3a:	68fb      	ldr	r3, [r7, #12]
 800ae3c:	2200      	movs	r2, #0
 800ae3e:	611a      	str	r2, [r3, #16]
  main->pass_mode = pass_mode;	/* save mode for use by process_data */
 800ae40:	68fb      	ldr	r3, [r7, #12]
 800ae42:	78fa      	ldrb	r2, [r7, #3]
 800ae44:	751a      	strb	r2, [r3, #20]

  switch (pass_mode) {
 800ae46:	78fb      	ldrb	r3, [r7, #3]
 800ae48:	2b00      	cmp	r3, #0
 800ae4a:	d103      	bne.n	800ae54 <start_pass_main+0x44>
  case JBUF_PASS_THRU:
#ifdef FULL_MAIN_BUFFER_SUPPORTED
    if (main->whole_image[0] != NULL)
      ERREXIT(cinfo, JERR_BAD_BUFFER_MODE);
#endif
    main->pub.process_data = process_data_simple_main;
 800ae4c:	68fb      	ldr	r3, [r7, #12]
 800ae4e:	4a08      	ldr	r2, [pc, #32]	@ (800ae70 <start_pass_main+0x60>)
 800ae50:	605a      	str	r2, [r3, #4]
    break;
 800ae52:	e00a      	b.n	800ae6a <start_pass_main+0x5a>
      ERREXIT(cinfo, JERR_BAD_BUFFER_MODE);
    main->pub.process_data = process_data_buffer_main;
    break;
#endif
  default:
    ERREXIT(cinfo, JERR_BAD_BUFFER_MODE);
 800ae54:	687b      	ldr	r3, [r7, #4]
 800ae56:	681b      	ldr	r3, [r3, #0]
 800ae58:	2203      	movs	r2, #3
 800ae5a:	615a      	str	r2, [r3, #20]
 800ae5c:	687b      	ldr	r3, [r7, #4]
 800ae5e:	681b      	ldr	r3, [r3, #0]
 800ae60:	681b      	ldr	r3, [r3, #0]
 800ae62:	6878      	ldr	r0, [r7, #4]
 800ae64:	4798      	blx	r3
    break;
 800ae66:	e000      	b.n	800ae6a <start_pass_main+0x5a>
    return;
 800ae68:	bf00      	nop
  }
}
 800ae6a:	3710      	adds	r7, #16
 800ae6c:	46bd      	mov	sp, r7
 800ae6e:	bd80      	pop	{r7, pc}
 800ae70:	0800ae75 	.word	0x0800ae75

0800ae74 <process_data_simple_main>:

METHODDEF(void)
process_data_simple_main (j_compress_ptr cinfo,
			  JSAMPARRAY input_buf, JDIMENSION *in_row_ctr,
			  JDIMENSION in_rows_avail)
{
 800ae74:	b590      	push	{r4, r7, lr}
 800ae76:	b08b      	sub	sp, #44	@ 0x2c
 800ae78:	af04      	add	r7, sp, #16
 800ae7a:	60f8      	str	r0, [r7, #12]
 800ae7c:	60b9      	str	r1, [r7, #8]
 800ae7e:	607a      	str	r2, [r7, #4]
 800ae80:	603b      	str	r3, [r7, #0]
  my_main_ptr main = (my_main_ptr) cinfo->main;
 800ae82:	68fb      	ldr	r3, [r7, #12]
 800ae84:	f8d3 3188 	ldr.w	r3, [r3, #392]	@ 0x188
 800ae88:	617b      	str	r3, [r7, #20]

  while (main->cur_iMCU_row < cinfo->total_iMCU_rows) {
 800ae8a:	e04d      	b.n	800af28 <process_data_simple_main+0xb4>
    /* Read input data if we haven't filled the main buffer yet */
    if (main->rowgroup_ctr < (JDIMENSION) cinfo->min_DCT_v_scaled_size)
 800ae8c:	697b      	ldr	r3, [r7, #20]
 800ae8e:	68db      	ldr	r3, [r3, #12]
 800ae90:	68fa      	ldr	r2, [r7, #12]
 800ae92:	f8d2 2118 	ldr.w	r2, [r2, #280]	@ 0x118
 800ae96:	4293      	cmp	r3, r2
 800ae98:	d212      	bcs.n	800aec0 <process_data_simple_main+0x4c>
      (*cinfo->prep->pre_process_data) (cinfo,
 800ae9a:	68fb      	ldr	r3, [r7, #12]
 800ae9c:	f8d3 318c 	ldr.w	r3, [r3, #396]	@ 0x18c
 800aea0:	685c      	ldr	r4, [r3, #4]
					input_buf, in_row_ctr, in_rows_avail,
					main->buffer, &main->rowgroup_ctr,
 800aea2:	697b      	ldr	r3, [r7, #20]
 800aea4:	3318      	adds	r3, #24
      (*cinfo->prep->pre_process_data) (cinfo,
 800aea6:	697a      	ldr	r2, [r7, #20]
 800aea8:	320c      	adds	r2, #12
					(JDIMENSION) cinfo->min_DCT_v_scaled_size);
 800aeaa:	68f9      	ldr	r1, [r7, #12]
 800aeac:	f8d1 1118 	ldr.w	r1, [r1, #280]	@ 0x118
      (*cinfo->prep->pre_process_data) (cinfo,
 800aeb0:	9102      	str	r1, [sp, #8]
 800aeb2:	9201      	str	r2, [sp, #4]
 800aeb4:	9300      	str	r3, [sp, #0]
 800aeb6:	683b      	ldr	r3, [r7, #0]
 800aeb8:	687a      	ldr	r2, [r7, #4]
 800aeba:	68b9      	ldr	r1, [r7, #8]
 800aebc:	68f8      	ldr	r0, [r7, #12]
 800aebe:	47a0      	blx	r4

    /* If we don't have a full iMCU row buffered, return to application for
     * more data.  Note that preprocessor will always pad to fill the iMCU row
     * at the bottom of the image.
     */
    if (main->rowgroup_ctr != (JDIMENSION) cinfo->min_DCT_v_scaled_size)
 800aec0:	697b      	ldr	r3, [r7, #20]
 800aec2:	68db      	ldr	r3, [r3, #12]
 800aec4:	68fa      	ldr	r2, [r7, #12]
 800aec6:	f8d2 2118 	ldr.w	r2, [r2, #280]	@ 0x118
 800aeca:	4293      	cmp	r3, r2
 800aecc:	d134      	bne.n	800af38 <process_data_simple_main+0xc4>
      return;

    /* Send the completed row to the compressor */
    if (! (*cinfo->coef->compress_data) (cinfo, main->buffer)) {
 800aece:	68fb      	ldr	r3, [r7, #12]
 800aed0:	f8d3 3190 	ldr.w	r3, [r3, #400]	@ 0x190
 800aed4:	685b      	ldr	r3, [r3, #4]
 800aed6:	697a      	ldr	r2, [r7, #20]
 800aed8:	3218      	adds	r2, #24
 800aeda:	4611      	mov	r1, r2
 800aedc:	68f8      	ldr	r0, [r7, #12]
 800aede:	4798      	blx	r3
 800aee0:	4603      	mov	r3, r0
 800aee2:	2b00      	cmp	r3, #0
 800aee4:	d10c      	bne.n	800af00 <process_data_simple_main+0x8c>
       * suspend processing and return to the application.  In this situation
       * we pretend we didn't yet consume the last input row; otherwise, if
       * it happened to be the last row of the image, the application would
       * think we were done.
       */
      if (! main->suspended) {
 800aee6:	697b      	ldr	r3, [r7, #20]
 800aee8:	691b      	ldr	r3, [r3, #16]
 800aeea:	2b00      	cmp	r3, #0
 800aeec:	d126      	bne.n	800af3c <process_data_simple_main+0xc8>
	(*in_row_ctr)--;
 800aeee:	687b      	ldr	r3, [r7, #4]
 800aef0:	681b      	ldr	r3, [r3, #0]
 800aef2:	1e5a      	subs	r2, r3, #1
 800aef4:	687b      	ldr	r3, [r7, #4]
 800aef6:	601a      	str	r2, [r3, #0]
	main->suspended = TRUE;
 800aef8:	697b      	ldr	r3, [r7, #20]
 800aefa:	2201      	movs	r2, #1
 800aefc:	611a      	str	r2, [r3, #16]
      }
      return;
 800aefe:	e01d      	b.n	800af3c <process_data_simple_main+0xc8>
    }
    /* We did finish the row.  Undo our little suspension hack if a previous
     * call suspended; then mark the main buffer empty.
     */
    if (main->suspended) {
 800af00:	697b      	ldr	r3, [r7, #20]
 800af02:	691b      	ldr	r3, [r3, #16]
 800af04:	2b00      	cmp	r3, #0
 800af06:	d007      	beq.n	800af18 <process_data_simple_main+0xa4>
      (*in_row_ctr)++;
 800af08:	687b      	ldr	r3, [r7, #4]
 800af0a:	681b      	ldr	r3, [r3, #0]
 800af0c:	1c5a      	adds	r2, r3, #1
 800af0e:	687b      	ldr	r3, [r7, #4]
 800af10:	601a      	str	r2, [r3, #0]
      main->suspended = FALSE;
 800af12:	697b      	ldr	r3, [r7, #20]
 800af14:	2200      	movs	r2, #0
 800af16:	611a      	str	r2, [r3, #16]
    }
    main->rowgroup_ctr = 0;
 800af18:	697b      	ldr	r3, [r7, #20]
 800af1a:	2200      	movs	r2, #0
 800af1c:	60da      	str	r2, [r3, #12]
    main->cur_iMCU_row++;
 800af1e:	697b      	ldr	r3, [r7, #20]
 800af20:	689b      	ldr	r3, [r3, #8]
 800af22:	1c5a      	adds	r2, r3, #1
 800af24:	697b      	ldr	r3, [r7, #20]
 800af26:	609a      	str	r2, [r3, #8]
  while (main->cur_iMCU_row < cinfo->total_iMCU_rows) {
 800af28:	697b      	ldr	r3, [r7, #20]
 800af2a:	689a      	ldr	r2, [r3, #8]
 800af2c:	68fb      	ldr	r3, [r7, #12]
 800af2e:	f8d3 311c 	ldr.w	r3, [r3, #284]	@ 0x11c
 800af32:	429a      	cmp	r2, r3
 800af34:	d3aa      	bcc.n	800ae8c <process_data_simple_main+0x18>
 800af36:	e002      	b.n	800af3e <process_data_simple_main+0xca>
      return;
 800af38:	bf00      	nop
 800af3a:	e000      	b.n	800af3e <process_data_simple_main+0xca>
      return;
 800af3c:	bf00      	nop
  }
}
 800af3e:	371c      	adds	r7, #28
 800af40:	46bd      	mov	sp, r7
 800af42:	bd90      	pop	{r4, r7, pc}

0800af44 <jinit_c_main_controller>:
 * Initialize main buffer controller.
 */

GLOBAL(void)
jinit_c_main_controller (j_compress_ptr cinfo, boolean need_full_buffer)
{
 800af44:	b590      	push	{r4, r7, lr}
 800af46:	b087      	sub	sp, #28
 800af48:	af00      	add	r7, sp, #0
 800af4a:	6078      	str	r0, [r7, #4]
 800af4c:	6039      	str	r1, [r7, #0]
  my_main_ptr main;
  int ci;
  jpeg_component_info *compptr;

  main = (my_main_ptr)
    (*cinfo->mem->alloc_small) ((j_common_ptr) cinfo, JPOOL_IMAGE,
 800af4e:	687b      	ldr	r3, [r7, #4]
 800af50:	685b      	ldr	r3, [r3, #4]
 800af52:	681b      	ldr	r3, [r3, #0]
 800af54:	2240      	movs	r2, #64	@ 0x40
 800af56:	2101      	movs	r1, #1
 800af58:	6878      	ldr	r0, [r7, #4]
 800af5a:	4798      	blx	r3
 800af5c:	60f8      	str	r0, [r7, #12]
				SIZEOF(my_main_controller));
  cinfo->main = (struct jpeg_c_main_controller *) main;
 800af5e:	687b      	ldr	r3, [r7, #4]
 800af60:	68fa      	ldr	r2, [r7, #12]
 800af62:	f8c3 2188 	str.w	r2, [r3, #392]	@ 0x188
  main->pub.start_pass = start_pass_main;
 800af66:	68fb      	ldr	r3, [r7, #12]
 800af68:	4a21      	ldr	r2, [pc, #132]	@ (800aff0 <jinit_c_main_controller+0xac>)
 800af6a:	601a      	str	r2, [r3, #0]

  /* We don't need to create a buffer in raw-data mode. */
  if (cinfo->raw_data_in)
 800af6c:	687b      	ldr	r3, [r7, #4]
 800af6e:	f8d3 30d0 	ldr.w	r3, [r3, #208]	@ 0xd0
 800af72:	2b00      	cmp	r3, #0
 800af74:	d137      	bne.n	800afe6 <jinit_c_main_controller+0xa2>
    return;

  /* Create the buffer.  It holds downsampled data, so each component
   * may be of a different size.
   */
  if (need_full_buffer) {
 800af76:	683b      	ldr	r3, [r7, #0]
 800af78:	2b00      	cmp	r3, #0
 800af7a:	d009      	beq.n	800af90 <jinit_c_main_controller+0x4c>
	 (JDIMENSION) jround_up((long) compptr->height_in_blocks,
				(long) compptr->v_samp_factor) * DCTSIZE,
	 (JDIMENSION) (compptr->v_samp_factor * compptr->DCT_v_scaled_size));
    }
#else
    ERREXIT(cinfo, JERR_BAD_BUFFER_MODE);
 800af7c:	687b      	ldr	r3, [r7, #4]
 800af7e:	681b      	ldr	r3, [r3, #0]
 800af80:	2203      	movs	r2, #3
 800af82:	615a      	str	r2, [r3, #20]
 800af84:	687b      	ldr	r3, [r7, #4]
 800af86:	681b      	ldr	r3, [r3, #0]
 800af88:	681b      	ldr	r3, [r3, #0]
 800af8a:	6878      	ldr	r0, [r7, #4]
 800af8c:	4798      	blx	r3
 800af8e:	e02b      	b.n	800afe8 <jinit_c_main_controller+0xa4>
  } else {
#ifdef FULL_MAIN_BUFFER_SUPPORTED
    main->whole_image[0] = NULL; /* flag for no virtual arrays */
#endif
    /* Allocate a strip buffer for each component */
    for (ci = 0, compptr = cinfo->comp_info; ci < cinfo->num_components;
 800af90:	2300      	movs	r3, #0
 800af92:	617b      	str	r3, [r7, #20]
 800af94:	687b      	ldr	r3, [r7, #4]
 800af96:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800af98:	613b      	str	r3, [r7, #16]
 800af9a:	e01e      	b.n	800afda <jinit_c_main_controller+0x96>
	 ci++, compptr++) {
      main->buffer[ci] = (*cinfo->mem->alloc_sarray)
 800af9c:	687b      	ldr	r3, [r7, #4]
 800af9e:	685b      	ldr	r3, [r3, #4]
 800afa0:	689c      	ldr	r4, [r3, #8]
	((j_common_ptr) cinfo, JPOOL_IMAGE,
	 compptr->width_in_blocks * compptr->DCT_h_scaled_size,
 800afa2:	693b      	ldr	r3, [r7, #16]
 800afa4:	69db      	ldr	r3, [r3, #28]
 800afa6:	693a      	ldr	r2, [r7, #16]
 800afa8:	6a52      	ldr	r2, [r2, #36]	@ 0x24
      main->buffer[ci] = (*cinfo->mem->alloc_sarray)
 800afaa:	fb02 f103 	mul.w	r1, r2, r3
	 (JDIMENSION) (compptr->v_samp_factor * compptr->DCT_v_scaled_size));
 800afae:	693b      	ldr	r3, [r7, #16]
 800afb0:	68db      	ldr	r3, [r3, #12]
 800afb2:	693a      	ldr	r2, [r7, #16]
 800afb4:	6a92      	ldr	r2, [r2, #40]	@ 0x28
 800afb6:	fb02 f303 	mul.w	r3, r2, r3
      main->buffer[ci] = (*cinfo->mem->alloc_sarray)
 800afba:	460a      	mov	r2, r1
 800afbc:	2101      	movs	r1, #1
 800afbe:	6878      	ldr	r0, [r7, #4]
 800afc0:	47a0      	blx	r4
 800afc2:	4601      	mov	r1, r0
 800afc4:	68fb      	ldr	r3, [r7, #12]
 800afc6:	697a      	ldr	r2, [r7, #20]
 800afc8:	3206      	adds	r2, #6
 800afca:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
	 ci++, compptr++) {
 800afce:	697b      	ldr	r3, [r7, #20]
 800afd0:	3301      	adds	r3, #1
 800afd2:	617b      	str	r3, [r7, #20]
 800afd4:	693b      	ldr	r3, [r7, #16]
 800afd6:	3358      	adds	r3, #88	@ 0x58
 800afd8:	613b      	str	r3, [r7, #16]
    for (ci = 0, compptr = cinfo->comp_info; ci < cinfo->num_components;
 800afda:	687b      	ldr	r3, [r7, #4]
 800afdc:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800afde:	697a      	ldr	r2, [r7, #20]
 800afe0:	429a      	cmp	r2, r3
 800afe2:	dbdb      	blt.n	800af9c <jinit_c_main_controller+0x58>
 800afe4:	e000      	b.n	800afe8 <jinit_c_main_controller+0xa4>
    return;
 800afe6:	bf00      	nop
    }
  }
}
 800afe8:	371c      	adds	r7, #28
 800afea:	46bd      	mov	sp, r7
 800afec:	bd90      	pop	{r4, r7, pc}
 800afee:	bf00      	nop
 800aff0:	0800ae11 	.word	0x0800ae11

0800aff4 <emit_byte>:
 */

LOCAL(void)
emit_byte (j_compress_ptr cinfo, int val)
/* Emit a byte */
{
 800aff4:	b580      	push	{r7, lr}
 800aff6:	b084      	sub	sp, #16
 800aff8:	af00      	add	r7, sp, #0
 800affa:	6078      	str	r0, [r7, #4]
 800affc:	6039      	str	r1, [r7, #0]
  struct jpeg_destination_mgr * dest = cinfo->dest;
 800affe:	687b      	ldr	r3, [r7, #4]
 800b000:	699b      	ldr	r3, [r3, #24]
 800b002:	60fb      	str	r3, [r7, #12]

  *(dest->next_output_byte)++ = (JOCTET) val;
 800b004:	68fb      	ldr	r3, [r7, #12]
 800b006:	681b      	ldr	r3, [r3, #0]
 800b008:	1c59      	adds	r1, r3, #1
 800b00a:	68fa      	ldr	r2, [r7, #12]
 800b00c:	6011      	str	r1, [r2, #0]
 800b00e:	683a      	ldr	r2, [r7, #0]
 800b010:	b2d2      	uxtb	r2, r2
 800b012:	701a      	strb	r2, [r3, #0]
  if (--dest->free_in_buffer == 0) {
 800b014:	68fb      	ldr	r3, [r7, #12]
 800b016:	685b      	ldr	r3, [r3, #4]
 800b018:	1e5a      	subs	r2, r3, #1
 800b01a:	68fb      	ldr	r3, [r7, #12]
 800b01c:	605a      	str	r2, [r3, #4]
 800b01e:	68fb      	ldr	r3, [r7, #12]
 800b020:	685b      	ldr	r3, [r3, #4]
 800b022:	2b00      	cmp	r3, #0
 800b024:	d10f      	bne.n	800b046 <emit_byte+0x52>
    if (! (*dest->empty_output_buffer) (cinfo))
 800b026:	68fb      	ldr	r3, [r7, #12]
 800b028:	68db      	ldr	r3, [r3, #12]
 800b02a:	6878      	ldr	r0, [r7, #4]
 800b02c:	4798      	blx	r3
 800b02e:	4603      	mov	r3, r0
 800b030:	2b00      	cmp	r3, #0
 800b032:	d108      	bne.n	800b046 <emit_byte+0x52>
      ERREXIT(cinfo, JERR_CANT_SUSPEND);
 800b034:	687b      	ldr	r3, [r7, #4]
 800b036:	681b      	ldr	r3, [r3, #0]
 800b038:	2219      	movs	r2, #25
 800b03a:	615a      	str	r2, [r3, #20]
 800b03c:	687b      	ldr	r3, [r7, #4]
 800b03e:	681b      	ldr	r3, [r3, #0]
 800b040:	681b      	ldr	r3, [r3, #0]
 800b042:	6878      	ldr	r0, [r7, #4]
 800b044:	4798      	blx	r3
  }
}
 800b046:	bf00      	nop
 800b048:	3710      	adds	r7, #16
 800b04a:	46bd      	mov	sp, r7
 800b04c:	bd80      	pop	{r7, pc}

0800b04e <emit_marker>:


LOCAL(void)
emit_marker (j_compress_ptr cinfo, JPEG_MARKER mark)
/* Emit a marker code */
{
 800b04e:	b580      	push	{r7, lr}
 800b050:	b082      	sub	sp, #8
 800b052:	af00      	add	r7, sp, #0
 800b054:	6078      	str	r0, [r7, #4]
 800b056:	460b      	mov	r3, r1
 800b058:	807b      	strh	r3, [r7, #2]
  emit_byte(cinfo, 0xFF);
 800b05a:	21ff      	movs	r1, #255	@ 0xff
 800b05c:	6878      	ldr	r0, [r7, #4]
 800b05e:	f7ff ffc9 	bl	800aff4 <emit_byte>
  emit_byte(cinfo, (int) mark);
 800b062:	887b      	ldrh	r3, [r7, #2]
 800b064:	4619      	mov	r1, r3
 800b066:	6878      	ldr	r0, [r7, #4]
 800b068:	f7ff ffc4 	bl	800aff4 <emit_byte>
}
 800b06c:	bf00      	nop
 800b06e:	3708      	adds	r7, #8
 800b070:	46bd      	mov	sp, r7
 800b072:	bd80      	pop	{r7, pc}

0800b074 <emit_2bytes>:


LOCAL(void)
emit_2bytes (j_compress_ptr cinfo, int value)
/* Emit a 2-byte integer; these are always MSB first in JPEG files */
{
 800b074:	b580      	push	{r7, lr}
 800b076:	b082      	sub	sp, #8
 800b078:	af00      	add	r7, sp, #0
 800b07a:	6078      	str	r0, [r7, #4]
 800b07c:	6039      	str	r1, [r7, #0]
  emit_byte(cinfo, (value >> 8) & 0xFF);
 800b07e:	683b      	ldr	r3, [r7, #0]
 800b080:	121b      	asrs	r3, r3, #8
 800b082:	b2db      	uxtb	r3, r3
 800b084:	4619      	mov	r1, r3
 800b086:	6878      	ldr	r0, [r7, #4]
 800b088:	f7ff ffb4 	bl	800aff4 <emit_byte>
  emit_byte(cinfo, value & 0xFF);
 800b08c:	683b      	ldr	r3, [r7, #0]
 800b08e:	b2db      	uxtb	r3, r3
 800b090:	4619      	mov	r1, r3
 800b092:	6878      	ldr	r0, [r7, #4]
 800b094:	f7ff ffae 	bl	800aff4 <emit_byte>
}
 800b098:	bf00      	nop
 800b09a:	3708      	adds	r7, #8
 800b09c:	46bd      	mov	sp, r7
 800b09e:	bd80      	pop	{r7, pc}

0800b0a0 <emit_dqt>:

LOCAL(int)
emit_dqt (j_compress_ptr cinfo, int index)
/* Emit a DQT marker */
/* Returns the precision used (0 = 8bits, 1 = 16bits) for baseline checking */
{
 800b0a0:	b580      	push	{r7, lr}
 800b0a2:	b086      	sub	sp, #24
 800b0a4:	af00      	add	r7, sp, #0
 800b0a6:	6078      	str	r0, [r7, #4]
 800b0a8:	6039      	str	r1, [r7, #0]
  JQUANT_TBL * qtbl = cinfo->quant_tbl_ptrs[index];
 800b0aa:	687b      	ldr	r3, [r7, #4]
 800b0ac:	683a      	ldr	r2, [r7, #0]
 800b0ae:	3216      	adds	r2, #22
 800b0b0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800b0b4:	60fb      	str	r3, [r7, #12]
  int prec;
  int i;

  if (qtbl == NULL)
 800b0b6:	68fb      	ldr	r3, [r7, #12]
 800b0b8:	2b00      	cmp	r3, #0
 800b0ba:	d10c      	bne.n	800b0d6 <emit_dqt+0x36>
    ERREXIT1(cinfo, JERR_NO_QUANT_TABLE, index);
 800b0bc:	687b      	ldr	r3, [r7, #4]
 800b0be:	681b      	ldr	r3, [r3, #0]
 800b0c0:	2236      	movs	r2, #54	@ 0x36
 800b0c2:	615a      	str	r2, [r3, #20]
 800b0c4:	687b      	ldr	r3, [r7, #4]
 800b0c6:	681b      	ldr	r3, [r3, #0]
 800b0c8:	683a      	ldr	r2, [r7, #0]
 800b0ca:	619a      	str	r2, [r3, #24]
 800b0cc:	687b      	ldr	r3, [r7, #4]
 800b0ce:	681b      	ldr	r3, [r3, #0]
 800b0d0:	681b      	ldr	r3, [r3, #0]
 800b0d2:	6878      	ldr	r0, [r7, #4]
 800b0d4:	4798      	blx	r3

  prec = 0;
 800b0d6:	2300      	movs	r3, #0
 800b0d8:	617b      	str	r3, [r7, #20]
  for (i = 0; i <= cinfo->lim_Se; i++) {
 800b0da:	2300      	movs	r3, #0
 800b0dc:	613b      	str	r3, [r7, #16]
 800b0de:	e010      	b.n	800b102 <emit_dqt+0x62>
    if (qtbl->quantval[cinfo->natural_order[i]] > 255)
 800b0e0:	687b      	ldr	r3, [r7, #4]
 800b0e2:	f8d3 217c 	ldr.w	r2, [r3, #380]	@ 0x17c
 800b0e6:	693b      	ldr	r3, [r7, #16]
 800b0e8:	009b      	lsls	r3, r3, #2
 800b0ea:	4413      	add	r3, r2
 800b0ec:	681a      	ldr	r2, [r3, #0]
 800b0ee:	68fb      	ldr	r3, [r7, #12]
 800b0f0:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
 800b0f4:	2bff      	cmp	r3, #255	@ 0xff
 800b0f6:	d901      	bls.n	800b0fc <emit_dqt+0x5c>
      prec = 1;
 800b0f8:	2301      	movs	r3, #1
 800b0fa:	617b      	str	r3, [r7, #20]
  for (i = 0; i <= cinfo->lim_Se; i++) {
 800b0fc:	693b      	ldr	r3, [r7, #16]
 800b0fe:	3301      	adds	r3, #1
 800b100:	613b      	str	r3, [r7, #16]
 800b102:	687b      	ldr	r3, [r7, #4]
 800b104:	f8d3 3180 	ldr.w	r3, [r3, #384]	@ 0x180
 800b108:	693a      	ldr	r2, [r7, #16]
 800b10a:	429a      	cmp	r2, r3
 800b10c:	dde8      	ble.n	800b0e0 <emit_dqt+0x40>
  }

  if (! qtbl->sent_table) {
 800b10e:	68fb      	ldr	r3, [r7, #12]
 800b110:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800b114:	2b00      	cmp	r3, #0
 800b116:	d147      	bne.n	800b1a8 <emit_dqt+0x108>
    emit_marker(cinfo, M_DQT);
 800b118:	21db      	movs	r1, #219	@ 0xdb
 800b11a:	6878      	ldr	r0, [r7, #4]
 800b11c:	f7ff ff97 	bl	800b04e <emit_marker>

    emit_2bytes(cinfo,
 800b120:	697b      	ldr	r3, [r7, #20]
 800b122:	2b00      	cmp	r3, #0
 800b124:	d006      	beq.n	800b134 <emit_dqt+0x94>
      prec ? cinfo->lim_Se * 2 + 2 + 1 + 2 : cinfo->lim_Se + 1 + 1 + 2);
 800b126:	687b      	ldr	r3, [r7, #4]
 800b128:	f8d3 3180 	ldr.w	r3, [r3, #384]	@ 0x180
 800b12c:	3301      	adds	r3, #1
 800b12e:	005b      	lsls	r3, r3, #1
    emit_2bytes(cinfo,
 800b130:	3303      	adds	r3, #3
 800b132:	e003      	b.n	800b13c <emit_dqt+0x9c>
      prec ? cinfo->lim_Se * 2 + 2 + 1 + 2 : cinfo->lim_Se + 1 + 1 + 2);
 800b134:	687b      	ldr	r3, [r7, #4]
 800b136:	f8d3 3180 	ldr.w	r3, [r3, #384]	@ 0x180
    emit_2bytes(cinfo,
 800b13a:	3304      	adds	r3, #4
 800b13c:	4619      	mov	r1, r3
 800b13e:	6878      	ldr	r0, [r7, #4]
 800b140:	f7ff ff98 	bl	800b074 <emit_2bytes>

    emit_byte(cinfo, index + (prec<<4));
 800b144:	697b      	ldr	r3, [r7, #20]
 800b146:	011a      	lsls	r2, r3, #4
 800b148:	683b      	ldr	r3, [r7, #0]
 800b14a:	4413      	add	r3, r2
 800b14c:	4619      	mov	r1, r3
 800b14e:	6878      	ldr	r0, [r7, #4]
 800b150:	f7ff ff50 	bl	800aff4 <emit_byte>

    for (i = 0; i <= cinfo->lim_Se; i++) {
 800b154:	2300      	movs	r3, #0
 800b156:	613b      	str	r3, [r7, #16]
 800b158:	e01c      	b.n	800b194 <emit_dqt+0xf4>
      /* The table entries must be emitted in zigzag order. */
      unsigned int qval = qtbl->quantval[cinfo->natural_order[i]];
 800b15a:	687b      	ldr	r3, [r7, #4]
 800b15c:	f8d3 217c 	ldr.w	r2, [r3, #380]	@ 0x17c
 800b160:	693b      	ldr	r3, [r7, #16]
 800b162:	009b      	lsls	r3, r3, #2
 800b164:	4413      	add	r3, r2
 800b166:	681a      	ldr	r2, [r3, #0]
 800b168:	68fb      	ldr	r3, [r7, #12]
 800b16a:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
 800b16e:	60bb      	str	r3, [r7, #8]
      if (prec)
 800b170:	697b      	ldr	r3, [r7, #20]
 800b172:	2b00      	cmp	r3, #0
 800b174:	d005      	beq.n	800b182 <emit_dqt+0xe2>
	emit_byte(cinfo, (int) (qval >> 8));
 800b176:	68bb      	ldr	r3, [r7, #8]
 800b178:	0a1b      	lsrs	r3, r3, #8
 800b17a:	4619      	mov	r1, r3
 800b17c:	6878      	ldr	r0, [r7, #4]
 800b17e:	f7ff ff39 	bl	800aff4 <emit_byte>
      emit_byte(cinfo, (int) (qval & 0xFF));
 800b182:	68bb      	ldr	r3, [r7, #8]
 800b184:	b2db      	uxtb	r3, r3
 800b186:	4619      	mov	r1, r3
 800b188:	6878      	ldr	r0, [r7, #4]
 800b18a:	f7ff ff33 	bl	800aff4 <emit_byte>
    for (i = 0; i <= cinfo->lim_Se; i++) {
 800b18e:	693b      	ldr	r3, [r7, #16]
 800b190:	3301      	adds	r3, #1
 800b192:	613b      	str	r3, [r7, #16]
 800b194:	687b      	ldr	r3, [r7, #4]
 800b196:	f8d3 3180 	ldr.w	r3, [r3, #384]	@ 0x180
 800b19a:	693a      	ldr	r2, [r7, #16]
 800b19c:	429a      	cmp	r2, r3
 800b19e:	dddc      	ble.n	800b15a <emit_dqt+0xba>
    }

    qtbl->sent_table = TRUE;
 800b1a0:	68fb      	ldr	r3, [r7, #12]
 800b1a2:	2201      	movs	r2, #1
 800b1a4:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  }

  return prec;
 800b1a8:	697b      	ldr	r3, [r7, #20]
}
 800b1aa:	4618      	mov	r0, r3
 800b1ac:	3718      	adds	r7, #24
 800b1ae:	46bd      	mov	sp, r7
 800b1b0:	bd80      	pop	{r7, pc}

0800b1b2 <emit_dht>:


LOCAL(void)
emit_dht (j_compress_ptr cinfo, int index, boolean is_ac)
/* Emit a DHT marker */
{
 800b1b2:	b580      	push	{r7, lr}
 800b1b4:	b088      	sub	sp, #32
 800b1b6:	af00      	add	r7, sp, #0
 800b1b8:	60f8      	str	r0, [r7, #12]
 800b1ba:	60b9      	str	r1, [r7, #8]
 800b1bc:	607a      	str	r2, [r7, #4]
  JHUFF_TBL * htbl;
  int length, i;
  
  if (is_ac) {
 800b1be:	687b      	ldr	r3, [r7, #4]
 800b1c0:	2b00      	cmp	r3, #0
 800b1c2:	d009      	beq.n	800b1d8 <emit_dht+0x26>
    htbl = cinfo->ac_huff_tbl_ptrs[index];
 800b1c4:	68fb      	ldr	r3, [r7, #12]
 800b1c6:	68ba      	ldr	r2, [r7, #8]
 800b1c8:	3222      	adds	r2, #34	@ 0x22
 800b1ca:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800b1ce:	61fb      	str	r3, [r7, #28]
    index += 0x10;		/* output index has AC bit set */
 800b1d0:	68bb      	ldr	r3, [r7, #8]
 800b1d2:	3310      	adds	r3, #16
 800b1d4:	60bb      	str	r3, [r7, #8]
 800b1d6:	e005      	b.n	800b1e4 <emit_dht+0x32>
  } else {
    htbl = cinfo->dc_huff_tbl_ptrs[index];
 800b1d8:	68fb      	ldr	r3, [r7, #12]
 800b1da:	68ba      	ldr	r2, [r7, #8]
 800b1dc:	321e      	adds	r2, #30
 800b1de:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800b1e2:	61fb      	str	r3, [r7, #28]
  }

  if (htbl == NULL)
 800b1e4:	69fb      	ldr	r3, [r7, #28]
 800b1e6:	2b00      	cmp	r3, #0
 800b1e8:	d10c      	bne.n	800b204 <emit_dht+0x52>
    ERREXIT1(cinfo, JERR_NO_HUFF_TABLE, index);
 800b1ea:	68fb      	ldr	r3, [r7, #12]
 800b1ec:	681b      	ldr	r3, [r3, #0]
 800b1ee:	2234      	movs	r2, #52	@ 0x34
 800b1f0:	615a      	str	r2, [r3, #20]
 800b1f2:	68fb      	ldr	r3, [r7, #12]
 800b1f4:	681b      	ldr	r3, [r3, #0]
 800b1f6:	68ba      	ldr	r2, [r7, #8]
 800b1f8:	619a      	str	r2, [r3, #24]
 800b1fa:	68fb      	ldr	r3, [r7, #12]
 800b1fc:	681b      	ldr	r3, [r3, #0]
 800b1fe:	681b      	ldr	r3, [r3, #0]
 800b200:	68f8      	ldr	r0, [r7, #12]
 800b202:	4798      	blx	r3
  
  if (! htbl->sent_table) {
 800b204:	69fb      	ldr	r3, [r7, #28]
 800b206:	f8d3 3114 	ldr.w	r3, [r3, #276]	@ 0x114
 800b20a:	2b00      	cmp	r3, #0
 800b20c:	d148      	bne.n	800b2a0 <emit_dht+0xee>
    emit_marker(cinfo, M_DHT);
 800b20e:	21c4      	movs	r1, #196	@ 0xc4
 800b210:	68f8      	ldr	r0, [r7, #12]
 800b212:	f7ff ff1c 	bl	800b04e <emit_marker>
    
    length = 0;
 800b216:	2300      	movs	r3, #0
 800b218:	61bb      	str	r3, [r7, #24]
    for (i = 1; i <= 16; i++)
 800b21a:	2301      	movs	r3, #1
 800b21c:	617b      	str	r3, [r7, #20]
 800b21e:	e00a      	b.n	800b236 <emit_dht+0x84>
      length += htbl->bits[i];
 800b220:	69fa      	ldr	r2, [r7, #28]
 800b222:	697b      	ldr	r3, [r7, #20]
 800b224:	4413      	add	r3, r2
 800b226:	781b      	ldrb	r3, [r3, #0]
 800b228:	461a      	mov	r2, r3
 800b22a:	69bb      	ldr	r3, [r7, #24]
 800b22c:	4413      	add	r3, r2
 800b22e:	61bb      	str	r3, [r7, #24]
    for (i = 1; i <= 16; i++)
 800b230:	697b      	ldr	r3, [r7, #20]
 800b232:	3301      	adds	r3, #1
 800b234:	617b      	str	r3, [r7, #20]
 800b236:	697b      	ldr	r3, [r7, #20]
 800b238:	2b10      	cmp	r3, #16
 800b23a:	ddf1      	ble.n	800b220 <emit_dht+0x6e>
    
    emit_2bytes(cinfo, length + 2 + 1 + 16);
 800b23c:	69bb      	ldr	r3, [r7, #24]
 800b23e:	3313      	adds	r3, #19
 800b240:	4619      	mov	r1, r3
 800b242:	68f8      	ldr	r0, [r7, #12]
 800b244:	f7ff ff16 	bl	800b074 <emit_2bytes>
    emit_byte(cinfo, index);
 800b248:	68b9      	ldr	r1, [r7, #8]
 800b24a:	68f8      	ldr	r0, [r7, #12]
 800b24c:	f7ff fed2 	bl	800aff4 <emit_byte>
    
    for (i = 1; i <= 16; i++)
 800b250:	2301      	movs	r3, #1
 800b252:	617b      	str	r3, [r7, #20]
 800b254:	e00a      	b.n	800b26c <emit_dht+0xba>
      emit_byte(cinfo, htbl->bits[i]);
 800b256:	69fa      	ldr	r2, [r7, #28]
 800b258:	697b      	ldr	r3, [r7, #20]
 800b25a:	4413      	add	r3, r2
 800b25c:	781b      	ldrb	r3, [r3, #0]
 800b25e:	4619      	mov	r1, r3
 800b260:	68f8      	ldr	r0, [r7, #12]
 800b262:	f7ff fec7 	bl	800aff4 <emit_byte>
    for (i = 1; i <= 16; i++)
 800b266:	697b      	ldr	r3, [r7, #20]
 800b268:	3301      	adds	r3, #1
 800b26a:	617b      	str	r3, [r7, #20]
 800b26c:	697b      	ldr	r3, [r7, #20]
 800b26e:	2b10      	cmp	r3, #16
 800b270:	ddf1      	ble.n	800b256 <emit_dht+0xa4>
    
    for (i = 0; i < length; i++)
 800b272:	2300      	movs	r3, #0
 800b274:	617b      	str	r3, [r7, #20]
 800b276:	e00b      	b.n	800b290 <emit_dht+0xde>
      emit_byte(cinfo, htbl->huffval[i]);
 800b278:	69fa      	ldr	r2, [r7, #28]
 800b27a:	697b      	ldr	r3, [r7, #20]
 800b27c:	4413      	add	r3, r2
 800b27e:	3311      	adds	r3, #17
 800b280:	781b      	ldrb	r3, [r3, #0]
 800b282:	4619      	mov	r1, r3
 800b284:	68f8      	ldr	r0, [r7, #12]
 800b286:	f7ff feb5 	bl	800aff4 <emit_byte>
    for (i = 0; i < length; i++)
 800b28a:	697b      	ldr	r3, [r7, #20]
 800b28c:	3301      	adds	r3, #1
 800b28e:	617b      	str	r3, [r7, #20]
 800b290:	697a      	ldr	r2, [r7, #20]
 800b292:	69bb      	ldr	r3, [r7, #24]
 800b294:	429a      	cmp	r2, r3
 800b296:	dbef      	blt.n	800b278 <emit_dht+0xc6>
    
    htbl->sent_table = TRUE;
 800b298:	69fb      	ldr	r3, [r7, #28]
 800b29a:	2201      	movs	r2, #1
 800b29c:	f8c3 2114 	str.w	r2, [r3, #276]	@ 0x114
  }
}
 800b2a0:	bf00      	nop
 800b2a2:	3720      	adds	r7, #32
 800b2a4:	46bd      	mov	sp, r7
 800b2a6:	bd80      	pop	{r7, pc}

0800b2a8 <emit_dac>:
LOCAL(void)
emit_dac (j_compress_ptr cinfo)
/* Emit a DAC marker */
/* Since the useful info is so small, we want to emit all the tables in */
/* one DAC marker.  Therefore this routine does its own scan of the table. */
{
 800b2a8:	b580      	push	{r7, lr}
 800b2aa:	b08e      	sub	sp, #56	@ 0x38
 800b2ac:	af00      	add	r7, sp, #0
 800b2ae:	6078      	str	r0, [r7, #4]
  char dc_in_use[NUM_ARITH_TBLS];
  char ac_in_use[NUM_ARITH_TBLS];
  int length, i;
  jpeg_component_info *compptr;

  for (i = 0; i < NUM_ARITH_TBLS; i++)
 800b2b0:	2300      	movs	r3, #0
 800b2b2:	633b      	str	r3, [r7, #48]	@ 0x30
 800b2b4:	e013      	b.n	800b2de <emit_dac+0x36>
    dc_in_use[i] = ac_in_use[i] = 0;
 800b2b6:	f107 020c 	add.w	r2, r7, #12
 800b2ba:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b2bc:	4413      	add	r3, r2
 800b2be:	2200      	movs	r2, #0
 800b2c0:	701a      	strb	r2, [r3, #0]
 800b2c2:	f107 020c 	add.w	r2, r7, #12
 800b2c6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b2c8:	4413      	add	r3, r2
 800b2ca:	7819      	ldrb	r1, [r3, #0]
 800b2cc:	f107 021c 	add.w	r2, r7, #28
 800b2d0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b2d2:	4413      	add	r3, r2
 800b2d4:	460a      	mov	r2, r1
 800b2d6:	701a      	strb	r2, [r3, #0]
  for (i = 0; i < NUM_ARITH_TBLS; i++)
 800b2d8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b2da:	3301      	adds	r3, #1
 800b2dc:	633b      	str	r3, [r7, #48]	@ 0x30
 800b2de:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b2e0:	2b0f      	cmp	r3, #15
 800b2e2:	dde8      	ble.n	800b2b6 <emit_dac+0xe>

  for (i = 0; i < cinfo->comps_in_scan; i++) {
 800b2e4:	2300      	movs	r3, #0
 800b2e6:	633b      	str	r3, [r7, #48]	@ 0x30
 800b2e8:	e026      	b.n	800b338 <emit_dac+0x90>
    compptr = cinfo->cur_comp_info[i];
 800b2ea:	687a      	ldr	r2, [r7, #4]
 800b2ec:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b2ee:	3348      	adds	r3, #72	@ 0x48
 800b2f0:	009b      	lsls	r3, r3, #2
 800b2f2:	4413      	add	r3, r2
 800b2f4:	685b      	ldr	r3, [r3, #4]
 800b2f6:	62fb      	str	r3, [r7, #44]	@ 0x2c
    /* DC needs no table for refinement scan */
    if (cinfo->Ss == 0 && cinfo->Ah == 0)
 800b2f8:	687b      	ldr	r3, [r7, #4]
 800b2fa:	f8d3 3168 	ldr.w	r3, [r3, #360]	@ 0x168
 800b2fe:	2b00      	cmp	r3, #0
 800b300:	d10b      	bne.n	800b31a <emit_dac+0x72>
 800b302:	687b      	ldr	r3, [r7, #4]
 800b304:	f8d3 3170 	ldr.w	r3, [r3, #368]	@ 0x170
 800b308:	2b00      	cmp	r3, #0
 800b30a:	d106      	bne.n	800b31a <emit_dac+0x72>
      dc_in_use[compptr->dc_tbl_no] = 1;
 800b30c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800b30e:	695b      	ldr	r3, [r3, #20]
 800b310:	3338      	adds	r3, #56	@ 0x38
 800b312:	443b      	add	r3, r7
 800b314:	2201      	movs	r2, #1
 800b316:	f803 2c1c 	strb.w	r2, [r3, #-28]
    /* AC needs no table when not present */
    if (cinfo->Se)
 800b31a:	687b      	ldr	r3, [r7, #4]
 800b31c:	f8d3 316c 	ldr.w	r3, [r3, #364]	@ 0x16c
 800b320:	2b00      	cmp	r3, #0
 800b322:	d006      	beq.n	800b332 <emit_dac+0x8a>
      ac_in_use[compptr->ac_tbl_no] = 1;
 800b324:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800b326:	699b      	ldr	r3, [r3, #24]
 800b328:	3338      	adds	r3, #56	@ 0x38
 800b32a:	443b      	add	r3, r7
 800b32c:	2201      	movs	r2, #1
 800b32e:	f803 2c2c 	strb.w	r2, [r3, #-44]
  for (i = 0; i < cinfo->comps_in_scan; i++) {
 800b332:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b334:	3301      	adds	r3, #1
 800b336:	633b      	str	r3, [r7, #48]	@ 0x30
 800b338:	687b      	ldr	r3, [r7, #4]
 800b33a:	f8d3 3120 	ldr.w	r3, [r3, #288]	@ 0x120
 800b33e:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800b340:	429a      	cmp	r2, r3
 800b342:	dbd2      	blt.n	800b2ea <emit_dac+0x42>
  }

  length = 0;
 800b344:	2300      	movs	r3, #0
 800b346:	637b      	str	r3, [r7, #52]	@ 0x34
  for (i = 0; i < NUM_ARITH_TBLS; i++)
 800b348:	2300      	movs	r3, #0
 800b34a:	633b      	str	r3, [r7, #48]	@ 0x30
 800b34c:	e011      	b.n	800b372 <emit_dac+0xca>
    length += dc_in_use[i] + ac_in_use[i];
 800b34e:	f107 021c 	add.w	r2, r7, #28
 800b352:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b354:	4413      	add	r3, r2
 800b356:	781b      	ldrb	r3, [r3, #0]
 800b358:	4619      	mov	r1, r3
 800b35a:	f107 020c 	add.w	r2, r7, #12
 800b35e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b360:	4413      	add	r3, r2
 800b362:	781b      	ldrb	r3, [r3, #0]
 800b364:	440b      	add	r3, r1
 800b366:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800b368:	4413      	add	r3, r2
 800b36a:	637b      	str	r3, [r7, #52]	@ 0x34
  for (i = 0; i < NUM_ARITH_TBLS; i++)
 800b36c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b36e:	3301      	adds	r3, #1
 800b370:	633b      	str	r3, [r7, #48]	@ 0x30
 800b372:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b374:	2b0f      	cmp	r3, #15
 800b376:	ddea      	ble.n	800b34e <emit_dac+0xa6>

  if (length) {
 800b378:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800b37a:	2b00      	cmp	r3, #0
 800b37c:	d045      	beq.n	800b40a <emit_dac+0x162>
    emit_marker(cinfo, M_DAC);
 800b37e:	21cc      	movs	r1, #204	@ 0xcc
 800b380:	6878      	ldr	r0, [r7, #4]
 800b382:	f7ff fe64 	bl	800b04e <emit_marker>

    emit_2bytes(cinfo, length*2 + 2);
 800b386:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800b388:	3301      	adds	r3, #1
 800b38a:	005b      	lsls	r3, r3, #1
 800b38c:	4619      	mov	r1, r3
 800b38e:	6878      	ldr	r0, [r7, #4]
 800b390:	f7ff fe70 	bl	800b074 <emit_2bytes>

    for (i = 0; i < NUM_ARITH_TBLS; i++) {
 800b394:	2300      	movs	r3, #0
 800b396:	633b      	str	r3, [r7, #48]	@ 0x30
 800b398:	e034      	b.n	800b404 <emit_dac+0x15c>
      if (dc_in_use[i]) {
 800b39a:	f107 021c 	add.w	r2, r7, #28
 800b39e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b3a0:	4413      	add	r3, r2
 800b3a2:	781b      	ldrb	r3, [r3, #0]
 800b3a4:	2b00      	cmp	r3, #0
 800b3a6:	d014      	beq.n	800b3d2 <emit_dac+0x12a>
	emit_byte(cinfo, i);
 800b3a8:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 800b3aa:	6878      	ldr	r0, [r7, #4]
 800b3ac:	f7ff fe22 	bl	800aff4 <emit_byte>
	emit_byte(cinfo, cinfo->arith_dc_L[i] + (cinfo->arith_dc_U[i]<<4));
 800b3b0:	687a      	ldr	r2, [r7, #4]
 800b3b2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b3b4:	4413      	add	r3, r2
 800b3b6:	3398      	adds	r3, #152	@ 0x98
 800b3b8:	781b      	ldrb	r3, [r3, #0]
 800b3ba:	4619      	mov	r1, r3
 800b3bc:	687a      	ldr	r2, [r7, #4]
 800b3be:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b3c0:	4413      	add	r3, r2
 800b3c2:	33a8      	adds	r3, #168	@ 0xa8
 800b3c4:	781b      	ldrb	r3, [r3, #0]
 800b3c6:	011b      	lsls	r3, r3, #4
 800b3c8:	440b      	add	r3, r1
 800b3ca:	4619      	mov	r1, r3
 800b3cc:	6878      	ldr	r0, [r7, #4]
 800b3ce:	f7ff fe11 	bl	800aff4 <emit_byte>
      }
      if (ac_in_use[i]) {
 800b3d2:	f107 020c 	add.w	r2, r7, #12
 800b3d6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b3d8:	4413      	add	r3, r2
 800b3da:	781b      	ldrb	r3, [r3, #0]
 800b3dc:	2b00      	cmp	r3, #0
 800b3de:	d00e      	beq.n	800b3fe <emit_dac+0x156>
	emit_byte(cinfo, i + 0x10);
 800b3e0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b3e2:	3310      	adds	r3, #16
 800b3e4:	4619      	mov	r1, r3
 800b3e6:	6878      	ldr	r0, [r7, #4]
 800b3e8:	f7ff fe04 	bl	800aff4 <emit_byte>
	emit_byte(cinfo, cinfo->arith_ac_K[i]);
 800b3ec:	687a      	ldr	r2, [r7, #4]
 800b3ee:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b3f0:	4413      	add	r3, r2
 800b3f2:	33b8      	adds	r3, #184	@ 0xb8
 800b3f4:	781b      	ldrb	r3, [r3, #0]
 800b3f6:	4619      	mov	r1, r3
 800b3f8:	6878      	ldr	r0, [r7, #4]
 800b3fa:	f7ff fdfb 	bl	800aff4 <emit_byte>
    for (i = 0; i < NUM_ARITH_TBLS; i++) {
 800b3fe:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b400:	3301      	adds	r3, #1
 800b402:	633b      	str	r3, [r7, #48]	@ 0x30
 800b404:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b406:	2b0f      	cmp	r3, #15
 800b408:	ddc7      	ble.n	800b39a <emit_dac+0xf2>
      }
    }
  }
#endif /* C_ARITH_CODING_SUPPORTED */
}
 800b40a:	bf00      	nop
 800b40c:	3738      	adds	r7, #56	@ 0x38
 800b40e:	46bd      	mov	sp, r7
 800b410:	bd80      	pop	{r7, pc}

0800b412 <emit_dri>:


LOCAL(void)
emit_dri (j_compress_ptr cinfo)
/* Emit a DRI marker */
{
 800b412:	b580      	push	{r7, lr}
 800b414:	b082      	sub	sp, #8
 800b416:	af00      	add	r7, sp, #0
 800b418:	6078      	str	r0, [r7, #4]
  emit_marker(cinfo, M_DRI);
 800b41a:	21dd      	movs	r1, #221	@ 0xdd
 800b41c:	6878      	ldr	r0, [r7, #4]
 800b41e:	f7ff fe16 	bl	800b04e <emit_marker>
  
  emit_2bytes(cinfo, 4);	/* fixed length */
 800b422:	2104      	movs	r1, #4
 800b424:	6878      	ldr	r0, [r7, #4]
 800b426:	f7ff fe25 	bl	800b074 <emit_2bytes>

  emit_2bytes(cinfo, (int) cinfo->restart_interval);
 800b42a:	687b      	ldr	r3, [r7, #4]
 800b42c:	f8d3 30ec 	ldr.w	r3, [r3, #236]	@ 0xec
 800b430:	4619      	mov	r1, r3
 800b432:	6878      	ldr	r0, [r7, #4]
 800b434:	f7ff fe1e 	bl	800b074 <emit_2bytes>
}
 800b438:	bf00      	nop
 800b43a:	3708      	adds	r7, #8
 800b43c:	46bd      	mov	sp, r7
 800b43e:	bd80      	pop	{r7, pc}

0800b440 <emit_sof>:


LOCAL(void)
emit_sof (j_compress_ptr cinfo, JPEG_MARKER code)
/* Emit a SOF marker */
{
 800b440:	b580      	push	{r7, lr}
 800b442:	b084      	sub	sp, #16
 800b444:	af00      	add	r7, sp, #0
 800b446:	6078      	str	r0, [r7, #4]
 800b448:	460b      	mov	r3, r1
 800b44a:	807b      	strh	r3, [r7, #2]
  int ci;
  jpeg_component_info *compptr;
  
  emit_marker(cinfo, code);
 800b44c:	887b      	ldrh	r3, [r7, #2]
 800b44e:	4619      	mov	r1, r3
 800b450:	6878      	ldr	r0, [r7, #4]
 800b452:	f7ff fdfc 	bl	800b04e <emit_marker>
  
  emit_2bytes(cinfo, 3 * cinfo->num_components + 2 + 5 + 1); /* length */
 800b456:	687b      	ldr	r3, [r7, #4]
 800b458:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 800b45a:	4613      	mov	r3, r2
 800b45c:	005b      	lsls	r3, r3, #1
 800b45e:	4413      	add	r3, r2
 800b460:	3308      	adds	r3, #8
 800b462:	4619      	mov	r1, r3
 800b464:	6878      	ldr	r0, [r7, #4]
 800b466:	f7ff fe05 	bl	800b074 <emit_2bytes>

  /* Make sure image isn't bigger than SOF field can handle */
  if ((long) cinfo->jpeg_height > 65535L ||
 800b46a:	687b      	ldr	r3, [r7, #4]
 800b46c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800b46e:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800b472:	da04      	bge.n	800b47e <emit_sof+0x3e>
      (long) cinfo->jpeg_width > 65535L)
 800b474:	687b      	ldr	r3, [r7, #4]
 800b476:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
  if ((long) cinfo->jpeg_height > 65535L ||
 800b478:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800b47c:	db0d      	blt.n	800b49a <emit_sof+0x5a>
    ERREXIT1(cinfo, JERR_IMAGE_TOO_BIG, (unsigned int) 65535);
 800b47e:	687b      	ldr	r3, [r7, #4]
 800b480:	681b      	ldr	r3, [r3, #0]
 800b482:	222a      	movs	r2, #42	@ 0x2a
 800b484:	615a      	str	r2, [r3, #20]
 800b486:	687b      	ldr	r3, [r7, #4]
 800b488:	681b      	ldr	r3, [r3, #0]
 800b48a:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 800b48e:	619a      	str	r2, [r3, #24]
 800b490:	687b      	ldr	r3, [r7, #4]
 800b492:	681b      	ldr	r3, [r3, #0]
 800b494:	681b      	ldr	r3, [r3, #0]
 800b496:	6878      	ldr	r0, [r7, #4]
 800b498:	4798      	blx	r3

  emit_byte(cinfo, cinfo->data_precision);
 800b49a:	687b      	ldr	r3, [r7, #4]
 800b49c:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800b49e:	4619      	mov	r1, r3
 800b4a0:	6878      	ldr	r0, [r7, #4]
 800b4a2:	f7ff fda7 	bl	800aff4 <emit_byte>
  emit_2bytes(cinfo, (int) cinfo->jpeg_height);
 800b4a6:	687b      	ldr	r3, [r7, #4]
 800b4a8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800b4aa:	4619      	mov	r1, r3
 800b4ac:	6878      	ldr	r0, [r7, #4]
 800b4ae:	f7ff fde1 	bl	800b074 <emit_2bytes>
  emit_2bytes(cinfo, (int) cinfo->jpeg_width);
 800b4b2:	687b      	ldr	r3, [r7, #4]
 800b4b4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800b4b6:	4619      	mov	r1, r3
 800b4b8:	6878      	ldr	r0, [r7, #4]
 800b4ba:	f7ff fddb 	bl	800b074 <emit_2bytes>

  emit_byte(cinfo, cinfo->num_components);
 800b4be:	687b      	ldr	r3, [r7, #4]
 800b4c0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800b4c2:	4619      	mov	r1, r3
 800b4c4:	6878      	ldr	r0, [r7, #4]
 800b4c6:	f7ff fd95 	bl	800aff4 <emit_byte>

  for (ci = 0, compptr = cinfo->comp_info; ci < cinfo->num_components;
 800b4ca:	2300      	movs	r3, #0
 800b4cc:	60fb      	str	r3, [r7, #12]
 800b4ce:	687b      	ldr	r3, [r7, #4]
 800b4d0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800b4d2:	60bb      	str	r3, [r7, #8]
 800b4d4:	e01b      	b.n	800b50e <emit_sof+0xce>
       ci++, compptr++) {
    emit_byte(cinfo, compptr->component_id);
 800b4d6:	68bb      	ldr	r3, [r7, #8]
 800b4d8:	681b      	ldr	r3, [r3, #0]
 800b4da:	4619      	mov	r1, r3
 800b4dc:	6878      	ldr	r0, [r7, #4]
 800b4de:	f7ff fd89 	bl	800aff4 <emit_byte>
    emit_byte(cinfo, (compptr->h_samp_factor << 4) + compptr->v_samp_factor);
 800b4e2:	68bb      	ldr	r3, [r7, #8]
 800b4e4:	689b      	ldr	r3, [r3, #8]
 800b4e6:	011a      	lsls	r2, r3, #4
 800b4e8:	68bb      	ldr	r3, [r7, #8]
 800b4ea:	68db      	ldr	r3, [r3, #12]
 800b4ec:	4413      	add	r3, r2
 800b4ee:	4619      	mov	r1, r3
 800b4f0:	6878      	ldr	r0, [r7, #4]
 800b4f2:	f7ff fd7f 	bl	800aff4 <emit_byte>
    emit_byte(cinfo, compptr->quant_tbl_no);
 800b4f6:	68bb      	ldr	r3, [r7, #8]
 800b4f8:	691b      	ldr	r3, [r3, #16]
 800b4fa:	4619      	mov	r1, r3
 800b4fc:	6878      	ldr	r0, [r7, #4]
 800b4fe:	f7ff fd79 	bl	800aff4 <emit_byte>
       ci++, compptr++) {
 800b502:	68fb      	ldr	r3, [r7, #12]
 800b504:	3301      	adds	r3, #1
 800b506:	60fb      	str	r3, [r7, #12]
 800b508:	68bb      	ldr	r3, [r7, #8]
 800b50a:	3358      	adds	r3, #88	@ 0x58
 800b50c:	60bb      	str	r3, [r7, #8]
  for (ci = 0, compptr = cinfo->comp_info; ci < cinfo->num_components;
 800b50e:	687b      	ldr	r3, [r7, #4]
 800b510:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800b512:	68fa      	ldr	r2, [r7, #12]
 800b514:	429a      	cmp	r2, r3
 800b516:	dbde      	blt.n	800b4d6 <emit_sof+0x96>
  }
}
 800b518:	bf00      	nop
 800b51a:	bf00      	nop
 800b51c:	3710      	adds	r7, #16
 800b51e:	46bd      	mov	sp, r7
 800b520:	bd80      	pop	{r7, pc}

0800b522 <emit_sos>:


LOCAL(void)
emit_sos (j_compress_ptr cinfo)
/* Emit a SOS marker */
{
 800b522:	b580      	push	{r7, lr}
 800b524:	b086      	sub	sp, #24
 800b526:	af00      	add	r7, sp, #0
 800b528:	6078      	str	r0, [r7, #4]
  int i, td, ta;
  jpeg_component_info *compptr;
  
  emit_marker(cinfo, M_SOS);
 800b52a:	21da      	movs	r1, #218	@ 0xda
 800b52c:	6878      	ldr	r0, [r7, #4]
 800b52e:	f7ff fd8e 	bl	800b04e <emit_marker>
  
  emit_2bytes(cinfo, 2 * cinfo->comps_in_scan + 2 + 1 + 3); /* length */
 800b532:	687b      	ldr	r3, [r7, #4]
 800b534:	f8d3 3120 	ldr.w	r3, [r3, #288]	@ 0x120
 800b538:	3303      	adds	r3, #3
 800b53a:	005b      	lsls	r3, r3, #1
 800b53c:	4619      	mov	r1, r3
 800b53e:	6878      	ldr	r0, [r7, #4]
 800b540:	f7ff fd98 	bl	800b074 <emit_2bytes>
  
  emit_byte(cinfo, cinfo->comps_in_scan);
 800b544:	687b      	ldr	r3, [r7, #4]
 800b546:	f8d3 3120 	ldr.w	r3, [r3, #288]	@ 0x120
 800b54a:	4619      	mov	r1, r3
 800b54c:	6878      	ldr	r0, [r7, #4]
 800b54e:	f7ff fd51 	bl	800aff4 <emit_byte>
  
  for (i = 0; i < cinfo->comps_in_scan; i++) {
 800b552:	2300      	movs	r3, #0
 800b554:	617b      	str	r3, [r7, #20]
 800b556:	e030      	b.n	800b5ba <emit_sos+0x98>
    compptr = cinfo->cur_comp_info[i];
 800b558:	687a      	ldr	r2, [r7, #4]
 800b55a:	697b      	ldr	r3, [r7, #20]
 800b55c:	3348      	adds	r3, #72	@ 0x48
 800b55e:	009b      	lsls	r3, r3, #2
 800b560:	4413      	add	r3, r2
 800b562:	685b      	ldr	r3, [r3, #4]
 800b564:	613b      	str	r3, [r7, #16]
    emit_byte(cinfo, compptr->component_id);
 800b566:	693b      	ldr	r3, [r7, #16]
 800b568:	681b      	ldr	r3, [r3, #0]
 800b56a:	4619      	mov	r1, r3
 800b56c:	6878      	ldr	r0, [r7, #4]
 800b56e:	f7ff fd41 	bl	800aff4 <emit_byte>
    /* We emit 0 for unused field(s); this is recommended by the P&M text
     * but does not seem to be specified in the standard.
     */

    /* DC needs no table for refinement scan */
    td = cinfo->Ss == 0 && cinfo->Ah == 0 ? compptr->dc_tbl_no : 0;
 800b572:	687b      	ldr	r3, [r7, #4]
 800b574:	f8d3 3168 	ldr.w	r3, [r3, #360]	@ 0x168
 800b578:	2b00      	cmp	r3, #0
 800b57a:	d107      	bne.n	800b58c <emit_sos+0x6a>
 800b57c:	687b      	ldr	r3, [r7, #4]
 800b57e:	f8d3 3170 	ldr.w	r3, [r3, #368]	@ 0x170
 800b582:	2b00      	cmp	r3, #0
 800b584:	d102      	bne.n	800b58c <emit_sos+0x6a>
 800b586:	693b      	ldr	r3, [r7, #16]
 800b588:	695b      	ldr	r3, [r3, #20]
 800b58a:	e000      	b.n	800b58e <emit_sos+0x6c>
 800b58c:	2300      	movs	r3, #0
 800b58e:	60fb      	str	r3, [r7, #12]
    /* AC needs no table when not present */
    ta = cinfo->Se ? compptr->ac_tbl_no : 0;
 800b590:	687b      	ldr	r3, [r7, #4]
 800b592:	f8d3 316c 	ldr.w	r3, [r3, #364]	@ 0x16c
 800b596:	2b00      	cmp	r3, #0
 800b598:	d002      	beq.n	800b5a0 <emit_sos+0x7e>
 800b59a:	693b      	ldr	r3, [r7, #16]
 800b59c:	699b      	ldr	r3, [r3, #24]
 800b59e:	e000      	b.n	800b5a2 <emit_sos+0x80>
 800b5a0:	2300      	movs	r3, #0
 800b5a2:	60bb      	str	r3, [r7, #8]

    emit_byte(cinfo, (td << 4) + ta);
 800b5a4:	68fb      	ldr	r3, [r7, #12]
 800b5a6:	011a      	lsls	r2, r3, #4
 800b5a8:	68bb      	ldr	r3, [r7, #8]
 800b5aa:	4413      	add	r3, r2
 800b5ac:	4619      	mov	r1, r3
 800b5ae:	6878      	ldr	r0, [r7, #4]
 800b5b0:	f7ff fd20 	bl	800aff4 <emit_byte>
  for (i = 0; i < cinfo->comps_in_scan; i++) {
 800b5b4:	697b      	ldr	r3, [r7, #20]
 800b5b6:	3301      	adds	r3, #1
 800b5b8:	617b      	str	r3, [r7, #20]
 800b5ba:	687b      	ldr	r3, [r7, #4]
 800b5bc:	f8d3 3120 	ldr.w	r3, [r3, #288]	@ 0x120
 800b5c0:	697a      	ldr	r2, [r7, #20]
 800b5c2:	429a      	cmp	r2, r3
 800b5c4:	dbc8      	blt.n	800b558 <emit_sos+0x36>
  }

  emit_byte(cinfo, cinfo->Ss);
 800b5c6:	687b      	ldr	r3, [r7, #4]
 800b5c8:	f8d3 3168 	ldr.w	r3, [r3, #360]	@ 0x168
 800b5cc:	4619      	mov	r1, r3
 800b5ce:	6878      	ldr	r0, [r7, #4]
 800b5d0:	f7ff fd10 	bl	800aff4 <emit_byte>
  emit_byte(cinfo, cinfo->Se);
 800b5d4:	687b      	ldr	r3, [r7, #4]
 800b5d6:	f8d3 316c 	ldr.w	r3, [r3, #364]	@ 0x16c
 800b5da:	4619      	mov	r1, r3
 800b5dc:	6878      	ldr	r0, [r7, #4]
 800b5de:	f7ff fd09 	bl	800aff4 <emit_byte>
  emit_byte(cinfo, (cinfo->Ah << 4) + cinfo->Al);
 800b5e2:	687b      	ldr	r3, [r7, #4]
 800b5e4:	f8d3 3170 	ldr.w	r3, [r3, #368]	@ 0x170
 800b5e8:	011a      	lsls	r2, r3, #4
 800b5ea:	687b      	ldr	r3, [r7, #4]
 800b5ec:	f8d3 3174 	ldr.w	r3, [r3, #372]	@ 0x174
 800b5f0:	4413      	add	r3, r2
 800b5f2:	4619      	mov	r1, r3
 800b5f4:	6878      	ldr	r0, [r7, #4]
 800b5f6:	f7ff fcfd 	bl	800aff4 <emit_byte>
}
 800b5fa:	bf00      	nop
 800b5fc:	3718      	adds	r7, #24
 800b5fe:	46bd      	mov	sp, r7
 800b600:	bd80      	pop	{r7, pc}

0800b602 <emit_pseudo_sos>:


LOCAL(void)
emit_pseudo_sos (j_compress_ptr cinfo)
/* Emit a pseudo SOS marker */
{
 800b602:	b580      	push	{r7, lr}
 800b604:	b082      	sub	sp, #8
 800b606:	af00      	add	r7, sp, #0
 800b608:	6078      	str	r0, [r7, #4]
  emit_marker(cinfo, M_SOS);
 800b60a:	21da      	movs	r1, #218	@ 0xda
 800b60c:	6878      	ldr	r0, [r7, #4]
 800b60e:	f7ff fd1e 	bl	800b04e <emit_marker>
  
  emit_2bytes(cinfo, 2 + 1 + 3); /* length */
 800b612:	2106      	movs	r1, #6
 800b614:	6878      	ldr	r0, [r7, #4]
 800b616:	f7ff fd2d 	bl	800b074 <emit_2bytes>
  
  emit_byte(cinfo, 0); /* Ns */
 800b61a:	2100      	movs	r1, #0
 800b61c:	6878      	ldr	r0, [r7, #4]
 800b61e:	f7ff fce9 	bl	800aff4 <emit_byte>

  emit_byte(cinfo, 0); /* Ss */
 800b622:	2100      	movs	r1, #0
 800b624:	6878      	ldr	r0, [r7, #4]
 800b626:	f7ff fce5 	bl	800aff4 <emit_byte>
  emit_byte(cinfo, cinfo->block_size * cinfo->block_size - 1); /* Se */
 800b62a:	687b      	ldr	r3, [r7, #4]
 800b62c:	f8d3 3178 	ldr.w	r3, [r3, #376]	@ 0x178
 800b630:	687a      	ldr	r2, [r7, #4]
 800b632:	f8d2 2178 	ldr.w	r2, [r2, #376]	@ 0x178
 800b636:	fb02 f303 	mul.w	r3, r2, r3
 800b63a:	3b01      	subs	r3, #1
 800b63c:	4619      	mov	r1, r3
 800b63e:	6878      	ldr	r0, [r7, #4]
 800b640:	f7ff fcd8 	bl	800aff4 <emit_byte>
  emit_byte(cinfo, 0); /* Ah/Al */
 800b644:	2100      	movs	r1, #0
 800b646:	6878      	ldr	r0, [r7, #4]
 800b648:	f7ff fcd4 	bl	800aff4 <emit_byte>
}
 800b64c:	bf00      	nop
 800b64e:	3708      	adds	r7, #8
 800b650:	46bd      	mov	sp, r7
 800b652:	bd80      	pop	{r7, pc}

0800b654 <emit_jfif_app0>:


LOCAL(void)
emit_jfif_app0 (j_compress_ptr cinfo)
/* Emit a JFIF-compliant APP0 marker */
{
 800b654:	b580      	push	{r7, lr}
 800b656:	b082      	sub	sp, #8
 800b658:	af00      	add	r7, sp, #0
 800b65a:	6078      	str	r0, [r7, #4]
   * Ydpu			(2 bytes - dots per unit vertical)
   * Thumbnail X size		(1 byte)
   * Thumbnail Y size		(1 byte)
   */
  
  emit_marker(cinfo, M_APP0);
 800b65c:	21e0      	movs	r1, #224	@ 0xe0
 800b65e:	6878      	ldr	r0, [r7, #4]
 800b660:	f7ff fcf5 	bl	800b04e <emit_marker>
  
  emit_2bytes(cinfo, 2 + 4 + 1 + 2 + 1 + 2 + 2 + 1 + 1); /* length */
 800b664:	2110      	movs	r1, #16
 800b666:	6878      	ldr	r0, [r7, #4]
 800b668:	f7ff fd04 	bl	800b074 <emit_2bytes>

  emit_byte(cinfo, 0x4A);	/* Identifier: ASCII "JFIF" */
 800b66c:	214a      	movs	r1, #74	@ 0x4a
 800b66e:	6878      	ldr	r0, [r7, #4]
 800b670:	f7ff fcc0 	bl	800aff4 <emit_byte>
  emit_byte(cinfo, 0x46);
 800b674:	2146      	movs	r1, #70	@ 0x46
 800b676:	6878      	ldr	r0, [r7, #4]
 800b678:	f7ff fcbc 	bl	800aff4 <emit_byte>
  emit_byte(cinfo, 0x49);
 800b67c:	2149      	movs	r1, #73	@ 0x49
 800b67e:	6878      	ldr	r0, [r7, #4]
 800b680:	f7ff fcb8 	bl	800aff4 <emit_byte>
  emit_byte(cinfo, 0x46);
 800b684:	2146      	movs	r1, #70	@ 0x46
 800b686:	6878      	ldr	r0, [r7, #4]
 800b688:	f7ff fcb4 	bl	800aff4 <emit_byte>
  emit_byte(cinfo, 0);
 800b68c:	2100      	movs	r1, #0
 800b68e:	6878      	ldr	r0, [r7, #4]
 800b690:	f7ff fcb0 	bl	800aff4 <emit_byte>
  emit_byte(cinfo, cinfo->JFIF_major_version); /* Version fields */
 800b694:	687b      	ldr	r3, [r7, #4]
 800b696:	f893 30f8 	ldrb.w	r3, [r3, #248]	@ 0xf8
 800b69a:	4619      	mov	r1, r3
 800b69c:	6878      	ldr	r0, [r7, #4]
 800b69e:	f7ff fca9 	bl	800aff4 <emit_byte>
  emit_byte(cinfo, cinfo->JFIF_minor_version);
 800b6a2:	687b      	ldr	r3, [r7, #4]
 800b6a4:	f893 30f9 	ldrb.w	r3, [r3, #249]	@ 0xf9
 800b6a8:	4619      	mov	r1, r3
 800b6aa:	6878      	ldr	r0, [r7, #4]
 800b6ac:	f7ff fca2 	bl	800aff4 <emit_byte>
  emit_byte(cinfo, cinfo->density_unit); /* Pixel size information */
 800b6b0:	687b      	ldr	r3, [r7, #4]
 800b6b2:	f893 30fa 	ldrb.w	r3, [r3, #250]	@ 0xfa
 800b6b6:	4619      	mov	r1, r3
 800b6b8:	6878      	ldr	r0, [r7, #4]
 800b6ba:	f7ff fc9b 	bl	800aff4 <emit_byte>
  emit_2bytes(cinfo, (int) cinfo->X_density);
 800b6be:	687b      	ldr	r3, [r7, #4]
 800b6c0:	f8b3 30fc 	ldrh.w	r3, [r3, #252]	@ 0xfc
 800b6c4:	4619      	mov	r1, r3
 800b6c6:	6878      	ldr	r0, [r7, #4]
 800b6c8:	f7ff fcd4 	bl	800b074 <emit_2bytes>
  emit_2bytes(cinfo, (int) cinfo->Y_density);
 800b6cc:	687b      	ldr	r3, [r7, #4]
 800b6ce:	f8b3 30fe 	ldrh.w	r3, [r3, #254]	@ 0xfe
 800b6d2:	4619      	mov	r1, r3
 800b6d4:	6878      	ldr	r0, [r7, #4]
 800b6d6:	f7ff fccd 	bl	800b074 <emit_2bytes>
  emit_byte(cinfo, 0);		/* No thumbnail image */
 800b6da:	2100      	movs	r1, #0
 800b6dc:	6878      	ldr	r0, [r7, #4]
 800b6de:	f7ff fc89 	bl	800aff4 <emit_byte>
  emit_byte(cinfo, 0);
 800b6e2:	2100      	movs	r1, #0
 800b6e4:	6878      	ldr	r0, [r7, #4]
 800b6e6:	f7ff fc85 	bl	800aff4 <emit_byte>
}
 800b6ea:	bf00      	nop
 800b6ec:	3708      	adds	r7, #8
 800b6ee:	46bd      	mov	sp, r7
 800b6f0:	bd80      	pop	{r7, pc}

0800b6f2 <emit_adobe_app14>:


LOCAL(void)
emit_adobe_app14 (j_compress_ptr cinfo)
/* Emit an Adobe APP14 marker */
{
 800b6f2:	b580      	push	{r7, lr}
 800b6f4:	b082      	sub	sp, #8
 800b6f6:	af00      	add	r7, sp, #0
 800b6f8:	6078      	str	r0, [r7, #4]
   * We write the color transform byte as 1 if the JPEG color space is
   * YCbCr, 2 if it's YCCK, 0 otherwise.  Adobe's definition has to do with
   * whether the encoder performed a transformation, which is pretty useless.
   */
  
  emit_marker(cinfo, M_APP14);
 800b6fa:	21ee      	movs	r1, #238	@ 0xee
 800b6fc:	6878      	ldr	r0, [r7, #4]
 800b6fe:	f7ff fca6 	bl	800b04e <emit_marker>
  
  emit_2bytes(cinfo, 2 + 5 + 2 + 2 + 2 + 1); /* length */
 800b702:	210e      	movs	r1, #14
 800b704:	6878      	ldr	r0, [r7, #4]
 800b706:	f7ff fcb5 	bl	800b074 <emit_2bytes>

  emit_byte(cinfo, 0x41);	/* Identifier: ASCII "Adobe" */
 800b70a:	2141      	movs	r1, #65	@ 0x41
 800b70c:	6878      	ldr	r0, [r7, #4]
 800b70e:	f7ff fc71 	bl	800aff4 <emit_byte>
  emit_byte(cinfo, 0x64);
 800b712:	2164      	movs	r1, #100	@ 0x64
 800b714:	6878      	ldr	r0, [r7, #4]
 800b716:	f7ff fc6d 	bl	800aff4 <emit_byte>
  emit_byte(cinfo, 0x6F);
 800b71a:	216f      	movs	r1, #111	@ 0x6f
 800b71c:	6878      	ldr	r0, [r7, #4]
 800b71e:	f7ff fc69 	bl	800aff4 <emit_byte>
  emit_byte(cinfo, 0x62);
 800b722:	2162      	movs	r1, #98	@ 0x62
 800b724:	6878      	ldr	r0, [r7, #4]
 800b726:	f7ff fc65 	bl	800aff4 <emit_byte>
  emit_byte(cinfo, 0x65);
 800b72a:	2165      	movs	r1, #101	@ 0x65
 800b72c:	6878      	ldr	r0, [r7, #4]
 800b72e:	f7ff fc61 	bl	800aff4 <emit_byte>
  emit_2bytes(cinfo, 100);	/* Version */
 800b732:	2164      	movs	r1, #100	@ 0x64
 800b734:	6878      	ldr	r0, [r7, #4]
 800b736:	f7ff fc9d 	bl	800b074 <emit_2bytes>
  emit_2bytes(cinfo, 0);	/* Flags0 */
 800b73a:	2100      	movs	r1, #0
 800b73c:	6878      	ldr	r0, [r7, #4]
 800b73e:	f7ff fc99 	bl	800b074 <emit_2bytes>
  emit_2bytes(cinfo, 0);	/* Flags1 */
 800b742:	2100      	movs	r1, #0
 800b744:	6878      	ldr	r0, [r7, #4]
 800b746:	f7ff fc95 	bl	800b074 <emit_2bytes>
  switch (cinfo->jpeg_color_space) {
 800b74a:	687b      	ldr	r3, [r7, #4]
 800b74c:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 800b750:	2b03      	cmp	r3, #3
 800b752:	d002      	beq.n	800b75a <emit_adobe_app14+0x68>
 800b754:	2b05      	cmp	r3, #5
 800b756:	d005      	beq.n	800b764 <emit_adobe_app14+0x72>
 800b758:	e009      	b.n	800b76e <emit_adobe_app14+0x7c>
  case JCS_YCbCr:
    emit_byte(cinfo, 1);	/* Color transform = 1 */
 800b75a:	2101      	movs	r1, #1
 800b75c:	6878      	ldr	r0, [r7, #4]
 800b75e:	f7ff fc49 	bl	800aff4 <emit_byte>
    break;
 800b762:	e009      	b.n	800b778 <emit_adobe_app14+0x86>
  case JCS_YCCK:
    emit_byte(cinfo, 2);	/* Color transform = 2 */
 800b764:	2102      	movs	r1, #2
 800b766:	6878      	ldr	r0, [r7, #4]
 800b768:	f7ff fc44 	bl	800aff4 <emit_byte>
    break;
 800b76c:	e004      	b.n	800b778 <emit_adobe_app14+0x86>
  default:
    emit_byte(cinfo, 0);	/* Color transform = 0 */
 800b76e:	2100      	movs	r1, #0
 800b770:	6878      	ldr	r0, [r7, #4]
 800b772:	f7ff fc3f 	bl	800aff4 <emit_byte>
    break;
 800b776:	bf00      	nop
  }
}
 800b778:	bf00      	nop
 800b77a:	3708      	adds	r7, #8
 800b77c:	46bd      	mov	sp, r7
 800b77e:	bd80      	pop	{r7, pc}

0800b780 <write_marker_header>:
 */

METHODDEF(void)
write_marker_header (j_compress_ptr cinfo, int marker, unsigned int datalen)
/* Emit an arbitrary marker header */
{
 800b780:	b580      	push	{r7, lr}
 800b782:	b084      	sub	sp, #16
 800b784:	af00      	add	r7, sp, #0
 800b786:	60f8      	str	r0, [r7, #12]
 800b788:	60b9      	str	r1, [r7, #8]
 800b78a:	607a      	str	r2, [r7, #4]
  if (datalen > (unsigned int) 65533)		/* safety check */
 800b78c:	687b      	ldr	r3, [r7, #4]
 800b78e:	f64f 72fd 	movw	r2, #65533	@ 0xfffd
 800b792:	4293      	cmp	r3, r2
 800b794:	d908      	bls.n	800b7a8 <write_marker_header+0x28>
    ERREXIT(cinfo, JERR_BAD_LENGTH);
 800b796:	68fb      	ldr	r3, [r7, #12]
 800b798:	681b      	ldr	r3, [r3, #0]
 800b79a:	220c      	movs	r2, #12
 800b79c:	615a      	str	r2, [r3, #20]
 800b79e:	68fb      	ldr	r3, [r7, #12]
 800b7a0:	681b      	ldr	r3, [r3, #0]
 800b7a2:	681b      	ldr	r3, [r3, #0]
 800b7a4:	68f8      	ldr	r0, [r7, #12]
 800b7a6:	4798      	blx	r3

  emit_marker(cinfo, (JPEG_MARKER) marker);
 800b7a8:	68bb      	ldr	r3, [r7, #8]
 800b7aa:	b29b      	uxth	r3, r3
 800b7ac:	4619      	mov	r1, r3
 800b7ae:	68f8      	ldr	r0, [r7, #12]
 800b7b0:	f7ff fc4d 	bl	800b04e <emit_marker>

  emit_2bytes(cinfo, (int) (datalen + 2));	/* total length */
 800b7b4:	687b      	ldr	r3, [r7, #4]
 800b7b6:	3302      	adds	r3, #2
 800b7b8:	4619      	mov	r1, r3
 800b7ba:	68f8      	ldr	r0, [r7, #12]
 800b7bc:	f7ff fc5a 	bl	800b074 <emit_2bytes>
}
 800b7c0:	bf00      	nop
 800b7c2:	3710      	adds	r7, #16
 800b7c4:	46bd      	mov	sp, r7
 800b7c6:	bd80      	pop	{r7, pc}

0800b7c8 <write_marker_byte>:

METHODDEF(void)
write_marker_byte (j_compress_ptr cinfo, int val)
/* Emit one byte of marker parameters following write_marker_header */
{
 800b7c8:	b580      	push	{r7, lr}
 800b7ca:	b082      	sub	sp, #8
 800b7cc:	af00      	add	r7, sp, #0
 800b7ce:	6078      	str	r0, [r7, #4]
 800b7d0:	6039      	str	r1, [r7, #0]
  emit_byte(cinfo, val);
 800b7d2:	6839      	ldr	r1, [r7, #0]
 800b7d4:	6878      	ldr	r0, [r7, #4]
 800b7d6:	f7ff fc0d 	bl	800aff4 <emit_byte>
}
 800b7da:	bf00      	nop
 800b7dc:	3708      	adds	r7, #8
 800b7de:	46bd      	mov	sp, r7
 800b7e0:	bd80      	pop	{r7, pc}

0800b7e2 <write_file_header>:
 * jpeg_start_compress returns.
 */

METHODDEF(void)
write_file_header (j_compress_ptr cinfo)
{
 800b7e2:	b580      	push	{r7, lr}
 800b7e4:	b084      	sub	sp, #16
 800b7e6:	af00      	add	r7, sp, #0
 800b7e8:	6078      	str	r0, [r7, #4]
  my_marker_ptr marker = (my_marker_ptr) cinfo->marker;
 800b7ea:	687b      	ldr	r3, [r7, #4]
 800b7ec:	f8d3 3194 	ldr.w	r3, [r3, #404]	@ 0x194
 800b7f0:	60fb      	str	r3, [r7, #12]

  emit_marker(cinfo, M_SOI);	/* first the SOI */
 800b7f2:	21d8      	movs	r1, #216	@ 0xd8
 800b7f4:	6878      	ldr	r0, [r7, #4]
 800b7f6:	f7ff fc2a 	bl	800b04e <emit_marker>

  /* SOI is defined to reset restart interval to 0 */
  marker->last_restart_interval = 0;
 800b7fa:	68fb      	ldr	r3, [r7, #12]
 800b7fc:	2200      	movs	r2, #0
 800b7fe:	61da      	str	r2, [r3, #28]

  if (cinfo->write_JFIF_header)	/* next an optional JFIF APP0 */
 800b800:	687b      	ldr	r3, [r7, #4]
 800b802:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 800b806:	2b00      	cmp	r3, #0
 800b808:	d002      	beq.n	800b810 <write_file_header+0x2e>
    emit_jfif_app0(cinfo);
 800b80a:	6878      	ldr	r0, [r7, #4]
 800b80c:	f7ff ff22 	bl	800b654 <emit_jfif_app0>
  if (cinfo->write_Adobe_marker) /* next an optional Adobe APP14 */
 800b810:	687b      	ldr	r3, [r7, #4]
 800b812:	f8d3 3100 	ldr.w	r3, [r3, #256]	@ 0x100
 800b816:	2b00      	cmp	r3, #0
 800b818:	d002      	beq.n	800b820 <write_file_header+0x3e>
    emit_adobe_app14(cinfo);
 800b81a:	6878      	ldr	r0, [r7, #4]
 800b81c:	f7ff ff69 	bl	800b6f2 <emit_adobe_app14>
}
 800b820:	bf00      	nop
 800b822:	3710      	adds	r7, #16
 800b824:	46bd      	mov	sp, r7
 800b826:	bd80      	pop	{r7, pc}

0800b828 <write_frame_header>:
 * try to error-check the quant table numbers as soon as they see the SOF.
 */

METHODDEF(void)
write_frame_header (j_compress_ptr cinfo)
{
 800b828:	b580      	push	{r7, lr}
 800b82a:	b086      	sub	sp, #24
 800b82c:	af00      	add	r7, sp, #0
 800b82e:	6078      	str	r0, [r7, #4]
  jpeg_component_info *compptr;
  
  /* Emit DQT for each quantization table.
   * Note that emit_dqt() suppresses any duplicate tables.
   */
  prec = 0;
 800b830:	2300      	movs	r3, #0
 800b832:	613b      	str	r3, [r7, #16]
  for (ci = 0, compptr = cinfo->comp_info; ci < cinfo->num_components;
 800b834:	2300      	movs	r3, #0
 800b836:	617b      	str	r3, [r7, #20]
 800b838:	687b      	ldr	r3, [r7, #4]
 800b83a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800b83c:	60bb      	str	r3, [r7, #8]
 800b83e:	e00f      	b.n	800b860 <write_frame_header+0x38>
       ci++, compptr++) {
    prec += emit_dqt(cinfo, compptr->quant_tbl_no);
 800b840:	68bb      	ldr	r3, [r7, #8]
 800b842:	691b      	ldr	r3, [r3, #16]
 800b844:	4619      	mov	r1, r3
 800b846:	6878      	ldr	r0, [r7, #4]
 800b848:	f7ff fc2a 	bl	800b0a0 <emit_dqt>
 800b84c:	4602      	mov	r2, r0
 800b84e:	693b      	ldr	r3, [r7, #16]
 800b850:	4413      	add	r3, r2
 800b852:	613b      	str	r3, [r7, #16]
       ci++, compptr++) {
 800b854:	697b      	ldr	r3, [r7, #20]
 800b856:	3301      	adds	r3, #1
 800b858:	617b      	str	r3, [r7, #20]
 800b85a:	68bb      	ldr	r3, [r7, #8]
 800b85c:	3358      	adds	r3, #88	@ 0x58
 800b85e:	60bb      	str	r3, [r7, #8]
  for (ci = 0, compptr = cinfo->comp_info; ci < cinfo->num_components;
 800b860:	687b      	ldr	r3, [r7, #4]
 800b862:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800b864:	697a      	ldr	r2, [r7, #20]
 800b866:	429a      	cmp	r2, r3
 800b868:	dbea      	blt.n	800b840 <write_frame_header+0x18>
  /* now prec is nonzero iff there are any 16-bit quant tables. */

  /* Check for a non-baseline specification.
   * Note we assume that Huffman table numbers won't be changed later.
   */
  if (cinfo->arith_code || cinfo->progressive_mode ||
 800b86a:	687b      	ldr	r3, [r7, #4]
 800b86c:	f8d3 30d4 	ldr.w	r3, [r3, #212]	@ 0xd4
 800b870:	2b00      	cmp	r3, #0
 800b872:	d10d      	bne.n	800b890 <write_frame_header+0x68>
 800b874:	687b      	ldr	r3, [r7, #4]
 800b876:	f8d3 3108 	ldr.w	r3, [r3, #264]	@ 0x108
 800b87a:	2b00      	cmp	r3, #0
 800b87c:	d108      	bne.n	800b890 <write_frame_header+0x68>
      cinfo->data_precision != 8 || cinfo->block_size != DCTSIZE) {
 800b87e:	687b      	ldr	r3, [r7, #4]
 800b880:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
  if (cinfo->arith_code || cinfo->progressive_mode ||
 800b882:	2b08      	cmp	r3, #8
 800b884:	d104      	bne.n	800b890 <write_frame_header+0x68>
      cinfo->data_precision != 8 || cinfo->block_size != DCTSIZE) {
 800b886:	687b      	ldr	r3, [r7, #4]
 800b888:	f8d3 3178 	ldr.w	r3, [r3, #376]	@ 0x178
 800b88c:	2b08      	cmp	r3, #8
 800b88e:	d002      	beq.n	800b896 <write_frame_header+0x6e>
    is_baseline = FALSE;
 800b890:	2300      	movs	r3, #0
 800b892:	60fb      	str	r3, [r7, #12]
 800b894:	e02e      	b.n	800b8f4 <write_frame_header+0xcc>
  } else {
    is_baseline = TRUE;
 800b896:	2301      	movs	r3, #1
 800b898:	60fb      	str	r3, [r7, #12]
    for (ci = 0, compptr = cinfo->comp_info; ci < cinfo->num_components;
 800b89a:	2300      	movs	r3, #0
 800b89c:	617b      	str	r3, [r7, #20]
 800b89e:	687b      	ldr	r3, [r7, #4]
 800b8a0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800b8a2:	60bb      	str	r3, [r7, #8]
 800b8a4:	e00f      	b.n	800b8c6 <write_frame_header+0x9e>
	 ci++, compptr++) {
      if (compptr->dc_tbl_no > 1 || compptr->ac_tbl_no > 1)
 800b8a6:	68bb      	ldr	r3, [r7, #8]
 800b8a8:	695b      	ldr	r3, [r3, #20]
 800b8aa:	2b01      	cmp	r3, #1
 800b8ac:	dc03      	bgt.n	800b8b6 <write_frame_header+0x8e>
 800b8ae:	68bb      	ldr	r3, [r7, #8]
 800b8b0:	699b      	ldr	r3, [r3, #24]
 800b8b2:	2b01      	cmp	r3, #1
 800b8b4:	dd01      	ble.n	800b8ba <write_frame_header+0x92>
	is_baseline = FALSE;
 800b8b6:	2300      	movs	r3, #0
 800b8b8:	60fb      	str	r3, [r7, #12]
	 ci++, compptr++) {
 800b8ba:	697b      	ldr	r3, [r7, #20]
 800b8bc:	3301      	adds	r3, #1
 800b8be:	617b      	str	r3, [r7, #20]
 800b8c0:	68bb      	ldr	r3, [r7, #8]
 800b8c2:	3358      	adds	r3, #88	@ 0x58
 800b8c4:	60bb      	str	r3, [r7, #8]
    for (ci = 0, compptr = cinfo->comp_info; ci < cinfo->num_components;
 800b8c6:	687b      	ldr	r3, [r7, #4]
 800b8c8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800b8ca:	697a      	ldr	r2, [r7, #20]
 800b8cc:	429a      	cmp	r2, r3
 800b8ce:	dbea      	blt.n	800b8a6 <write_frame_header+0x7e>
    }
    if (prec && is_baseline) {
 800b8d0:	693b      	ldr	r3, [r7, #16]
 800b8d2:	2b00      	cmp	r3, #0
 800b8d4:	d00e      	beq.n	800b8f4 <write_frame_header+0xcc>
 800b8d6:	68fb      	ldr	r3, [r7, #12]
 800b8d8:	2b00      	cmp	r3, #0
 800b8da:	d00b      	beq.n	800b8f4 <write_frame_header+0xcc>
      is_baseline = FALSE;
 800b8dc:	2300      	movs	r3, #0
 800b8de:	60fb      	str	r3, [r7, #12]
      /* If it's baseline except for quantizer size, warn the user */
      TRACEMS(cinfo, 0, JTRC_16BIT_TABLES);
 800b8e0:	687b      	ldr	r3, [r7, #4]
 800b8e2:	681b      	ldr	r3, [r3, #0]
 800b8e4:	224d      	movs	r2, #77	@ 0x4d
 800b8e6:	615a      	str	r2, [r3, #20]
 800b8e8:	687b      	ldr	r3, [r7, #4]
 800b8ea:	681b      	ldr	r3, [r3, #0]
 800b8ec:	685b      	ldr	r3, [r3, #4]
 800b8ee:	2100      	movs	r1, #0
 800b8f0:	6878      	ldr	r0, [r7, #4]
 800b8f2:	4798      	blx	r3
    }
  }

  /* Emit the proper SOF marker */
  if (cinfo->arith_code) {
 800b8f4:	687b      	ldr	r3, [r7, #4]
 800b8f6:	f8d3 30d4 	ldr.w	r3, [r3, #212]	@ 0xd4
 800b8fa:	2b00      	cmp	r3, #0
 800b8fc:	d00e      	beq.n	800b91c <write_frame_header+0xf4>
    if (cinfo->progressive_mode)
 800b8fe:	687b      	ldr	r3, [r7, #4]
 800b900:	f8d3 3108 	ldr.w	r3, [r3, #264]	@ 0x108
 800b904:	2b00      	cmp	r3, #0
 800b906:	d004      	beq.n	800b912 <write_frame_header+0xea>
      emit_sof(cinfo, M_SOF10); /* SOF code for progressive arithmetic */
 800b908:	21ca      	movs	r1, #202	@ 0xca
 800b90a:	6878      	ldr	r0, [r7, #4]
 800b90c:	f7ff fd98 	bl	800b440 <emit_sof>
 800b910:	e01a      	b.n	800b948 <write_frame_header+0x120>
    else
      emit_sof(cinfo, M_SOF9);  /* SOF code for sequential arithmetic */
 800b912:	21c9      	movs	r1, #201	@ 0xc9
 800b914:	6878      	ldr	r0, [r7, #4]
 800b916:	f7ff fd93 	bl	800b440 <emit_sof>
 800b91a:	e015      	b.n	800b948 <write_frame_header+0x120>
  } else {
    if (cinfo->progressive_mode)
 800b91c:	687b      	ldr	r3, [r7, #4]
 800b91e:	f8d3 3108 	ldr.w	r3, [r3, #264]	@ 0x108
 800b922:	2b00      	cmp	r3, #0
 800b924:	d004      	beq.n	800b930 <write_frame_header+0x108>
      emit_sof(cinfo, M_SOF2);	/* SOF code for progressive Huffman */
 800b926:	21c2      	movs	r1, #194	@ 0xc2
 800b928:	6878      	ldr	r0, [r7, #4]
 800b92a:	f7ff fd89 	bl	800b440 <emit_sof>
 800b92e:	e00b      	b.n	800b948 <write_frame_header+0x120>
    else if (is_baseline)
 800b930:	68fb      	ldr	r3, [r7, #12]
 800b932:	2b00      	cmp	r3, #0
 800b934:	d004      	beq.n	800b940 <write_frame_header+0x118>
      emit_sof(cinfo, M_SOF0);	/* SOF code for baseline implementation */
 800b936:	21c0      	movs	r1, #192	@ 0xc0
 800b938:	6878      	ldr	r0, [r7, #4]
 800b93a:	f7ff fd81 	bl	800b440 <emit_sof>
 800b93e:	e003      	b.n	800b948 <write_frame_header+0x120>
    else
      emit_sof(cinfo, M_SOF1);	/* SOF code for non-baseline Huffman file */
 800b940:	21c1      	movs	r1, #193	@ 0xc1
 800b942:	6878      	ldr	r0, [r7, #4]
 800b944:	f7ff fd7c 	bl	800b440 <emit_sof>
  }

  /* Check to emit pseudo SOS marker */
  if (cinfo->progressive_mode && cinfo->block_size != DCTSIZE)
 800b948:	687b      	ldr	r3, [r7, #4]
 800b94a:	f8d3 3108 	ldr.w	r3, [r3, #264]	@ 0x108
 800b94e:	2b00      	cmp	r3, #0
 800b950:	d007      	beq.n	800b962 <write_frame_header+0x13a>
 800b952:	687b      	ldr	r3, [r7, #4]
 800b954:	f8d3 3178 	ldr.w	r3, [r3, #376]	@ 0x178
 800b958:	2b08      	cmp	r3, #8
 800b95a:	d002      	beq.n	800b962 <write_frame_header+0x13a>
    emit_pseudo_sos(cinfo);
 800b95c:	6878      	ldr	r0, [r7, #4]
 800b95e:	f7ff fe50 	bl	800b602 <emit_pseudo_sos>
}
 800b962:	bf00      	nop
 800b964:	3718      	adds	r7, #24
 800b966:	46bd      	mov	sp, r7
 800b968:	bd80      	pop	{r7, pc}

0800b96a <write_scan_header>:
 * Compressed data will be written following the SOS.
 */

METHODDEF(void)
write_scan_header (j_compress_ptr cinfo)
{
 800b96a:	b580      	push	{r7, lr}
 800b96c:	b086      	sub	sp, #24
 800b96e:	af00      	add	r7, sp, #0
 800b970:	6078      	str	r0, [r7, #4]
  my_marker_ptr marker = (my_marker_ptr) cinfo->marker;
 800b972:	687b      	ldr	r3, [r7, #4]
 800b974:	f8d3 3194 	ldr.w	r3, [r3, #404]	@ 0x194
 800b978:	613b      	str	r3, [r7, #16]
  int i;
  jpeg_component_info *compptr;

  if (cinfo->arith_code) {
 800b97a:	687b      	ldr	r3, [r7, #4]
 800b97c:	f8d3 30d4 	ldr.w	r3, [r3, #212]	@ 0xd4
 800b980:	2b00      	cmp	r3, #0
 800b982:	d003      	beq.n	800b98c <write_scan_header+0x22>
    /* Emit arith conditioning info.  We may have some duplication
     * if the file has multiple scans, but it's so small it's hardly
     * worth worrying about.
     */
    emit_dac(cinfo);
 800b984:	6878      	ldr	r0, [r7, #4]
 800b986:	f7ff fc8f 	bl	800b2a8 <emit_dac>
 800b98a:	e02f      	b.n	800b9ec <write_scan_header+0x82>
  } else {
    /* Emit Huffman tables.
     * Note that emit_dht() suppresses any duplicate tables.
     */
    for (i = 0; i < cinfo->comps_in_scan; i++) {
 800b98c:	2300      	movs	r3, #0
 800b98e:	617b      	str	r3, [r7, #20]
 800b990:	e026      	b.n	800b9e0 <write_scan_header+0x76>
      compptr = cinfo->cur_comp_info[i];
 800b992:	687a      	ldr	r2, [r7, #4]
 800b994:	697b      	ldr	r3, [r7, #20]
 800b996:	3348      	adds	r3, #72	@ 0x48
 800b998:	009b      	lsls	r3, r3, #2
 800b99a:	4413      	add	r3, r2
 800b99c:	685b      	ldr	r3, [r3, #4]
 800b99e:	60fb      	str	r3, [r7, #12]
      /* DC needs no table for refinement scan */
      if (cinfo->Ss == 0 && cinfo->Ah == 0)
 800b9a0:	687b      	ldr	r3, [r7, #4]
 800b9a2:	f8d3 3168 	ldr.w	r3, [r3, #360]	@ 0x168
 800b9a6:	2b00      	cmp	r3, #0
 800b9a8:	d10b      	bne.n	800b9c2 <write_scan_header+0x58>
 800b9aa:	687b      	ldr	r3, [r7, #4]
 800b9ac:	f8d3 3170 	ldr.w	r3, [r3, #368]	@ 0x170
 800b9b0:	2b00      	cmp	r3, #0
 800b9b2:	d106      	bne.n	800b9c2 <write_scan_header+0x58>
	emit_dht(cinfo, compptr->dc_tbl_no, FALSE);
 800b9b4:	68fb      	ldr	r3, [r7, #12]
 800b9b6:	695b      	ldr	r3, [r3, #20]
 800b9b8:	2200      	movs	r2, #0
 800b9ba:	4619      	mov	r1, r3
 800b9bc:	6878      	ldr	r0, [r7, #4]
 800b9be:	f7ff fbf8 	bl	800b1b2 <emit_dht>
      /* AC needs no table when not present */
      if (cinfo->Se)
 800b9c2:	687b      	ldr	r3, [r7, #4]
 800b9c4:	f8d3 316c 	ldr.w	r3, [r3, #364]	@ 0x16c
 800b9c8:	2b00      	cmp	r3, #0
 800b9ca:	d006      	beq.n	800b9da <write_scan_header+0x70>
	emit_dht(cinfo, compptr->ac_tbl_no, TRUE);
 800b9cc:	68fb      	ldr	r3, [r7, #12]
 800b9ce:	699b      	ldr	r3, [r3, #24]
 800b9d0:	2201      	movs	r2, #1
 800b9d2:	4619      	mov	r1, r3
 800b9d4:	6878      	ldr	r0, [r7, #4]
 800b9d6:	f7ff fbec 	bl	800b1b2 <emit_dht>
    for (i = 0; i < cinfo->comps_in_scan; i++) {
 800b9da:	697b      	ldr	r3, [r7, #20]
 800b9dc:	3301      	adds	r3, #1
 800b9de:	617b      	str	r3, [r7, #20]
 800b9e0:	687b      	ldr	r3, [r7, #4]
 800b9e2:	f8d3 3120 	ldr.w	r3, [r3, #288]	@ 0x120
 800b9e6:	697a      	ldr	r2, [r7, #20]
 800b9e8:	429a      	cmp	r2, r3
 800b9ea:	dbd2      	blt.n	800b992 <write_scan_header+0x28>
  }

  /* Emit DRI if required --- note that DRI value could change for each scan.
   * We avoid wasting space with unnecessary DRIs, however.
   */
  if (cinfo->restart_interval != marker->last_restart_interval) {
 800b9ec:	687b      	ldr	r3, [r7, #4]
 800b9ee:	f8d3 20ec 	ldr.w	r2, [r3, #236]	@ 0xec
 800b9f2:	693b      	ldr	r3, [r7, #16]
 800b9f4:	69db      	ldr	r3, [r3, #28]
 800b9f6:	429a      	cmp	r2, r3
 800b9f8:	d007      	beq.n	800ba0a <write_scan_header+0xa0>
    emit_dri(cinfo);
 800b9fa:	6878      	ldr	r0, [r7, #4]
 800b9fc:	f7ff fd09 	bl	800b412 <emit_dri>
    marker->last_restart_interval = cinfo->restart_interval;
 800ba00:	687b      	ldr	r3, [r7, #4]
 800ba02:	f8d3 20ec 	ldr.w	r2, [r3, #236]	@ 0xec
 800ba06:	693b      	ldr	r3, [r7, #16]
 800ba08:	61da      	str	r2, [r3, #28]
  }

  emit_sos(cinfo);
 800ba0a:	6878      	ldr	r0, [r7, #4]
 800ba0c:	f7ff fd89 	bl	800b522 <emit_sos>
}
 800ba10:	bf00      	nop
 800ba12:	3718      	adds	r7, #24
 800ba14:	46bd      	mov	sp, r7
 800ba16:	bd80      	pop	{r7, pc}

0800ba18 <write_file_trailer>:
 * Write datastream trailer.
 */

METHODDEF(void)
write_file_trailer (j_compress_ptr cinfo)
{
 800ba18:	b580      	push	{r7, lr}
 800ba1a:	b082      	sub	sp, #8
 800ba1c:	af00      	add	r7, sp, #0
 800ba1e:	6078      	str	r0, [r7, #4]
  emit_marker(cinfo, M_EOI);
 800ba20:	21d9      	movs	r1, #217	@ 0xd9
 800ba22:	6878      	ldr	r0, [r7, #4]
 800ba24:	f7ff fb13 	bl	800b04e <emit_marker>
}
 800ba28:	bf00      	nop
 800ba2a:	3708      	adds	r7, #8
 800ba2c:	46bd      	mov	sp, r7
 800ba2e:	bd80      	pop	{r7, pc}

0800ba30 <write_tables_only>:
 * emitted.  Note that all tables will be marked sent_table = TRUE at exit.
 */

METHODDEF(void)
write_tables_only (j_compress_ptr cinfo)
{
 800ba30:	b580      	push	{r7, lr}
 800ba32:	b084      	sub	sp, #16
 800ba34:	af00      	add	r7, sp, #0
 800ba36:	6078      	str	r0, [r7, #4]
  int i;

  emit_marker(cinfo, M_SOI);
 800ba38:	21d8      	movs	r1, #216	@ 0xd8
 800ba3a:	6878      	ldr	r0, [r7, #4]
 800ba3c:	f7ff fb07 	bl	800b04e <emit_marker>

  for (i = 0; i < NUM_QUANT_TBLS; i++) {
 800ba40:	2300      	movs	r3, #0
 800ba42:	60fb      	str	r3, [r7, #12]
 800ba44:	e00d      	b.n	800ba62 <write_tables_only+0x32>
    if (cinfo->quant_tbl_ptrs[i] != NULL)
 800ba46:	687b      	ldr	r3, [r7, #4]
 800ba48:	68fa      	ldr	r2, [r7, #12]
 800ba4a:	3216      	adds	r2, #22
 800ba4c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800ba50:	2b00      	cmp	r3, #0
 800ba52:	d003      	beq.n	800ba5c <write_tables_only+0x2c>
      (void) emit_dqt(cinfo, i);
 800ba54:	68f9      	ldr	r1, [r7, #12]
 800ba56:	6878      	ldr	r0, [r7, #4]
 800ba58:	f7ff fb22 	bl	800b0a0 <emit_dqt>
  for (i = 0; i < NUM_QUANT_TBLS; i++) {
 800ba5c:	68fb      	ldr	r3, [r7, #12]
 800ba5e:	3301      	adds	r3, #1
 800ba60:	60fb      	str	r3, [r7, #12]
 800ba62:	68fb      	ldr	r3, [r7, #12]
 800ba64:	2b03      	cmp	r3, #3
 800ba66:	ddee      	ble.n	800ba46 <write_tables_only+0x16>
  }

  if (! cinfo->arith_code) {
 800ba68:	687b      	ldr	r3, [r7, #4]
 800ba6a:	f8d3 30d4 	ldr.w	r3, [r3, #212]	@ 0xd4
 800ba6e:	2b00      	cmp	r3, #0
 800ba70:	d120      	bne.n	800bab4 <write_tables_only+0x84>
    for (i = 0; i < NUM_HUFF_TBLS; i++) {
 800ba72:	2300      	movs	r3, #0
 800ba74:	60fb      	str	r3, [r7, #12]
 800ba76:	e01a      	b.n	800baae <write_tables_only+0x7e>
      if (cinfo->dc_huff_tbl_ptrs[i] != NULL)
 800ba78:	687b      	ldr	r3, [r7, #4]
 800ba7a:	68fa      	ldr	r2, [r7, #12]
 800ba7c:	321e      	adds	r2, #30
 800ba7e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800ba82:	2b00      	cmp	r3, #0
 800ba84:	d004      	beq.n	800ba90 <write_tables_only+0x60>
	emit_dht(cinfo, i, FALSE);
 800ba86:	2200      	movs	r2, #0
 800ba88:	68f9      	ldr	r1, [r7, #12]
 800ba8a:	6878      	ldr	r0, [r7, #4]
 800ba8c:	f7ff fb91 	bl	800b1b2 <emit_dht>
      if (cinfo->ac_huff_tbl_ptrs[i] != NULL)
 800ba90:	687b      	ldr	r3, [r7, #4]
 800ba92:	68fa      	ldr	r2, [r7, #12]
 800ba94:	3222      	adds	r2, #34	@ 0x22
 800ba96:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800ba9a:	2b00      	cmp	r3, #0
 800ba9c:	d004      	beq.n	800baa8 <write_tables_only+0x78>
	emit_dht(cinfo, i, TRUE);
 800ba9e:	2201      	movs	r2, #1
 800baa0:	68f9      	ldr	r1, [r7, #12]
 800baa2:	6878      	ldr	r0, [r7, #4]
 800baa4:	f7ff fb85 	bl	800b1b2 <emit_dht>
    for (i = 0; i < NUM_HUFF_TBLS; i++) {
 800baa8:	68fb      	ldr	r3, [r7, #12]
 800baaa:	3301      	adds	r3, #1
 800baac:	60fb      	str	r3, [r7, #12]
 800baae:	68fb      	ldr	r3, [r7, #12]
 800bab0:	2b03      	cmp	r3, #3
 800bab2:	dde1      	ble.n	800ba78 <write_tables_only+0x48>
    }
  }

  emit_marker(cinfo, M_EOI);
 800bab4:	21d9      	movs	r1, #217	@ 0xd9
 800bab6:	6878      	ldr	r0, [r7, #4]
 800bab8:	f7ff fac9 	bl	800b04e <emit_marker>
}
 800babc:	bf00      	nop
 800babe:	3710      	adds	r7, #16
 800bac0:	46bd      	mov	sp, r7
 800bac2:	bd80      	pop	{r7, pc}

0800bac4 <jinit_marker_writer>:
 * Initialize the marker writer module.
 */

GLOBAL(void)
jinit_marker_writer (j_compress_ptr cinfo)
{
 800bac4:	b580      	push	{r7, lr}
 800bac6:	b084      	sub	sp, #16
 800bac8:	af00      	add	r7, sp, #0
 800baca:	6078      	str	r0, [r7, #4]
  my_marker_ptr marker;

  /* Create the subobject */
  marker = (my_marker_ptr)
    (*cinfo->mem->alloc_small) ((j_common_ptr) cinfo, JPOOL_IMAGE,
 800bacc:	687b      	ldr	r3, [r7, #4]
 800bace:	685b      	ldr	r3, [r3, #4]
 800bad0:	681b      	ldr	r3, [r3, #0]
 800bad2:	2220      	movs	r2, #32
 800bad4:	2101      	movs	r1, #1
 800bad6:	6878      	ldr	r0, [r7, #4]
 800bad8:	4798      	blx	r3
 800bada:	60f8      	str	r0, [r7, #12]
				SIZEOF(my_marker_writer));
  cinfo->marker = (struct jpeg_marker_writer *) marker;
 800badc:	687b      	ldr	r3, [r7, #4]
 800bade:	68fa      	ldr	r2, [r7, #12]
 800bae0:	f8c3 2194 	str.w	r2, [r3, #404]	@ 0x194
  /* Initialize method pointers */
  marker->pub.write_file_header = write_file_header;
 800bae4:	68fb      	ldr	r3, [r7, #12]
 800bae6:	4a0d      	ldr	r2, [pc, #52]	@ (800bb1c <jinit_marker_writer+0x58>)
 800bae8:	601a      	str	r2, [r3, #0]
  marker->pub.write_frame_header = write_frame_header;
 800baea:	68fb      	ldr	r3, [r7, #12]
 800baec:	4a0c      	ldr	r2, [pc, #48]	@ (800bb20 <jinit_marker_writer+0x5c>)
 800baee:	605a      	str	r2, [r3, #4]
  marker->pub.write_scan_header = write_scan_header;
 800baf0:	68fb      	ldr	r3, [r7, #12]
 800baf2:	4a0c      	ldr	r2, [pc, #48]	@ (800bb24 <jinit_marker_writer+0x60>)
 800baf4:	609a      	str	r2, [r3, #8]
  marker->pub.write_file_trailer = write_file_trailer;
 800baf6:	68fb      	ldr	r3, [r7, #12]
 800baf8:	4a0b      	ldr	r2, [pc, #44]	@ (800bb28 <jinit_marker_writer+0x64>)
 800bafa:	60da      	str	r2, [r3, #12]
  marker->pub.write_tables_only = write_tables_only;
 800bafc:	68fb      	ldr	r3, [r7, #12]
 800bafe:	4a0b      	ldr	r2, [pc, #44]	@ (800bb2c <jinit_marker_writer+0x68>)
 800bb00:	611a      	str	r2, [r3, #16]
  marker->pub.write_marker_header = write_marker_header;
 800bb02:	68fb      	ldr	r3, [r7, #12]
 800bb04:	4a0a      	ldr	r2, [pc, #40]	@ (800bb30 <jinit_marker_writer+0x6c>)
 800bb06:	615a      	str	r2, [r3, #20]
  marker->pub.write_marker_byte = write_marker_byte;
 800bb08:	68fb      	ldr	r3, [r7, #12]
 800bb0a:	4a0a      	ldr	r2, [pc, #40]	@ (800bb34 <jinit_marker_writer+0x70>)
 800bb0c:	619a      	str	r2, [r3, #24]
  /* Initialize private state */
  marker->last_restart_interval = 0;
 800bb0e:	68fb      	ldr	r3, [r7, #12]
 800bb10:	2200      	movs	r2, #0
 800bb12:	61da      	str	r2, [r3, #28]
}
 800bb14:	bf00      	nop
 800bb16:	3710      	adds	r7, #16
 800bb18:	46bd      	mov	sp, r7
 800bb1a:	bd80      	pop	{r7, pc}
 800bb1c:	0800b7e3 	.word	0x0800b7e3
 800bb20:	0800b829 	.word	0x0800b829
 800bb24:	0800b96b 	.word	0x0800b96b
 800bb28:	0800ba19 	.word	0x0800ba19
 800bb2c:	0800ba31 	.word	0x0800ba31
 800bb30:	0800b781 	.word	0x0800b781
 800bb34:	0800b7c9 	.word	0x0800b7c9

0800bb38 <jpeg_calc_jpeg_dimensions>:
 */

GLOBAL(void)
jpeg_calc_jpeg_dimensions (j_compress_ptr cinfo)
/* Do computations that are needed before master selection phase */
{
 800bb38:	b580      	push	{r7, lr}
 800bb3a:	b082      	sub	sp, #8
 800bb3c:	af00      	add	r7, sp, #0
 800bb3e:	6078      	str	r0, [r7, #4]
   * following calculation.
   * We do check jpeg_width and jpeg_height in initial_setup below,
   * but image_width and image_height can come from arbitrary data,
   * and we need some space for multiplication by block_size.
   */
  if (((long) cinfo->image_width >> 24) || ((long) cinfo->image_height >> 24))
 800bb40:	687b      	ldr	r3, [r7, #4]
 800bb42:	69db      	ldr	r3, [r3, #28]
 800bb44:	161b      	asrs	r3, r3, #24
 800bb46:	2b00      	cmp	r3, #0
 800bb48:	d104      	bne.n	800bb54 <jpeg_calc_jpeg_dimensions+0x1c>
 800bb4a:	687b      	ldr	r3, [r7, #4]
 800bb4c:	6a1b      	ldr	r3, [r3, #32]
 800bb4e:	161b      	asrs	r3, r3, #24
 800bb50:	2b00      	cmp	r3, #0
 800bb52:	d00d      	beq.n	800bb70 <jpeg_calc_jpeg_dimensions+0x38>
    ERREXIT1(cinfo, JERR_IMAGE_TOO_BIG, (unsigned int) JPEG_MAX_DIMENSION);
 800bb54:	687b      	ldr	r3, [r7, #4]
 800bb56:	681b      	ldr	r3, [r3, #0]
 800bb58:	222a      	movs	r2, #42	@ 0x2a
 800bb5a:	615a      	str	r2, [r3, #20]
 800bb5c:	687b      	ldr	r3, [r7, #4]
 800bb5e:	681b      	ldr	r3, [r3, #0]
 800bb60:	f64f 72dc 	movw	r2, #65500	@ 0xffdc
 800bb64:	619a      	str	r2, [r3, #24]
 800bb66:	687b      	ldr	r3, [r7, #4]
 800bb68:	681b      	ldr	r3, [r3, #0]
 800bb6a:	681b      	ldr	r3, [r3, #0]
 800bb6c:	6878      	ldr	r0, [r7, #4]
 800bb6e:	4798      	blx	r3

  /* Compute actual JPEG image dimensions and DCT scaling choices. */
  if (cinfo->scale_num >= cinfo->scale_denom * cinfo->block_size) {
 800bb70:	687b      	ldr	r3, [r7, #4]
 800bb72:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800bb74:	687b      	ldr	r3, [r7, #4]
 800bb76:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800bb78:	6879      	ldr	r1, [r7, #4]
 800bb7a:	f8d1 1178 	ldr.w	r1, [r1, #376]	@ 0x178
 800bb7e:	fb01 f303 	mul.w	r3, r1, r3
 800bb82:	429a      	cmp	r2, r3
 800bb84:	d31a      	bcc.n	800bbbc <jpeg_calc_jpeg_dimensions+0x84>
    /* Provide block_size/1 scaling */
    cinfo->jpeg_width = cinfo->image_width * cinfo->block_size;
 800bb86:	687b      	ldr	r3, [r7, #4]
 800bb88:	69db      	ldr	r3, [r3, #28]
 800bb8a:	687a      	ldr	r2, [r7, #4]
 800bb8c:	f8d2 2178 	ldr.w	r2, [r2, #376]	@ 0x178
 800bb90:	fb03 f202 	mul.w	r2, r3, r2
 800bb94:	687b      	ldr	r3, [r7, #4]
 800bb96:	641a      	str	r2, [r3, #64]	@ 0x40
    cinfo->jpeg_height = cinfo->image_height * cinfo->block_size;
 800bb98:	687b      	ldr	r3, [r7, #4]
 800bb9a:	6a1b      	ldr	r3, [r3, #32]
 800bb9c:	687a      	ldr	r2, [r7, #4]
 800bb9e:	f8d2 2178 	ldr.w	r2, [r2, #376]	@ 0x178
 800bba2:	fb03 f202 	mul.w	r2, r3, r2
 800bba6:	687b      	ldr	r3, [r7, #4]
 800bba8:	645a      	str	r2, [r3, #68]	@ 0x44
    cinfo->min_DCT_h_scaled_size = 1;
 800bbaa:	687b      	ldr	r3, [r7, #4]
 800bbac:	2201      	movs	r2, #1
 800bbae:	f8c3 2114 	str.w	r2, [r3, #276]	@ 0x114
    cinfo->min_DCT_v_scaled_size = 1;
 800bbb2:	687b      	ldr	r3, [r7, #4]
 800bbb4:	2201      	movs	r2, #1
 800bbb6:	f8c3 2118 	str.w	r2, [r3, #280]	@ 0x118
  cinfo->jpeg_height = cinfo->image_height;
  cinfo->min_DCT_h_scaled_size = DCTSIZE;
  cinfo->min_DCT_v_scaled_size = DCTSIZE;

#endif /* DCT_SCALING_SUPPORTED */
}
 800bbba:	e32f      	b.n	800c21c <jpeg_calc_jpeg_dimensions+0x6e4>
  } else if (cinfo->scale_num * 2 >= cinfo->scale_denom * cinfo->block_size) {
 800bbbc:	687b      	ldr	r3, [r7, #4]
 800bbbe:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800bbc0:	005a      	lsls	r2, r3, #1
 800bbc2:	687b      	ldr	r3, [r7, #4]
 800bbc4:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800bbc6:	6879      	ldr	r1, [r7, #4]
 800bbc8:	f8d1 1178 	ldr.w	r1, [r1, #376]	@ 0x178
 800bbcc:	fb01 f303 	mul.w	r3, r1, r3
 800bbd0:	429a      	cmp	r2, r3
 800bbd2:	d328      	bcc.n	800bc26 <jpeg_calc_jpeg_dimensions+0xee>
      jdiv_round_up((long) cinfo->image_width * cinfo->block_size, 2L);
 800bbd4:	687b      	ldr	r3, [r7, #4]
 800bbd6:	69db      	ldr	r3, [r3, #28]
 800bbd8:	461a      	mov	r2, r3
 800bbda:	687b      	ldr	r3, [r7, #4]
 800bbdc:	f8d3 3178 	ldr.w	r3, [r3, #376]	@ 0x178
 800bbe0:	fb02 f303 	mul.w	r3, r2, r3
 800bbe4:	2102      	movs	r1, #2
 800bbe6:	4618      	mov	r0, r3
 800bbe8:	f00d fdd0 	bl	801978c <jdiv_round_up>
 800bbec:	4603      	mov	r3, r0
    cinfo->jpeg_width = (JDIMENSION)
 800bbee:	461a      	mov	r2, r3
 800bbf0:	687b      	ldr	r3, [r7, #4]
 800bbf2:	641a      	str	r2, [r3, #64]	@ 0x40
      jdiv_round_up((long) cinfo->image_height * cinfo->block_size, 2L);
 800bbf4:	687b      	ldr	r3, [r7, #4]
 800bbf6:	6a1b      	ldr	r3, [r3, #32]
 800bbf8:	461a      	mov	r2, r3
 800bbfa:	687b      	ldr	r3, [r7, #4]
 800bbfc:	f8d3 3178 	ldr.w	r3, [r3, #376]	@ 0x178
 800bc00:	fb02 f303 	mul.w	r3, r2, r3
 800bc04:	2102      	movs	r1, #2
 800bc06:	4618      	mov	r0, r3
 800bc08:	f00d fdc0 	bl	801978c <jdiv_round_up>
 800bc0c:	4603      	mov	r3, r0
    cinfo->jpeg_height = (JDIMENSION)
 800bc0e:	461a      	mov	r2, r3
 800bc10:	687b      	ldr	r3, [r7, #4]
 800bc12:	645a      	str	r2, [r3, #68]	@ 0x44
    cinfo->min_DCT_h_scaled_size = 2;
 800bc14:	687b      	ldr	r3, [r7, #4]
 800bc16:	2202      	movs	r2, #2
 800bc18:	f8c3 2114 	str.w	r2, [r3, #276]	@ 0x114
    cinfo->min_DCT_v_scaled_size = 2;
 800bc1c:	687b      	ldr	r3, [r7, #4]
 800bc1e:	2202      	movs	r2, #2
 800bc20:	f8c3 2118 	str.w	r2, [r3, #280]	@ 0x118
}
 800bc24:	e2fa      	b.n	800c21c <jpeg_calc_jpeg_dimensions+0x6e4>
  } else if (cinfo->scale_num * 3 >= cinfo->scale_denom * cinfo->block_size) {
 800bc26:	687b      	ldr	r3, [r7, #4]
 800bc28:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800bc2a:	4613      	mov	r3, r2
 800bc2c:	005b      	lsls	r3, r3, #1
 800bc2e:	441a      	add	r2, r3
 800bc30:	687b      	ldr	r3, [r7, #4]
 800bc32:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800bc34:	6879      	ldr	r1, [r7, #4]
 800bc36:	f8d1 1178 	ldr.w	r1, [r1, #376]	@ 0x178
 800bc3a:	fb01 f303 	mul.w	r3, r1, r3
 800bc3e:	429a      	cmp	r2, r3
 800bc40:	d328      	bcc.n	800bc94 <jpeg_calc_jpeg_dimensions+0x15c>
      jdiv_round_up((long) cinfo->image_width * cinfo->block_size, 3L);
 800bc42:	687b      	ldr	r3, [r7, #4]
 800bc44:	69db      	ldr	r3, [r3, #28]
 800bc46:	461a      	mov	r2, r3
 800bc48:	687b      	ldr	r3, [r7, #4]
 800bc4a:	f8d3 3178 	ldr.w	r3, [r3, #376]	@ 0x178
 800bc4e:	fb02 f303 	mul.w	r3, r2, r3
 800bc52:	2103      	movs	r1, #3
 800bc54:	4618      	mov	r0, r3
 800bc56:	f00d fd99 	bl	801978c <jdiv_round_up>
 800bc5a:	4603      	mov	r3, r0
    cinfo->jpeg_width = (JDIMENSION)
 800bc5c:	461a      	mov	r2, r3
 800bc5e:	687b      	ldr	r3, [r7, #4]
 800bc60:	641a      	str	r2, [r3, #64]	@ 0x40
      jdiv_round_up((long) cinfo->image_height * cinfo->block_size, 3L);
 800bc62:	687b      	ldr	r3, [r7, #4]
 800bc64:	6a1b      	ldr	r3, [r3, #32]
 800bc66:	461a      	mov	r2, r3
 800bc68:	687b      	ldr	r3, [r7, #4]
 800bc6a:	f8d3 3178 	ldr.w	r3, [r3, #376]	@ 0x178
 800bc6e:	fb02 f303 	mul.w	r3, r2, r3
 800bc72:	2103      	movs	r1, #3
 800bc74:	4618      	mov	r0, r3
 800bc76:	f00d fd89 	bl	801978c <jdiv_round_up>
 800bc7a:	4603      	mov	r3, r0
    cinfo->jpeg_height = (JDIMENSION)
 800bc7c:	461a      	mov	r2, r3
 800bc7e:	687b      	ldr	r3, [r7, #4]
 800bc80:	645a      	str	r2, [r3, #68]	@ 0x44
    cinfo->min_DCT_h_scaled_size = 3;
 800bc82:	687b      	ldr	r3, [r7, #4]
 800bc84:	2203      	movs	r2, #3
 800bc86:	f8c3 2114 	str.w	r2, [r3, #276]	@ 0x114
    cinfo->min_DCT_v_scaled_size = 3;
 800bc8a:	687b      	ldr	r3, [r7, #4]
 800bc8c:	2203      	movs	r2, #3
 800bc8e:	f8c3 2118 	str.w	r2, [r3, #280]	@ 0x118
}
 800bc92:	e2c3      	b.n	800c21c <jpeg_calc_jpeg_dimensions+0x6e4>
  } else if (cinfo->scale_num * 4 >= cinfo->scale_denom * cinfo->block_size) {
 800bc94:	687b      	ldr	r3, [r7, #4]
 800bc96:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800bc98:	009a      	lsls	r2, r3, #2
 800bc9a:	687b      	ldr	r3, [r7, #4]
 800bc9c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800bc9e:	6879      	ldr	r1, [r7, #4]
 800bca0:	f8d1 1178 	ldr.w	r1, [r1, #376]	@ 0x178
 800bca4:	fb01 f303 	mul.w	r3, r1, r3
 800bca8:	429a      	cmp	r2, r3
 800bcaa:	d328      	bcc.n	800bcfe <jpeg_calc_jpeg_dimensions+0x1c6>
      jdiv_round_up((long) cinfo->image_width * cinfo->block_size, 4L);
 800bcac:	687b      	ldr	r3, [r7, #4]
 800bcae:	69db      	ldr	r3, [r3, #28]
 800bcb0:	461a      	mov	r2, r3
 800bcb2:	687b      	ldr	r3, [r7, #4]
 800bcb4:	f8d3 3178 	ldr.w	r3, [r3, #376]	@ 0x178
 800bcb8:	fb02 f303 	mul.w	r3, r2, r3
 800bcbc:	2104      	movs	r1, #4
 800bcbe:	4618      	mov	r0, r3
 800bcc0:	f00d fd64 	bl	801978c <jdiv_round_up>
 800bcc4:	4603      	mov	r3, r0
    cinfo->jpeg_width = (JDIMENSION)
 800bcc6:	461a      	mov	r2, r3
 800bcc8:	687b      	ldr	r3, [r7, #4]
 800bcca:	641a      	str	r2, [r3, #64]	@ 0x40
      jdiv_round_up((long) cinfo->image_height * cinfo->block_size, 4L);
 800bccc:	687b      	ldr	r3, [r7, #4]
 800bcce:	6a1b      	ldr	r3, [r3, #32]
 800bcd0:	461a      	mov	r2, r3
 800bcd2:	687b      	ldr	r3, [r7, #4]
 800bcd4:	f8d3 3178 	ldr.w	r3, [r3, #376]	@ 0x178
 800bcd8:	fb02 f303 	mul.w	r3, r2, r3
 800bcdc:	2104      	movs	r1, #4
 800bcde:	4618      	mov	r0, r3
 800bce0:	f00d fd54 	bl	801978c <jdiv_round_up>
 800bce4:	4603      	mov	r3, r0
    cinfo->jpeg_height = (JDIMENSION)
 800bce6:	461a      	mov	r2, r3
 800bce8:	687b      	ldr	r3, [r7, #4]
 800bcea:	645a      	str	r2, [r3, #68]	@ 0x44
    cinfo->min_DCT_h_scaled_size = 4;
 800bcec:	687b      	ldr	r3, [r7, #4]
 800bcee:	2204      	movs	r2, #4
 800bcf0:	f8c3 2114 	str.w	r2, [r3, #276]	@ 0x114
    cinfo->min_DCT_v_scaled_size = 4;
 800bcf4:	687b      	ldr	r3, [r7, #4]
 800bcf6:	2204      	movs	r2, #4
 800bcf8:	f8c3 2118 	str.w	r2, [r3, #280]	@ 0x118
}
 800bcfc:	e28e      	b.n	800c21c <jpeg_calc_jpeg_dimensions+0x6e4>
  } else if (cinfo->scale_num * 5 >= cinfo->scale_denom * cinfo->block_size) {
 800bcfe:	687b      	ldr	r3, [r7, #4]
 800bd00:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800bd02:	4613      	mov	r3, r2
 800bd04:	009b      	lsls	r3, r3, #2
 800bd06:	441a      	add	r2, r3
 800bd08:	687b      	ldr	r3, [r7, #4]
 800bd0a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800bd0c:	6879      	ldr	r1, [r7, #4]
 800bd0e:	f8d1 1178 	ldr.w	r1, [r1, #376]	@ 0x178
 800bd12:	fb01 f303 	mul.w	r3, r1, r3
 800bd16:	429a      	cmp	r2, r3
 800bd18:	d328      	bcc.n	800bd6c <jpeg_calc_jpeg_dimensions+0x234>
      jdiv_round_up((long) cinfo->image_width * cinfo->block_size, 5L);
 800bd1a:	687b      	ldr	r3, [r7, #4]
 800bd1c:	69db      	ldr	r3, [r3, #28]
 800bd1e:	461a      	mov	r2, r3
 800bd20:	687b      	ldr	r3, [r7, #4]
 800bd22:	f8d3 3178 	ldr.w	r3, [r3, #376]	@ 0x178
 800bd26:	fb02 f303 	mul.w	r3, r2, r3
 800bd2a:	2105      	movs	r1, #5
 800bd2c:	4618      	mov	r0, r3
 800bd2e:	f00d fd2d 	bl	801978c <jdiv_round_up>
 800bd32:	4603      	mov	r3, r0
    cinfo->jpeg_width = (JDIMENSION)
 800bd34:	461a      	mov	r2, r3
 800bd36:	687b      	ldr	r3, [r7, #4]
 800bd38:	641a      	str	r2, [r3, #64]	@ 0x40
      jdiv_round_up((long) cinfo->image_height * cinfo->block_size, 5L);
 800bd3a:	687b      	ldr	r3, [r7, #4]
 800bd3c:	6a1b      	ldr	r3, [r3, #32]
 800bd3e:	461a      	mov	r2, r3
 800bd40:	687b      	ldr	r3, [r7, #4]
 800bd42:	f8d3 3178 	ldr.w	r3, [r3, #376]	@ 0x178
 800bd46:	fb02 f303 	mul.w	r3, r2, r3
 800bd4a:	2105      	movs	r1, #5
 800bd4c:	4618      	mov	r0, r3
 800bd4e:	f00d fd1d 	bl	801978c <jdiv_round_up>
 800bd52:	4603      	mov	r3, r0
    cinfo->jpeg_height = (JDIMENSION)
 800bd54:	461a      	mov	r2, r3
 800bd56:	687b      	ldr	r3, [r7, #4]
 800bd58:	645a      	str	r2, [r3, #68]	@ 0x44
    cinfo->min_DCT_h_scaled_size = 5;
 800bd5a:	687b      	ldr	r3, [r7, #4]
 800bd5c:	2205      	movs	r2, #5
 800bd5e:	f8c3 2114 	str.w	r2, [r3, #276]	@ 0x114
    cinfo->min_DCT_v_scaled_size = 5;
 800bd62:	687b      	ldr	r3, [r7, #4]
 800bd64:	2205      	movs	r2, #5
 800bd66:	f8c3 2118 	str.w	r2, [r3, #280]	@ 0x118
}
 800bd6a:	e257      	b.n	800c21c <jpeg_calc_jpeg_dimensions+0x6e4>
  } else if (cinfo->scale_num * 6 >= cinfo->scale_denom * cinfo->block_size) {
 800bd6c:	687b      	ldr	r3, [r7, #4]
 800bd6e:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800bd70:	4613      	mov	r3, r2
 800bd72:	005b      	lsls	r3, r3, #1
 800bd74:	4413      	add	r3, r2
 800bd76:	005b      	lsls	r3, r3, #1
 800bd78:	4619      	mov	r1, r3
 800bd7a:	687b      	ldr	r3, [r7, #4]
 800bd7c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800bd7e:	687a      	ldr	r2, [r7, #4]
 800bd80:	f8d2 2178 	ldr.w	r2, [r2, #376]	@ 0x178
 800bd84:	fb02 f303 	mul.w	r3, r2, r3
 800bd88:	4299      	cmp	r1, r3
 800bd8a:	d328      	bcc.n	800bdde <jpeg_calc_jpeg_dimensions+0x2a6>
      jdiv_round_up((long) cinfo->image_width * cinfo->block_size, 6L);
 800bd8c:	687b      	ldr	r3, [r7, #4]
 800bd8e:	69db      	ldr	r3, [r3, #28]
 800bd90:	461a      	mov	r2, r3
 800bd92:	687b      	ldr	r3, [r7, #4]
 800bd94:	f8d3 3178 	ldr.w	r3, [r3, #376]	@ 0x178
 800bd98:	fb02 f303 	mul.w	r3, r2, r3
 800bd9c:	2106      	movs	r1, #6
 800bd9e:	4618      	mov	r0, r3
 800bda0:	f00d fcf4 	bl	801978c <jdiv_round_up>
 800bda4:	4603      	mov	r3, r0
    cinfo->jpeg_width = (JDIMENSION)
 800bda6:	461a      	mov	r2, r3
 800bda8:	687b      	ldr	r3, [r7, #4]
 800bdaa:	641a      	str	r2, [r3, #64]	@ 0x40
      jdiv_round_up((long) cinfo->image_height * cinfo->block_size, 6L);
 800bdac:	687b      	ldr	r3, [r7, #4]
 800bdae:	6a1b      	ldr	r3, [r3, #32]
 800bdb0:	461a      	mov	r2, r3
 800bdb2:	687b      	ldr	r3, [r7, #4]
 800bdb4:	f8d3 3178 	ldr.w	r3, [r3, #376]	@ 0x178
 800bdb8:	fb02 f303 	mul.w	r3, r2, r3
 800bdbc:	2106      	movs	r1, #6
 800bdbe:	4618      	mov	r0, r3
 800bdc0:	f00d fce4 	bl	801978c <jdiv_round_up>
 800bdc4:	4603      	mov	r3, r0
    cinfo->jpeg_height = (JDIMENSION)
 800bdc6:	461a      	mov	r2, r3
 800bdc8:	687b      	ldr	r3, [r7, #4]
 800bdca:	645a      	str	r2, [r3, #68]	@ 0x44
    cinfo->min_DCT_h_scaled_size = 6;
 800bdcc:	687b      	ldr	r3, [r7, #4]
 800bdce:	2206      	movs	r2, #6
 800bdd0:	f8c3 2114 	str.w	r2, [r3, #276]	@ 0x114
    cinfo->min_DCT_v_scaled_size = 6;
 800bdd4:	687b      	ldr	r3, [r7, #4]
 800bdd6:	2206      	movs	r2, #6
 800bdd8:	f8c3 2118 	str.w	r2, [r3, #280]	@ 0x118
}
 800bddc:	e21e      	b.n	800c21c <jpeg_calc_jpeg_dimensions+0x6e4>
  } else if (cinfo->scale_num * 7 >= cinfo->scale_denom * cinfo->block_size) {
 800bdde:	687b      	ldr	r3, [r7, #4]
 800bde0:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800bde2:	4613      	mov	r3, r2
 800bde4:	00db      	lsls	r3, r3, #3
 800bde6:	1a9a      	subs	r2, r3, r2
 800bde8:	687b      	ldr	r3, [r7, #4]
 800bdea:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800bdec:	6879      	ldr	r1, [r7, #4]
 800bdee:	f8d1 1178 	ldr.w	r1, [r1, #376]	@ 0x178
 800bdf2:	fb01 f303 	mul.w	r3, r1, r3
 800bdf6:	429a      	cmp	r2, r3
 800bdf8:	d328      	bcc.n	800be4c <jpeg_calc_jpeg_dimensions+0x314>
      jdiv_round_up((long) cinfo->image_width * cinfo->block_size, 7L);
 800bdfa:	687b      	ldr	r3, [r7, #4]
 800bdfc:	69db      	ldr	r3, [r3, #28]
 800bdfe:	461a      	mov	r2, r3
 800be00:	687b      	ldr	r3, [r7, #4]
 800be02:	f8d3 3178 	ldr.w	r3, [r3, #376]	@ 0x178
 800be06:	fb02 f303 	mul.w	r3, r2, r3
 800be0a:	2107      	movs	r1, #7
 800be0c:	4618      	mov	r0, r3
 800be0e:	f00d fcbd 	bl	801978c <jdiv_round_up>
 800be12:	4603      	mov	r3, r0
    cinfo->jpeg_width = (JDIMENSION)
 800be14:	461a      	mov	r2, r3
 800be16:	687b      	ldr	r3, [r7, #4]
 800be18:	641a      	str	r2, [r3, #64]	@ 0x40
      jdiv_round_up((long) cinfo->image_height * cinfo->block_size, 7L);
 800be1a:	687b      	ldr	r3, [r7, #4]
 800be1c:	6a1b      	ldr	r3, [r3, #32]
 800be1e:	461a      	mov	r2, r3
 800be20:	687b      	ldr	r3, [r7, #4]
 800be22:	f8d3 3178 	ldr.w	r3, [r3, #376]	@ 0x178
 800be26:	fb02 f303 	mul.w	r3, r2, r3
 800be2a:	2107      	movs	r1, #7
 800be2c:	4618      	mov	r0, r3
 800be2e:	f00d fcad 	bl	801978c <jdiv_round_up>
 800be32:	4603      	mov	r3, r0
    cinfo->jpeg_height = (JDIMENSION)
 800be34:	461a      	mov	r2, r3
 800be36:	687b      	ldr	r3, [r7, #4]
 800be38:	645a      	str	r2, [r3, #68]	@ 0x44
    cinfo->min_DCT_h_scaled_size = 7;
 800be3a:	687b      	ldr	r3, [r7, #4]
 800be3c:	2207      	movs	r2, #7
 800be3e:	f8c3 2114 	str.w	r2, [r3, #276]	@ 0x114
    cinfo->min_DCT_v_scaled_size = 7;
 800be42:	687b      	ldr	r3, [r7, #4]
 800be44:	2207      	movs	r2, #7
 800be46:	f8c3 2118 	str.w	r2, [r3, #280]	@ 0x118
}
 800be4a:	e1e7      	b.n	800c21c <jpeg_calc_jpeg_dimensions+0x6e4>
  } else if (cinfo->scale_num * 8 >= cinfo->scale_denom * cinfo->block_size) {
 800be4c:	687b      	ldr	r3, [r7, #4]
 800be4e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800be50:	00da      	lsls	r2, r3, #3
 800be52:	687b      	ldr	r3, [r7, #4]
 800be54:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800be56:	6879      	ldr	r1, [r7, #4]
 800be58:	f8d1 1178 	ldr.w	r1, [r1, #376]	@ 0x178
 800be5c:	fb01 f303 	mul.w	r3, r1, r3
 800be60:	429a      	cmp	r2, r3
 800be62:	d328      	bcc.n	800beb6 <jpeg_calc_jpeg_dimensions+0x37e>
      jdiv_round_up((long) cinfo->image_width * cinfo->block_size, 8L);
 800be64:	687b      	ldr	r3, [r7, #4]
 800be66:	69db      	ldr	r3, [r3, #28]
 800be68:	461a      	mov	r2, r3
 800be6a:	687b      	ldr	r3, [r7, #4]
 800be6c:	f8d3 3178 	ldr.w	r3, [r3, #376]	@ 0x178
 800be70:	fb02 f303 	mul.w	r3, r2, r3
 800be74:	2108      	movs	r1, #8
 800be76:	4618      	mov	r0, r3
 800be78:	f00d fc88 	bl	801978c <jdiv_round_up>
 800be7c:	4603      	mov	r3, r0
    cinfo->jpeg_width = (JDIMENSION)
 800be7e:	461a      	mov	r2, r3
 800be80:	687b      	ldr	r3, [r7, #4]
 800be82:	641a      	str	r2, [r3, #64]	@ 0x40
      jdiv_round_up((long) cinfo->image_height * cinfo->block_size, 8L);
 800be84:	687b      	ldr	r3, [r7, #4]
 800be86:	6a1b      	ldr	r3, [r3, #32]
 800be88:	461a      	mov	r2, r3
 800be8a:	687b      	ldr	r3, [r7, #4]
 800be8c:	f8d3 3178 	ldr.w	r3, [r3, #376]	@ 0x178
 800be90:	fb02 f303 	mul.w	r3, r2, r3
 800be94:	2108      	movs	r1, #8
 800be96:	4618      	mov	r0, r3
 800be98:	f00d fc78 	bl	801978c <jdiv_round_up>
 800be9c:	4603      	mov	r3, r0
    cinfo->jpeg_height = (JDIMENSION)
 800be9e:	461a      	mov	r2, r3
 800bea0:	687b      	ldr	r3, [r7, #4]
 800bea2:	645a      	str	r2, [r3, #68]	@ 0x44
    cinfo->min_DCT_h_scaled_size = 8;
 800bea4:	687b      	ldr	r3, [r7, #4]
 800bea6:	2208      	movs	r2, #8
 800bea8:	f8c3 2114 	str.w	r2, [r3, #276]	@ 0x114
    cinfo->min_DCT_v_scaled_size = 8;
 800beac:	687b      	ldr	r3, [r7, #4]
 800beae:	2208      	movs	r2, #8
 800beb0:	f8c3 2118 	str.w	r2, [r3, #280]	@ 0x118
}
 800beb4:	e1b2      	b.n	800c21c <jpeg_calc_jpeg_dimensions+0x6e4>
  } else if (cinfo->scale_num * 9 >= cinfo->scale_denom * cinfo->block_size) {
 800beb6:	687b      	ldr	r3, [r7, #4]
 800beb8:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800beba:	4613      	mov	r3, r2
 800bebc:	00db      	lsls	r3, r3, #3
 800bebe:	441a      	add	r2, r3
 800bec0:	687b      	ldr	r3, [r7, #4]
 800bec2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800bec4:	6879      	ldr	r1, [r7, #4]
 800bec6:	f8d1 1178 	ldr.w	r1, [r1, #376]	@ 0x178
 800beca:	fb01 f303 	mul.w	r3, r1, r3
 800bece:	429a      	cmp	r2, r3
 800bed0:	d328      	bcc.n	800bf24 <jpeg_calc_jpeg_dimensions+0x3ec>
      jdiv_round_up((long) cinfo->image_width * cinfo->block_size, 9L);
 800bed2:	687b      	ldr	r3, [r7, #4]
 800bed4:	69db      	ldr	r3, [r3, #28]
 800bed6:	461a      	mov	r2, r3
 800bed8:	687b      	ldr	r3, [r7, #4]
 800beda:	f8d3 3178 	ldr.w	r3, [r3, #376]	@ 0x178
 800bede:	fb02 f303 	mul.w	r3, r2, r3
 800bee2:	2109      	movs	r1, #9
 800bee4:	4618      	mov	r0, r3
 800bee6:	f00d fc51 	bl	801978c <jdiv_round_up>
 800beea:	4603      	mov	r3, r0
    cinfo->jpeg_width = (JDIMENSION)
 800beec:	461a      	mov	r2, r3
 800beee:	687b      	ldr	r3, [r7, #4]
 800bef0:	641a      	str	r2, [r3, #64]	@ 0x40
      jdiv_round_up((long) cinfo->image_height * cinfo->block_size, 9L);
 800bef2:	687b      	ldr	r3, [r7, #4]
 800bef4:	6a1b      	ldr	r3, [r3, #32]
 800bef6:	461a      	mov	r2, r3
 800bef8:	687b      	ldr	r3, [r7, #4]
 800befa:	f8d3 3178 	ldr.w	r3, [r3, #376]	@ 0x178
 800befe:	fb02 f303 	mul.w	r3, r2, r3
 800bf02:	2109      	movs	r1, #9
 800bf04:	4618      	mov	r0, r3
 800bf06:	f00d fc41 	bl	801978c <jdiv_round_up>
 800bf0a:	4603      	mov	r3, r0
    cinfo->jpeg_height = (JDIMENSION)
 800bf0c:	461a      	mov	r2, r3
 800bf0e:	687b      	ldr	r3, [r7, #4]
 800bf10:	645a      	str	r2, [r3, #68]	@ 0x44
    cinfo->min_DCT_h_scaled_size = 9;
 800bf12:	687b      	ldr	r3, [r7, #4]
 800bf14:	2209      	movs	r2, #9
 800bf16:	f8c3 2114 	str.w	r2, [r3, #276]	@ 0x114
    cinfo->min_DCT_v_scaled_size = 9;
 800bf1a:	687b      	ldr	r3, [r7, #4]
 800bf1c:	2209      	movs	r2, #9
 800bf1e:	f8c3 2118 	str.w	r2, [r3, #280]	@ 0x118
}
 800bf22:	e17b      	b.n	800c21c <jpeg_calc_jpeg_dimensions+0x6e4>
  } else if (cinfo->scale_num * 10 >= cinfo->scale_denom * cinfo->block_size) {
 800bf24:	687b      	ldr	r3, [r7, #4]
 800bf26:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800bf28:	4613      	mov	r3, r2
 800bf2a:	009b      	lsls	r3, r3, #2
 800bf2c:	4413      	add	r3, r2
 800bf2e:	005b      	lsls	r3, r3, #1
 800bf30:	4619      	mov	r1, r3
 800bf32:	687b      	ldr	r3, [r7, #4]
 800bf34:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800bf36:	687a      	ldr	r2, [r7, #4]
 800bf38:	f8d2 2178 	ldr.w	r2, [r2, #376]	@ 0x178
 800bf3c:	fb02 f303 	mul.w	r3, r2, r3
 800bf40:	4299      	cmp	r1, r3
 800bf42:	d328      	bcc.n	800bf96 <jpeg_calc_jpeg_dimensions+0x45e>
      jdiv_round_up((long) cinfo->image_width * cinfo->block_size, 10L);
 800bf44:	687b      	ldr	r3, [r7, #4]
 800bf46:	69db      	ldr	r3, [r3, #28]
 800bf48:	461a      	mov	r2, r3
 800bf4a:	687b      	ldr	r3, [r7, #4]
 800bf4c:	f8d3 3178 	ldr.w	r3, [r3, #376]	@ 0x178
 800bf50:	fb02 f303 	mul.w	r3, r2, r3
 800bf54:	210a      	movs	r1, #10
 800bf56:	4618      	mov	r0, r3
 800bf58:	f00d fc18 	bl	801978c <jdiv_round_up>
 800bf5c:	4603      	mov	r3, r0
    cinfo->jpeg_width = (JDIMENSION)
 800bf5e:	461a      	mov	r2, r3
 800bf60:	687b      	ldr	r3, [r7, #4]
 800bf62:	641a      	str	r2, [r3, #64]	@ 0x40
      jdiv_round_up((long) cinfo->image_height * cinfo->block_size, 10L);
 800bf64:	687b      	ldr	r3, [r7, #4]
 800bf66:	6a1b      	ldr	r3, [r3, #32]
 800bf68:	461a      	mov	r2, r3
 800bf6a:	687b      	ldr	r3, [r7, #4]
 800bf6c:	f8d3 3178 	ldr.w	r3, [r3, #376]	@ 0x178
 800bf70:	fb02 f303 	mul.w	r3, r2, r3
 800bf74:	210a      	movs	r1, #10
 800bf76:	4618      	mov	r0, r3
 800bf78:	f00d fc08 	bl	801978c <jdiv_round_up>
 800bf7c:	4603      	mov	r3, r0
    cinfo->jpeg_height = (JDIMENSION)
 800bf7e:	461a      	mov	r2, r3
 800bf80:	687b      	ldr	r3, [r7, #4]
 800bf82:	645a      	str	r2, [r3, #68]	@ 0x44
    cinfo->min_DCT_h_scaled_size = 10;
 800bf84:	687b      	ldr	r3, [r7, #4]
 800bf86:	220a      	movs	r2, #10
 800bf88:	f8c3 2114 	str.w	r2, [r3, #276]	@ 0x114
    cinfo->min_DCT_v_scaled_size = 10;
 800bf8c:	687b      	ldr	r3, [r7, #4]
 800bf8e:	220a      	movs	r2, #10
 800bf90:	f8c3 2118 	str.w	r2, [r3, #280]	@ 0x118
}
 800bf94:	e142      	b.n	800c21c <jpeg_calc_jpeg_dimensions+0x6e4>
  } else if (cinfo->scale_num * 11 >= cinfo->scale_denom * cinfo->block_size) {
 800bf96:	687b      	ldr	r3, [r7, #4]
 800bf98:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800bf9a:	4613      	mov	r3, r2
 800bf9c:	009b      	lsls	r3, r3, #2
 800bf9e:	4413      	add	r3, r2
 800bfa0:	005b      	lsls	r3, r3, #1
 800bfa2:	441a      	add	r2, r3
 800bfa4:	687b      	ldr	r3, [r7, #4]
 800bfa6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800bfa8:	6879      	ldr	r1, [r7, #4]
 800bfaa:	f8d1 1178 	ldr.w	r1, [r1, #376]	@ 0x178
 800bfae:	fb01 f303 	mul.w	r3, r1, r3
 800bfb2:	429a      	cmp	r2, r3
 800bfb4:	d328      	bcc.n	800c008 <jpeg_calc_jpeg_dimensions+0x4d0>
      jdiv_round_up((long) cinfo->image_width * cinfo->block_size, 11L);
 800bfb6:	687b      	ldr	r3, [r7, #4]
 800bfb8:	69db      	ldr	r3, [r3, #28]
 800bfba:	461a      	mov	r2, r3
 800bfbc:	687b      	ldr	r3, [r7, #4]
 800bfbe:	f8d3 3178 	ldr.w	r3, [r3, #376]	@ 0x178
 800bfc2:	fb02 f303 	mul.w	r3, r2, r3
 800bfc6:	210b      	movs	r1, #11
 800bfc8:	4618      	mov	r0, r3
 800bfca:	f00d fbdf 	bl	801978c <jdiv_round_up>
 800bfce:	4603      	mov	r3, r0
    cinfo->jpeg_width = (JDIMENSION)
 800bfd0:	461a      	mov	r2, r3
 800bfd2:	687b      	ldr	r3, [r7, #4]
 800bfd4:	641a      	str	r2, [r3, #64]	@ 0x40
      jdiv_round_up((long) cinfo->image_height * cinfo->block_size, 11L);
 800bfd6:	687b      	ldr	r3, [r7, #4]
 800bfd8:	6a1b      	ldr	r3, [r3, #32]
 800bfda:	461a      	mov	r2, r3
 800bfdc:	687b      	ldr	r3, [r7, #4]
 800bfde:	f8d3 3178 	ldr.w	r3, [r3, #376]	@ 0x178
 800bfe2:	fb02 f303 	mul.w	r3, r2, r3
 800bfe6:	210b      	movs	r1, #11
 800bfe8:	4618      	mov	r0, r3
 800bfea:	f00d fbcf 	bl	801978c <jdiv_round_up>
 800bfee:	4603      	mov	r3, r0
    cinfo->jpeg_height = (JDIMENSION)
 800bff0:	461a      	mov	r2, r3
 800bff2:	687b      	ldr	r3, [r7, #4]
 800bff4:	645a      	str	r2, [r3, #68]	@ 0x44
    cinfo->min_DCT_h_scaled_size = 11;
 800bff6:	687b      	ldr	r3, [r7, #4]
 800bff8:	220b      	movs	r2, #11
 800bffa:	f8c3 2114 	str.w	r2, [r3, #276]	@ 0x114
    cinfo->min_DCT_v_scaled_size = 11;
 800bffe:	687b      	ldr	r3, [r7, #4]
 800c000:	220b      	movs	r2, #11
 800c002:	f8c3 2118 	str.w	r2, [r3, #280]	@ 0x118
}
 800c006:	e109      	b.n	800c21c <jpeg_calc_jpeg_dimensions+0x6e4>
  } else if (cinfo->scale_num * 12 >= cinfo->scale_denom * cinfo->block_size) {
 800c008:	687b      	ldr	r3, [r7, #4]
 800c00a:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800c00c:	4613      	mov	r3, r2
 800c00e:	005b      	lsls	r3, r3, #1
 800c010:	4413      	add	r3, r2
 800c012:	009b      	lsls	r3, r3, #2
 800c014:	4619      	mov	r1, r3
 800c016:	687b      	ldr	r3, [r7, #4]
 800c018:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800c01a:	687a      	ldr	r2, [r7, #4]
 800c01c:	f8d2 2178 	ldr.w	r2, [r2, #376]	@ 0x178
 800c020:	fb02 f303 	mul.w	r3, r2, r3
 800c024:	4299      	cmp	r1, r3
 800c026:	d328      	bcc.n	800c07a <jpeg_calc_jpeg_dimensions+0x542>
      jdiv_round_up((long) cinfo->image_width * cinfo->block_size, 12L);
 800c028:	687b      	ldr	r3, [r7, #4]
 800c02a:	69db      	ldr	r3, [r3, #28]
 800c02c:	461a      	mov	r2, r3
 800c02e:	687b      	ldr	r3, [r7, #4]
 800c030:	f8d3 3178 	ldr.w	r3, [r3, #376]	@ 0x178
 800c034:	fb02 f303 	mul.w	r3, r2, r3
 800c038:	210c      	movs	r1, #12
 800c03a:	4618      	mov	r0, r3
 800c03c:	f00d fba6 	bl	801978c <jdiv_round_up>
 800c040:	4603      	mov	r3, r0
    cinfo->jpeg_width = (JDIMENSION)
 800c042:	461a      	mov	r2, r3
 800c044:	687b      	ldr	r3, [r7, #4]
 800c046:	641a      	str	r2, [r3, #64]	@ 0x40
      jdiv_round_up((long) cinfo->image_height * cinfo->block_size, 12L);
 800c048:	687b      	ldr	r3, [r7, #4]
 800c04a:	6a1b      	ldr	r3, [r3, #32]
 800c04c:	461a      	mov	r2, r3
 800c04e:	687b      	ldr	r3, [r7, #4]
 800c050:	f8d3 3178 	ldr.w	r3, [r3, #376]	@ 0x178
 800c054:	fb02 f303 	mul.w	r3, r2, r3
 800c058:	210c      	movs	r1, #12
 800c05a:	4618      	mov	r0, r3
 800c05c:	f00d fb96 	bl	801978c <jdiv_round_up>
 800c060:	4603      	mov	r3, r0
    cinfo->jpeg_height = (JDIMENSION)
 800c062:	461a      	mov	r2, r3
 800c064:	687b      	ldr	r3, [r7, #4]
 800c066:	645a      	str	r2, [r3, #68]	@ 0x44
    cinfo->min_DCT_h_scaled_size = 12;
 800c068:	687b      	ldr	r3, [r7, #4]
 800c06a:	220c      	movs	r2, #12
 800c06c:	f8c3 2114 	str.w	r2, [r3, #276]	@ 0x114
    cinfo->min_DCT_v_scaled_size = 12;
 800c070:	687b      	ldr	r3, [r7, #4]
 800c072:	220c      	movs	r2, #12
 800c074:	f8c3 2118 	str.w	r2, [r3, #280]	@ 0x118
}
 800c078:	e0d0      	b.n	800c21c <jpeg_calc_jpeg_dimensions+0x6e4>
  } else if (cinfo->scale_num * 13 >= cinfo->scale_denom * cinfo->block_size) {
 800c07a:	687b      	ldr	r3, [r7, #4]
 800c07c:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800c07e:	4613      	mov	r3, r2
 800c080:	005b      	lsls	r3, r3, #1
 800c082:	4413      	add	r3, r2
 800c084:	009b      	lsls	r3, r3, #2
 800c086:	441a      	add	r2, r3
 800c088:	687b      	ldr	r3, [r7, #4]
 800c08a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800c08c:	6879      	ldr	r1, [r7, #4]
 800c08e:	f8d1 1178 	ldr.w	r1, [r1, #376]	@ 0x178
 800c092:	fb01 f303 	mul.w	r3, r1, r3
 800c096:	429a      	cmp	r2, r3
 800c098:	d328      	bcc.n	800c0ec <jpeg_calc_jpeg_dimensions+0x5b4>
      jdiv_round_up((long) cinfo->image_width * cinfo->block_size, 13L);
 800c09a:	687b      	ldr	r3, [r7, #4]
 800c09c:	69db      	ldr	r3, [r3, #28]
 800c09e:	461a      	mov	r2, r3
 800c0a0:	687b      	ldr	r3, [r7, #4]
 800c0a2:	f8d3 3178 	ldr.w	r3, [r3, #376]	@ 0x178
 800c0a6:	fb02 f303 	mul.w	r3, r2, r3
 800c0aa:	210d      	movs	r1, #13
 800c0ac:	4618      	mov	r0, r3
 800c0ae:	f00d fb6d 	bl	801978c <jdiv_round_up>
 800c0b2:	4603      	mov	r3, r0
    cinfo->jpeg_width = (JDIMENSION)
 800c0b4:	461a      	mov	r2, r3
 800c0b6:	687b      	ldr	r3, [r7, #4]
 800c0b8:	641a      	str	r2, [r3, #64]	@ 0x40
      jdiv_round_up((long) cinfo->image_height * cinfo->block_size, 13L);
 800c0ba:	687b      	ldr	r3, [r7, #4]
 800c0bc:	6a1b      	ldr	r3, [r3, #32]
 800c0be:	461a      	mov	r2, r3
 800c0c0:	687b      	ldr	r3, [r7, #4]
 800c0c2:	f8d3 3178 	ldr.w	r3, [r3, #376]	@ 0x178
 800c0c6:	fb02 f303 	mul.w	r3, r2, r3
 800c0ca:	210d      	movs	r1, #13
 800c0cc:	4618      	mov	r0, r3
 800c0ce:	f00d fb5d 	bl	801978c <jdiv_round_up>
 800c0d2:	4603      	mov	r3, r0
    cinfo->jpeg_height = (JDIMENSION)
 800c0d4:	461a      	mov	r2, r3
 800c0d6:	687b      	ldr	r3, [r7, #4]
 800c0d8:	645a      	str	r2, [r3, #68]	@ 0x44
    cinfo->min_DCT_h_scaled_size = 13;
 800c0da:	687b      	ldr	r3, [r7, #4]
 800c0dc:	220d      	movs	r2, #13
 800c0de:	f8c3 2114 	str.w	r2, [r3, #276]	@ 0x114
    cinfo->min_DCT_v_scaled_size = 13;
 800c0e2:	687b      	ldr	r3, [r7, #4]
 800c0e4:	220d      	movs	r2, #13
 800c0e6:	f8c3 2118 	str.w	r2, [r3, #280]	@ 0x118
}
 800c0ea:	e097      	b.n	800c21c <jpeg_calc_jpeg_dimensions+0x6e4>
  } else if (cinfo->scale_num * 14 >= cinfo->scale_denom * cinfo->block_size) {
 800c0ec:	687b      	ldr	r3, [r7, #4]
 800c0ee:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800c0f0:	4613      	mov	r3, r2
 800c0f2:	00db      	lsls	r3, r3, #3
 800c0f4:	1a9b      	subs	r3, r3, r2
 800c0f6:	005b      	lsls	r3, r3, #1
 800c0f8:	4619      	mov	r1, r3
 800c0fa:	687b      	ldr	r3, [r7, #4]
 800c0fc:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800c0fe:	687a      	ldr	r2, [r7, #4]
 800c100:	f8d2 2178 	ldr.w	r2, [r2, #376]	@ 0x178
 800c104:	fb02 f303 	mul.w	r3, r2, r3
 800c108:	4299      	cmp	r1, r3
 800c10a:	d328      	bcc.n	800c15e <jpeg_calc_jpeg_dimensions+0x626>
      jdiv_round_up((long) cinfo->image_width * cinfo->block_size, 14L);
 800c10c:	687b      	ldr	r3, [r7, #4]
 800c10e:	69db      	ldr	r3, [r3, #28]
 800c110:	461a      	mov	r2, r3
 800c112:	687b      	ldr	r3, [r7, #4]
 800c114:	f8d3 3178 	ldr.w	r3, [r3, #376]	@ 0x178
 800c118:	fb02 f303 	mul.w	r3, r2, r3
 800c11c:	210e      	movs	r1, #14
 800c11e:	4618      	mov	r0, r3
 800c120:	f00d fb34 	bl	801978c <jdiv_round_up>
 800c124:	4603      	mov	r3, r0
    cinfo->jpeg_width = (JDIMENSION)
 800c126:	461a      	mov	r2, r3
 800c128:	687b      	ldr	r3, [r7, #4]
 800c12a:	641a      	str	r2, [r3, #64]	@ 0x40
      jdiv_round_up((long) cinfo->image_height * cinfo->block_size, 14L);
 800c12c:	687b      	ldr	r3, [r7, #4]
 800c12e:	6a1b      	ldr	r3, [r3, #32]
 800c130:	461a      	mov	r2, r3
 800c132:	687b      	ldr	r3, [r7, #4]
 800c134:	f8d3 3178 	ldr.w	r3, [r3, #376]	@ 0x178
 800c138:	fb02 f303 	mul.w	r3, r2, r3
 800c13c:	210e      	movs	r1, #14
 800c13e:	4618      	mov	r0, r3
 800c140:	f00d fb24 	bl	801978c <jdiv_round_up>
 800c144:	4603      	mov	r3, r0
    cinfo->jpeg_height = (JDIMENSION)
 800c146:	461a      	mov	r2, r3
 800c148:	687b      	ldr	r3, [r7, #4]
 800c14a:	645a      	str	r2, [r3, #68]	@ 0x44
    cinfo->min_DCT_h_scaled_size = 14;
 800c14c:	687b      	ldr	r3, [r7, #4]
 800c14e:	220e      	movs	r2, #14
 800c150:	f8c3 2114 	str.w	r2, [r3, #276]	@ 0x114
    cinfo->min_DCT_v_scaled_size = 14;
 800c154:	687b      	ldr	r3, [r7, #4]
 800c156:	220e      	movs	r2, #14
 800c158:	f8c3 2118 	str.w	r2, [r3, #280]	@ 0x118
}
 800c15c:	e05e      	b.n	800c21c <jpeg_calc_jpeg_dimensions+0x6e4>
  } else if (cinfo->scale_num * 15 >= cinfo->scale_denom * cinfo->block_size) {
 800c15e:	687b      	ldr	r3, [r7, #4]
 800c160:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800c162:	4613      	mov	r3, r2
 800c164:	011b      	lsls	r3, r3, #4
 800c166:	1a9a      	subs	r2, r3, r2
 800c168:	687b      	ldr	r3, [r7, #4]
 800c16a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800c16c:	6879      	ldr	r1, [r7, #4]
 800c16e:	f8d1 1178 	ldr.w	r1, [r1, #376]	@ 0x178
 800c172:	fb01 f303 	mul.w	r3, r1, r3
 800c176:	429a      	cmp	r2, r3
 800c178:	d328      	bcc.n	800c1cc <jpeg_calc_jpeg_dimensions+0x694>
      jdiv_round_up((long) cinfo->image_width * cinfo->block_size, 15L);
 800c17a:	687b      	ldr	r3, [r7, #4]
 800c17c:	69db      	ldr	r3, [r3, #28]
 800c17e:	461a      	mov	r2, r3
 800c180:	687b      	ldr	r3, [r7, #4]
 800c182:	f8d3 3178 	ldr.w	r3, [r3, #376]	@ 0x178
 800c186:	fb02 f303 	mul.w	r3, r2, r3
 800c18a:	210f      	movs	r1, #15
 800c18c:	4618      	mov	r0, r3
 800c18e:	f00d fafd 	bl	801978c <jdiv_round_up>
 800c192:	4603      	mov	r3, r0
    cinfo->jpeg_width = (JDIMENSION)
 800c194:	461a      	mov	r2, r3
 800c196:	687b      	ldr	r3, [r7, #4]
 800c198:	641a      	str	r2, [r3, #64]	@ 0x40
      jdiv_round_up((long) cinfo->image_height * cinfo->block_size, 15L);
 800c19a:	687b      	ldr	r3, [r7, #4]
 800c19c:	6a1b      	ldr	r3, [r3, #32]
 800c19e:	461a      	mov	r2, r3
 800c1a0:	687b      	ldr	r3, [r7, #4]
 800c1a2:	f8d3 3178 	ldr.w	r3, [r3, #376]	@ 0x178
 800c1a6:	fb02 f303 	mul.w	r3, r2, r3
 800c1aa:	210f      	movs	r1, #15
 800c1ac:	4618      	mov	r0, r3
 800c1ae:	f00d faed 	bl	801978c <jdiv_round_up>
 800c1b2:	4603      	mov	r3, r0
    cinfo->jpeg_height = (JDIMENSION)
 800c1b4:	461a      	mov	r2, r3
 800c1b6:	687b      	ldr	r3, [r7, #4]
 800c1b8:	645a      	str	r2, [r3, #68]	@ 0x44
    cinfo->min_DCT_h_scaled_size = 15;
 800c1ba:	687b      	ldr	r3, [r7, #4]
 800c1bc:	220f      	movs	r2, #15
 800c1be:	f8c3 2114 	str.w	r2, [r3, #276]	@ 0x114
    cinfo->min_DCT_v_scaled_size = 15;
 800c1c2:	687b      	ldr	r3, [r7, #4]
 800c1c4:	220f      	movs	r2, #15
 800c1c6:	f8c3 2118 	str.w	r2, [r3, #280]	@ 0x118
}
 800c1ca:	e027      	b.n	800c21c <jpeg_calc_jpeg_dimensions+0x6e4>
      jdiv_round_up((long) cinfo->image_width * cinfo->block_size, 16L);
 800c1cc:	687b      	ldr	r3, [r7, #4]
 800c1ce:	69db      	ldr	r3, [r3, #28]
 800c1d0:	461a      	mov	r2, r3
 800c1d2:	687b      	ldr	r3, [r7, #4]
 800c1d4:	f8d3 3178 	ldr.w	r3, [r3, #376]	@ 0x178
 800c1d8:	fb02 f303 	mul.w	r3, r2, r3
 800c1dc:	2110      	movs	r1, #16
 800c1de:	4618      	mov	r0, r3
 800c1e0:	f00d fad4 	bl	801978c <jdiv_round_up>
 800c1e4:	4603      	mov	r3, r0
    cinfo->jpeg_width = (JDIMENSION)
 800c1e6:	461a      	mov	r2, r3
 800c1e8:	687b      	ldr	r3, [r7, #4]
 800c1ea:	641a      	str	r2, [r3, #64]	@ 0x40
      jdiv_round_up((long) cinfo->image_height * cinfo->block_size, 16L);
 800c1ec:	687b      	ldr	r3, [r7, #4]
 800c1ee:	6a1b      	ldr	r3, [r3, #32]
 800c1f0:	461a      	mov	r2, r3
 800c1f2:	687b      	ldr	r3, [r7, #4]
 800c1f4:	f8d3 3178 	ldr.w	r3, [r3, #376]	@ 0x178
 800c1f8:	fb02 f303 	mul.w	r3, r2, r3
 800c1fc:	2110      	movs	r1, #16
 800c1fe:	4618      	mov	r0, r3
 800c200:	f00d fac4 	bl	801978c <jdiv_round_up>
 800c204:	4603      	mov	r3, r0
    cinfo->jpeg_height = (JDIMENSION)
 800c206:	461a      	mov	r2, r3
 800c208:	687b      	ldr	r3, [r7, #4]
 800c20a:	645a      	str	r2, [r3, #68]	@ 0x44
    cinfo->min_DCT_h_scaled_size = 16;
 800c20c:	687b      	ldr	r3, [r7, #4]
 800c20e:	2210      	movs	r2, #16
 800c210:	f8c3 2114 	str.w	r2, [r3, #276]	@ 0x114
    cinfo->min_DCT_v_scaled_size = 16;
 800c214:	687b      	ldr	r3, [r7, #4]
 800c216:	2210      	movs	r2, #16
 800c218:	f8c3 2118 	str.w	r2, [r3, #280]	@ 0x118
}
 800c21c:	bf00      	nop
 800c21e:	3708      	adds	r7, #8
 800c220:	46bd      	mov	sp, r7
 800c222:	bd80      	pop	{r7, pc}

0800c224 <jpeg_calc_trans_dimensions>:


LOCAL(void)
jpeg_calc_trans_dimensions (j_compress_ptr cinfo)
{
 800c224:	b580      	push	{r7, lr}
 800c226:	b082      	sub	sp, #8
 800c228:	af00      	add	r7, sp, #0
 800c22a:	6078      	str	r0, [r7, #4]
  if (cinfo->min_DCT_h_scaled_size != cinfo->min_DCT_v_scaled_size)
 800c22c:	687b      	ldr	r3, [r7, #4]
 800c22e:	f8d3 2114 	ldr.w	r2, [r3, #276]	@ 0x114
 800c232:	687b      	ldr	r3, [r7, #4]
 800c234:	f8d3 3118 	ldr.w	r3, [r3, #280]	@ 0x118
 800c238:	429a      	cmp	r2, r3
 800c23a:	d014      	beq.n	800c266 <jpeg_calc_trans_dimensions+0x42>
    ERREXIT2(cinfo, JERR_BAD_DCTSIZE,
 800c23c:	687b      	ldr	r3, [r7, #4]
 800c23e:	681b      	ldr	r3, [r3, #0]
 800c240:	2207      	movs	r2, #7
 800c242:	615a      	str	r2, [r3, #20]
 800c244:	687b      	ldr	r3, [r7, #4]
 800c246:	681b      	ldr	r3, [r3, #0]
 800c248:	687a      	ldr	r2, [r7, #4]
 800c24a:	f8d2 2114 	ldr.w	r2, [r2, #276]	@ 0x114
 800c24e:	619a      	str	r2, [r3, #24]
 800c250:	687b      	ldr	r3, [r7, #4]
 800c252:	681b      	ldr	r3, [r3, #0]
 800c254:	687a      	ldr	r2, [r7, #4]
 800c256:	f8d2 2118 	ldr.w	r2, [r2, #280]	@ 0x118
 800c25a:	61da      	str	r2, [r3, #28]
 800c25c:	687b      	ldr	r3, [r7, #4]
 800c25e:	681b      	ldr	r3, [r3, #0]
 800c260:	681b      	ldr	r3, [r3, #0]
 800c262:	6878      	ldr	r0, [r7, #4]
 800c264:	4798      	blx	r3
	     cinfo->min_DCT_h_scaled_size, cinfo->min_DCT_v_scaled_size);

  cinfo->block_size = cinfo->min_DCT_h_scaled_size;
 800c266:	687b      	ldr	r3, [r7, #4]
 800c268:	f8d3 2114 	ldr.w	r2, [r3, #276]	@ 0x114
 800c26c:	687b      	ldr	r3, [r7, #4]
 800c26e:	f8c3 2178 	str.w	r2, [r3, #376]	@ 0x178
}
 800c272:	bf00      	nop
 800c274:	3708      	adds	r7, #8
 800c276:	46bd      	mov	sp, r7
 800c278:	bd80      	pop	{r7, pc}
	...

0800c27c <initial_setup>:


LOCAL(void)
initial_setup (j_compress_ptr cinfo, boolean transcode_only)
/* Do computations that are needed before master selection phase */
{
 800c27c:	b580      	push	{r7, lr}
 800c27e:	b088      	sub	sp, #32
 800c280:	af00      	add	r7, sp, #0
 800c282:	6078      	str	r0, [r7, #4]
 800c284:	6039      	str	r1, [r7, #0]
  int ci, ssize;
  jpeg_component_info *compptr;
  long samplesperrow;
  JDIMENSION jd_samplesperrow;

  if (transcode_only)
 800c286:	683b      	ldr	r3, [r7, #0]
 800c288:	2b00      	cmp	r3, #0
 800c28a:	d003      	beq.n	800c294 <initial_setup+0x18>
    jpeg_calc_trans_dimensions(cinfo);
 800c28c:	6878      	ldr	r0, [r7, #4]
 800c28e:	f7ff ffc9 	bl	800c224 <jpeg_calc_trans_dimensions>
 800c292:	e002      	b.n	800c29a <initial_setup+0x1e>
  else
    jpeg_calc_jpeg_dimensions(cinfo);
 800c294:	6878      	ldr	r0, [r7, #4]
 800c296:	f7ff fc4f 	bl	800bb38 <jpeg_calc_jpeg_dimensions>

  /* Sanity check on block_size */
  if (cinfo->block_size < 1 || cinfo->block_size > 16)
 800c29a:	687b      	ldr	r3, [r7, #4]
 800c29c:	f8d3 3178 	ldr.w	r3, [r3, #376]	@ 0x178
 800c2a0:	2b00      	cmp	r3, #0
 800c2a2:	dd04      	ble.n	800c2ae <initial_setup+0x32>
 800c2a4:	687b      	ldr	r3, [r7, #4]
 800c2a6:	f8d3 3178 	ldr.w	r3, [r3, #376]	@ 0x178
 800c2aa:	2b10      	cmp	r3, #16
 800c2ac:	dd14      	ble.n	800c2d8 <initial_setup+0x5c>
    ERREXIT2(cinfo, JERR_BAD_DCTSIZE, cinfo->block_size, cinfo->block_size);
 800c2ae:	687b      	ldr	r3, [r7, #4]
 800c2b0:	681b      	ldr	r3, [r3, #0]
 800c2b2:	2207      	movs	r2, #7
 800c2b4:	615a      	str	r2, [r3, #20]
 800c2b6:	687b      	ldr	r3, [r7, #4]
 800c2b8:	681b      	ldr	r3, [r3, #0]
 800c2ba:	687a      	ldr	r2, [r7, #4]
 800c2bc:	f8d2 2178 	ldr.w	r2, [r2, #376]	@ 0x178
 800c2c0:	619a      	str	r2, [r3, #24]
 800c2c2:	687b      	ldr	r3, [r7, #4]
 800c2c4:	681b      	ldr	r3, [r3, #0]
 800c2c6:	687a      	ldr	r2, [r7, #4]
 800c2c8:	f8d2 2178 	ldr.w	r2, [r2, #376]	@ 0x178
 800c2cc:	61da      	str	r2, [r3, #28]
 800c2ce:	687b      	ldr	r3, [r7, #4]
 800c2d0:	681b      	ldr	r3, [r3, #0]
 800c2d2:	681b      	ldr	r3, [r3, #0]
 800c2d4:	6878      	ldr	r0, [r7, #4]
 800c2d6:	4798      	blx	r3

  /* Derive natural_order from block_size */
  switch (cinfo->block_size) {
 800c2d8:	687b      	ldr	r3, [r7, #4]
 800c2da:	f8d3 3178 	ldr.w	r3, [r3, #376]	@ 0x178
 800c2de:	3b02      	subs	r3, #2
 800c2e0:	2b05      	cmp	r3, #5
 800c2e2:	d82d      	bhi.n	800c340 <initial_setup+0xc4>
 800c2e4:	a201      	add	r2, pc, #4	@ (adr r2, 800c2ec <initial_setup+0x70>)
 800c2e6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c2ea:	bf00      	nop
 800c2ec:	0800c305 	.word	0x0800c305
 800c2f0:	0800c30f 	.word	0x0800c30f
 800c2f4:	0800c319 	.word	0x0800c319
 800c2f8:	0800c323 	.word	0x0800c323
 800c2fc:	0800c32d 	.word	0x0800c32d
 800c300:	0800c337 	.word	0x0800c337
  case 2: cinfo->natural_order = jpeg_natural_order2; break;
 800c304:	687b      	ldr	r3, [r7, #4]
 800c306:	4a95      	ldr	r2, [pc, #596]	@ (800c55c <initial_setup+0x2e0>)
 800c308:	f8c3 217c 	str.w	r2, [r3, #380]	@ 0x17c
 800c30c:	e01d      	b.n	800c34a <initial_setup+0xce>
  case 3: cinfo->natural_order = jpeg_natural_order3; break;
 800c30e:	687b      	ldr	r3, [r7, #4]
 800c310:	4a93      	ldr	r2, [pc, #588]	@ (800c560 <initial_setup+0x2e4>)
 800c312:	f8c3 217c 	str.w	r2, [r3, #380]	@ 0x17c
 800c316:	e018      	b.n	800c34a <initial_setup+0xce>
  case 4: cinfo->natural_order = jpeg_natural_order4; break;
 800c318:	687b      	ldr	r3, [r7, #4]
 800c31a:	4a92      	ldr	r2, [pc, #584]	@ (800c564 <initial_setup+0x2e8>)
 800c31c:	f8c3 217c 	str.w	r2, [r3, #380]	@ 0x17c
 800c320:	e013      	b.n	800c34a <initial_setup+0xce>
  case 5: cinfo->natural_order = jpeg_natural_order5; break;
 800c322:	687b      	ldr	r3, [r7, #4]
 800c324:	4a90      	ldr	r2, [pc, #576]	@ (800c568 <initial_setup+0x2ec>)
 800c326:	f8c3 217c 	str.w	r2, [r3, #380]	@ 0x17c
 800c32a:	e00e      	b.n	800c34a <initial_setup+0xce>
  case 6: cinfo->natural_order = jpeg_natural_order6; break;
 800c32c:	687b      	ldr	r3, [r7, #4]
 800c32e:	4a8f      	ldr	r2, [pc, #572]	@ (800c56c <initial_setup+0x2f0>)
 800c330:	f8c3 217c 	str.w	r2, [r3, #380]	@ 0x17c
 800c334:	e009      	b.n	800c34a <initial_setup+0xce>
  case 7: cinfo->natural_order = jpeg_natural_order7; break;
 800c336:	687b      	ldr	r3, [r7, #4]
 800c338:	4a8d      	ldr	r2, [pc, #564]	@ (800c570 <initial_setup+0x2f4>)
 800c33a:	f8c3 217c 	str.w	r2, [r3, #380]	@ 0x17c
 800c33e:	e004      	b.n	800c34a <initial_setup+0xce>
  default: cinfo->natural_order = jpeg_natural_order; break;
 800c340:	687b      	ldr	r3, [r7, #4]
 800c342:	4a8c      	ldr	r2, [pc, #560]	@ (800c574 <initial_setup+0x2f8>)
 800c344:	f8c3 217c 	str.w	r2, [r3, #380]	@ 0x17c
 800c348:	bf00      	nop
  }

  /* Derive lim_Se from block_size */
  cinfo->lim_Se = cinfo->block_size < DCTSIZE ?
 800c34a:	687b      	ldr	r3, [r7, #4]
 800c34c:	f8d3 3178 	ldr.w	r3, [r3, #376]	@ 0x178
    cinfo->block_size * cinfo->block_size - 1 : DCTSIZE2-1;
 800c350:	2b07      	cmp	r3, #7
 800c352:	dc09      	bgt.n	800c368 <initial_setup+0xec>
 800c354:	687b      	ldr	r3, [r7, #4]
 800c356:	f8d3 3178 	ldr.w	r3, [r3, #376]	@ 0x178
 800c35a:	687a      	ldr	r2, [r7, #4]
 800c35c:	f8d2 2178 	ldr.w	r2, [r2, #376]	@ 0x178
 800c360:	fb02 f303 	mul.w	r3, r2, r3
 800c364:	3b01      	subs	r3, #1
 800c366:	e000      	b.n	800c36a <initial_setup+0xee>
 800c368:	233f      	movs	r3, #63	@ 0x3f
  cinfo->lim_Se = cinfo->block_size < DCTSIZE ?
 800c36a:	687a      	ldr	r2, [r7, #4]
 800c36c:	f8c2 3180 	str.w	r3, [r2, #384]	@ 0x180

  /* Sanity check on image dimensions */
  if (cinfo->jpeg_height <= 0 || cinfo->jpeg_width <= 0 ||
 800c370:	687b      	ldr	r3, [r7, #4]
 800c372:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800c374:	2b00      	cmp	r3, #0
 800c376:	d00b      	beq.n	800c390 <initial_setup+0x114>
 800c378:	687b      	ldr	r3, [r7, #4]
 800c37a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800c37c:	2b00      	cmp	r3, #0
 800c37e:	d007      	beq.n	800c390 <initial_setup+0x114>
      cinfo->num_components <= 0 || cinfo->input_components <= 0)
 800c380:	687b      	ldr	r3, [r7, #4]
 800c382:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
  if (cinfo->jpeg_height <= 0 || cinfo->jpeg_width <= 0 ||
 800c384:	2b00      	cmp	r3, #0
 800c386:	dd03      	ble.n	800c390 <initial_setup+0x114>
      cinfo->num_components <= 0 || cinfo->input_components <= 0)
 800c388:	687b      	ldr	r3, [r7, #4]
 800c38a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800c38c:	2b00      	cmp	r3, #0
 800c38e:	dc08      	bgt.n	800c3a2 <initial_setup+0x126>
    ERREXIT(cinfo, JERR_EMPTY_IMAGE);
 800c390:	687b      	ldr	r3, [r7, #4]
 800c392:	681b      	ldr	r3, [r3, #0]
 800c394:	2221      	movs	r2, #33	@ 0x21
 800c396:	615a      	str	r2, [r3, #20]
 800c398:	687b      	ldr	r3, [r7, #4]
 800c39a:	681b      	ldr	r3, [r3, #0]
 800c39c:	681b      	ldr	r3, [r3, #0]
 800c39e:	6878      	ldr	r0, [r7, #4]
 800c3a0:	4798      	blx	r3

  /* Make sure image isn't bigger than I can handle */
  if ((long) cinfo->jpeg_height > (long) JPEG_MAX_DIMENSION ||
 800c3a2:	687b      	ldr	r3, [r7, #4]
 800c3a4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800c3a6:	461a      	mov	r2, r3
 800c3a8:	f64f 73dc 	movw	r3, #65500	@ 0xffdc
 800c3ac:	429a      	cmp	r2, r3
 800c3ae:	dc06      	bgt.n	800c3be <initial_setup+0x142>
      (long) cinfo->jpeg_width > (long) JPEG_MAX_DIMENSION)
 800c3b0:	687b      	ldr	r3, [r7, #4]
 800c3b2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800c3b4:	461a      	mov	r2, r3
  if ((long) cinfo->jpeg_height > (long) JPEG_MAX_DIMENSION ||
 800c3b6:	f64f 73dc 	movw	r3, #65500	@ 0xffdc
 800c3ba:	429a      	cmp	r2, r3
 800c3bc:	dd0d      	ble.n	800c3da <initial_setup+0x15e>
    ERREXIT1(cinfo, JERR_IMAGE_TOO_BIG, (unsigned int) JPEG_MAX_DIMENSION);
 800c3be:	687b      	ldr	r3, [r7, #4]
 800c3c0:	681b      	ldr	r3, [r3, #0]
 800c3c2:	222a      	movs	r2, #42	@ 0x2a
 800c3c4:	615a      	str	r2, [r3, #20]
 800c3c6:	687b      	ldr	r3, [r7, #4]
 800c3c8:	681b      	ldr	r3, [r3, #0]
 800c3ca:	f64f 72dc 	movw	r2, #65500	@ 0xffdc
 800c3ce:	619a      	str	r2, [r3, #24]
 800c3d0:	687b      	ldr	r3, [r7, #4]
 800c3d2:	681b      	ldr	r3, [r3, #0]
 800c3d4:	681b      	ldr	r3, [r3, #0]
 800c3d6:	6878      	ldr	r0, [r7, #4]
 800c3d8:	4798      	blx	r3

  /* Width of an input scanline must be representable as JDIMENSION. */
  samplesperrow = (long) cinfo->image_width * (long) cinfo->input_components;
 800c3da:	687b      	ldr	r3, [r7, #4]
 800c3dc:	69db      	ldr	r3, [r3, #28]
 800c3de:	461a      	mov	r2, r3
 800c3e0:	687b      	ldr	r3, [r7, #4]
 800c3e2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800c3e4:	fb02 f303 	mul.w	r3, r2, r3
 800c3e8:	613b      	str	r3, [r7, #16]
  jd_samplesperrow = (JDIMENSION) samplesperrow;
 800c3ea:	693b      	ldr	r3, [r7, #16]
 800c3ec:	60fb      	str	r3, [r7, #12]
  if ((long) jd_samplesperrow != samplesperrow)
 800c3ee:	68fb      	ldr	r3, [r7, #12]
 800c3f0:	693a      	ldr	r2, [r7, #16]
 800c3f2:	429a      	cmp	r2, r3
 800c3f4:	d008      	beq.n	800c408 <initial_setup+0x18c>
    ERREXIT(cinfo, JERR_WIDTH_OVERFLOW);
 800c3f6:	687b      	ldr	r3, [r7, #4]
 800c3f8:	681b      	ldr	r3, [r3, #0]
 800c3fa:	2248      	movs	r2, #72	@ 0x48
 800c3fc:	615a      	str	r2, [r3, #20]
 800c3fe:	687b      	ldr	r3, [r7, #4]
 800c400:	681b      	ldr	r3, [r3, #0]
 800c402:	681b      	ldr	r3, [r3, #0]
 800c404:	6878      	ldr	r0, [r7, #4]
 800c406:	4798      	blx	r3

  /* For now, precision must match compiled-in value... */
  if (cinfo->data_precision != BITS_IN_JSAMPLE)
 800c408:	687b      	ldr	r3, [r7, #4]
 800c40a:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800c40c:	2b08      	cmp	r3, #8
 800c40e:	d00d      	beq.n	800c42c <initial_setup+0x1b0>
    ERREXIT1(cinfo, JERR_BAD_PRECISION, cinfo->data_precision);
 800c410:	687b      	ldr	r3, [r7, #4]
 800c412:	681b      	ldr	r3, [r3, #0]
 800c414:	2210      	movs	r2, #16
 800c416:	615a      	str	r2, [r3, #20]
 800c418:	687b      	ldr	r3, [r7, #4]
 800c41a:	681b      	ldr	r3, [r3, #0]
 800c41c:	687a      	ldr	r2, [r7, #4]
 800c41e:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 800c420:	619a      	str	r2, [r3, #24]
 800c422:	687b      	ldr	r3, [r7, #4]
 800c424:	681b      	ldr	r3, [r3, #0]
 800c426:	681b      	ldr	r3, [r3, #0]
 800c428:	6878      	ldr	r0, [r7, #4]
 800c42a:	4798      	blx	r3

  /* Check that number of components won't exceed internal array sizes */
  if (cinfo->num_components > MAX_COMPONENTS)
 800c42c:	687b      	ldr	r3, [r7, #4]
 800c42e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800c430:	2b0a      	cmp	r3, #10
 800c432:	dd11      	ble.n	800c458 <initial_setup+0x1dc>
    ERREXIT2(cinfo, JERR_COMPONENT_COUNT, cinfo->num_components,
 800c434:	687b      	ldr	r3, [r7, #4]
 800c436:	681b      	ldr	r3, [r3, #0]
 800c438:	221b      	movs	r2, #27
 800c43a:	615a      	str	r2, [r3, #20]
 800c43c:	687b      	ldr	r3, [r7, #4]
 800c43e:	681b      	ldr	r3, [r3, #0]
 800c440:	687a      	ldr	r2, [r7, #4]
 800c442:	6cd2      	ldr	r2, [r2, #76]	@ 0x4c
 800c444:	619a      	str	r2, [r3, #24]
 800c446:	687b      	ldr	r3, [r7, #4]
 800c448:	681b      	ldr	r3, [r3, #0]
 800c44a:	220a      	movs	r2, #10
 800c44c:	61da      	str	r2, [r3, #28]
 800c44e:	687b      	ldr	r3, [r7, #4]
 800c450:	681b      	ldr	r3, [r3, #0]
 800c452:	681b      	ldr	r3, [r3, #0]
 800c454:	6878      	ldr	r0, [r7, #4]
 800c456:	4798      	blx	r3
	     MAX_COMPONENTS);

  /* Compute maximum sampling factors; check factor validity */
  cinfo->max_h_samp_factor = 1;
 800c458:	687b      	ldr	r3, [r7, #4]
 800c45a:	2201      	movs	r2, #1
 800c45c:	f8c3 210c 	str.w	r2, [r3, #268]	@ 0x10c
  cinfo->max_v_samp_factor = 1;
 800c460:	687b      	ldr	r3, [r7, #4]
 800c462:	2201      	movs	r2, #1
 800c464:	f8c3 2110 	str.w	r2, [r3, #272]	@ 0x110
  for (ci = 0, compptr = cinfo->comp_info; ci < cinfo->num_components;
 800c468:	2300      	movs	r3, #0
 800c46a:	61fb      	str	r3, [r7, #28]
 800c46c:	687b      	ldr	r3, [r7, #4]
 800c46e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800c470:	617b      	str	r3, [r7, #20]
 800c472:	e034      	b.n	800c4de <initial_setup+0x262>
       ci++, compptr++) {
    if (compptr->h_samp_factor<=0 || compptr->h_samp_factor>MAX_SAMP_FACTOR ||
 800c474:	697b      	ldr	r3, [r7, #20]
 800c476:	689b      	ldr	r3, [r3, #8]
 800c478:	2b00      	cmp	r3, #0
 800c47a:	dd0b      	ble.n	800c494 <initial_setup+0x218>
 800c47c:	697b      	ldr	r3, [r7, #20]
 800c47e:	689b      	ldr	r3, [r3, #8]
 800c480:	2b04      	cmp	r3, #4
 800c482:	dc07      	bgt.n	800c494 <initial_setup+0x218>
	compptr->v_samp_factor<=0 || compptr->v_samp_factor>MAX_SAMP_FACTOR)
 800c484:	697b      	ldr	r3, [r7, #20]
 800c486:	68db      	ldr	r3, [r3, #12]
    if (compptr->h_samp_factor<=0 || compptr->h_samp_factor>MAX_SAMP_FACTOR ||
 800c488:	2b00      	cmp	r3, #0
 800c48a:	dd03      	ble.n	800c494 <initial_setup+0x218>
	compptr->v_samp_factor<=0 || compptr->v_samp_factor>MAX_SAMP_FACTOR)
 800c48c:	697b      	ldr	r3, [r7, #20]
 800c48e:	68db      	ldr	r3, [r3, #12]
 800c490:	2b04      	cmp	r3, #4
 800c492:	dd08      	ble.n	800c4a6 <initial_setup+0x22a>
      ERREXIT(cinfo, JERR_BAD_SAMPLING);
 800c494:	687b      	ldr	r3, [r7, #4]
 800c496:	681b      	ldr	r3, [r3, #0]
 800c498:	2213      	movs	r2, #19
 800c49a:	615a      	str	r2, [r3, #20]
 800c49c:	687b      	ldr	r3, [r7, #4]
 800c49e:	681b      	ldr	r3, [r3, #0]
 800c4a0:	681b      	ldr	r3, [r3, #0]
 800c4a2:	6878      	ldr	r0, [r7, #4]
 800c4a4:	4798      	blx	r3
    cinfo->max_h_samp_factor = MAX(cinfo->max_h_samp_factor,
 800c4a6:	697b      	ldr	r3, [r7, #20]
 800c4a8:	689a      	ldr	r2, [r3, #8]
 800c4aa:	687b      	ldr	r3, [r7, #4]
 800c4ac:	f8d3 310c 	ldr.w	r3, [r3, #268]	@ 0x10c
 800c4b0:	429a      	cmp	r2, r3
 800c4b2:	bfb8      	it	lt
 800c4b4:	461a      	movlt	r2, r3
 800c4b6:	687b      	ldr	r3, [r7, #4]
 800c4b8:	f8c3 210c 	str.w	r2, [r3, #268]	@ 0x10c
				   compptr->h_samp_factor);
    cinfo->max_v_samp_factor = MAX(cinfo->max_v_samp_factor,
 800c4bc:	697b      	ldr	r3, [r7, #20]
 800c4be:	68da      	ldr	r2, [r3, #12]
 800c4c0:	687b      	ldr	r3, [r7, #4]
 800c4c2:	f8d3 3110 	ldr.w	r3, [r3, #272]	@ 0x110
 800c4c6:	429a      	cmp	r2, r3
 800c4c8:	bfb8      	it	lt
 800c4ca:	461a      	movlt	r2, r3
 800c4cc:	687b      	ldr	r3, [r7, #4]
 800c4ce:	f8c3 2110 	str.w	r2, [r3, #272]	@ 0x110
       ci++, compptr++) {
 800c4d2:	69fb      	ldr	r3, [r7, #28]
 800c4d4:	3301      	adds	r3, #1
 800c4d6:	61fb      	str	r3, [r7, #28]
 800c4d8:	697b      	ldr	r3, [r7, #20]
 800c4da:	3358      	adds	r3, #88	@ 0x58
 800c4dc:	617b      	str	r3, [r7, #20]
  for (ci = 0, compptr = cinfo->comp_info; ci < cinfo->num_components;
 800c4de:	687b      	ldr	r3, [r7, #4]
 800c4e0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800c4e2:	69fa      	ldr	r2, [r7, #28]
 800c4e4:	429a      	cmp	r2, r3
 800c4e6:	dbc5      	blt.n	800c474 <initial_setup+0x1f8>
				   compptr->v_samp_factor);
  }

  /* Compute dimensions of components */
  for (ci = 0, compptr = cinfo->comp_info; ci < cinfo->num_components;
 800c4e8:	2300      	movs	r3, #0
 800c4ea:	61fb      	str	r3, [r7, #28]
 800c4ec:	687b      	ldr	r3, [r7, #4]
 800c4ee:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800c4f0:	617b      	str	r3, [r7, #20]
 800c4f2:	e0ee      	b.n	800c6d2 <initial_setup+0x456>
       ci++, compptr++) {
    /* Fill in the correct component_index value; don't rely on application */
    compptr->component_index = ci;
 800c4f4:	697b      	ldr	r3, [r7, #20]
 800c4f6:	69fa      	ldr	r2, [r7, #28]
 800c4f8:	605a      	str	r2, [r3, #4]
    /* In selecting the actual DCT scaling for each component, we try to
     * scale down the chroma components via DCT scaling rather than downsampling.
     * This saves time if the downsampler gets to use 1:1 scaling.
     * Note this code adapts subsampling ratios which are powers of 2.
     */
    ssize = 1;
 800c4fa:	2301      	movs	r3, #1
 800c4fc:	61bb      	str	r3, [r7, #24]
#ifdef DCT_SCALING_SUPPORTED
    while (cinfo->min_DCT_h_scaled_size * ssize <=
 800c4fe:	e002      	b.n	800c506 <initial_setup+0x28a>
	   (cinfo->do_fancy_downsampling ? DCTSIZE : DCTSIZE / 2) &&
	   (cinfo->max_h_samp_factor % (compptr->h_samp_factor * ssize * 2)) == 0) {
      ssize = ssize * 2;
 800c500:	69bb      	ldr	r3, [r7, #24]
 800c502:	005b      	lsls	r3, r3, #1
 800c504:	61bb      	str	r3, [r7, #24]
    while (cinfo->min_DCT_h_scaled_size * ssize <=
 800c506:	687b      	ldr	r3, [r7, #4]
 800c508:	f8d3 3114 	ldr.w	r3, [r3, #276]	@ 0x114
 800c50c:	69ba      	ldr	r2, [r7, #24]
 800c50e:	fb02 f303 	mul.w	r3, r2, r3
	   (cinfo->do_fancy_downsampling ? DCTSIZE : DCTSIZE / 2) &&
 800c512:	687a      	ldr	r2, [r7, #4]
 800c514:	f8d2 20e0 	ldr.w	r2, [r2, #224]	@ 0xe0
 800c518:	2a00      	cmp	r2, #0
 800c51a:	d001      	beq.n	800c520 <initial_setup+0x2a4>
 800c51c:	2208      	movs	r2, #8
 800c51e:	e000      	b.n	800c522 <initial_setup+0x2a6>
 800c520:	2204      	movs	r2, #4
 800c522:	429a      	cmp	r2, r3
 800c524:	db0f      	blt.n	800c546 <initial_setup+0x2ca>
	   (cinfo->max_h_samp_factor % (compptr->h_samp_factor * ssize * 2)) == 0) {
 800c526:	687b      	ldr	r3, [r7, #4]
 800c528:	f8d3 310c 	ldr.w	r3, [r3, #268]	@ 0x10c
 800c52c:	697a      	ldr	r2, [r7, #20]
 800c52e:	6892      	ldr	r2, [r2, #8]
 800c530:	69b9      	ldr	r1, [r7, #24]
 800c532:	fb01 f202 	mul.w	r2, r1, r2
 800c536:	0052      	lsls	r2, r2, #1
 800c538:	fb93 f1f2 	sdiv	r1, r3, r2
 800c53c:	fb01 f202 	mul.w	r2, r1, r2
 800c540:	1a9b      	subs	r3, r3, r2
	   (cinfo->do_fancy_downsampling ? DCTSIZE : DCTSIZE / 2) &&
 800c542:	2b00      	cmp	r3, #0
 800c544:	d0dc      	beq.n	800c500 <initial_setup+0x284>
    }
#endif
    compptr->DCT_h_scaled_size = cinfo->min_DCT_h_scaled_size * ssize;
 800c546:	687b      	ldr	r3, [r7, #4]
 800c548:	f8d3 3114 	ldr.w	r3, [r3, #276]	@ 0x114
 800c54c:	69ba      	ldr	r2, [r7, #24]
 800c54e:	fb03 f202 	mul.w	r2, r3, r2
 800c552:	697b      	ldr	r3, [r7, #20]
 800c554:	625a      	str	r2, [r3, #36]	@ 0x24
    ssize = 1;
 800c556:	2301      	movs	r3, #1
 800c558:	61bb      	str	r3, [r7, #24]
#ifdef DCT_SCALING_SUPPORTED
    while (cinfo->min_DCT_v_scaled_size * ssize <=
 800c55a:	e010      	b.n	800c57e <initial_setup+0x302>
 800c55c:	0801c284 	.word	0x0801c284
 800c560:	0801c220 	.word	0x0801c220
 800c564:	0801c1a0 	.word	0x0801c1a0
 800c568:	0801c0fc 	.word	0x0801c0fc
 800c56c:	0801c02c 	.word	0x0801c02c
 800c570:	0801bf28 	.word	0x0801bf28
 800c574:	0801bde8 	.word	0x0801bde8
	   (cinfo->do_fancy_downsampling ? DCTSIZE : DCTSIZE / 2) &&
	   (cinfo->max_v_samp_factor % (compptr->v_samp_factor * ssize * 2)) == 0) {
      ssize = ssize * 2;
 800c578:	69bb      	ldr	r3, [r7, #24]
 800c57a:	005b      	lsls	r3, r3, #1
 800c57c:	61bb      	str	r3, [r7, #24]
    while (cinfo->min_DCT_v_scaled_size * ssize <=
 800c57e:	687b      	ldr	r3, [r7, #4]
 800c580:	f8d3 3118 	ldr.w	r3, [r3, #280]	@ 0x118
 800c584:	69ba      	ldr	r2, [r7, #24]
 800c586:	fb02 f303 	mul.w	r3, r2, r3
	   (cinfo->do_fancy_downsampling ? DCTSIZE : DCTSIZE / 2) &&
 800c58a:	687a      	ldr	r2, [r7, #4]
 800c58c:	f8d2 20e0 	ldr.w	r2, [r2, #224]	@ 0xe0
 800c590:	2a00      	cmp	r2, #0
 800c592:	d001      	beq.n	800c598 <initial_setup+0x31c>
 800c594:	2208      	movs	r2, #8
 800c596:	e000      	b.n	800c59a <initial_setup+0x31e>
 800c598:	2204      	movs	r2, #4
 800c59a:	429a      	cmp	r2, r3
 800c59c:	db0f      	blt.n	800c5be <initial_setup+0x342>
	   (cinfo->max_v_samp_factor % (compptr->v_samp_factor * ssize * 2)) == 0) {
 800c59e:	687b      	ldr	r3, [r7, #4]
 800c5a0:	f8d3 3110 	ldr.w	r3, [r3, #272]	@ 0x110
 800c5a4:	697a      	ldr	r2, [r7, #20]
 800c5a6:	68d2      	ldr	r2, [r2, #12]
 800c5a8:	69b9      	ldr	r1, [r7, #24]
 800c5aa:	fb01 f202 	mul.w	r2, r1, r2
 800c5ae:	0052      	lsls	r2, r2, #1
 800c5b0:	fb93 f1f2 	sdiv	r1, r3, r2
 800c5b4:	fb01 f202 	mul.w	r2, r1, r2
 800c5b8:	1a9b      	subs	r3, r3, r2
	   (cinfo->do_fancy_downsampling ? DCTSIZE : DCTSIZE / 2) &&
 800c5ba:	2b00      	cmp	r3, #0
 800c5bc:	d0dc      	beq.n	800c578 <initial_setup+0x2fc>
    }
#endif
    compptr->DCT_v_scaled_size = cinfo->min_DCT_v_scaled_size * ssize;
 800c5be:	687b      	ldr	r3, [r7, #4]
 800c5c0:	f8d3 3118 	ldr.w	r3, [r3, #280]	@ 0x118
 800c5c4:	69ba      	ldr	r2, [r7, #24]
 800c5c6:	fb03 f202 	mul.w	r2, r3, r2
 800c5ca:	697b      	ldr	r3, [r7, #20]
 800c5cc:	629a      	str	r2, [r3, #40]	@ 0x28

    /* We don't support DCT ratios larger than 2. */
    if (compptr->DCT_h_scaled_size > compptr->DCT_v_scaled_size * 2)
 800c5ce:	697b      	ldr	r3, [r7, #20]
 800c5d0:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800c5d2:	697b      	ldr	r3, [r7, #20]
 800c5d4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800c5d6:	005b      	lsls	r3, r3, #1
 800c5d8:	429a      	cmp	r2, r3
 800c5da:	dd05      	ble.n	800c5e8 <initial_setup+0x36c>
	compptr->DCT_h_scaled_size = compptr->DCT_v_scaled_size * 2;
 800c5dc:	697b      	ldr	r3, [r7, #20]
 800c5de:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800c5e0:	005a      	lsls	r2, r3, #1
 800c5e2:	697b      	ldr	r3, [r7, #20]
 800c5e4:	625a      	str	r2, [r3, #36]	@ 0x24
 800c5e6:	e00b      	b.n	800c600 <initial_setup+0x384>
    else if (compptr->DCT_v_scaled_size > compptr->DCT_h_scaled_size * 2)
 800c5e8:	697b      	ldr	r3, [r7, #20]
 800c5ea:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 800c5ec:	697b      	ldr	r3, [r7, #20]
 800c5ee:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800c5f0:	005b      	lsls	r3, r3, #1
 800c5f2:	429a      	cmp	r2, r3
 800c5f4:	dd04      	ble.n	800c600 <initial_setup+0x384>
	compptr->DCT_v_scaled_size = compptr->DCT_h_scaled_size * 2;
 800c5f6:	697b      	ldr	r3, [r7, #20]
 800c5f8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800c5fa:	005a      	lsls	r2, r3, #1
 800c5fc:	697b      	ldr	r3, [r7, #20]
 800c5fe:	629a      	str	r2, [r3, #40]	@ 0x28

    /* Size in DCT blocks */
    compptr->width_in_blocks = (JDIMENSION)
      jdiv_round_up((long) cinfo->jpeg_width * (long) compptr->h_samp_factor,
 800c600:	687b      	ldr	r3, [r7, #4]
 800c602:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800c604:	461a      	mov	r2, r3
 800c606:	697b      	ldr	r3, [r7, #20]
 800c608:	689b      	ldr	r3, [r3, #8]
 800c60a:	fb03 f002 	mul.w	r0, r3, r2
		    (long) (cinfo->max_h_samp_factor * cinfo->block_size));
 800c60e:	687b      	ldr	r3, [r7, #4]
 800c610:	f8d3 310c 	ldr.w	r3, [r3, #268]	@ 0x10c
 800c614:	687a      	ldr	r2, [r7, #4]
 800c616:	f8d2 2178 	ldr.w	r2, [r2, #376]	@ 0x178
 800c61a:	fb02 f303 	mul.w	r3, r2, r3
      jdiv_round_up((long) cinfo->jpeg_width * (long) compptr->h_samp_factor,
 800c61e:	4619      	mov	r1, r3
 800c620:	f00d f8b4 	bl	801978c <jdiv_round_up>
 800c624:	4603      	mov	r3, r0
    compptr->width_in_blocks = (JDIMENSION)
 800c626:	461a      	mov	r2, r3
 800c628:	697b      	ldr	r3, [r7, #20]
 800c62a:	61da      	str	r2, [r3, #28]
    compptr->height_in_blocks = (JDIMENSION)
      jdiv_round_up((long) cinfo->jpeg_height * (long) compptr->v_samp_factor,
 800c62c:	687b      	ldr	r3, [r7, #4]
 800c62e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800c630:	461a      	mov	r2, r3
 800c632:	697b      	ldr	r3, [r7, #20]
 800c634:	68db      	ldr	r3, [r3, #12]
 800c636:	fb03 f002 	mul.w	r0, r3, r2
		    (long) (cinfo->max_v_samp_factor * cinfo->block_size));
 800c63a:	687b      	ldr	r3, [r7, #4]
 800c63c:	f8d3 3110 	ldr.w	r3, [r3, #272]	@ 0x110
 800c640:	687a      	ldr	r2, [r7, #4]
 800c642:	f8d2 2178 	ldr.w	r2, [r2, #376]	@ 0x178
 800c646:	fb02 f303 	mul.w	r3, r2, r3
      jdiv_round_up((long) cinfo->jpeg_height * (long) compptr->v_samp_factor,
 800c64a:	4619      	mov	r1, r3
 800c64c:	f00d f89e 	bl	801978c <jdiv_round_up>
 800c650:	4603      	mov	r3, r0
    compptr->height_in_blocks = (JDIMENSION)
 800c652:	461a      	mov	r2, r3
 800c654:	697b      	ldr	r3, [r7, #20]
 800c656:	621a      	str	r2, [r3, #32]
    /* Size in samples */
    compptr->downsampled_width = (JDIMENSION)
      jdiv_round_up((long) cinfo->jpeg_width *
 800c658:	687b      	ldr	r3, [r7, #4]
 800c65a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800c65c:	4619      	mov	r1, r3
		    (long) (compptr->h_samp_factor * compptr->DCT_h_scaled_size),
 800c65e:	697b      	ldr	r3, [r7, #20]
 800c660:	689b      	ldr	r3, [r3, #8]
 800c662:	697a      	ldr	r2, [r7, #20]
 800c664:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 800c666:	fb02 f303 	mul.w	r3, r2, r3
      jdiv_round_up((long) cinfo->jpeg_width *
 800c66a:	fb03 f001 	mul.w	r0, r3, r1
		    (long) (cinfo->max_h_samp_factor * cinfo->block_size));
 800c66e:	687b      	ldr	r3, [r7, #4]
 800c670:	f8d3 310c 	ldr.w	r3, [r3, #268]	@ 0x10c
 800c674:	687a      	ldr	r2, [r7, #4]
 800c676:	f8d2 2178 	ldr.w	r2, [r2, #376]	@ 0x178
 800c67a:	fb02 f303 	mul.w	r3, r2, r3
      jdiv_round_up((long) cinfo->jpeg_width *
 800c67e:	4619      	mov	r1, r3
 800c680:	f00d f884 	bl	801978c <jdiv_round_up>
 800c684:	4603      	mov	r3, r0
    compptr->downsampled_width = (JDIMENSION)
 800c686:	461a      	mov	r2, r3
 800c688:	697b      	ldr	r3, [r7, #20]
 800c68a:	62da      	str	r2, [r3, #44]	@ 0x2c
    compptr->downsampled_height = (JDIMENSION)
      jdiv_round_up((long) cinfo->jpeg_height *
 800c68c:	687b      	ldr	r3, [r7, #4]
 800c68e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800c690:	4619      	mov	r1, r3
		    (long) (compptr->v_samp_factor * compptr->DCT_v_scaled_size),
 800c692:	697b      	ldr	r3, [r7, #20]
 800c694:	68db      	ldr	r3, [r3, #12]
 800c696:	697a      	ldr	r2, [r7, #20]
 800c698:	6a92      	ldr	r2, [r2, #40]	@ 0x28
 800c69a:	fb02 f303 	mul.w	r3, r2, r3
      jdiv_round_up((long) cinfo->jpeg_height *
 800c69e:	fb03 f001 	mul.w	r0, r3, r1
		    (long) (cinfo->max_v_samp_factor * cinfo->block_size));
 800c6a2:	687b      	ldr	r3, [r7, #4]
 800c6a4:	f8d3 3110 	ldr.w	r3, [r3, #272]	@ 0x110
 800c6a8:	687a      	ldr	r2, [r7, #4]
 800c6aa:	f8d2 2178 	ldr.w	r2, [r2, #376]	@ 0x178
 800c6ae:	fb02 f303 	mul.w	r3, r2, r3
      jdiv_round_up((long) cinfo->jpeg_height *
 800c6b2:	4619      	mov	r1, r3
 800c6b4:	f00d f86a 	bl	801978c <jdiv_round_up>
 800c6b8:	4603      	mov	r3, r0
    compptr->downsampled_height = (JDIMENSION)
 800c6ba:	461a      	mov	r2, r3
 800c6bc:	697b      	ldr	r3, [r7, #20]
 800c6be:	631a      	str	r2, [r3, #48]	@ 0x30
    /* Mark component needed (this flag isn't actually used for compression) */
    compptr->component_needed = TRUE;
 800c6c0:	697b      	ldr	r3, [r7, #20]
 800c6c2:	2201      	movs	r2, #1
 800c6c4:	635a      	str	r2, [r3, #52]	@ 0x34
       ci++, compptr++) {
 800c6c6:	69fb      	ldr	r3, [r7, #28]
 800c6c8:	3301      	adds	r3, #1
 800c6ca:	61fb      	str	r3, [r7, #28]
 800c6cc:	697b      	ldr	r3, [r7, #20]
 800c6ce:	3358      	adds	r3, #88	@ 0x58
 800c6d0:	617b      	str	r3, [r7, #20]
  for (ci = 0, compptr = cinfo->comp_info; ci < cinfo->num_components;
 800c6d2:	687b      	ldr	r3, [r7, #4]
 800c6d4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800c6d6:	69fa      	ldr	r2, [r7, #28]
 800c6d8:	429a      	cmp	r2, r3
 800c6da:	f6ff af0b 	blt.w	800c4f4 <initial_setup+0x278>

  /* Compute number of fully interleaved MCU rows (number of times that
   * main controller will call coefficient controller).
   */
  cinfo->total_iMCU_rows = (JDIMENSION)
    jdiv_round_up((long) cinfo->jpeg_height,
 800c6de:	687b      	ldr	r3, [r7, #4]
 800c6e0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800c6e2:	4618      	mov	r0, r3
		  (long) (cinfo->max_v_samp_factor * cinfo->block_size));
 800c6e4:	687b      	ldr	r3, [r7, #4]
 800c6e6:	f8d3 3110 	ldr.w	r3, [r3, #272]	@ 0x110
 800c6ea:	687a      	ldr	r2, [r7, #4]
 800c6ec:	f8d2 2178 	ldr.w	r2, [r2, #376]	@ 0x178
 800c6f0:	fb02 f303 	mul.w	r3, r2, r3
    jdiv_round_up((long) cinfo->jpeg_height,
 800c6f4:	4619      	mov	r1, r3
 800c6f6:	f00d f849 	bl	801978c <jdiv_round_up>
 800c6fa:	4603      	mov	r3, r0
  cinfo->total_iMCU_rows = (JDIMENSION)
 800c6fc:	461a      	mov	r2, r3
 800c6fe:	687b      	ldr	r3, [r7, #4]
 800c700:	f8c3 211c 	str.w	r2, [r3, #284]	@ 0x11c
}
 800c704:	bf00      	nop
 800c706:	3720      	adds	r7, #32
 800c708:	46bd      	mov	sp, r7
 800c70a:	bd80      	pop	{r7, pc}

0800c70c <validate_script>:
LOCAL(void)
validate_script (j_compress_ptr cinfo)
/* Verify that the scan script in cinfo->scan_info[] is valid; also
 * determine whether it uses progressive JPEG, and set cinfo->progressive_mode.
 */
{
 800c70c:	b580      	push	{r7, lr}
 800c70e:	f5ad 6d26 	sub.w	sp, sp, #2656	@ 0xa60
 800c712:	af00      	add	r7, sp, #0
 800c714:	f507 6326 	add.w	r3, r7, #2656	@ 0xa60
 800c718:	f6a3 235c 	subw	r3, r3, #2652	@ 0xa5c
 800c71c:	6018      	str	r0, [r3, #0]
  int * last_bitpos_ptr;
  int last_bitpos[MAX_COMPONENTS][DCTSIZE2];
  /* -1 until that coefficient has been seen; then last Al for it */
#endif

  if (cinfo->num_scans <= 0)
 800c71e:	f507 6326 	add.w	r3, r7, #2656	@ 0xa60
 800c722:	f6a3 235c 	subw	r3, r3, #2652	@ 0xa5c
 800c726:	681b      	ldr	r3, [r3, #0]
 800c728:	f8d3 30c8 	ldr.w	r3, [r3, #200]	@ 0xc8
 800c72c:	2b00      	cmp	r3, #0
 800c72e:	dc1c      	bgt.n	800c76a <validate_script+0x5e>
    ERREXIT1(cinfo, JERR_BAD_SCAN_SCRIPT, 0);
 800c730:	f507 6326 	add.w	r3, r7, #2656	@ 0xa60
 800c734:	f6a3 235c 	subw	r3, r3, #2652	@ 0xa5c
 800c738:	681b      	ldr	r3, [r3, #0]
 800c73a:	681b      	ldr	r3, [r3, #0]
 800c73c:	2214      	movs	r2, #20
 800c73e:	615a      	str	r2, [r3, #20]
 800c740:	f507 6326 	add.w	r3, r7, #2656	@ 0xa60
 800c744:	f6a3 235c 	subw	r3, r3, #2652	@ 0xa5c
 800c748:	681b      	ldr	r3, [r3, #0]
 800c74a:	681b      	ldr	r3, [r3, #0]
 800c74c:	2200      	movs	r2, #0
 800c74e:	619a      	str	r2, [r3, #24]
 800c750:	f507 6326 	add.w	r3, r7, #2656	@ 0xa60
 800c754:	f6a3 235c 	subw	r3, r3, #2652	@ 0xa5c
 800c758:	681b      	ldr	r3, [r3, #0]
 800c75a:	681b      	ldr	r3, [r3, #0]
 800c75c:	681b      	ldr	r3, [r3, #0]
 800c75e:	f507 6226 	add.w	r2, r7, #2656	@ 0xa60
 800c762:	f6a2 225c 	subw	r2, r2, #2652	@ 0xa5c
 800c766:	6810      	ldr	r0, [r2, #0]
 800c768:	4798      	blx	r3

  /* For sequential JPEG, all scans must have Ss=0, Se=DCTSIZE2-1;
   * for progressive JPEG, no scan can have this.
   */
  scanptr = cinfo->scan_info;
 800c76a:	f507 6326 	add.w	r3, r7, #2656	@ 0xa60
 800c76e:	f6a3 235c 	subw	r3, r3, #2652	@ 0xa5c
 800c772:	681b      	ldr	r3, [r3, #0]
 800c774:	f8d3 30cc 	ldr.w	r3, [r3, #204]	@ 0xcc
 800c778:	f8c7 3a5c 	str.w	r3, [r7, #2652]	@ 0xa5c
  if (scanptr->Ss != 0 || scanptr->Se != DCTSIZE2-1) {
 800c77c:	f8d7 3a5c 	ldr.w	r3, [r7, #2652]	@ 0xa5c
 800c780:	695b      	ldr	r3, [r3, #20]
 800c782:	2b00      	cmp	r3, #0
 800c784:	d104      	bne.n	800c790 <validate_script+0x84>
 800c786:	f8d7 3a5c 	ldr.w	r3, [r7, #2652]	@ 0xa5c
 800c78a:	699b      	ldr	r3, [r3, #24]
 800c78c:	2b3f      	cmp	r3, #63	@ 0x3f
 800c78e:	d034      	beq.n	800c7fa <validate_script+0xee>
#ifdef C_PROGRESSIVE_SUPPORTED
    cinfo->progressive_mode = TRUE;
 800c790:	f507 6326 	add.w	r3, r7, #2656	@ 0xa60
 800c794:	f6a3 235c 	subw	r3, r3, #2652	@ 0xa5c
 800c798:	681b      	ldr	r3, [r3, #0]
 800c79a:	2201      	movs	r2, #1
 800c79c:	f8c3 2108 	str.w	r2, [r3, #264]	@ 0x108
    last_bitpos_ptr = & last_bitpos[0][0];
 800c7a0:	f107 030c 	add.w	r3, r7, #12
 800c7a4:	f8c7 3a4c 	str.w	r3, [r7, #2636]	@ 0xa4c
    for (ci = 0; ci < cinfo->num_components; ci++) 
 800c7a8:	2300      	movs	r3, #0
 800c7aa:	f8c7 3a54 	str.w	r3, [r7, #2644]	@ 0xa54
 800c7ae:	e019      	b.n	800c7e4 <validate_script+0xd8>
      for (coefi = 0; coefi < DCTSIZE2; coefi++)
 800c7b0:	2300      	movs	r3, #0
 800c7b2:	f8c7 3a50 	str.w	r3, [r7, #2640]	@ 0xa50
 800c7b6:	e00c      	b.n	800c7d2 <validate_script+0xc6>
	*last_bitpos_ptr++ = -1;
 800c7b8:	f8d7 3a4c 	ldr.w	r3, [r7, #2636]	@ 0xa4c
 800c7bc:	1d1a      	adds	r2, r3, #4
 800c7be:	f8c7 2a4c 	str.w	r2, [r7, #2636]	@ 0xa4c
 800c7c2:	f04f 32ff 	mov.w	r2, #4294967295
 800c7c6:	601a      	str	r2, [r3, #0]
      for (coefi = 0; coefi < DCTSIZE2; coefi++)
 800c7c8:	f8d7 3a50 	ldr.w	r3, [r7, #2640]	@ 0xa50
 800c7cc:	3301      	adds	r3, #1
 800c7ce:	f8c7 3a50 	str.w	r3, [r7, #2640]	@ 0xa50
 800c7d2:	f8d7 3a50 	ldr.w	r3, [r7, #2640]	@ 0xa50
 800c7d6:	2b3f      	cmp	r3, #63	@ 0x3f
 800c7d8:	ddee      	ble.n	800c7b8 <validate_script+0xac>
    for (ci = 0; ci < cinfo->num_components; ci++) 
 800c7da:	f8d7 3a54 	ldr.w	r3, [r7, #2644]	@ 0xa54
 800c7de:	3301      	adds	r3, #1
 800c7e0:	f8c7 3a54 	str.w	r3, [r7, #2644]	@ 0xa54
 800c7e4:	f507 6326 	add.w	r3, r7, #2656	@ 0xa60
 800c7e8:	f6a3 235c 	subw	r3, r3, #2652	@ 0xa5c
 800c7ec:	681b      	ldr	r3, [r3, #0]
 800c7ee:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800c7f0:	f8d7 2a54 	ldr.w	r2, [r7, #2644]	@ 0xa54
 800c7f4:	429a      	cmp	r2, r3
 800c7f6:	dbdb      	blt.n	800c7b0 <validate_script+0xa4>
  if (scanptr->Ss != 0 || scanptr->Se != DCTSIZE2-1) {
 800c7f8:	e023      	b.n	800c842 <validate_script+0x136>
#else
    ERREXIT(cinfo, JERR_NOT_COMPILED);
#endif
  } else {
    cinfo->progressive_mode = FALSE;
 800c7fa:	f507 6326 	add.w	r3, r7, #2656	@ 0xa60
 800c7fe:	f6a3 235c 	subw	r3, r3, #2652	@ 0xa5c
 800c802:	681b      	ldr	r3, [r3, #0]
 800c804:	2200      	movs	r2, #0
 800c806:	f8c3 2108 	str.w	r2, [r3, #264]	@ 0x108
    for (ci = 0; ci < cinfo->num_components; ci++) 
 800c80a:	2300      	movs	r3, #0
 800c80c:	f8c7 3a54 	str.w	r3, [r7, #2644]	@ 0xa54
 800c810:	e00d      	b.n	800c82e <validate_script+0x122>
      component_sent[ci] = FALSE;
 800c812:	f8d7 3a54 	ldr.w	r3, [r7, #2644]	@ 0xa54
 800c816:	009b      	lsls	r3, r3, #2
 800c818:	f503 6326 	add.w	r3, r3, #2656	@ 0xa60
 800c81c:	443b      	add	r3, r7
 800c81e:	2200      	movs	r2, #0
 800c820:	f843 2c54 	str.w	r2, [r3, #-84]
    for (ci = 0; ci < cinfo->num_components; ci++) 
 800c824:	f8d7 3a54 	ldr.w	r3, [r7, #2644]	@ 0xa54
 800c828:	3301      	adds	r3, #1
 800c82a:	f8c7 3a54 	str.w	r3, [r7, #2644]	@ 0xa54
 800c82e:	f507 6326 	add.w	r3, r7, #2656	@ 0xa60
 800c832:	f6a3 235c 	subw	r3, r3, #2652	@ 0xa5c
 800c836:	681b      	ldr	r3, [r3, #0]
 800c838:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800c83a:	f8d7 2a54 	ldr.w	r2, [r7, #2644]	@ 0xa54
 800c83e:	429a      	cmp	r2, r3
 800c840:	dbe7      	blt.n	800c812 <validate_script+0x106>
  }

  for (scanno = 1; scanno <= cinfo->num_scans; scanptr++, scanno++) {
 800c842:	2301      	movs	r3, #1
 800c844:	f8c7 3a58 	str.w	r3, [r7, #2648]	@ 0xa58
 800c848:	e286      	b.n	800cd58 <validate_script+0x64c>
    /* Validate component indexes */
    ncomps = scanptr->comps_in_scan;
 800c84a:	f8d7 3a5c 	ldr.w	r3, [r7, #2652]	@ 0xa5c
 800c84e:	681b      	ldr	r3, [r3, #0]
 800c850:	f8c7 3a48 	str.w	r3, [r7, #2632]	@ 0xa48
    if (ncomps <= 0 || ncomps > MAX_COMPS_IN_SCAN)
 800c854:	f8d7 3a48 	ldr.w	r3, [r7, #2632]	@ 0xa48
 800c858:	2b00      	cmp	r3, #0
 800c85a:	dd03      	ble.n	800c864 <validate_script+0x158>
 800c85c:	f8d7 3a48 	ldr.w	r3, [r7, #2632]	@ 0xa48
 800c860:	2b04      	cmp	r3, #4
 800c862:	dd25      	ble.n	800c8b0 <validate_script+0x1a4>
      ERREXIT2(cinfo, JERR_COMPONENT_COUNT, ncomps, MAX_COMPS_IN_SCAN);
 800c864:	f507 6326 	add.w	r3, r7, #2656	@ 0xa60
 800c868:	f6a3 235c 	subw	r3, r3, #2652	@ 0xa5c
 800c86c:	681b      	ldr	r3, [r3, #0]
 800c86e:	681b      	ldr	r3, [r3, #0]
 800c870:	221b      	movs	r2, #27
 800c872:	615a      	str	r2, [r3, #20]
 800c874:	f507 6326 	add.w	r3, r7, #2656	@ 0xa60
 800c878:	f6a3 235c 	subw	r3, r3, #2652	@ 0xa5c
 800c87c:	681b      	ldr	r3, [r3, #0]
 800c87e:	681b      	ldr	r3, [r3, #0]
 800c880:	f8d7 2a48 	ldr.w	r2, [r7, #2632]	@ 0xa48
 800c884:	619a      	str	r2, [r3, #24]
 800c886:	f507 6326 	add.w	r3, r7, #2656	@ 0xa60
 800c88a:	f6a3 235c 	subw	r3, r3, #2652	@ 0xa5c
 800c88e:	681b      	ldr	r3, [r3, #0]
 800c890:	681b      	ldr	r3, [r3, #0]
 800c892:	2204      	movs	r2, #4
 800c894:	61da      	str	r2, [r3, #28]
 800c896:	f507 6326 	add.w	r3, r7, #2656	@ 0xa60
 800c89a:	f6a3 235c 	subw	r3, r3, #2652	@ 0xa5c
 800c89e:	681b      	ldr	r3, [r3, #0]
 800c8a0:	681b      	ldr	r3, [r3, #0]
 800c8a2:	681b      	ldr	r3, [r3, #0]
 800c8a4:	f507 6226 	add.w	r2, r7, #2656	@ 0xa60
 800c8a8:	f6a2 225c 	subw	r2, r2, #2652	@ 0xa5c
 800c8ac:	6810      	ldr	r0, [r2, #0]
 800c8ae:	4798      	blx	r3
    for (ci = 0; ci < ncomps; ci++) {
 800c8b0:	2300      	movs	r3, #0
 800c8b2:	f8c7 3a54 	str.w	r3, [r7, #2644]	@ 0xa54
 800c8b6:	e067      	b.n	800c988 <validate_script+0x27c>
      thisi = scanptr->component_index[ci];
 800c8b8:	f8d7 2a5c 	ldr.w	r2, [r7, #2652]	@ 0xa5c
 800c8bc:	f8d7 3a54 	ldr.w	r3, [r7, #2644]	@ 0xa54
 800c8c0:	009b      	lsls	r3, r3, #2
 800c8c2:	4413      	add	r3, r2
 800c8c4:	685b      	ldr	r3, [r3, #4]
 800c8c6:	f8c7 3a34 	str.w	r3, [r7, #2612]	@ 0xa34
      if (thisi < 0 || thisi >= cinfo->num_components)
 800c8ca:	f8d7 3a34 	ldr.w	r3, [r7, #2612]	@ 0xa34
 800c8ce:	2b00      	cmp	r3, #0
 800c8d0:	db09      	blt.n	800c8e6 <validate_script+0x1da>
 800c8d2:	f507 6326 	add.w	r3, r7, #2656	@ 0xa60
 800c8d6:	f6a3 235c 	subw	r3, r3, #2652	@ 0xa5c
 800c8da:	681b      	ldr	r3, [r3, #0]
 800c8dc:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800c8de:	f8d7 2a34 	ldr.w	r2, [r7, #2612]	@ 0xa34
 800c8e2:	429a      	cmp	r2, r3
 800c8e4:	db1d      	blt.n	800c922 <validate_script+0x216>
	ERREXIT1(cinfo, JERR_BAD_SCAN_SCRIPT, scanno);
 800c8e6:	f507 6326 	add.w	r3, r7, #2656	@ 0xa60
 800c8ea:	f6a3 235c 	subw	r3, r3, #2652	@ 0xa5c
 800c8ee:	681b      	ldr	r3, [r3, #0]
 800c8f0:	681b      	ldr	r3, [r3, #0]
 800c8f2:	2214      	movs	r2, #20
 800c8f4:	615a      	str	r2, [r3, #20]
 800c8f6:	f507 6326 	add.w	r3, r7, #2656	@ 0xa60
 800c8fa:	f6a3 235c 	subw	r3, r3, #2652	@ 0xa5c
 800c8fe:	681b      	ldr	r3, [r3, #0]
 800c900:	681b      	ldr	r3, [r3, #0]
 800c902:	f8d7 2a58 	ldr.w	r2, [r7, #2648]	@ 0xa58
 800c906:	619a      	str	r2, [r3, #24]
 800c908:	f507 6326 	add.w	r3, r7, #2656	@ 0xa60
 800c90c:	f6a3 235c 	subw	r3, r3, #2652	@ 0xa5c
 800c910:	681b      	ldr	r3, [r3, #0]
 800c912:	681b      	ldr	r3, [r3, #0]
 800c914:	681b      	ldr	r3, [r3, #0]
 800c916:	f507 6226 	add.w	r2, r7, #2656	@ 0xa60
 800c91a:	f6a2 225c 	subw	r2, r2, #2652	@ 0xa5c
 800c91e:	6810      	ldr	r0, [r2, #0]
 800c920:	4798      	blx	r3
      /* Components must appear in SOF order within each scan */
      if (ci > 0 && thisi <= scanptr->component_index[ci-1])
 800c922:	f8d7 3a54 	ldr.w	r3, [r7, #2644]	@ 0xa54
 800c926:	2b00      	cmp	r3, #0
 800c928:	dd29      	ble.n	800c97e <validate_script+0x272>
 800c92a:	f8d7 3a54 	ldr.w	r3, [r7, #2644]	@ 0xa54
 800c92e:	3b01      	subs	r3, #1
 800c930:	f8d7 2a5c 	ldr.w	r2, [r7, #2652]	@ 0xa5c
 800c934:	009b      	lsls	r3, r3, #2
 800c936:	4413      	add	r3, r2
 800c938:	685b      	ldr	r3, [r3, #4]
 800c93a:	f8d7 2a34 	ldr.w	r2, [r7, #2612]	@ 0xa34
 800c93e:	429a      	cmp	r2, r3
 800c940:	dc1d      	bgt.n	800c97e <validate_script+0x272>
	ERREXIT1(cinfo, JERR_BAD_SCAN_SCRIPT, scanno);
 800c942:	f507 6326 	add.w	r3, r7, #2656	@ 0xa60
 800c946:	f6a3 235c 	subw	r3, r3, #2652	@ 0xa5c
 800c94a:	681b      	ldr	r3, [r3, #0]
 800c94c:	681b      	ldr	r3, [r3, #0]
 800c94e:	2214      	movs	r2, #20
 800c950:	615a      	str	r2, [r3, #20]
 800c952:	f507 6326 	add.w	r3, r7, #2656	@ 0xa60
 800c956:	f6a3 235c 	subw	r3, r3, #2652	@ 0xa5c
 800c95a:	681b      	ldr	r3, [r3, #0]
 800c95c:	681b      	ldr	r3, [r3, #0]
 800c95e:	f8d7 2a58 	ldr.w	r2, [r7, #2648]	@ 0xa58
 800c962:	619a      	str	r2, [r3, #24]
 800c964:	f507 6326 	add.w	r3, r7, #2656	@ 0xa60
 800c968:	f6a3 235c 	subw	r3, r3, #2652	@ 0xa5c
 800c96c:	681b      	ldr	r3, [r3, #0]
 800c96e:	681b      	ldr	r3, [r3, #0]
 800c970:	681b      	ldr	r3, [r3, #0]
 800c972:	f507 6226 	add.w	r2, r7, #2656	@ 0xa60
 800c976:	f6a2 225c 	subw	r2, r2, #2652	@ 0xa5c
 800c97a:	6810      	ldr	r0, [r2, #0]
 800c97c:	4798      	blx	r3
    for (ci = 0; ci < ncomps; ci++) {
 800c97e:	f8d7 3a54 	ldr.w	r3, [r7, #2644]	@ 0xa54
 800c982:	3301      	adds	r3, #1
 800c984:	f8c7 3a54 	str.w	r3, [r7, #2644]	@ 0xa54
 800c988:	f8d7 2a54 	ldr.w	r2, [r7, #2644]	@ 0xa54
 800c98c:	f8d7 3a48 	ldr.w	r3, [r7, #2632]	@ 0xa48
 800c990:	429a      	cmp	r2, r3
 800c992:	db91      	blt.n	800c8b8 <validate_script+0x1ac>
    }
    /* Validate progression parameters */
    Ss = scanptr->Ss;
 800c994:	f8d7 3a5c 	ldr.w	r3, [r7, #2652]	@ 0xa5c
 800c998:	695b      	ldr	r3, [r3, #20]
 800c99a:	f8c7 3a44 	str.w	r3, [r7, #2628]	@ 0xa44
    Se = scanptr->Se;
 800c99e:	f8d7 3a5c 	ldr.w	r3, [r7, #2652]	@ 0xa5c
 800c9a2:	699b      	ldr	r3, [r3, #24]
 800c9a4:	f8c7 3a40 	str.w	r3, [r7, #2624]	@ 0xa40
    Ah = scanptr->Ah;
 800c9a8:	f8d7 3a5c 	ldr.w	r3, [r7, #2652]	@ 0xa5c
 800c9ac:	69db      	ldr	r3, [r3, #28]
 800c9ae:	f8c7 3a3c 	str.w	r3, [r7, #2620]	@ 0xa3c
    Al = scanptr->Al;
 800c9b2:	f8d7 3a5c 	ldr.w	r3, [r7, #2652]	@ 0xa5c
 800c9b6:	6a1b      	ldr	r3, [r3, #32]
 800c9b8:	f8c7 3a38 	str.w	r3, [r7, #2616]	@ 0xa38
    if (cinfo->progressive_mode) {
 800c9bc:	f507 6326 	add.w	r3, r7, #2656	@ 0xa60
 800c9c0:	f6a3 235c 	subw	r3, r3, #2652	@ 0xa5c
 800c9c4:	681b      	ldr	r3, [r3, #0]
 800c9c6:	f8d3 3108 	ldr.w	r3, [r3, #264]	@ 0x108
 800c9ca:	2b00      	cmp	r3, #0
 800c9cc:	f000 8143 	beq.w	800cc56 <validate_script+0x54a>
#if BITS_IN_JSAMPLE == 8
#define MAX_AH_AL 10
#else
#define MAX_AH_AL 13
#endif
      if (Ss < 0 || Ss >= DCTSIZE2 || Se < Ss || Se >= DCTSIZE2 ||
 800c9d0:	f8d7 3a44 	ldr.w	r3, [r7, #2628]	@ 0xa44
 800c9d4:	2b00      	cmp	r3, #0
 800c9d6:	db1d      	blt.n	800ca14 <validate_script+0x308>
 800c9d8:	f8d7 3a44 	ldr.w	r3, [r7, #2628]	@ 0xa44
 800c9dc:	2b3f      	cmp	r3, #63	@ 0x3f
 800c9de:	dc19      	bgt.n	800ca14 <validate_script+0x308>
 800c9e0:	f8d7 2a40 	ldr.w	r2, [r7, #2624]	@ 0xa40
 800c9e4:	f8d7 3a44 	ldr.w	r3, [r7, #2628]	@ 0xa44
 800c9e8:	429a      	cmp	r2, r3
 800c9ea:	db13      	blt.n	800ca14 <validate_script+0x308>
 800c9ec:	f8d7 3a40 	ldr.w	r3, [r7, #2624]	@ 0xa40
 800c9f0:	2b3f      	cmp	r3, #63	@ 0x3f
 800c9f2:	dc0f      	bgt.n	800ca14 <validate_script+0x308>
 800c9f4:	f8d7 3a3c 	ldr.w	r3, [r7, #2620]	@ 0xa3c
 800c9f8:	2b00      	cmp	r3, #0
 800c9fa:	db0b      	blt.n	800ca14 <validate_script+0x308>
	  Ah < 0 || Ah > MAX_AH_AL || Al < 0 || Al > MAX_AH_AL)
 800c9fc:	f8d7 3a3c 	ldr.w	r3, [r7, #2620]	@ 0xa3c
 800ca00:	2b0a      	cmp	r3, #10
 800ca02:	dc07      	bgt.n	800ca14 <validate_script+0x308>
 800ca04:	f8d7 3a38 	ldr.w	r3, [r7, #2616]	@ 0xa38
 800ca08:	2b00      	cmp	r3, #0
 800ca0a:	db03      	blt.n	800ca14 <validate_script+0x308>
 800ca0c:	f8d7 3a38 	ldr.w	r3, [r7, #2616]	@ 0xa38
 800ca10:	2b0a      	cmp	r3, #10
 800ca12:	dd1d      	ble.n	800ca50 <validate_script+0x344>
	ERREXIT1(cinfo, JERR_BAD_PROG_SCRIPT, scanno);
 800ca14:	f507 6326 	add.w	r3, r7, #2656	@ 0xa60
 800ca18:	f6a3 235c 	subw	r3, r3, #2652	@ 0xa5c
 800ca1c:	681b      	ldr	r3, [r3, #0]
 800ca1e:	681b      	ldr	r3, [r3, #0]
 800ca20:	2212      	movs	r2, #18
 800ca22:	615a      	str	r2, [r3, #20]
 800ca24:	f507 6326 	add.w	r3, r7, #2656	@ 0xa60
 800ca28:	f6a3 235c 	subw	r3, r3, #2652	@ 0xa5c
 800ca2c:	681b      	ldr	r3, [r3, #0]
 800ca2e:	681b      	ldr	r3, [r3, #0]
 800ca30:	f8d7 2a58 	ldr.w	r2, [r7, #2648]	@ 0xa58
 800ca34:	619a      	str	r2, [r3, #24]
 800ca36:	f507 6326 	add.w	r3, r7, #2656	@ 0xa60
 800ca3a:	f6a3 235c 	subw	r3, r3, #2652	@ 0xa5c
 800ca3e:	681b      	ldr	r3, [r3, #0]
 800ca40:	681b      	ldr	r3, [r3, #0]
 800ca42:	681b      	ldr	r3, [r3, #0]
 800ca44:	f507 6226 	add.w	r2, r7, #2656	@ 0xa60
 800ca48:	f6a2 225c 	subw	r2, r2, #2652	@ 0xa5c
 800ca4c:	6810      	ldr	r0, [r2, #0]
 800ca4e:	4798      	blx	r3
      if (Ss == 0) {
 800ca50:	f8d7 3a44 	ldr.w	r3, [r7, #2628]	@ 0xa44
 800ca54:	2b00      	cmp	r3, #0
 800ca56:	d122      	bne.n	800ca9e <validate_script+0x392>
	if (Se != 0)		/* DC and AC together not OK */
 800ca58:	f8d7 3a40 	ldr.w	r3, [r7, #2624]	@ 0xa40
 800ca5c:	2b00      	cmp	r3, #0
 800ca5e:	d040      	beq.n	800cae2 <validate_script+0x3d6>
	  ERREXIT1(cinfo, JERR_BAD_PROG_SCRIPT, scanno);
 800ca60:	f507 6326 	add.w	r3, r7, #2656	@ 0xa60
 800ca64:	f6a3 235c 	subw	r3, r3, #2652	@ 0xa5c
 800ca68:	681b      	ldr	r3, [r3, #0]
 800ca6a:	681b      	ldr	r3, [r3, #0]
 800ca6c:	2212      	movs	r2, #18
 800ca6e:	615a      	str	r2, [r3, #20]
 800ca70:	f507 6326 	add.w	r3, r7, #2656	@ 0xa60
 800ca74:	f6a3 235c 	subw	r3, r3, #2652	@ 0xa5c
 800ca78:	681b      	ldr	r3, [r3, #0]
 800ca7a:	681b      	ldr	r3, [r3, #0]
 800ca7c:	f8d7 2a58 	ldr.w	r2, [r7, #2648]	@ 0xa58
 800ca80:	619a      	str	r2, [r3, #24]
 800ca82:	f507 6326 	add.w	r3, r7, #2656	@ 0xa60
 800ca86:	f6a3 235c 	subw	r3, r3, #2652	@ 0xa5c
 800ca8a:	681b      	ldr	r3, [r3, #0]
 800ca8c:	681b      	ldr	r3, [r3, #0]
 800ca8e:	681b      	ldr	r3, [r3, #0]
 800ca90:	f507 6226 	add.w	r2, r7, #2656	@ 0xa60
 800ca94:	f6a2 225c 	subw	r2, r2, #2652	@ 0xa5c
 800ca98:	6810      	ldr	r0, [r2, #0]
 800ca9a:	4798      	blx	r3
 800ca9c:	e021      	b.n	800cae2 <validate_script+0x3d6>
      } else {
	if (ncomps != 1)	/* AC scans must be for only one component */
 800ca9e:	f8d7 3a48 	ldr.w	r3, [r7, #2632]	@ 0xa48
 800caa2:	2b01      	cmp	r3, #1
 800caa4:	d01d      	beq.n	800cae2 <validate_script+0x3d6>
	  ERREXIT1(cinfo, JERR_BAD_PROG_SCRIPT, scanno);
 800caa6:	f507 6326 	add.w	r3, r7, #2656	@ 0xa60
 800caaa:	f6a3 235c 	subw	r3, r3, #2652	@ 0xa5c
 800caae:	681b      	ldr	r3, [r3, #0]
 800cab0:	681b      	ldr	r3, [r3, #0]
 800cab2:	2212      	movs	r2, #18
 800cab4:	615a      	str	r2, [r3, #20]
 800cab6:	f507 6326 	add.w	r3, r7, #2656	@ 0xa60
 800caba:	f6a3 235c 	subw	r3, r3, #2652	@ 0xa5c
 800cabe:	681b      	ldr	r3, [r3, #0]
 800cac0:	681b      	ldr	r3, [r3, #0]
 800cac2:	f8d7 2a58 	ldr.w	r2, [r7, #2648]	@ 0xa58
 800cac6:	619a      	str	r2, [r3, #24]
 800cac8:	f507 6326 	add.w	r3, r7, #2656	@ 0xa60
 800cacc:	f6a3 235c 	subw	r3, r3, #2652	@ 0xa5c
 800cad0:	681b      	ldr	r3, [r3, #0]
 800cad2:	681b      	ldr	r3, [r3, #0]
 800cad4:	681b      	ldr	r3, [r3, #0]
 800cad6:	f507 6226 	add.w	r2, r7, #2656	@ 0xa60
 800cada:	f6a2 225c 	subw	r2, r2, #2652	@ 0xa5c
 800cade:	6810      	ldr	r0, [r2, #0]
 800cae0:	4798      	blx	r3
      }
      for (ci = 0; ci < ncomps; ci++) {
 800cae2:	2300      	movs	r3, #0
 800cae4:	f8c7 3a54 	str.w	r3, [r7, #2644]	@ 0xa54
 800cae8:	e0ad      	b.n	800cc46 <validate_script+0x53a>
	last_bitpos_ptr = & last_bitpos[scanptr->component_index[ci]][0];
 800caea:	f8d7 2a5c 	ldr.w	r2, [r7, #2652]	@ 0xa5c
 800caee:	f8d7 3a54 	ldr.w	r3, [r7, #2644]	@ 0xa54
 800caf2:	009b      	lsls	r3, r3, #2
 800caf4:	4413      	add	r3, r2
 800caf6:	685b      	ldr	r3, [r3, #4]
 800caf8:	f107 020c 	add.w	r2, r7, #12
 800cafc:	021b      	lsls	r3, r3, #8
 800cafe:	4413      	add	r3, r2
 800cb00:	f8c7 3a4c 	str.w	r3, [r7, #2636]	@ 0xa4c
	if (Ss != 0 && last_bitpos_ptr[0] < 0) /* AC without prior DC scan */
 800cb04:	f8d7 3a44 	ldr.w	r3, [r7, #2628]	@ 0xa44
 800cb08:	2b00      	cmp	r3, #0
 800cb0a:	d022      	beq.n	800cb52 <validate_script+0x446>
 800cb0c:	f8d7 3a4c 	ldr.w	r3, [r7, #2636]	@ 0xa4c
 800cb10:	681b      	ldr	r3, [r3, #0]
 800cb12:	2b00      	cmp	r3, #0
 800cb14:	da1d      	bge.n	800cb52 <validate_script+0x446>
	  ERREXIT1(cinfo, JERR_BAD_PROG_SCRIPT, scanno);
 800cb16:	f507 6326 	add.w	r3, r7, #2656	@ 0xa60
 800cb1a:	f6a3 235c 	subw	r3, r3, #2652	@ 0xa5c
 800cb1e:	681b      	ldr	r3, [r3, #0]
 800cb20:	681b      	ldr	r3, [r3, #0]
 800cb22:	2212      	movs	r2, #18
 800cb24:	615a      	str	r2, [r3, #20]
 800cb26:	f507 6326 	add.w	r3, r7, #2656	@ 0xa60
 800cb2a:	f6a3 235c 	subw	r3, r3, #2652	@ 0xa5c
 800cb2e:	681b      	ldr	r3, [r3, #0]
 800cb30:	681b      	ldr	r3, [r3, #0]
 800cb32:	f8d7 2a58 	ldr.w	r2, [r7, #2648]	@ 0xa58
 800cb36:	619a      	str	r2, [r3, #24]
 800cb38:	f507 6326 	add.w	r3, r7, #2656	@ 0xa60
 800cb3c:	f6a3 235c 	subw	r3, r3, #2652	@ 0xa5c
 800cb40:	681b      	ldr	r3, [r3, #0]
 800cb42:	681b      	ldr	r3, [r3, #0]
 800cb44:	681b      	ldr	r3, [r3, #0]
 800cb46:	f507 6226 	add.w	r2, r7, #2656	@ 0xa60
 800cb4a:	f6a2 225c 	subw	r2, r2, #2652	@ 0xa5c
 800cb4e:	6810      	ldr	r0, [r2, #0]
 800cb50:	4798      	blx	r3
	for (coefi = Ss; coefi <= Se; coefi++) {
 800cb52:	f8d7 3a44 	ldr.w	r3, [r7, #2628]	@ 0xa44
 800cb56:	f8c7 3a50 	str.w	r3, [r7, #2640]	@ 0xa50
 800cb5a:	e069      	b.n	800cc30 <validate_script+0x524>
	  if (last_bitpos_ptr[coefi] < 0) {
 800cb5c:	f8d7 3a50 	ldr.w	r3, [r7, #2640]	@ 0xa50
 800cb60:	009b      	lsls	r3, r3, #2
 800cb62:	f8d7 2a4c 	ldr.w	r2, [r7, #2636]	@ 0xa4c
 800cb66:	4413      	add	r3, r2
 800cb68:	681b      	ldr	r3, [r3, #0]
 800cb6a:	2b00      	cmp	r3, #0
 800cb6c:	da22      	bge.n	800cbb4 <validate_script+0x4a8>
	    /* first scan of this coefficient */
	    if (Ah != 0)
 800cb6e:	f8d7 3a3c 	ldr.w	r3, [r7, #2620]	@ 0xa3c
 800cb72:	2b00      	cmp	r3, #0
 800cb74:	d04e      	beq.n	800cc14 <validate_script+0x508>
	      ERREXIT1(cinfo, JERR_BAD_PROG_SCRIPT, scanno);
 800cb76:	f507 6326 	add.w	r3, r7, #2656	@ 0xa60
 800cb7a:	f6a3 235c 	subw	r3, r3, #2652	@ 0xa5c
 800cb7e:	681b      	ldr	r3, [r3, #0]
 800cb80:	681b      	ldr	r3, [r3, #0]
 800cb82:	2212      	movs	r2, #18
 800cb84:	615a      	str	r2, [r3, #20]
 800cb86:	f507 6326 	add.w	r3, r7, #2656	@ 0xa60
 800cb8a:	f6a3 235c 	subw	r3, r3, #2652	@ 0xa5c
 800cb8e:	681b      	ldr	r3, [r3, #0]
 800cb90:	681b      	ldr	r3, [r3, #0]
 800cb92:	f8d7 2a58 	ldr.w	r2, [r7, #2648]	@ 0xa58
 800cb96:	619a      	str	r2, [r3, #24]
 800cb98:	f507 6326 	add.w	r3, r7, #2656	@ 0xa60
 800cb9c:	f6a3 235c 	subw	r3, r3, #2652	@ 0xa5c
 800cba0:	681b      	ldr	r3, [r3, #0]
 800cba2:	681b      	ldr	r3, [r3, #0]
 800cba4:	681b      	ldr	r3, [r3, #0]
 800cba6:	f507 6226 	add.w	r2, r7, #2656	@ 0xa60
 800cbaa:	f6a2 225c 	subw	r2, r2, #2652	@ 0xa5c
 800cbae:	6810      	ldr	r0, [r2, #0]
 800cbb0:	4798      	blx	r3
 800cbb2:	e02f      	b.n	800cc14 <validate_script+0x508>
	  } else {
	    /* not first scan */
	    if (Ah != last_bitpos_ptr[coefi] || Al != Ah-1)
 800cbb4:	f8d7 3a50 	ldr.w	r3, [r7, #2640]	@ 0xa50
 800cbb8:	009b      	lsls	r3, r3, #2
 800cbba:	f8d7 2a4c 	ldr.w	r2, [r7, #2636]	@ 0xa4c
 800cbbe:	4413      	add	r3, r2
 800cbc0:	681b      	ldr	r3, [r3, #0]
 800cbc2:	f8d7 2a3c 	ldr.w	r2, [r7, #2620]	@ 0xa3c
 800cbc6:	429a      	cmp	r2, r3
 800cbc8:	d106      	bne.n	800cbd8 <validate_script+0x4cc>
 800cbca:	f8d7 3a3c 	ldr.w	r3, [r7, #2620]	@ 0xa3c
 800cbce:	3b01      	subs	r3, #1
 800cbd0:	f8d7 2a38 	ldr.w	r2, [r7, #2616]	@ 0xa38
 800cbd4:	429a      	cmp	r2, r3
 800cbd6:	d01d      	beq.n	800cc14 <validate_script+0x508>
	      ERREXIT1(cinfo, JERR_BAD_PROG_SCRIPT, scanno);
 800cbd8:	f507 6326 	add.w	r3, r7, #2656	@ 0xa60
 800cbdc:	f6a3 235c 	subw	r3, r3, #2652	@ 0xa5c
 800cbe0:	681b      	ldr	r3, [r3, #0]
 800cbe2:	681b      	ldr	r3, [r3, #0]
 800cbe4:	2212      	movs	r2, #18
 800cbe6:	615a      	str	r2, [r3, #20]
 800cbe8:	f507 6326 	add.w	r3, r7, #2656	@ 0xa60
 800cbec:	f6a3 235c 	subw	r3, r3, #2652	@ 0xa5c
 800cbf0:	681b      	ldr	r3, [r3, #0]
 800cbf2:	681b      	ldr	r3, [r3, #0]
 800cbf4:	f8d7 2a58 	ldr.w	r2, [r7, #2648]	@ 0xa58
 800cbf8:	619a      	str	r2, [r3, #24]
 800cbfa:	f507 6326 	add.w	r3, r7, #2656	@ 0xa60
 800cbfe:	f6a3 235c 	subw	r3, r3, #2652	@ 0xa5c
 800cc02:	681b      	ldr	r3, [r3, #0]
 800cc04:	681b      	ldr	r3, [r3, #0]
 800cc06:	681b      	ldr	r3, [r3, #0]
 800cc08:	f507 6226 	add.w	r2, r7, #2656	@ 0xa60
 800cc0c:	f6a2 225c 	subw	r2, r2, #2652	@ 0xa5c
 800cc10:	6810      	ldr	r0, [r2, #0]
 800cc12:	4798      	blx	r3
	  }
	  last_bitpos_ptr[coefi] = Al;
 800cc14:	f8d7 3a50 	ldr.w	r3, [r7, #2640]	@ 0xa50
 800cc18:	009b      	lsls	r3, r3, #2
 800cc1a:	f8d7 2a4c 	ldr.w	r2, [r7, #2636]	@ 0xa4c
 800cc1e:	4413      	add	r3, r2
 800cc20:	f8d7 2a38 	ldr.w	r2, [r7, #2616]	@ 0xa38
 800cc24:	601a      	str	r2, [r3, #0]
	for (coefi = Ss; coefi <= Se; coefi++) {
 800cc26:	f8d7 3a50 	ldr.w	r3, [r7, #2640]	@ 0xa50
 800cc2a:	3301      	adds	r3, #1
 800cc2c:	f8c7 3a50 	str.w	r3, [r7, #2640]	@ 0xa50
 800cc30:	f8d7 2a50 	ldr.w	r2, [r7, #2640]	@ 0xa50
 800cc34:	f8d7 3a40 	ldr.w	r3, [r7, #2624]	@ 0xa40
 800cc38:	429a      	cmp	r2, r3
 800cc3a:	dd8f      	ble.n	800cb5c <validate_script+0x450>
      for (ci = 0; ci < ncomps; ci++) {
 800cc3c:	f8d7 3a54 	ldr.w	r3, [r7, #2644]	@ 0xa54
 800cc40:	3301      	adds	r3, #1
 800cc42:	f8c7 3a54 	str.w	r3, [r7, #2644]	@ 0xa54
 800cc46:	f8d7 2a54 	ldr.w	r2, [r7, #2644]	@ 0xa54
 800cc4a:	f8d7 3a48 	ldr.w	r3, [r7, #2632]	@ 0xa48
 800cc4e:	429a      	cmp	r2, r3
 800cc50:	f6ff af4b 	blt.w	800caea <validate_script+0x3de>
 800cc54:	e076      	b.n	800cd44 <validate_script+0x638>
	}
      }
#endif
    } else {
      /* For sequential JPEG, all progression parameters must be these: */
      if (Ss != 0 || Se != DCTSIZE2-1 || Ah != 0 || Al != 0)
 800cc56:	f8d7 3a44 	ldr.w	r3, [r7, #2628]	@ 0xa44
 800cc5a:	2b00      	cmp	r3, #0
 800cc5c:	d10b      	bne.n	800cc76 <validate_script+0x56a>
 800cc5e:	f8d7 3a40 	ldr.w	r3, [r7, #2624]	@ 0xa40
 800cc62:	2b3f      	cmp	r3, #63	@ 0x3f
 800cc64:	d107      	bne.n	800cc76 <validate_script+0x56a>
 800cc66:	f8d7 3a3c 	ldr.w	r3, [r7, #2620]	@ 0xa3c
 800cc6a:	2b00      	cmp	r3, #0
 800cc6c:	d103      	bne.n	800cc76 <validate_script+0x56a>
 800cc6e:	f8d7 3a38 	ldr.w	r3, [r7, #2616]	@ 0xa38
 800cc72:	2b00      	cmp	r3, #0
 800cc74:	d01d      	beq.n	800ccb2 <validate_script+0x5a6>
	ERREXIT1(cinfo, JERR_BAD_PROG_SCRIPT, scanno);
 800cc76:	f507 6326 	add.w	r3, r7, #2656	@ 0xa60
 800cc7a:	f6a3 235c 	subw	r3, r3, #2652	@ 0xa5c
 800cc7e:	681b      	ldr	r3, [r3, #0]
 800cc80:	681b      	ldr	r3, [r3, #0]
 800cc82:	2212      	movs	r2, #18
 800cc84:	615a      	str	r2, [r3, #20]
 800cc86:	f507 6326 	add.w	r3, r7, #2656	@ 0xa60
 800cc8a:	f6a3 235c 	subw	r3, r3, #2652	@ 0xa5c
 800cc8e:	681b      	ldr	r3, [r3, #0]
 800cc90:	681b      	ldr	r3, [r3, #0]
 800cc92:	f8d7 2a58 	ldr.w	r2, [r7, #2648]	@ 0xa58
 800cc96:	619a      	str	r2, [r3, #24]
 800cc98:	f507 6326 	add.w	r3, r7, #2656	@ 0xa60
 800cc9c:	f6a3 235c 	subw	r3, r3, #2652	@ 0xa5c
 800cca0:	681b      	ldr	r3, [r3, #0]
 800cca2:	681b      	ldr	r3, [r3, #0]
 800cca4:	681b      	ldr	r3, [r3, #0]
 800cca6:	f507 6226 	add.w	r2, r7, #2656	@ 0xa60
 800ccaa:	f6a2 225c 	subw	r2, r2, #2652	@ 0xa5c
 800ccae:	6810      	ldr	r0, [r2, #0]
 800ccb0:	4798      	blx	r3
      /* Make sure components are not sent twice */
      for (ci = 0; ci < ncomps; ci++) {
 800ccb2:	2300      	movs	r3, #0
 800ccb4:	f8c7 3a54 	str.w	r3, [r7, #2644]	@ 0xa54
 800ccb8:	e03e      	b.n	800cd38 <validate_script+0x62c>
	thisi = scanptr->component_index[ci];
 800ccba:	f8d7 2a5c 	ldr.w	r2, [r7, #2652]	@ 0xa5c
 800ccbe:	f8d7 3a54 	ldr.w	r3, [r7, #2644]	@ 0xa54
 800ccc2:	009b      	lsls	r3, r3, #2
 800ccc4:	4413      	add	r3, r2
 800ccc6:	685b      	ldr	r3, [r3, #4]
 800ccc8:	f8c7 3a34 	str.w	r3, [r7, #2612]	@ 0xa34
	if (component_sent[thisi])
 800cccc:	f8d7 3a34 	ldr.w	r3, [r7, #2612]	@ 0xa34
 800ccd0:	009b      	lsls	r3, r3, #2
 800ccd2:	f503 6326 	add.w	r3, r3, #2656	@ 0xa60
 800ccd6:	443b      	add	r3, r7
 800ccd8:	f853 3c54 	ldr.w	r3, [r3, #-84]
 800ccdc:	2b00      	cmp	r3, #0
 800ccde:	d01d      	beq.n	800cd1c <validate_script+0x610>
	  ERREXIT1(cinfo, JERR_BAD_SCAN_SCRIPT, scanno);
 800cce0:	f507 6326 	add.w	r3, r7, #2656	@ 0xa60
 800cce4:	f6a3 235c 	subw	r3, r3, #2652	@ 0xa5c
 800cce8:	681b      	ldr	r3, [r3, #0]
 800ccea:	681b      	ldr	r3, [r3, #0]
 800ccec:	2214      	movs	r2, #20
 800ccee:	615a      	str	r2, [r3, #20]
 800ccf0:	f507 6326 	add.w	r3, r7, #2656	@ 0xa60
 800ccf4:	f6a3 235c 	subw	r3, r3, #2652	@ 0xa5c
 800ccf8:	681b      	ldr	r3, [r3, #0]
 800ccfa:	681b      	ldr	r3, [r3, #0]
 800ccfc:	f8d7 2a58 	ldr.w	r2, [r7, #2648]	@ 0xa58
 800cd00:	619a      	str	r2, [r3, #24]
 800cd02:	f507 6326 	add.w	r3, r7, #2656	@ 0xa60
 800cd06:	f6a3 235c 	subw	r3, r3, #2652	@ 0xa5c
 800cd0a:	681b      	ldr	r3, [r3, #0]
 800cd0c:	681b      	ldr	r3, [r3, #0]
 800cd0e:	681b      	ldr	r3, [r3, #0]
 800cd10:	f507 6226 	add.w	r2, r7, #2656	@ 0xa60
 800cd14:	f6a2 225c 	subw	r2, r2, #2652	@ 0xa5c
 800cd18:	6810      	ldr	r0, [r2, #0]
 800cd1a:	4798      	blx	r3
	component_sent[thisi] = TRUE;
 800cd1c:	f8d7 3a34 	ldr.w	r3, [r7, #2612]	@ 0xa34
 800cd20:	009b      	lsls	r3, r3, #2
 800cd22:	f503 6326 	add.w	r3, r3, #2656	@ 0xa60
 800cd26:	443b      	add	r3, r7
 800cd28:	2201      	movs	r2, #1
 800cd2a:	f843 2c54 	str.w	r2, [r3, #-84]
      for (ci = 0; ci < ncomps; ci++) {
 800cd2e:	f8d7 3a54 	ldr.w	r3, [r7, #2644]	@ 0xa54
 800cd32:	3301      	adds	r3, #1
 800cd34:	f8c7 3a54 	str.w	r3, [r7, #2644]	@ 0xa54
 800cd38:	f8d7 2a54 	ldr.w	r2, [r7, #2644]	@ 0xa54
 800cd3c:	f8d7 3a48 	ldr.w	r3, [r7, #2632]	@ 0xa48
 800cd40:	429a      	cmp	r2, r3
 800cd42:	dbba      	blt.n	800ccba <validate_script+0x5ae>
  for (scanno = 1; scanno <= cinfo->num_scans; scanptr++, scanno++) {
 800cd44:	f8d7 3a5c 	ldr.w	r3, [r7, #2652]	@ 0xa5c
 800cd48:	3324      	adds	r3, #36	@ 0x24
 800cd4a:	f8c7 3a5c 	str.w	r3, [r7, #2652]	@ 0xa5c
 800cd4e:	f8d7 3a58 	ldr.w	r3, [r7, #2648]	@ 0xa58
 800cd52:	3301      	adds	r3, #1
 800cd54:	f8c7 3a58 	str.w	r3, [r7, #2648]	@ 0xa58
 800cd58:	f507 6326 	add.w	r3, r7, #2656	@ 0xa60
 800cd5c:	f6a3 235c 	subw	r3, r3, #2652	@ 0xa5c
 800cd60:	681b      	ldr	r3, [r3, #0]
 800cd62:	f8d3 30c8 	ldr.w	r3, [r3, #200]	@ 0xc8
 800cd66:	f8d7 2a58 	ldr.w	r2, [r7, #2648]	@ 0xa58
 800cd6a:	429a      	cmp	r2, r3
 800cd6c:	f77f ad6d 	ble.w	800c84a <validate_script+0x13e>
      }
    }
  }

  /* Now verify that everything got sent. */
  if (cinfo->progressive_mode) {
 800cd70:	f507 6326 	add.w	r3, r7, #2656	@ 0xa60
 800cd74:	f6a3 235c 	subw	r3, r3, #2652	@ 0xa5c
 800cd78:	681b      	ldr	r3, [r3, #0]
 800cd7a:	f8d3 3108 	ldr.w	r3, [r3, #264]	@ 0x108
 800cd7e:	2b00      	cmp	r3, #0
 800cd80:	d033      	beq.n	800cdea <validate_script+0x6de>
    /* For progressive mode, we only check that at least some DC data
     * got sent for each component; the spec does not require that all bits
     * of all coefficients be transmitted.  Would it be wiser to enforce
     * transmission of all coefficient bits??
     */
    for (ci = 0; ci < cinfo->num_components; ci++) {
 800cd82:	2300      	movs	r3, #0
 800cd84:	f8c7 3a54 	str.w	r3, [r7, #2644]	@ 0xa54
 800cd88:	e024      	b.n	800cdd4 <validate_script+0x6c8>
      if (last_bitpos[ci][0] < 0)
 800cd8a:	f507 6326 	add.w	r3, r7, #2656	@ 0xa60
 800cd8e:	f6a3 2254 	subw	r2, r3, #2644	@ 0xa54
 800cd92:	f8d7 3a54 	ldr.w	r3, [r7, #2644]	@ 0xa54
 800cd96:	021b      	lsls	r3, r3, #8
 800cd98:	4413      	add	r3, r2
 800cd9a:	681b      	ldr	r3, [r3, #0]
 800cd9c:	2b00      	cmp	r3, #0
 800cd9e:	da14      	bge.n	800cdca <validate_script+0x6be>
	ERREXIT(cinfo, JERR_MISSING_DATA);
 800cda0:	f507 6326 	add.w	r3, r7, #2656	@ 0xa60
 800cda4:	f6a3 235c 	subw	r3, r3, #2652	@ 0xa5c
 800cda8:	681b      	ldr	r3, [r3, #0]
 800cdaa:	681b      	ldr	r3, [r3, #0]
 800cdac:	222e      	movs	r2, #46	@ 0x2e
 800cdae:	615a      	str	r2, [r3, #20]
 800cdb0:	f507 6326 	add.w	r3, r7, #2656	@ 0xa60
 800cdb4:	f6a3 235c 	subw	r3, r3, #2652	@ 0xa5c
 800cdb8:	681b      	ldr	r3, [r3, #0]
 800cdba:	681b      	ldr	r3, [r3, #0]
 800cdbc:	681b      	ldr	r3, [r3, #0]
 800cdbe:	f507 6226 	add.w	r2, r7, #2656	@ 0xa60
 800cdc2:	f6a2 225c 	subw	r2, r2, #2652	@ 0xa5c
 800cdc6:	6810      	ldr	r0, [r2, #0]
 800cdc8:	4798      	blx	r3
    for (ci = 0; ci < cinfo->num_components; ci++) {
 800cdca:	f8d7 3a54 	ldr.w	r3, [r7, #2644]	@ 0xa54
 800cdce:	3301      	adds	r3, #1
 800cdd0:	f8c7 3a54 	str.w	r3, [r7, #2644]	@ 0xa54
 800cdd4:	f507 6326 	add.w	r3, r7, #2656	@ 0xa60
 800cdd8:	f6a3 235c 	subw	r3, r3, #2652	@ 0xa5c
 800cddc:	681b      	ldr	r3, [r3, #0]
 800cdde:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800cde0:	f8d7 2a54 	ldr.w	r2, [r7, #2644]	@ 0xa54
 800cde4:	429a      	cmp	r2, r3
 800cde6:	dbd0      	blt.n	800cd8a <validate_script+0x67e>
    for (ci = 0; ci < cinfo->num_components; ci++) {
      if (! component_sent[ci])
	ERREXIT(cinfo, JERR_MISSING_DATA);
    }
  }
}
 800cde8:	e031      	b.n	800ce4e <validate_script+0x742>
    for (ci = 0; ci < cinfo->num_components; ci++) {
 800cdea:	2300      	movs	r3, #0
 800cdec:	f8c7 3a54 	str.w	r3, [r7, #2644]	@ 0xa54
 800cdf0:	e023      	b.n	800ce3a <validate_script+0x72e>
      if (! component_sent[ci])
 800cdf2:	f8d7 3a54 	ldr.w	r3, [r7, #2644]	@ 0xa54
 800cdf6:	009b      	lsls	r3, r3, #2
 800cdf8:	f503 6326 	add.w	r3, r3, #2656	@ 0xa60
 800cdfc:	443b      	add	r3, r7
 800cdfe:	f853 3c54 	ldr.w	r3, [r3, #-84]
 800ce02:	2b00      	cmp	r3, #0
 800ce04:	d114      	bne.n	800ce30 <validate_script+0x724>
	ERREXIT(cinfo, JERR_MISSING_DATA);
 800ce06:	f507 6326 	add.w	r3, r7, #2656	@ 0xa60
 800ce0a:	f6a3 235c 	subw	r3, r3, #2652	@ 0xa5c
 800ce0e:	681b      	ldr	r3, [r3, #0]
 800ce10:	681b      	ldr	r3, [r3, #0]
 800ce12:	222e      	movs	r2, #46	@ 0x2e
 800ce14:	615a      	str	r2, [r3, #20]
 800ce16:	f507 6326 	add.w	r3, r7, #2656	@ 0xa60
 800ce1a:	f6a3 235c 	subw	r3, r3, #2652	@ 0xa5c
 800ce1e:	681b      	ldr	r3, [r3, #0]
 800ce20:	681b      	ldr	r3, [r3, #0]
 800ce22:	681b      	ldr	r3, [r3, #0]
 800ce24:	f507 6226 	add.w	r2, r7, #2656	@ 0xa60
 800ce28:	f6a2 225c 	subw	r2, r2, #2652	@ 0xa5c
 800ce2c:	6810      	ldr	r0, [r2, #0]
 800ce2e:	4798      	blx	r3
    for (ci = 0; ci < cinfo->num_components; ci++) {
 800ce30:	f8d7 3a54 	ldr.w	r3, [r7, #2644]	@ 0xa54
 800ce34:	3301      	adds	r3, #1
 800ce36:	f8c7 3a54 	str.w	r3, [r7, #2644]	@ 0xa54
 800ce3a:	f507 6326 	add.w	r3, r7, #2656	@ 0xa60
 800ce3e:	f6a3 235c 	subw	r3, r3, #2652	@ 0xa5c
 800ce42:	681b      	ldr	r3, [r3, #0]
 800ce44:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800ce46:	f8d7 2a54 	ldr.w	r2, [r7, #2644]	@ 0xa54
 800ce4a:	429a      	cmp	r2, r3
 800ce4c:	dbd1      	blt.n	800cdf2 <validate_script+0x6e6>
}
 800ce4e:	bf00      	nop
 800ce50:	f507 6726 	add.w	r7, r7, #2656	@ 0xa60
 800ce54:	46bd      	mov	sp, r7
 800ce56:	bd80      	pop	{r7, pc}

0800ce58 <reduce_script>:
LOCAL(void)
reduce_script (j_compress_ptr cinfo)
/* Adapt scan script for use with reduced block size;
 * assume that script has been validated before.
 */
{
 800ce58:	b4b0      	push	{r4, r5, r7}
 800ce5a:	b087      	sub	sp, #28
 800ce5c:	af00      	add	r7, sp, #0
 800ce5e:	6078      	str	r0, [r7, #4]
  jpeg_scan_info * scanptr;
  int idxout, idxin;

  /* Circumvent const declaration for this function */
  scanptr = (jpeg_scan_info *) cinfo->scan_info;
 800ce60:	687b      	ldr	r3, [r7, #4]
 800ce62:	f8d3 30cc 	ldr.w	r3, [r3, #204]	@ 0xcc
 800ce66:	60fb      	str	r3, [r7, #12]
  idxout = 0;
 800ce68:	2300      	movs	r3, #0
 800ce6a:	617b      	str	r3, [r7, #20]

  for (idxin = 0; idxin < cinfo->num_scans; idxin++) {
 800ce6c:	2300      	movs	r3, #0
 800ce6e:	613b      	str	r3, [r7, #16]
 800ce70:	e04b      	b.n	800cf0a <reduce_script+0xb2>
    /* After skipping, idxout becomes smaller than idxin */
    if (idxin != idxout)
 800ce72:	693a      	ldr	r2, [r7, #16]
 800ce74:	697b      	ldr	r3, [r7, #20]
 800ce76:	429a      	cmp	r2, r3
 800ce78:	d017      	beq.n	800ceaa <reduce_script+0x52>
      /* Copy rest of data;
       * note we stay in given chunk of allocated memory.
       */
      scanptr[idxout] = scanptr[idxin];
 800ce7a:	693a      	ldr	r2, [r7, #16]
 800ce7c:	4613      	mov	r3, r2
 800ce7e:	00db      	lsls	r3, r3, #3
 800ce80:	4413      	add	r3, r2
 800ce82:	009b      	lsls	r3, r3, #2
 800ce84:	461a      	mov	r2, r3
 800ce86:	68fb      	ldr	r3, [r7, #12]
 800ce88:	1899      	adds	r1, r3, r2
 800ce8a:	697a      	ldr	r2, [r7, #20]
 800ce8c:	4613      	mov	r3, r2
 800ce8e:	00db      	lsls	r3, r3, #3
 800ce90:	4413      	add	r3, r2
 800ce92:	009b      	lsls	r3, r3, #2
 800ce94:	461a      	mov	r2, r3
 800ce96:	68fb      	ldr	r3, [r7, #12]
 800ce98:	4413      	add	r3, r2
 800ce9a:	461c      	mov	r4, r3
 800ce9c:	460d      	mov	r5, r1
 800ce9e:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800cea0:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800cea2:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800cea4:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800cea6:	682b      	ldr	r3, [r5, #0]
 800cea8:	6023      	str	r3, [r4, #0]
    if (scanptr[idxout].Ss > cinfo->lim_Se)
 800ceaa:	697a      	ldr	r2, [r7, #20]
 800ceac:	4613      	mov	r3, r2
 800ceae:	00db      	lsls	r3, r3, #3
 800ceb0:	4413      	add	r3, r2
 800ceb2:	009b      	lsls	r3, r3, #2
 800ceb4:	461a      	mov	r2, r3
 800ceb6:	68fb      	ldr	r3, [r7, #12]
 800ceb8:	4413      	add	r3, r2
 800ceba:	695a      	ldr	r2, [r3, #20]
 800cebc:	687b      	ldr	r3, [r7, #4]
 800cebe:	f8d3 3180 	ldr.w	r3, [r3, #384]	@ 0x180
 800cec2:	429a      	cmp	r2, r3
 800cec4:	dc1d      	bgt.n	800cf02 <reduce_script+0xaa>
      /* Entire scan out of range - skip this entry */
      continue;
    if (scanptr[idxout].Se > cinfo->lim_Se)
 800cec6:	697a      	ldr	r2, [r7, #20]
 800cec8:	4613      	mov	r3, r2
 800ceca:	00db      	lsls	r3, r3, #3
 800cecc:	4413      	add	r3, r2
 800cece:	009b      	lsls	r3, r3, #2
 800ced0:	461a      	mov	r2, r3
 800ced2:	68fb      	ldr	r3, [r7, #12]
 800ced4:	4413      	add	r3, r2
 800ced6:	699a      	ldr	r2, [r3, #24]
 800ced8:	687b      	ldr	r3, [r7, #4]
 800ceda:	f8d3 3180 	ldr.w	r3, [r3, #384]	@ 0x180
 800cede:	429a      	cmp	r2, r3
 800cee0:	dd0b      	ble.n	800cefa <reduce_script+0xa2>
      /* Limit scan to end of block */
      scanptr[idxout].Se = cinfo->lim_Se;
 800cee2:	697a      	ldr	r2, [r7, #20]
 800cee4:	4613      	mov	r3, r2
 800cee6:	00db      	lsls	r3, r3, #3
 800cee8:	4413      	add	r3, r2
 800ceea:	009b      	lsls	r3, r3, #2
 800ceec:	461a      	mov	r2, r3
 800ceee:	68fb      	ldr	r3, [r7, #12]
 800cef0:	4413      	add	r3, r2
 800cef2:	687a      	ldr	r2, [r7, #4]
 800cef4:	f8d2 2180 	ldr.w	r2, [r2, #384]	@ 0x180
 800cef8:	619a      	str	r2, [r3, #24]
    idxout++;
 800cefa:	697b      	ldr	r3, [r7, #20]
 800cefc:	3301      	adds	r3, #1
 800cefe:	617b      	str	r3, [r7, #20]
 800cf00:	e000      	b.n	800cf04 <reduce_script+0xac>
      continue;
 800cf02:	bf00      	nop
  for (idxin = 0; idxin < cinfo->num_scans; idxin++) {
 800cf04:	693b      	ldr	r3, [r7, #16]
 800cf06:	3301      	adds	r3, #1
 800cf08:	613b      	str	r3, [r7, #16]
 800cf0a:	687b      	ldr	r3, [r7, #4]
 800cf0c:	f8d3 30c8 	ldr.w	r3, [r3, #200]	@ 0xc8
 800cf10:	693a      	ldr	r2, [r7, #16]
 800cf12:	429a      	cmp	r2, r3
 800cf14:	dbad      	blt.n	800ce72 <reduce_script+0x1a>
  }

  cinfo->num_scans = idxout;
 800cf16:	687b      	ldr	r3, [r7, #4]
 800cf18:	697a      	ldr	r2, [r7, #20]
 800cf1a:	f8c3 20c8 	str.w	r2, [r3, #200]	@ 0xc8
}
 800cf1e:	bf00      	nop
 800cf20:	371c      	adds	r7, #28
 800cf22:	46bd      	mov	sp, r7
 800cf24:	bcb0      	pop	{r4, r5, r7}
 800cf26:	4770      	bx	lr

0800cf28 <select_scan_parameters>:


LOCAL(void)
select_scan_parameters (j_compress_ptr cinfo)
/* Set up the scan parameters for the current scan */
{
 800cf28:	b580      	push	{r7, lr}
 800cf2a:	b086      	sub	sp, #24
 800cf2c:	af00      	add	r7, sp, #0
 800cf2e:	6078      	str	r0, [r7, #4]
  int ci;

#ifdef C_MULTISCAN_FILES_SUPPORTED
  if (cinfo->scan_info != NULL) {
 800cf30:	687b      	ldr	r3, [r7, #4]
 800cf32:	f8d3 30cc 	ldr.w	r3, [r3, #204]	@ 0xcc
 800cf36:	2b00      	cmp	r3, #0
 800cf38:	d04b      	beq.n	800cfd2 <select_scan_parameters+0xaa>
    /* Prepare for current scan --- the script is already validated */
    my_master_ptr master = (my_master_ptr) cinfo->master;
 800cf3a:	687b      	ldr	r3, [r7, #4]
 800cf3c:	f8d3 3184 	ldr.w	r3, [r3, #388]	@ 0x184
 800cf40:	613b      	str	r3, [r7, #16]
    const jpeg_scan_info * scanptr = cinfo->scan_info + master->scan_number;
 800cf42:	687b      	ldr	r3, [r7, #4]
 800cf44:	f8d3 20cc 	ldr.w	r2, [r3, #204]	@ 0xcc
 800cf48:	693b      	ldr	r3, [r7, #16]
 800cf4a:	6a1b      	ldr	r3, [r3, #32]
 800cf4c:	4619      	mov	r1, r3
 800cf4e:	460b      	mov	r3, r1
 800cf50:	00db      	lsls	r3, r3, #3
 800cf52:	440b      	add	r3, r1
 800cf54:	009b      	lsls	r3, r3, #2
 800cf56:	4413      	add	r3, r2
 800cf58:	60fb      	str	r3, [r7, #12]

    cinfo->comps_in_scan = scanptr->comps_in_scan;
 800cf5a:	68fb      	ldr	r3, [r7, #12]
 800cf5c:	681a      	ldr	r2, [r3, #0]
 800cf5e:	687b      	ldr	r3, [r7, #4]
 800cf60:	f8c3 2120 	str.w	r2, [r3, #288]	@ 0x120
    for (ci = 0; ci < scanptr->comps_in_scan; ci++) {
 800cf64:	2300      	movs	r3, #0
 800cf66:	617b      	str	r3, [r7, #20]
 800cf68:	e014      	b.n	800cf94 <select_scan_parameters+0x6c>
      cinfo->cur_comp_info[ci] =
	&cinfo->comp_info[scanptr->component_index[ci]];
 800cf6a:	687b      	ldr	r3, [r7, #4]
 800cf6c:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 800cf6e:	68f9      	ldr	r1, [r7, #12]
 800cf70:	697b      	ldr	r3, [r7, #20]
 800cf72:	009b      	lsls	r3, r3, #2
 800cf74:	440b      	add	r3, r1
 800cf76:	685b      	ldr	r3, [r3, #4]
 800cf78:	4619      	mov	r1, r3
 800cf7a:	2358      	movs	r3, #88	@ 0x58
 800cf7c:	fb01 f303 	mul.w	r3, r1, r3
 800cf80:	441a      	add	r2, r3
      cinfo->cur_comp_info[ci] =
 800cf82:	6879      	ldr	r1, [r7, #4]
 800cf84:	697b      	ldr	r3, [r7, #20]
 800cf86:	3348      	adds	r3, #72	@ 0x48
 800cf88:	009b      	lsls	r3, r3, #2
 800cf8a:	440b      	add	r3, r1
 800cf8c:	605a      	str	r2, [r3, #4]
    for (ci = 0; ci < scanptr->comps_in_scan; ci++) {
 800cf8e:	697b      	ldr	r3, [r7, #20]
 800cf90:	3301      	adds	r3, #1
 800cf92:	617b      	str	r3, [r7, #20]
 800cf94:	68fb      	ldr	r3, [r7, #12]
 800cf96:	681b      	ldr	r3, [r3, #0]
 800cf98:	697a      	ldr	r2, [r7, #20]
 800cf9a:	429a      	cmp	r2, r3
 800cf9c:	dbe5      	blt.n	800cf6a <select_scan_parameters+0x42>
    }
    if (cinfo->progressive_mode) {
 800cf9e:	687b      	ldr	r3, [r7, #4]
 800cfa0:	f8d3 3108 	ldr.w	r3, [r3, #264]	@ 0x108
 800cfa4:	2b00      	cmp	r3, #0
 800cfa6:	d047      	beq.n	800d038 <select_scan_parameters+0x110>
      cinfo->Ss = scanptr->Ss;
 800cfa8:	68fb      	ldr	r3, [r7, #12]
 800cfaa:	695a      	ldr	r2, [r3, #20]
 800cfac:	687b      	ldr	r3, [r7, #4]
 800cfae:	f8c3 2168 	str.w	r2, [r3, #360]	@ 0x168
      cinfo->Se = scanptr->Se;
 800cfb2:	68fb      	ldr	r3, [r7, #12]
 800cfb4:	699a      	ldr	r2, [r3, #24]
 800cfb6:	687b      	ldr	r3, [r7, #4]
 800cfb8:	f8c3 216c 	str.w	r2, [r3, #364]	@ 0x16c
      cinfo->Ah = scanptr->Ah;
 800cfbc:	68fb      	ldr	r3, [r7, #12]
 800cfbe:	69da      	ldr	r2, [r3, #28]
 800cfc0:	687b      	ldr	r3, [r7, #4]
 800cfc2:	f8c3 2170 	str.w	r2, [r3, #368]	@ 0x170
      cinfo->Al = scanptr->Al;
 800cfc6:	68fb      	ldr	r3, [r7, #12]
 800cfc8:	6a1a      	ldr	r2, [r3, #32]
 800cfca:	687b      	ldr	r3, [r7, #4]
 800cfcc:	f8c3 2174 	str.w	r2, [r3, #372]	@ 0x174
      return;
 800cfd0:	e04a      	b.n	800d068 <select_scan_parameters+0x140>
  }
  else
#endif
  {
    /* Prepare for single sequential-JPEG scan containing all components */
    if (cinfo->num_components > MAX_COMPS_IN_SCAN)
 800cfd2:	687b      	ldr	r3, [r7, #4]
 800cfd4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800cfd6:	2b04      	cmp	r3, #4
 800cfd8:	dd11      	ble.n	800cffe <select_scan_parameters+0xd6>
      ERREXIT2(cinfo, JERR_COMPONENT_COUNT, cinfo->num_components,
 800cfda:	687b      	ldr	r3, [r7, #4]
 800cfdc:	681b      	ldr	r3, [r3, #0]
 800cfde:	221b      	movs	r2, #27
 800cfe0:	615a      	str	r2, [r3, #20]
 800cfe2:	687b      	ldr	r3, [r7, #4]
 800cfe4:	681b      	ldr	r3, [r3, #0]
 800cfe6:	687a      	ldr	r2, [r7, #4]
 800cfe8:	6cd2      	ldr	r2, [r2, #76]	@ 0x4c
 800cfea:	619a      	str	r2, [r3, #24]
 800cfec:	687b      	ldr	r3, [r7, #4]
 800cfee:	681b      	ldr	r3, [r3, #0]
 800cff0:	2204      	movs	r2, #4
 800cff2:	61da      	str	r2, [r3, #28]
 800cff4:	687b      	ldr	r3, [r7, #4]
 800cff6:	681b      	ldr	r3, [r3, #0]
 800cff8:	681b      	ldr	r3, [r3, #0]
 800cffa:	6878      	ldr	r0, [r7, #4]
 800cffc:	4798      	blx	r3
	       MAX_COMPS_IN_SCAN);
    cinfo->comps_in_scan = cinfo->num_components;
 800cffe:	687b      	ldr	r3, [r7, #4]
 800d000:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 800d002:	687b      	ldr	r3, [r7, #4]
 800d004:	f8c3 2120 	str.w	r2, [r3, #288]	@ 0x120
    for (ci = 0; ci < cinfo->num_components; ci++) {
 800d008:	2300      	movs	r3, #0
 800d00a:	617b      	str	r3, [r7, #20]
 800d00c:	e00f      	b.n	800d02e <select_scan_parameters+0x106>
      cinfo->cur_comp_info[ci] = &cinfo->comp_info[ci];
 800d00e:	687b      	ldr	r3, [r7, #4]
 800d010:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 800d012:	697b      	ldr	r3, [r7, #20]
 800d014:	2158      	movs	r1, #88	@ 0x58
 800d016:	fb01 f303 	mul.w	r3, r1, r3
 800d01a:	441a      	add	r2, r3
 800d01c:	6879      	ldr	r1, [r7, #4]
 800d01e:	697b      	ldr	r3, [r7, #20]
 800d020:	3348      	adds	r3, #72	@ 0x48
 800d022:	009b      	lsls	r3, r3, #2
 800d024:	440b      	add	r3, r1
 800d026:	605a      	str	r2, [r3, #4]
    for (ci = 0; ci < cinfo->num_components; ci++) {
 800d028:	697b      	ldr	r3, [r7, #20]
 800d02a:	3301      	adds	r3, #1
 800d02c:	617b      	str	r3, [r7, #20]
 800d02e:	687b      	ldr	r3, [r7, #4]
 800d030:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800d032:	697a      	ldr	r2, [r7, #20]
 800d034:	429a      	cmp	r2, r3
 800d036:	dbea      	blt.n	800d00e <select_scan_parameters+0xe6>
    }
  }
  cinfo->Ss = 0;
 800d038:	687b      	ldr	r3, [r7, #4]
 800d03a:	2200      	movs	r2, #0
 800d03c:	f8c3 2168 	str.w	r2, [r3, #360]	@ 0x168
  cinfo->Se = cinfo->block_size * cinfo->block_size - 1;
 800d040:	687b      	ldr	r3, [r7, #4]
 800d042:	f8d3 3178 	ldr.w	r3, [r3, #376]	@ 0x178
 800d046:	687a      	ldr	r2, [r7, #4]
 800d048:	f8d2 2178 	ldr.w	r2, [r2, #376]	@ 0x178
 800d04c:	fb02 f303 	mul.w	r3, r2, r3
 800d050:	1e5a      	subs	r2, r3, #1
 800d052:	687b      	ldr	r3, [r7, #4]
 800d054:	f8c3 216c 	str.w	r2, [r3, #364]	@ 0x16c
  cinfo->Ah = 0;
 800d058:	687b      	ldr	r3, [r7, #4]
 800d05a:	2200      	movs	r2, #0
 800d05c:	f8c3 2170 	str.w	r2, [r3, #368]	@ 0x170
  cinfo->Al = 0;
 800d060:	687b      	ldr	r3, [r7, #4]
 800d062:	2200      	movs	r2, #0
 800d064:	f8c3 2174 	str.w	r2, [r3, #372]	@ 0x174
}
 800d068:	3718      	adds	r7, #24
 800d06a:	46bd      	mov	sp, r7
 800d06c:	bd80      	pop	{r7, pc}

0800d06e <per_scan_setup>:

LOCAL(void)
per_scan_setup (j_compress_ptr cinfo)
/* Do computations that are needed before processing a JPEG scan */
/* cinfo->comps_in_scan and cinfo->cur_comp_info[] are already set */
{
 800d06e:	b580      	push	{r7, lr}
 800d070:	b088      	sub	sp, #32
 800d072:	af00      	add	r7, sp, #0
 800d074:	6078      	str	r0, [r7, #4]
  int ci, mcublks, tmp;
  jpeg_component_info *compptr;
  
  if (cinfo->comps_in_scan == 1) {
 800d076:	687b      	ldr	r3, [r7, #4]
 800d078:	f8d3 3120 	ldr.w	r3, [r3, #288]	@ 0x120
 800d07c:	2b01      	cmp	r3, #1
 800d07e:	d139      	bne.n	800d0f4 <per_scan_setup+0x86>
    
    /* Noninterleaved (single-component) scan */
    compptr = cinfo->cur_comp_info[0];
 800d080:	687b      	ldr	r3, [r7, #4]
 800d082:	f8d3 3124 	ldr.w	r3, [r3, #292]	@ 0x124
 800d086:	613b      	str	r3, [r7, #16]
    
    /* Overall image size in MCUs */
    cinfo->MCUs_per_row = compptr->width_in_blocks;
 800d088:	693b      	ldr	r3, [r7, #16]
 800d08a:	69da      	ldr	r2, [r3, #28]
 800d08c:	687b      	ldr	r3, [r7, #4]
 800d08e:	f8c3 2134 	str.w	r2, [r3, #308]	@ 0x134
    cinfo->MCU_rows_in_scan = compptr->height_in_blocks;
 800d092:	693b      	ldr	r3, [r7, #16]
 800d094:	6a1a      	ldr	r2, [r3, #32]
 800d096:	687b      	ldr	r3, [r7, #4]
 800d098:	f8c3 2138 	str.w	r2, [r3, #312]	@ 0x138
    
    /* For noninterleaved scan, always one block per MCU */
    compptr->MCU_width = 1;
 800d09c:	693b      	ldr	r3, [r7, #16]
 800d09e:	2201      	movs	r2, #1
 800d0a0:	639a      	str	r2, [r3, #56]	@ 0x38
    compptr->MCU_height = 1;
 800d0a2:	693b      	ldr	r3, [r7, #16]
 800d0a4:	2201      	movs	r2, #1
 800d0a6:	63da      	str	r2, [r3, #60]	@ 0x3c
    compptr->MCU_blocks = 1;
 800d0a8:	693b      	ldr	r3, [r7, #16]
 800d0aa:	2201      	movs	r2, #1
 800d0ac:	641a      	str	r2, [r3, #64]	@ 0x40
    compptr->MCU_sample_width = compptr->DCT_h_scaled_size;
 800d0ae:	693b      	ldr	r3, [r7, #16]
 800d0b0:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800d0b2:	693b      	ldr	r3, [r7, #16]
 800d0b4:	645a      	str	r2, [r3, #68]	@ 0x44
    compptr->last_col_width = 1;
 800d0b6:	693b      	ldr	r3, [r7, #16]
 800d0b8:	2201      	movs	r2, #1
 800d0ba:	649a      	str	r2, [r3, #72]	@ 0x48
    /* For noninterleaved scans, it is convenient to define last_row_height
     * as the number of block rows present in the last iMCU row.
     */
    tmp = (int) (compptr->height_in_blocks % compptr->v_samp_factor);
 800d0bc:	693b      	ldr	r3, [r7, #16]
 800d0be:	6a1b      	ldr	r3, [r3, #32]
 800d0c0:	693a      	ldr	r2, [r7, #16]
 800d0c2:	68d2      	ldr	r2, [r2, #12]
 800d0c4:	fbb3 f1f2 	udiv	r1, r3, r2
 800d0c8:	fb01 f202 	mul.w	r2, r1, r2
 800d0cc:	1a9b      	subs	r3, r3, r2
 800d0ce:	617b      	str	r3, [r7, #20]
    if (tmp == 0) tmp = compptr->v_samp_factor;
 800d0d0:	697b      	ldr	r3, [r7, #20]
 800d0d2:	2b00      	cmp	r3, #0
 800d0d4:	d102      	bne.n	800d0dc <per_scan_setup+0x6e>
 800d0d6:	693b      	ldr	r3, [r7, #16]
 800d0d8:	68db      	ldr	r3, [r3, #12]
 800d0da:	617b      	str	r3, [r7, #20]
    compptr->last_row_height = tmp;
 800d0dc:	693b      	ldr	r3, [r7, #16]
 800d0de:	697a      	ldr	r2, [r7, #20]
 800d0e0:	64da      	str	r2, [r3, #76]	@ 0x4c
    
    /* Prepare array describing MCU composition */
    cinfo->blocks_in_MCU = 1;
 800d0e2:	687b      	ldr	r3, [r7, #4]
 800d0e4:	2201      	movs	r2, #1
 800d0e6:	f8c3 213c 	str.w	r2, [r3, #316]	@ 0x13c
    cinfo->MCU_membership[0] = 0;
 800d0ea:	687b      	ldr	r3, [r7, #4]
 800d0ec:	2200      	movs	r2, #0
 800d0ee:	f8c3 2140 	str.w	r2, [r3, #320]	@ 0x140
 800d0f2:	e0bc      	b.n	800d26e <per_scan_setup+0x200>
    
  } else {
    
    /* Interleaved (multi-component) scan */
    if (cinfo->comps_in_scan <= 0 || cinfo->comps_in_scan > MAX_COMPS_IN_SCAN)
 800d0f4:	687b      	ldr	r3, [r7, #4]
 800d0f6:	f8d3 3120 	ldr.w	r3, [r3, #288]	@ 0x120
 800d0fa:	2b00      	cmp	r3, #0
 800d0fc:	dd04      	ble.n	800d108 <per_scan_setup+0x9a>
 800d0fe:	687b      	ldr	r3, [r7, #4]
 800d100:	f8d3 3120 	ldr.w	r3, [r3, #288]	@ 0x120
 800d104:	2b04      	cmp	r3, #4
 800d106:	dd12      	ble.n	800d12e <per_scan_setup+0xc0>
      ERREXIT2(cinfo, JERR_COMPONENT_COUNT, cinfo->comps_in_scan,
 800d108:	687b      	ldr	r3, [r7, #4]
 800d10a:	681b      	ldr	r3, [r3, #0]
 800d10c:	221b      	movs	r2, #27
 800d10e:	615a      	str	r2, [r3, #20]
 800d110:	687b      	ldr	r3, [r7, #4]
 800d112:	681b      	ldr	r3, [r3, #0]
 800d114:	687a      	ldr	r2, [r7, #4]
 800d116:	f8d2 2120 	ldr.w	r2, [r2, #288]	@ 0x120
 800d11a:	619a      	str	r2, [r3, #24]
 800d11c:	687b      	ldr	r3, [r7, #4]
 800d11e:	681b      	ldr	r3, [r3, #0]
 800d120:	2204      	movs	r2, #4
 800d122:	61da      	str	r2, [r3, #28]
 800d124:	687b      	ldr	r3, [r7, #4]
 800d126:	681b      	ldr	r3, [r3, #0]
 800d128:	681b      	ldr	r3, [r3, #0]
 800d12a:	6878      	ldr	r0, [r7, #4]
 800d12c:	4798      	blx	r3
	       MAX_COMPS_IN_SCAN);
    
    /* Overall image size in MCUs */
    cinfo->MCUs_per_row = (JDIMENSION)
      jdiv_round_up((long) cinfo->jpeg_width,
 800d12e:	687b      	ldr	r3, [r7, #4]
 800d130:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800d132:	4618      	mov	r0, r3
		    (long) (cinfo->max_h_samp_factor * cinfo->block_size));
 800d134:	687b      	ldr	r3, [r7, #4]
 800d136:	f8d3 310c 	ldr.w	r3, [r3, #268]	@ 0x10c
 800d13a:	687a      	ldr	r2, [r7, #4]
 800d13c:	f8d2 2178 	ldr.w	r2, [r2, #376]	@ 0x178
 800d140:	fb02 f303 	mul.w	r3, r2, r3
      jdiv_round_up((long) cinfo->jpeg_width,
 800d144:	4619      	mov	r1, r3
 800d146:	f00c fb21 	bl	801978c <jdiv_round_up>
 800d14a:	4603      	mov	r3, r0
    cinfo->MCUs_per_row = (JDIMENSION)
 800d14c:	461a      	mov	r2, r3
 800d14e:	687b      	ldr	r3, [r7, #4]
 800d150:	f8c3 2134 	str.w	r2, [r3, #308]	@ 0x134
    cinfo->MCU_rows_in_scan = (JDIMENSION)
      jdiv_round_up((long) cinfo->jpeg_height,
 800d154:	687b      	ldr	r3, [r7, #4]
 800d156:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800d158:	4618      	mov	r0, r3
		    (long) (cinfo->max_v_samp_factor * cinfo->block_size));
 800d15a:	687b      	ldr	r3, [r7, #4]
 800d15c:	f8d3 3110 	ldr.w	r3, [r3, #272]	@ 0x110
 800d160:	687a      	ldr	r2, [r7, #4]
 800d162:	f8d2 2178 	ldr.w	r2, [r2, #376]	@ 0x178
 800d166:	fb02 f303 	mul.w	r3, r2, r3
      jdiv_round_up((long) cinfo->jpeg_height,
 800d16a:	4619      	mov	r1, r3
 800d16c:	f00c fb0e 	bl	801978c <jdiv_round_up>
 800d170:	4603      	mov	r3, r0
    cinfo->MCU_rows_in_scan = (JDIMENSION)
 800d172:	461a      	mov	r2, r3
 800d174:	687b      	ldr	r3, [r7, #4]
 800d176:	f8c3 2138 	str.w	r2, [r3, #312]	@ 0x138
    
    cinfo->blocks_in_MCU = 0;
 800d17a:	687b      	ldr	r3, [r7, #4]
 800d17c:	2200      	movs	r2, #0
 800d17e:	f8c3 213c 	str.w	r2, [r3, #316]	@ 0x13c
    
    for (ci = 0; ci < cinfo->comps_in_scan; ci++) {
 800d182:	2300      	movs	r3, #0
 800d184:	61fb      	str	r3, [r7, #28]
 800d186:	e06c      	b.n	800d262 <per_scan_setup+0x1f4>
      compptr = cinfo->cur_comp_info[ci];
 800d188:	687a      	ldr	r2, [r7, #4]
 800d18a:	69fb      	ldr	r3, [r7, #28]
 800d18c:	3348      	adds	r3, #72	@ 0x48
 800d18e:	009b      	lsls	r3, r3, #2
 800d190:	4413      	add	r3, r2
 800d192:	685b      	ldr	r3, [r3, #4]
 800d194:	613b      	str	r3, [r7, #16]
      /* Sampling factors give # of blocks of component in each MCU */
      compptr->MCU_width = compptr->h_samp_factor;
 800d196:	693b      	ldr	r3, [r7, #16]
 800d198:	689a      	ldr	r2, [r3, #8]
 800d19a:	693b      	ldr	r3, [r7, #16]
 800d19c:	639a      	str	r2, [r3, #56]	@ 0x38
      compptr->MCU_height = compptr->v_samp_factor;
 800d19e:	693b      	ldr	r3, [r7, #16]
 800d1a0:	68da      	ldr	r2, [r3, #12]
 800d1a2:	693b      	ldr	r3, [r7, #16]
 800d1a4:	63da      	str	r2, [r3, #60]	@ 0x3c
      compptr->MCU_blocks = compptr->MCU_width * compptr->MCU_height;
 800d1a6:	693b      	ldr	r3, [r7, #16]
 800d1a8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800d1aa:	693a      	ldr	r2, [r7, #16]
 800d1ac:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 800d1ae:	fb03 f202 	mul.w	r2, r3, r2
 800d1b2:	693b      	ldr	r3, [r7, #16]
 800d1b4:	641a      	str	r2, [r3, #64]	@ 0x40
      compptr->MCU_sample_width = compptr->MCU_width * compptr->DCT_h_scaled_size;
 800d1b6:	693b      	ldr	r3, [r7, #16]
 800d1b8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800d1ba:	693a      	ldr	r2, [r7, #16]
 800d1bc:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 800d1be:	fb03 f202 	mul.w	r2, r3, r2
 800d1c2:	693b      	ldr	r3, [r7, #16]
 800d1c4:	645a      	str	r2, [r3, #68]	@ 0x44
      /* Figure number of non-dummy blocks in last MCU column & row */
      tmp = (int) (compptr->width_in_blocks % compptr->MCU_width);
 800d1c6:	693b      	ldr	r3, [r7, #16]
 800d1c8:	69db      	ldr	r3, [r3, #28]
 800d1ca:	693a      	ldr	r2, [r7, #16]
 800d1cc:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 800d1ce:	fbb3 f1f2 	udiv	r1, r3, r2
 800d1d2:	fb01 f202 	mul.w	r2, r1, r2
 800d1d6:	1a9b      	subs	r3, r3, r2
 800d1d8:	617b      	str	r3, [r7, #20]
      if (tmp == 0) tmp = compptr->MCU_width;
 800d1da:	697b      	ldr	r3, [r7, #20]
 800d1dc:	2b00      	cmp	r3, #0
 800d1de:	d102      	bne.n	800d1e6 <per_scan_setup+0x178>
 800d1e0:	693b      	ldr	r3, [r7, #16]
 800d1e2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800d1e4:	617b      	str	r3, [r7, #20]
      compptr->last_col_width = tmp;
 800d1e6:	693b      	ldr	r3, [r7, #16]
 800d1e8:	697a      	ldr	r2, [r7, #20]
 800d1ea:	649a      	str	r2, [r3, #72]	@ 0x48
      tmp = (int) (compptr->height_in_blocks % compptr->MCU_height);
 800d1ec:	693b      	ldr	r3, [r7, #16]
 800d1ee:	6a1b      	ldr	r3, [r3, #32]
 800d1f0:	693a      	ldr	r2, [r7, #16]
 800d1f2:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 800d1f4:	fbb3 f1f2 	udiv	r1, r3, r2
 800d1f8:	fb01 f202 	mul.w	r2, r1, r2
 800d1fc:	1a9b      	subs	r3, r3, r2
 800d1fe:	617b      	str	r3, [r7, #20]
      if (tmp == 0) tmp = compptr->MCU_height;
 800d200:	697b      	ldr	r3, [r7, #20]
 800d202:	2b00      	cmp	r3, #0
 800d204:	d102      	bne.n	800d20c <per_scan_setup+0x19e>
 800d206:	693b      	ldr	r3, [r7, #16]
 800d208:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800d20a:	617b      	str	r3, [r7, #20]
      compptr->last_row_height = tmp;
 800d20c:	693b      	ldr	r3, [r7, #16]
 800d20e:	697a      	ldr	r2, [r7, #20]
 800d210:	64da      	str	r2, [r3, #76]	@ 0x4c
      /* Prepare array describing MCU composition */
      mcublks = compptr->MCU_blocks;
 800d212:	693b      	ldr	r3, [r7, #16]
 800d214:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800d216:	61bb      	str	r3, [r7, #24]
      if (cinfo->blocks_in_MCU + mcublks > C_MAX_BLOCKS_IN_MCU)
 800d218:	687b      	ldr	r3, [r7, #4]
 800d21a:	f8d3 213c 	ldr.w	r2, [r3, #316]	@ 0x13c
 800d21e:	69bb      	ldr	r3, [r7, #24]
 800d220:	4413      	add	r3, r2
 800d222:	2b0a      	cmp	r3, #10
 800d224:	dd15      	ble.n	800d252 <per_scan_setup+0x1e4>
	ERREXIT(cinfo, JERR_BAD_MCU_SIZE);
 800d226:	687b      	ldr	r3, [r7, #4]
 800d228:	681b      	ldr	r3, [r3, #0]
 800d22a:	220e      	movs	r2, #14
 800d22c:	615a      	str	r2, [r3, #20]
 800d22e:	687b      	ldr	r3, [r7, #4]
 800d230:	681b      	ldr	r3, [r3, #0]
 800d232:	681b      	ldr	r3, [r3, #0]
 800d234:	6878      	ldr	r0, [r7, #4]
 800d236:	4798      	blx	r3
      while (mcublks-- > 0) {
 800d238:	e00b      	b.n	800d252 <per_scan_setup+0x1e4>
	cinfo->MCU_membership[cinfo->blocks_in_MCU++] = ci;
 800d23a:	687b      	ldr	r3, [r7, #4]
 800d23c:	f8d3 313c 	ldr.w	r3, [r3, #316]	@ 0x13c
 800d240:	1c59      	adds	r1, r3, #1
 800d242:	687a      	ldr	r2, [r7, #4]
 800d244:	f8c2 113c 	str.w	r1, [r2, #316]	@ 0x13c
 800d248:	687a      	ldr	r2, [r7, #4]
 800d24a:	3350      	adds	r3, #80	@ 0x50
 800d24c:	69f9      	ldr	r1, [r7, #28]
 800d24e:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
      while (mcublks-- > 0) {
 800d252:	69bb      	ldr	r3, [r7, #24]
 800d254:	1e5a      	subs	r2, r3, #1
 800d256:	61ba      	str	r2, [r7, #24]
 800d258:	2b00      	cmp	r3, #0
 800d25a:	dcee      	bgt.n	800d23a <per_scan_setup+0x1cc>
    for (ci = 0; ci < cinfo->comps_in_scan; ci++) {
 800d25c:	69fb      	ldr	r3, [r7, #28]
 800d25e:	3301      	adds	r3, #1
 800d260:	61fb      	str	r3, [r7, #28]
 800d262:	687b      	ldr	r3, [r7, #4]
 800d264:	f8d3 3120 	ldr.w	r3, [r3, #288]	@ 0x120
 800d268:	69fa      	ldr	r2, [r7, #28]
 800d26a:	429a      	cmp	r2, r3
 800d26c:	db8c      	blt.n	800d188 <per_scan_setup+0x11a>
    
  }

  /* Convert restart specified in rows to actual MCU count. */
  /* Note that count must fit in 16 bits, so we provide limiting. */
  if (cinfo->restart_in_rows > 0) {
 800d26e:	687b      	ldr	r3, [r7, #4]
 800d270:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800d274:	2b00      	cmp	r3, #0
 800d276:	dd14      	ble.n	800d2a2 <per_scan_setup+0x234>
    long nominal = (long) cinfo->restart_in_rows * (long) cinfo->MCUs_per_row;
 800d278:	687b      	ldr	r3, [r7, #4]
 800d27a:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800d27e:	687a      	ldr	r2, [r7, #4]
 800d280:	f8d2 2134 	ldr.w	r2, [r2, #308]	@ 0x134
 800d284:	fb02 f303 	mul.w	r3, r2, r3
 800d288:	60fb      	str	r3, [r7, #12]
    cinfo->restart_interval = (unsigned int) MIN(nominal, 65535L);
 800d28a:	68fb      	ldr	r3, [r7, #12]
 800d28c:	f64f 72fe 	movw	r2, #65534	@ 0xfffe
 800d290:	4293      	cmp	r3, r2
 800d292:	dc01      	bgt.n	800d298 <per_scan_setup+0x22a>
 800d294:	68fb      	ldr	r3, [r7, #12]
 800d296:	e001      	b.n	800d29c <per_scan_setup+0x22e>
 800d298:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 800d29c:	687a      	ldr	r2, [r7, #4]
 800d29e:	f8c2 30ec 	str.w	r3, [r2, #236]	@ 0xec
  }
}
 800d2a2:	bf00      	nop
 800d2a4:	3720      	adds	r7, #32
 800d2a6:	46bd      	mov	sp, r7
 800d2a8:	bd80      	pop	{r7, pc}

0800d2aa <prepare_for_pass>:
 * required.
 */

METHODDEF(void)
prepare_for_pass (j_compress_ptr cinfo)
{
 800d2aa:	b580      	push	{r7, lr}
 800d2ac:	b084      	sub	sp, #16
 800d2ae:	af00      	add	r7, sp, #0
 800d2b0:	6078      	str	r0, [r7, #4]
  my_master_ptr master = (my_master_ptr) cinfo->master;
 800d2b2:	687b      	ldr	r3, [r7, #4]
 800d2b4:	f8d3 3184 	ldr.w	r3, [r3, #388]	@ 0x184
 800d2b8:	60fb      	str	r3, [r7, #12]

  switch (master->pass_type) {
 800d2ba:	68fb      	ldr	r3, [r7, #12]
 800d2bc:	7d1b      	ldrb	r3, [r3, #20]
 800d2be:	2b02      	cmp	r3, #2
 800d2c0:	f000 8082 	beq.w	800d3c8 <prepare_for_pass+0x11e>
 800d2c4:	2b02      	cmp	r3, #2
 800d2c6:	f300 80ac 	bgt.w	800d422 <prepare_for_pass+0x178>
 800d2ca:	2b00      	cmp	r3, #0
 800d2cc:	d002      	beq.n	800d2d4 <prepare_for_pass+0x2a>
 800d2ce:	2b01      	cmp	r3, #1
 800d2d0:	d050      	beq.n	800d374 <prepare_for_pass+0xca>
 800d2d2:	e0a6      	b.n	800d422 <prepare_for_pass+0x178>
  case main_pass:
    /* Initial pass: will collect input data, and do either Huffman
     * optimization or data output for the first scan.
     */
    select_scan_parameters(cinfo);
 800d2d4:	6878      	ldr	r0, [r7, #4]
 800d2d6:	f7ff fe27 	bl	800cf28 <select_scan_parameters>
    per_scan_setup(cinfo);
 800d2da:	6878      	ldr	r0, [r7, #4]
 800d2dc:	f7ff fec7 	bl	800d06e <per_scan_setup>
    if (! cinfo->raw_data_in) {
 800d2e0:	687b      	ldr	r3, [r7, #4]
 800d2e2:	f8d3 30d0 	ldr.w	r3, [r3, #208]	@ 0xd0
 800d2e6:	2b00      	cmp	r3, #0
 800d2e8:	d112      	bne.n	800d310 <prepare_for_pass+0x66>
      (*cinfo->cconvert->start_pass) (cinfo);
 800d2ea:	687b      	ldr	r3, [r7, #4]
 800d2ec:	f8d3 3198 	ldr.w	r3, [r3, #408]	@ 0x198
 800d2f0:	681b      	ldr	r3, [r3, #0]
 800d2f2:	6878      	ldr	r0, [r7, #4]
 800d2f4:	4798      	blx	r3
      (*cinfo->downsample->start_pass) (cinfo);
 800d2f6:	687b      	ldr	r3, [r7, #4]
 800d2f8:	f8d3 319c 	ldr.w	r3, [r3, #412]	@ 0x19c
 800d2fc:	681b      	ldr	r3, [r3, #0]
 800d2fe:	6878      	ldr	r0, [r7, #4]
 800d300:	4798      	blx	r3
      (*cinfo->prep->start_pass) (cinfo, JBUF_PASS_THRU);
 800d302:	687b      	ldr	r3, [r7, #4]
 800d304:	f8d3 318c 	ldr.w	r3, [r3, #396]	@ 0x18c
 800d308:	681b      	ldr	r3, [r3, #0]
 800d30a:	2100      	movs	r1, #0
 800d30c:	6878      	ldr	r0, [r7, #4]
 800d30e:	4798      	blx	r3
    }
    (*cinfo->fdct->start_pass) (cinfo);
 800d310:	687b      	ldr	r3, [r7, #4]
 800d312:	f8d3 31a0 	ldr.w	r3, [r3, #416]	@ 0x1a0
 800d316:	681b      	ldr	r3, [r3, #0]
 800d318:	6878      	ldr	r0, [r7, #4]
 800d31a:	4798      	blx	r3
    (*cinfo->entropy->start_pass) (cinfo, cinfo->optimize_coding);
 800d31c:	687b      	ldr	r3, [r7, #4]
 800d31e:	f8d3 31a4 	ldr.w	r3, [r3, #420]	@ 0x1a4
 800d322:	681b      	ldr	r3, [r3, #0]
 800d324:	687a      	ldr	r2, [r7, #4]
 800d326:	f8d2 20d8 	ldr.w	r2, [r2, #216]	@ 0xd8
 800d32a:	4611      	mov	r1, r2
 800d32c:	6878      	ldr	r0, [r7, #4]
 800d32e:	4798      	blx	r3
    (*cinfo->coef->start_pass) (cinfo,
 800d330:	687b      	ldr	r3, [r7, #4]
 800d332:	f8d3 3190 	ldr.w	r3, [r3, #400]	@ 0x190
 800d336:	681b      	ldr	r3, [r3, #0]
				(master->total_passes > 1 ?
 800d338:	68fa      	ldr	r2, [r7, #12]
 800d33a:	69d2      	ldr	r2, [r2, #28]
    (*cinfo->coef->start_pass) (cinfo,
 800d33c:	2a01      	cmp	r2, #1
 800d33e:	dd01      	ble.n	800d344 <prepare_for_pass+0x9a>
 800d340:	2203      	movs	r2, #3
 800d342:	e000      	b.n	800d346 <prepare_for_pass+0x9c>
 800d344:	2200      	movs	r2, #0
 800d346:	4611      	mov	r1, r2
 800d348:	6878      	ldr	r0, [r7, #4]
 800d34a:	4798      	blx	r3
				 JBUF_SAVE_AND_PASS : JBUF_PASS_THRU));
    (*cinfo->main->start_pass) (cinfo, JBUF_PASS_THRU);
 800d34c:	687b      	ldr	r3, [r7, #4]
 800d34e:	f8d3 3188 	ldr.w	r3, [r3, #392]	@ 0x188
 800d352:	681b      	ldr	r3, [r3, #0]
 800d354:	2100      	movs	r1, #0
 800d356:	6878      	ldr	r0, [r7, #4]
 800d358:	4798      	blx	r3
    if (cinfo->optimize_coding) {
 800d35a:	687b      	ldr	r3, [r7, #4]
 800d35c:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 800d360:	2b00      	cmp	r3, #0
 800d362:	d003      	beq.n	800d36c <prepare_for_pass+0xc2>
      /* No immediate data output; postpone writing frame/scan headers */
      master->pub.call_pass_startup = FALSE;
 800d364:	68fb      	ldr	r3, [r7, #12]
 800d366:	2200      	movs	r2, #0
 800d368:	60da      	str	r2, [r3, #12]
    } else {
      /* Will write frame/scan headers at first jpeg_write_scanlines call */
      master->pub.call_pass_startup = TRUE;
    }
    break;
 800d36a:	e063      	b.n	800d434 <prepare_for_pass+0x18a>
      master->pub.call_pass_startup = TRUE;
 800d36c:	68fb      	ldr	r3, [r7, #12]
 800d36e:	2201      	movs	r2, #1
 800d370:	60da      	str	r2, [r3, #12]
    break;
 800d372:	e05f      	b.n	800d434 <prepare_for_pass+0x18a>
#ifdef ENTROPY_OPT_SUPPORTED
  case huff_opt_pass:
    /* Do Huffman optimization for a scan after the first one. */
    select_scan_parameters(cinfo);
 800d374:	6878      	ldr	r0, [r7, #4]
 800d376:	f7ff fdd7 	bl	800cf28 <select_scan_parameters>
    per_scan_setup(cinfo);
 800d37a:	6878      	ldr	r0, [r7, #4]
 800d37c:	f7ff fe77 	bl	800d06e <per_scan_setup>
    if (cinfo->Ss != 0 || cinfo->Ah == 0) {
 800d380:	687b      	ldr	r3, [r7, #4]
 800d382:	f8d3 3168 	ldr.w	r3, [r3, #360]	@ 0x168
 800d386:	2b00      	cmp	r3, #0
 800d388:	d104      	bne.n	800d394 <prepare_for_pass+0xea>
 800d38a:	687b      	ldr	r3, [r7, #4]
 800d38c:	f8d3 3170 	ldr.w	r3, [r3, #368]	@ 0x170
 800d390:	2b00      	cmp	r3, #0
 800d392:	d111      	bne.n	800d3b8 <prepare_for_pass+0x10e>
      (*cinfo->entropy->start_pass) (cinfo, TRUE);
 800d394:	687b      	ldr	r3, [r7, #4]
 800d396:	f8d3 31a4 	ldr.w	r3, [r3, #420]	@ 0x1a4
 800d39a:	681b      	ldr	r3, [r3, #0]
 800d39c:	2101      	movs	r1, #1
 800d39e:	6878      	ldr	r0, [r7, #4]
 800d3a0:	4798      	blx	r3
      (*cinfo->coef->start_pass) (cinfo, JBUF_CRANK_DEST);
 800d3a2:	687b      	ldr	r3, [r7, #4]
 800d3a4:	f8d3 3190 	ldr.w	r3, [r3, #400]	@ 0x190
 800d3a8:	681b      	ldr	r3, [r3, #0]
 800d3aa:	2102      	movs	r1, #2
 800d3ac:	6878      	ldr	r0, [r7, #4]
 800d3ae:	4798      	blx	r3
      master->pub.call_pass_startup = FALSE;
 800d3b0:	68fb      	ldr	r3, [r7, #12]
 800d3b2:	2200      	movs	r2, #0
 800d3b4:	60da      	str	r2, [r3, #12]
      break;
 800d3b6:	e03d      	b.n	800d434 <prepare_for_pass+0x18a>
    }
    /* Special case: Huffman DC refinement scans need no Huffman table
     * and therefore we can skip the optimization pass for them.
     */
    master->pass_type = output_pass;
 800d3b8:	68fb      	ldr	r3, [r7, #12]
 800d3ba:	2202      	movs	r2, #2
 800d3bc:	751a      	strb	r2, [r3, #20]
    master->pass_number++;
 800d3be:	68fb      	ldr	r3, [r7, #12]
 800d3c0:	699b      	ldr	r3, [r3, #24]
 800d3c2:	1c5a      	adds	r2, r3, #1
 800d3c4:	68fb      	ldr	r3, [r7, #12]
 800d3c6:	619a      	str	r2, [r3, #24]
    /*FALLTHROUGH*/
#endif
  case output_pass:
    /* Do a data-output pass. */
    /* We need not repeat per-scan setup if prior optimization pass did it. */
    if (! cinfo->optimize_coding) {
 800d3c8:	687b      	ldr	r3, [r7, #4]
 800d3ca:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 800d3ce:	2b00      	cmp	r3, #0
 800d3d0:	d105      	bne.n	800d3de <prepare_for_pass+0x134>
      select_scan_parameters(cinfo);
 800d3d2:	6878      	ldr	r0, [r7, #4]
 800d3d4:	f7ff fda8 	bl	800cf28 <select_scan_parameters>
      per_scan_setup(cinfo);
 800d3d8:	6878      	ldr	r0, [r7, #4]
 800d3da:	f7ff fe48 	bl	800d06e <per_scan_setup>
    }
    (*cinfo->entropy->start_pass) (cinfo, FALSE);
 800d3de:	687b      	ldr	r3, [r7, #4]
 800d3e0:	f8d3 31a4 	ldr.w	r3, [r3, #420]	@ 0x1a4
 800d3e4:	681b      	ldr	r3, [r3, #0]
 800d3e6:	2100      	movs	r1, #0
 800d3e8:	6878      	ldr	r0, [r7, #4]
 800d3ea:	4798      	blx	r3
    (*cinfo->coef->start_pass) (cinfo, JBUF_CRANK_DEST);
 800d3ec:	687b      	ldr	r3, [r7, #4]
 800d3ee:	f8d3 3190 	ldr.w	r3, [r3, #400]	@ 0x190
 800d3f2:	681b      	ldr	r3, [r3, #0]
 800d3f4:	2102      	movs	r1, #2
 800d3f6:	6878      	ldr	r0, [r7, #4]
 800d3f8:	4798      	blx	r3
    /* We emit frame/scan headers now */
    if (master->scan_number == 0)
 800d3fa:	68fb      	ldr	r3, [r7, #12]
 800d3fc:	6a1b      	ldr	r3, [r3, #32]
 800d3fe:	2b00      	cmp	r3, #0
 800d400:	d105      	bne.n	800d40e <prepare_for_pass+0x164>
      (*cinfo->marker->write_frame_header) (cinfo);
 800d402:	687b      	ldr	r3, [r7, #4]
 800d404:	f8d3 3194 	ldr.w	r3, [r3, #404]	@ 0x194
 800d408:	685b      	ldr	r3, [r3, #4]
 800d40a:	6878      	ldr	r0, [r7, #4]
 800d40c:	4798      	blx	r3
    (*cinfo->marker->write_scan_header) (cinfo);
 800d40e:	687b      	ldr	r3, [r7, #4]
 800d410:	f8d3 3194 	ldr.w	r3, [r3, #404]	@ 0x194
 800d414:	689b      	ldr	r3, [r3, #8]
 800d416:	6878      	ldr	r0, [r7, #4]
 800d418:	4798      	blx	r3
    master->pub.call_pass_startup = FALSE;
 800d41a:	68fb      	ldr	r3, [r7, #12]
 800d41c:	2200      	movs	r2, #0
 800d41e:	60da      	str	r2, [r3, #12]
    break;
 800d420:	e008      	b.n	800d434 <prepare_for_pass+0x18a>
  default:
    ERREXIT(cinfo, JERR_NOT_COMPILED);
 800d422:	687b      	ldr	r3, [r7, #4]
 800d424:	681b      	ldr	r3, [r3, #0]
 800d426:	2231      	movs	r2, #49	@ 0x31
 800d428:	615a      	str	r2, [r3, #20]
 800d42a:	687b      	ldr	r3, [r7, #4]
 800d42c:	681b      	ldr	r3, [r3, #0]
 800d42e:	681b      	ldr	r3, [r3, #0]
 800d430:	6878      	ldr	r0, [r7, #4]
 800d432:	4798      	blx	r3
  }

  master->pub.is_last_pass = (master->pass_number == master->total_passes-1);
 800d434:	68fb      	ldr	r3, [r7, #12]
 800d436:	699a      	ldr	r2, [r3, #24]
 800d438:	68fb      	ldr	r3, [r7, #12]
 800d43a:	69db      	ldr	r3, [r3, #28]
 800d43c:	3b01      	subs	r3, #1
 800d43e:	429a      	cmp	r2, r3
 800d440:	bf0c      	ite	eq
 800d442:	2301      	moveq	r3, #1
 800d444:	2300      	movne	r3, #0
 800d446:	b2db      	uxtb	r3, r3
 800d448:	461a      	mov	r2, r3
 800d44a:	68fb      	ldr	r3, [r7, #12]
 800d44c:	611a      	str	r2, [r3, #16]

  /* Set up progress monitor's pass info if present */
  if (cinfo->progress != NULL) {
 800d44e:	687b      	ldr	r3, [r7, #4]
 800d450:	689b      	ldr	r3, [r3, #8]
 800d452:	2b00      	cmp	r3, #0
 800d454:	d009      	beq.n	800d46a <prepare_for_pass+0x1c0>
    cinfo->progress->completed_passes = master->pass_number;
 800d456:	687b      	ldr	r3, [r7, #4]
 800d458:	689b      	ldr	r3, [r3, #8]
 800d45a:	68fa      	ldr	r2, [r7, #12]
 800d45c:	6992      	ldr	r2, [r2, #24]
 800d45e:	60da      	str	r2, [r3, #12]
    cinfo->progress->total_passes = master->total_passes;
 800d460:	687b      	ldr	r3, [r7, #4]
 800d462:	689b      	ldr	r3, [r3, #8]
 800d464:	68fa      	ldr	r2, [r7, #12]
 800d466:	69d2      	ldr	r2, [r2, #28]
 800d468:	611a      	str	r2, [r3, #16]
  }
}
 800d46a:	bf00      	nop
 800d46c:	3710      	adds	r7, #16
 800d46e:	46bd      	mov	sp, r7
 800d470:	bd80      	pop	{r7, pc}

0800d472 <pass_startup>:
 * In multi-pass processing, this routine is not used.
 */

METHODDEF(void)
pass_startup (j_compress_ptr cinfo)
{
 800d472:	b580      	push	{r7, lr}
 800d474:	b082      	sub	sp, #8
 800d476:	af00      	add	r7, sp, #0
 800d478:	6078      	str	r0, [r7, #4]
  cinfo->master->call_pass_startup = FALSE; /* reset flag so call only once */
 800d47a:	687b      	ldr	r3, [r7, #4]
 800d47c:	f8d3 3184 	ldr.w	r3, [r3, #388]	@ 0x184
 800d480:	2200      	movs	r2, #0
 800d482:	60da      	str	r2, [r3, #12]

  (*cinfo->marker->write_frame_header) (cinfo);
 800d484:	687b      	ldr	r3, [r7, #4]
 800d486:	f8d3 3194 	ldr.w	r3, [r3, #404]	@ 0x194
 800d48a:	685b      	ldr	r3, [r3, #4]
 800d48c:	6878      	ldr	r0, [r7, #4]
 800d48e:	4798      	blx	r3
  (*cinfo->marker->write_scan_header) (cinfo);
 800d490:	687b      	ldr	r3, [r7, #4]
 800d492:	f8d3 3194 	ldr.w	r3, [r3, #404]	@ 0x194
 800d496:	689b      	ldr	r3, [r3, #8]
 800d498:	6878      	ldr	r0, [r7, #4]
 800d49a:	4798      	blx	r3
}
 800d49c:	bf00      	nop
 800d49e:	3708      	adds	r7, #8
 800d4a0:	46bd      	mov	sp, r7
 800d4a2:	bd80      	pop	{r7, pc}

0800d4a4 <finish_pass_master>:
 * Finish up at end of pass.
 */

METHODDEF(void)
finish_pass_master (j_compress_ptr cinfo)
{
 800d4a4:	b580      	push	{r7, lr}
 800d4a6:	b084      	sub	sp, #16
 800d4a8:	af00      	add	r7, sp, #0
 800d4aa:	6078      	str	r0, [r7, #4]
  my_master_ptr master = (my_master_ptr) cinfo->master;
 800d4ac:	687b      	ldr	r3, [r7, #4]
 800d4ae:	f8d3 3184 	ldr.w	r3, [r3, #388]	@ 0x184
 800d4b2:	60fb      	str	r3, [r7, #12]

  /* The entropy coder always needs an end-of-pass call,
   * either to analyze statistics or to flush its output buffer.
   */
  (*cinfo->entropy->finish_pass) (cinfo);
 800d4b4:	687b      	ldr	r3, [r7, #4]
 800d4b6:	f8d3 31a4 	ldr.w	r3, [r3, #420]	@ 0x1a4
 800d4ba:	689b      	ldr	r3, [r3, #8]
 800d4bc:	6878      	ldr	r0, [r7, #4]
 800d4be:	4798      	blx	r3

  /* Update state for next pass */
  switch (master->pass_type) {
 800d4c0:	68fb      	ldr	r3, [r7, #12]
 800d4c2:	7d1b      	ldrb	r3, [r3, #20]
 800d4c4:	2b02      	cmp	r3, #2
 800d4c6:	d018      	beq.n	800d4fa <finish_pass_master+0x56>
 800d4c8:	2b02      	cmp	r3, #2
 800d4ca:	dc25      	bgt.n	800d518 <finish_pass_master+0x74>
 800d4cc:	2b00      	cmp	r3, #0
 800d4ce:	d002      	beq.n	800d4d6 <finish_pass_master+0x32>
 800d4d0:	2b01      	cmp	r3, #1
 800d4d2:	d00e      	beq.n	800d4f2 <finish_pass_master+0x4e>
 800d4d4:	e020      	b.n	800d518 <finish_pass_master+0x74>
  case main_pass:
    /* next pass is either output of scan 0 (after optimization)
     * or output of scan 1 (if no optimization).
     */
    master->pass_type = output_pass;
 800d4d6:	68fb      	ldr	r3, [r7, #12]
 800d4d8:	2202      	movs	r2, #2
 800d4da:	751a      	strb	r2, [r3, #20]
    if (! cinfo->optimize_coding)
 800d4dc:	687b      	ldr	r3, [r7, #4]
 800d4de:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 800d4e2:	2b00      	cmp	r3, #0
 800d4e4:	d117      	bne.n	800d516 <finish_pass_master+0x72>
      master->scan_number++;
 800d4e6:	68fb      	ldr	r3, [r7, #12]
 800d4e8:	6a1b      	ldr	r3, [r3, #32]
 800d4ea:	1c5a      	adds	r2, r3, #1
 800d4ec:	68fb      	ldr	r3, [r7, #12]
 800d4ee:	621a      	str	r2, [r3, #32]
    break;
 800d4f0:	e011      	b.n	800d516 <finish_pass_master+0x72>
  case huff_opt_pass:
    /* next pass is always output of current scan */
    master->pass_type = output_pass;
 800d4f2:	68fb      	ldr	r3, [r7, #12]
 800d4f4:	2202      	movs	r2, #2
 800d4f6:	751a      	strb	r2, [r3, #20]
    break;
 800d4f8:	e00e      	b.n	800d518 <finish_pass_master+0x74>
  case output_pass:
    /* next pass is either optimization or output of next scan */
    if (cinfo->optimize_coding)
 800d4fa:	687b      	ldr	r3, [r7, #4]
 800d4fc:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 800d500:	2b00      	cmp	r3, #0
 800d502:	d002      	beq.n	800d50a <finish_pass_master+0x66>
      master->pass_type = huff_opt_pass;
 800d504:	68fb      	ldr	r3, [r7, #12]
 800d506:	2201      	movs	r2, #1
 800d508:	751a      	strb	r2, [r3, #20]
    master->scan_number++;
 800d50a:	68fb      	ldr	r3, [r7, #12]
 800d50c:	6a1b      	ldr	r3, [r3, #32]
 800d50e:	1c5a      	adds	r2, r3, #1
 800d510:	68fb      	ldr	r3, [r7, #12]
 800d512:	621a      	str	r2, [r3, #32]
    break;
 800d514:	e000      	b.n	800d518 <finish_pass_master+0x74>
    break;
 800d516:	bf00      	nop
  }

  master->pass_number++;
 800d518:	68fb      	ldr	r3, [r7, #12]
 800d51a:	699b      	ldr	r3, [r3, #24]
 800d51c:	1c5a      	adds	r2, r3, #1
 800d51e:	68fb      	ldr	r3, [r7, #12]
 800d520:	619a      	str	r2, [r3, #24]
}
 800d522:	bf00      	nop
 800d524:	3710      	adds	r7, #16
 800d526:	46bd      	mov	sp, r7
 800d528:	bd80      	pop	{r7, pc}
	...

0800d52c <jinit_c_master_control>:
 * Initialize master compression control.
 */

GLOBAL(void)
jinit_c_master_control (j_compress_ptr cinfo, boolean transcode_only)
{
 800d52c:	b580      	push	{r7, lr}
 800d52e:	b084      	sub	sp, #16
 800d530:	af00      	add	r7, sp, #0
 800d532:	6078      	str	r0, [r7, #4]
 800d534:	6039      	str	r1, [r7, #0]
  my_master_ptr master;

  master = (my_master_ptr)
      (*cinfo->mem->alloc_small) ((j_common_ptr) cinfo, JPOOL_IMAGE,
 800d536:	687b      	ldr	r3, [r7, #4]
 800d538:	685b      	ldr	r3, [r3, #4]
 800d53a:	681b      	ldr	r3, [r3, #0]
 800d53c:	2224      	movs	r2, #36	@ 0x24
 800d53e:	2101      	movs	r1, #1
 800d540:	6878      	ldr	r0, [r7, #4]
 800d542:	4798      	blx	r3
 800d544:	60f8      	str	r0, [r7, #12]
				  SIZEOF(my_comp_master));
  cinfo->master = (struct jpeg_comp_master *) master;
 800d546:	687b      	ldr	r3, [r7, #4]
 800d548:	68fa      	ldr	r2, [r7, #12]
 800d54a:	f8c3 2184 	str.w	r2, [r3, #388]	@ 0x184
  master->pub.prepare_for_pass = prepare_for_pass;
 800d54e:	68fb      	ldr	r3, [r7, #12]
 800d550:	4a34      	ldr	r2, [pc, #208]	@ (800d624 <jinit_c_master_control+0xf8>)
 800d552:	601a      	str	r2, [r3, #0]
  master->pub.pass_startup = pass_startup;
 800d554:	68fb      	ldr	r3, [r7, #12]
 800d556:	4a34      	ldr	r2, [pc, #208]	@ (800d628 <jinit_c_master_control+0xfc>)
 800d558:	605a      	str	r2, [r3, #4]
  master->pub.finish_pass = finish_pass_master;
 800d55a:	68fb      	ldr	r3, [r7, #12]
 800d55c:	4a33      	ldr	r2, [pc, #204]	@ (800d62c <jinit_c_master_control+0x100>)
 800d55e:	609a      	str	r2, [r3, #8]
  master->pub.is_last_pass = FALSE;
 800d560:	68fb      	ldr	r3, [r7, #12]
 800d562:	2200      	movs	r2, #0
 800d564:	611a      	str	r2, [r3, #16]

  /* Validate parameters, determine derived values */
  initial_setup(cinfo, transcode_only);
 800d566:	6839      	ldr	r1, [r7, #0]
 800d568:	6878      	ldr	r0, [r7, #4]
 800d56a:	f7fe fe87 	bl	800c27c <initial_setup>

  if (cinfo->scan_info != NULL) {
 800d56e:	687b      	ldr	r3, [r7, #4]
 800d570:	f8d3 30cc 	ldr.w	r3, [r3, #204]	@ 0xcc
 800d574:	2b00      	cmp	r3, #0
 800d576:	d00b      	beq.n	800d590 <jinit_c_master_control+0x64>
#ifdef C_MULTISCAN_FILES_SUPPORTED
    validate_script(cinfo);
 800d578:	6878      	ldr	r0, [r7, #4]
 800d57a:	f7ff f8c7 	bl	800c70c <validate_script>
    if (cinfo->block_size < DCTSIZE)
 800d57e:	687b      	ldr	r3, [r7, #4]
 800d580:	f8d3 3178 	ldr.w	r3, [r3, #376]	@ 0x178
 800d584:	2b07      	cmp	r3, #7
 800d586:	dc0b      	bgt.n	800d5a0 <jinit_c_master_control+0x74>
      reduce_script(cinfo);
 800d588:	6878      	ldr	r0, [r7, #4]
 800d58a:	f7ff fc65 	bl	800ce58 <reduce_script>
 800d58e:	e007      	b.n	800d5a0 <jinit_c_master_control+0x74>
#else
    ERREXIT(cinfo, JERR_NOT_COMPILED);
#endif
  } else {
    cinfo->progressive_mode = FALSE;
 800d590:	687b      	ldr	r3, [r7, #4]
 800d592:	2200      	movs	r2, #0
 800d594:	f8c3 2108 	str.w	r2, [r3, #264]	@ 0x108
    cinfo->num_scans = 1;
 800d598:	687b      	ldr	r3, [r7, #4]
 800d59a:	2201      	movs	r2, #1
 800d59c:	f8c3 20c8 	str.w	r2, [r3, #200]	@ 0xc8
  }

  if ((cinfo->progressive_mode || cinfo->block_size < DCTSIZE) &&
 800d5a0:	687b      	ldr	r3, [r7, #4]
 800d5a2:	f8d3 3108 	ldr.w	r3, [r3, #264]	@ 0x108
 800d5a6:	2b00      	cmp	r3, #0
 800d5a8:	d104      	bne.n	800d5b4 <jinit_c_master_control+0x88>
 800d5aa:	687b      	ldr	r3, [r7, #4]
 800d5ac:	f8d3 3178 	ldr.w	r3, [r3, #376]	@ 0x178
 800d5b0:	2b07      	cmp	r3, #7
 800d5b2:	dc08      	bgt.n	800d5c6 <jinit_c_master_control+0x9a>
      !cinfo->arith_code)			/*  TEMPORARY HACK ??? */
 800d5b4:	687b      	ldr	r3, [r7, #4]
 800d5b6:	f8d3 30d4 	ldr.w	r3, [r3, #212]	@ 0xd4
  if ((cinfo->progressive_mode || cinfo->block_size < DCTSIZE) &&
 800d5ba:	2b00      	cmp	r3, #0
 800d5bc:	d103      	bne.n	800d5c6 <jinit_c_master_control+0x9a>
    /* assume default tables no good for progressive or downscale mode */
    cinfo->optimize_coding = TRUE;
 800d5be:	687b      	ldr	r3, [r7, #4]
 800d5c0:	2201      	movs	r2, #1
 800d5c2:	f8c3 20d8 	str.w	r2, [r3, #216]	@ 0xd8

  /* Initialize my private state */
  if (transcode_only) {
 800d5c6:	683b      	ldr	r3, [r7, #0]
 800d5c8:	2b00      	cmp	r3, #0
 800d5ca:	d00c      	beq.n	800d5e6 <jinit_c_master_control+0xba>
    /* no main pass in transcoding */
    if (cinfo->optimize_coding)
 800d5cc:	687b      	ldr	r3, [r7, #4]
 800d5ce:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 800d5d2:	2b00      	cmp	r3, #0
 800d5d4:	d003      	beq.n	800d5de <jinit_c_master_control+0xb2>
      master->pass_type = huff_opt_pass;
 800d5d6:	68fb      	ldr	r3, [r7, #12]
 800d5d8:	2201      	movs	r2, #1
 800d5da:	751a      	strb	r2, [r3, #20]
 800d5dc:	e006      	b.n	800d5ec <jinit_c_master_control+0xc0>
    else
      master->pass_type = output_pass;
 800d5de:	68fb      	ldr	r3, [r7, #12]
 800d5e0:	2202      	movs	r2, #2
 800d5e2:	751a      	strb	r2, [r3, #20]
 800d5e4:	e002      	b.n	800d5ec <jinit_c_master_control+0xc0>
  } else {
    /* for normal compression, first pass is always this type: */
    master->pass_type = main_pass;
 800d5e6:	68fb      	ldr	r3, [r7, #12]
 800d5e8:	2200      	movs	r2, #0
 800d5ea:	751a      	strb	r2, [r3, #20]
  }
  master->scan_number = 0;
 800d5ec:	68fb      	ldr	r3, [r7, #12]
 800d5ee:	2200      	movs	r2, #0
 800d5f0:	621a      	str	r2, [r3, #32]
  master->pass_number = 0;
 800d5f2:	68fb      	ldr	r3, [r7, #12]
 800d5f4:	2200      	movs	r2, #0
 800d5f6:	619a      	str	r2, [r3, #24]
  if (cinfo->optimize_coding)
 800d5f8:	687b      	ldr	r3, [r7, #4]
 800d5fa:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 800d5fe:	2b00      	cmp	r3, #0
 800d600:	d006      	beq.n	800d610 <jinit_c_master_control+0xe4>
    master->total_passes = cinfo->num_scans * 2;
 800d602:	687b      	ldr	r3, [r7, #4]
 800d604:	f8d3 30c8 	ldr.w	r3, [r3, #200]	@ 0xc8
 800d608:	005a      	lsls	r2, r3, #1
 800d60a:	68fb      	ldr	r3, [r7, #12]
 800d60c:	61da      	str	r2, [r3, #28]
  else
    master->total_passes = cinfo->num_scans;
}
 800d60e:	e004      	b.n	800d61a <jinit_c_master_control+0xee>
    master->total_passes = cinfo->num_scans;
 800d610:	687b      	ldr	r3, [r7, #4]
 800d612:	f8d3 20c8 	ldr.w	r2, [r3, #200]	@ 0xc8
 800d616:	68fb      	ldr	r3, [r7, #12]
 800d618:	61da      	str	r2, [r3, #28]
}
 800d61a:	bf00      	nop
 800d61c:	3710      	adds	r7, #16
 800d61e:	46bd      	mov	sp, r7
 800d620:	bd80      	pop	{r7, pc}
 800d622:	bf00      	nop
 800d624:	0800d2ab 	.word	0x0800d2ab
 800d628:	0800d473 	.word	0x0800d473
 800d62c:	0800d4a5 	.word	0x0800d4a5

0800d630 <jpeg_abort>:
 * responsibility.
 */

GLOBAL(void)
jpeg_abort (j_common_ptr cinfo)
{
 800d630:	b580      	push	{r7, lr}
 800d632:	b084      	sub	sp, #16
 800d634:	af00      	add	r7, sp, #0
 800d636:	6078      	str	r0, [r7, #4]
  int pool;

  /* Do nothing if called on a not-initialized or destroyed JPEG object. */
  if (cinfo->mem == NULL)
 800d638:	687b      	ldr	r3, [r7, #4]
 800d63a:	685b      	ldr	r3, [r3, #4]
 800d63c:	2b00      	cmp	r3, #0
 800d63e:	d01e      	beq.n	800d67e <jpeg_abort+0x4e>
    return;

  /* Releasing pools in reverse order might help avoid fragmentation
   * with some (brain-damaged) malloc libraries.
   */
  for (pool = JPOOL_NUMPOOLS-1; pool > JPOOL_PERMANENT; pool--) {
 800d640:	2301      	movs	r3, #1
 800d642:	60fb      	str	r3, [r7, #12]
 800d644:	e008      	b.n	800d658 <jpeg_abort+0x28>
    (*cinfo->mem->free_pool) (cinfo, pool);
 800d646:	687b      	ldr	r3, [r7, #4]
 800d648:	685b      	ldr	r3, [r3, #4]
 800d64a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800d64c:	68f9      	ldr	r1, [r7, #12]
 800d64e:	6878      	ldr	r0, [r7, #4]
 800d650:	4798      	blx	r3
  for (pool = JPOOL_NUMPOOLS-1; pool > JPOOL_PERMANENT; pool--) {
 800d652:	68fb      	ldr	r3, [r7, #12]
 800d654:	3b01      	subs	r3, #1
 800d656:	60fb      	str	r3, [r7, #12]
 800d658:	68fb      	ldr	r3, [r7, #12]
 800d65a:	2b00      	cmp	r3, #0
 800d65c:	dcf3      	bgt.n	800d646 <jpeg_abort+0x16>
  }

  /* Reset overall state for possible reuse of object */
  if (cinfo->is_decompressor) {
 800d65e:	687b      	ldr	r3, [r7, #4]
 800d660:	691b      	ldr	r3, [r3, #16]
 800d662:	2b00      	cmp	r3, #0
 800d664:	d007      	beq.n	800d676 <jpeg_abort+0x46>
    cinfo->global_state = DSTATE_START;
 800d666:	687b      	ldr	r3, [r7, #4]
 800d668:	22c8      	movs	r2, #200	@ 0xc8
 800d66a:	615a      	str	r2, [r3, #20]
    /* Try to keep application from accessing now-deleted marker list.
     * A bit kludgy to do it here, but this is the most central place.
     */
    ((j_decompress_ptr) cinfo)->marker_list = NULL;
 800d66c:	687b      	ldr	r3, [r7, #4]
 800d66e:	2200      	movs	r2, #0
 800d670:	f8c3 2134 	str.w	r2, [r3, #308]	@ 0x134
 800d674:	e004      	b.n	800d680 <jpeg_abort+0x50>
  } else {
    cinfo->global_state = CSTATE_START;
 800d676:	687b      	ldr	r3, [r7, #4]
 800d678:	2264      	movs	r2, #100	@ 0x64
 800d67a:	615a      	str	r2, [r3, #20]
 800d67c:	e000      	b.n	800d680 <jpeg_abort+0x50>
    return;
 800d67e:	bf00      	nop
  }
}
 800d680:	3710      	adds	r7, #16
 800d682:	46bd      	mov	sp, r7
 800d684:	bd80      	pop	{r7, pc}

0800d686 <jpeg_destroy>:
 * responsibility.
 */

GLOBAL(void)
jpeg_destroy (j_common_ptr cinfo)
{
 800d686:	b580      	push	{r7, lr}
 800d688:	b082      	sub	sp, #8
 800d68a:	af00      	add	r7, sp, #0
 800d68c:	6078      	str	r0, [r7, #4]
  /* We need only tell the memory manager to release everything. */
  /* NB: mem pointer is NULL if memory mgr failed to initialize. */
  if (cinfo->mem != NULL)
 800d68e:	687b      	ldr	r3, [r7, #4]
 800d690:	685b      	ldr	r3, [r3, #4]
 800d692:	2b00      	cmp	r3, #0
 800d694:	d004      	beq.n	800d6a0 <jpeg_destroy+0x1a>
    (*cinfo->mem->self_destruct) (cinfo);
 800d696:	687b      	ldr	r3, [r7, #4]
 800d698:	685b      	ldr	r3, [r3, #4]
 800d69a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800d69c:	6878      	ldr	r0, [r7, #4]
 800d69e:	4798      	blx	r3
  cinfo->mem = NULL;		/* be safe if jpeg_destroy is called twice */
 800d6a0:	687b      	ldr	r3, [r7, #4]
 800d6a2:	2200      	movs	r2, #0
 800d6a4:	605a      	str	r2, [r3, #4]
  cinfo->global_state = 0;	/* mark it destroyed */
 800d6a6:	687b      	ldr	r3, [r7, #4]
 800d6a8:	2200      	movs	r2, #0
 800d6aa:	615a      	str	r2, [r3, #20]
}
 800d6ac:	bf00      	nop
 800d6ae:	3708      	adds	r7, #8
 800d6b0:	46bd      	mov	sp, r7
 800d6b2:	bd80      	pop	{r7, pc}

0800d6b4 <jpeg_alloc_quant_table>:
 * (Would jutils.c be a more reasonable place to put these?)
 */

GLOBAL(JQUANT_TBL *)
jpeg_alloc_quant_table (j_common_ptr cinfo)
{
 800d6b4:	b580      	push	{r7, lr}
 800d6b6:	b084      	sub	sp, #16
 800d6b8:	af00      	add	r7, sp, #0
 800d6ba:	6078      	str	r0, [r7, #4]
  JQUANT_TBL *tbl;

  tbl = (JQUANT_TBL *)
    (*cinfo->mem->alloc_small) (cinfo, JPOOL_PERMANENT, SIZEOF(JQUANT_TBL));
 800d6bc:	687b      	ldr	r3, [r7, #4]
 800d6be:	685b      	ldr	r3, [r3, #4]
 800d6c0:	681b      	ldr	r3, [r3, #0]
 800d6c2:	2284      	movs	r2, #132	@ 0x84
 800d6c4:	2100      	movs	r1, #0
 800d6c6:	6878      	ldr	r0, [r7, #4]
 800d6c8:	4798      	blx	r3
 800d6ca:	60f8      	str	r0, [r7, #12]
  tbl->sent_table = FALSE;	/* make sure this is false in any new table */
 800d6cc:	68fb      	ldr	r3, [r7, #12]
 800d6ce:	2200      	movs	r2, #0
 800d6d0:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  return tbl;
 800d6d4:	68fb      	ldr	r3, [r7, #12]
}
 800d6d6:	4618      	mov	r0, r3
 800d6d8:	3710      	adds	r7, #16
 800d6da:	46bd      	mov	sp, r7
 800d6dc:	bd80      	pop	{r7, pc}

0800d6de <jpeg_alloc_huff_table>:


GLOBAL(JHUFF_TBL *)
jpeg_alloc_huff_table (j_common_ptr cinfo)
{
 800d6de:	b580      	push	{r7, lr}
 800d6e0:	b084      	sub	sp, #16
 800d6e2:	af00      	add	r7, sp, #0
 800d6e4:	6078      	str	r0, [r7, #4]
  JHUFF_TBL *tbl;

  tbl = (JHUFF_TBL *)
    (*cinfo->mem->alloc_small) (cinfo, JPOOL_PERMANENT, SIZEOF(JHUFF_TBL));
 800d6e6:	687b      	ldr	r3, [r7, #4]
 800d6e8:	685b      	ldr	r3, [r3, #4]
 800d6ea:	681b      	ldr	r3, [r3, #0]
 800d6ec:	f44f 728c 	mov.w	r2, #280	@ 0x118
 800d6f0:	2100      	movs	r1, #0
 800d6f2:	6878      	ldr	r0, [r7, #4]
 800d6f4:	4798      	blx	r3
 800d6f6:	60f8      	str	r0, [r7, #12]
  tbl->sent_table = FALSE;	/* make sure this is false in any new table */
 800d6f8:	68fb      	ldr	r3, [r7, #12]
 800d6fa:	2200      	movs	r2, #0
 800d6fc:	f8c3 2114 	str.w	r2, [r3, #276]	@ 0x114
  return tbl;
 800d700:	68fb      	ldr	r3, [r7, #12]
}
 800d702:	4618      	mov	r0, r3
 800d704:	3710      	adds	r7, #16
 800d706:	46bd      	mov	sp, r7
 800d708:	bd80      	pop	{r7, pc}
	...

0800d70c <jpeg_add_quant_table>:
/* Define a quantization table equal to the basic_table times
 * a scale factor (given as a percentage).
 * If force_baseline is TRUE, the computed quantization table entries
 * are limited to 1..255 for JPEG baseline compatibility.
 */
{
 800d70c:	b580      	push	{r7, lr}
 800d70e:	b088      	sub	sp, #32
 800d710:	af00      	add	r7, sp, #0
 800d712:	60f8      	str	r0, [r7, #12]
 800d714:	60b9      	str	r1, [r7, #8]
 800d716:	607a      	str	r2, [r7, #4]
 800d718:	603b      	str	r3, [r7, #0]
  JQUANT_TBL ** qtblptr;
  int i;
  long temp;

  /* Safety check to ensure start_compress not called yet. */
  if (cinfo->global_state != CSTATE_START)
 800d71a:	68fb      	ldr	r3, [r7, #12]
 800d71c:	695b      	ldr	r3, [r3, #20]
 800d71e:	2b64      	cmp	r3, #100	@ 0x64
 800d720:	d00d      	beq.n	800d73e <jpeg_add_quant_table+0x32>
    ERREXIT1(cinfo, JERR_BAD_STATE, cinfo->global_state);
 800d722:	68fb      	ldr	r3, [r7, #12]
 800d724:	681b      	ldr	r3, [r3, #0]
 800d726:	2215      	movs	r2, #21
 800d728:	615a      	str	r2, [r3, #20]
 800d72a:	68fb      	ldr	r3, [r7, #12]
 800d72c:	681b      	ldr	r3, [r3, #0]
 800d72e:	68fa      	ldr	r2, [r7, #12]
 800d730:	6952      	ldr	r2, [r2, #20]
 800d732:	619a      	str	r2, [r3, #24]
 800d734:	68fb      	ldr	r3, [r7, #12]
 800d736:	681b      	ldr	r3, [r3, #0]
 800d738:	681b      	ldr	r3, [r3, #0]
 800d73a:	68f8      	ldr	r0, [r7, #12]
 800d73c:	4798      	blx	r3

  if (which_tbl < 0 || which_tbl >= NUM_QUANT_TBLS)
 800d73e:	68bb      	ldr	r3, [r7, #8]
 800d740:	2b00      	cmp	r3, #0
 800d742:	db02      	blt.n	800d74a <jpeg_add_quant_table+0x3e>
 800d744:	68bb      	ldr	r3, [r7, #8]
 800d746:	2b03      	cmp	r3, #3
 800d748:	dd0c      	ble.n	800d764 <jpeg_add_quant_table+0x58>
    ERREXIT1(cinfo, JERR_DQT_INDEX, which_tbl);
 800d74a:	68fb      	ldr	r3, [r7, #12]
 800d74c:	681b      	ldr	r3, [r3, #0]
 800d74e:	2220      	movs	r2, #32
 800d750:	615a      	str	r2, [r3, #20]
 800d752:	68fb      	ldr	r3, [r7, #12]
 800d754:	681b      	ldr	r3, [r3, #0]
 800d756:	68ba      	ldr	r2, [r7, #8]
 800d758:	619a      	str	r2, [r3, #24]
 800d75a:	68fb      	ldr	r3, [r7, #12]
 800d75c:	681b      	ldr	r3, [r3, #0]
 800d75e:	681b      	ldr	r3, [r3, #0]
 800d760:	68f8      	ldr	r0, [r7, #12]
 800d762:	4798      	blx	r3

  qtblptr = & cinfo->quant_tbl_ptrs[which_tbl];
 800d764:	68bb      	ldr	r3, [r7, #8]
 800d766:	3316      	adds	r3, #22
 800d768:	009b      	lsls	r3, r3, #2
 800d76a:	68fa      	ldr	r2, [r7, #12]
 800d76c:	4413      	add	r3, r2
 800d76e:	617b      	str	r3, [r7, #20]

  if (*qtblptr == NULL)
 800d770:	697b      	ldr	r3, [r7, #20]
 800d772:	681b      	ldr	r3, [r3, #0]
 800d774:	2b00      	cmp	r3, #0
 800d776:	d105      	bne.n	800d784 <jpeg_add_quant_table+0x78>
    *qtblptr = jpeg_alloc_quant_table((j_common_ptr) cinfo);
 800d778:	68f8      	ldr	r0, [r7, #12]
 800d77a:	f7ff ff9b 	bl	800d6b4 <jpeg_alloc_quant_table>
 800d77e:	4602      	mov	r2, r0
 800d780:	697b      	ldr	r3, [r7, #20]
 800d782:	601a      	str	r2, [r3, #0]

  for (i = 0; i < DCTSIZE2; i++) {
 800d784:	2300      	movs	r3, #0
 800d786:	61fb      	str	r3, [r7, #28]
 800d788:	e02e      	b.n	800d7e8 <jpeg_add_quant_table+0xdc>
    temp = ((long) basic_table[i] * scale_factor + 50L) / 100L;
 800d78a:	69fb      	ldr	r3, [r7, #28]
 800d78c:	009b      	lsls	r3, r3, #2
 800d78e:	687a      	ldr	r2, [r7, #4]
 800d790:	4413      	add	r3, r2
 800d792:	681b      	ldr	r3, [r3, #0]
 800d794:	461a      	mov	r2, r3
 800d796:	683b      	ldr	r3, [r7, #0]
 800d798:	fb02 f303 	mul.w	r3, r2, r3
 800d79c:	3332      	adds	r3, #50	@ 0x32
 800d79e:	4a18      	ldr	r2, [pc, #96]	@ (800d800 <jpeg_add_quant_table+0xf4>)
 800d7a0:	fb82 1203 	smull	r1, r2, r2, r3
 800d7a4:	1152      	asrs	r2, r2, #5
 800d7a6:	17db      	asrs	r3, r3, #31
 800d7a8:	1ad3      	subs	r3, r2, r3
 800d7aa:	61bb      	str	r3, [r7, #24]
    /* limit the values to the valid range */
    if (temp <= 0L) temp = 1L;
 800d7ac:	69bb      	ldr	r3, [r7, #24]
 800d7ae:	2b00      	cmp	r3, #0
 800d7b0:	dc01      	bgt.n	800d7b6 <jpeg_add_quant_table+0xaa>
 800d7b2:	2301      	movs	r3, #1
 800d7b4:	61bb      	str	r3, [r7, #24]
    if (temp > 32767L) temp = 32767L; /* max quantizer needed for 12 bits */
 800d7b6:	69bb      	ldr	r3, [r7, #24]
 800d7b8:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800d7bc:	db02      	blt.n	800d7c4 <jpeg_add_quant_table+0xb8>
 800d7be:	f647 73ff 	movw	r3, #32767	@ 0x7fff
 800d7c2:	61bb      	str	r3, [r7, #24]
    if (force_baseline && temp > 255L)
 800d7c4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800d7c6:	2b00      	cmp	r3, #0
 800d7c8:	d004      	beq.n	800d7d4 <jpeg_add_quant_table+0xc8>
 800d7ca:	69bb      	ldr	r3, [r7, #24]
 800d7cc:	2bff      	cmp	r3, #255	@ 0xff
 800d7ce:	dd01      	ble.n	800d7d4 <jpeg_add_quant_table+0xc8>
      temp = 255L;		/* limit to baseline range if requested */
 800d7d0:	23ff      	movs	r3, #255	@ 0xff
 800d7d2:	61bb      	str	r3, [r7, #24]
    (*qtblptr)->quantval[i] = (UINT16) temp;
 800d7d4:	697b      	ldr	r3, [r7, #20]
 800d7d6:	681b      	ldr	r3, [r3, #0]
 800d7d8:	69ba      	ldr	r2, [r7, #24]
 800d7da:	b291      	uxth	r1, r2
 800d7dc:	69fa      	ldr	r2, [r7, #28]
 800d7de:	f823 1012 	strh.w	r1, [r3, r2, lsl #1]
  for (i = 0; i < DCTSIZE2; i++) {
 800d7e2:	69fb      	ldr	r3, [r7, #28]
 800d7e4:	3301      	adds	r3, #1
 800d7e6:	61fb      	str	r3, [r7, #28]
 800d7e8:	69fb      	ldr	r3, [r7, #28]
 800d7ea:	2b3f      	cmp	r3, #63	@ 0x3f
 800d7ec:	ddcd      	ble.n	800d78a <jpeg_add_quant_table+0x7e>
  }

  /* Initialize sent_table FALSE so table will be written to JPEG file. */
  (*qtblptr)->sent_table = FALSE;
 800d7ee:	697b      	ldr	r3, [r7, #20]
 800d7f0:	681b      	ldr	r3, [r3, #0]
 800d7f2:	2200      	movs	r2, #0
 800d7f4:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
}
 800d7f8:	bf00      	nop
 800d7fa:	3720      	adds	r7, #32
 800d7fc:	46bd      	mov	sp, r7
 800d7fe:	bd80      	pop	{r7, pc}
 800d800:	51eb851f 	.word	0x51eb851f

0800d804 <jpeg_set_linear_quality>:
/* Set or change the 'quality' (quantization) setting, using default tables
 * and a straight percentage-scaling quality scale.  In most cases it's better
 * to use jpeg_set_quality (below); this entry point is provided for
 * applications that insist on a linear percentage scaling.
 */
{
 800d804:	b580      	push	{r7, lr}
 800d806:	b086      	sub	sp, #24
 800d808:	af02      	add	r7, sp, #8
 800d80a:	60f8      	str	r0, [r7, #12]
 800d80c:	60b9      	str	r1, [r7, #8]
 800d80e:	607a      	str	r2, [r7, #4]
  /* Set up two quantization tables using the specified scaling */
  jpeg_add_quant_table(cinfo, 0, std_luminance_quant_tbl,
 800d810:	687b      	ldr	r3, [r7, #4]
 800d812:	9300      	str	r3, [sp, #0]
 800d814:	68bb      	ldr	r3, [r7, #8]
 800d816:	4a08      	ldr	r2, [pc, #32]	@ (800d838 <jpeg_set_linear_quality+0x34>)
 800d818:	2100      	movs	r1, #0
 800d81a:	68f8      	ldr	r0, [r7, #12]
 800d81c:	f7ff ff76 	bl	800d70c <jpeg_add_quant_table>
		       scale_factor, force_baseline);
  jpeg_add_quant_table(cinfo, 1, std_chrominance_quant_tbl,
 800d820:	687b      	ldr	r3, [r7, #4]
 800d822:	9300      	str	r3, [sp, #0]
 800d824:	68bb      	ldr	r3, [r7, #8]
 800d826:	4a05      	ldr	r2, [pc, #20]	@ (800d83c <jpeg_set_linear_quality+0x38>)
 800d828:	2101      	movs	r1, #1
 800d82a:	68f8      	ldr	r0, [r7, #12]
 800d82c:	f7ff ff6e 	bl	800d70c <jpeg_add_quant_table>
		       scale_factor, force_baseline);
}
 800d830:	bf00      	nop
 800d832:	3710      	adds	r7, #16
 800d834:	46bd      	mov	sp, r7
 800d836:	bd80      	pop	{r7, pc}
 800d838:	0801b828 	.word	0x0801b828
 800d83c:	0801b928 	.word	0x0801b928

0800d840 <jpeg_quality_scaling>:
jpeg_quality_scaling (int quality)
/* Convert a user-specified quality rating to a percentage scaling factor
 * for an underlying quantization table, using our recommended scaling curve.
 * The input 'quality' factor should be 0 (terrible) to 100 (very good).
 */
{
 800d840:	b480      	push	{r7}
 800d842:	b083      	sub	sp, #12
 800d844:	af00      	add	r7, sp, #0
 800d846:	6078      	str	r0, [r7, #4]
  /* Safety limit on quality factor.  Convert 0 to 1 to avoid zero divide. */
  if (quality <= 0) quality = 1;
 800d848:	687b      	ldr	r3, [r7, #4]
 800d84a:	2b00      	cmp	r3, #0
 800d84c:	dc01      	bgt.n	800d852 <jpeg_quality_scaling+0x12>
 800d84e:	2301      	movs	r3, #1
 800d850:	607b      	str	r3, [r7, #4]
  if (quality > 100) quality = 100;
 800d852:	687b      	ldr	r3, [r7, #4]
 800d854:	2b64      	cmp	r3, #100	@ 0x64
 800d856:	dd01      	ble.n	800d85c <jpeg_quality_scaling+0x1c>
 800d858:	2364      	movs	r3, #100	@ 0x64
 800d85a:	607b      	str	r3, [r7, #4]
   * Qualities 50..100 are converted to scaling percentage 200 - 2*Q;
   * note that at Q=100 the scaling is 0, which will cause jpeg_add_quant_table
   * to make all the table entries 1 (hence, minimum quantization loss).
   * Qualities 1..50 are converted to scaling percentage 5000/Q.
   */
  if (quality < 50)
 800d85c:	687b      	ldr	r3, [r7, #4]
 800d85e:	2b31      	cmp	r3, #49	@ 0x31
 800d860:	dc06      	bgt.n	800d870 <jpeg_quality_scaling+0x30>
    quality = 5000 / quality;
 800d862:	f241 3288 	movw	r2, #5000	@ 0x1388
 800d866:	687b      	ldr	r3, [r7, #4]
 800d868:	fb92 f3f3 	sdiv	r3, r2, r3
 800d86c:	607b      	str	r3, [r7, #4]
 800d86e:	e004      	b.n	800d87a <jpeg_quality_scaling+0x3a>
  else
    quality = 200 - quality*2;
 800d870:	687b      	ldr	r3, [r7, #4]
 800d872:	f1c3 0364 	rsb	r3, r3, #100	@ 0x64
 800d876:	005b      	lsls	r3, r3, #1
 800d878:	607b      	str	r3, [r7, #4]

  return quality;
 800d87a:	687b      	ldr	r3, [r7, #4]
}
 800d87c:	4618      	mov	r0, r3
 800d87e:	370c      	adds	r7, #12
 800d880:	46bd      	mov	sp, r7
 800d882:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d886:	4770      	bx	lr

0800d888 <jpeg_set_quality>:
/* Set or change the 'quality' (quantization) setting, using default tables.
 * This is the standard quality-adjusting entry point for typical user
 * interfaces; only those who want detailed control over quantization tables
 * would use the preceding three routines directly.
 */
{
 800d888:	b580      	push	{r7, lr}
 800d88a:	b084      	sub	sp, #16
 800d88c:	af00      	add	r7, sp, #0
 800d88e:	60f8      	str	r0, [r7, #12]
 800d890:	60b9      	str	r1, [r7, #8]
 800d892:	607a      	str	r2, [r7, #4]
  /* Convert user 0-100 rating to percentage scaling */
  quality = jpeg_quality_scaling(quality);
 800d894:	68b8      	ldr	r0, [r7, #8]
 800d896:	f7ff ffd3 	bl	800d840 <jpeg_quality_scaling>
 800d89a:	60b8      	str	r0, [r7, #8]

  /* Set up standard quality tables */
  jpeg_set_linear_quality(cinfo, quality, force_baseline);
 800d89c:	687a      	ldr	r2, [r7, #4]
 800d89e:	68b9      	ldr	r1, [r7, #8]
 800d8a0:	68f8      	ldr	r0, [r7, #12]
 800d8a2:	f7ff ffaf 	bl	800d804 <jpeg_set_linear_quality>
}
 800d8a6:	bf00      	nop
 800d8a8:	3710      	adds	r7, #16
 800d8aa:	46bd      	mov	sp, r7
 800d8ac:	bd80      	pop	{r7, pc}

0800d8ae <add_huff_table>:

LOCAL(void)
add_huff_table (j_compress_ptr cinfo,
		JHUFF_TBL **htblptr, const UINT8 *bits, const UINT8 *val)
/* Define a Huffman table */
{
 800d8ae:	b580      	push	{r7, lr}
 800d8b0:	b086      	sub	sp, #24
 800d8b2:	af00      	add	r7, sp, #0
 800d8b4:	60f8      	str	r0, [r7, #12]
 800d8b6:	60b9      	str	r1, [r7, #8]
 800d8b8:	607a      	str	r2, [r7, #4]
 800d8ba:	603b      	str	r3, [r7, #0]
  int nsymbols, len;

  if (*htblptr == NULL)
 800d8bc:	68bb      	ldr	r3, [r7, #8]
 800d8be:	681b      	ldr	r3, [r3, #0]
 800d8c0:	2b00      	cmp	r3, #0
 800d8c2:	d105      	bne.n	800d8d0 <add_huff_table+0x22>
    *htblptr = jpeg_alloc_huff_table((j_common_ptr) cinfo);
 800d8c4:	68f8      	ldr	r0, [r7, #12]
 800d8c6:	f7ff ff0a 	bl	800d6de <jpeg_alloc_huff_table>
 800d8ca:	4602      	mov	r2, r0
 800d8cc:	68bb      	ldr	r3, [r7, #8]
 800d8ce:	601a      	str	r2, [r3, #0]

  /* Copy the number-of-symbols-of-each-code-length counts */
  MEMCOPY((*htblptr)->bits, bits, SIZEOF((*htblptr)->bits));
 800d8d0:	68bb      	ldr	r3, [r7, #8]
 800d8d2:	681b      	ldr	r3, [r3, #0]
 800d8d4:	2211      	movs	r2, #17
 800d8d6:	6879      	ldr	r1, [r7, #4]
 800d8d8:	4618      	mov	r0, r3
 800d8da:	f00c f8cd 	bl	8019a78 <memcpy>

  /* Validate the counts.  We do this here mainly so we can copy the right
   * number of symbols from the val[] array, without risking marching off
   * the end of memory.  jchuff.c will do a more thorough test later.
   */
  nsymbols = 0;
 800d8de:	2300      	movs	r3, #0
 800d8e0:	617b      	str	r3, [r7, #20]
  for (len = 1; len <= 16; len++)
 800d8e2:	2301      	movs	r3, #1
 800d8e4:	613b      	str	r3, [r7, #16]
 800d8e6:	e00a      	b.n	800d8fe <add_huff_table+0x50>
    nsymbols += bits[len];
 800d8e8:	693b      	ldr	r3, [r7, #16]
 800d8ea:	687a      	ldr	r2, [r7, #4]
 800d8ec:	4413      	add	r3, r2
 800d8ee:	781b      	ldrb	r3, [r3, #0]
 800d8f0:	461a      	mov	r2, r3
 800d8f2:	697b      	ldr	r3, [r7, #20]
 800d8f4:	4413      	add	r3, r2
 800d8f6:	617b      	str	r3, [r7, #20]
  for (len = 1; len <= 16; len++)
 800d8f8:	693b      	ldr	r3, [r7, #16]
 800d8fa:	3301      	adds	r3, #1
 800d8fc:	613b      	str	r3, [r7, #16]
 800d8fe:	693b      	ldr	r3, [r7, #16]
 800d900:	2b10      	cmp	r3, #16
 800d902:	ddf1      	ble.n	800d8e8 <add_huff_table+0x3a>
  if (nsymbols < 1 || nsymbols > 256)
 800d904:	697b      	ldr	r3, [r7, #20]
 800d906:	2b00      	cmp	r3, #0
 800d908:	dd03      	ble.n	800d912 <add_huff_table+0x64>
 800d90a:	697b      	ldr	r3, [r7, #20]
 800d90c:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800d910:	dd08      	ble.n	800d924 <add_huff_table+0x76>
    ERREXIT(cinfo, JERR_BAD_HUFF_TABLE);
 800d912:	68fb      	ldr	r3, [r7, #12]
 800d914:	681b      	ldr	r3, [r3, #0]
 800d916:	2209      	movs	r2, #9
 800d918:	615a      	str	r2, [r3, #20]
 800d91a:	68fb      	ldr	r3, [r7, #12]
 800d91c:	681b      	ldr	r3, [r3, #0]
 800d91e:	681b      	ldr	r3, [r3, #0]
 800d920:	68f8      	ldr	r0, [r7, #12]
 800d922:	4798      	blx	r3

  MEMCOPY((*htblptr)->huffval, val, nsymbols * SIZEOF(UINT8));
 800d924:	68bb      	ldr	r3, [r7, #8]
 800d926:	681b      	ldr	r3, [r3, #0]
 800d928:	3311      	adds	r3, #17
 800d92a:	697a      	ldr	r2, [r7, #20]
 800d92c:	6839      	ldr	r1, [r7, #0]
 800d92e:	4618      	mov	r0, r3
 800d930:	f00c f8a2 	bl	8019a78 <memcpy>

  /* Initialize sent_table FALSE so table will be written to JPEG file. */
  (*htblptr)->sent_table = FALSE;
 800d934:	68bb      	ldr	r3, [r7, #8]
 800d936:	681b      	ldr	r3, [r3, #0]
 800d938:	2200      	movs	r2, #0
 800d93a:	f8c3 2114 	str.w	r2, [r3, #276]	@ 0x114
}
 800d93e:	bf00      	nop
 800d940:	3718      	adds	r7, #24
 800d942:	46bd      	mov	sp, r7
 800d944:	bd80      	pop	{r7, pc}
	...

0800d948 <std_huff_tables>:

LOCAL(void)
std_huff_tables (j_compress_ptr cinfo)
/* Set up the standard Huffman tables (cf. JPEG standard section K.3) */
/* IMPORTANT: these are only valid for 8-bit data precision! */
{
 800d948:	b580      	push	{r7, lr}
 800d94a:	b082      	sub	sp, #8
 800d94c:	af00      	add	r7, sp, #0
 800d94e:	6078      	str	r0, [r7, #4]
      0xd3, 0xd4, 0xd5, 0xd6, 0xd7, 0xd8, 0xd9, 0xda,
      0xe2, 0xe3, 0xe4, 0xe5, 0xe6, 0xe7, 0xe8, 0xe9,
      0xea, 0xf2, 0xf3, 0xf4, 0xf5, 0xf6, 0xf7, 0xf8,
      0xf9, 0xfa };
  
  add_huff_table(cinfo, &cinfo->dc_huff_tbl_ptrs[0],
 800d950:	687b      	ldr	r3, [r7, #4]
 800d952:	f103 0178 	add.w	r1, r3, #120	@ 0x78
 800d956:	4b10      	ldr	r3, [pc, #64]	@ (800d998 <std_huff_tables+0x50>)
 800d958:	4a10      	ldr	r2, [pc, #64]	@ (800d99c <std_huff_tables+0x54>)
 800d95a:	6878      	ldr	r0, [r7, #4]
 800d95c:	f7ff ffa7 	bl	800d8ae <add_huff_table>
		 bits_dc_luminance, val_dc_luminance);
  add_huff_table(cinfo, &cinfo->ac_huff_tbl_ptrs[0],
 800d960:	687b      	ldr	r3, [r7, #4]
 800d962:	f103 0188 	add.w	r1, r3, #136	@ 0x88
 800d966:	4b0e      	ldr	r3, [pc, #56]	@ (800d9a0 <std_huff_tables+0x58>)
 800d968:	4a0e      	ldr	r2, [pc, #56]	@ (800d9a4 <std_huff_tables+0x5c>)
 800d96a:	6878      	ldr	r0, [r7, #4]
 800d96c:	f7ff ff9f 	bl	800d8ae <add_huff_table>
		 bits_ac_luminance, val_ac_luminance);
  add_huff_table(cinfo, &cinfo->dc_huff_tbl_ptrs[1],
 800d970:	687b      	ldr	r3, [r7, #4]
 800d972:	f103 017c 	add.w	r1, r3, #124	@ 0x7c
 800d976:	4b0c      	ldr	r3, [pc, #48]	@ (800d9a8 <std_huff_tables+0x60>)
 800d978:	4a0c      	ldr	r2, [pc, #48]	@ (800d9ac <std_huff_tables+0x64>)
 800d97a:	6878      	ldr	r0, [r7, #4]
 800d97c:	f7ff ff97 	bl	800d8ae <add_huff_table>
		 bits_dc_chrominance, val_dc_chrominance);
  add_huff_table(cinfo, &cinfo->ac_huff_tbl_ptrs[1],
 800d980:	687b      	ldr	r3, [r7, #4]
 800d982:	f103 018c 	add.w	r1, r3, #140	@ 0x8c
 800d986:	4b0a      	ldr	r3, [pc, #40]	@ (800d9b0 <std_huff_tables+0x68>)
 800d988:	4a0a      	ldr	r2, [pc, #40]	@ (800d9b4 <std_huff_tables+0x6c>)
 800d98a:	6878      	ldr	r0, [r7, #4]
 800d98c:	f7ff ff8f 	bl	800d8ae <add_huff_table>
		 bits_ac_chrominance, val_ac_chrominance);
}
 800d990:	bf00      	nop
 800d992:	3708      	adds	r7, #8
 800d994:	46bd      	mov	sp, r7
 800d996:	bd80      	pop	{r7, pc}
 800d998:	0801ba3c 	.word	0x0801ba3c
 800d99c:	0801ba28 	.word	0x0801ba28
 800d9a0:	0801ba5c 	.word	0x0801ba5c
 800d9a4:	0801ba48 	.word	0x0801ba48
 800d9a8:	0801bb14 	.word	0x0801bb14
 800d9ac:	0801bb00 	.word	0x0801bb00
 800d9b0:	0801bb34 	.word	0x0801bb34
 800d9b4:	0801bb20 	.word	0x0801bb20

0800d9b8 <jpeg_set_defaults>:
 * your code will still work (they'll be set to reasonable defaults).
 */

GLOBAL(void)
jpeg_set_defaults (j_compress_ptr cinfo)
{
 800d9b8:	b580      	push	{r7, lr}
 800d9ba:	b084      	sub	sp, #16
 800d9bc:	af00      	add	r7, sp, #0
 800d9be:	6078      	str	r0, [r7, #4]
  int i;

  /* Safety check to ensure start_compress not called yet. */
  if (cinfo->global_state != CSTATE_START)
 800d9c0:	687b      	ldr	r3, [r7, #4]
 800d9c2:	695b      	ldr	r3, [r3, #20]
 800d9c4:	2b64      	cmp	r3, #100	@ 0x64
 800d9c6:	d00d      	beq.n	800d9e4 <jpeg_set_defaults+0x2c>
    ERREXIT1(cinfo, JERR_BAD_STATE, cinfo->global_state);
 800d9c8:	687b      	ldr	r3, [r7, #4]
 800d9ca:	681b      	ldr	r3, [r3, #0]
 800d9cc:	2215      	movs	r2, #21
 800d9ce:	615a      	str	r2, [r3, #20]
 800d9d0:	687b      	ldr	r3, [r7, #4]
 800d9d2:	681b      	ldr	r3, [r3, #0]
 800d9d4:	687a      	ldr	r2, [r7, #4]
 800d9d6:	6952      	ldr	r2, [r2, #20]
 800d9d8:	619a      	str	r2, [r3, #24]
 800d9da:	687b      	ldr	r3, [r7, #4]
 800d9dc:	681b      	ldr	r3, [r3, #0]
 800d9de:	681b      	ldr	r3, [r3, #0]
 800d9e0:	6878      	ldr	r0, [r7, #4]
 800d9e2:	4798      	blx	r3

  /* Allocate comp_info array large enough for maximum component count.
   * Array is made permanent in case application wants to compress
   * multiple images at same param settings.
   */
  if (cinfo->comp_info == NULL)
 800d9e4:	687b      	ldr	r3, [r7, #4]
 800d9e6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800d9e8:	2b00      	cmp	r3, #0
 800d9ea:	d10a      	bne.n	800da02 <jpeg_set_defaults+0x4a>
    cinfo->comp_info = (jpeg_component_info *)
      (*cinfo->mem->alloc_small) ((j_common_ptr) cinfo, JPOOL_PERMANENT,
 800d9ec:	687b      	ldr	r3, [r7, #4]
 800d9ee:	685b      	ldr	r3, [r3, #4]
 800d9f0:	681b      	ldr	r3, [r3, #0]
 800d9f2:	f44f 725c 	mov.w	r2, #880	@ 0x370
 800d9f6:	2100      	movs	r1, #0
 800d9f8:	6878      	ldr	r0, [r7, #4]
 800d9fa:	4798      	blx	r3
 800d9fc:	4602      	mov	r2, r0
    cinfo->comp_info = (jpeg_component_info *)
 800d9fe:	687b      	ldr	r3, [r7, #4]
 800da00:	655a      	str	r2, [r3, #84]	@ 0x54
				  MAX_COMPONENTS * SIZEOF(jpeg_component_info));

  /* Initialize everything not dependent on the color space */

  cinfo->scale_num = 1;		/* 1:1 scaling */
 800da02:	687b      	ldr	r3, [r7, #4]
 800da04:	2201      	movs	r2, #1
 800da06:	639a      	str	r2, [r3, #56]	@ 0x38
  cinfo->scale_denom = 1;
 800da08:	687b      	ldr	r3, [r7, #4]
 800da0a:	2201      	movs	r2, #1
 800da0c:	63da      	str	r2, [r3, #60]	@ 0x3c
  cinfo->data_precision = BITS_IN_JSAMPLE;
 800da0e:	687b      	ldr	r3, [r7, #4]
 800da10:	2208      	movs	r2, #8
 800da12:	649a      	str	r2, [r3, #72]	@ 0x48
  /* Set up two quantization tables using default quality of 75 */
  jpeg_set_quality(cinfo, 75, TRUE);
 800da14:	2201      	movs	r2, #1
 800da16:	214b      	movs	r1, #75	@ 0x4b
 800da18:	6878      	ldr	r0, [r7, #4]
 800da1a:	f7ff ff35 	bl	800d888 <jpeg_set_quality>
  /* Set up two Huffman tables */
  std_huff_tables(cinfo);
 800da1e:	6878      	ldr	r0, [r7, #4]
 800da20:	f7ff ff92 	bl	800d948 <std_huff_tables>

  /* Initialize default arithmetic coding conditioning */
  for (i = 0; i < NUM_ARITH_TBLS; i++) {
 800da24:	2300      	movs	r3, #0
 800da26:	60fb      	str	r3, [r7, #12]
 800da28:	e014      	b.n	800da54 <jpeg_set_defaults+0x9c>
    cinfo->arith_dc_L[i] = 0;
 800da2a:	687a      	ldr	r2, [r7, #4]
 800da2c:	68fb      	ldr	r3, [r7, #12]
 800da2e:	4413      	add	r3, r2
 800da30:	3398      	adds	r3, #152	@ 0x98
 800da32:	2200      	movs	r2, #0
 800da34:	701a      	strb	r2, [r3, #0]
    cinfo->arith_dc_U[i] = 1;
 800da36:	687a      	ldr	r2, [r7, #4]
 800da38:	68fb      	ldr	r3, [r7, #12]
 800da3a:	4413      	add	r3, r2
 800da3c:	33a8      	adds	r3, #168	@ 0xa8
 800da3e:	2201      	movs	r2, #1
 800da40:	701a      	strb	r2, [r3, #0]
    cinfo->arith_ac_K[i] = 5;
 800da42:	687a      	ldr	r2, [r7, #4]
 800da44:	68fb      	ldr	r3, [r7, #12]
 800da46:	4413      	add	r3, r2
 800da48:	33b8      	adds	r3, #184	@ 0xb8
 800da4a:	2205      	movs	r2, #5
 800da4c:	701a      	strb	r2, [r3, #0]
  for (i = 0; i < NUM_ARITH_TBLS; i++) {
 800da4e:	68fb      	ldr	r3, [r7, #12]
 800da50:	3301      	adds	r3, #1
 800da52:	60fb      	str	r3, [r7, #12]
 800da54:	68fb      	ldr	r3, [r7, #12]
 800da56:	2b0f      	cmp	r3, #15
 800da58:	dde7      	ble.n	800da2a <jpeg_set_defaults+0x72>
  }

  /* Default is no multiple-scan output */
  cinfo->scan_info = NULL;
 800da5a:	687b      	ldr	r3, [r7, #4]
 800da5c:	2200      	movs	r2, #0
 800da5e:	f8c3 20cc 	str.w	r2, [r3, #204]	@ 0xcc
  cinfo->num_scans = 0;
 800da62:	687b      	ldr	r3, [r7, #4]
 800da64:	2200      	movs	r2, #0
 800da66:	f8c3 20c8 	str.w	r2, [r3, #200]	@ 0xc8

  /* Expect normal source image, not raw downsampled data */
  cinfo->raw_data_in = FALSE;
 800da6a:	687b      	ldr	r3, [r7, #4]
 800da6c:	2200      	movs	r2, #0
 800da6e:	f8c3 20d0 	str.w	r2, [r3, #208]	@ 0xd0

  /* Use Huffman coding, not arithmetic coding, by default */
  cinfo->arith_code = FALSE;
 800da72:	687b      	ldr	r3, [r7, #4]
 800da74:	2200      	movs	r2, #0
 800da76:	f8c3 20d4 	str.w	r2, [r3, #212]	@ 0xd4

  /* By default, don't do extra passes to optimize entropy coding */
  cinfo->optimize_coding = FALSE;
 800da7a:	687b      	ldr	r3, [r7, #4]
 800da7c:	2200      	movs	r2, #0
 800da7e:	f8c3 20d8 	str.w	r2, [r3, #216]	@ 0xd8
  /* The standard Huffman tables are only valid for 8-bit data precision.
   * If the precision is higher, force optimization on so that usable
   * tables will be computed.  This test can be removed if default tables
   * are supplied that are valid for the desired precision.
   */
  if (cinfo->data_precision > 8)
 800da82:	687b      	ldr	r3, [r7, #4]
 800da84:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800da86:	2b08      	cmp	r3, #8
 800da88:	dd03      	ble.n	800da92 <jpeg_set_defaults+0xda>
    cinfo->optimize_coding = TRUE;
 800da8a:	687b      	ldr	r3, [r7, #4]
 800da8c:	2201      	movs	r2, #1
 800da8e:	f8c3 20d8 	str.w	r2, [r3, #216]	@ 0xd8

  /* By default, use the simpler non-cosited sampling alignment */
  cinfo->CCIR601_sampling = FALSE;
 800da92:	687b      	ldr	r3, [r7, #4]
 800da94:	2200      	movs	r2, #0
 800da96:	f8c3 20dc 	str.w	r2, [r3, #220]	@ 0xdc

  /* By default, apply fancy downsampling */
  cinfo->do_fancy_downsampling = TRUE;
 800da9a:	687b      	ldr	r3, [r7, #4]
 800da9c:	2201      	movs	r2, #1
 800da9e:	f8c3 20e0 	str.w	r2, [r3, #224]	@ 0xe0

  /* No input smoothing */
  cinfo->smoothing_factor = 0;
 800daa2:	687b      	ldr	r3, [r7, #4]
 800daa4:	2200      	movs	r2, #0
 800daa6:	f8c3 20e4 	str.w	r2, [r3, #228]	@ 0xe4

  /* DCT algorithm preference */
  cinfo->dct_method = JDCT_DEFAULT;
 800daaa:	687b      	ldr	r3, [r7, #4]
 800daac:	2200      	movs	r2, #0
 800daae:	f883 20e8 	strb.w	r2, [r3, #232]	@ 0xe8

  /* No restart markers */
  cinfo->restart_interval = 0;
 800dab2:	687b      	ldr	r3, [r7, #4]
 800dab4:	2200      	movs	r2, #0
 800dab6:	f8c3 20ec 	str.w	r2, [r3, #236]	@ 0xec
  cinfo->restart_in_rows = 0;
 800daba:	687b      	ldr	r3, [r7, #4]
 800dabc:	2200      	movs	r2, #0
 800dabe:	f8c3 20f0 	str.w	r2, [r3, #240]	@ 0xf0
   * An application that wants to emit JFIF 1.02 extension markers should set
   * JFIF_minor_version to 2.  We could probably get away with just defaulting
   * to 1.02, but there may still be some decoders in use that will complain
   * about that; saying 1.01 should minimize compatibility problems.
   */
  cinfo->JFIF_major_version = 1; /* Default JFIF version = 1.01 */
 800dac2:	687b      	ldr	r3, [r7, #4]
 800dac4:	2201      	movs	r2, #1
 800dac6:	f883 20f8 	strb.w	r2, [r3, #248]	@ 0xf8
  cinfo->JFIF_minor_version = 1;
 800daca:	687b      	ldr	r3, [r7, #4]
 800dacc:	2201      	movs	r2, #1
 800dace:	f883 20f9 	strb.w	r2, [r3, #249]	@ 0xf9
  cinfo->density_unit = 0;	/* Pixel size is unknown by default */
 800dad2:	687b      	ldr	r3, [r7, #4]
 800dad4:	2200      	movs	r2, #0
 800dad6:	f883 20fa 	strb.w	r2, [r3, #250]	@ 0xfa
  cinfo->X_density = 1;		/* Pixel aspect ratio is square by default */
 800dada:	687b      	ldr	r3, [r7, #4]
 800dadc:	2201      	movs	r2, #1
 800dade:	f8a3 20fc 	strh.w	r2, [r3, #252]	@ 0xfc
  cinfo->Y_density = 1;
 800dae2:	687b      	ldr	r3, [r7, #4]
 800dae4:	2201      	movs	r2, #1
 800dae6:	f8a3 20fe 	strh.w	r2, [r3, #254]	@ 0xfe

  /* Choose JPEG colorspace based on input space, set defaults accordingly */

  jpeg_default_colorspace(cinfo);
 800daea:	6878      	ldr	r0, [r7, #4]
 800daec:	f000 f804 	bl	800daf8 <jpeg_default_colorspace>
}
 800daf0:	bf00      	nop
 800daf2:	3710      	adds	r7, #16
 800daf4:	46bd      	mov	sp, r7
 800daf6:	bd80      	pop	{r7, pc}

0800daf8 <jpeg_default_colorspace>:
 * Select an appropriate JPEG colorspace for in_color_space.
 */

GLOBAL(void)
jpeg_default_colorspace (j_compress_ptr cinfo)
{
 800daf8:	b580      	push	{r7, lr}
 800dafa:	b082      	sub	sp, #8
 800dafc:	af00      	add	r7, sp, #0
 800dafe:	6078      	str	r0, [r7, #4]
  switch (cinfo->in_color_space) {
 800db00:	687b      	ldr	r3, [r7, #4]
 800db02:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800db06:	2b05      	cmp	r3, #5
 800db08:	d82c      	bhi.n	800db64 <jpeg_default_colorspace+0x6c>
 800db0a:	a201      	add	r2, pc, #4	@ (adr r2, 800db10 <jpeg_default_colorspace+0x18>)
 800db0c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800db10:	0800db5b 	.word	0x0800db5b
 800db14:	0800db29 	.word	0x0800db29
 800db18:	0800db33 	.word	0x0800db33
 800db1c:	0800db3d 	.word	0x0800db3d
 800db20:	0800db47 	.word	0x0800db47
 800db24:	0800db51 	.word	0x0800db51
  case JCS_GRAYSCALE:
    jpeg_set_colorspace(cinfo, JCS_GRAYSCALE);
 800db28:	2101      	movs	r1, #1
 800db2a:	6878      	ldr	r0, [r7, #4]
 800db2c:	f000 f828 	bl	800db80 <jpeg_set_colorspace>
    break;
 800db30:	e022      	b.n	800db78 <jpeg_default_colorspace+0x80>
  case JCS_RGB:
    jpeg_set_colorspace(cinfo, JCS_YCbCr);
 800db32:	2103      	movs	r1, #3
 800db34:	6878      	ldr	r0, [r7, #4]
 800db36:	f000 f823 	bl	800db80 <jpeg_set_colorspace>
    break;
 800db3a:	e01d      	b.n	800db78 <jpeg_default_colorspace+0x80>
  case JCS_YCbCr:
    jpeg_set_colorspace(cinfo, JCS_YCbCr);
 800db3c:	2103      	movs	r1, #3
 800db3e:	6878      	ldr	r0, [r7, #4]
 800db40:	f000 f81e 	bl	800db80 <jpeg_set_colorspace>
    break;
 800db44:	e018      	b.n	800db78 <jpeg_default_colorspace+0x80>
  case JCS_CMYK:
    jpeg_set_colorspace(cinfo, JCS_CMYK); /* By default, no translation */
 800db46:	2104      	movs	r1, #4
 800db48:	6878      	ldr	r0, [r7, #4]
 800db4a:	f000 f819 	bl	800db80 <jpeg_set_colorspace>
    break;
 800db4e:	e013      	b.n	800db78 <jpeg_default_colorspace+0x80>
  case JCS_YCCK:
    jpeg_set_colorspace(cinfo, JCS_YCCK);
 800db50:	2105      	movs	r1, #5
 800db52:	6878      	ldr	r0, [r7, #4]
 800db54:	f000 f814 	bl	800db80 <jpeg_set_colorspace>
    break;
 800db58:	e00e      	b.n	800db78 <jpeg_default_colorspace+0x80>
  case JCS_UNKNOWN:
    jpeg_set_colorspace(cinfo, JCS_UNKNOWN);
 800db5a:	2100      	movs	r1, #0
 800db5c:	6878      	ldr	r0, [r7, #4]
 800db5e:	f000 f80f 	bl	800db80 <jpeg_set_colorspace>
    break;
 800db62:	e009      	b.n	800db78 <jpeg_default_colorspace+0x80>
  default:
    ERREXIT(cinfo, JERR_BAD_IN_COLORSPACE);
 800db64:	687b      	ldr	r3, [r7, #4]
 800db66:	681b      	ldr	r3, [r3, #0]
 800db68:	220a      	movs	r2, #10
 800db6a:	615a      	str	r2, [r3, #20]
 800db6c:	687b      	ldr	r3, [r7, #4]
 800db6e:	681b      	ldr	r3, [r3, #0]
 800db70:	681b      	ldr	r3, [r3, #0]
 800db72:	6878      	ldr	r0, [r7, #4]
 800db74:	4798      	blx	r3
  }
}
 800db76:	bf00      	nop
 800db78:	bf00      	nop
 800db7a:	3708      	adds	r7, #8
 800db7c:	46bd      	mov	sp, r7
 800db7e:	bd80      	pop	{r7, pc}

0800db80 <jpeg_set_colorspace>:
 * Set the JPEG colorspace, and choose colorspace-dependent default values.
 */

GLOBAL(void)
jpeg_set_colorspace (j_compress_ptr cinfo, J_COLOR_SPACE colorspace)
{
 800db80:	b580      	push	{r7, lr}
 800db82:	b084      	sub	sp, #16
 800db84:	af00      	add	r7, sp, #0
 800db86:	6078      	str	r0, [r7, #4]
 800db88:	460b      	mov	r3, r1
 800db8a:	70fb      	strb	r3, [r7, #3]
   compptr->quant_tbl_no = (quant), \
   compptr->dc_tbl_no = (dctbl), \
   compptr->ac_tbl_no = (actbl) )

  /* Safety check to ensure start_compress not called yet. */
  if (cinfo->global_state != CSTATE_START)
 800db8c:	687b      	ldr	r3, [r7, #4]
 800db8e:	695b      	ldr	r3, [r3, #20]
 800db90:	2b64      	cmp	r3, #100	@ 0x64
 800db92:	d00d      	beq.n	800dbb0 <jpeg_set_colorspace+0x30>
    ERREXIT1(cinfo, JERR_BAD_STATE, cinfo->global_state);
 800db94:	687b      	ldr	r3, [r7, #4]
 800db96:	681b      	ldr	r3, [r3, #0]
 800db98:	2215      	movs	r2, #21
 800db9a:	615a      	str	r2, [r3, #20]
 800db9c:	687b      	ldr	r3, [r7, #4]
 800db9e:	681b      	ldr	r3, [r3, #0]
 800dba0:	687a      	ldr	r2, [r7, #4]
 800dba2:	6952      	ldr	r2, [r2, #20]
 800dba4:	619a      	str	r2, [r3, #24]
 800dba6:	687b      	ldr	r3, [r7, #4]
 800dba8:	681b      	ldr	r3, [r3, #0]
 800dbaa:	681b      	ldr	r3, [r3, #0]
 800dbac:	6878      	ldr	r0, [r7, #4]
 800dbae:	4798      	blx	r3

  /* For all colorspaces, we use Q and Huff tables 0 for luminance components,
   * tables 1 for chrominance components.
   */

  cinfo->jpeg_color_space = colorspace;
 800dbb0:	687b      	ldr	r3, [r7, #4]
 800dbb2:	78fa      	ldrb	r2, [r7, #3]
 800dbb4:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  cinfo->write_JFIF_header = FALSE; /* No marker for non-JFIF colorspaces */
 800dbb8:	687b      	ldr	r3, [r7, #4]
 800dbba:	2200      	movs	r2, #0
 800dbbc:	f8c3 20f4 	str.w	r2, [r3, #244]	@ 0xf4
  cinfo->write_Adobe_marker = FALSE; /* write no Adobe marker by default */
 800dbc0:	687b      	ldr	r3, [r7, #4]
 800dbc2:	2200      	movs	r2, #0
 800dbc4:	f8c3 2100 	str.w	r2, [r3, #256]	@ 0x100

  switch (colorspace) {
 800dbc8:	78fb      	ldrb	r3, [r7, #3]
 800dbca:	2b05      	cmp	r3, #5
 800dbcc:	f200 81c3 	bhi.w	800df56 <jpeg_set_colorspace+0x3d6>
 800dbd0:	a201      	add	r2, pc, #4	@ (adr r2, 800dbd8 <jpeg_set_colorspace+0x58>)
 800dbd2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800dbd6:	bf00      	nop
 800dbd8:	0800decf 	.word	0x0800decf
 800dbdc:	0800dbf1 	.word	0x0800dbf1
 800dbe0:	0800dc2b 	.word	0x0800dc2b
 800dbe4:	0800dcbd 	.word	0x0800dcbd
 800dbe8:	0800dd4f 	.word	0x0800dd4f
 800dbec:	0800de0f 	.word	0x0800de0f
  case JCS_GRAYSCALE:
    cinfo->write_JFIF_header = TRUE; /* Write a JFIF marker */
 800dbf0:	687b      	ldr	r3, [r7, #4]
 800dbf2:	2201      	movs	r2, #1
 800dbf4:	f8c3 20f4 	str.w	r2, [r3, #244]	@ 0xf4
    cinfo->num_components = 1;
 800dbf8:	687b      	ldr	r3, [r7, #4]
 800dbfa:	2201      	movs	r2, #1
 800dbfc:	64da      	str	r2, [r3, #76]	@ 0x4c
    /* JFIF specifies component ID 1 */
    SET_COMP(0, 1, 1,1, 0, 0,0);
 800dbfe:	687b      	ldr	r3, [r7, #4]
 800dc00:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800dc02:	60bb      	str	r3, [r7, #8]
 800dc04:	68bb      	ldr	r3, [r7, #8]
 800dc06:	2201      	movs	r2, #1
 800dc08:	601a      	str	r2, [r3, #0]
 800dc0a:	68bb      	ldr	r3, [r7, #8]
 800dc0c:	2201      	movs	r2, #1
 800dc0e:	609a      	str	r2, [r3, #8]
 800dc10:	68bb      	ldr	r3, [r7, #8]
 800dc12:	2201      	movs	r2, #1
 800dc14:	60da      	str	r2, [r3, #12]
 800dc16:	68bb      	ldr	r3, [r7, #8]
 800dc18:	2200      	movs	r2, #0
 800dc1a:	611a      	str	r2, [r3, #16]
 800dc1c:	68bb      	ldr	r3, [r7, #8]
 800dc1e:	2200      	movs	r2, #0
 800dc20:	615a      	str	r2, [r3, #20]
 800dc22:	68bb      	ldr	r3, [r7, #8]
 800dc24:	2200      	movs	r2, #0
 800dc26:	619a      	str	r2, [r3, #24]
    break;
 800dc28:	e19f      	b.n	800df6a <jpeg_set_colorspace+0x3ea>
  case JCS_RGB:
    cinfo->write_Adobe_marker = TRUE; /* write Adobe marker to flag RGB */
 800dc2a:	687b      	ldr	r3, [r7, #4]
 800dc2c:	2201      	movs	r2, #1
 800dc2e:	f8c3 2100 	str.w	r2, [r3, #256]	@ 0x100
    cinfo->num_components = 3;
 800dc32:	687b      	ldr	r3, [r7, #4]
 800dc34:	2203      	movs	r2, #3
 800dc36:	64da      	str	r2, [r3, #76]	@ 0x4c
    SET_COMP(0, 0x52 /* 'R' */, 1,1, 0, 0,0);
 800dc38:	687b      	ldr	r3, [r7, #4]
 800dc3a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800dc3c:	60bb      	str	r3, [r7, #8]
 800dc3e:	68bb      	ldr	r3, [r7, #8]
 800dc40:	2252      	movs	r2, #82	@ 0x52
 800dc42:	601a      	str	r2, [r3, #0]
 800dc44:	68bb      	ldr	r3, [r7, #8]
 800dc46:	2201      	movs	r2, #1
 800dc48:	609a      	str	r2, [r3, #8]
 800dc4a:	68bb      	ldr	r3, [r7, #8]
 800dc4c:	2201      	movs	r2, #1
 800dc4e:	60da      	str	r2, [r3, #12]
 800dc50:	68bb      	ldr	r3, [r7, #8]
 800dc52:	2200      	movs	r2, #0
 800dc54:	611a      	str	r2, [r3, #16]
 800dc56:	68bb      	ldr	r3, [r7, #8]
 800dc58:	2200      	movs	r2, #0
 800dc5a:	615a      	str	r2, [r3, #20]
 800dc5c:	68bb      	ldr	r3, [r7, #8]
 800dc5e:	2200      	movs	r2, #0
 800dc60:	619a      	str	r2, [r3, #24]
    SET_COMP(1, 0x47 /* 'G' */, 1,1, 0, 0,0);
 800dc62:	687b      	ldr	r3, [r7, #4]
 800dc64:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800dc66:	3358      	adds	r3, #88	@ 0x58
 800dc68:	60bb      	str	r3, [r7, #8]
 800dc6a:	68bb      	ldr	r3, [r7, #8]
 800dc6c:	2247      	movs	r2, #71	@ 0x47
 800dc6e:	601a      	str	r2, [r3, #0]
 800dc70:	68bb      	ldr	r3, [r7, #8]
 800dc72:	2201      	movs	r2, #1
 800dc74:	609a      	str	r2, [r3, #8]
 800dc76:	68bb      	ldr	r3, [r7, #8]
 800dc78:	2201      	movs	r2, #1
 800dc7a:	60da      	str	r2, [r3, #12]
 800dc7c:	68bb      	ldr	r3, [r7, #8]
 800dc7e:	2200      	movs	r2, #0
 800dc80:	611a      	str	r2, [r3, #16]
 800dc82:	68bb      	ldr	r3, [r7, #8]
 800dc84:	2200      	movs	r2, #0
 800dc86:	615a      	str	r2, [r3, #20]
 800dc88:	68bb      	ldr	r3, [r7, #8]
 800dc8a:	2200      	movs	r2, #0
 800dc8c:	619a      	str	r2, [r3, #24]
    SET_COMP(2, 0x42 /* 'B' */, 1,1, 0, 0,0);
 800dc8e:	687b      	ldr	r3, [r7, #4]
 800dc90:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800dc92:	33b0      	adds	r3, #176	@ 0xb0
 800dc94:	60bb      	str	r3, [r7, #8]
 800dc96:	68bb      	ldr	r3, [r7, #8]
 800dc98:	2242      	movs	r2, #66	@ 0x42
 800dc9a:	601a      	str	r2, [r3, #0]
 800dc9c:	68bb      	ldr	r3, [r7, #8]
 800dc9e:	2201      	movs	r2, #1
 800dca0:	609a      	str	r2, [r3, #8]
 800dca2:	68bb      	ldr	r3, [r7, #8]
 800dca4:	2201      	movs	r2, #1
 800dca6:	60da      	str	r2, [r3, #12]
 800dca8:	68bb      	ldr	r3, [r7, #8]
 800dcaa:	2200      	movs	r2, #0
 800dcac:	611a      	str	r2, [r3, #16]
 800dcae:	68bb      	ldr	r3, [r7, #8]
 800dcb0:	2200      	movs	r2, #0
 800dcb2:	615a      	str	r2, [r3, #20]
 800dcb4:	68bb      	ldr	r3, [r7, #8]
 800dcb6:	2200      	movs	r2, #0
 800dcb8:	619a      	str	r2, [r3, #24]
    break;
 800dcba:	e156      	b.n	800df6a <jpeg_set_colorspace+0x3ea>
  case JCS_YCbCr:
    cinfo->write_JFIF_header = TRUE; /* Write a JFIF marker */
 800dcbc:	687b      	ldr	r3, [r7, #4]
 800dcbe:	2201      	movs	r2, #1
 800dcc0:	f8c3 20f4 	str.w	r2, [r3, #244]	@ 0xf4
    cinfo->num_components = 3;
 800dcc4:	687b      	ldr	r3, [r7, #4]
 800dcc6:	2203      	movs	r2, #3
 800dcc8:	64da      	str	r2, [r3, #76]	@ 0x4c
    /* JFIF specifies component IDs 1,2,3 */
    /* We default to 2x2 subsamples of chrominance */
    SET_COMP(0, 1, 2,2, 0, 0,0);
 800dcca:	687b      	ldr	r3, [r7, #4]
 800dccc:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800dcce:	60bb      	str	r3, [r7, #8]
 800dcd0:	68bb      	ldr	r3, [r7, #8]
 800dcd2:	2201      	movs	r2, #1
 800dcd4:	601a      	str	r2, [r3, #0]
 800dcd6:	68bb      	ldr	r3, [r7, #8]
 800dcd8:	2202      	movs	r2, #2
 800dcda:	609a      	str	r2, [r3, #8]
 800dcdc:	68bb      	ldr	r3, [r7, #8]
 800dcde:	2202      	movs	r2, #2
 800dce0:	60da      	str	r2, [r3, #12]
 800dce2:	68bb      	ldr	r3, [r7, #8]
 800dce4:	2200      	movs	r2, #0
 800dce6:	611a      	str	r2, [r3, #16]
 800dce8:	68bb      	ldr	r3, [r7, #8]
 800dcea:	2200      	movs	r2, #0
 800dcec:	615a      	str	r2, [r3, #20]
 800dcee:	68bb      	ldr	r3, [r7, #8]
 800dcf0:	2200      	movs	r2, #0
 800dcf2:	619a      	str	r2, [r3, #24]
    SET_COMP(1, 2, 1,1, 1, 1,1);
 800dcf4:	687b      	ldr	r3, [r7, #4]
 800dcf6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800dcf8:	3358      	adds	r3, #88	@ 0x58
 800dcfa:	60bb      	str	r3, [r7, #8]
 800dcfc:	68bb      	ldr	r3, [r7, #8]
 800dcfe:	2202      	movs	r2, #2
 800dd00:	601a      	str	r2, [r3, #0]
 800dd02:	68bb      	ldr	r3, [r7, #8]
 800dd04:	2201      	movs	r2, #1
 800dd06:	609a      	str	r2, [r3, #8]
 800dd08:	68bb      	ldr	r3, [r7, #8]
 800dd0a:	2201      	movs	r2, #1
 800dd0c:	60da      	str	r2, [r3, #12]
 800dd0e:	68bb      	ldr	r3, [r7, #8]
 800dd10:	2201      	movs	r2, #1
 800dd12:	611a      	str	r2, [r3, #16]
 800dd14:	68bb      	ldr	r3, [r7, #8]
 800dd16:	2201      	movs	r2, #1
 800dd18:	615a      	str	r2, [r3, #20]
 800dd1a:	68bb      	ldr	r3, [r7, #8]
 800dd1c:	2201      	movs	r2, #1
 800dd1e:	619a      	str	r2, [r3, #24]
    SET_COMP(2, 3, 1,1, 1, 1,1);
 800dd20:	687b      	ldr	r3, [r7, #4]
 800dd22:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800dd24:	33b0      	adds	r3, #176	@ 0xb0
 800dd26:	60bb      	str	r3, [r7, #8]
 800dd28:	68bb      	ldr	r3, [r7, #8]
 800dd2a:	2203      	movs	r2, #3
 800dd2c:	601a      	str	r2, [r3, #0]
 800dd2e:	68bb      	ldr	r3, [r7, #8]
 800dd30:	2201      	movs	r2, #1
 800dd32:	609a      	str	r2, [r3, #8]
 800dd34:	68bb      	ldr	r3, [r7, #8]
 800dd36:	2201      	movs	r2, #1
 800dd38:	60da      	str	r2, [r3, #12]
 800dd3a:	68bb      	ldr	r3, [r7, #8]
 800dd3c:	2201      	movs	r2, #1
 800dd3e:	611a      	str	r2, [r3, #16]
 800dd40:	68bb      	ldr	r3, [r7, #8]
 800dd42:	2201      	movs	r2, #1
 800dd44:	615a      	str	r2, [r3, #20]
 800dd46:	68bb      	ldr	r3, [r7, #8]
 800dd48:	2201      	movs	r2, #1
 800dd4a:	619a      	str	r2, [r3, #24]
    break;
 800dd4c:	e10d      	b.n	800df6a <jpeg_set_colorspace+0x3ea>
  case JCS_CMYK:
    cinfo->write_Adobe_marker = TRUE; /* write Adobe marker to flag CMYK */
 800dd4e:	687b      	ldr	r3, [r7, #4]
 800dd50:	2201      	movs	r2, #1
 800dd52:	f8c3 2100 	str.w	r2, [r3, #256]	@ 0x100
    cinfo->num_components = 4;
 800dd56:	687b      	ldr	r3, [r7, #4]
 800dd58:	2204      	movs	r2, #4
 800dd5a:	64da      	str	r2, [r3, #76]	@ 0x4c
    SET_COMP(0, 0x43 /* 'C' */, 1,1, 0, 0,0);
 800dd5c:	687b      	ldr	r3, [r7, #4]
 800dd5e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800dd60:	60bb      	str	r3, [r7, #8]
 800dd62:	68bb      	ldr	r3, [r7, #8]
 800dd64:	2243      	movs	r2, #67	@ 0x43
 800dd66:	601a      	str	r2, [r3, #0]
 800dd68:	68bb      	ldr	r3, [r7, #8]
 800dd6a:	2201      	movs	r2, #1
 800dd6c:	609a      	str	r2, [r3, #8]
 800dd6e:	68bb      	ldr	r3, [r7, #8]
 800dd70:	2201      	movs	r2, #1
 800dd72:	60da      	str	r2, [r3, #12]
 800dd74:	68bb      	ldr	r3, [r7, #8]
 800dd76:	2200      	movs	r2, #0
 800dd78:	611a      	str	r2, [r3, #16]
 800dd7a:	68bb      	ldr	r3, [r7, #8]
 800dd7c:	2200      	movs	r2, #0
 800dd7e:	615a      	str	r2, [r3, #20]
 800dd80:	68bb      	ldr	r3, [r7, #8]
 800dd82:	2200      	movs	r2, #0
 800dd84:	619a      	str	r2, [r3, #24]
    SET_COMP(1, 0x4D /* 'M' */, 1,1, 0, 0,0);
 800dd86:	687b      	ldr	r3, [r7, #4]
 800dd88:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800dd8a:	3358      	adds	r3, #88	@ 0x58
 800dd8c:	60bb      	str	r3, [r7, #8]
 800dd8e:	68bb      	ldr	r3, [r7, #8]
 800dd90:	224d      	movs	r2, #77	@ 0x4d
 800dd92:	601a      	str	r2, [r3, #0]
 800dd94:	68bb      	ldr	r3, [r7, #8]
 800dd96:	2201      	movs	r2, #1
 800dd98:	609a      	str	r2, [r3, #8]
 800dd9a:	68bb      	ldr	r3, [r7, #8]
 800dd9c:	2201      	movs	r2, #1
 800dd9e:	60da      	str	r2, [r3, #12]
 800dda0:	68bb      	ldr	r3, [r7, #8]
 800dda2:	2200      	movs	r2, #0
 800dda4:	611a      	str	r2, [r3, #16]
 800dda6:	68bb      	ldr	r3, [r7, #8]
 800dda8:	2200      	movs	r2, #0
 800ddaa:	615a      	str	r2, [r3, #20]
 800ddac:	68bb      	ldr	r3, [r7, #8]
 800ddae:	2200      	movs	r2, #0
 800ddb0:	619a      	str	r2, [r3, #24]
    SET_COMP(2, 0x59 /* 'Y' */, 1,1, 0, 0,0);
 800ddb2:	687b      	ldr	r3, [r7, #4]
 800ddb4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800ddb6:	33b0      	adds	r3, #176	@ 0xb0
 800ddb8:	60bb      	str	r3, [r7, #8]
 800ddba:	68bb      	ldr	r3, [r7, #8]
 800ddbc:	2259      	movs	r2, #89	@ 0x59
 800ddbe:	601a      	str	r2, [r3, #0]
 800ddc0:	68bb      	ldr	r3, [r7, #8]
 800ddc2:	2201      	movs	r2, #1
 800ddc4:	609a      	str	r2, [r3, #8]
 800ddc6:	68bb      	ldr	r3, [r7, #8]
 800ddc8:	2201      	movs	r2, #1
 800ddca:	60da      	str	r2, [r3, #12]
 800ddcc:	68bb      	ldr	r3, [r7, #8]
 800ddce:	2200      	movs	r2, #0
 800ddd0:	611a      	str	r2, [r3, #16]
 800ddd2:	68bb      	ldr	r3, [r7, #8]
 800ddd4:	2200      	movs	r2, #0
 800ddd6:	615a      	str	r2, [r3, #20]
 800ddd8:	68bb      	ldr	r3, [r7, #8]
 800ddda:	2200      	movs	r2, #0
 800dddc:	619a      	str	r2, [r3, #24]
    SET_COMP(3, 0x4B /* 'K' */, 1,1, 0, 0,0);
 800ddde:	687b      	ldr	r3, [r7, #4]
 800dde0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800dde2:	f503 7384 	add.w	r3, r3, #264	@ 0x108
 800dde6:	60bb      	str	r3, [r7, #8]
 800dde8:	68bb      	ldr	r3, [r7, #8]
 800ddea:	224b      	movs	r2, #75	@ 0x4b
 800ddec:	601a      	str	r2, [r3, #0]
 800ddee:	68bb      	ldr	r3, [r7, #8]
 800ddf0:	2201      	movs	r2, #1
 800ddf2:	609a      	str	r2, [r3, #8]
 800ddf4:	68bb      	ldr	r3, [r7, #8]
 800ddf6:	2201      	movs	r2, #1
 800ddf8:	60da      	str	r2, [r3, #12]
 800ddfa:	68bb      	ldr	r3, [r7, #8]
 800ddfc:	2200      	movs	r2, #0
 800ddfe:	611a      	str	r2, [r3, #16]
 800de00:	68bb      	ldr	r3, [r7, #8]
 800de02:	2200      	movs	r2, #0
 800de04:	615a      	str	r2, [r3, #20]
 800de06:	68bb      	ldr	r3, [r7, #8]
 800de08:	2200      	movs	r2, #0
 800de0a:	619a      	str	r2, [r3, #24]
    break;
 800de0c:	e0ad      	b.n	800df6a <jpeg_set_colorspace+0x3ea>
  case JCS_YCCK:
    cinfo->write_Adobe_marker = TRUE; /* write Adobe marker to flag YCCK */
 800de0e:	687b      	ldr	r3, [r7, #4]
 800de10:	2201      	movs	r2, #1
 800de12:	f8c3 2100 	str.w	r2, [r3, #256]	@ 0x100
    cinfo->num_components = 4;
 800de16:	687b      	ldr	r3, [r7, #4]
 800de18:	2204      	movs	r2, #4
 800de1a:	64da      	str	r2, [r3, #76]	@ 0x4c
    SET_COMP(0, 1, 2,2, 0, 0,0);
 800de1c:	687b      	ldr	r3, [r7, #4]
 800de1e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800de20:	60bb      	str	r3, [r7, #8]
 800de22:	68bb      	ldr	r3, [r7, #8]
 800de24:	2201      	movs	r2, #1
 800de26:	601a      	str	r2, [r3, #0]
 800de28:	68bb      	ldr	r3, [r7, #8]
 800de2a:	2202      	movs	r2, #2
 800de2c:	609a      	str	r2, [r3, #8]
 800de2e:	68bb      	ldr	r3, [r7, #8]
 800de30:	2202      	movs	r2, #2
 800de32:	60da      	str	r2, [r3, #12]
 800de34:	68bb      	ldr	r3, [r7, #8]
 800de36:	2200      	movs	r2, #0
 800de38:	611a      	str	r2, [r3, #16]
 800de3a:	68bb      	ldr	r3, [r7, #8]
 800de3c:	2200      	movs	r2, #0
 800de3e:	615a      	str	r2, [r3, #20]
 800de40:	68bb      	ldr	r3, [r7, #8]
 800de42:	2200      	movs	r2, #0
 800de44:	619a      	str	r2, [r3, #24]
    SET_COMP(1, 2, 1,1, 1, 1,1);
 800de46:	687b      	ldr	r3, [r7, #4]
 800de48:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800de4a:	3358      	adds	r3, #88	@ 0x58
 800de4c:	60bb      	str	r3, [r7, #8]
 800de4e:	68bb      	ldr	r3, [r7, #8]
 800de50:	2202      	movs	r2, #2
 800de52:	601a      	str	r2, [r3, #0]
 800de54:	68bb      	ldr	r3, [r7, #8]
 800de56:	2201      	movs	r2, #1
 800de58:	609a      	str	r2, [r3, #8]
 800de5a:	68bb      	ldr	r3, [r7, #8]
 800de5c:	2201      	movs	r2, #1
 800de5e:	60da      	str	r2, [r3, #12]
 800de60:	68bb      	ldr	r3, [r7, #8]
 800de62:	2201      	movs	r2, #1
 800de64:	611a      	str	r2, [r3, #16]
 800de66:	68bb      	ldr	r3, [r7, #8]
 800de68:	2201      	movs	r2, #1
 800de6a:	615a      	str	r2, [r3, #20]
 800de6c:	68bb      	ldr	r3, [r7, #8]
 800de6e:	2201      	movs	r2, #1
 800de70:	619a      	str	r2, [r3, #24]
    SET_COMP(2, 3, 1,1, 1, 1,1);
 800de72:	687b      	ldr	r3, [r7, #4]
 800de74:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800de76:	33b0      	adds	r3, #176	@ 0xb0
 800de78:	60bb      	str	r3, [r7, #8]
 800de7a:	68bb      	ldr	r3, [r7, #8]
 800de7c:	2203      	movs	r2, #3
 800de7e:	601a      	str	r2, [r3, #0]
 800de80:	68bb      	ldr	r3, [r7, #8]
 800de82:	2201      	movs	r2, #1
 800de84:	609a      	str	r2, [r3, #8]
 800de86:	68bb      	ldr	r3, [r7, #8]
 800de88:	2201      	movs	r2, #1
 800de8a:	60da      	str	r2, [r3, #12]
 800de8c:	68bb      	ldr	r3, [r7, #8]
 800de8e:	2201      	movs	r2, #1
 800de90:	611a      	str	r2, [r3, #16]
 800de92:	68bb      	ldr	r3, [r7, #8]
 800de94:	2201      	movs	r2, #1
 800de96:	615a      	str	r2, [r3, #20]
 800de98:	68bb      	ldr	r3, [r7, #8]
 800de9a:	2201      	movs	r2, #1
 800de9c:	619a      	str	r2, [r3, #24]
    SET_COMP(3, 4, 2,2, 0, 0,0);
 800de9e:	687b      	ldr	r3, [r7, #4]
 800dea0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800dea2:	f503 7384 	add.w	r3, r3, #264	@ 0x108
 800dea6:	60bb      	str	r3, [r7, #8]
 800dea8:	68bb      	ldr	r3, [r7, #8]
 800deaa:	2204      	movs	r2, #4
 800deac:	601a      	str	r2, [r3, #0]
 800deae:	68bb      	ldr	r3, [r7, #8]
 800deb0:	2202      	movs	r2, #2
 800deb2:	609a      	str	r2, [r3, #8]
 800deb4:	68bb      	ldr	r3, [r7, #8]
 800deb6:	2202      	movs	r2, #2
 800deb8:	60da      	str	r2, [r3, #12]
 800deba:	68bb      	ldr	r3, [r7, #8]
 800debc:	2200      	movs	r2, #0
 800debe:	611a      	str	r2, [r3, #16]
 800dec0:	68bb      	ldr	r3, [r7, #8]
 800dec2:	2200      	movs	r2, #0
 800dec4:	615a      	str	r2, [r3, #20]
 800dec6:	68bb      	ldr	r3, [r7, #8]
 800dec8:	2200      	movs	r2, #0
 800deca:	619a      	str	r2, [r3, #24]
    break;
 800decc:	e04d      	b.n	800df6a <jpeg_set_colorspace+0x3ea>
  case JCS_UNKNOWN:
    cinfo->num_components = cinfo->input_components;
 800dece:	687b      	ldr	r3, [r7, #4]
 800ded0:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800ded2:	687b      	ldr	r3, [r7, #4]
 800ded4:	64da      	str	r2, [r3, #76]	@ 0x4c
    if (cinfo->num_components < 1 || cinfo->num_components > MAX_COMPONENTS)
 800ded6:	687b      	ldr	r3, [r7, #4]
 800ded8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800deda:	2b00      	cmp	r3, #0
 800dedc:	dd03      	ble.n	800dee6 <jpeg_set_colorspace+0x366>
 800dede:	687b      	ldr	r3, [r7, #4]
 800dee0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800dee2:	2b0a      	cmp	r3, #10
 800dee4:	dd11      	ble.n	800df0a <jpeg_set_colorspace+0x38a>
      ERREXIT2(cinfo, JERR_COMPONENT_COUNT, cinfo->num_components,
 800dee6:	687b      	ldr	r3, [r7, #4]
 800dee8:	681b      	ldr	r3, [r3, #0]
 800deea:	221b      	movs	r2, #27
 800deec:	615a      	str	r2, [r3, #20]
 800deee:	687b      	ldr	r3, [r7, #4]
 800def0:	681b      	ldr	r3, [r3, #0]
 800def2:	687a      	ldr	r2, [r7, #4]
 800def4:	6cd2      	ldr	r2, [r2, #76]	@ 0x4c
 800def6:	619a      	str	r2, [r3, #24]
 800def8:	687b      	ldr	r3, [r7, #4]
 800defa:	681b      	ldr	r3, [r3, #0]
 800defc:	220a      	movs	r2, #10
 800defe:	61da      	str	r2, [r3, #28]
 800df00:	687b      	ldr	r3, [r7, #4]
 800df02:	681b      	ldr	r3, [r3, #0]
 800df04:	681b      	ldr	r3, [r3, #0]
 800df06:	6878      	ldr	r0, [r7, #4]
 800df08:	4798      	blx	r3
	       MAX_COMPONENTS);
    for (ci = 0; ci < cinfo->num_components; ci++) {
 800df0a:	2300      	movs	r3, #0
 800df0c:	60fb      	str	r3, [r7, #12]
 800df0e:	e01c      	b.n	800df4a <jpeg_set_colorspace+0x3ca>
      SET_COMP(ci, ci, 1,1, 0, 0,0);
 800df10:	687b      	ldr	r3, [r7, #4]
 800df12:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 800df14:	68fb      	ldr	r3, [r7, #12]
 800df16:	2158      	movs	r1, #88	@ 0x58
 800df18:	fb01 f303 	mul.w	r3, r1, r3
 800df1c:	4413      	add	r3, r2
 800df1e:	60bb      	str	r3, [r7, #8]
 800df20:	68bb      	ldr	r3, [r7, #8]
 800df22:	68fa      	ldr	r2, [r7, #12]
 800df24:	601a      	str	r2, [r3, #0]
 800df26:	68bb      	ldr	r3, [r7, #8]
 800df28:	2201      	movs	r2, #1
 800df2a:	609a      	str	r2, [r3, #8]
 800df2c:	68bb      	ldr	r3, [r7, #8]
 800df2e:	2201      	movs	r2, #1
 800df30:	60da      	str	r2, [r3, #12]
 800df32:	68bb      	ldr	r3, [r7, #8]
 800df34:	2200      	movs	r2, #0
 800df36:	611a      	str	r2, [r3, #16]
 800df38:	68bb      	ldr	r3, [r7, #8]
 800df3a:	2200      	movs	r2, #0
 800df3c:	615a      	str	r2, [r3, #20]
 800df3e:	68bb      	ldr	r3, [r7, #8]
 800df40:	2200      	movs	r2, #0
 800df42:	619a      	str	r2, [r3, #24]
    for (ci = 0; ci < cinfo->num_components; ci++) {
 800df44:	68fb      	ldr	r3, [r7, #12]
 800df46:	3301      	adds	r3, #1
 800df48:	60fb      	str	r3, [r7, #12]
 800df4a:	687b      	ldr	r3, [r7, #4]
 800df4c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800df4e:	68fa      	ldr	r2, [r7, #12]
 800df50:	429a      	cmp	r2, r3
 800df52:	dbdd      	blt.n	800df10 <jpeg_set_colorspace+0x390>
    }
    break;
 800df54:	e009      	b.n	800df6a <jpeg_set_colorspace+0x3ea>
  default:
    ERREXIT(cinfo, JERR_BAD_J_COLORSPACE);
 800df56:	687b      	ldr	r3, [r7, #4]
 800df58:	681b      	ldr	r3, [r3, #0]
 800df5a:	220b      	movs	r2, #11
 800df5c:	615a      	str	r2, [r3, #20]
 800df5e:	687b      	ldr	r3, [r7, #4]
 800df60:	681b      	ldr	r3, [r3, #0]
 800df62:	681b      	ldr	r3, [r3, #0]
 800df64:	6878      	ldr	r0, [r7, #4]
 800df66:	4798      	blx	r3
  }
}
 800df68:	bf00      	nop
 800df6a:	bf00      	nop
 800df6c:	3710      	adds	r7, #16
 800df6e:	46bd      	mov	sp, r7
 800df70:	bd80      	pop	{r7, pc}
 800df72:	bf00      	nop

0800df74 <start_pass_prep>:
 * Initialize for a processing pass.
 */

METHODDEF(void)
start_pass_prep (j_compress_ptr cinfo, J_BUF_MODE pass_mode)
{
 800df74:	b580      	push	{r7, lr}
 800df76:	b084      	sub	sp, #16
 800df78:	af00      	add	r7, sp, #0
 800df7a:	6078      	str	r0, [r7, #4]
 800df7c:	460b      	mov	r3, r1
 800df7e:	70fb      	strb	r3, [r7, #3]
  my_prep_ptr prep = (my_prep_ptr) cinfo->prep;
 800df80:	687b      	ldr	r3, [r7, #4]
 800df82:	f8d3 318c 	ldr.w	r3, [r3, #396]	@ 0x18c
 800df86:	60fb      	str	r3, [r7, #12]

  if (pass_mode != JBUF_PASS_THRU)
 800df88:	78fb      	ldrb	r3, [r7, #3]
 800df8a:	2b00      	cmp	r3, #0
 800df8c:	d008      	beq.n	800dfa0 <start_pass_prep+0x2c>
    ERREXIT(cinfo, JERR_BAD_BUFFER_MODE);
 800df8e:	687b      	ldr	r3, [r7, #4]
 800df90:	681b      	ldr	r3, [r3, #0]
 800df92:	2203      	movs	r2, #3
 800df94:	615a      	str	r2, [r3, #20]
 800df96:	687b      	ldr	r3, [r7, #4]
 800df98:	681b      	ldr	r3, [r3, #0]
 800df9a:	681b      	ldr	r3, [r3, #0]
 800df9c:	6878      	ldr	r0, [r7, #4]
 800df9e:	4798      	blx	r3

  /* Initialize total-height counter for detecting bottom of image */
  prep->rows_to_go = cinfo->image_height;
 800dfa0:	687b      	ldr	r3, [r7, #4]
 800dfa2:	6a1a      	ldr	r2, [r3, #32]
 800dfa4:	68fb      	ldr	r3, [r7, #12]
 800dfa6:	631a      	str	r2, [r3, #48]	@ 0x30
  /* Mark the conversion buffer empty */
  prep->next_buf_row = 0;
 800dfa8:	68fb      	ldr	r3, [r7, #12]
 800dfaa:	2200      	movs	r2, #0
 800dfac:	635a      	str	r2, [r3, #52]	@ 0x34
#ifdef CONTEXT_ROWS_SUPPORTED
  /* Preset additional state variables for context mode.
   * These aren't used in non-context mode, so we needn't test which mode.
   */
  prep->this_row_group = 0;
 800dfae:	68fb      	ldr	r3, [r7, #12]
 800dfb0:	2200      	movs	r2, #0
 800dfb2:	639a      	str	r2, [r3, #56]	@ 0x38
  /* Set next_buf_stop to stop after two row groups have been read in. */
  prep->next_buf_stop = 2 * cinfo->max_v_samp_factor;
 800dfb4:	687b      	ldr	r3, [r7, #4]
 800dfb6:	f8d3 3110 	ldr.w	r3, [r3, #272]	@ 0x110
 800dfba:	005a      	lsls	r2, r3, #1
 800dfbc:	68fb      	ldr	r3, [r7, #12]
 800dfbe:	63da      	str	r2, [r3, #60]	@ 0x3c
#endif
}
 800dfc0:	bf00      	nop
 800dfc2:	3710      	adds	r7, #16
 800dfc4:	46bd      	mov	sp, r7
 800dfc6:	bd80      	pop	{r7, pc}

0800dfc8 <expand_bottom_edge>:
 */

LOCAL(void)
expand_bottom_edge (JSAMPARRAY image_data, JDIMENSION num_cols,
		    int input_rows, int output_rows)
{
 800dfc8:	b590      	push	{r4, r7, lr}
 800dfca:	b087      	sub	sp, #28
 800dfcc:	af02      	add	r7, sp, #8
 800dfce:	60f8      	str	r0, [r7, #12]
 800dfd0:	60b9      	str	r1, [r7, #8]
 800dfd2:	607a      	str	r2, [r7, #4]
 800dfd4:	603b      	str	r3, [r7, #0]
  register int row;

  for (row = input_rows; row < output_rows; row++) {
 800dfd6:	687c      	ldr	r4, [r7, #4]
 800dfd8:	e00b      	b.n	800dff2 <expand_bottom_edge+0x2a>
    jcopy_sample_rows(image_data, input_rows-1, image_data, row,
 800dfda:	687b      	ldr	r3, [r7, #4]
 800dfdc:	1e59      	subs	r1, r3, #1
 800dfde:	68bb      	ldr	r3, [r7, #8]
 800dfe0:	9301      	str	r3, [sp, #4]
 800dfe2:	2301      	movs	r3, #1
 800dfe4:	9300      	str	r3, [sp, #0]
 800dfe6:	4623      	mov	r3, r4
 800dfe8:	68fa      	ldr	r2, [r7, #12]
 800dfea:	68f8      	ldr	r0, [r7, #12]
 800dfec:	f00b fbfa 	bl	80197e4 <jcopy_sample_rows>
  for (row = input_rows; row < output_rows; row++) {
 800dff0:	3401      	adds	r4, #1
 800dff2:	683b      	ldr	r3, [r7, #0]
 800dff4:	429c      	cmp	r4, r3
 800dff6:	dbf0      	blt.n	800dfda <expand_bottom_edge+0x12>
		      1, num_cols);
  }
}
 800dff8:	bf00      	nop
 800dffa:	bf00      	nop
 800dffc:	3714      	adds	r7, #20
 800dffe:	46bd      	mov	sp, r7
 800e000:	bd90      	pop	{r4, r7, pc}

0800e002 <pre_process_data>:
pre_process_data (j_compress_ptr cinfo,
		  JSAMPARRAY input_buf, JDIMENSION *in_row_ctr,
		  JDIMENSION in_rows_avail,
		  JSAMPIMAGE output_buf, JDIMENSION *out_row_group_ctr,
		  JDIMENSION out_row_groups_avail)
{
 800e002:	b590      	push	{r4, r7, lr}
 800e004:	b08d      	sub	sp, #52	@ 0x34
 800e006:	af02      	add	r7, sp, #8
 800e008:	60f8      	str	r0, [r7, #12]
 800e00a:	60b9      	str	r1, [r7, #8]
 800e00c:	607a      	str	r2, [r7, #4]
 800e00e:	603b      	str	r3, [r7, #0]
  my_prep_ptr prep = (my_prep_ptr) cinfo->prep;
 800e010:	68fb      	ldr	r3, [r7, #12]
 800e012:	f8d3 318c 	ldr.w	r3, [r3, #396]	@ 0x18c
 800e016:	61fb      	str	r3, [r7, #28]
  int numrows, ci;
  JDIMENSION inrows;
  jpeg_component_info * compptr;

  while (*in_row_ctr < in_rows_avail &&
 800e018:	e0c0      	b.n	800e19c <pre_process_data+0x19a>
	 *out_row_group_ctr < out_row_groups_avail) {
    /* Do color conversion to fill the conversion buffer. */
    inrows = in_rows_avail - *in_row_ctr;
 800e01a:	687b      	ldr	r3, [r7, #4]
 800e01c:	681b      	ldr	r3, [r3, #0]
 800e01e:	683a      	ldr	r2, [r7, #0]
 800e020:	1ad3      	subs	r3, r2, r3
 800e022:	61bb      	str	r3, [r7, #24]
    numrows = cinfo->max_v_samp_factor - prep->next_buf_row;
 800e024:	68fb      	ldr	r3, [r7, #12]
 800e026:	f8d3 2110 	ldr.w	r2, [r3, #272]	@ 0x110
 800e02a:	69fb      	ldr	r3, [r7, #28]
 800e02c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800e02e:	1ad3      	subs	r3, r2, r3
 800e030:	617b      	str	r3, [r7, #20]
    numrows = (int) MIN((JDIMENSION) numrows, inrows);
 800e032:	697a      	ldr	r2, [r7, #20]
 800e034:	69bb      	ldr	r3, [r7, #24]
 800e036:	4293      	cmp	r3, r2
 800e038:	bf28      	it	cs
 800e03a:	4613      	movcs	r3, r2
 800e03c:	617b      	str	r3, [r7, #20]
    (*cinfo->cconvert->color_convert) (cinfo, input_buf + *in_row_ctr,
 800e03e:	68fb      	ldr	r3, [r7, #12]
 800e040:	f8d3 3198 	ldr.w	r3, [r3, #408]	@ 0x198
 800e044:	685c      	ldr	r4, [r3, #4]
 800e046:	687b      	ldr	r3, [r7, #4]
 800e048:	681b      	ldr	r3, [r3, #0]
 800e04a:	009b      	lsls	r3, r3, #2
 800e04c:	68ba      	ldr	r2, [r7, #8]
 800e04e:	18d1      	adds	r1, r2, r3
				       prep->color_buf,
 800e050:	69fb      	ldr	r3, [r7, #28]
 800e052:	f103 0208 	add.w	r2, r3, #8
				       (JDIMENSION) prep->next_buf_row,
 800e056:	69fb      	ldr	r3, [r7, #28]
 800e058:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
    (*cinfo->cconvert->color_convert) (cinfo, input_buf + *in_row_ctr,
 800e05a:	4618      	mov	r0, r3
 800e05c:	697b      	ldr	r3, [r7, #20]
 800e05e:	9300      	str	r3, [sp, #0]
 800e060:	4603      	mov	r3, r0
 800e062:	68f8      	ldr	r0, [r7, #12]
 800e064:	47a0      	blx	r4
				       numrows);
    *in_row_ctr += numrows;
 800e066:	687b      	ldr	r3, [r7, #4]
 800e068:	681a      	ldr	r2, [r3, #0]
 800e06a:	697b      	ldr	r3, [r7, #20]
 800e06c:	441a      	add	r2, r3
 800e06e:	687b      	ldr	r3, [r7, #4]
 800e070:	601a      	str	r2, [r3, #0]
    prep->next_buf_row += numrows;
 800e072:	69fb      	ldr	r3, [r7, #28]
 800e074:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800e076:	697b      	ldr	r3, [r7, #20]
 800e078:	441a      	add	r2, r3
 800e07a:	69fb      	ldr	r3, [r7, #28]
 800e07c:	635a      	str	r2, [r3, #52]	@ 0x34
    prep->rows_to_go -= numrows;
 800e07e:	69fb      	ldr	r3, [r7, #28]
 800e080:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800e082:	697b      	ldr	r3, [r7, #20]
 800e084:	1ad2      	subs	r2, r2, r3
 800e086:	69fb      	ldr	r3, [r7, #28]
 800e088:	631a      	str	r2, [r3, #48]	@ 0x30
    /* If at bottom of image, pad to fill the conversion buffer. */
    if (prep->rows_to_go == 0 &&
 800e08a:	69fb      	ldr	r3, [r7, #28]
 800e08c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800e08e:	2b00      	cmp	r3, #0
 800e090:	d124      	bne.n	800e0dc <pre_process_data+0xda>
	prep->next_buf_row < cinfo->max_v_samp_factor) {
 800e092:	69fb      	ldr	r3, [r7, #28]
 800e094:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800e096:	68fb      	ldr	r3, [r7, #12]
 800e098:	f8d3 3110 	ldr.w	r3, [r3, #272]	@ 0x110
    if (prep->rows_to_go == 0 &&
 800e09c:	429a      	cmp	r2, r3
 800e09e:	da1d      	bge.n	800e0dc <pre_process_data+0xda>
      for (ci = 0; ci < cinfo->num_components; ci++) {
 800e0a0:	2300      	movs	r3, #0
 800e0a2:	627b      	str	r3, [r7, #36]	@ 0x24
 800e0a4:	e010      	b.n	800e0c8 <pre_process_data+0xc6>
	expand_bottom_edge(prep->color_buf[ci], cinfo->image_width,
 800e0a6:	69fb      	ldr	r3, [r7, #28]
 800e0a8:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800e0aa:	3202      	adds	r2, #2
 800e0ac:	f853 0022 	ldr.w	r0, [r3, r2, lsl #2]
 800e0b0:	68fb      	ldr	r3, [r7, #12]
 800e0b2:	69d9      	ldr	r1, [r3, #28]
 800e0b4:	69fb      	ldr	r3, [r7, #28]
 800e0b6:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800e0b8:	68fb      	ldr	r3, [r7, #12]
 800e0ba:	f8d3 3110 	ldr.w	r3, [r3, #272]	@ 0x110
 800e0be:	f7ff ff83 	bl	800dfc8 <expand_bottom_edge>
      for (ci = 0; ci < cinfo->num_components; ci++) {
 800e0c2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800e0c4:	3301      	adds	r3, #1
 800e0c6:	627b      	str	r3, [r7, #36]	@ 0x24
 800e0c8:	68fb      	ldr	r3, [r7, #12]
 800e0ca:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800e0cc:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800e0ce:	429a      	cmp	r2, r3
 800e0d0:	dbe9      	blt.n	800e0a6 <pre_process_data+0xa4>
			   prep->next_buf_row, cinfo->max_v_samp_factor);
      }
      prep->next_buf_row = cinfo->max_v_samp_factor;
 800e0d2:	68fb      	ldr	r3, [r7, #12]
 800e0d4:	f8d3 2110 	ldr.w	r2, [r3, #272]	@ 0x110
 800e0d8:	69fb      	ldr	r3, [r7, #28]
 800e0da:	635a      	str	r2, [r3, #52]	@ 0x34
    }
    /* If we've filled the conversion buffer, empty it. */
    if (prep->next_buf_row == cinfo->max_v_samp_factor) {
 800e0dc:	69fb      	ldr	r3, [r7, #28]
 800e0de:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800e0e0:	68fb      	ldr	r3, [r7, #12]
 800e0e2:	f8d3 3110 	ldr.w	r3, [r3, #272]	@ 0x110
 800e0e6:	429a      	cmp	r2, r3
 800e0e8:	d115      	bne.n	800e116 <pre_process_data+0x114>
      (*cinfo->downsample->downsample) (cinfo,
 800e0ea:	68fb      	ldr	r3, [r7, #12]
 800e0ec:	f8d3 319c 	ldr.w	r3, [r3, #412]	@ 0x19c
 800e0f0:	685c      	ldr	r4, [r3, #4]
					prep->color_buf, (JDIMENSION) 0,
 800e0f2:	69fb      	ldr	r3, [r7, #28]
 800e0f4:	f103 0108 	add.w	r1, r3, #8
      (*cinfo->downsample->downsample) (cinfo,
 800e0f8:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800e0fa:	681b      	ldr	r3, [r3, #0]
 800e0fc:	9300      	str	r3, [sp, #0]
 800e0fe:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800e100:	2200      	movs	r2, #0
 800e102:	68f8      	ldr	r0, [r7, #12]
 800e104:	47a0      	blx	r4
					output_buf, *out_row_group_ctr);
      prep->next_buf_row = 0;
 800e106:	69fb      	ldr	r3, [r7, #28]
 800e108:	2200      	movs	r2, #0
 800e10a:	635a      	str	r2, [r3, #52]	@ 0x34
      (*out_row_group_ctr)++;
 800e10c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800e10e:	681b      	ldr	r3, [r3, #0]
 800e110:	1c5a      	adds	r2, r3, #1
 800e112:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800e114:	601a      	str	r2, [r3, #0]
    }
    /* If at bottom of image, pad the output to a full iMCU height.
     * Note we assume the caller is providing a one-iMCU-height output buffer!
     */
    if (prep->rows_to_go == 0 &&
 800e116:	69fb      	ldr	r3, [r7, #28]
 800e118:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800e11a:	2b00      	cmp	r3, #0
 800e11c:	d13e      	bne.n	800e19c <pre_process_data+0x19a>
	*out_row_group_ctr < out_row_groups_avail) {
 800e11e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800e120:	681b      	ldr	r3, [r3, #0]
    if (prep->rows_to_go == 0 &&
 800e122:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 800e124:	429a      	cmp	r2, r3
 800e126:	d939      	bls.n	800e19c <pre_process_data+0x19a>
      for (ci = 0, compptr = cinfo->comp_info; ci < cinfo->num_components;
 800e128:	2300      	movs	r3, #0
 800e12a:	627b      	str	r3, [r7, #36]	@ 0x24
 800e12c:	68fb      	ldr	r3, [r7, #12]
 800e12e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800e130:	623b      	str	r3, [r7, #32]
 800e132:	e029      	b.n	800e188 <pre_process_data+0x186>
	   ci++, compptr++) {
	numrows = (compptr->v_samp_factor * compptr->DCT_v_scaled_size) /
 800e134:	6a3b      	ldr	r3, [r7, #32]
 800e136:	68db      	ldr	r3, [r3, #12]
 800e138:	6a3a      	ldr	r2, [r7, #32]
 800e13a:	6a92      	ldr	r2, [r2, #40]	@ 0x28
 800e13c:	fb03 f202 	mul.w	r2, r3, r2
		  cinfo->min_DCT_v_scaled_size;
 800e140:	68fb      	ldr	r3, [r7, #12]
 800e142:	f8d3 3118 	ldr.w	r3, [r3, #280]	@ 0x118
	numrows = (compptr->v_samp_factor * compptr->DCT_v_scaled_size) /
 800e146:	fb92 f3f3 	sdiv	r3, r2, r3
 800e14a:	617b      	str	r3, [r7, #20]
	expand_bottom_edge(output_buf[ci],
 800e14c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800e14e:	009b      	lsls	r3, r3, #2
 800e150:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800e152:	4413      	add	r3, r2
 800e154:	6818      	ldr	r0, [r3, #0]
			   compptr->width_in_blocks * compptr->DCT_h_scaled_size,
 800e156:	6a3b      	ldr	r3, [r7, #32]
 800e158:	69db      	ldr	r3, [r3, #28]
 800e15a:	6a3a      	ldr	r2, [r7, #32]
 800e15c:	6a52      	ldr	r2, [r2, #36]	@ 0x24
	expand_bottom_edge(output_buf[ci],
 800e15e:	fb02 f103 	mul.w	r1, r2, r3
			   (int) (*out_row_group_ctr * numrows),
 800e162:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800e164:	681b      	ldr	r3, [r3, #0]
 800e166:	697a      	ldr	r2, [r7, #20]
 800e168:	fb02 f303 	mul.w	r3, r2, r3
	expand_bottom_edge(output_buf[ci],
 800e16c:	461c      	mov	r4, r3
			   (int) (out_row_groups_avail * numrows));
 800e16e:	697b      	ldr	r3, [r7, #20]
 800e170:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 800e172:	fb02 f303 	mul.w	r3, r2, r3
	expand_bottom_edge(output_buf[ci],
 800e176:	4622      	mov	r2, r4
 800e178:	f7ff ff26 	bl	800dfc8 <expand_bottom_edge>
	   ci++, compptr++) {
 800e17c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800e17e:	3301      	adds	r3, #1
 800e180:	627b      	str	r3, [r7, #36]	@ 0x24
 800e182:	6a3b      	ldr	r3, [r7, #32]
 800e184:	3358      	adds	r3, #88	@ 0x58
 800e186:	623b      	str	r3, [r7, #32]
      for (ci = 0, compptr = cinfo->comp_info; ci < cinfo->num_components;
 800e188:	68fb      	ldr	r3, [r7, #12]
 800e18a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800e18c:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800e18e:	429a      	cmp	r2, r3
 800e190:	dbd0      	blt.n	800e134 <pre_process_data+0x132>
      }
      *out_row_group_ctr = out_row_groups_avail;
 800e192:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800e194:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 800e196:	601a      	str	r2, [r3, #0]
      break;			/* can exit outer loop without test */
 800e198:	bf00      	nop
    }
  }
}
 800e19a:	e00a      	b.n	800e1b2 <pre_process_data+0x1b0>
  while (*in_row_ctr < in_rows_avail &&
 800e19c:	687b      	ldr	r3, [r7, #4]
 800e19e:	681b      	ldr	r3, [r3, #0]
 800e1a0:	683a      	ldr	r2, [r7, #0]
 800e1a2:	429a      	cmp	r2, r3
 800e1a4:	d905      	bls.n	800e1b2 <pre_process_data+0x1b0>
	 *out_row_group_ctr < out_row_groups_avail) {
 800e1a6:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800e1a8:	681b      	ldr	r3, [r3, #0]
  while (*in_row_ctr < in_rows_avail &&
 800e1aa:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 800e1ac:	429a      	cmp	r2, r3
 800e1ae:	f63f af34 	bhi.w	800e01a <pre_process_data+0x18>
}
 800e1b2:	bf00      	nop
 800e1b4:	372c      	adds	r7, #44	@ 0x2c
 800e1b6:	46bd      	mov	sp, r7
 800e1b8:	bd90      	pop	{r4, r7, pc}

0800e1ba <pre_process_context>:
pre_process_context (j_compress_ptr cinfo,
		     JSAMPARRAY input_buf, JDIMENSION *in_row_ctr,
		     JDIMENSION in_rows_avail,
		     JSAMPIMAGE output_buf, JDIMENSION *out_row_group_ctr,
		     JDIMENSION out_row_groups_avail)
{
 800e1ba:	b590      	push	{r4, r7, lr}
 800e1bc:	b08d      	sub	sp, #52	@ 0x34
 800e1be:	af02      	add	r7, sp, #8
 800e1c0:	60f8      	str	r0, [r7, #12]
 800e1c2:	60b9      	str	r1, [r7, #8]
 800e1c4:	607a      	str	r2, [r7, #4]
 800e1c6:	603b      	str	r3, [r7, #0]
  my_prep_ptr prep = (my_prep_ptr) cinfo->prep;
 800e1c8:	68fb      	ldr	r3, [r7, #12]
 800e1ca:	f8d3 318c 	ldr.w	r3, [r3, #396]	@ 0x18c
 800e1ce:	61fb      	str	r3, [r7, #28]
  int numrows, ci;
  int buf_height = cinfo->max_v_samp_factor * 3;
 800e1d0:	68fb      	ldr	r3, [r7, #12]
 800e1d2:	f8d3 2110 	ldr.w	r2, [r3, #272]	@ 0x110
 800e1d6:	4613      	mov	r3, r2
 800e1d8:	005b      	lsls	r3, r3, #1
 800e1da:	4413      	add	r3, r2
 800e1dc:	61bb      	str	r3, [r7, #24]
  JDIMENSION inrows;

  while (*out_row_group_ctr < out_row_groups_avail) {
 800e1de:	e0cf      	b.n	800e380 <pre_process_context+0x1c6>
    if (*in_row_ctr < in_rows_avail) {
 800e1e0:	687b      	ldr	r3, [r7, #4]
 800e1e2:	681b      	ldr	r3, [r3, #0]
 800e1e4:	683a      	ldr	r2, [r7, #0]
 800e1e6:	429a      	cmp	r2, r3
 800e1e8:	d969      	bls.n	800e2be <pre_process_context+0x104>
      /* Do color conversion to fill the conversion buffer. */
      inrows = in_rows_avail - *in_row_ctr;
 800e1ea:	687b      	ldr	r3, [r7, #4]
 800e1ec:	681b      	ldr	r3, [r3, #0]
 800e1ee:	683a      	ldr	r2, [r7, #0]
 800e1f0:	1ad3      	subs	r3, r2, r3
 800e1f2:	617b      	str	r3, [r7, #20]
      numrows = prep->next_buf_stop - prep->next_buf_row;
 800e1f4:	69fb      	ldr	r3, [r7, #28]
 800e1f6:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800e1f8:	69fb      	ldr	r3, [r7, #28]
 800e1fa:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800e1fc:	1ad3      	subs	r3, r2, r3
 800e1fe:	613b      	str	r3, [r7, #16]
      numrows = (int) MIN((JDIMENSION) numrows, inrows);
 800e200:	693a      	ldr	r2, [r7, #16]
 800e202:	697b      	ldr	r3, [r7, #20]
 800e204:	4293      	cmp	r3, r2
 800e206:	bf28      	it	cs
 800e208:	4613      	movcs	r3, r2
 800e20a:	613b      	str	r3, [r7, #16]
      (*cinfo->cconvert->color_convert) (cinfo, input_buf + *in_row_ctr,
 800e20c:	68fb      	ldr	r3, [r7, #12]
 800e20e:	f8d3 3198 	ldr.w	r3, [r3, #408]	@ 0x198
 800e212:	685c      	ldr	r4, [r3, #4]
 800e214:	687b      	ldr	r3, [r7, #4]
 800e216:	681b      	ldr	r3, [r3, #0]
 800e218:	009b      	lsls	r3, r3, #2
 800e21a:	68ba      	ldr	r2, [r7, #8]
 800e21c:	18d1      	adds	r1, r2, r3
					 prep->color_buf,
 800e21e:	69fb      	ldr	r3, [r7, #28]
 800e220:	f103 0208 	add.w	r2, r3, #8
					 (JDIMENSION) prep->next_buf_row,
 800e224:	69fb      	ldr	r3, [r7, #28]
 800e226:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
      (*cinfo->cconvert->color_convert) (cinfo, input_buf + *in_row_ctr,
 800e228:	4618      	mov	r0, r3
 800e22a:	693b      	ldr	r3, [r7, #16]
 800e22c:	9300      	str	r3, [sp, #0]
 800e22e:	4603      	mov	r3, r0
 800e230:	68f8      	ldr	r0, [r7, #12]
 800e232:	47a0      	blx	r4
					 numrows);
      /* Pad at top of image, if first time through */
      if (prep->rows_to_go == cinfo->image_height) {
 800e234:	69fb      	ldr	r3, [r7, #28]
 800e236:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800e238:	68fb      	ldr	r3, [r7, #12]
 800e23a:	6a1b      	ldr	r3, [r3, #32]
 800e23c:	429a      	cmp	r2, r3
 800e23e:	d12b      	bne.n	800e298 <pre_process_context+0xde>
	for (ci = 0; ci < cinfo->num_components; ci++) {
 800e240:	2300      	movs	r3, #0
 800e242:	627b      	str	r3, [r7, #36]	@ 0x24
 800e244:	e023      	b.n	800e28e <pre_process_context+0xd4>
	  int row;
	  for (row = 1; row <= cinfo->max_v_samp_factor; row++) {
 800e246:	2301      	movs	r3, #1
 800e248:	623b      	str	r3, [r7, #32]
 800e24a:	e017      	b.n	800e27c <pre_process_context+0xc2>
	    jcopy_sample_rows(prep->color_buf[ci], 0,
 800e24c:	69fb      	ldr	r3, [r7, #28]
 800e24e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800e250:	3202      	adds	r2, #2
 800e252:	f853 0022 	ldr.w	r0, [r3, r2, lsl #2]
 800e256:	69fb      	ldr	r3, [r7, #28]
 800e258:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800e25a:	3202      	adds	r2, #2
 800e25c:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 800e260:	6a3b      	ldr	r3, [r7, #32]
 800e262:	4259      	negs	r1, r3
 800e264:	68fb      	ldr	r3, [r7, #12]
 800e266:	69db      	ldr	r3, [r3, #28]
 800e268:	9301      	str	r3, [sp, #4]
 800e26a:	2301      	movs	r3, #1
 800e26c:	9300      	str	r3, [sp, #0]
 800e26e:	460b      	mov	r3, r1
 800e270:	2100      	movs	r1, #0
 800e272:	f00b fab7 	bl	80197e4 <jcopy_sample_rows>
	  for (row = 1; row <= cinfo->max_v_samp_factor; row++) {
 800e276:	6a3b      	ldr	r3, [r7, #32]
 800e278:	3301      	adds	r3, #1
 800e27a:	623b      	str	r3, [r7, #32]
 800e27c:	68fb      	ldr	r3, [r7, #12]
 800e27e:	f8d3 3110 	ldr.w	r3, [r3, #272]	@ 0x110
 800e282:	6a3a      	ldr	r2, [r7, #32]
 800e284:	429a      	cmp	r2, r3
 800e286:	dde1      	ble.n	800e24c <pre_process_context+0x92>
	for (ci = 0; ci < cinfo->num_components; ci++) {
 800e288:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800e28a:	3301      	adds	r3, #1
 800e28c:	627b      	str	r3, [r7, #36]	@ 0x24
 800e28e:	68fb      	ldr	r3, [r7, #12]
 800e290:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800e292:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800e294:	429a      	cmp	r2, r3
 800e296:	dbd6      	blt.n	800e246 <pre_process_context+0x8c>
			      prep->color_buf[ci], -row,
			      1, cinfo->image_width);
	  }
	}
      }
      *in_row_ctr += numrows;
 800e298:	687b      	ldr	r3, [r7, #4]
 800e29a:	681a      	ldr	r2, [r3, #0]
 800e29c:	693b      	ldr	r3, [r7, #16]
 800e29e:	441a      	add	r2, r3
 800e2a0:	687b      	ldr	r3, [r7, #4]
 800e2a2:	601a      	str	r2, [r3, #0]
      prep->next_buf_row += numrows;
 800e2a4:	69fb      	ldr	r3, [r7, #28]
 800e2a6:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800e2a8:	693b      	ldr	r3, [r7, #16]
 800e2aa:	441a      	add	r2, r3
 800e2ac:	69fb      	ldr	r3, [r7, #28]
 800e2ae:	635a      	str	r2, [r3, #52]	@ 0x34
      prep->rows_to_go -= numrows;
 800e2b0:	69fb      	ldr	r3, [r7, #28]
 800e2b2:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800e2b4:	693b      	ldr	r3, [r7, #16]
 800e2b6:	1ad2      	subs	r2, r2, r3
 800e2b8:	69fb      	ldr	r3, [r7, #28]
 800e2ba:	631a      	str	r2, [r3, #48]	@ 0x30
 800e2bc:	e025      	b.n	800e30a <pre_process_context+0x150>
    } else {
      /* Return for more data, unless we are at the bottom of the image. */
      if (prep->rows_to_go != 0)
 800e2be:	69fb      	ldr	r3, [r7, #28]
 800e2c0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800e2c2:	2b00      	cmp	r3, #0
 800e2c4:	d163      	bne.n	800e38e <pre_process_context+0x1d4>
	break;
      /* When at bottom of image, pad to fill the conversion buffer. */
      if (prep->next_buf_row < prep->next_buf_stop) {
 800e2c6:	69fb      	ldr	r3, [r7, #28]
 800e2c8:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800e2ca:	69fb      	ldr	r3, [r7, #28]
 800e2cc:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800e2ce:	429a      	cmp	r2, r3
 800e2d0:	da1b      	bge.n	800e30a <pre_process_context+0x150>
	for (ci = 0; ci < cinfo->num_components; ci++) {
 800e2d2:	2300      	movs	r3, #0
 800e2d4:	627b      	str	r3, [r7, #36]	@ 0x24
 800e2d6:	e00f      	b.n	800e2f8 <pre_process_context+0x13e>
	  expand_bottom_edge(prep->color_buf[ci], cinfo->image_width,
 800e2d8:	69fb      	ldr	r3, [r7, #28]
 800e2da:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800e2dc:	3202      	adds	r2, #2
 800e2de:	f853 0022 	ldr.w	r0, [r3, r2, lsl #2]
 800e2e2:	68fb      	ldr	r3, [r7, #12]
 800e2e4:	69d9      	ldr	r1, [r3, #28]
 800e2e6:	69fb      	ldr	r3, [r7, #28]
 800e2e8:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800e2ea:	69fb      	ldr	r3, [r7, #28]
 800e2ec:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800e2ee:	f7ff fe6b 	bl	800dfc8 <expand_bottom_edge>
	for (ci = 0; ci < cinfo->num_components; ci++) {
 800e2f2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800e2f4:	3301      	adds	r3, #1
 800e2f6:	627b      	str	r3, [r7, #36]	@ 0x24
 800e2f8:	68fb      	ldr	r3, [r7, #12]
 800e2fa:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800e2fc:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800e2fe:	429a      	cmp	r2, r3
 800e300:	dbea      	blt.n	800e2d8 <pre_process_context+0x11e>
			     prep->next_buf_row, prep->next_buf_stop);
	}
	prep->next_buf_row = prep->next_buf_stop;
 800e302:	69fb      	ldr	r3, [r7, #28]
 800e304:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800e306:	69fb      	ldr	r3, [r7, #28]
 800e308:	635a      	str	r2, [r3, #52]	@ 0x34
      }
    }
    /* If we've gotten enough data, downsample a row group. */
    if (prep->next_buf_row == prep->next_buf_stop) {
 800e30a:	69fb      	ldr	r3, [r7, #28]
 800e30c:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800e30e:	69fb      	ldr	r3, [r7, #28]
 800e310:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800e312:	429a      	cmp	r2, r3
 800e314:	d134      	bne.n	800e380 <pre_process_context+0x1c6>
      (*cinfo->downsample->downsample) (cinfo,
 800e316:	68fb      	ldr	r3, [r7, #12]
 800e318:	f8d3 319c 	ldr.w	r3, [r3, #412]	@ 0x19c
 800e31c:	685c      	ldr	r4, [r3, #4]
					prep->color_buf,
 800e31e:	69fb      	ldr	r3, [r7, #28]
 800e320:	f103 0108 	add.w	r1, r3, #8
					(JDIMENSION) prep->this_row_group,
 800e324:	69fb      	ldr	r3, [r7, #28]
 800e326:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
      (*cinfo->downsample->downsample) (cinfo,
 800e328:	461a      	mov	r2, r3
 800e32a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800e32c:	681b      	ldr	r3, [r3, #0]
 800e32e:	9300      	str	r3, [sp, #0]
 800e330:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800e332:	68f8      	ldr	r0, [r7, #12]
 800e334:	47a0      	blx	r4
					output_buf, *out_row_group_ctr);
      (*out_row_group_ctr)++;
 800e336:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800e338:	681b      	ldr	r3, [r3, #0]
 800e33a:	1c5a      	adds	r2, r3, #1
 800e33c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800e33e:	601a      	str	r2, [r3, #0]
      /* Advance pointers with wraparound as necessary. */
      prep->this_row_group += cinfo->max_v_samp_factor;
 800e340:	69fb      	ldr	r3, [r7, #28]
 800e342:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800e344:	68fb      	ldr	r3, [r7, #12]
 800e346:	f8d3 3110 	ldr.w	r3, [r3, #272]	@ 0x110
 800e34a:	441a      	add	r2, r3
 800e34c:	69fb      	ldr	r3, [r7, #28]
 800e34e:	639a      	str	r2, [r3, #56]	@ 0x38
      if (prep->this_row_group >= buf_height)
 800e350:	69fb      	ldr	r3, [r7, #28]
 800e352:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800e354:	69ba      	ldr	r2, [r7, #24]
 800e356:	429a      	cmp	r2, r3
 800e358:	dc02      	bgt.n	800e360 <pre_process_context+0x1a6>
	prep->this_row_group = 0;
 800e35a:	69fb      	ldr	r3, [r7, #28]
 800e35c:	2200      	movs	r2, #0
 800e35e:	639a      	str	r2, [r3, #56]	@ 0x38
      if (prep->next_buf_row >= buf_height)
 800e360:	69fb      	ldr	r3, [r7, #28]
 800e362:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800e364:	69ba      	ldr	r2, [r7, #24]
 800e366:	429a      	cmp	r2, r3
 800e368:	dc02      	bgt.n	800e370 <pre_process_context+0x1b6>
	prep->next_buf_row = 0;
 800e36a:	69fb      	ldr	r3, [r7, #28]
 800e36c:	2200      	movs	r2, #0
 800e36e:	635a      	str	r2, [r3, #52]	@ 0x34
      prep->next_buf_stop = prep->next_buf_row + cinfo->max_v_samp_factor;
 800e370:	69fb      	ldr	r3, [r7, #28]
 800e372:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800e374:	68fb      	ldr	r3, [r7, #12]
 800e376:	f8d3 3110 	ldr.w	r3, [r3, #272]	@ 0x110
 800e37a:	441a      	add	r2, r3
 800e37c:	69fb      	ldr	r3, [r7, #28]
 800e37e:	63da      	str	r2, [r3, #60]	@ 0x3c
  while (*out_row_group_ctr < out_row_groups_avail) {
 800e380:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800e382:	681b      	ldr	r3, [r3, #0]
 800e384:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 800e386:	429a      	cmp	r2, r3
 800e388:	f63f af2a 	bhi.w	800e1e0 <pre_process_context+0x26>
    }
  }
}
 800e38c:	e000      	b.n	800e390 <pre_process_context+0x1d6>
	break;
 800e38e:	bf00      	nop
}
 800e390:	bf00      	nop
 800e392:	372c      	adds	r7, #44	@ 0x2c
 800e394:	46bd      	mov	sp, r7
 800e396:	bd90      	pop	{r4, r7, pc}

0800e398 <create_context_buffer>:
 * Create the wrapped-around downsampling input buffer needed for context mode.
 */

LOCAL(void)
create_context_buffer (j_compress_ptr cinfo)
{
 800e398:	b590      	push	{r4, r7, lr}
 800e39a:	b08b      	sub	sp, #44	@ 0x2c
 800e39c:	af00      	add	r7, sp, #0
 800e39e:	6078      	str	r0, [r7, #4]
  my_prep_ptr prep = (my_prep_ptr) cinfo->prep;
 800e3a0:	687b      	ldr	r3, [r7, #4]
 800e3a2:	f8d3 318c 	ldr.w	r3, [r3, #396]	@ 0x18c
 800e3a6:	617b      	str	r3, [r7, #20]
  int rgroup_height = cinfo->max_v_samp_factor;
 800e3a8:	687b      	ldr	r3, [r7, #4]
 800e3aa:	f8d3 3110 	ldr.w	r3, [r3, #272]	@ 0x110
 800e3ae:	613b      	str	r3, [r7, #16]

  /* Grab enough space for fake row pointers for all the components;
   * we need five row groups' worth of pointers for each component.
   */
  fake_buffer = (JSAMPARRAY)
    (*cinfo->mem->alloc_small) ((j_common_ptr) cinfo, JPOOL_IMAGE,
 800e3b0:	687b      	ldr	r3, [r7, #4]
 800e3b2:	685b      	ldr	r3, [r3, #4]
 800e3b4:	681c      	ldr	r4, [r3, #0]
				(cinfo->num_components * 5 * rgroup_height) *
 800e3b6:	687b      	ldr	r3, [r7, #4]
 800e3b8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800e3ba:	693a      	ldr	r2, [r7, #16]
 800e3bc:	fb02 f303 	mul.w	r3, r2, r3
 800e3c0:	461a      	mov	r2, r3
    (*cinfo->mem->alloc_small) ((j_common_ptr) cinfo, JPOOL_IMAGE,
 800e3c2:	4613      	mov	r3, r2
 800e3c4:	009b      	lsls	r3, r3, #2
 800e3c6:	4413      	add	r3, r2
 800e3c8:	009b      	lsls	r3, r3, #2
 800e3ca:	461a      	mov	r2, r3
 800e3cc:	2101      	movs	r1, #1
 800e3ce:	6878      	ldr	r0, [r7, #4]
 800e3d0:	47a0      	blx	r4
 800e3d2:	61b8      	str	r0, [r7, #24]
				SIZEOF(JSAMPROW));

  for (ci = 0, compptr = cinfo->comp_info; ci < cinfo->num_components;
 800e3d4:	2300      	movs	r3, #0
 800e3d6:	627b      	str	r3, [r7, #36]	@ 0x24
 800e3d8:	687b      	ldr	r3, [r7, #4]
 800e3da:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800e3dc:	61fb      	str	r3, [r7, #28]
 800e3de:	e066      	b.n	800e4ae <create_context_buffer+0x116>
       ci++, compptr++) {
    /* Allocate the actual buffer space (3 row groups) for this component.
     * We make the buffer wide enough to allow the downsampler to edge-expand
     * horizontally within the buffer, if it so chooses.
     */
    true_buffer = (*cinfo->mem->alloc_sarray)
 800e3e0:	687b      	ldr	r3, [r7, #4]
 800e3e2:	685b      	ldr	r3, [r3, #4]
 800e3e4:	689c      	ldr	r4, [r3, #8]
      ((j_common_ptr) cinfo, JPOOL_IMAGE,
       (JDIMENSION) (((long) compptr->width_in_blocks *
 800e3e6:	69fb      	ldr	r3, [r7, #28]
 800e3e8:	69db      	ldr	r3, [r3, #28]
 800e3ea:	461a      	mov	r2, r3
		      cinfo->min_DCT_h_scaled_size *
 800e3ec:	687b      	ldr	r3, [r7, #4]
 800e3ee:	f8d3 3114 	ldr.w	r3, [r3, #276]	@ 0x114
       (JDIMENSION) (((long) compptr->width_in_blocks *
 800e3f2:	fb02 f303 	mul.w	r3, r2, r3
		      cinfo->max_h_samp_factor) / compptr->h_samp_factor),
 800e3f6:	687a      	ldr	r2, [r7, #4]
 800e3f8:	f8d2 210c 	ldr.w	r2, [r2, #268]	@ 0x10c
		      cinfo->min_DCT_h_scaled_size *
 800e3fc:	fb03 f202 	mul.w	r2, r3, r2
		      cinfo->max_h_samp_factor) / compptr->h_samp_factor),
 800e400:	69fb      	ldr	r3, [r7, #28]
 800e402:	689b      	ldr	r3, [r3, #8]
 800e404:	fb92 f3f3 	sdiv	r3, r2, r3
    true_buffer = (*cinfo->mem->alloc_sarray)
 800e408:	4619      	mov	r1, r3
       (JDIMENSION) (3 * rgroup_height));
 800e40a:	693a      	ldr	r2, [r7, #16]
 800e40c:	4613      	mov	r3, r2
 800e40e:	005b      	lsls	r3, r3, #1
 800e410:	4413      	add	r3, r2
    true_buffer = (*cinfo->mem->alloc_sarray)
 800e412:	460a      	mov	r2, r1
 800e414:	2101      	movs	r1, #1
 800e416:	6878      	ldr	r0, [r7, #4]
 800e418:	47a0      	blx	r4
 800e41a:	60f8      	str	r0, [r7, #12]
    /* Copy true buffer row pointers into the middle of the fake row array */
    MEMCOPY(fake_buffer + rgroup_height, true_buffer,
 800e41c:	693b      	ldr	r3, [r7, #16]
 800e41e:	009b      	lsls	r3, r3, #2
 800e420:	69ba      	ldr	r2, [r7, #24]
 800e422:	18d0      	adds	r0, r2, r3
 800e424:	693a      	ldr	r2, [r7, #16]
 800e426:	4613      	mov	r3, r2
 800e428:	005b      	lsls	r3, r3, #1
 800e42a:	4413      	add	r3, r2
 800e42c:	009b      	lsls	r3, r3, #2
 800e42e:	461a      	mov	r2, r3
 800e430:	68f9      	ldr	r1, [r7, #12]
 800e432:	f00b fb21 	bl	8019a78 <memcpy>
	    3 * rgroup_height * SIZEOF(JSAMPROW));
    /* Fill in the above and below wraparound pointers */
    for (i = 0; i < rgroup_height; i++) {
 800e436:	2300      	movs	r3, #0
 800e438:	623b      	str	r3, [r7, #32]
 800e43a:	e01c      	b.n	800e476 <create_context_buffer+0xde>
      fake_buffer[i] = true_buffer[2 * rgroup_height + i];
 800e43c:	693b      	ldr	r3, [r7, #16]
 800e43e:	005a      	lsls	r2, r3, #1
 800e440:	6a3b      	ldr	r3, [r7, #32]
 800e442:	4413      	add	r3, r2
 800e444:	009b      	lsls	r3, r3, #2
 800e446:	68fa      	ldr	r2, [r7, #12]
 800e448:	441a      	add	r2, r3
 800e44a:	6a3b      	ldr	r3, [r7, #32]
 800e44c:	009b      	lsls	r3, r3, #2
 800e44e:	69b9      	ldr	r1, [r7, #24]
 800e450:	440b      	add	r3, r1
 800e452:	6812      	ldr	r2, [r2, #0]
 800e454:	601a      	str	r2, [r3, #0]
      fake_buffer[4 * rgroup_height + i] = true_buffer[i];
 800e456:	6a3b      	ldr	r3, [r7, #32]
 800e458:	009b      	lsls	r3, r3, #2
 800e45a:	68fa      	ldr	r2, [r7, #12]
 800e45c:	441a      	add	r2, r3
 800e45e:	693b      	ldr	r3, [r7, #16]
 800e460:	0099      	lsls	r1, r3, #2
 800e462:	6a3b      	ldr	r3, [r7, #32]
 800e464:	440b      	add	r3, r1
 800e466:	009b      	lsls	r3, r3, #2
 800e468:	69b9      	ldr	r1, [r7, #24]
 800e46a:	440b      	add	r3, r1
 800e46c:	6812      	ldr	r2, [r2, #0]
 800e46e:	601a      	str	r2, [r3, #0]
    for (i = 0; i < rgroup_height; i++) {
 800e470:	6a3b      	ldr	r3, [r7, #32]
 800e472:	3301      	adds	r3, #1
 800e474:	623b      	str	r3, [r7, #32]
 800e476:	6a3a      	ldr	r2, [r7, #32]
 800e478:	693b      	ldr	r3, [r7, #16]
 800e47a:	429a      	cmp	r2, r3
 800e47c:	dbde      	blt.n	800e43c <create_context_buffer+0xa4>
    }
    prep->color_buf[ci] = fake_buffer + rgroup_height;
 800e47e:	693b      	ldr	r3, [r7, #16]
 800e480:	009b      	lsls	r3, r3, #2
 800e482:	69ba      	ldr	r2, [r7, #24]
 800e484:	18d1      	adds	r1, r2, r3
 800e486:	697b      	ldr	r3, [r7, #20]
 800e488:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800e48a:	3202      	adds	r2, #2
 800e48c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    fake_buffer += 5 * rgroup_height; /* point to space for next component */
 800e490:	693a      	ldr	r2, [r7, #16]
 800e492:	4613      	mov	r3, r2
 800e494:	009b      	lsls	r3, r3, #2
 800e496:	4413      	add	r3, r2
 800e498:	009b      	lsls	r3, r3, #2
 800e49a:	461a      	mov	r2, r3
 800e49c:	69bb      	ldr	r3, [r7, #24]
 800e49e:	4413      	add	r3, r2
 800e4a0:	61bb      	str	r3, [r7, #24]
       ci++, compptr++) {
 800e4a2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800e4a4:	3301      	adds	r3, #1
 800e4a6:	627b      	str	r3, [r7, #36]	@ 0x24
 800e4a8:	69fb      	ldr	r3, [r7, #28]
 800e4aa:	3358      	adds	r3, #88	@ 0x58
 800e4ac:	61fb      	str	r3, [r7, #28]
  for (ci = 0, compptr = cinfo->comp_info; ci < cinfo->num_components;
 800e4ae:	687b      	ldr	r3, [r7, #4]
 800e4b0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800e4b2:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800e4b4:	429a      	cmp	r2, r3
 800e4b6:	db93      	blt.n	800e3e0 <create_context_buffer+0x48>
  }
}
 800e4b8:	bf00      	nop
 800e4ba:	bf00      	nop
 800e4bc:	372c      	adds	r7, #44	@ 0x2c
 800e4be:	46bd      	mov	sp, r7
 800e4c0:	bd90      	pop	{r4, r7, pc}
	...

0800e4c4 <jinit_c_prep_controller>:
 * Initialize preprocessing controller.
 */

GLOBAL(void)
jinit_c_prep_controller (j_compress_ptr cinfo, boolean need_full_buffer)
{
 800e4c4:	b590      	push	{r4, r7, lr}
 800e4c6:	b087      	sub	sp, #28
 800e4c8:	af00      	add	r7, sp, #0
 800e4ca:	6078      	str	r0, [r7, #4]
 800e4cc:	6039      	str	r1, [r7, #0]
  my_prep_ptr prep;
  int ci;
  jpeg_component_info * compptr;

  if (need_full_buffer)		/* safety check */
 800e4ce:	683b      	ldr	r3, [r7, #0]
 800e4d0:	2b00      	cmp	r3, #0
 800e4d2:	d008      	beq.n	800e4e6 <jinit_c_prep_controller+0x22>
    ERREXIT(cinfo, JERR_BAD_BUFFER_MODE);
 800e4d4:	687b      	ldr	r3, [r7, #4]
 800e4d6:	681b      	ldr	r3, [r3, #0]
 800e4d8:	2203      	movs	r2, #3
 800e4da:	615a      	str	r2, [r3, #20]
 800e4dc:	687b      	ldr	r3, [r7, #4]
 800e4de:	681b      	ldr	r3, [r3, #0]
 800e4e0:	681b      	ldr	r3, [r3, #0]
 800e4e2:	6878      	ldr	r0, [r7, #4]
 800e4e4:	4798      	blx	r3

  prep = (my_prep_ptr)
    (*cinfo->mem->alloc_small) ((j_common_ptr) cinfo, JPOOL_IMAGE,
 800e4e6:	687b      	ldr	r3, [r7, #4]
 800e4e8:	685b      	ldr	r3, [r3, #4]
 800e4ea:	681b      	ldr	r3, [r3, #0]
 800e4ec:	2240      	movs	r2, #64	@ 0x40
 800e4ee:	2101      	movs	r1, #1
 800e4f0:	6878      	ldr	r0, [r7, #4]
 800e4f2:	4798      	blx	r3
 800e4f4:	60f8      	str	r0, [r7, #12]
				SIZEOF(my_prep_controller));
  cinfo->prep = (struct jpeg_c_prep_controller *) prep;
 800e4f6:	687b      	ldr	r3, [r7, #4]
 800e4f8:	68fa      	ldr	r2, [r7, #12]
 800e4fa:	f8c3 218c 	str.w	r2, [r3, #396]	@ 0x18c
  prep->pub.start_pass = start_pass_prep;
 800e4fe:	68fb      	ldr	r3, [r7, #12]
 800e500:	4a23      	ldr	r2, [pc, #140]	@ (800e590 <jinit_c_prep_controller+0xcc>)
 800e502:	601a      	str	r2, [r3, #0]

  /* Allocate the color conversion buffer.
   * We make the buffer wide enough to allow the downsampler to edge-expand
   * horizontally within the buffer, if it so chooses.
   */
  if (cinfo->downsample->need_context_rows) {
 800e504:	687b      	ldr	r3, [r7, #4]
 800e506:	f8d3 319c 	ldr.w	r3, [r3, #412]	@ 0x19c
 800e50a:	689b      	ldr	r3, [r3, #8]
 800e50c:	2b00      	cmp	r3, #0
 800e50e:	d006      	beq.n	800e51e <jinit_c_prep_controller+0x5a>
    /* Set up to provide context rows */
#ifdef CONTEXT_ROWS_SUPPORTED
    prep->pub.pre_process_data = pre_process_context;
 800e510:	68fb      	ldr	r3, [r7, #12]
 800e512:	4a20      	ldr	r2, [pc, #128]	@ (800e594 <jinit_c_prep_controller+0xd0>)
 800e514:	605a      	str	r2, [r3, #4]
    create_context_buffer(cinfo);
 800e516:	6878      	ldr	r0, [r7, #4]
 800e518:	f7ff ff3e 	bl	800e398 <create_context_buffer>
			cinfo->min_DCT_h_scaled_size *
			cinfo->max_h_samp_factor) / compptr->h_samp_factor),
	 (JDIMENSION) cinfo->max_v_samp_factor);
    }
  }
}
 800e51c:	e034      	b.n	800e588 <jinit_c_prep_controller+0xc4>
    prep->pub.pre_process_data = pre_process_data;
 800e51e:	68fb      	ldr	r3, [r7, #12]
 800e520:	4a1d      	ldr	r2, [pc, #116]	@ (800e598 <jinit_c_prep_controller+0xd4>)
 800e522:	605a      	str	r2, [r3, #4]
    for (ci = 0, compptr = cinfo->comp_info; ci < cinfo->num_components;
 800e524:	2300      	movs	r3, #0
 800e526:	617b      	str	r3, [r7, #20]
 800e528:	687b      	ldr	r3, [r7, #4]
 800e52a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800e52c:	613b      	str	r3, [r7, #16]
 800e52e:	e026      	b.n	800e57e <jinit_c_prep_controller+0xba>
      prep->color_buf[ci] = (*cinfo->mem->alloc_sarray)
 800e530:	687b      	ldr	r3, [r7, #4]
 800e532:	685b      	ldr	r3, [r3, #4]
 800e534:	689c      	ldr	r4, [r3, #8]
	 (JDIMENSION) (((long) compptr->width_in_blocks *
 800e536:	693b      	ldr	r3, [r7, #16]
 800e538:	69db      	ldr	r3, [r3, #28]
 800e53a:	461a      	mov	r2, r3
			cinfo->min_DCT_h_scaled_size *
 800e53c:	687b      	ldr	r3, [r7, #4]
 800e53e:	f8d3 3114 	ldr.w	r3, [r3, #276]	@ 0x114
	 (JDIMENSION) (((long) compptr->width_in_blocks *
 800e542:	fb02 f303 	mul.w	r3, r2, r3
			cinfo->max_h_samp_factor) / compptr->h_samp_factor),
 800e546:	687a      	ldr	r2, [r7, #4]
 800e548:	f8d2 210c 	ldr.w	r2, [r2, #268]	@ 0x10c
			cinfo->min_DCT_h_scaled_size *
 800e54c:	fb03 f202 	mul.w	r2, r3, r2
			cinfo->max_h_samp_factor) / compptr->h_samp_factor),
 800e550:	693b      	ldr	r3, [r7, #16]
 800e552:	689b      	ldr	r3, [r3, #8]
 800e554:	fb92 f3f3 	sdiv	r3, r2, r3
      prep->color_buf[ci] = (*cinfo->mem->alloc_sarray)
 800e558:	461a      	mov	r2, r3
	 (JDIMENSION) cinfo->max_v_samp_factor);
 800e55a:	687b      	ldr	r3, [r7, #4]
 800e55c:	f8d3 3110 	ldr.w	r3, [r3, #272]	@ 0x110
      prep->color_buf[ci] = (*cinfo->mem->alloc_sarray)
 800e560:	2101      	movs	r1, #1
 800e562:	6878      	ldr	r0, [r7, #4]
 800e564:	47a0      	blx	r4
 800e566:	4601      	mov	r1, r0
 800e568:	68fb      	ldr	r3, [r7, #12]
 800e56a:	697a      	ldr	r2, [r7, #20]
 800e56c:	3202      	adds	r2, #2
 800e56e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
	 ci++, compptr++) {
 800e572:	697b      	ldr	r3, [r7, #20]
 800e574:	3301      	adds	r3, #1
 800e576:	617b      	str	r3, [r7, #20]
 800e578:	693b      	ldr	r3, [r7, #16]
 800e57a:	3358      	adds	r3, #88	@ 0x58
 800e57c:	613b      	str	r3, [r7, #16]
    for (ci = 0, compptr = cinfo->comp_info; ci < cinfo->num_components;
 800e57e:	687b      	ldr	r3, [r7, #4]
 800e580:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800e582:	697a      	ldr	r2, [r7, #20]
 800e584:	429a      	cmp	r2, r3
 800e586:	dbd3      	blt.n	800e530 <jinit_c_prep_controller+0x6c>
}
 800e588:	bf00      	nop
 800e58a:	371c      	adds	r7, #28
 800e58c:	46bd      	mov	sp, r7
 800e58e:	bd90      	pop	{r4, r7, pc}
 800e590:	0800df75 	.word	0x0800df75
 800e594:	0800e1bb 	.word	0x0800e1bb
 800e598:	0800e003 	.word	0x0800e003

0800e59c <start_pass_downsample>:
 * Initialize for a downsampling pass.
 */

METHODDEF(void)
start_pass_downsample (j_compress_ptr cinfo)
{
 800e59c:	b480      	push	{r7}
 800e59e:	b083      	sub	sp, #12
 800e5a0:	af00      	add	r7, sp, #0
 800e5a2:	6078      	str	r0, [r7, #4]
  /* no work for now */
}
 800e5a4:	bf00      	nop
 800e5a6:	370c      	adds	r7, #12
 800e5a8:	46bd      	mov	sp, r7
 800e5aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e5ae:	4770      	bx	lr

0800e5b0 <expand_right_edge>:
 */

LOCAL(void)
expand_right_edge (JSAMPARRAY image_data, int num_rows,
		   JDIMENSION input_cols, JDIMENSION output_cols)
{
 800e5b0:	b4f0      	push	{r4, r5, r6, r7}
 800e5b2:	b086      	sub	sp, #24
 800e5b4:	af00      	add	r7, sp, #0
 800e5b6:	60f8      	str	r0, [r7, #12]
 800e5b8:	60b9      	str	r1, [r7, #8]
 800e5ba:	607a      	str	r2, [r7, #4]
 800e5bc:	603b      	str	r3, [r7, #0]
  register JSAMPROW ptr;
  register JSAMPLE pixval;
  register int count;
  int row;
  int numcols = (int) (output_cols - input_cols);
 800e5be:	683a      	ldr	r2, [r7, #0]
 800e5c0:	687b      	ldr	r3, [r7, #4]
 800e5c2:	1ad3      	subs	r3, r2, r3
 800e5c4:	613b      	str	r3, [r7, #16]

  if (numcols > 0) {
 800e5c6:	693b      	ldr	r3, [r7, #16]
 800e5c8:	2b00      	cmp	r3, #0
 800e5ca:	dd1b      	ble.n	800e604 <expand_right_edge+0x54>
    for (row = 0; row < num_rows; row++) {
 800e5cc:	2300      	movs	r3, #0
 800e5ce:	617b      	str	r3, [r7, #20]
 800e5d0:	e014      	b.n	800e5fc <expand_right_edge+0x4c>
      ptr = image_data[row] + input_cols;
 800e5d2:	697b      	ldr	r3, [r7, #20]
 800e5d4:	009b      	lsls	r3, r3, #2
 800e5d6:	68fa      	ldr	r2, [r7, #12]
 800e5d8:	4413      	add	r3, r2
 800e5da:	681a      	ldr	r2, [r3, #0]
 800e5dc:	687b      	ldr	r3, [r7, #4]
 800e5de:	18d5      	adds	r5, r2, r3
      pixval = ptr[-1];		/* don't need GETJSAMPLE() here */
 800e5e0:	f815 6c01 	ldrb.w	r6, [r5, #-1]
      for (count = numcols; count > 0; count--)
 800e5e4:	693c      	ldr	r4, [r7, #16]
 800e5e6:	e004      	b.n	800e5f2 <expand_right_edge+0x42>
	*ptr++ = pixval;
 800e5e8:	462b      	mov	r3, r5
 800e5ea:	1c5d      	adds	r5, r3, #1
 800e5ec:	4632      	mov	r2, r6
 800e5ee:	701a      	strb	r2, [r3, #0]
      for (count = numcols; count > 0; count--)
 800e5f0:	3c01      	subs	r4, #1
 800e5f2:	2c00      	cmp	r4, #0
 800e5f4:	dcf8      	bgt.n	800e5e8 <expand_right_edge+0x38>
    for (row = 0; row < num_rows; row++) {
 800e5f6:	697b      	ldr	r3, [r7, #20]
 800e5f8:	3301      	adds	r3, #1
 800e5fa:	617b      	str	r3, [r7, #20]
 800e5fc:	697a      	ldr	r2, [r7, #20]
 800e5fe:	68bb      	ldr	r3, [r7, #8]
 800e600:	429a      	cmp	r2, r3
 800e602:	dbe6      	blt.n	800e5d2 <expand_right_edge+0x22>
    }
  }
}
 800e604:	bf00      	nop
 800e606:	3718      	adds	r7, #24
 800e608:	46bd      	mov	sp, r7
 800e60a:	bcf0      	pop	{r4, r5, r6, r7}
 800e60c:	4770      	bx	lr

0800e60e <sep_downsample>:

METHODDEF(void)
sep_downsample (j_compress_ptr cinfo,
		JSAMPIMAGE input_buf, JDIMENSION in_row_index,
		JSAMPIMAGE output_buf, JDIMENSION out_row_group_index)
{
 800e60e:	b590      	push	{r4, r7, lr}
 800e610:	b08b      	sub	sp, #44	@ 0x2c
 800e612:	af00      	add	r7, sp, #0
 800e614:	60f8      	str	r0, [r7, #12]
 800e616:	60b9      	str	r1, [r7, #8]
 800e618:	607a      	str	r2, [r7, #4]
 800e61a:	603b      	str	r3, [r7, #0]
  my_downsample_ptr downsample = (my_downsample_ptr) cinfo->downsample;
 800e61c:	68fb      	ldr	r3, [r7, #12]
 800e61e:	f8d3 319c 	ldr.w	r3, [r3, #412]	@ 0x19c
 800e622:	61fb      	str	r3, [r7, #28]
  int ci;
  jpeg_component_info * compptr;
  JSAMPARRAY in_ptr, out_ptr;

  for (ci = 0, compptr = cinfo->comp_info; ci < cinfo->num_components;
 800e624:	2300      	movs	r3, #0
 800e626:	627b      	str	r3, [r7, #36]	@ 0x24
 800e628:	68fb      	ldr	r3, [r7, #12]
 800e62a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800e62c:	623b      	str	r3, [r7, #32]
 800e62e:	e02b      	b.n	800e688 <sep_downsample+0x7a>
       ci++, compptr++) {
    in_ptr = input_buf[ci] + in_row_index;
 800e630:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800e632:	009b      	lsls	r3, r3, #2
 800e634:	68ba      	ldr	r2, [r7, #8]
 800e636:	4413      	add	r3, r2
 800e638:	681a      	ldr	r2, [r3, #0]
 800e63a:	687b      	ldr	r3, [r7, #4]
 800e63c:	009b      	lsls	r3, r3, #2
 800e63e:	4413      	add	r3, r2
 800e640:	61bb      	str	r3, [r7, #24]
    out_ptr = output_buf[ci] +
 800e642:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800e644:	009b      	lsls	r3, r3, #2
 800e646:	683a      	ldr	r2, [r7, #0]
 800e648:	4413      	add	r3, r2
 800e64a:	681a      	ldr	r2, [r3, #0]
	      (out_row_group_index * downsample->rowgroup_height[ci]);
 800e64c:	69f9      	ldr	r1, [r7, #28]
 800e64e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800e650:	330c      	adds	r3, #12
 800e652:	009b      	lsls	r3, r3, #2
 800e654:	440b      	add	r3, r1
 800e656:	685b      	ldr	r3, [r3, #4]
 800e658:	4619      	mov	r1, r3
 800e65a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800e65c:	fb01 f303 	mul.w	r3, r1, r3
    out_ptr = output_buf[ci] +
 800e660:	009b      	lsls	r3, r3, #2
 800e662:	4413      	add	r3, r2
 800e664:	617b      	str	r3, [r7, #20]
    (*downsample->methods[ci]) (cinfo, compptr, in_ptr, out_ptr);
 800e666:	69fa      	ldr	r2, [r7, #28]
 800e668:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800e66a:	3302      	adds	r3, #2
 800e66c:	009b      	lsls	r3, r3, #2
 800e66e:	4413      	add	r3, r2
 800e670:	685c      	ldr	r4, [r3, #4]
 800e672:	697b      	ldr	r3, [r7, #20]
 800e674:	69ba      	ldr	r2, [r7, #24]
 800e676:	6a39      	ldr	r1, [r7, #32]
 800e678:	68f8      	ldr	r0, [r7, #12]
 800e67a:	47a0      	blx	r4
       ci++, compptr++) {
 800e67c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800e67e:	3301      	adds	r3, #1
 800e680:	627b      	str	r3, [r7, #36]	@ 0x24
 800e682:	6a3b      	ldr	r3, [r7, #32]
 800e684:	3358      	adds	r3, #88	@ 0x58
 800e686:	623b      	str	r3, [r7, #32]
  for (ci = 0, compptr = cinfo->comp_info; ci < cinfo->num_components;
 800e688:	68fb      	ldr	r3, [r7, #12]
 800e68a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800e68c:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800e68e:	429a      	cmp	r2, r3
 800e690:	dbce      	blt.n	800e630 <sep_downsample+0x22>
  }
}
 800e692:	bf00      	nop
 800e694:	bf00      	nop
 800e696:	372c      	adds	r7, #44	@ 0x2c
 800e698:	46bd      	mov	sp, r7
 800e69a:	bd90      	pop	{r4, r7, pc}

0800e69c <int_downsample>:
 */

METHODDEF(void)
int_downsample (j_compress_ptr cinfo, jpeg_component_info * compptr,
		JSAMPARRAY input_data, JSAMPARRAY output_data)
{
 800e69c:	b580      	push	{r7, lr}
 800e69e:	b094      	sub	sp, #80	@ 0x50
 800e6a0:	af00      	add	r7, sp, #0
 800e6a2:	60f8      	str	r0, [r7, #12]
 800e6a4:	60b9      	str	r1, [r7, #8]
 800e6a6:	607a      	str	r2, [r7, #4]
 800e6a8:	603b      	str	r3, [r7, #0]
  my_downsample_ptr downsample = (my_downsample_ptr) cinfo->downsample;
 800e6aa:	68fb      	ldr	r3, [r7, #12]
 800e6ac:	f8d3 319c 	ldr.w	r3, [r3, #412]	@ 0x19c
 800e6b0:	62bb      	str	r3, [r7, #40]	@ 0x28
  int inrow, outrow, h_expand, v_expand, numpix, numpix2, h, v;
  JDIMENSION outcol, outcol_h;	/* outcol_h == outcol*h_expand */
  JDIMENSION output_cols = compptr->width_in_blocks * compptr->DCT_h_scaled_size;
 800e6b2:	68bb      	ldr	r3, [r7, #8]
 800e6b4:	69db      	ldr	r3, [r3, #28]
 800e6b6:	68ba      	ldr	r2, [r7, #8]
 800e6b8:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 800e6ba:	fb02 f303 	mul.w	r3, r2, r3
 800e6be:	627b      	str	r3, [r7, #36]	@ 0x24
  JSAMPROW inptr, outptr;
  INT32 outvalue;

  h_expand = downsample->h_expand[compptr->component_index];
 800e6c0:	68bb      	ldr	r3, [r7, #8]
 800e6c2:	685b      	ldr	r3, [r3, #4]
 800e6c4:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800e6c6:	4413      	add	r3, r2
 800e6c8:	f893 305c 	ldrb.w	r3, [r3, #92]	@ 0x5c
 800e6cc:	623b      	str	r3, [r7, #32]
  v_expand = downsample->v_expand[compptr->component_index];
 800e6ce:	68bb      	ldr	r3, [r7, #8]
 800e6d0:	685b      	ldr	r3, [r3, #4]
 800e6d2:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800e6d4:	4413      	add	r3, r2
 800e6d6:	f893 3066 	ldrb.w	r3, [r3, #102]	@ 0x66
 800e6da:	61fb      	str	r3, [r7, #28]
  numpix = h_expand * v_expand;
 800e6dc:	6a3b      	ldr	r3, [r7, #32]
 800e6de:	69fa      	ldr	r2, [r7, #28]
 800e6e0:	fb02 f303 	mul.w	r3, r2, r3
 800e6e4:	61bb      	str	r3, [r7, #24]
  numpix2 = numpix/2;
 800e6e6:	69bb      	ldr	r3, [r7, #24]
 800e6e8:	0fda      	lsrs	r2, r3, #31
 800e6ea:	4413      	add	r3, r2
 800e6ec:	105b      	asrs	r3, r3, #1
 800e6ee:	617b      	str	r3, [r7, #20]

  /* Expand input data enough to let all the output samples be generated
   * by the standard loop.  Special-casing padded output would be more
   * efficient.
   */
  expand_right_edge(input_data, cinfo->max_v_samp_factor,
 800e6f0:	68fb      	ldr	r3, [r7, #12]
 800e6f2:	f8d3 1110 	ldr.w	r1, [r3, #272]	@ 0x110
 800e6f6:	68fb      	ldr	r3, [r7, #12]
 800e6f8:	69d8      	ldr	r0, [r3, #28]
 800e6fa:	6a3b      	ldr	r3, [r7, #32]
 800e6fc:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800e6fe:	fb02 f303 	mul.w	r3, r2, r3
 800e702:	4602      	mov	r2, r0
 800e704:	6878      	ldr	r0, [r7, #4]
 800e706:	f7ff ff53 	bl	800e5b0 <expand_right_edge>
		    cinfo->image_width, output_cols * h_expand);

  inrow = outrow = 0;
 800e70a:	2300      	movs	r3, #0
 800e70c:	64bb      	str	r3, [r7, #72]	@ 0x48
 800e70e:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800e710:	64fb      	str	r3, [r7, #76]	@ 0x4c
  while (inrow < cinfo->max_v_samp_factor) {
 800e712:	e04f      	b.n	800e7b4 <int_downsample+0x118>
    outptr = output_data[outrow];
 800e714:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800e716:	009b      	lsls	r3, r3, #2
 800e718:	683a      	ldr	r2, [r7, #0]
 800e71a:	4413      	add	r3, r2
 800e71c:	681b      	ldr	r3, [r3, #0]
 800e71e:	633b      	str	r3, [r7, #48]	@ 0x30
    for (outcol = 0, outcol_h = 0; outcol < output_cols;
 800e720:	2300      	movs	r3, #0
 800e722:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800e724:	2300      	movs	r3, #0
 800e726:	63bb      	str	r3, [r7, #56]	@ 0x38
 800e728:	e039      	b.n	800e79e <int_downsample+0x102>
	 outcol++, outcol_h += h_expand) {
      outvalue = 0;
 800e72a:	2300      	movs	r3, #0
 800e72c:	62fb      	str	r3, [r7, #44]	@ 0x2c
      for (v = 0; v < v_expand; v++) {
 800e72e:	2300      	movs	r3, #0
 800e730:	643b      	str	r3, [r7, #64]	@ 0x40
 800e732:	e01e      	b.n	800e772 <int_downsample+0xd6>
	inptr = input_data[inrow+v] + outcol_h;
 800e734:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 800e736:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800e738:	4413      	add	r3, r2
 800e73a:	009b      	lsls	r3, r3, #2
 800e73c:	687a      	ldr	r2, [r7, #4]
 800e73e:	4413      	add	r3, r2
 800e740:	681a      	ldr	r2, [r3, #0]
 800e742:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800e744:	4413      	add	r3, r2
 800e746:	637b      	str	r3, [r7, #52]	@ 0x34
	for (h = 0; h < h_expand; h++) {
 800e748:	2300      	movs	r3, #0
 800e74a:	647b      	str	r3, [r7, #68]	@ 0x44
 800e74c:	e00a      	b.n	800e764 <int_downsample+0xc8>
	  outvalue += (INT32) GETJSAMPLE(*inptr++);
 800e74e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800e750:	1c5a      	adds	r2, r3, #1
 800e752:	637a      	str	r2, [r7, #52]	@ 0x34
 800e754:	781b      	ldrb	r3, [r3, #0]
 800e756:	461a      	mov	r2, r3
 800e758:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800e75a:	4413      	add	r3, r2
 800e75c:	62fb      	str	r3, [r7, #44]	@ 0x2c
	for (h = 0; h < h_expand; h++) {
 800e75e:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800e760:	3301      	adds	r3, #1
 800e762:	647b      	str	r3, [r7, #68]	@ 0x44
 800e764:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800e766:	6a3b      	ldr	r3, [r7, #32]
 800e768:	429a      	cmp	r2, r3
 800e76a:	dbf0      	blt.n	800e74e <int_downsample+0xb2>
      for (v = 0; v < v_expand; v++) {
 800e76c:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800e76e:	3301      	adds	r3, #1
 800e770:	643b      	str	r3, [r7, #64]	@ 0x40
 800e772:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 800e774:	69fb      	ldr	r3, [r7, #28]
 800e776:	429a      	cmp	r2, r3
 800e778:	dbdc      	blt.n	800e734 <int_downsample+0x98>
	}
      }
      *outptr++ = (JSAMPLE) ((outvalue + numpix2) / numpix);
 800e77a:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800e77c:	697b      	ldr	r3, [r7, #20]
 800e77e:	441a      	add	r2, r3
 800e780:	69bb      	ldr	r3, [r7, #24]
 800e782:	fb92 f1f3 	sdiv	r1, r2, r3
 800e786:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800e788:	1c5a      	adds	r2, r3, #1
 800e78a:	633a      	str	r2, [r7, #48]	@ 0x30
 800e78c:	b2ca      	uxtb	r2, r1
 800e78e:	701a      	strb	r2, [r3, #0]
	 outcol++, outcol_h += h_expand) {
 800e790:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800e792:	3301      	adds	r3, #1
 800e794:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800e796:	6a3b      	ldr	r3, [r7, #32]
 800e798:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800e79a:	4413      	add	r3, r2
 800e79c:	63bb      	str	r3, [r7, #56]	@ 0x38
    for (outcol = 0, outcol_h = 0; outcol < output_cols;
 800e79e:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 800e7a0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800e7a2:	429a      	cmp	r2, r3
 800e7a4:	d3c1      	bcc.n	800e72a <int_downsample+0x8e>
    }
    inrow += v_expand;
 800e7a6:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 800e7a8:	69fb      	ldr	r3, [r7, #28]
 800e7aa:	4413      	add	r3, r2
 800e7ac:	64fb      	str	r3, [r7, #76]	@ 0x4c
    outrow++;
 800e7ae:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800e7b0:	3301      	adds	r3, #1
 800e7b2:	64bb      	str	r3, [r7, #72]	@ 0x48
  while (inrow < cinfo->max_v_samp_factor) {
 800e7b4:	68fb      	ldr	r3, [r7, #12]
 800e7b6:	f8d3 3110 	ldr.w	r3, [r3, #272]	@ 0x110
 800e7ba:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 800e7bc:	429a      	cmp	r2, r3
 800e7be:	dba9      	blt.n	800e714 <int_downsample+0x78>
  }
}
 800e7c0:	bf00      	nop
 800e7c2:	bf00      	nop
 800e7c4:	3750      	adds	r7, #80	@ 0x50
 800e7c6:	46bd      	mov	sp, r7
 800e7c8:	bd80      	pop	{r7, pc}

0800e7ca <fullsize_downsample>:
 */

METHODDEF(void)
fullsize_downsample (j_compress_ptr cinfo, jpeg_component_info * compptr,
		     JSAMPARRAY input_data, JSAMPARRAY output_data)
{
 800e7ca:	b580      	push	{r7, lr}
 800e7cc:	b086      	sub	sp, #24
 800e7ce:	af02      	add	r7, sp, #8
 800e7d0:	60f8      	str	r0, [r7, #12]
 800e7d2:	60b9      	str	r1, [r7, #8]
 800e7d4:	607a      	str	r2, [r7, #4]
 800e7d6:	603b      	str	r3, [r7, #0]
  /* Copy the data */
  jcopy_sample_rows(input_data, 0, output_data, 0,
 800e7d8:	68fb      	ldr	r3, [r7, #12]
 800e7da:	f8d3 3110 	ldr.w	r3, [r3, #272]	@ 0x110
 800e7de:	68fa      	ldr	r2, [r7, #12]
 800e7e0:	69d2      	ldr	r2, [r2, #28]
 800e7e2:	9201      	str	r2, [sp, #4]
 800e7e4:	9300      	str	r3, [sp, #0]
 800e7e6:	2300      	movs	r3, #0
 800e7e8:	683a      	ldr	r2, [r7, #0]
 800e7ea:	2100      	movs	r1, #0
 800e7ec:	6878      	ldr	r0, [r7, #4]
 800e7ee:	f00a fff9 	bl	80197e4 <jcopy_sample_rows>
		    cinfo->max_v_samp_factor, cinfo->image_width);
  /* Edge-expand */
  expand_right_edge(output_data, cinfo->max_v_samp_factor, cinfo->image_width,
 800e7f2:	68fb      	ldr	r3, [r7, #12]
 800e7f4:	f8d3 1110 	ldr.w	r1, [r3, #272]	@ 0x110
 800e7f8:	68fb      	ldr	r3, [r7, #12]
 800e7fa:	69d8      	ldr	r0, [r3, #28]
		    compptr->width_in_blocks * compptr->DCT_h_scaled_size);
 800e7fc:	68bb      	ldr	r3, [r7, #8]
 800e7fe:	69db      	ldr	r3, [r3, #28]
 800e800:	68ba      	ldr	r2, [r7, #8]
 800e802:	6a52      	ldr	r2, [r2, #36]	@ 0x24
  expand_right_edge(output_data, cinfo->max_v_samp_factor, cinfo->image_width,
 800e804:	fb02 f303 	mul.w	r3, r2, r3
 800e808:	4602      	mov	r2, r0
 800e80a:	6838      	ldr	r0, [r7, #0]
 800e80c:	f7ff fed0 	bl	800e5b0 <expand_right_edge>
}
 800e810:	bf00      	nop
 800e812:	3710      	adds	r7, #16
 800e814:	46bd      	mov	sp, r7
 800e816:	bd80      	pop	{r7, pc}

0800e818 <h2v1_downsample>:
 */

METHODDEF(void)
h2v1_downsample (j_compress_ptr cinfo, jpeg_component_info * compptr,
		 JSAMPARRAY input_data, JSAMPARRAY output_data)
{
 800e818:	b5f0      	push	{r4, r5, r6, r7, lr}
 800e81a:	b089      	sub	sp, #36	@ 0x24
 800e81c:	af00      	add	r7, sp, #0
 800e81e:	60f8      	str	r0, [r7, #12]
 800e820:	60b9      	str	r1, [r7, #8]
 800e822:	607a      	str	r2, [r7, #4]
 800e824:	603b      	str	r3, [r7, #0]
  int inrow;
  JDIMENSION outcol;
  JDIMENSION output_cols = compptr->width_in_blocks * compptr->DCT_h_scaled_size;
 800e826:	68bb      	ldr	r3, [r7, #8]
 800e828:	69db      	ldr	r3, [r3, #28]
 800e82a:	68ba      	ldr	r2, [r7, #8]
 800e82c:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 800e82e:	fb02 f303 	mul.w	r3, r2, r3
 800e832:	617b      	str	r3, [r7, #20]

  /* Expand input data enough to let all the output samples be generated
   * by the standard loop.  Special-casing padded output would be more
   * efficient.
   */
  expand_right_edge(input_data, cinfo->max_v_samp_factor,
 800e834:	68fb      	ldr	r3, [r7, #12]
 800e836:	f8d3 1110 	ldr.w	r1, [r3, #272]	@ 0x110
 800e83a:	68fb      	ldr	r3, [r7, #12]
 800e83c:	69da      	ldr	r2, [r3, #28]
 800e83e:	697b      	ldr	r3, [r7, #20]
 800e840:	005b      	lsls	r3, r3, #1
 800e842:	6878      	ldr	r0, [r7, #4]
 800e844:	f7ff feb4 	bl	800e5b0 <expand_right_edge>
		    cinfo->image_width, output_cols * 2);

  for (inrow = 0; inrow < cinfo->max_v_samp_factor; inrow++) {
 800e848:	2300      	movs	r3, #0
 800e84a:	61fb      	str	r3, [r7, #28]
 800e84c:	e025      	b.n	800e89a <h2v1_downsample+0x82>
    outptr = output_data[inrow];
 800e84e:	69fb      	ldr	r3, [r7, #28]
 800e850:	009b      	lsls	r3, r3, #2
 800e852:	683a      	ldr	r2, [r7, #0]
 800e854:	4413      	add	r3, r2
 800e856:	681e      	ldr	r6, [r3, #0]
    inptr = input_data[inrow];
 800e858:	69fb      	ldr	r3, [r7, #28]
 800e85a:	009b      	lsls	r3, r3, #2
 800e85c:	687a      	ldr	r2, [r7, #4]
 800e85e:	4413      	add	r3, r2
 800e860:	681c      	ldr	r4, [r3, #0]
    bias = 0;			/* bias = 0,1,0,1,... for successive samples */
 800e862:	2500      	movs	r5, #0
    for (outcol = 0; outcol < output_cols; outcol++) {
 800e864:	2300      	movs	r3, #0
 800e866:	61bb      	str	r3, [r7, #24]
 800e868:	e010      	b.n	800e88c <h2v1_downsample+0x74>
      *outptr++ = (JSAMPLE) ((GETJSAMPLE(*inptr) + GETJSAMPLE(inptr[1])
 800e86a:	7823      	ldrb	r3, [r4, #0]
 800e86c:	461a      	mov	r2, r3
 800e86e:	1c63      	adds	r3, r4, #1
 800e870:	781b      	ldrb	r3, [r3, #0]
 800e872:	4413      	add	r3, r2
			      + bias) >> 1);
 800e874:	442b      	add	r3, r5
 800e876:	105a      	asrs	r2, r3, #1
      *outptr++ = (JSAMPLE) ((GETJSAMPLE(*inptr) + GETJSAMPLE(inptr[1])
 800e878:	4633      	mov	r3, r6
 800e87a:	1c5e      	adds	r6, r3, #1
 800e87c:	b2d2      	uxtb	r2, r2
 800e87e:	701a      	strb	r2, [r3, #0]
      bias ^= 1;		/* 0=>1, 1=>0 */
 800e880:	f085 0501 	eor.w	r5, r5, #1
      inptr += 2;
 800e884:	3402      	adds	r4, #2
    for (outcol = 0; outcol < output_cols; outcol++) {
 800e886:	69bb      	ldr	r3, [r7, #24]
 800e888:	3301      	adds	r3, #1
 800e88a:	61bb      	str	r3, [r7, #24]
 800e88c:	69ba      	ldr	r2, [r7, #24]
 800e88e:	697b      	ldr	r3, [r7, #20]
 800e890:	429a      	cmp	r2, r3
 800e892:	d3ea      	bcc.n	800e86a <h2v1_downsample+0x52>
  for (inrow = 0; inrow < cinfo->max_v_samp_factor; inrow++) {
 800e894:	69fb      	ldr	r3, [r7, #28]
 800e896:	3301      	adds	r3, #1
 800e898:	61fb      	str	r3, [r7, #28]
 800e89a:	68fb      	ldr	r3, [r7, #12]
 800e89c:	f8d3 3110 	ldr.w	r3, [r3, #272]	@ 0x110
 800e8a0:	69fa      	ldr	r2, [r7, #28]
 800e8a2:	429a      	cmp	r2, r3
 800e8a4:	dbd3      	blt.n	800e84e <h2v1_downsample+0x36>
    }
  }
}
 800e8a6:	bf00      	nop
 800e8a8:	bf00      	nop
 800e8aa:	3724      	adds	r7, #36	@ 0x24
 800e8ac:	46bd      	mov	sp, r7
 800e8ae:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800e8b0 <h2v2_downsample>:
 */

METHODDEF(void)
h2v2_downsample (j_compress_ptr cinfo, jpeg_component_info * compptr,
		 JSAMPARRAY input_data, JSAMPARRAY output_data)
{
 800e8b0:	b5f0      	push	{r4, r5, r6, r7, lr}
 800e8b2:	b089      	sub	sp, #36	@ 0x24
 800e8b4:	af00      	add	r7, sp, #0
 800e8b6:	60f8      	str	r0, [r7, #12]
 800e8b8:	60b9      	str	r1, [r7, #8]
 800e8ba:	607a      	str	r2, [r7, #4]
 800e8bc:	603b      	str	r3, [r7, #0]
  int inrow, outrow;
  JDIMENSION outcol;
  JDIMENSION output_cols = compptr->width_in_blocks * compptr->DCT_h_scaled_size;
 800e8be:	68bb      	ldr	r3, [r7, #8]
 800e8c0:	69db      	ldr	r3, [r3, #28]
 800e8c2:	68ba      	ldr	r2, [r7, #8]
 800e8c4:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 800e8c6:	fb02 f303 	mul.w	r3, r2, r3
 800e8ca:	613b      	str	r3, [r7, #16]

  /* Expand input data enough to let all the output samples be generated
   * by the standard loop.  Special-casing padded output would be more
   * efficient.
   */
  expand_right_edge(input_data, cinfo->max_v_samp_factor,
 800e8cc:	68fb      	ldr	r3, [r7, #12]
 800e8ce:	f8d3 1110 	ldr.w	r1, [r3, #272]	@ 0x110
 800e8d2:	68fb      	ldr	r3, [r7, #12]
 800e8d4:	69da      	ldr	r2, [r3, #28]
 800e8d6:	693b      	ldr	r3, [r7, #16]
 800e8d8:	005b      	lsls	r3, r3, #1
 800e8da:	6878      	ldr	r0, [r7, #4]
 800e8dc:	f7ff fe68 	bl	800e5b0 <expand_right_edge>
		    cinfo->image_width, output_cols * 2);

  inrow = outrow = 0;
 800e8e0:	2300      	movs	r3, #0
 800e8e2:	61bb      	str	r3, [r7, #24]
 800e8e4:	69bb      	ldr	r3, [r7, #24]
 800e8e6:	61fb      	str	r3, [r7, #28]
  while (inrow < cinfo->max_v_samp_factor) {
 800e8e8:	e035      	b.n	800e956 <h2v2_downsample+0xa6>
    outptr = output_data[outrow];
 800e8ea:	69bb      	ldr	r3, [r7, #24]
 800e8ec:	009b      	lsls	r3, r3, #2
 800e8ee:	683a      	ldr	r2, [r7, #0]
 800e8f0:	4413      	add	r3, r2
 800e8f2:	681b      	ldr	r3, [r3, #0]
 800e8f4:	4619      	mov	r1, r3
    inptr0 = input_data[inrow];
 800e8f6:	69fb      	ldr	r3, [r7, #28]
 800e8f8:	009b      	lsls	r3, r3, #2
 800e8fa:	687a      	ldr	r2, [r7, #4]
 800e8fc:	4413      	add	r3, r2
 800e8fe:	681c      	ldr	r4, [r3, #0]
    inptr1 = input_data[inrow+1];
 800e900:	69fb      	ldr	r3, [r7, #28]
 800e902:	3301      	adds	r3, #1
 800e904:	009b      	lsls	r3, r3, #2
 800e906:	687a      	ldr	r2, [r7, #4]
 800e908:	4413      	add	r3, r2
 800e90a:	681d      	ldr	r5, [r3, #0]
    bias = 1;			/* bias = 1,2,1,2,... for successive samples */
 800e90c:	2601      	movs	r6, #1
    for (outcol = 0; outcol < output_cols; outcol++) {
 800e90e:	2300      	movs	r3, #0
 800e910:	617b      	str	r3, [r7, #20]
 800e912:	e016      	b.n	800e942 <h2v2_downsample+0x92>
      *outptr++ = (JSAMPLE) ((GETJSAMPLE(*inptr0) + GETJSAMPLE(inptr0[1]) +
 800e914:	7823      	ldrb	r3, [r4, #0]
 800e916:	461a      	mov	r2, r3
 800e918:	1c63      	adds	r3, r4, #1
 800e91a:	781b      	ldrb	r3, [r3, #0]
 800e91c:	4413      	add	r3, r2
			      GETJSAMPLE(*inptr1) + GETJSAMPLE(inptr1[1])
 800e91e:	782a      	ldrb	r2, [r5, #0]
      *outptr++ = (JSAMPLE) ((GETJSAMPLE(*inptr0) + GETJSAMPLE(inptr0[1]) +
 800e920:	4413      	add	r3, r2
			      GETJSAMPLE(*inptr1) + GETJSAMPLE(inptr1[1])
 800e922:	1c6a      	adds	r2, r5, #1
 800e924:	7812      	ldrb	r2, [r2, #0]
 800e926:	4413      	add	r3, r2
			      + bias) >> 2);
 800e928:	4433      	add	r3, r6
 800e92a:	109a      	asrs	r2, r3, #2
      *outptr++ = (JSAMPLE) ((GETJSAMPLE(*inptr0) + GETJSAMPLE(inptr0[1]) +
 800e92c:	460b      	mov	r3, r1
 800e92e:	1c59      	adds	r1, r3, #1
 800e930:	b2d2      	uxtb	r2, r2
 800e932:	701a      	strb	r2, [r3, #0]
      bias ^= 3;		/* 1=>2, 2=>1 */
 800e934:	f086 0603 	eor.w	r6, r6, #3
      inptr0 += 2; inptr1 += 2;
 800e938:	3402      	adds	r4, #2
 800e93a:	3502      	adds	r5, #2
    for (outcol = 0; outcol < output_cols; outcol++) {
 800e93c:	697b      	ldr	r3, [r7, #20]
 800e93e:	3301      	adds	r3, #1
 800e940:	617b      	str	r3, [r7, #20]
 800e942:	697a      	ldr	r2, [r7, #20]
 800e944:	693b      	ldr	r3, [r7, #16]
 800e946:	429a      	cmp	r2, r3
 800e948:	d3e4      	bcc.n	800e914 <h2v2_downsample+0x64>
    }
    inrow += 2;
 800e94a:	69fb      	ldr	r3, [r7, #28]
 800e94c:	3302      	adds	r3, #2
 800e94e:	61fb      	str	r3, [r7, #28]
    outrow++;
 800e950:	69bb      	ldr	r3, [r7, #24]
 800e952:	3301      	adds	r3, #1
 800e954:	61bb      	str	r3, [r7, #24]
  while (inrow < cinfo->max_v_samp_factor) {
 800e956:	68fb      	ldr	r3, [r7, #12]
 800e958:	f8d3 3110 	ldr.w	r3, [r3, #272]	@ 0x110
 800e95c:	69fa      	ldr	r2, [r7, #28]
 800e95e:	429a      	cmp	r2, r3
 800e960:	dbc3      	blt.n	800e8ea <h2v2_downsample+0x3a>
  }
}
 800e962:	bf00      	nop
 800e964:	bf00      	nop
 800e966:	3724      	adds	r7, #36	@ 0x24
 800e968:	46bd      	mov	sp, r7
 800e96a:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800e96c <h2v2_smooth_downsample>:
 */

METHODDEF(void)
h2v2_smooth_downsample (j_compress_ptr cinfo, jpeg_component_info * compptr,
			JSAMPARRAY input_data, JSAMPARRAY output_data)
{
 800e96c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800e96e:	b08f      	sub	sp, #60	@ 0x3c
 800e970:	af00      	add	r7, sp, #0
 800e972:	6178      	str	r0, [r7, #20]
 800e974:	6139      	str	r1, [r7, #16]
 800e976:	60fa      	str	r2, [r7, #12]
 800e978:	60bb      	str	r3, [r7, #8]
  int inrow, outrow;
  JDIMENSION colctr;
  JDIMENSION output_cols = compptr->width_in_blocks * compptr->DCT_h_scaled_size;
 800e97a:	693b      	ldr	r3, [r7, #16]
 800e97c:	69db      	ldr	r3, [r3, #28]
 800e97e:	693a      	ldr	r2, [r7, #16]
 800e980:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 800e982:	fb02 f303 	mul.w	r3, r2, r3
 800e986:	62bb      	str	r3, [r7, #40]	@ 0x28

  /* Expand input data enough to let all the output samples be generated
   * by the standard loop.  Special-casing padded output would be more
   * efficient.
   */
  expand_right_edge(input_data - 1, cinfo->max_v_samp_factor + 2,
 800e988:	68fb      	ldr	r3, [r7, #12]
 800e98a:	1f18      	subs	r0, r3, #4
 800e98c:	697b      	ldr	r3, [r7, #20]
 800e98e:	f8d3 3110 	ldr.w	r3, [r3, #272]	@ 0x110
 800e992:	1c99      	adds	r1, r3, #2
 800e994:	697b      	ldr	r3, [r7, #20]
 800e996:	69da      	ldr	r2, [r3, #28]
 800e998:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800e99a:	005b      	lsls	r3, r3, #1
 800e99c:	f7ff fe08 	bl	800e5b0 <expand_right_edge>
   * pixels, or SF/2 overall.  In order to use integer arithmetic, these
   * factors are scaled by 2^16 = 65536.
   * Also recall that SF = smoothing_factor / 1024.
   */

  memberscale = 16384 - cinfo->smoothing_factor * 80; /* scaled (1-5*SF)/4 */
 800e9a0:	697b      	ldr	r3, [r7, #20]
 800e9a2:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 800e9a6:	f06f 024f 	mvn.w	r2, #79	@ 0x4f
 800e9aa:	fb02 f303 	mul.w	r3, r2, r3
 800e9ae:	f503 4380 	add.w	r3, r3, #16384	@ 0x4000
 800e9b2:	627b      	str	r3, [r7, #36]	@ 0x24
  neighscale = cinfo->smoothing_factor * 16; /* scaled SF/4 */
 800e9b4:	697b      	ldr	r3, [r7, #20]
 800e9b6:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 800e9ba:	011b      	lsls	r3, r3, #4
 800e9bc:	623b      	str	r3, [r7, #32]

  inrow = outrow = 0;
 800e9be:	2300      	movs	r3, #0
 800e9c0:	633b      	str	r3, [r7, #48]	@ 0x30
 800e9c2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800e9c4:	637b      	str	r3, [r7, #52]	@ 0x34
  while (inrow < cinfo->max_v_samp_factor) {
 800e9c6:	e109      	b.n	800ebdc <h2v2_smooth_downsample+0x270>
    outptr = output_data[outrow];
 800e9c8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800e9ca:	009b      	lsls	r3, r3, #2
 800e9cc:	68ba      	ldr	r2, [r7, #8]
 800e9ce:	4413      	add	r3, r2
 800e9d0:	681b      	ldr	r3, [r3, #0]
 800e9d2:	607b      	str	r3, [r7, #4]
    inptr0 = input_data[inrow];
 800e9d4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800e9d6:	009b      	lsls	r3, r3, #2
 800e9d8:	68fa      	ldr	r2, [r7, #12]
 800e9da:	4413      	add	r3, r2
 800e9dc:	6818      	ldr	r0, [r3, #0]
    inptr1 = input_data[inrow+1];
 800e9de:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800e9e0:	3301      	adds	r3, #1
 800e9e2:	009b      	lsls	r3, r3, #2
 800e9e4:	68fa      	ldr	r2, [r7, #12]
 800e9e6:	4413      	add	r3, r2
 800e9e8:	681e      	ldr	r6, [r3, #0]
    above_ptr = input_data[inrow-1];
 800e9ea:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800e9ec:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800e9f0:	3b01      	subs	r3, #1
 800e9f2:	009b      	lsls	r3, r3, #2
 800e9f4:	68fa      	ldr	r2, [r7, #12]
 800e9f6:	4413      	add	r3, r2
 800e9f8:	681d      	ldr	r5, [r3, #0]
    below_ptr = input_data[inrow+2];
 800e9fa:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800e9fc:	3302      	adds	r3, #2
 800e9fe:	009b      	lsls	r3, r3, #2
 800ea00:	68fa      	ldr	r2, [r7, #12]
 800ea02:	4413      	add	r3, r2
 800ea04:	681c      	ldr	r4, [r3, #0]

    /* Special case for first column: pretend column -1 is same as column 0 */
    membersum = GETJSAMPLE(*inptr0) + GETJSAMPLE(inptr0[1]) +
 800ea06:	7803      	ldrb	r3, [r0, #0]
 800ea08:	461a      	mov	r2, r3
 800ea0a:	1c43      	adds	r3, r0, #1
 800ea0c:	781b      	ldrb	r3, [r3, #0]
 800ea0e:	4413      	add	r3, r2
		GETJSAMPLE(*inptr1) + GETJSAMPLE(inptr1[1]);
 800ea10:	7832      	ldrb	r2, [r6, #0]
    membersum = GETJSAMPLE(*inptr0) + GETJSAMPLE(inptr0[1]) +
 800ea12:	4413      	add	r3, r2
		GETJSAMPLE(*inptr1) + GETJSAMPLE(inptr1[1]);
 800ea14:	1c72      	adds	r2, r6, #1
 800ea16:	7812      	ldrb	r2, [r2, #0]
    membersum = GETJSAMPLE(*inptr0) + GETJSAMPLE(inptr0[1]) +
 800ea18:	4413      	add	r3, r2
 800ea1a:	61fb      	str	r3, [r7, #28]
    neighsum = GETJSAMPLE(*above_ptr) + GETJSAMPLE(above_ptr[1]) +
 800ea1c:	782b      	ldrb	r3, [r5, #0]
 800ea1e:	461a      	mov	r2, r3
 800ea20:	1c6b      	adds	r3, r5, #1
 800ea22:	781b      	ldrb	r3, [r3, #0]
 800ea24:	4413      	add	r3, r2
	       GETJSAMPLE(*below_ptr) + GETJSAMPLE(below_ptr[1]) +
 800ea26:	7822      	ldrb	r2, [r4, #0]
    neighsum = GETJSAMPLE(*above_ptr) + GETJSAMPLE(above_ptr[1]) +
 800ea28:	4413      	add	r3, r2
	       GETJSAMPLE(*below_ptr) + GETJSAMPLE(below_ptr[1]) +
 800ea2a:	1c62      	adds	r2, r4, #1
 800ea2c:	7812      	ldrb	r2, [r2, #0]
 800ea2e:	4413      	add	r3, r2
	       GETJSAMPLE(*inptr0) + GETJSAMPLE(inptr0[2]) +
 800ea30:	7802      	ldrb	r2, [r0, #0]
	       GETJSAMPLE(*below_ptr) + GETJSAMPLE(below_ptr[1]) +
 800ea32:	4413      	add	r3, r2
	       GETJSAMPLE(*inptr0) + GETJSAMPLE(inptr0[2]) +
 800ea34:	1c82      	adds	r2, r0, #2
 800ea36:	7812      	ldrb	r2, [r2, #0]
 800ea38:	4413      	add	r3, r2
	       GETJSAMPLE(*inptr1) + GETJSAMPLE(inptr1[2]);
 800ea3a:	7832      	ldrb	r2, [r6, #0]
	       GETJSAMPLE(*inptr0) + GETJSAMPLE(inptr0[2]) +
 800ea3c:	4413      	add	r3, r2
	       GETJSAMPLE(*inptr1) + GETJSAMPLE(inptr1[2]);
 800ea3e:	1cb2      	adds	r2, r6, #2
 800ea40:	7812      	ldrb	r2, [r2, #0]
    neighsum = GETJSAMPLE(*above_ptr) + GETJSAMPLE(above_ptr[1]) +
 800ea42:	4413      	add	r3, r2
 800ea44:	61bb      	str	r3, [r7, #24]
    neighsum += neighsum;
 800ea46:	69bb      	ldr	r3, [r7, #24]
 800ea48:	005b      	lsls	r3, r3, #1
 800ea4a:	61bb      	str	r3, [r7, #24]
    neighsum += GETJSAMPLE(*above_ptr) + GETJSAMPLE(above_ptr[2]) +
 800ea4c:	782b      	ldrb	r3, [r5, #0]
 800ea4e:	461a      	mov	r2, r3
 800ea50:	1cab      	adds	r3, r5, #2
 800ea52:	781b      	ldrb	r3, [r3, #0]
 800ea54:	4413      	add	r3, r2
		GETJSAMPLE(*below_ptr) + GETJSAMPLE(below_ptr[2]);
 800ea56:	7822      	ldrb	r2, [r4, #0]
    neighsum += GETJSAMPLE(*above_ptr) + GETJSAMPLE(above_ptr[2]) +
 800ea58:	4413      	add	r3, r2
		GETJSAMPLE(*below_ptr) + GETJSAMPLE(below_ptr[2]);
 800ea5a:	1ca2      	adds	r2, r4, #2
 800ea5c:	7812      	ldrb	r2, [r2, #0]
 800ea5e:	4413      	add	r3, r2
    neighsum += GETJSAMPLE(*above_ptr) + GETJSAMPLE(above_ptr[2]) +
 800ea60:	69ba      	ldr	r2, [r7, #24]
 800ea62:	4413      	add	r3, r2
 800ea64:	61bb      	str	r3, [r7, #24]
    membersum = membersum * memberscale + neighsum * neighscale;
 800ea66:	69fb      	ldr	r3, [r7, #28]
 800ea68:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800ea6a:	fb03 f202 	mul.w	r2, r3, r2
 800ea6e:	69bb      	ldr	r3, [r7, #24]
 800ea70:	6a39      	ldr	r1, [r7, #32]
 800ea72:	fb01 f303 	mul.w	r3, r1, r3
 800ea76:	4413      	add	r3, r2
 800ea78:	61fb      	str	r3, [r7, #28]
    *outptr++ = (JSAMPLE) ((membersum + 32768) >> 16);
 800ea7a:	69fb      	ldr	r3, [r7, #28]
 800ea7c:	f503 4300 	add.w	r3, r3, #32768	@ 0x8000
 800ea80:	141a      	asrs	r2, r3, #16
 800ea82:	687b      	ldr	r3, [r7, #4]
 800ea84:	1c59      	adds	r1, r3, #1
 800ea86:	6079      	str	r1, [r7, #4]
 800ea88:	b2d2      	uxtb	r2, r2
 800ea8a:	701a      	strb	r2, [r3, #0]
    inptr0 += 2; inptr1 += 2; above_ptr += 2; below_ptr += 2;
 800ea8c:	1c83      	adds	r3, r0, #2
 800ea8e:	461a      	mov	r2, r3
 800ea90:	3602      	adds	r6, #2
 800ea92:	3502      	adds	r5, #2
 800ea94:	3402      	adds	r4, #2

    for (colctr = output_cols - 2; colctr > 0; colctr--) {
 800ea96:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800ea98:	3b02      	subs	r3, #2
 800ea9a:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800ea9c:	e04f      	b.n	800eb3e <h2v2_smooth_downsample+0x1d2>
      /* sum of pixels directly mapped to this output element */
      membersum = GETJSAMPLE(*inptr0) + GETJSAMPLE(inptr0[1]) +
 800ea9e:	4610      	mov	r0, r2
 800eaa0:	7803      	ldrb	r3, [r0, #0]
 800eaa2:	461a      	mov	r2, r3
 800eaa4:	1c43      	adds	r3, r0, #1
 800eaa6:	781b      	ldrb	r3, [r3, #0]
 800eaa8:	4413      	add	r3, r2
		  GETJSAMPLE(*inptr1) + GETJSAMPLE(inptr1[1]);
 800eaaa:	7832      	ldrb	r2, [r6, #0]
      membersum = GETJSAMPLE(*inptr0) + GETJSAMPLE(inptr0[1]) +
 800eaac:	4413      	add	r3, r2
		  GETJSAMPLE(*inptr1) + GETJSAMPLE(inptr1[1]);
 800eaae:	1c72      	adds	r2, r6, #1
 800eab0:	7812      	ldrb	r2, [r2, #0]
      membersum = GETJSAMPLE(*inptr0) + GETJSAMPLE(inptr0[1]) +
 800eab2:	4413      	add	r3, r2
 800eab4:	61fb      	str	r3, [r7, #28]
      /* sum of edge-neighbor pixels */
      neighsum = GETJSAMPLE(*above_ptr) + GETJSAMPLE(above_ptr[1]) +
 800eab6:	782b      	ldrb	r3, [r5, #0]
 800eab8:	461a      	mov	r2, r3
 800eaba:	1c6b      	adds	r3, r5, #1
 800eabc:	781b      	ldrb	r3, [r3, #0]
 800eabe:	4413      	add	r3, r2
		 GETJSAMPLE(*below_ptr) + GETJSAMPLE(below_ptr[1]) +
 800eac0:	7822      	ldrb	r2, [r4, #0]
      neighsum = GETJSAMPLE(*above_ptr) + GETJSAMPLE(above_ptr[1]) +
 800eac2:	4413      	add	r3, r2
		 GETJSAMPLE(*below_ptr) + GETJSAMPLE(below_ptr[1]) +
 800eac4:	1c62      	adds	r2, r4, #1
 800eac6:	7812      	ldrb	r2, [r2, #0]
 800eac8:	4413      	add	r3, r2
		 GETJSAMPLE(inptr0[-1]) + GETJSAMPLE(inptr0[2]) +
 800eaca:	1e42      	subs	r2, r0, #1
 800eacc:	7812      	ldrb	r2, [r2, #0]
		 GETJSAMPLE(*below_ptr) + GETJSAMPLE(below_ptr[1]) +
 800eace:	4413      	add	r3, r2
		 GETJSAMPLE(inptr0[-1]) + GETJSAMPLE(inptr0[2]) +
 800ead0:	1c82      	adds	r2, r0, #2
 800ead2:	7812      	ldrb	r2, [r2, #0]
 800ead4:	4413      	add	r3, r2
		 GETJSAMPLE(inptr1[-1]) + GETJSAMPLE(inptr1[2]);
 800ead6:	1e72      	subs	r2, r6, #1
 800ead8:	7812      	ldrb	r2, [r2, #0]
		 GETJSAMPLE(inptr0[-1]) + GETJSAMPLE(inptr0[2]) +
 800eada:	4413      	add	r3, r2
		 GETJSAMPLE(inptr1[-1]) + GETJSAMPLE(inptr1[2]);
 800eadc:	1cb2      	adds	r2, r6, #2
 800eade:	7812      	ldrb	r2, [r2, #0]
      neighsum = GETJSAMPLE(*above_ptr) + GETJSAMPLE(above_ptr[1]) +
 800eae0:	4413      	add	r3, r2
 800eae2:	61bb      	str	r3, [r7, #24]
      /* The edge-neighbors count twice as much as corner-neighbors */
      neighsum += neighsum;
 800eae4:	69bb      	ldr	r3, [r7, #24]
 800eae6:	005b      	lsls	r3, r3, #1
 800eae8:	61bb      	str	r3, [r7, #24]
      /* Add in the corner-neighbors */
      neighsum += GETJSAMPLE(above_ptr[-1]) + GETJSAMPLE(above_ptr[2]) +
 800eaea:	1e6b      	subs	r3, r5, #1
 800eaec:	781b      	ldrb	r3, [r3, #0]
 800eaee:	461a      	mov	r2, r3
 800eaf0:	1cab      	adds	r3, r5, #2
 800eaf2:	781b      	ldrb	r3, [r3, #0]
 800eaf4:	4413      	add	r3, r2
		  GETJSAMPLE(below_ptr[-1]) + GETJSAMPLE(below_ptr[2]);
 800eaf6:	1e62      	subs	r2, r4, #1
 800eaf8:	7812      	ldrb	r2, [r2, #0]
      neighsum += GETJSAMPLE(above_ptr[-1]) + GETJSAMPLE(above_ptr[2]) +
 800eafa:	4413      	add	r3, r2
		  GETJSAMPLE(below_ptr[-1]) + GETJSAMPLE(below_ptr[2]);
 800eafc:	1ca2      	adds	r2, r4, #2
 800eafe:	7812      	ldrb	r2, [r2, #0]
 800eb00:	4413      	add	r3, r2
      neighsum += GETJSAMPLE(above_ptr[-1]) + GETJSAMPLE(above_ptr[2]) +
 800eb02:	69ba      	ldr	r2, [r7, #24]
 800eb04:	4413      	add	r3, r2
 800eb06:	61bb      	str	r3, [r7, #24]
      /* form final output scaled up by 2^16 */
      membersum = membersum * memberscale + neighsum * neighscale;
 800eb08:	69fb      	ldr	r3, [r7, #28]
 800eb0a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800eb0c:	fb03 f202 	mul.w	r2, r3, r2
 800eb10:	69bb      	ldr	r3, [r7, #24]
 800eb12:	6a39      	ldr	r1, [r7, #32]
 800eb14:	fb01 f303 	mul.w	r3, r1, r3
 800eb18:	4413      	add	r3, r2
 800eb1a:	61fb      	str	r3, [r7, #28]
      /* round, descale and output it */
      *outptr++ = (JSAMPLE) ((membersum + 32768) >> 16);
 800eb1c:	69fb      	ldr	r3, [r7, #28]
 800eb1e:	f503 4300 	add.w	r3, r3, #32768	@ 0x8000
 800eb22:	141a      	asrs	r2, r3, #16
 800eb24:	687b      	ldr	r3, [r7, #4]
 800eb26:	1c59      	adds	r1, r3, #1
 800eb28:	6079      	str	r1, [r7, #4]
 800eb2a:	b2d2      	uxtb	r2, r2
 800eb2c:	701a      	strb	r2, [r3, #0]
      inptr0 += 2; inptr1 += 2; above_ptr += 2; below_ptr += 2;
 800eb2e:	1c83      	adds	r3, r0, #2
 800eb30:	461a      	mov	r2, r3
 800eb32:	3602      	adds	r6, #2
 800eb34:	3502      	adds	r5, #2
 800eb36:	3402      	adds	r4, #2
    for (colctr = output_cols - 2; colctr > 0; colctr--) {
 800eb38:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800eb3a:	3b01      	subs	r3, #1
 800eb3c:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800eb3e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800eb40:	2b00      	cmp	r3, #0
 800eb42:	d1ac      	bne.n	800ea9e <h2v2_smooth_downsample+0x132>
    }

    /* Special case for last column */
    membersum = GETJSAMPLE(*inptr0) + GETJSAMPLE(inptr0[1]) +
 800eb44:	4611      	mov	r1, r2
 800eb46:	780b      	ldrb	r3, [r1, #0]
 800eb48:	461a      	mov	r2, r3
 800eb4a:	1c4b      	adds	r3, r1, #1
 800eb4c:	781b      	ldrb	r3, [r3, #0]
 800eb4e:	4413      	add	r3, r2
		GETJSAMPLE(*inptr1) + GETJSAMPLE(inptr1[1]);
 800eb50:	7832      	ldrb	r2, [r6, #0]
    membersum = GETJSAMPLE(*inptr0) + GETJSAMPLE(inptr0[1]) +
 800eb52:	4413      	add	r3, r2
		GETJSAMPLE(*inptr1) + GETJSAMPLE(inptr1[1]);
 800eb54:	1c72      	adds	r2, r6, #1
 800eb56:	7812      	ldrb	r2, [r2, #0]
    membersum = GETJSAMPLE(*inptr0) + GETJSAMPLE(inptr0[1]) +
 800eb58:	4413      	add	r3, r2
 800eb5a:	61fb      	str	r3, [r7, #28]
    neighsum = GETJSAMPLE(*above_ptr) + GETJSAMPLE(above_ptr[1]) +
 800eb5c:	782b      	ldrb	r3, [r5, #0]
 800eb5e:	461a      	mov	r2, r3
 800eb60:	1c6b      	adds	r3, r5, #1
 800eb62:	781b      	ldrb	r3, [r3, #0]
 800eb64:	4413      	add	r3, r2
	       GETJSAMPLE(*below_ptr) + GETJSAMPLE(below_ptr[1]) +
 800eb66:	7822      	ldrb	r2, [r4, #0]
    neighsum = GETJSAMPLE(*above_ptr) + GETJSAMPLE(above_ptr[1]) +
 800eb68:	4413      	add	r3, r2
	       GETJSAMPLE(*below_ptr) + GETJSAMPLE(below_ptr[1]) +
 800eb6a:	1c62      	adds	r2, r4, #1
 800eb6c:	7812      	ldrb	r2, [r2, #0]
 800eb6e:	4413      	add	r3, r2
	       GETJSAMPLE(inptr0[-1]) + GETJSAMPLE(inptr0[1]) +
 800eb70:	1e4a      	subs	r2, r1, #1
 800eb72:	7812      	ldrb	r2, [r2, #0]
	       GETJSAMPLE(*below_ptr) + GETJSAMPLE(below_ptr[1]) +
 800eb74:	4413      	add	r3, r2
	       GETJSAMPLE(inptr0[-1]) + GETJSAMPLE(inptr0[1]) +
 800eb76:	1c4a      	adds	r2, r1, #1
 800eb78:	7812      	ldrb	r2, [r2, #0]
 800eb7a:	4413      	add	r3, r2
	       GETJSAMPLE(inptr1[-1]) + GETJSAMPLE(inptr1[1]);
 800eb7c:	1e72      	subs	r2, r6, #1
 800eb7e:	7812      	ldrb	r2, [r2, #0]
	       GETJSAMPLE(inptr0[-1]) + GETJSAMPLE(inptr0[1]) +
 800eb80:	4413      	add	r3, r2
	       GETJSAMPLE(inptr1[-1]) + GETJSAMPLE(inptr1[1]);
 800eb82:	1c72      	adds	r2, r6, #1
 800eb84:	7812      	ldrb	r2, [r2, #0]
    neighsum = GETJSAMPLE(*above_ptr) + GETJSAMPLE(above_ptr[1]) +
 800eb86:	4413      	add	r3, r2
 800eb88:	61bb      	str	r3, [r7, #24]
    neighsum += neighsum;
 800eb8a:	69bb      	ldr	r3, [r7, #24]
 800eb8c:	005b      	lsls	r3, r3, #1
 800eb8e:	61bb      	str	r3, [r7, #24]
    neighsum += GETJSAMPLE(above_ptr[-1]) + GETJSAMPLE(above_ptr[1]) +
 800eb90:	1e6b      	subs	r3, r5, #1
 800eb92:	781b      	ldrb	r3, [r3, #0]
 800eb94:	461a      	mov	r2, r3
 800eb96:	1c6b      	adds	r3, r5, #1
 800eb98:	781b      	ldrb	r3, [r3, #0]
 800eb9a:	4413      	add	r3, r2
		GETJSAMPLE(below_ptr[-1]) + GETJSAMPLE(below_ptr[1]);
 800eb9c:	1e62      	subs	r2, r4, #1
 800eb9e:	7812      	ldrb	r2, [r2, #0]
    neighsum += GETJSAMPLE(above_ptr[-1]) + GETJSAMPLE(above_ptr[1]) +
 800eba0:	4413      	add	r3, r2
		GETJSAMPLE(below_ptr[-1]) + GETJSAMPLE(below_ptr[1]);
 800eba2:	1c62      	adds	r2, r4, #1
 800eba4:	7812      	ldrb	r2, [r2, #0]
 800eba6:	4413      	add	r3, r2
    neighsum += GETJSAMPLE(above_ptr[-1]) + GETJSAMPLE(above_ptr[1]) +
 800eba8:	69ba      	ldr	r2, [r7, #24]
 800ebaa:	4413      	add	r3, r2
 800ebac:	61bb      	str	r3, [r7, #24]
    membersum = membersum * memberscale + neighsum * neighscale;
 800ebae:	69fb      	ldr	r3, [r7, #28]
 800ebb0:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800ebb2:	fb03 f202 	mul.w	r2, r3, r2
 800ebb6:	69bb      	ldr	r3, [r7, #24]
 800ebb8:	6a39      	ldr	r1, [r7, #32]
 800ebba:	fb01 f303 	mul.w	r3, r1, r3
 800ebbe:	4413      	add	r3, r2
 800ebc0:	61fb      	str	r3, [r7, #28]
    *outptr = (JSAMPLE) ((membersum + 32768) >> 16);
 800ebc2:	69fb      	ldr	r3, [r7, #28]
 800ebc4:	f503 4300 	add.w	r3, r3, #32768	@ 0x8000
 800ebc8:	141b      	asrs	r3, r3, #16
 800ebca:	b2db      	uxtb	r3, r3
 800ebcc:	687a      	ldr	r2, [r7, #4]
 800ebce:	7013      	strb	r3, [r2, #0]

    inrow += 2;
 800ebd0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800ebd2:	3302      	adds	r3, #2
 800ebd4:	637b      	str	r3, [r7, #52]	@ 0x34
    outrow++;
 800ebd6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ebd8:	3301      	adds	r3, #1
 800ebda:	633b      	str	r3, [r7, #48]	@ 0x30
  while (inrow < cinfo->max_v_samp_factor) {
 800ebdc:	697b      	ldr	r3, [r7, #20]
 800ebde:	f8d3 3110 	ldr.w	r3, [r3, #272]	@ 0x110
 800ebe2:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800ebe4:	429a      	cmp	r2, r3
 800ebe6:	f6ff aeef 	blt.w	800e9c8 <h2v2_smooth_downsample+0x5c>
  }
}
 800ebea:	bf00      	nop
 800ebec:	bf00      	nop
 800ebee:	373c      	adds	r7, #60	@ 0x3c
 800ebf0:	46bd      	mov	sp, r7
 800ebf2:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800ebf4 <fullsize_smooth_downsample>:
 */

METHODDEF(void)
fullsize_smooth_downsample (j_compress_ptr cinfo, jpeg_component_info *compptr,
			    JSAMPARRAY input_data, JSAMPARRAY output_data)
{
 800ebf4:	b5f0      	push	{r4, r5, r6, r7, lr}
 800ebf6:	b08f      	sub	sp, #60	@ 0x3c
 800ebf8:	af00      	add	r7, sp, #0
 800ebfa:	60f8      	str	r0, [r7, #12]
 800ebfc:	60b9      	str	r1, [r7, #8]
 800ebfe:	607a      	str	r2, [r7, #4]
 800ec00:	603b      	str	r3, [r7, #0]
  int inrow;
  JDIMENSION colctr;
  JDIMENSION output_cols = compptr->width_in_blocks * compptr->DCT_h_scaled_size;
 800ec02:	68bb      	ldr	r3, [r7, #8]
 800ec04:	69db      	ldr	r3, [r3, #28]
 800ec06:	68ba      	ldr	r2, [r7, #8]
 800ec08:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 800ec0a:	fb02 f303 	mul.w	r3, r2, r3
 800ec0e:	627b      	str	r3, [r7, #36]	@ 0x24

  /* Expand input data enough to let all the output samples be generated
   * by the standard loop.  Special-casing padded output would be more
   * efficient.
   */
  expand_right_edge(input_data - 1, cinfo->max_v_samp_factor + 2,
 800ec10:	687b      	ldr	r3, [r7, #4]
 800ec12:	1f18      	subs	r0, r3, #4
 800ec14:	68fb      	ldr	r3, [r7, #12]
 800ec16:	f8d3 3110 	ldr.w	r3, [r3, #272]	@ 0x110
 800ec1a:	1c99      	adds	r1, r3, #2
 800ec1c:	68fb      	ldr	r3, [r7, #12]
 800ec1e:	69da      	ldr	r2, [r3, #28]
 800ec20:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ec22:	f7ff fcc5 	bl	800e5b0 <expand_right_edge>
   * smoothed pixel, while the main pixel contributes (1-8*SF).  In order
   * to use integer arithmetic, these factors are multiplied by 2^16 = 65536.
   * Also recall that SF = smoothing_factor / 1024.
   */

  memberscale = 65536L - cinfo->smoothing_factor * 512L; /* scaled 1-8*SF */
 800ec26:	68fb      	ldr	r3, [r7, #12]
 800ec28:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 800ec2c:	f1c3 0380 	rsb	r3, r3, #128	@ 0x80
 800ec30:	025b      	lsls	r3, r3, #9
 800ec32:	623b      	str	r3, [r7, #32]
  neighscale = cinfo->smoothing_factor * 64; /* scaled SF */
 800ec34:	68fb      	ldr	r3, [r7, #12]
 800ec36:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 800ec3a:	019b      	lsls	r3, r3, #6
 800ec3c:	61fb      	str	r3, [r7, #28]

  for (inrow = 0; inrow < cinfo->max_v_samp_factor; inrow++) {
 800ec3e:	2300      	movs	r3, #0
 800ec40:	637b      	str	r3, [r7, #52]	@ 0x34
 800ec42:	e0a0      	b.n	800ed86 <fullsize_smooth_downsample+0x192>
    outptr = output_data[inrow];
 800ec44:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800ec46:	009b      	lsls	r3, r3, #2
 800ec48:	683a      	ldr	r2, [r7, #0]
 800ec4a:	4413      	add	r3, r2
 800ec4c:	6818      	ldr	r0, [r3, #0]
    inptr = input_data[inrow];
 800ec4e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800ec50:	009b      	lsls	r3, r3, #2
 800ec52:	687a      	ldr	r2, [r7, #4]
 800ec54:	4413      	add	r3, r2
 800ec56:	681c      	ldr	r4, [r3, #0]
    above_ptr = input_data[inrow-1];
 800ec58:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800ec5a:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800ec5e:	3b01      	subs	r3, #1
 800ec60:	009b      	lsls	r3, r3, #2
 800ec62:	687a      	ldr	r2, [r7, #4]
 800ec64:	4413      	add	r3, r2
 800ec66:	681d      	ldr	r5, [r3, #0]
    below_ptr = input_data[inrow+1];
 800ec68:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800ec6a:	3301      	adds	r3, #1
 800ec6c:	009b      	lsls	r3, r3, #2
 800ec6e:	687a      	ldr	r2, [r7, #4]
 800ec70:	4413      	add	r3, r2
 800ec72:	681e      	ldr	r6, [r3, #0]

    /* Special case for first column */
    colsum = GETJSAMPLE(*above_ptr++) + GETJSAMPLE(*below_ptr++) +
 800ec74:	462b      	mov	r3, r5
 800ec76:	1c5d      	adds	r5, r3, #1
 800ec78:	781b      	ldrb	r3, [r3, #0]
 800ec7a:	461a      	mov	r2, r3
 800ec7c:	4633      	mov	r3, r6
 800ec7e:	1c5e      	adds	r6, r3, #1
 800ec80:	781b      	ldrb	r3, [r3, #0]
 800ec82:	4413      	add	r3, r2
	     GETJSAMPLE(*inptr);
 800ec84:	7822      	ldrb	r2, [r4, #0]
    colsum = GETJSAMPLE(*above_ptr++) + GETJSAMPLE(*below_ptr++) +
 800ec86:	4413      	add	r3, r2
 800ec88:	62fb      	str	r3, [r7, #44]	@ 0x2c
    membersum = GETJSAMPLE(*inptr++);
 800ec8a:	4623      	mov	r3, r4
 800ec8c:	1c5c      	adds	r4, r3, #1
 800ec8e:	781b      	ldrb	r3, [r3, #0]
 800ec90:	61bb      	str	r3, [r7, #24]
    nextcolsum = GETJSAMPLE(*above_ptr) + GETJSAMPLE(*below_ptr) +
 800ec92:	782b      	ldrb	r3, [r5, #0]
 800ec94:	461a      	mov	r2, r3
 800ec96:	7833      	ldrb	r3, [r6, #0]
 800ec98:	4413      	add	r3, r2
		 GETJSAMPLE(*inptr);
 800ec9a:	7822      	ldrb	r2, [r4, #0]
    nextcolsum = GETJSAMPLE(*above_ptr) + GETJSAMPLE(*below_ptr) +
 800ec9c:	4413      	add	r3, r2
 800ec9e:	617b      	str	r3, [r7, #20]
    neighsum = colsum + (colsum - membersum) + nextcolsum;
 800eca0:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800eca2:	69bb      	ldr	r3, [r7, #24]
 800eca4:	1ad2      	subs	r2, r2, r3
 800eca6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800eca8:	4413      	add	r3, r2
 800ecaa:	697a      	ldr	r2, [r7, #20]
 800ecac:	4413      	add	r3, r2
 800ecae:	613b      	str	r3, [r7, #16]
    membersum = membersum * memberscale + neighsum * neighscale;
 800ecb0:	69bb      	ldr	r3, [r7, #24]
 800ecb2:	6a3a      	ldr	r2, [r7, #32]
 800ecb4:	fb03 f202 	mul.w	r2, r3, r2
 800ecb8:	693b      	ldr	r3, [r7, #16]
 800ecba:	69f9      	ldr	r1, [r7, #28]
 800ecbc:	fb01 f303 	mul.w	r3, r1, r3
 800ecc0:	4413      	add	r3, r2
 800ecc2:	61bb      	str	r3, [r7, #24]
    *outptr++ = (JSAMPLE) ((membersum + 32768) >> 16);
 800ecc4:	69bb      	ldr	r3, [r7, #24]
 800ecc6:	f503 4300 	add.w	r3, r3, #32768	@ 0x8000
 800ecca:	141a      	asrs	r2, r3, #16
 800eccc:	4603      	mov	r3, r0
 800ecce:	1c59      	adds	r1, r3, #1
 800ecd0:	4608      	mov	r0, r1
 800ecd2:	b2d2      	uxtb	r2, r2
 800ecd4:	701a      	strb	r2, [r3, #0]
    lastcolsum = colsum; colsum = nextcolsum;
 800ecd6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800ecd8:	62bb      	str	r3, [r7, #40]	@ 0x28
 800ecda:	697b      	ldr	r3, [r7, #20]
 800ecdc:	62fb      	str	r3, [r7, #44]	@ 0x2c

    for (colctr = output_cols - 2; colctr > 0; colctr--) {
 800ecde:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ece0:	3b02      	subs	r3, #2
 800ece2:	633b      	str	r3, [r7, #48]	@ 0x30
 800ece4:	e02e      	b.n	800ed44 <fullsize_smooth_downsample+0x150>
      membersum = GETJSAMPLE(*inptr++);
 800ece6:	4623      	mov	r3, r4
 800ece8:	1c5c      	adds	r4, r3, #1
 800ecea:	781b      	ldrb	r3, [r3, #0]
 800ecec:	61bb      	str	r3, [r7, #24]
      above_ptr++; below_ptr++;
 800ecee:	3501      	adds	r5, #1
 800ecf0:	3601      	adds	r6, #1
      nextcolsum = GETJSAMPLE(*above_ptr) + GETJSAMPLE(*below_ptr) +
 800ecf2:	782b      	ldrb	r3, [r5, #0]
 800ecf4:	461a      	mov	r2, r3
 800ecf6:	7833      	ldrb	r3, [r6, #0]
 800ecf8:	4413      	add	r3, r2
		   GETJSAMPLE(*inptr);
 800ecfa:	7822      	ldrb	r2, [r4, #0]
      nextcolsum = GETJSAMPLE(*above_ptr) + GETJSAMPLE(*below_ptr) +
 800ecfc:	4413      	add	r3, r2
 800ecfe:	617b      	str	r3, [r7, #20]
      neighsum = lastcolsum + (colsum - membersum) + nextcolsum;
 800ed00:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800ed02:	69bb      	ldr	r3, [r7, #24]
 800ed04:	1ad2      	subs	r2, r2, r3
 800ed06:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800ed08:	4413      	add	r3, r2
 800ed0a:	697a      	ldr	r2, [r7, #20]
 800ed0c:	4413      	add	r3, r2
 800ed0e:	613b      	str	r3, [r7, #16]
      membersum = membersum * memberscale + neighsum * neighscale;
 800ed10:	69bb      	ldr	r3, [r7, #24]
 800ed12:	6a3a      	ldr	r2, [r7, #32]
 800ed14:	fb03 f202 	mul.w	r2, r3, r2
 800ed18:	693b      	ldr	r3, [r7, #16]
 800ed1a:	69f9      	ldr	r1, [r7, #28]
 800ed1c:	fb01 f303 	mul.w	r3, r1, r3
 800ed20:	4413      	add	r3, r2
 800ed22:	61bb      	str	r3, [r7, #24]
      *outptr++ = (JSAMPLE) ((membersum + 32768) >> 16);
 800ed24:	69bb      	ldr	r3, [r7, #24]
 800ed26:	f503 4300 	add.w	r3, r3, #32768	@ 0x8000
 800ed2a:	141a      	asrs	r2, r3, #16
 800ed2c:	4603      	mov	r3, r0
 800ed2e:	1c59      	adds	r1, r3, #1
 800ed30:	4608      	mov	r0, r1
 800ed32:	b2d2      	uxtb	r2, r2
 800ed34:	701a      	strb	r2, [r3, #0]
      lastcolsum = colsum; colsum = nextcolsum;
 800ed36:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800ed38:	62bb      	str	r3, [r7, #40]	@ 0x28
 800ed3a:	697b      	ldr	r3, [r7, #20]
 800ed3c:	62fb      	str	r3, [r7, #44]	@ 0x2c
    for (colctr = output_cols - 2; colctr > 0; colctr--) {
 800ed3e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ed40:	3b01      	subs	r3, #1
 800ed42:	633b      	str	r3, [r7, #48]	@ 0x30
 800ed44:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ed46:	2b00      	cmp	r3, #0
 800ed48:	d1cd      	bne.n	800ece6 <fullsize_smooth_downsample+0xf2>
    }

    /* Special case for last column */
    membersum = GETJSAMPLE(*inptr);
 800ed4a:	7823      	ldrb	r3, [r4, #0]
 800ed4c:	61bb      	str	r3, [r7, #24]
    neighsum = lastcolsum + (colsum - membersum) + colsum;
 800ed4e:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800ed50:	69bb      	ldr	r3, [r7, #24]
 800ed52:	1ad2      	subs	r2, r2, r3
 800ed54:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800ed56:	4413      	add	r3, r2
 800ed58:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800ed5a:	4413      	add	r3, r2
 800ed5c:	613b      	str	r3, [r7, #16]
    membersum = membersum * memberscale + neighsum * neighscale;
 800ed5e:	69bb      	ldr	r3, [r7, #24]
 800ed60:	6a3a      	ldr	r2, [r7, #32]
 800ed62:	fb03 f202 	mul.w	r2, r3, r2
 800ed66:	693b      	ldr	r3, [r7, #16]
 800ed68:	69f9      	ldr	r1, [r7, #28]
 800ed6a:	fb01 f303 	mul.w	r3, r1, r3
 800ed6e:	4413      	add	r3, r2
 800ed70:	61bb      	str	r3, [r7, #24]
    *outptr = (JSAMPLE) ((membersum + 32768) >> 16);
 800ed72:	69bb      	ldr	r3, [r7, #24]
 800ed74:	f503 4300 	add.w	r3, r3, #32768	@ 0x8000
 800ed78:	141b      	asrs	r3, r3, #16
 800ed7a:	b2db      	uxtb	r3, r3
 800ed7c:	4602      	mov	r2, r0
 800ed7e:	7013      	strb	r3, [r2, #0]
  for (inrow = 0; inrow < cinfo->max_v_samp_factor; inrow++) {
 800ed80:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800ed82:	3301      	adds	r3, #1
 800ed84:	637b      	str	r3, [r7, #52]	@ 0x34
 800ed86:	68fb      	ldr	r3, [r7, #12]
 800ed88:	f8d3 3110 	ldr.w	r3, [r3, #272]	@ 0x110
 800ed8c:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800ed8e:	429a      	cmp	r2, r3
 800ed90:	f6ff af58 	blt.w	800ec44 <fullsize_smooth_downsample+0x50>

  }
}
 800ed94:	bf00      	nop
 800ed96:	bf00      	nop
 800ed98:	373c      	adds	r7, #60	@ 0x3c
 800ed9a:	46bd      	mov	sp, r7
 800ed9c:	bdf0      	pop	{r4, r5, r6, r7, pc}
	...

0800eda0 <jinit_downsampler>:
 * Note that we must select a routine for each component.
 */

GLOBAL(void)
jinit_downsampler (j_compress_ptr cinfo)
{
 800eda0:	b580      	push	{r7, lr}
 800eda2:	b08a      	sub	sp, #40	@ 0x28
 800eda4:	af00      	add	r7, sp, #0
 800eda6:	6078      	str	r0, [r7, #4]
  my_downsample_ptr downsample;
  int ci;
  jpeg_component_info * compptr;
  boolean smoothok = TRUE;
 800eda8:	2301      	movs	r3, #1
 800edaa:	61fb      	str	r3, [r7, #28]
  int h_in_group, v_in_group, h_out_group, v_out_group;

  downsample = (my_downsample_ptr)
    (*cinfo->mem->alloc_small) ((j_common_ptr) cinfo, JPOOL_IMAGE,
 800edac:	687b      	ldr	r3, [r7, #4]
 800edae:	685b      	ldr	r3, [r3, #4]
 800edb0:	681b      	ldr	r3, [r3, #0]
 800edb2:	2270      	movs	r2, #112	@ 0x70
 800edb4:	2101      	movs	r1, #1
 800edb6:	6878      	ldr	r0, [r7, #4]
 800edb8:	4798      	blx	r3
 800edba:	61b8      	str	r0, [r7, #24]
				SIZEOF(my_downsampler));
  cinfo->downsample = (struct jpeg_downsampler *) downsample;
 800edbc:	687b      	ldr	r3, [r7, #4]
 800edbe:	69ba      	ldr	r2, [r7, #24]
 800edc0:	f8c3 219c 	str.w	r2, [r3, #412]	@ 0x19c
  downsample->pub.start_pass = start_pass_downsample;
 800edc4:	69bb      	ldr	r3, [r7, #24]
 800edc6:	4a7b      	ldr	r2, [pc, #492]	@ (800efb4 <jinit_downsampler+0x214>)
 800edc8:	601a      	str	r2, [r3, #0]
  downsample->pub.downsample = sep_downsample;
 800edca:	69bb      	ldr	r3, [r7, #24]
 800edcc:	4a7a      	ldr	r2, [pc, #488]	@ (800efb8 <jinit_downsampler+0x218>)
 800edce:	605a      	str	r2, [r3, #4]
  downsample->pub.need_context_rows = FALSE;
 800edd0:	69bb      	ldr	r3, [r7, #24]
 800edd2:	2200      	movs	r2, #0
 800edd4:	609a      	str	r2, [r3, #8]

  if (cinfo->CCIR601_sampling)
 800edd6:	687b      	ldr	r3, [r7, #4]
 800edd8:	f8d3 30dc 	ldr.w	r3, [r3, #220]	@ 0xdc
 800eddc:	2b00      	cmp	r3, #0
 800edde:	d008      	beq.n	800edf2 <jinit_downsampler+0x52>
    ERREXIT(cinfo, JERR_CCIR601_NOTIMPL);
 800ede0:	687b      	ldr	r3, [r7, #4]
 800ede2:	681b      	ldr	r3, [r3, #0]
 800ede4:	221a      	movs	r2, #26
 800ede6:	615a      	str	r2, [r3, #20]
 800ede8:	687b      	ldr	r3, [r7, #4]
 800edea:	681b      	ldr	r3, [r3, #0]
 800edec:	681b      	ldr	r3, [r3, #0]
 800edee:	6878      	ldr	r0, [r7, #4]
 800edf0:	4798      	blx	r3

  /* Verify we can handle the sampling factors, and set up method pointers */
  for (ci = 0, compptr = cinfo->comp_info; ci < cinfo->num_components;
 800edf2:	2300      	movs	r3, #0
 800edf4:	627b      	str	r3, [r7, #36]	@ 0x24
 800edf6:	687b      	ldr	r3, [r7, #4]
 800edf8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800edfa:	623b      	str	r3, [r7, #32]
 800edfc:	e0be      	b.n	800ef7c <jinit_downsampler+0x1dc>
       ci++, compptr++) {
    /* Compute size of an "output group" for DCT scaling.  This many samples
     * are to be converted from max_h_samp_factor * max_v_samp_factor pixels.
     */
    h_out_group = (compptr->h_samp_factor * compptr->DCT_h_scaled_size) /
 800edfe:	6a3b      	ldr	r3, [r7, #32]
 800ee00:	689b      	ldr	r3, [r3, #8]
 800ee02:	6a3a      	ldr	r2, [r7, #32]
 800ee04:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 800ee06:	fb03 f202 	mul.w	r2, r3, r2
		  cinfo->min_DCT_h_scaled_size;
 800ee0a:	687b      	ldr	r3, [r7, #4]
 800ee0c:	f8d3 3114 	ldr.w	r3, [r3, #276]	@ 0x114
    h_out_group = (compptr->h_samp_factor * compptr->DCT_h_scaled_size) /
 800ee10:	fb92 f3f3 	sdiv	r3, r2, r3
 800ee14:	617b      	str	r3, [r7, #20]
    v_out_group = (compptr->v_samp_factor * compptr->DCT_v_scaled_size) /
 800ee16:	6a3b      	ldr	r3, [r7, #32]
 800ee18:	68db      	ldr	r3, [r3, #12]
 800ee1a:	6a3a      	ldr	r2, [r7, #32]
 800ee1c:	6a92      	ldr	r2, [r2, #40]	@ 0x28
 800ee1e:	fb03 f202 	mul.w	r2, r3, r2
		  cinfo->min_DCT_v_scaled_size;
 800ee22:	687b      	ldr	r3, [r7, #4]
 800ee24:	f8d3 3118 	ldr.w	r3, [r3, #280]	@ 0x118
    v_out_group = (compptr->v_samp_factor * compptr->DCT_v_scaled_size) /
 800ee28:	fb92 f3f3 	sdiv	r3, r2, r3
 800ee2c:	613b      	str	r3, [r7, #16]
    h_in_group = cinfo->max_h_samp_factor;
 800ee2e:	687b      	ldr	r3, [r7, #4]
 800ee30:	f8d3 310c 	ldr.w	r3, [r3, #268]	@ 0x10c
 800ee34:	60fb      	str	r3, [r7, #12]
    v_in_group = cinfo->max_v_samp_factor;
 800ee36:	687b      	ldr	r3, [r7, #4]
 800ee38:	f8d3 3110 	ldr.w	r3, [r3, #272]	@ 0x110
 800ee3c:	60bb      	str	r3, [r7, #8]
    downsample->rowgroup_height[ci] = v_out_group; /* save for use later */
 800ee3e:	69ba      	ldr	r2, [r7, #24]
 800ee40:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ee42:	330c      	adds	r3, #12
 800ee44:	009b      	lsls	r3, r3, #2
 800ee46:	4413      	add	r3, r2
 800ee48:	693a      	ldr	r2, [r7, #16]
 800ee4a:	605a      	str	r2, [r3, #4]
    if (h_in_group == h_out_group && v_in_group == v_out_group) {
 800ee4c:	68fa      	ldr	r2, [r7, #12]
 800ee4e:	697b      	ldr	r3, [r7, #20]
 800ee50:	429a      	cmp	r2, r3
 800ee52:	d11b      	bne.n	800ee8c <jinit_downsampler+0xec>
 800ee54:	68ba      	ldr	r2, [r7, #8]
 800ee56:	693b      	ldr	r3, [r7, #16]
 800ee58:	429a      	cmp	r2, r3
 800ee5a:	d117      	bne.n	800ee8c <jinit_downsampler+0xec>
#ifdef INPUT_SMOOTHING_SUPPORTED
      if (cinfo->smoothing_factor) {
 800ee5c:	687b      	ldr	r3, [r7, #4]
 800ee5e:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 800ee62:	2b00      	cmp	r3, #0
 800ee64:	d00a      	beq.n	800ee7c <jinit_downsampler+0xdc>
	downsample->methods[ci] = fullsize_smooth_downsample;
 800ee66:	69ba      	ldr	r2, [r7, #24]
 800ee68:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ee6a:	3302      	adds	r3, #2
 800ee6c:	009b      	lsls	r3, r3, #2
 800ee6e:	4413      	add	r3, r2
 800ee70:	4a52      	ldr	r2, [pc, #328]	@ (800efbc <jinit_downsampler+0x21c>)
 800ee72:	605a      	str	r2, [r3, #4]
	downsample->pub.need_context_rows = TRUE;
 800ee74:	69bb      	ldr	r3, [r7, #24]
 800ee76:	2201      	movs	r2, #1
 800ee78:	609a      	str	r2, [r3, #8]
      if (cinfo->smoothing_factor) {
 800ee7a:	e079      	b.n	800ef70 <jinit_downsampler+0x1d0>
      } else
#endif
	downsample->methods[ci] = fullsize_downsample;
 800ee7c:	69ba      	ldr	r2, [r7, #24]
 800ee7e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ee80:	3302      	adds	r3, #2
 800ee82:	009b      	lsls	r3, r3, #2
 800ee84:	4413      	add	r3, r2
 800ee86:	4a4e      	ldr	r2, [pc, #312]	@ (800efc0 <jinit_downsampler+0x220>)
 800ee88:	605a      	str	r2, [r3, #4]
      if (cinfo->smoothing_factor) {
 800ee8a:	e071      	b.n	800ef70 <jinit_downsampler+0x1d0>
    } else if (h_in_group == h_out_group * 2 &&
 800ee8c:	697b      	ldr	r3, [r7, #20]
 800ee8e:	005b      	lsls	r3, r3, #1
 800ee90:	68fa      	ldr	r2, [r7, #12]
 800ee92:	429a      	cmp	r2, r3
 800ee94:	d10d      	bne.n	800eeb2 <jinit_downsampler+0x112>
 800ee96:	68ba      	ldr	r2, [r7, #8]
 800ee98:	693b      	ldr	r3, [r7, #16]
 800ee9a:	429a      	cmp	r2, r3
 800ee9c:	d109      	bne.n	800eeb2 <jinit_downsampler+0x112>
	       v_in_group == v_out_group) {
      smoothok = FALSE;
 800ee9e:	2300      	movs	r3, #0
 800eea0:	61fb      	str	r3, [r7, #28]
      downsample->methods[ci] = h2v1_downsample;
 800eea2:	69ba      	ldr	r2, [r7, #24]
 800eea4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800eea6:	3302      	adds	r3, #2
 800eea8:	009b      	lsls	r3, r3, #2
 800eeaa:	4413      	add	r3, r2
 800eeac:	4a45      	ldr	r2, [pc, #276]	@ (800efc4 <jinit_downsampler+0x224>)
 800eeae:	605a      	str	r2, [r3, #4]
 800eeb0:	e05e      	b.n	800ef70 <jinit_downsampler+0x1d0>
    } else if (h_in_group == h_out_group * 2 &&
 800eeb2:	697b      	ldr	r3, [r7, #20]
 800eeb4:	005b      	lsls	r3, r3, #1
 800eeb6:	68fa      	ldr	r2, [r7, #12]
 800eeb8:	429a      	cmp	r2, r3
 800eeba:	d11c      	bne.n	800eef6 <jinit_downsampler+0x156>
	       v_in_group == v_out_group * 2) {
 800eebc:	693b      	ldr	r3, [r7, #16]
 800eebe:	005b      	lsls	r3, r3, #1
    } else if (h_in_group == h_out_group * 2 &&
 800eec0:	68ba      	ldr	r2, [r7, #8]
 800eec2:	429a      	cmp	r2, r3
 800eec4:	d117      	bne.n	800eef6 <jinit_downsampler+0x156>
#ifdef INPUT_SMOOTHING_SUPPORTED
      if (cinfo->smoothing_factor) {
 800eec6:	687b      	ldr	r3, [r7, #4]
 800eec8:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 800eecc:	2b00      	cmp	r3, #0
 800eece:	d00a      	beq.n	800eee6 <jinit_downsampler+0x146>
	downsample->methods[ci] = h2v2_smooth_downsample;
 800eed0:	69ba      	ldr	r2, [r7, #24]
 800eed2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800eed4:	3302      	adds	r3, #2
 800eed6:	009b      	lsls	r3, r3, #2
 800eed8:	4413      	add	r3, r2
 800eeda:	4a3b      	ldr	r2, [pc, #236]	@ (800efc8 <jinit_downsampler+0x228>)
 800eedc:	605a      	str	r2, [r3, #4]
	downsample->pub.need_context_rows = TRUE;
 800eede:	69bb      	ldr	r3, [r7, #24]
 800eee0:	2201      	movs	r2, #1
 800eee2:	609a      	str	r2, [r3, #8]
      if (cinfo->smoothing_factor) {
 800eee4:	e044      	b.n	800ef70 <jinit_downsampler+0x1d0>
      } else
#endif
	downsample->methods[ci] = h2v2_downsample;
 800eee6:	69ba      	ldr	r2, [r7, #24]
 800eee8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800eeea:	3302      	adds	r3, #2
 800eeec:	009b      	lsls	r3, r3, #2
 800eeee:	4413      	add	r3, r2
 800eef0:	4a36      	ldr	r2, [pc, #216]	@ (800efcc <jinit_downsampler+0x22c>)
 800eef2:	605a      	str	r2, [r3, #4]
      if (cinfo->smoothing_factor) {
 800eef4:	e03c      	b.n	800ef70 <jinit_downsampler+0x1d0>
    } else if ((h_in_group % h_out_group) == 0 &&
 800eef6:	68fb      	ldr	r3, [r7, #12]
 800eef8:	697a      	ldr	r2, [r7, #20]
 800eefa:	fb93 f2f2 	sdiv	r2, r3, r2
 800eefe:	6979      	ldr	r1, [r7, #20]
 800ef00:	fb01 f202 	mul.w	r2, r1, r2
 800ef04:	1a9b      	subs	r3, r3, r2
 800ef06:	2b00      	cmp	r3, #0
 800ef08:	d129      	bne.n	800ef5e <jinit_downsampler+0x1be>
	       (v_in_group % v_out_group) == 0) {
 800ef0a:	68bb      	ldr	r3, [r7, #8]
 800ef0c:	693a      	ldr	r2, [r7, #16]
 800ef0e:	fb93 f2f2 	sdiv	r2, r3, r2
 800ef12:	6939      	ldr	r1, [r7, #16]
 800ef14:	fb01 f202 	mul.w	r2, r1, r2
 800ef18:	1a9b      	subs	r3, r3, r2
    } else if ((h_in_group % h_out_group) == 0 &&
 800ef1a:	2b00      	cmp	r3, #0
 800ef1c:	d11f      	bne.n	800ef5e <jinit_downsampler+0x1be>
      smoothok = FALSE;
 800ef1e:	2300      	movs	r3, #0
 800ef20:	61fb      	str	r3, [r7, #28]
      downsample->methods[ci] = int_downsample;
 800ef22:	69ba      	ldr	r2, [r7, #24]
 800ef24:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ef26:	3302      	adds	r3, #2
 800ef28:	009b      	lsls	r3, r3, #2
 800ef2a:	4413      	add	r3, r2
 800ef2c:	4a28      	ldr	r2, [pc, #160]	@ (800efd0 <jinit_downsampler+0x230>)
 800ef2e:	605a      	str	r2, [r3, #4]
      downsample->h_expand[ci] = (UINT8) (h_in_group / h_out_group);
 800ef30:	68fa      	ldr	r2, [r7, #12]
 800ef32:	697b      	ldr	r3, [r7, #20]
 800ef34:	fb92 f3f3 	sdiv	r3, r2, r3
 800ef38:	b2d9      	uxtb	r1, r3
 800ef3a:	69ba      	ldr	r2, [r7, #24]
 800ef3c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ef3e:	4413      	add	r3, r2
 800ef40:	335c      	adds	r3, #92	@ 0x5c
 800ef42:	460a      	mov	r2, r1
 800ef44:	701a      	strb	r2, [r3, #0]
      downsample->v_expand[ci] = (UINT8) (v_in_group / v_out_group);
 800ef46:	68ba      	ldr	r2, [r7, #8]
 800ef48:	693b      	ldr	r3, [r7, #16]
 800ef4a:	fb92 f3f3 	sdiv	r3, r2, r3
 800ef4e:	b2d9      	uxtb	r1, r3
 800ef50:	69ba      	ldr	r2, [r7, #24]
 800ef52:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ef54:	4413      	add	r3, r2
 800ef56:	3366      	adds	r3, #102	@ 0x66
 800ef58:	460a      	mov	r2, r1
 800ef5a:	701a      	strb	r2, [r3, #0]
 800ef5c:	e008      	b.n	800ef70 <jinit_downsampler+0x1d0>
    } else
      ERREXIT(cinfo, JERR_FRACT_SAMPLE_NOTIMPL);
 800ef5e:	687b      	ldr	r3, [r7, #4]
 800ef60:	681b      	ldr	r3, [r3, #0]
 800ef62:	2227      	movs	r2, #39	@ 0x27
 800ef64:	615a      	str	r2, [r3, #20]
 800ef66:	687b      	ldr	r3, [r7, #4]
 800ef68:	681b      	ldr	r3, [r3, #0]
 800ef6a:	681b      	ldr	r3, [r3, #0]
 800ef6c:	6878      	ldr	r0, [r7, #4]
 800ef6e:	4798      	blx	r3
       ci++, compptr++) {
 800ef70:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ef72:	3301      	adds	r3, #1
 800ef74:	627b      	str	r3, [r7, #36]	@ 0x24
 800ef76:	6a3b      	ldr	r3, [r7, #32]
 800ef78:	3358      	adds	r3, #88	@ 0x58
 800ef7a:	623b      	str	r3, [r7, #32]
  for (ci = 0, compptr = cinfo->comp_info; ci < cinfo->num_components;
 800ef7c:	687b      	ldr	r3, [r7, #4]
 800ef7e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800ef80:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800ef82:	429a      	cmp	r2, r3
 800ef84:	f6ff af3b 	blt.w	800edfe <jinit_downsampler+0x5e>
  }

#ifdef INPUT_SMOOTHING_SUPPORTED
  if (cinfo->smoothing_factor && !smoothok)
 800ef88:	687b      	ldr	r3, [r7, #4]
 800ef8a:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 800ef8e:	2b00      	cmp	r3, #0
 800ef90:	d00c      	beq.n	800efac <jinit_downsampler+0x20c>
 800ef92:	69fb      	ldr	r3, [r7, #28]
 800ef94:	2b00      	cmp	r3, #0
 800ef96:	d109      	bne.n	800efac <jinit_downsampler+0x20c>
    TRACEMS(cinfo, 0, JTRC_SMOOTH_NOTIMPL);
 800ef98:	687b      	ldr	r3, [r7, #4]
 800ef9a:	681b      	ldr	r3, [r3, #0]
 800ef9c:	2265      	movs	r2, #101	@ 0x65
 800ef9e:	615a      	str	r2, [r3, #20]
 800efa0:	687b      	ldr	r3, [r7, #4]
 800efa2:	681b      	ldr	r3, [r3, #0]
 800efa4:	685b      	ldr	r3, [r3, #4]
 800efa6:	2100      	movs	r1, #0
 800efa8:	6878      	ldr	r0, [r7, #4]
 800efaa:	4798      	blx	r3
#endif
}
 800efac:	bf00      	nop
 800efae:	3728      	adds	r7, #40	@ 0x28
 800efb0:	46bd      	mov	sp, r7
 800efb2:	bd80      	pop	{r7, pc}
 800efb4:	0800e59d 	.word	0x0800e59d
 800efb8:	0800e60f 	.word	0x0800e60f
 800efbc:	0800ebf5 	.word	0x0800ebf5
 800efc0:	0800e7cb 	.word	0x0800e7cb
 800efc4:	0800e819 	.word	0x0800e819
 800efc8:	0800e96d 	.word	0x0800e96d
 800efcc:	0800e8b1 	.word	0x0800e8b1
 800efd0:	0800e69d 	.word	0x0800e69d

0800efd4 <init_mem_destination>:
}
#endif /* JFILE */

METHODDEF(void)
init_mem_destination (j_compress_ptr cinfo)
{
 800efd4:	b480      	push	{r7}
 800efd6:	b083      	sub	sp, #12
 800efd8:	af00      	add	r7, sp, #0
 800efda:	6078      	str	r0, [r7, #4]
  /* no work necessary here */
}
 800efdc:	bf00      	nop
 800efde:	370c      	adds	r7, #12
 800efe0:	46bd      	mov	sp, r7
 800efe2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800efe6:	4770      	bx	lr

0800efe8 <empty_mem_output_buffer>:
}
#endif /* JFILE */

METHODDEF(boolean)
empty_mem_output_buffer (j_compress_ptr cinfo)
{
 800efe8:	b580      	push	{r7, lr}
 800efea:	b086      	sub	sp, #24
 800efec:	af00      	add	r7, sp, #0
 800efee:	6078      	str	r0, [r7, #4]
  size_t nextsize;
  JOCTET * nextbuffer;
  my_mem_dest_ptr dest = (my_mem_dest_ptr) cinfo->dest;
 800eff0:	687b      	ldr	r3, [r7, #4]
 800eff2:	699b      	ldr	r3, [r3, #24]
 800eff4:	617b      	str	r3, [r7, #20]

  /* Try to allocate new buffer with double size */
  nextsize = dest->bufsize * 2;
 800eff6:	697b      	ldr	r3, [r7, #20]
 800eff8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800effa:	005b      	lsls	r3, r3, #1
 800effc:	613b      	str	r3, [r7, #16]
  nextbuffer = (JOCTET *) malloc(nextsize);
 800effe:	6938      	ldr	r0, [r7, #16]
 800f000:	f00a fc18 	bl	8019834 <malloc>
 800f004:	4603      	mov	r3, r0
 800f006:	60fb      	str	r3, [r7, #12]

  if (nextbuffer == NULL)
 800f008:	68fb      	ldr	r3, [r7, #12]
 800f00a:	2b00      	cmp	r3, #0
 800f00c:	d10c      	bne.n	800f028 <empty_mem_output_buffer+0x40>
    ERREXIT1(cinfo, JERR_OUT_OF_MEMORY, 10);
 800f00e:	687b      	ldr	r3, [r7, #4]
 800f010:	681b      	ldr	r3, [r3, #0]
 800f012:	2238      	movs	r2, #56	@ 0x38
 800f014:	615a      	str	r2, [r3, #20]
 800f016:	687b      	ldr	r3, [r7, #4]
 800f018:	681b      	ldr	r3, [r3, #0]
 800f01a:	220a      	movs	r2, #10
 800f01c:	619a      	str	r2, [r3, #24]
 800f01e:	687b      	ldr	r3, [r7, #4]
 800f020:	681b      	ldr	r3, [r3, #0]
 800f022:	681b      	ldr	r3, [r3, #0]
 800f024:	6878      	ldr	r0, [r7, #4]
 800f026:	4798      	blx	r3

  MEMCOPY(nextbuffer, dest->buffer, dest->bufsize);
 800f028:	697b      	ldr	r3, [r7, #20]
 800f02a:	6a19      	ldr	r1, [r3, #32]
 800f02c:	697b      	ldr	r3, [r7, #20]
 800f02e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800f030:	461a      	mov	r2, r3
 800f032:	68f8      	ldr	r0, [r7, #12]
 800f034:	f00a fd20 	bl	8019a78 <memcpy>

  if (dest->newbuffer != NULL)
 800f038:	697b      	ldr	r3, [r7, #20]
 800f03a:	69db      	ldr	r3, [r3, #28]
 800f03c:	2b00      	cmp	r3, #0
 800f03e:	d004      	beq.n	800f04a <empty_mem_output_buffer+0x62>
    free(dest->newbuffer);
 800f040:	697b      	ldr	r3, [r7, #20]
 800f042:	69db      	ldr	r3, [r3, #28]
 800f044:	4618      	mov	r0, r3
 800f046:	f00a fbfd 	bl	8019844 <free>

  dest->newbuffer = nextbuffer;
 800f04a:	697b      	ldr	r3, [r7, #20]
 800f04c:	68fa      	ldr	r2, [r7, #12]
 800f04e:	61da      	str	r2, [r3, #28]

  dest->pub.next_output_byte = nextbuffer + dest->bufsize;
 800f050:	697b      	ldr	r3, [r7, #20]
 800f052:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800f054:	68fa      	ldr	r2, [r7, #12]
 800f056:	441a      	add	r2, r3
 800f058:	697b      	ldr	r3, [r7, #20]
 800f05a:	601a      	str	r2, [r3, #0]
  dest->pub.free_in_buffer = dest->bufsize;
 800f05c:	697b      	ldr	r3, [r7, #20]
 800f05e:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800f060:	697b      	ldr	r3, [r7, #20]
 800f062:	605a      	str	r2, [r3, #4]

  dest->buffer = nextbuffer;
 800f064:	697b      	ldr	r3, [r7, #20]
 800f066:	68fa      	ldr	r2, [r7, #12]
 800f068:	621a      	str	r2, [r3, #32]
  dest->bufsize = nextsize;
 800f06a:	697b      	ldr	r3, [r7, #20]
 800f06c:	693a      	ldr	r2, [r7, #16]
 800f06e:	625a      	str	r2, [r3, #36]	@ 0x24

  return TRUE;
 800f070:	2301      	movs	r3, #1
}
 800f072:	4618      	mov	r0, r3
 800f074:	3718      	adds	r7, #24
 800f076:	46bd      	mov	sp, r7
 800f078:	bd80      	pop	{r7, pc}

0800f07a <term_mem_destination>:
}
#endif /* JFILE */

METHODDEF(void)
term_mem_destination (j_compress_ptr cinfo)
{
 800f07a:	b480      	push	{r7}
 800f07c:	b085      	sub	sp, #20
 800f07e:	af00      	add	r7, sp, #0
 800f080:	6078      	str	r0, [r7, #4]
  my_mem_dest_ptr dest = (my_mem_dest_ptr) cinfo->dest;
 800f082:	687b      	ldr	r3, [r7, #4]
 800f084:	699b      	ldr	r3, [r3, #24]
 800f086:	60fb      	str	r3, [r7, #12]

  *dest->outbuffer = dest->buffer;
 800f088:	68fb      	ldr	r3, [r7, #12]
 800f08a:	695b      	ldr	r3, [r3, #20]
 800f08c:	68fa      	ldr	r2, [r7, #12]
 800f08e:	6a12      	ldr	r2, [r2, #32]
 800f090:	601a      	str	r2, [r3, #0]
  *dest->outsize = dest->bufsize - dest->pub.free_in_buffer;
 800f092:	68fb      	ldr	r3, [r7, #12]
 800f094:	6a59      	ldr	r1, [r3, #36]	@ 0x24
 800f096:	68fb      	ldr	r3, [r7, #12]
 800f098:	685a      	ldr	r2, [r3, #4]
 800f09a:	68fb      	ldr	r3, [r7, #12]
 800f09c:	699b      	ldr	r3, [r3, #24]
 800f09e:	1a8a      	subs	r2, r1, r2
 800f0a0:	601a      	str	r2, [r3, #0]
}
 800f0a2:	bf00      	nop
 800f0a4:	3714      	adds	r7, #20
 800f0a6:	46bd      	mov	sp, r7
 800f0a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f0ac:	4770      	bx	lr
	...

0800f0b0 <jpeg_mem_dest>:
 */

GLOBAL(void)
jpeg_mem_dest (j_compress_ptr cinfo,
	       unsigned char ** outbuffer, unsigned long * outsize)
{
 800f0b0:	b580      	push	{r7, lr}
 800f0b2:	b086      	sub	sp, #24
 800f0b4:	af00      	add	r7, sp, #0
 800f0b6:	60f8      	str	r0, [r7, #12]
 800f0b8:	60b9      	str	r1, [r7, #8]
 800f0ba:	607a      	str	r2, [r7, #4]
  my_mem_dest_ptr dest;

  if (outbuffer == NULL || outsize == NULL)	/* sanity check */
 800f0bc:	68bb      	ldr	r3, [r7, #8]
 800f0be:	2b00      	cmp	r3, #0
 800f0c0:	d002      	beq.n	800f0c8 <jpeg_mem_dest+0x18>
 800f0c2:	687b      	ldr	r3, [r7, #4]
 800f0c4:	2b00      	cmp	r3, #0
 800f0c6:	d108      	bne.n	800f0da <jpeg_mem_dest+0x2a>
    ERREXIT(cinfo, JERR_BUFFER_SIZE);
 800f0c8:	68fb      	ldr	r3, [r7, #12]
 800f0ca:	681b      	ldr	r3, [r3, #0]
 800f0cc:	2218      	movs	r2, #24
 800f0ce:	615a      	str	r2, [r3, #20]
 800f0d0:	68fb      	ldr	r3, [r7, #12]
 800f0d2:	681b      	ldr	r3, [r3, #0]
 800f0d4:	681b      	ldr	r3, [r3, #0]
 800f0d6:	68f8      	ldr	r0, [r7, #12]
 800f0d8:	4798      	blx	r3

  /* The destination object is made permanent so that multiple JPEG images
   * can be written to the same buffer without re-executing jpeg_mem_dest.
   */
  if (cinfo->dest == NULL) {	/* first time for this JPEG object? */
 800f0da:	68fb      	ldr	r3, [r7, #12]
 800f0dc:	699b      	ldr	r3, [r3, #24]
 800f0de:	2b00      	cmp	r3, #0
 800f0e0:	d109      	bne.n	800f0f6 <jpeg_mem_dest+0x46>
    cinfo->dest = (struct jpeg_destination_mgr *)
      (*cinfo->mem->alloc_small) ((j_common_ptr) cinfo, JPOOL_PERMANENT,
 800f0e2:	68fb      	ldr	r3, [r7, #12]
 800f0e4:	685b      	ldr	r3, [r3, #4]
 800f0e6:	681b      	ldr	r3, [r3, #0]
 800f0e8:	2228      	movs	r2, #40	@ 0x28
 800f0ea:	2100      	movs	r1, #0
 800f0ec:	68f8      	ldr	r0, [r7, #12]
 800f0ee:	4798      	blx	r3
 800f0f0:	4602      	mov	r2, r0
    cinfo->dest = (struct jpeg_destination_mgr *)
 800f0f2:	68fb      	ldr	r3, [r7, #12]
 800f0f4:	619a      	str	r2, [r3, #24]
				  SIZEOF(my_mem_destination_mgr));
  }

  dest = (my_mem_dest_ptr) cinfo->dest;
 800f0f6:	68fb      	ldr	r3, [r7, #12]
 800f0f8:	699b      	ldr	r3, [r3, #24]
 800f0fa:	617b      	str	r3, [r7, #20]
  dest->pub.init_destination = init_mem_destination;
 800f0fc:	697b      	ldr	r3, [r7, #20]
 800f0fe:	4a27      	ldr	r2, [pc, #156]	@ (800f19c <jpeg_mem_dest+0xec>)
 800f100:	609a      	str	r2, [r3, #8]
  dest->pub.empty_output_buffer = empty_mem_output_buffer;
 800f102:	697b      	ldr	r3, [r7, #20]
 800f104:	4a26      	ldr	r2, [pc, #152]	@ (800f1a0 <jpeg_mem_dest+0xf0>)
 800f106:	60da      	str	r2, [r3, #12]
  dest->pub.term_destination = term_mem_destination;
 800f108:	697b      	ldr	r3, [r7, #20]
 800f10a:	4a26      	ldr	r2, [pc, #152]	@ (800f1a4 <jpeg_mem_dest+0xf4>)
 800f10c:	611a      	str	r2, [r3, #16]
  dest->outbuffer = outbuffer;
 800f10e:	697b      	ldr	r3, [r7, #20]
 800f110:	68ba      	ldr	r2, [r7, #8]
 800f112:	615a      	str	r2, [r3, #20]
  dest->outsize = outsize;
 800f114:	697b      	ldr	r3, [r7, #20]
 800f116:	687a      	ldr	r2, [r7, #4]
 800f118:	619a      	str	r2, [r3, #24]
  dest->newbuffer = NULL;
 800f11a:	697b      	ldr	r3, [r7, #20]
 800f11c:	2200      	movs	r2, #0
 800f11e:	61da      	str	r2, [r3, #28]

  if (*outbuffer == NULL || *outsize == 0) {
 800f120:	68bb      	ldr	r3, [r7, #8]
 800f122:	681b      	ldr	r3, [r3, #0]
 800f124:	2b00      	cmp	r3, #0
 800f126:	d003      	beq.n	800f130 <jpeg_mem_dest+0x80>
 800f128:	687b      	ldr	r3, [r7, #4]
 800f12a:	681b      	ldr	r3, [r3, #0]
 800f12c:	2b00      	cmp	r3, #0
 800f12e:	d120      	bne.n	800f172 <jpeg_mem_dest+0xc2>
    /* Allocate initial buffer */
    dest->newbuffer = *outbuffer = (unsigned char *) malloc(OUTPUT_BUF_SIZE);
 800f130:	f44f 5080 	mov.w	r0, #4096	@ 0x1000
 800f134:	f00a fb7e 	bl	8019834 <malloc>
 800f138:	4603      	mov	r3, r0
 800f13a:	461a      	mov	r2, r3
 800f13c:	68bb      	ldr	r3, [r7, #8]
 800f13e:	601a      	str	r2, [r3, #0]
 800f140:	68bb      	ldr	r3, [r7, #8]
 800f142:	681a      	ldr	r2, [r3, #0]
 800f144:	697b      	ldr	r3, [r7, #20]
 800f146:	61da      	str	r2, [r3, #28]
    if (dest->newbuffer == NULL)
 800f148:	697b      	ldr	r3, [r7, #20]
 800f14a:	69db      	ldr	r3, [r3, #28]
 800f14c:	2b00      	cmp	r3, #0
 800f14e:	d10c      	bne.n	800f16a <jpeg_mem_dest+0xba>
      ERREXIT1(cinfo, JERR_OUT_OF_MEMORY, 10);
 800f150:	68fb      	ldr	r3, [r7, #12]
 800f152:	681b      	ldr	r3, [r3, #0]
 800f154:	2238      	movs	r2, #56	@ 0x38
 800f156:	615a      	str	r2, [r3, #20]
 800f158:	68fb      	ldr	r3, [r7, #12]
 800f15a:	681b      	ldr	r3, [r3, #0]
 800f15c:	220a      	movs	r2, #10
 800f15e:	619a      	str	r2, [r3, #24]
 800f160:	68fb      	ldr	r3, [r7, #12]
 800f162:	681b      	ldr	r3, [r3, #0]
 800f164:	681b      	ldr	r3, [r3, #0]
 800f166:	68f8      	ldr	r0, [r7, #12]
 800f168:	4798      	blx	r3
    *outsize = OUTPUT_BUF_SIZE;
 800f16a:	687b      	ldr	r3, [r7, #4]
 800f16c:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 800f170:	601a      	str	r2, [r3, #0]
  }

  dest->pub.next_output_byte = dest->buffer = *outbuffer;
 800f172:	68bb      	ldr	r3, [r7, #8]
 800f174:	681a      	ldr	r2, [r3, #0]
 800f176:	697b      	ldr	r3, [r7, #20]
 800f178:	621a      	str	r2, [r3, #32]
 800f17a:	697b      	ldr	r3, [r7, #20]
 800f17c:	6a1a      	ldr	r2, [r3, #32]
 800f17e:	697b      	ldr	r3, [r7, #20]
 800f180:	601a      	str	r2, [r3, #0]
  dest->pub.free_in_buffer = dest->bufsize = *outsize;
 800f182:	687b      	ldr	r3, [r7, #4]
 800f184:	681a      	ldr	r2, [r3, #0]
 800f186:	697b      	ldr	r3, [r7, #20]
 800f188:	625a      	str	r2, [r3, #36]	@ 0x24
 800f18a:	697b      	ldr	r3, [r7, #20]
 800f18c:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800f18e:	697b      	ldr	r3, [r7, #20]
 800f190:	605a      	str	r2, [r3, #4]
}
 800f192:	bf00      	nop
 800f194:	3718      	adds	r7, #24
 800f196:	46bd      	mov	sp, r7
 800f198:	bd80      	pop	{r7, pc}
 800f19a:	bf00      	nop
 800f19c:	0800efd5 	.word	0x0800efd5
 800f1a0:	0800efe9 	.word	0x0800efe9
 800f1a4:	0800f07b 	.word	0x0800f07b

0800f1a8 <error_exit>:
 * or jpeg_destroy) at some point.
 */

METHODDEF(void)
error_exit (j_common_ptr cinfo)
{
 800f1a8:	b580      	push	{r7, lr}
 800f1aa:	b082      	sub	sp, #8
 800f1ac:	af00      	add	r7, sp, #0
 800f1ae:	6078      	str	r0, [r7, #4]
  /* Always display the message */
  (*cinfo->err->output_message) (cinfo);
 800f1b0:	687b      	ldr	r3, [r7, #4]
 800f1b2:	681b      	ldr	r3, [r3, #0]
 800f1b4:	689b      	ldr	r3, [r3, #8]
 800f1b6:	6878      	ldr	r0, [r7, #4]
 800f1b8:	4798      	blx	r3

  /* Let the memory manager delete any temp files before we die */
  jpeg_destroy(cinfo);
 800f1ba:	6878      	ldr	r0, [r7, #4]
 800f1bc:	f7fe fa63 	bl	800d686 <jpeg_destroy>

  //exit(EXIT_FAILURE);
}
 800f1c0:	bf00      	nop
 800f1c2:	3708      	adds	r7, #8
 800f1c4:	46bd      	mov	sp, r7
 800f1c6:	bd80      	pop	{r7, pc}

0800f1c8 <output_message>:
 * not just not use this routine.
 */

METHODDEF(void)
output_message (j_common_ptr cinfo)
{
 800f1c8:	b580      	push	{r7, lr}
 800f1ca:	b0b4      	sub	sp, #208	@ 0xd0
 800f1cc:	af00      	add	r7, sp, #0
 800f1ce:	6078      	str	r0, [r7, #4]
  char buffer[JMSG_LENGTH_MAX];

  /* Create the message */
  (*cinfo->err->format_message) (cinfo, buffer);
 800f1d0:	687b      	ldr	r3, [r7, #4]
 800f1d2:	681b      	ldr	r3, [r3, #0]
 800f1d4:	68db      	ldr	r3, [r3, #12]
 800f1d6:	f107 0208 	add.w	r2, r7, #8
 800f1da:	4611      	mov	r1, r2
 800f1dc:	6878      	ldr	r0, [r7, #4]
 800f1de:	4798      	blx	r3
#else
  /* Send it to stderr, adding a newline */
//  fprintf(stderr, "%s\n", buffer);
//  printf( "%s\n", buffer);
#endif
}
 800f1e0:	bf00      	nop
 800f1e2:	37d0      	adds	r7, #208	@ 0xd0
 800f1e4:	46bd      	mov	sp, r7
 800f1e6:	bd80      	pop	{r7, pc}

0800f1e8 <emit_message>:
 * or change the policy about which messages to display.
 */

METHODDEF(void)
emit_message (j_common_ptr cinfo, int msg_level)
{
 800f1e8:	b580      	push	{r7, lr}
 800f1ea:	b084      	sub	sp, #16
 800f1ec:	af00      	add	r7, sp, #0
 800f1ee:	6078      	str	r0, [r7, #4]
 800f1f0:	6039      	str	r1, [r7, #0]
  struct jpeg_error_mgr * err = cinfo->err;
 800f1f2:	687b      	ldr	r3, [r7, #4]
 800f1f4:	681b      	ldr	r3, [r3, #0]
 800f1f6:	60fb      	str	r3, [r7, #12]

  if (msg_level < 0) {
 800f1f8:	683b      	ldr	r3, [r7, #0]
 800f1fa:	2b00      	cmp	r3, #0
 800f1fc:	da11      	bge.n	800f222 <emit_message+0x3a>
    /* It's a warning message.  Since corrupt files may generate many warnings,
     * the policy implemented here is to show only the first warning,
     * unless trace_level >= 3.
     */
    if (err->num_warnings == 0 || err->trace_level >= 3)
 800f1fe:	68fb      	ldr	r3, [r7, #12]
 800f200:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800f202:	2b00      	cmp	r3, #0
 800f204:	d003      	beq.n	800f20e <emit_message+0x26>
 800f206:	68fb      	ldr	r3, [r7, #12]
 800f208:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800f20a:	2b02      	cmp	r3, #2
 800f20c:	dd03      	ble.n	800f216 <emit_message+0x2e>
      (*err->output_message) (cinfo);
 800f20e:	68fb      	ldr	r3, [r7, #12]
 800f210:	689b      	ldr	r3, [r3, #8]
 800f212:	6878      	ldr	r0, [r7, #4]
 800f214:	4798      	blx	r3
    /* Always count warnings in num_warnings. */
    err->num_warnings++;
 800f216:	68fb      	ldr	r3, [r7, #12]
 800f218:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800f21a:	1c5a      	adds	r2, r3, #1
 800f21c:	68fb      	ldr	r3, [r7, #12]
 800f21e:	66da      	str	r2, [r3, #108]	@ 0x6c
  } else {
    /* It's a trace message.  Show it if trace_level >= msg_level. */
    if (err->trace_level >= msg_level)
      (*err->output_message) (cinfo);
  }
}
 800f220:	e008      	b.n	800f234 <emit_message+0x4c>
    if (err->trace_level >= msg_level)
 800f222:	68fb      	ldr	r3, [r7, #12]
 800f224:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800f226:	683a      	ldr	r2, [r7, #0]
 800f228:	429a      	cmp	r2, r3
 800f22a:	dc03      	bgt.n	800f234 <emit_message+0x4c>
      (*err->output_message) (cinfo);
 800f22c:	68fb      	ldr	r3, [r7, #12]
 800f22e:	689b      	ldr	r3, [r3, #8]
 800f230:	6878      	ldr	r0, [r7, #4]
 800f232:	4798      	blx	r3
}
 800f234:	bf00      	nop
 800f236:	3710      	adds	r7, #16
 800f238:	46bd      	mov	sp, r7
 800f23a:	bd80      	pop	{r7, pc}

0800f23c <format_message>:
 * Few applications should need to override this method.
 */

METHODDEF(void)
format_message (j_common_ptr cinfo, char * buffer)
{
 800f23c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800f23e:	b091      	sub	sp, #68	@ 0x44
 800f240:	af06      	add	r7, sp, #24
 800f242:	60f8      	str	r0, [r7, #12]
 800f244:	60b9      	str	r1, [r7, #8]
  struct jpeg_error_mgr * err = cinfo->err;
 800f246:	68fb      	ldr	r3, [r7, #12]
 800f248:	681b      	ldr	r3, [r3, #0]
 800f24a:	61bb      	str	r3, [r7, #24]
  int msg_code = err->msg_code;
 800f24c:	69bb      	ldr	r3, [r7, #24]
 800f24e:	695b      	ldr	r3, [r3, #20]
 800f250:	617b      	str	r3, [r7, #20]
  const char * msgtext = NULL;
 800f252:	2300      	movs	r3, #0
 800f254:	627b      	str	r3, [r7, #36]	@ 0x24
  const char * msgptr;
  char ch;
  boolean isstring;

  /* Look up message string in proper table */
  if (msg_code > 0 && msg_code <= err->last_jpeg_message) {
 800f256:	697b      	ldr	r3, [r7, #20]
 800f258:	2b00      	cmp	r3, #0
 800f25a:	dd0c      	ble.n	800f276 <format_message+0x3a>
 800f25c:	69bb      	ldr	r3, [r7, #24]
 800f25e:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800f260:	697a      	ldr	r2, [r7, #20]
 800f262:	429a      	cmp	r2, r3
 800f264:	dc07      	bgt.n	800f276 <format_message+0x3a>
    msgtext = err->jpeg_message_table[msg_code];
 800f266:	69bb      	ldr	r3, [r7, #24]
 800f268:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 800f26a:	697b      	ldr	r3, [r7, #20]
 800f26c:	009b      	lsls	r3, r3, #2
 800f26e:	4413      	add	r3, r2
 800f270:	681b      	ldr	r3, [r3, #0]
 800f272:	627b      	str	r3, [r7, #36]	@ 0x24
 800f274:	e018      	b.n	800f2a8 <format_message+0x6c>
  } else if (err->addon_message_table != NULL &&
 800f276:	69bb      	ldr	r3, [r7, #24]
 800f278:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800f27a:	2b00      	cmp	r3, #0
 800f27c:	d014      	beq.n	800f2a8 <format_message+0x6c>
	     msg_code >= err->first_addon_message &&
 800f27e:	69bb      	ldr	r3, [r7, #24]
 800f280:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
  } else if (err->addon_message_table != NULL &&
 800f282:	697a      	ldr	r2, [r7, #20]
 800f284:	429a      	cmp	r2, r3
 800f286:	db0f      	blt.n	800f2a8 <format_message+0x6c>
	     msg_code <= err->last_addon_message) {
 800f288:	69bb      	ldr	r3, [r7, #24]
 800f28a:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
	     msg_code >= err->first_addon_message &&
 800f28e:	697a      	ldr	r2, [r7, #20]
 800f290:	429a      	cmp	r2, r3
 800f292:	dc09      	bgt.n	800f2a8 <format_message+0x6c>
    msgtext = err->addon_message_table[msg_code - err->first_addon_message];
 800f294:	69bb      	ldr	r3, [r7, #24]
 800f296:	6f9a      	ldr	r2, [r3, #120]	@ 0x78
 800f298:	69bb      	ldr	r3, [r7, #24]
 800f29a:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800f29c:	6979      	ldr	r1, [r7, #20]
 800f29e:	1acb      	subs	r3, r1, r3
 800f2a0:	009b      	lsls	r3, r3, #2
 800f2a2:	4413      	add	r3, r2
 800f2a4:	681b      	ldr	r3, [r3, #0]
 800f2a6:	627b      	str	r3, [r7, #36]	@ 0x24
  }

  /* Defend against bogus message number */
  if (msgtext == NULL) {
 800f2a8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800f2aa:	2b00      	cmp	r3, #0
 800f2ac:	d106      	bne.n	800f2bc <format_message+0x80>
    err->msg_parm.i[0] = msg_code;
 800f2ae:	69bb      	ldr	r3, [r7, #24]
 800f2b0:	697a      	ldr	r2, [r7, #20]
 800f2b2:	619a      	str	r2, [r3, #24]
    msgtext = err->jpeg_message_table[0];
 800f2b4:	69bb      	ldr	r3, [r7, #24]
 800f2b6:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800f2b8:	681b      	ldr	r3, [r3, #0]
 800f2ba:	627b      	str	r3, [r7, #36]	@ 0x24
  }

  /* Check for string parameter, as indicated by %s in the message text */
  isstring = FALSE;
 800f2bc:	2300      	movs	r3, #0
 800f2be:	61fb      	str	r3, [r7, #28]
  msgptr = msgtext;
 800f2c0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800f2c2:	623b      	str	r3, [r7, #32]
  while ((ch = *msgptr++) != '\0') {
 800f2c4:	e009      	b.n	800f2da <format_message+0x9e>
    if (ch == '%') {
 800f2c6:	7cfb      	ldrb	r3, [r7, #19]
 800f2c8:	2b25      	cmp	r3, #37	@ 0x25
 800f2ca:	d106      	bne.n	800f2da <format_message+0x9e>
      if (*msgptr == 's') isstring = TRUE;
 800f2cc:	6a3b      	ldr	r3, [r7, #32]
 800f2ce:	781b      	ldrb	r3, [r3, #0]
 800f2d0:	2b73      	cmp	r3, #115	@ 0x73
 800f2d2:	d10b      	bne.n	800f2ec <format_message+0xb0>
 800f2d4:	2301      	movs	r3, #1
 800f2d6:	61fb      	str	r3, [r7, #28]
      break;
 800f2d8:	e008      	b.n	800f2ec <format_message+0xb0>
  while ((ch = *msgptr++) != '\0') {
 800f2da:	6a3b      	ldr	r3, [r7, #32]
 800f2dc:	1c5a      	adds	r2, r3, #1
 800f2de:	623a      	str	r2, [r7, #32]
 800f2e0:	781b      	ldrb	r3, [r3, #0]
 800f2e2:	74fb      	strb	r3, [r7, #19]
 800f2e4:	7cfb      	ldrb	r3, [r7, #19]
 800f2e6:	2b00      	cmp	r3, #0
 800f2e8:	d1ed      	bne.n	800f2c6 <format_message+0x8a>
 800f2ea:	e000      	b.n	800f2ee <format_message+0xb2>
      break;
 800f2ec:	bf00      	nop
    }
  }

  /* Format the message into the passed buffer */
  if (isstring)
 800f2ee:	69fb      	ldr	r3, [r7, #28]
 800f2f0:	2b00      	cmp	r3, #0
 800f2f2:	d007      	beq.n	800f304 <format_message+0xc8>
    sprintf(buffer, msgtext, err->msg_parm.s);
 800f2f4:	69bb      	ldr	r3, [r7, #24]
 800f2f6:	3318      	adds	r3, #24
 800f2f8:	461a      	mov	r2, r3
 800f2fa:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 800f2fc:	68b8      	ldr	r0, [r7, #8]
 800f2fe:	f00a fb57 	bl	80199b0 <siprintf>
    sprintf(buffer, msgtext,
	    err->msg_parm.i[0], err->msg_parm.i[1],
	    err->msg_parm.i[2], err->msg_parm.i[3],
	    err->msg_parm.i[4], err->msg_parm.i[5],
	    err->msg_parm.i[6], err->msg_parm.i[7]);
}
 800f302:	e01c      	b.n	800f33e <format_message+0x102>
    sprintf(buffer, msgtext,
 800f304:	69bb      	ldr	r3, [r7, #24]
 800f306:	699e      	ldr	r6, [r3, #24]
 800f308:	69bb      	ldr	r3, [r7, #24]
 800f30a:	69db      	ldr	r3, [r3, #28]
 800f30c:	607b      	str	r3, [r7, #4]
 800f30e:	69bb      	ldr	r3, [r7, #24]
 800f310:	6a1b      	ldr	r3, [r3, #32]
 800f312:	69ba      	ldr	r2, [r7, #24]
 800f314:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 800f316:	69b9      	ldr	r1, [r7, #24]
 800f318:	6a89      	ldr	r1, [r1, #40]	@ 0x28
 800f31a:	69b8      	ldr	r0, [r7, #24]
 800f31c:	6ac0      	ldr	r0, [r0, #44]	@ 0x2c
 800f31e:	69bc      	ldr	r4, [r7, #24]
 800f320:	6b24      	ldr	r4, [r4, #48]	@ 0x30
 800f322:	69bd      	ldr	r5, [r7, #24]
 800f324:	6b6d      	ldr	r5, [r5, #52]	@ 0x34
 800f326:	9505      	str	r5, [sp, #20]
 800f328:	9404      	str	r4, [sp, #16]
 800f32a:	9003      	str	r0, [sp, #12]
 800f32c:	9102      	str	r1, [sp, #8]
 800f32e:	9201      	str	r2, [sp, #4]
 800f330:	9300      	str	r3, [sp, #0]
 800f332:	687b      	ldr	r3, [r7, #4]
 800f334:	4632      	mov	r2, r6
 800f336:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 800f338:	68b8      	ldr	r0, [r7, #8]
 800f33a:	f00a fb39 	bl	80199b0 <siprintf>
}
 800f33e:	bf00      	nop
 800f340:	372c      	adds	r7, #44	@ 0x2c
 800f342:	46bd      	mov	sp, r7
 800f344:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800f346 <reset_error_mgr>:
 * this method if it has additional error processing state.
 */

METHODDEF(void)
reset_error_mgr (j_common_ptr cinfo)
{
 800f346:	b480      	push	{r7}
 800f348:	b083      	sub	sp, #12
 800f34a:	af00      	add	r7, sp, #0
 800f34c:	6078      	str	r0, [r7, #4]
  cinfo->err->num_warnings = 0;
 800f34e:	687b      	ldr	r3, [r7, #4]
 800f350:	681b      	ldr	r3, [r3, #0]
 800f352:	2200      	movs	r2, #0
 800f354:	66da      	str	r2, [r3, #108]	@ 0x6c
  /* trace_level is not reset since it is an application-supplied parameter */
  cinfo->err->msg_code = 0;	/* may be useful as a flag for "no error" */
 800f356:	687b      	ldr	r3, [r7, #4]
 800f358:	681b      	ldr	r3, [r3, #0]
 800f35a:	2200      	movs	r2, #0
 800f35c:	615a      	str	r2, [r3, #20]
}
 800f35e:	bf00      	nop
 800f360:	370c      	adds	r7, #12
 800f362:	46bd      	mov	sp, r7
 800f364:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f368:	4770      	bx	lr
	...

0800f36c <jpeg_std_error>:
 * after which the application may override some of the methods.
 */

GLOBAL(struct jpeg_error_mgr *)
jpeg_std_error (struct jpeg_error_mgr * err)
{
 800f36c:	b480      	push	{r7}
 800f36e:	b083      	sub	sp, #12
 800f370:	af00      	add	r7, sp, #0
 800f372:	6078      	str	r0, [r7, #4]
  err->error_exit = error_exit;
 800f374:	687b      	ldr	r3, [r7, #4]
 800f376:	4a17      	ldr	r2, [pc, #92]	@ (800f3d4 <jpeg_std_error+0x68>)
 800f378:	601a      	str	r2, [r3, #0]
  err->emit_message = emit_message;
 800f37a:	687b      	ldr	r3, [r7, #4]
 800f37c:	4a16      	ldr	r2, [pc, #88]	@ (800f3d8 <jpeg_std_error+0x6c>)
 800f37e:	605a      	str	r2, [r3, #4]
  err->output_message = output_message;
 800f380:	687b      	ldr	r3, [r7, #4]
 800f382:	4a16      	ldr	r2, [pc, #88]	@ (800f3dc <jpeg_std_error+0x70>)
 800f384:	609a      	str	r2, [r3, #8]
  err->format_message = format_message;
 800f386:	687b      	ldr	r3, [r7, #4]
 800f388:	4a15      	ldr	r2, [pc, #84]	@ (800f3e0 <jpeg_std_error+0x74>)
 800f38a:	60da      	str	r2, [r3, #12]
  err->reset_error_mgr = reset_error_mgr;
 800f38c:	687b      	ldr	r3, [r7, #4]
 800f38e:	4a15      	ldr	r2, [pc, #84]	@ (800f3e4 <jpeg_std_error+0x78>)
 800f390:	611a      	str	r2, [r3, #16]

  err->trace_level = 0;		/* default = no tracing */
 800f392:	687b      	ldr	r3, [r7, #4]
 800f394:	2200      	movs	r2, #0
 800f396:	669a      	str	r2, [r3, #104]	@ 0x68
  err->num_warnings = 0;	/* no warnings emitted yet */
 800f398:	687b      	ldr	r3, [r7, #4]
 800f39a:	2200      	movs	r2, #0
 800f39c:	66da      	str	r2, [r3, #108]	@ 0x6c
  err->msg_code = 0;		/* may be useful as a flag for "no error" */
 800f39e:	687b      	ldr	r3, [r7, #4]
 800f3a0:	2200      	movs	r2, #0
 800f3a2:	615a      	str	r2, [r3, #20]

  /* Initialize message table pointers */
  err->jpeg_message_table = jpeg_std_message_table;
 800f3a4:	687b      	ldr	r3, [r7, #4]
 800f3a6:	4a10      	ldr	r2, [pc, #64]	@ (800f3e8 <jpeg_std_error+0x7c>)
 800f3a8:	671a      	str	r2, [r3, #112]	@ 0x70
  err->last_jpeg_message = (int) JMSG_LASTMSGCODE - 1;
 800f3aa:	687b      	ldr	r3, [r7, #4]
 800f3ac:	227e      	movs	r2, #126	@ 0x7e
 800f3ae:	675a      	str	r2, [r3, #116]	@ 0x74

  err->addon_message_table = NULL;
 800f3b0:	687b      	ldr	r3, [r7, #4]
 800f3b2:	2200      	movs	r2, #0
 800f3b4:	679a      	str	r2, [r3, #120]	@ 0x78
  err->first_addon_message = 0;	/* for safety */
 800f3b6:	687b      	ldr	r3, [r7, #4]
 800f3b8:	2200      	movs	r2, #0
 800f3ba:	67da      	str	r2, [r3, #124]	@ 0x7c
  err->last_addon_message = 0;
 800f3bc:	687b      	ldr	r3, [r7, #4]
 800f3be:	2200      	movs	r2, #0
 800f3c0:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

  return err;
 800f3c4:	687b      	ldr	r3, [r7, #4]
}
 800f3c6:	4618      	mov	r0, r3
 800f3c8:	370c      	adds	r7, #12
 800f3ca:	46bd      	mov	sp, r7
 800f3cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f3d0:	4770      	bx	lr
 800f3d2:	bf00      	nop
 800f3d4:	0800f1a9 	.word	0x0800f1a9
 800f3d8:	0800f1e9 	.word	0x0800f1e9
 800f3dc:	0800f1c9 	.word	0x0800f1c9
 800f3e0:	0800f23d 	.word	0x0800f23d
 800f3e4:	0800f347 	.word	0x0800f347
 800f3e8:	0801bbd8 	.word	0x0801bbd8

0800f3ec <jpeg_fdct_float>:
 * Perform the forward DCT on one block of samples.
 */

GLOBAL(void)
jpeg_fdct_float (FAST_FLOAT * data, JSAMPARRAY sample_data, JDIMENSION start_col)
{
 800f3ec:	b480      	push	{r7}
 800f3ee:	b09b      	sub	sp, #108	@ 0x6c
 800f3f0:	af00      	add	r7, sp, #0
 800f3f2:	60f8      	str	r0, [r7, #12]
 800f3f4:	60b9      	str	r1, [r7, #8]
 800f3f6:	607a      	str	r2, [r7, #4]
  JSAMPROW elemptr;
  int ctr;

  /* Pass 1: process rows. */

  dataptr = data;
 800f3f8:	68fb      	ldr	r3, [r7, #12]
 800f3fa:	667b      	str	r3, [r7, #100]	@ 0x64
  for (ctr = 0; ctr < DCTSIZE; ctr++) {
 800f3fc:	2300      	movs	r3, #0
 800f3fe:	663b      	str	r3, [r7, #96]	@ 0x60
 800f400:	e14e      	b.n	800f6a0 <jpeg_fdct_float+0x2b4>
    elemptr = sample_data[ctr] + start_col;
 800f402:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800f404:	009b      	lsls	r3, r3, #2
 800f406:	68ba      	ldr	r2, [r7, #8]
 800f408:	4413      	add	r3, r2
 800f40a:	681a      	ldr	r2, [r3, #0]
 800f40c:	687b      	ldr	r3, [r7, #4]
 800f40e:	4413      	add	r3, r2
 800f410:	613b      	str	r3, [r7, #16]

    /* Load data into workspace */
    tmp0 = (FAST_FLOAT) (GETJSAMPLE(elemptr[0]) + GETJSAMPLE(elemptr[7]));
 800f412:	693b      	ldr	r3, [r7, #16]
 800f414:	781b      	ldrb	r3, [r3, #0]
 800f416:	461a      	mov	r2, r3
 800f418:	693b      	ldr	r3, [r7, #16]
 800f41a:	3307      	adds	r3, #7
 800f41c:	781b      	ldrb	r3, [r3, #0]
 800f41e:	4413      	add	r3, r2
 800f420:	ee07 3a90 	vmov	s15, r3
 800f424:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800f428:	edc7 7a17 	vstr	s15, [r7, #92]	@ 0x5c
    tmp7 = (FAST_FLOAT) (GETJSAMPLE(elemptr[0]) - GETJSAMPLE(elemptr[7]));
 800f42c:	693b      	ldr	r3, [r7, #16]
 800f42e:	781b      	ldrb	r3, [r3, #0]
 800f430:	461a      	mov	r2, r3
 800f432:	693b      	ldr	r3, [r7, #16]
 800f434:	3307      	adds	r3, #7
 800f436:	781b      	ldrb	r3, [r3, #0]
 800f438:	1ad3      	subs	r3, r2, r3
 800f43a:	ee07 3a90 	vmov	s15, r3
 800f43e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800f442:	edc7 7a16 	vstr	s15, [r7, #88]	@ 0x58
    tmp1 = (FAST_FLOAT) (GETJSAMPLE(elemptr[1]) + GETJSAMPLE(elemptr[6]));
 800f446:	693b      	ldr	r3, [r7, #16]
 800f448:	3301      	adds	r3, #1
 800f44a:	781b      	ldrb	r3, [r3, #0]
 800f44c:	461a      	mov	r2, r3
 800f44e:	693b      	ldr	r3, [r7, #16]
 800f450:	3306      	adds	r3, #6
 800f452:	781b      	ldrb	r3, [r3, #0]
 800f454:	4413      	add	r3, r2
 800f456:	ee07 3a90 	vmov	s15, r3
 800f45a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800f45e:	edc7 7a15 	vstr	s15, [r7, #84]	@ 0x54
    tmp6 = (FAST_FLOAT) (GETJSAMPLE(elemptr[1]) - GETJSAMPLE(elemptr[6]));
 800f462:	693b      	ldr	r3, [r7, #16]
 800f464:	3301      	adds	r3, #1
 800f466:	781b      	ldrb	r3, [r3, #0]
 800f468:	461a      	mov	r2, r3
 800f46a:	693b      	ldr	r3, [r7, #16]
 800f46c:	3306      	adds	r3, #6
 800f46e:	781b      	ldrb	r3, [r3, #0]
 800f470:	1ad3      	subs	r3, r2, r3
 800f472:	ee07 3a90 	vmov	s15, r3
 800f476:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800f47a:	edc7 7a14 	vstr	s15, [r7, #80]	@ 0x50
    tmp2 = (FAST_FLOAT) (GETJSAMPLE(elemptr[2]) + GETJSAMPLE(elemptr[5]));
 800f47e:	693b      	ldr	r3, [r7, #16]
 800f480:	3302      	adds	r3, #2
 800f482:	781b      	ldrb	r3, [r3, #0]
 800f484:	461a      	mov	r2, r3
 800f486:	693b      	ldr	r3, [r7, #16]
 800f488:	3305      	adds	r3, #5
 800f48a:	781b      	ldrb	r3, [r3, #0]
 800f48c:	4413      	add	r3, r2
 800f48e:	ee07 3a90 	vmov	s15, r3
 800f492:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800f496:	edc7 7a13 	vstr	s15, [r7, #76]	@ 0x4c
    tmp5 = (FAST_FLOAT) (GETJSAMPLE(elemptr[2]) - GETJSAMPLE(elemptr[5]));
 800f49a:	693b      	ldr	r3, [r7, #16]
 800f49c:	3302      	adds	r3, #2
 800f49e:	781b      	ldrb	r3, [r3, #0]
 800f4a0:	461a      	mov	r2, r3
 800f4a2:	693b      	ldr	r3, [r7, #16]
 800f4a4:	3305      	adds	r3, #5
 800f4a6:	781b      	ldrb	r3, [r3, #0]
 800f4a8:	1ad3      	subs	r3, r2, r3
 800f4aa:	ee07 3a90 	vmov	s15, r3
 800f4ae:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800f4b2:	edc7 7a12 	vstr	s15, [r7, #72]	@ 0x48
    tmp3 = (FAST_FLOAT) (GETJSAMPLE(elemptr[3]) + GETJSAMPLE(elemptr[4]));
 800f4b6:	693b      	ldr	r3, [r7, #16]
 800f4b8:	3303      	adds	r3, #3
 800f4ba:	781b      	ldrb	r3, [r3, #0]
 800f4bc:	461a      	mov	r2, r3
 800f4be:	693b      	ldr	r3, [r7, #16]
 800f4c0:	3304      	adds	r3, #4
 800f4c2:	781b      	ldrb	r3, [r3, #0]
 800f4c4:	4413      	add	r3, r2
 800f4c6:	ee07 3a90 	vmov	s15, r3
 800f4ca:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800f4ce:	edc7 7a11 	vstr	s15, [r7, #68]	@ 0x44
    tmp4 = (FAST_FLOAT) (GETJSAMPLE(elemptr[3]) - GETJSAMPLE(elemptr[4]));
 800f4d2:	693b      	ldr	r3, [r7, #16]
 800f4d4:	3303      	adds	r3, #3
 800f4d6:	781b      	ldrb	r3, [r3, #0]
 800f4d8:	461a      	mov	r2, r3
 800f4da:	693b      	ldr	r3, [r7, #16]
 800f4dc:	3304      	adds	r3, #4
 800f4de:	781b      	ldrb	r3, [r3, #0]
 800f4e0:	1ad3      	subs	r3, r2, r3
 800f4e2:	ee07 3a90 	vmov	s15, r3
 800f4e6:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800f4ea:	edc7 7a10 	vstr	s15, [r7, #64]	@ 0x40

    /* Even part */

    tmp10 = tmp0 + tmp3;	/* phase 2 */
 800f4ee:	ed97 7a17 	vldr	s14, [r7, #92]	@ 0x5c
 800f4f2:	edd7 7a11 	vldr	s15, [r7, #68]	@ 0x44
 800f4f6:	ee77 7a27 	vadd.f32	s15, s14, s15
 800f4fa:	edc7 7a0f 	vstr	s15, [r7, #60]	@ 0x3c
    tmp13 = tmp0 - tmp3;
 800f4fe:	ed97 7a17 	vldr	s14, [r7, #92]	@ 0x5c
 800f502:	edd7 7a11 	vldr	s15, [r7, #68]	@ 0x44
 800f506:	ee77 7a67 	vsub.f32	s15, s14, s15
 800f50a:	edc7 7a0e 	vstr	s15, [r7, #56]	@ 0x38
    tmp11 = tmp1 + tmp2;
 800f50e:	ed97 7a15 	vldr	s14, [r7, #84]	@ 0x54
 800f512:	edd7 7a13 	vldr	s15, [r7, #76]	@ 0x4c
 800f516:	ee77 7a27 	vadd.f32	s15, s14, s15
 800f51a:	edc7 7a0d 	vstr	s15, [r7, #52]	@ 0x34
    tmp12 = tmp1 - tmp2;
 800f51e:	ed97 7a15 	vldr	s14, [r7, #84]	@ 0x54
 800f522:	edd7 7a13 	vldr	s15, [r7, #76]	@ 0x4c
 800f526:	ee77 7a67 	vsub.f32	s15, s14, s15
 800f52a:	edc7 7a0c 	vstr	s15, [r7, #48]	@ 0x30

    /* Apply unsigned->signed conversion */
    dataptr[0] = tmp10 + tmp11 - 8 * CENTERJSAMPLE; /* phase 3 */
 800f52e:	ed97 7a0f 	vldr	s14, [r7, #60]	@ 0x3c
 800f532:	edd7 7a0d 	vldr	s15, [r7, #52]	@ 0x34
 800f536:	ee77 7a27 	vadd.f32	s15, s14, s15
 800f53a:	ed9f 7a5e 	vldr	s14, [pc, #376]	@ 800f6b4 <jpeg_fdct_float+0x2c8>
 800f53e:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800f542:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800f544:	edc3 7a00 	vstr	s15, [r3]
    dataptr[4] = tmp10 - tmp11;
 800f548:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800f54a:	3310      	adds	r3, #16
 800f54c:	ed97 7a0f 	vldr	s14, [r7, #60]	@ 0x3c
 800f550:	edd7 7a0d 	vldr	s15, [r7, #52]	@ 0x34
 800f554:	ee77 7a67 	vsub.f32	s15, s14, s15
 800f558:	edc3 7a00 	vstr	s15, [r3]

    z1 = (tmp12 + tmp13) * ((FAST_FLOAT) 0.707106781); /* c4 */
 800f55c:	ed97 7a0c 	vldr	s14, [r7, #48]	@ 0x30
 800f560:	edd7 7a0e 	vldr	s15, [r7, #56]	@ 0x38
 800f564:	ee77 7a27 	vadd.f32	s15, s14, s15
 800f568:	ed9f 7a56 	vldr	s14, [pc, #344]	@ 800f6c4 <jpeg_fdct_float+0x2d8>
 800f56c:	ee67 7a87 	vmul.f32	s15, s15, s14
 800f570:	edc7 7a0b 	vstr	s15, [r7, #44]	@ 0x2c
    dataptr[2] = tmp13 + z1;	/* phase 5 */
 800f574:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800f576:	3308      	adds	r3, #8
 800f578:	ed97 7a0e 	vldr	s14, [r7, #56]	@ 0x38
 800f57c:	edd7 7a0b 	vldr	s15, [r7, #44]	@ 0x2c
 800f580:	ee77 7a27 	vadd.f32	s15, s14, s15
 800f584:	edc3 7a00 	vstr	s15, [r3]
    dataptr[6] = tmp13 - z1;
 800f588:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800f58a:	3318      	adds	r3, #24
 800f58c:	ed97 7a0e 	vldr	s14, [r7, #56]	@ 0x38
 800f590:	edd7 7a0b 	vldr	s15, [r7, #44]	@ 0x2c
 800f594:	ee77 7a67 	vsub.f32	s15, s14, s15
 800f598:	edc3 7a00 	vstr	s15, [r3]

    /* Odd part */

    tmp10 = tmp4 + tmp5;	/* phase 2 */
 800f59c:	ed97 7a10 	vldr	s14, [r7, #64]	@ 0x40
 800f5a0:	edd7 7a12 	vldr	s15, [r7, #72]	@ 0x48
 800f5a4:	ee77 7a27 	vadd.f32	s15, s14, s15
 800f5a8:	edc7 7a0f 	vstr	s15, [r7, #60]	@ 0x3c
    tmp11 = tmp5 + tmp6;
 800f5ac:	ed97 7a12 	vldr	s14, [r7, #72]	@ 0x48
 800f5b0:	edd7 7a14 	vldr	s15, [r7, #80]	@ 0x50
 800f5b4:	ee77 7a27 	vadd.f32	s15, s14, s15
 800f5b8:	edc7 7a0d 	vstr	s15, [r7, #52]	@ 0x34
    tmp12 = tmp6 + tmp7;
 800f5bc:	ed97 7a14 	vldr	s14, [r7, #80]	@ 0x50
 800f5c0:	edd7 7a16 	vldr	s15, [r7, #88]	@ 0x58
 800f5c4:	ee77 7a27 	vadd.f32	s15, s14, s15
 800f5c8:	edc7 7a0c 	vstr	s15, [r7, #48]	@ 0x30

    /* The rotator is modified from fig 4-8 to avoid extra negations. */
    z5 = (tmp10 - tmp12) * ((FAST_FLOAT) 0.382683433); /* c6 */
 800f5cc:	ed97 7a0f 	vldr	s14, [r7, #60]	@ 0x3c
 800f5d0:	edd7 7a0c 	vldr	s15, [r7, #48]	@ 0x30
 800f5d4:	ee77 7a67 	vsub.f32	s15, s14, s15
 800f5d8:	ed9f 7a37 	vldr	s14, [pc, #220]	@ 800f6b8 <jpeg_fdct_float+0x2cc>
 800f5dc:	ee67 7a87 	vmul.f32	s15, s15, s14
 800f5e0:	edc7 7a0a 	vstr	s15, [r7, #40]	@ 0x28
    z2 = ((FAST_FLOAT) 0.541196100) * tmp10 + z5; /* c2-c6 */
 800f5e4:	edd7 7a0f 	vldr	s15, [r7, #60]	@ 0x3c
 800f5e8:	ed9f 7a34 	vldr	s14, [pc, #208]	@ 800f6bc <jpeg_fdct_float+0x2d0>
 800f5ec:	ee67 7a87 	vmul.f32	s15, s15, s14
 800f5f0:	ed97 7a0a 	vldr	s14, [r7, #40]	@ 0x28
 800f5f4:	ee77 7a27 	vadd.f32	s15, s14, s15
 800f5f8:	edc7 7a09 	vstr	s15, [r7, #36]	@ 0x24
    z4 = ((FAST_FLOAT) 1.306562965) * tmp12 + z5; /* c2+c6 */
 800f5fc:	edd7 7a0c 	vldr	s15, [r7, #48]	@ 0x30
 800f600:	ed9f 7a2f 	vldr	s14, [pc, #188]	@ 800f6c0 <jpeg_fdct_float+0x2d4>
 800f604:	ee67 7a87 	vmul.f32	s15, s15, s14
 800f608:	ed97 7a0a 	vldr	s14, [r7, #40]	@ 0x28
 800f60c:	ee77 7a27 	vadd.f32	s15, s14, s15
 800f610:	edc7 7a08 	vstr	s15, [r7, #32]
    z3 = tmp11 * ((FAST_FLOAT) 0.707106781); /* c4 */
 800f614:	edd7 7a0d 	vldr	s15, [r7, #52]	@ 0x34
 800f618:	ed9f 7a2a 	vldr	s14, [pc, #168]	@ 800f6c4 <jpeg_fdct_float+0x2d8>
 800f61c:	ee67 7a87 	vmul.f32	s15, s15, s14
 800f620:	edc7 7a07 	vstr	s15, [r7, #28]

    z11 = tmp7 + z3;		/* phase 5 */
 800f624:	ed97 7a16 	vldr	s14, [r7, #88]	@ 0x58
 800f628:	edd7 7a07 	vldr	s15, [r7, #28]
 800f62c:	ee77 7a27 	vadd.f32	s15, s14, s15
 800f630:	edc7 7a06 	vstr	s15, [r7, #24]
    z13 = tmp7 - z3;
 800f634:	ed97 7a16 	vldr	s14, [r7, #88]	@ 0x58
 800f638:	edd7 7a07 	vldr	s15, [r7, #28]
 800f63c:	ee77 7a67 	vsub.f32	s15, s14, s15
 800f640:	edc7 7a05 	vstr	s15, [r7, #20]

    dataptr[5] = z13 + z2;	/* phase 6 */
 800f644:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800f646:	3314      	adds	r3, #20
 800f648:	ed97 7a05 	vldr	s14, [r7, #20]
 800f64c:	edd7 7a09 	vldr	s15, [r7, #36]	@ 0x24
 800f650:	ee77 7a27 	vadd.f32	s15, s14, s15
 800f654:	edc3 7a00 	vstr	s15, [r3]
    dataptr[3] = z13 - z2;
 800f658:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800f65a:	330c      	adds	r3, #12
 800f65c:	ed97 7a05 	vldr	s14, [r7, #20]
 800f660:	edd7 7a09 	vldr	s15, [r7, #36]	@ 0x24
 800f664:	ee77 7a67 	vsub.f32	s15, s14, s15
 800f668:	edc3 7a00 	vstr	s15, [r3]
    dataptr[1] = z11 + z4;
 800f66c:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800f66e:	3304      	adds	r3, #4
 800f670:	ed97 7a06 	vldr	s14, [r7, #24]
 800f674:	edd7 7a08 	vldr	s15, [r7, #32]
 800f678:	ee77 7a27 	vadd.f32	s15, s14, s15
 800f67c:	edc3 7a00 	vstr	s15, [r3]
    dataptr[7] = z11 - z4;
 800f680:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800f682:	331c      	adds	r3, #28
 800f684:	ed97 7a06 	vldr	s14, [r7, #24]
 800f688:	edd7 7a08 	vldr	s15, [r7, #32]
 800f68c:	ee77 7a67 	vsub.f32	s15, s14, s15
 800f690:	edc3 7a00 	vstr	s15, [r3]

    dataptr += DCTSIZE;		/* advance pointer to next row */
 800f694:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800f696:	3320      	adds	r3, #32
 800f698:	667b      	str	r3, [r7, #100]	@ 0x64
  for (ctr = 0; ctr < DCTSIZE; ctr++) {
 800f69a:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800f69c:	3301      	adds	r3, #1
 800f69e:	663b      	str	r3, [r7, #96]	@ 0x60
 800f6a0:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800f6a2:	2b07      	cmp	r3, #7
 800f6a4:	f77f aead 	ble.w	800f402 <jpeg_fdct_float+0x16>
  }

  /* Pass 2: process columns. */

  dataptr = data;
 800f6a8:	68fb      	ldr	r3, [r7, #12]
 800f6aa:	667b      	str	r3, [r7, #100]	@ 0x64
  for (ctr = DCTSIZE-1; ctr >= 0; ctr--) {
 800f6ac:	2307      	movs	r3, #7
 800f6ae:	663b      	str	r3, [r7, #96]	@ 0x60
 800f6b0:	e13d      	b.n	800f92e <jpeg_fdct_float+0x542>
 800f6b2:	bf00      	nop
 800f6b4:	44800000 	.word	0x44800000
 800f6b8:	3ec3ef15 	.word	0x3ec3ef15
 800f6bc:	3f0a8bd4 	.word	0x3f0a8bd4
 800f6c0:	3fa73d75 	.word	0x3fa73d75
 800f6c4:	3f3504f3 	.word	0x3f3504f3
    tmp0 = dataptr[DCTSIZE*0] + dataptr[DCTSIZE*7];
 800f6c8:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800f6ca:	ed93 7a00 	vldr	s14, [r3]
 800f6ce:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800f6d0:	33e0      	adds	r3, #224	@ 0xe0
 800f6d2:	edd3 7a00 	vldr	s15, [r3]
 800f6d6:	ee77 7a27 	vadd.f32	s15, s14, s15
 800f6da:	edc7 7a17 	vstr	s15, [r7, #92]	@ 0x5c
    tmp7 = dataptr[DCTSIZE*0] - dataptr[DCTSIZE*7];
 800f6de:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800f6e0:	ed93 7a00 	vldr	s14, [r3]
 800f6e4:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800f6e6:	33e0      	adds	r3, #224	@ 0xe0
 800f6e8:	edd3 7a00 	vldr	s15, [r3]
 800f6ec:	ee77 7a67 	vsub.f32	s15, s14, s15
 800f6f0:	edc7 7a16 	vstr	s15, [r7, #88]	@ 0x58
    tmp1 = dataptr[DCTSIZE*1] + dataptr[DCTSIZE*6];
 800f6f4:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800f6f6:	3320      	adds	r3, #32
 800f6f8:	ed93 7a00 	vldr	s14, [r3]
 800f6fc:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800f6fe:	33c0      	adds	r3, #192	@ 0xc0
 800f700:	edd3 7a00 	vldr	s15, [r3]
 800f704:	ee77 7a27 	vadd.f32	s15, s14, s15
 800f708:	edc7 7a15 	vstr	s15, [r7, #84]	@ 0x54
    tmp6 = dataptr[DCTSIZE*1] - dataptr[DCTSIZE*6];
 800f70c:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800f70e:	3320      	adds	r3, #32
 800f710:	ed93 7a00 	vldr	s14, [r3]
 800f714:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800f716:	33c0      	adds	r3, #192	@ 0xc0
 800f718:	edd3 7a00 	vldr	s15, [r3]
 800f71c:	ee77 7a67 	vsub.f32	s15, s14, s15
 800f720:	edc7 7a14 	vstr	s15, [r7, #80]	@ 0x50
    tmp2 = dataptr[DCTSIZE*2] + dataptr[DCTSIZE*5];
 800f724:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800f726:	3340      	adds	r3, #64	@ 0x40
 800f728:	ed93 7a00 	vldr	s14, [r3]
 800f72c:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800f72e:	33a0      	adds	r3, #160	@ 0xa0
 800f730:	edd3 7a00 	vldr	s15, [r3]
 800f734:	ee77 7a27 	vadd.f32	s15, s14, s15
 800f738:	edc7 7a13 	vstr	s15, [r7, #76]	@ 0x4c
    tmp5 = dataptr[DCTSIZE*2] - dataptr[DCTSIZE*5];
 800f73c:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800f73e:	3340      	adds	r3, #64	@ 0x40
 800f740:	ed93 7a00 	vldr	s14, [r3]
 800f744:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800f746:	33a0      	adds	r3, #160	@ 0xa0
 800f748:	edd3 7a00 	vldr	s15, [r3]
 800f74c:	ee77 7a67 	vsub.f32	s15, s14, s15
 800f750:	edc7 7a12 	vstr	s15, [r7, #72]	@ 0x48
    tmp3 = dataptr[DCTSIZE*3] + dataptr[DCTSIZE*4];
 800f754:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800f756:	3360      	adds	r3, #96	@ 0x60
 800f758:	ed93 7a00 	vldr	s14, [r3]
 800f75c:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800f75e:	3380      	adds	r3, #128	@ 0x80
 800f760:	edd3 7a00 	vldr	s15, [r3]
 800f764:	ee77 7a27 	vadd.f32	s15, s14, s15
 800f768:	edc7 7a11 	vstr	s15, [r7, #68]	@ 0x44
    tmp4 = dataptr[DCTSIZE*3] - dataptr[DCTSIZE*4];
 800f76c:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800f76e:	3360      	adds	r3, #96	@ 0x60
 800f770:	ed93 7a00 	vldr	s14, [r3]
 800f774:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800f776:	3380      	adds	r3, #128	@ 0x80
 800f778:	edd3 7a00 	vldr	s15, [r3]
 800f77c:	ee77 7a67 	vsub.f32	s15, s14, s15
 800f780:	edc7 7a10 	vstr	s15, [r7, #64]	@ 0x40

    /* Even part */

    tmp10 = tmp0 + tmp3;	/* phase 2 */
 800f784:	ed97 7a17 	vldr	s14, [r7, #92]	@ 0x5c
 800f788:	edd7 7a11 	vldr	s15, [r7, #68]	@ 0x44
 800f78c:	ee77 7a27 	vadd.f32	s15, s14, s15
 800f790:	edc7 7a0f 	vstr	s15, [r7, #60]	@ 0x3c
    tmp13 = tmp0 - tmp3;
 800f794:	ed97 7a17 	vldr	s14, [r7, #92]	@ 0x5c
 800f798:	edd7 7a11 	vldr	s15, [r7, #68]	@ 0x44
 800f79c:	ee77 7a67 	vsub.f32	s15, s14, s15
 800f7a0:	edc7 7a0e 	vstr	s15, [r7, #56]	@ 0x38
    tmp11 = tmp1 + tmp2;
 800f7a4:	ed97 7a15 	vldr	s14, [r7, #84]	@ 0x54
 800f7a8:	edd7 7a13 	vldr	s15, [r7, #76]	@ 0x4c
 800f7ac:	ee77 7a27 	vadd.f32	s15, s14, s15
 800f7b0:	edc7 7a0d 	vstr	s15, [r7, #52]	@ 0x34
    tmp12 = tmp1 - tmp2;
 800f7b4:	ed97 7a15 	vldr	s14, [r7, #84]	@ 0x54
 800f7b8:	edd7 7a13 	vldr	s15, [r7, #76]	@ 0x4c
 800f7bc:	ee77 7a67 	vsub.f32	s15, s14, s15
 800f7c0:	edc7 7a0c 	vstr	s15, [r7, #48]	@ 0x30

    dataptr[DCTSIZE*0] = tmp10 + tmp11; /* phase 3 */
 800f7c4:	ed97 7a0f 	vldr	s14, [r7, #60]	@ 0x3c
 800f7c8:	edd7 7a0d 	vldr	s15, [r7, #52]	@ 0x34
 800f7cc:	ee77 7a27 	vadd.f32	s15, s14, s15
 800f7d0:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800f7d2:	edc3 7a00 	vstr	s15, [r3]
    dataptr[DCTSIZE*4] = tmp10 - tmp11;
 800f7d6:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800f7d8:	3380      	adds	r3, #128	@ 0x80
 800f7da:	ed97 7a0f 	vldr	s14, [r7, #60]	@ 0x3c
 800f7de:	edd7 7a0d 	vldr	s15, [r7, #52]	@ 0x34
 800f7e2:	ee77 7a67 	vsub.f32	s15, s14, s15
 800f7e6:	edc3 7a00 	vstr	s15, [r3]

    z1 = (tmp12 + tmp13) * ((FAST_FLOAT) 0.707106781); /* c4 */
 800f7ea:	ed97 7a0c 	vldr	s14, [r7, #48]	@ 0x30
 800f7ee:	edd7 7a0e 	vldr	s15, [r7, #56]	@ 0x38
 800f7f2:	ee77 7a27 	vadd.f32	s15, s14, s15
 800f7f6:	ed1f 7a4d 	vldr	s14, [pc, #-308]	@ 800f6c4 <jpeg_fdct_float+0x2d8>
 800f7fa:	ee67 7a87 	vmul.f32	s15, s15, s14
 800f7fe:	edc7 7a0b 	vstr	s15, [r7, #44]	@ 0x2c
    dataptr[DCTSIZE*2] = tmp13 + z1; /* phase 5 */
 800f802:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800f804:	3340      	adds	r3, #64	@ 0x40
 800f806:	ed97 7a0e 	vldr	s14, [r7, #56]	@ 0x38
 800f80a:	edd7 7a0b 	vldr	s15, [r7, #44]	@ 0x2c
 800f80e:	ee77 7a27 	vadd.f32	s15, s14, s15
 800f812:	edc3 7a00 	vstr	s15, [r3]
    dataptr[DCTSIZE*6] = tmp13 - z1;
 800f816:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800f818:	33c0      	adds	r3, #192	@ 0xc0
 800f81a:	ed97 7a0e 	vldr	s14, [r7, #56]	@ 0x38
 800f81e:	edd7 7a0b 	vldr	s15, [r7, #44]	@ 0x2c
 800f822:	ee77 7a67 	vsub.f32	s15, s14, s15
 800f826:	edc3 7a00 	vstr	s15, [r3]

    /* Odd part */

    tmp10 = tmp4 + tmp5;	/* phase 2 */
 800f82a:	ed97 7a10 	vldr	s14, [r7, #64]	@ 0x40
 800f82e:	edd7 7a12 	vldr	s15, [r7, #72]	@ 0x48
 800f832:	ee77 7a27 	vadd.f32	s15, s14, s15
 800f836:	edc7 7a0f 	vstr	s15, [r7, #60]	@ 0x3c
    tmp11 = tmp5 + tmp6;
 800f83a:	ed97 7a12 	vldr	s14, [r7, #72]	@ 0x48
 800f83e:	edd7 7a14 	vldr	s15, [r7, #80]	@ 0x50
 800f842:	ee77 7a27 	vadd.f32	s15, s14, s15
 800f846:	edc7 7a0d 	vstr	s15, [r7, #52]	@ 0x34
    tmp12 = tmp6 + tmp7;
 800f84a:	ed97 7a14 	vldr	s14, [r7, #80]	@ 0x50
 800f84e:	edd7 7a16 	vldr	s15, [r7, #88]	@ 0x58
 800f852:	ee77 7a27 	vadd.f32	s15, s14, s15
 800f856:	edc7 7a0c 	vstr	s15, [r7, #48]	@ 0x30

    /* The rotator is modified from fig 4-8 to avoid extra negations. */
    z5 = (tmp10 - tmp12) * ((FAST_FLOAT) 0.382683433); /* c6 */
 800f85a:	ed97 7a0f 	vldr	s14, [r7, #60]	@ 0x3c
 800f85e:	edd7 7a0c 	vldr	s15, [r7, #48]	@ 0x30
 800f862:	ee77 7a67 	vsub.f32	s15, s14, s15
 800f866:	ed1f 7a6c 	vldr	s14, [pc, #-432]	@ 800f6b8 <jpeg_fdct_float+0x2cc>
 800f86a:	ee67 7a87 	vmul.f32	s15, s15, s14
 800f86e:	edc7 7a0a 	vstr	s15, [r7, #40]	@ 0x28
    z2 = ((FAST_FLOAT) 0.541196100) * tmp10 + z5; /* c2-c6 */
 800f872:	edd7 7a0f 	vldr	s15, [r7, #60]	@ 0x3c
 800f876:	ed1f 7a6f 	vldr	s14, [pc, #-444]	@ 800f6bc <jpeg_fdct_float+0x2d0>
 800f87a:	ee67 7a87 	vmul.f32	s15, s15, s14
 800f87e:	ed97 7a0a 	vldr	s14, [r7, #40]	@ 0x28
 800f882:	ee77 7a27 	vadd.f32	s15, s14, s15
 800f886:	edc7 7a09 	vstr	s15, [r7, #36]	@ 0x24
    z4 = ((FAST_FLOAT) 1.306562965) * tmp12 + z5; /* c2+c6 */
 800f88a:	edd7 7a0c 	vldr	s15, [r7, #48]	@ 0x30
 800f88e:	ed1f 7a74 	vldr	s14, [pc, #-464]	@ 800f6c0 <jpeg_fdct_float+0x2d4>
 800f892:	ee67 7a87 	vmul.f32	s15, s15, s14
 800f896:	ed97 7a0a 	vldr	s14, [r7, #40]	@ 0x28
 800f89a:	ee77 7a27 	vadd.f32	s15, s14, s15
 800f89e:	edc7 7a08 	vstr	s15, [r7, #32]
    z3 = tmp11 * ((FAST_FLOAT) 0.707106781); /* c4 */
 800f8a2:	edd7 7a0d 	vldr	s15, [r7, #52]	@ 0x34
 800f8a6:	ed1f 7a79 	vldr	s14, [pc, #-484]	@ 800f6c4 <jpeg_fdct_float+0x2d8>
 800f8aa:	ee67 7a87 	vmul.f32	s15, s15, s14
 800f8ae:	edc7 7a07 	vstr	s15, [r7, #28]

    z11 = tmp7 + z3;		/* phase 5 */
 800f8b2:	ed97 7a16 	vldr	s14, [r7, #88]	@ 0x58
 800f8b6:	edd7 7a07 	vldr	s15, [r7, #28]
 800f8ba:	ee77 7a27 	vadd.f32	s15, s14, s15
 800f8be:	edc7 7a06 	vstr	s15, [r7, #24]
    z13 = tmp7 - z3;
 800f8c2:	ed97 7a16 	vldr	s14, [r7, #88]	@ 0x58
 800f8c6:	edd7 7a07 	vldr	s15, [r7, #28]
 800f8ca:	ee77 7a67 	vsub.f32	s15, s14, s15
 800f8ce:	edc7 7a05 	vstr	s15, [r7, #20]

    dataptr[DCTSIZE*5] = z13 + z2; /* phase 6 */
 800f8d2:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800f8d4:	33a0      	adds	r3, #160	@ 0xa0
 800f8d6:	ed97 7a05 	vldr	s14, [r7, #20]
 800f8da:	edd7 7a09 	vldr	s15, [r7, #36]	@ 0x24
 800f8de:	ee77 7a27 	vadd.f32	s15, s14, s15
 800f8e2:	edc3 7a00 	vstr	s15, [r3]
    dataptr[DCTSIZE*3] = z13 - z2;
 800f8e6:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800f8e8:	3360      	adds	r3, #96	@ 0x60
 800f8ea:	ed97 7a05 	vldr	s14, [r7, #20]
 800f8ee:	edd7 7a09 	vldr	s15, [r7, #36]	@ 0x24
 800f8f2:	ee77 7a67 	vsub.f32	s15, s14, s15
 800f8f6:	edc3 7a00 	vstr	s15, [r3]
    dataptr[DCTSIZE*1] = z11 + z4;
 800f8fa:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800f8fc:	3320      	adds	r3, #32
 800f8fe:	ed97 7a06 	vldr	s14, [r7, #24]
 800f902:	edd7 7a08 	vldr	s15, [r7, #32]
 800f906:	ee77 7a27 	vadd.f32	s15, s14, s15
 800f90a:	edc3 7a00 	vstr	s15, [r3]
    dataptr[DCTSIZE*7] = z11 - z4;
 800f90e:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800f910:	33e0      	adds	r3, #224	@ 0xe0
 800f912:	ed97 7a06 	vldr	s14, [r7, #24]
 800f916:	edd7 7a08 	vldr	s15, [r7, #32]
 800f91a:	ee77 7a67 	vsub.f32	s15, s14, s15
 800f91e:	edc3 7a00 	vstr	s15, [r3]

    dataptr++;			/* advance pointer to next column */
 800f922:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800f924:	3304      	adds	r3, #4
 800f926:	667b      	str	r3, [r7, #100]	@ 0x64
  for (ctr = DCTSIZE-1; ctr >= 0; ctr--) {
 800f928:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800f92a:	3b01      	subs	r3, #1
 800f92c:	663b      	str	r3, [r7, #96]	@ 0x60
 800f92e:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800f930:	2b00      	cmp	r3, #0
 800f932:	f6bf aec9 	bge.w	800f6c8 <jpeg_fdct_float+0x2dc>
  }
}
 800f936:	bf00      	nop
 800f938:	bf00      	nop
 800f93a:	376c      	adds	r7, #108	@ 0x6c
 800f93c:	46bd      	mov	sp, r7
 800f93e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f942:	4770      	bx	lr

0800f944 <jpeg_fdct_ifast>:
 * Perform the forward DCT on one block of samples.
 */

GLOBAL(void)
jpeg_fdct_ifast (DCTELEM * data, JSAMPARRAY sample_data, JDIMENSION start_col)
{
 800f944:	b480      	push	{r7}
 800f946:	b09b      	sub	sp, #108	@ 0x6c
 800f948:	af00      	add	r7, sp, #0
 800f94a:	60f8      	str	r0, [r7, #12]
 800f94c:	60b9      	str	r1, [r7, #8]
 800f94e:	607a      	str	r2, [r7, #4]
  int ctr;
  SHIFT_TEMPS

  /* Pass 1: process rows. */

  dataptr = data;
 800f950:	68fb      	ldr	r3, [r7, #12]
 800f952:	667b      	str	r3, [r7, #100]	@ 0x64
  for (ctr = 0; ctr < DCTSIZE; ctr++) {
 800f954:	2300      	movs	r3, #0
 800f956:	663b      	str	r3, [r7, #96]	@ 0x60
 800f958:	e0cf      	b.n	800fafa <jpeg_fdct_ifast+0x1b6>
    elemptr = sample_data[ctr] + start_col;
 800f95a:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800f95c:	009b      	lsls	r3, r3, #2
 800f95e:	68ba      	ldr	r2, [r7, #8]
 800f960:	4413      	add	r3, r2
 800f962:	681a      	ldr	r2, [r3, #0]
 800f964:	687b      	ldr	r3, [r7, #4]
 800f966:	4413      	add	r3, r2
 800f968:	613b      	str	r3, [r7, #16]

    /* Load data into workspace */
    tmp0 = GETJSAMPLE(elemptr[0]) + GETJSAMPLE(elemptr[7]);
 800f96a:	693b      	ldr	r3, [r7, #16]
 800f96c:	781b      	ldrb	r3, [r3, #0]
 800f96e:	461a      	mov	r2, r3
 800f970:	693b      	ldr	r3, [r7, #16]
 800f972:	3307      	adds	r3, #7
 800f974:	781b      	ldrb	r3, [r3, #0]
 800f976:	4413      	add	r3, r2
 800f978:	65fb      	str	r3, [r7, #92]	@ 0x5c
    tmp7 = GETJSAMPLE(elemptr[0]) - GETJSAMPLE(elemptr[7]);
 800f97a:	693b      	ldr	r3, [r7, #16]
 800f97c:	781b      	ldrb	r3, [r3, #0]
 800f97e:	461a      	mov	r2, r3
 800f980:	693b      	ldr	r3, [r7, #16]
 800f982:	3307      	adds	r3, #7
 800f984:	781b      	ldrb	r3, [r3, #0]
 800f986:	1ad3      	subs	r3, r2, r3
 800f988:	65bb      	str	r3, [r7, #88]	@ 0x58
    tmp1 = GETJSAMPLE(elemptr[1]) + GETJSAMPLE(elemptr[6]);
 800f98a:	693b      	ldr	r3, [r7, #16]
 800f98c:	3301      	adds	r3, #1
 800f98e:	781b      	ldrb	r3, [r3, #0]
 800f990:	461a      	mov	r2, r3
 800f992:	693b      	ldr	r3, [r7, #16]
 800f994:	3306      	adds	r3, #6
 800f996:	781b      	ldrb	r3, [r3, #0]
 800f998:	4413      	add	r3, r2
 800f99a:	657b      	str	r3, [r7, #84]	@ 0x54
    tmp6 = GETJSAMPLE(elemptr[1]) - GETJSAMPLE(elemptr[6]);
 800f99c:	693b      	ldr	r3, [r7, #16]
 800f99e:	3301      	adds	r3, #1
 800f9a0:	781b      	ldrb	r3, [r3, #0]
 800f9a2:	461a      	mov	r2, r3
 800f9a4:	693b      	ldr	r3, [r7, #16]
 800f9a6:	3306      	adds	r3, #6
 800f9a8:	781b      	ldrb	r3, [r3, #0]
 800f9aa:	1ad3      	subs	r3, r2, r3
 800f9ac:	653b      	str	r3, [r7, #80]	@ 0x50
    tmp2 = GETJSAMPLE(elemptr[2]) + GETJSAMPLE(elemptr[5]);
 800f9ae:	693b      	ldr	r3, [r7, #16]
 800f9b0:	3302      	adds	r3, #2
 800f9b2:	781b      	ldrb	r3, [r3, #0]
 800f9b4:	461a      	mov	r2, r3
 800f9b6:	693b      	ldr	r3, [r7, #16]
 800f9b8:	3305      	adds	r3, #5
 800f9ba:	781b      	ldrb	r3, [r3, #0]
 800f9bc:	4413      	add	r3, r2
 800f9be:	64fb      	str	r3, [r7, #76]	@ 0x4c
    tmp5 = GETJSAMPLE(elemptr[2]) - GETJSAMPLE(elemptr[5]);
 800f9c0:	693b      	ldr	r3, [r7, #16]
 800f9c2:	3302      	adds	r3, #2
 800f9c4:	781b      	ldrb	r3, [r3, #0]
 800f9c6:	461a      	mov	r2, r3
 800f9c8:	693b      	ldr	r3, [r7, #16]
 800f9ca:	3305      	adds	r3, #5
 800f9cc:	781b      	ldrb	r3, [r3, #0]
 800f9ce:	1ad3      	subs	r3, r2, r3
 800f9d0:	64bb      	str	r3, [r7, #72]	@ 0x48
    tmp3 = GETJSAMPLE(elemptr[3]) + GETJSAMPLE(elemptr[4]);
 800f9d2:	693b      	ldr	r3, [r7, #16]
 800f9d4:	3303      	adds	r3, #3
 800f9d6:	781b      	ldrb	r3, [r3, #0]
 800f9d8:	461a      	mov	r2, r3
 800f9da:	693b      	ldr	r3, [r7, #16]
 800f9dc:	3304      	adds	r3, #4
 800f9de:	781b      	ldrb	r3, [r3, #0]
 800f9e0:	4413      	add	r3, r2
 800f9e2:	647b      	str	r3, [r7, #68]	@ 0x44
    tmp4 = GETJSAMPLE(elemptr[3]) - GETJSAMPLE(elemptr[4]);
 800f9e4:	693b      	ldr	r3, [r7, #16]
 800f9e6:	3303      	adds	r3, #3
 800f9e8:	781b      	ldrb	r3, [r3, #0]
 800f9ea:	461a      	mov	r2, r3
 800f9ec:	693b      	ldr	r3, [r7, #16]
 800f9ee:	3304      	adds	r3, #4
 800f9f0:	781b      	ldrb	r3, [r3, #0]
 800f9f2:	1ad3      	subs	r3, r2, r3
 800f9f4:	643b      	str	r3, [r7, #64]	@ 0x40

    /* Even part */

    tmp10 = tmp0 + tmp3;	/* phase 2 */
 800f9f6:	6dfa      	ldr	r2, [r7, #92]	@ 0x5c
 800f9f8:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800f9fa:	4413      	add	r3, r2
 800f9fc:	63fb      	str	r3, [r7, #60]	@ 0x3c
    tmp13 = tmp0 - tmp3;
 800f9fe:	6dfa      	ldr	r2, [r7, #92]	@ 0x5c
 800fa00:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800fa02:	1ad3      	subs	r3, r2, r3
 800fa04:	63bb      	str	r3, [r7, #56]	@ 0x38
    tmp11 = tmp1 + tmp2;
 800fa06:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 800fa08:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800fa0a:	4413      	add	r3, r2
 800fa0c:	637b      	str	r3, [r7, #52]	@ 0x34
    tmp12 = tmp1 - tmp2;
 800fa0e:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 800fa10:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800fa12:	1ad3      	subs	r3, r2, r3
 800fa14:	633b      	str	r3, [r7, #48]	@ 0x30

    /* Apply unsigned->signed conversion */
    dataptr[0] = tmp10 + tmp11 - 8 * CENTERJSAMPLE; /* phase 3 */
 800fa16:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 800fa18:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800fa1a:	4413      	add	r3, r2
 800fa1c:	f5a3 6280 	sub.w	r2, r3, #1024	@ 0x400
 800fa20:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800fa22:	601a      	str	r2, [r3, #0]
    dataptr[4] = tmp10 - tmp11;
 800fa24:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800fa26:	3310      	adds	r3, #16
 800fa28:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 800fa2a:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800fa2c:	1a8a      	subs	r2, r1, r2
 800fa2e:	601a      	str	r2, [r3, #0]

    z1 = MULTIPLY(tmp12 + tmp13, FIX_0_707106781); /* c4 */
 800fa30:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800fa32:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800fa34:	4413      	add	r3, r2
 800fa36:	22b5      	movs	r2, #181	@ 0xb5
 800fa38:	fb02 f303 	mul.w	r3, r2, r3
 800fa3c:	121b      	asrs	r3, r3, #8
 800fa3e:	62fb      	str	r3, [r7, #44]	@ 0x2c
    dataptr[2] = tmp13 + z1;	/* phase 5 */
 800fa40:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800fa42:	3308      	adds	r3, #8
 800fa44:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 800fa46:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800fa48:	440a      	add	r2, r1
 800fa4a:	601a      	str	r2, [r3, #0]
    dataptr[6] = tmp13 - z1;
 800fa4c:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800fa4e:	3318      	adds	r3, #24
 800fa50:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 800fa52:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800fa54:	1a8a      	subs	r2, r1, r2
 800fa56:	601a      	str	r2, [r3, #0]

    /* Odd part */

    tmp10 = tmp4 + tmp5;	/* phase 2 */
 800fa58:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 800fa5a:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800fa5c:	4413      	add	r3, r2
 800fa5e:	63fb      	str	r3, [r7, #60]	@ 0x3c
    tmp11 = tmp5 + tmp6;
 800fa60:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800fa62:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800fa64:	4413      	add	r3, r2
 800fa66:	637b      	str	r3, [r7, #52]	@ 0x34
    tmp12 = tmp6 + tmp7;
 800fa68:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 800fa6a:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800fa6c:	4413      	add	r3, r2
 800fa6e:	633b      	str	r3, [r7, #48]	@ 0x30

    /* The rotator is modified from fig 4-8 to avoid extra negations. */
    z5 = MULTIPLY(tmp10 - tmp12, FIX_0_382683433); /* c6 */
 800fa70:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 800fa72:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800fa74:	1ad3      	subs	r3, r2, r3
 800fa76:	2262      	movs	r2, #98	@ 0x62
 800fa78:	fb02 f303 	mul.w	r3, r2, r3
 800fa7c:	121b      	asrs	r3, r3, #8
 800fa7e:	62bb      	str	r3, [r7, #40]	@ 0x28
    z2 = MULTIPLY(tmp10, FIX_0_541196100) + z5; /* c2-c6 */
 800fa80:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800fa82:	228b      	movs	r2, #139	@ 0x8b
 800fa84:	fb02 f303 	mul.w	r3, r2, r3
 800fa88:	121b      	asrs	r3, r3, #8
 800fa8a:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800fa8c:	4413      	add	r3, r2
 800fa8e:	627b      	str	r3, [r7, #36]	@ 0x24
    z4 = MULTIPLY(tmp12, FIX_1_306562965) + z5; /* c2+c6 */
 800fa90:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800fa92:	f44f 72a7 	mov.w	r2, #334	@ 0x14e
 800fa96:	fb02 f303 	mul.w	r3, r2, r3
 800fa9a:	121b      	asrs	r3, r3, #8
 800fa9c:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800fa9e:	4413      	add	r3, r2
 800faa0:	623b      	str	r3, [r7, #32]
    z3 = MULTIPLY(tmp11, FIX_0_707106781); /* c4 */
 800faa2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800faa4:	22b5      	movs	r2, #181	@ 0xb5
 800faa6:	fb02 f303 	mul.w	r3, r2, r3
 800faaa:	121b      	asrs	r3, r3, #8
 800faac:	61fb      	str	r3, [r7, #28]

    z11 = tmp7 + z3;		/* phase 5 */
 800faae:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 800fab0:	69fb      	ldr	r3, [r7, #28]
 800fab2:	4413      	add	r3, r2
 800fab4:	61bb      	str	r3, [r7, #24]
    z13 = tmp7 - z3;
 800fab6:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 800fab8:	69fb      	ldr	r3, [r7, #28]
 800faba:	1ad3      	subs	r3, r2, r3
 800fabc:	617b      	str	r3, [r7, #20]

    dataptr[5] = z13 + z2;	/* phase 6 */
 800fabe:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800fac0:	3314      	adds	r3, #20
 800fac2:	6979      	ldr	r1, [r7, #20]
 800fac4:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800fac6:	440a      	add	r2, r1
 800fac8:	601a      	str	r2, [r3, #0]
    dataptr[3] = z13 - z2;
 800faca:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800facc:	330c      	adds	r3, #12
 800face:	6979      	ldr	r1, [r7, #20]
 800fad0:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800fad2:	1a8a      	subs	r2, r1, r2
 800fad4:	601a      	str	r2, [r3, #0]
    dataptr[1] = z11 + z4;
 800fad6:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800fad8:	3304      	adds	r3, #4
 800fada:	69b9      	ldr	r1, [r7, #24]
 800fadc:	6a3a      	ldr	r2, [r7, #32]
 800fade:	440a      	add	r2, r1
 800fae0:	601a      	str	r2, [r3, #0]
    dataptr[7] = z11 - z4;
 800fae2:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800fae4:	331c      	adds	r3, #28
 800fae6:	69b9      	ldr	r1, [r7, #24]
 800fae8:	6a3a      	ldr	r2, [r7, #32]
 800faea:	1a8a      	subs	r2, r1, r2
 800faec:	601a      	str	r2, [r3, #0]

    dataptr += DCTSIZE;		/* advance pointer to next row */
 800faee:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800faf0:	3320      	adds	r3, #32
 800faf2:	667b      	str	r3, [r7, #100]	@ 0x64
  for (ctr = 0; ctr < DCTSIZE; ctr++) {
 800faf4:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800faf6:	3301      	adds	r3, #1
 800faf8:	663b      	str	r3, [r7, #96]	@ 0x60
 800fafa:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800fafc:	2b07      	cmp	r3, #7
 800fafe:	f77f af2c 	ble.w	800f95a <jpeg_fdct_ifast+0x16>
  }

  /* Pass 2: process columns. */

  dataptr = data;
 800fb02:	68fb      	ldr	r3, [r7, #12]
 800fb04:	667b      	str	r3, [r7, #100]	@ 0x64
  for (ctr = DCTSIZE-1; ctr >= 0; ctr--) {
 800fb06:	2307      	movs	r3, #7
 800fb08:	663b      	str	r3, [r7, #96]	@ 0x60
 800fb0a:	e0bd      	b.n	800fc88 <jpeg_fdct_ifast+0x344>
    tmp0 = dataptr[DCTSIZE*0] + dataptr[DCTSIZE*7];
 800fb0c:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800fb0e:	681a      	ldr	r2, [r3, #0]
 800fb10:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800fb12:	33e0      	adds	r3, #224	@ 0xe0
 800fb14:	681b      	ldr	r3, [r3, #0]
 800fb16:	4413      	add	r3, r2
 800fb18:	65fb      	str	r3, [r7, #92]	@ 0x5c
    tmp7 = dataptr[DCTSIZE*0] - dataptr[DCTSIZE*7];
 800fb1a:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800fb1c:	681a      	ldr	r2, [r3, #0]
 800fb1e:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800fb20:	33e0      	adds	r3, #224	@ 0xe0
 800fb22:	681b      	ldr	r3, [r3, #0]
 800fb24:	1ad3      	subs	r3, r2, r3
 800fb26:	65bb      	str	r3, [r7, #88]	@ 0x58
    tmp1 = dataptr[DCTSIZE*1] + dataptr[DCTSIZE*6];
 800fb28:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800fb2a:	3320      	adds	r3, #32
 800fb2c:	681a      	ldr	r2, [r3, #0]
 800fb2e:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800fb30:	33c0      	adds	r3, #192	@ 0xc0
 800fb32:	681b      	ldr	r3, [r3, #0]
 800fb34:	4413      	add	r3, r2
 800fb36:	657b      	str	r3, [r7, #84]	@ 0x54
    tmp6 = dataptr[DCTSIZE*1] - dataptr[DCTSIZE*6];
 800fb38:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800fb3a:	3320      	adds	r3, #32
 800fb3c:	681a      	ldr	r2, [r3, #0]
 800fb3e:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800fb40:	33c0      	adds	r3, #192	@ 0xc0
 800fb42:	681b      	ldr	r3, [r3, #0]
 800fb44:	1ad3      	subs	r3, r2, r3
 800fb46:	653b      	str	r3, [r7, #80]	@ 0x50
    tmp2 = dataptr[DCTSIZE*2] + dataptr[DCTSIZE*5];
 800fb48:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800fb4a:	3340      	adds	r3, #64	@ 0x40
 800fb4c:	681a      	ldr	r2, [r3, #0]
 800fb4e:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800fb50:	33a0      	adds	r3, #160	@ 0xa0
 800fb52:	681b      	ldr	r3, [r3, #0]
 800fb54:	4413      	add	r3, r2
 800fb56:	64fb      	str	r3, [r7, #76]	@ 0x4c
    tmp5 = dataptr[DCTSIZE*2] - dataptr[DCTSIZE*5];
 800fb58:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800fb5a:	3340      	adds	r3, #64	@ 0x40
 800fb5c:	681a      	ldr	r2, [r3, #0]
 800fb5e:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800fb60:	33a0      	adds	r3, #160	@ 0xa0
 800fb62:	681b      	ldr	r3, [r3, #0]
 800fb64:	1ad3      	subs	r3, r2, r3
 800fb66:	64bb      	str	r3, [r7, #72]	@ 0x48
    tmp3 = dataptr[DCTSIZE*3] + dataptr[DCTSIZE*4];
 800fb68:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800fb6a:	3360      	adds	r3, #96	@ 0x60
 800fb6c:	681a      	ldr	r2, [r3, #0]
 800fb6e:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800fb70:	3380      	adds	r3, #128	@ 0x80
 800fb72:	681b      	ldr	r3, [r3, #0]
 800fb74:	4413      	add	r3, r2
 800fb76:	647b      	str	r3, [r7, #68]	@ 0x44
    tmp4 = dataptr[DCTSIZE*3] - dataptr[DCTSIZE*4];
 800fb78:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800fb7a:	3360      	adds	r3, #96	@ 0x60
 800fb7c:	681a      	ldr	r2, [r3, #0]
 800fb7e:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800fb80:	3380      	adds	r3, #128	@ 0x80
 800fb82:	681b      	ldr	r3, [r3, #0]
 800fb84:	1ad3      	subs	r3, r2, r3
 800fb86:	643b      	str	r3, [r7, #64]	@ 0x40

    /* Even part */

    tmp10 = tmp0 + tmp3;	/* phase 2 */
 800fb88:	6dfa      	ldr	r2, [r7, #92]	@ 0x5c
 800fb8a:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800fb8c:	4413      	add	r3, r2
 800fb8e:	63fb      	str	r3, [r7, #60]	@ 0x3c
    tmp13 = tmp0 - tmp3;
 800fb90:	6dfa      	ldr	r2, [r7, #92]	@ 0x5c
 800fb92:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800fb94:	1ad3      	subs	r3, r2, r3
 800fb96:	63bb      	str	r3, [r7, #56]	@ 0x38
    tmp11 = tmp1 + tmp2;
 800fb98:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 800fb9a:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800fb9c:	4413      	add	r3, r2
 800fb9e:	637b      	str	r3, [r7, #52]	@ 0x34
    tmp12 = tmp1 - tmp2;
 800fba0:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 800fba2:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800fba4:	1ad3      	subs	r3, r2, r3
 800fba6:	633b      	str	r3, [r7, #48]	@ 0x30

    dataptr[DCTSIZE*0] = tmp10 + tmp11; /* phase 3 */
 800fba8:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 800fbaa:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800fbac:	441a      	add	r2, r3
 800fbae:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800fbb0:	601a      	str	r2, [r3, #0]
    dataptr[DCTSIZE*4] = tmp10 - tmp11;
 800fbb2:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800fbb4:	3380      	adds	r3, #128	@ 0x80
 800fbb6:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 800fbb8:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800fbba:	1a8a      	subs	r2, r1, r2
 800fbbc:	601a      	str	r2, [r3, #0]

    z1 = MULTIPLY(tmp12 + tmp13, FIX_0_707106781); /* c4 */
 800fbbe:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800fbc0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800fbc2:	4413      	add	r3, r2
 800fbc4:	22b5      	movs	r2, #181	@ 0xb5
 800fbc6:	fb02 f303 	mul.w	r3, r2, r3
 800fbca:	121b      	asrs	r3, r3, #8
 800fbcc:	62fb      	str	r3, [r7, #44]	@ 0x2c
    dataptr[DCTSIZE*2] = tmp13 + z1; /* phase 5 */
 800fbce:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800fbd0:	3340      	adds	r3, #64	@ 0x40
 800fbd2:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 800fbd4:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800fbd6:	440a      	add	r2, r1
 800fbd8:	601a      	str	r2, [r3, #0]
    dataptr[DCTSIZE*6] = tmp13 - z1;
 800fbda:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800fbdc:	33c0      	adds	r3, #192	@ 0xc0
 800fbde:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 800fbe0:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800fbe2:	1a8a      	subs	r2, r1, r2
 800fbe4:	601a      	str	r2, [r3, #0]

    /* Odd part */

    tmp10 = tmp4 + tmp5;	/* phase 2 */
 800fbe6:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 800fbe8:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800fbea:	4413      	add	r3, r2
 800fbec:	63fb      	str	r3, [r7, #60]	@ 0x3c
    tmp11 = tmp5 + tmp6;
 800fbee:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800fbf0:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800fbf2:	4413      	add	r3, r2
 800fbf4:	637b      	str	r3, [r7, #52]	@ 0x34
    tmp12 = tmp6 + tmp7;
 800fbf6:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 800fbf8:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800fbfa:	4413      	add	r3, r2
 800fbfc:	633b      	str	r3, [r7, #48]	@ 0x30

    /* The rotator is modified from fig 4-8 to avoid extra negations. */
    z5 = MULTIPLY(tmp10 - tmp12, FIX_0_382683433); /* c6 */
 800fbfe:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 800fc00:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800fc02:	1ad3      	subs	r3, r2, r3
 800fc04:	2262      	movs	r2, #98	@ 0x62
 800fc06:	fb02 f303 	mul.w	r3, r2, r3
 800fc0a:	121b      	asrs	r3, r3, #8
 800fc0c:	62bb      	str	r3, [r7, #40]	@ 0x28
    z2 = MULTIPLY(tmp10, FIX_0_541196100) + z5; /* c2-c6 */
 800fc0e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800fc10:	228b      	movs	r2, #139	@ 0x8b
 800fc12:	fb02 f303 	mul.w	r3, r2, r3
 800fc16:	121b      	asrs	r3, r3, #8
 800fc18:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800fc1a:	4413      	add	r3, r2
 800fc1c:	627b      	str	r3, [r7, #36]	@ 0x24
    z4 = MULTIPLY(tmp12, FIX_1_306562965) + z5; /* c2+c6 */
 800fc1e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800fc20:	f44f 72a7 	mov.w	r2, #334	@ 0x14e
 800fc24:	fb02 f303 	mul.w	r3, r2, r3
 800fc28:	121b      	asrs	r3, r3, #8
 800fc2a:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800fc2c:	4413      	add	r3, r2
 800fc2e:	623b      	str	r3, [r7, #32]
    z3 = MULTIPLY(tmp11, FIX_0_707106781); /* c4 */
 800fc30:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800fc32:	22b5      	movs	r2, #181	@ 0xb5
 800fc34:	fb02 f303 	mul.w	r3, r2, r3
 800fc38:	121b      	asrs	r3, r3, #8
 800fc3a:	61fb      	str	r3, [r7, #28]

    z11 = tmp7 + z3;		/* phase 5 */
 800fc3c:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 800fc3e:	69fb      	ldr	r3, [r7, #28]
 800fc40:	4413      	add	r3, r2
 800fc42:	61bb      	str	r3, [r7, #24]
    z13 = tmp7 - z3;
 800fc44:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 800fc46:	69fb      	ldr	r3, [r7, #28]
 800fc48:	1ad3      	subs	r3, r2, r3
 800fc4a:	617b      	str	r3, [r7, #20]

    dataptr[DCTSIZE*5] = z13 + z2; /* phase 6 */
 800fc4c:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800fc4e:	33a0      	adds	r3, #160	@ 0xa0
 800fc50:	6979      	ldr	r1, [r7, #20]
 800fc52:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800fc54:	440a      	add	r2, r1
 800fc56:	601a      	str	r2, [r3, #0]
    dataptr[DCTSIZE*3] = z13 - z2;
 800fc58:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800fc5a:	3360      	adds	r3, #96	@ 0x60
 800fc5c:	6979      	ldr	r1, [r7, #20]
 800fc5e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800fc60:	1a8a      	subs	r2, r1, r2
 800fc62:	601a      	str	r2, [r3, #0]
    dataptr[DCTSIZE*1] = z11 + z4;
 800fc64:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800fc66:	3320      	adds	r3, #32
 800fc68:	69b9      	ldr	r1, [r7, #24]
 800fc6a:	6a3a      	ldr	r2, [r7, #32]
 800fc6c:	440a      	add	r2, r1
 800fc6e:	601a      	str	r2, [r3, #0]
    dataptr[DCTSIZE*7] = z11 - z4;
 800fc70:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800fc72:	33e0      	adds	r3, #224	@ 0xe0
 800fc74:	69b9      	ldr	r1, [r7, #24]
 800fc76:	6a3a      	ldr	r2, [r7, #32]
 800fc78:	1a8a      	subs	r2, r1, r2
 800fc7a:	601a      	str	r2, [r3, #0]

    dataptr++;			/* advance pointer to next column */
 800fc7c:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800fc7e:	3304      	adds	r3, #4
 800fc80:	667b      	str	r3, [r7, #100]	@ 0x64
  for (ctr = DCTSIZE-1; ctr >= 0; ctr--) {
 800fc82:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800fc84:	3b01      	subs	r3, #1
 800fc86:	663b      	str	r3, [r7, #96]	@ 0x60
 800fc88:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800fc8a:	2b00      	cmp	r3, #0
 800fc8c:	f6bf af3e 	bge.w	800fb0c <jpeg_fdct_ifast+0x1c8>
  }
}
 800fc90:	bf00      	nop
 800fc92:	bf00      	nop
 800fc94:	376c      	adds	r7, #108	@ 0x6c
 800fc96:	46bd      	mov	sp, r7
 800fc98:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fc9c:	4770      	bx	lr
	...

0800fca0 <jpeg_fdct_islow>:
 * Perform the forward DCT on one block of samples.
 */

GLOBAL(void)
jpeg_fdct_islow (DCTELEM * data, JSAMPARRAY sample_data, JDIMENSION start_col)
{
 800fca0:	b480      	push	{r7}
 800fca2:	b091      	sub	sp, #68	@ 0x44
 800fca4:	af00      	add	r7, sp, #0
 800fca6:	60f8      	str	r0, [r7, #12]
 800fca8:	60b9      	str	r1, [r7, #8]
 800fcaa:	607a      	str	r2, [r7, #4]

  /* Pass 1: process rows. */
  /* Note results are scaled up by sqrt(8) compared to a true DCT; */
  /* furthermore, we scale the results by 2**PASS1_BITS. */

  dataptr = data;
 800fcac:	68fb      	ldr	r3, [r7, #12]
 800fcae:	63fb      	str	r3, [r7, #60]	@ 0x3c
  for (ctr = 0; ctr < DCTSIZE; ctr++) {
 800fcb0:	2300      	movs	r3, #0
 800fcb2:	63bb      	str	r3, [r7, #56]	@ 0x38
 800fcb4:	e107      	b.n	800fec6 <jpeg_fdct_islow+0x226>
    elemptr = sample_data[ctr] + start_col;
 800fcb6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800fcb8:	009b      	lsls	r3, r3, #2
 800fcba:	68ba      	ldr	r2, [r7, #8]
 800fcbc:	4413      	add	r3, r2
 800fcbe:	681a      	ldr	r2, [r3, #0]
 800fcc0:	687b      	ldr	r3, [r7, #4]
 800fcc2:	4413      	add	r3, r2
 800fcc4:	613b      	str	r3, [r7, #16]

    /* Even part per LL&M figure 1 --- note that published figure is faulty;
     * rotator "sqrt(2)*c1" should be "sqrt(2)*c6".
     */

    tmp0 = GETJSAMPLE(elemptr[0]) + GETJSAMPLE(elemptr[7]);
 800fcc6:	693b      	ldr	r3, [r7, #16]
 800fcc8:	781b      	ldrb	r3, [r3, #0]
 800fcca:	461a      	mov	r2, r3
 800fccc:	693b      	ldr	r3, [r7, #16]
 800fcce:	3307      	adds	r3, #7
 800fcd0:	781b      	ldrb	r3, [r3, #0]
 800fcd2:	4413      	add	r3, r2
 800fcd4:	637b      	str	r3, [r7, #52]	@ 0x34
    tmp1 = GETJSAMPLE(elemptr[1]) + GETJSAMPLE(elemptr[6]);
 800fcd6:	693b      	ldr	r3, [r7, #16]
 800fcd8:	3301      	adds	r3, #1
 800fcda:	781b      	ldrb	r3, [r3, #0]
 800fcdc:	461a      	mov	r2, r3
 800fcde:	693b      	ldr	r3, [r7, #16]
 800fce0:	3306      	adds	r3, #6
 800fce2:	781b      	ldrb	r3, [r3, #0]
 800fce4:	4413      	add	r3, r2
 800fce6:	633b      	str	r3, [r7, #48]	@ 0x30
    tmp2 = GETJSAMPLE(elemptr[2]) + GETJSAMPLE(elemptr[5]);
 800fce8:	693b      	ldr	r3, [r7, #16]
 800fcea:	3302      	adds	r3, #2
 800fcec:	781b      	ldrb	r3, [r3, #0]
 800fcee:	461a      	mov	r2, r3
 800fcf0:	693b      	ldr	r3, [r7, #16]
 800fcf2:	3305      	adds	r3, #5
 800fcf4:	781b      	ldrb	r3, [r3, #0]
 800fcf6:	4413      	add	r3, r2
 800fcf8:	62fb      	str	r3, [r7, #44]	@ 0x2c
    tmp3 = GETJSAMPLE(elemptr[3]) + GETJSAMPLE(elemptr[4]);
 800fcfa:	693b      	ldr	r3, [r7, #16]
 800fcfc:	3303      	adds	r3, #3
 800fcfe:	781b      	ldrb	r3, [r3, #0]
 800fd00:	461a      	mov	r2, r3
 800fd02:	693b      	ldr	r3, [r7, #16]
 800fd04:	3304      	adds	r3, #4
 800fd06:	781b      	ldrb	r3, [r3, #0]
 800fd08:	4413      	add	r3, r2
 800fd0a:	62bb      	str	r3, [r7, #40]	@ 0x28

    tmp10 = tmp0 + tmp3;
 800fd0c:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800fd0e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800fd10:	4413      	add	r3, r2
 800fd12:	627b      	str	r3, [r7, #36]	@ 0x24
    tmp12 = tmp0 - tmp3;
 800fd14:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800fd16:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800fd18:	1ad3      	subs	r3, r2, r3
 800fd1a:	623b      	str	r3, [r7, #32]
    tmp11 = tmp1 + tmp2;
 800fd1c:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800fd1e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800fd20:	4413      	add	r3, r2
 800fd22:	61fb      	str	r3, [r7, #28]
    tmp13 = tmp1 - tmp2;
 800fd24:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800fd26:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800fd28:	1ad3      	subs	r3, r2, r3
 800fd2a:	61bb      	str	r3, [r7, #24]

    tmp0 = GETJSAMPLE(elemptr[0]) - GETJSAMPLE(elemptr[7]);
 800fd2c:	693b      	ldr	r3, [r7, #16]
 800fd2e:	781b      	ldrb	r3, [r3, #0]
 800fd30:	461a      	mov	r2, r3
 800fd32:	693b      	ldr	r3, [r7, #16]
 800fd34:	3307      	adds	r3, #7
 800fd36:	781b      	ldrb	r3, [r3, #0]
 800fd38:	1ad3      	subs	r3, r2, r3
 800fd3a:	637b      	str	r3, [r7, #52]	@ 0x34
    tmp1 = GETJSAMPLE(elemptr[1]) - GETJSAMPLE(elemptr[6]);
 800fd3c:	693b      	ldr	r3, [r7, #16]
 800fd3e:	3301      	adds	r3, #1
 800fd40:	781b      	ldrb	r3, [r3, #0]
 800fd42:	461a      	mov	r2, r3
 800fd44:	693b      	ldr	r3, [r7, #16]
 800fd46:	3306      	adds	r3, #6
 800fd48:	781b      	ldrb	r3, [r3, #0]
 800fd4a:	1ad3      	subs	r3, r2, r3
 800fd4c:	633b      	str	r3, [r7, #48]	@ 0x30
    tmp2 = GETJSAMPLE(elemptr[2]) - GETJSAMPLE(elemptr[5]);
 800fd4e:	693b      	ldr	r3, [r7, #16]
 800fd50:	3302      	adds	r3, #2
 800fd52:	781b      	ldrb	r3, [r3, #0]
 800fd54:	461a      	mov	r2, r3
 800fd56:	693b      	ldr	r3, [r7, #16]
 800fd58:	3305      	adds	r3, #5
 800fd5a:	781b      	ldrb	r3, [r3, #0]
 800fd5c:	1ad3      	subs	r3, r2, r3
 800fd5e:	62fb      	str	r3, [r7, #44]	@ 0x2c
    tmp3 = GETJSAMPLE(elemptr[3]) - GETJSAMPLE(elemptr[4]);
 800fd60:	693b      	ldr	r3, [r7, #16]
 800fd62:	3303      	adds	r3, #3
 800fd64:	781b      	ldrb	r3, [r3, #0]
 800fd66:	461a      	mov	r2, r3
 800fd68:	693b      	ldr	r3, [r7, #16]
 800fd6a:	3304      	adds	r3, #4
 800fd6c:	781b      	ldrb	r3, [r3, #0]
 800fd6e:	1ad3      	subs	r3, r2, r3
 800fd70:	62bb      	str	r3, [r7, #40]	@ 0x28

    /* Apply unsigned->signed conversion */
    dataptr[0] = (DCTELEM) ((tmp10 + tmp11 - 8 * CENTERJSAMPLE) << PASS1_BITS);
 800fd72:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800fd74:	69fb      	ldr	r3, [r7, #28]
 800fd76:	4413      	add	r3, r2
 800fd78:	f5a3 6380 	sub.w	r3, r3, #1024	@ 0x400
 800fd7c:	009a      	lsls	r2, r3, #2
 800fd7e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800fd80:	601a      	str	r2, [r3, #0]
    dataptr[4] = (DCTELEM) ((tmp10 - tmp11) << PASS1_BITS);
 800fd82:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800fd84:	69fb      	ldr	r3, [r7, #28]
 800fd86:	1ad2      	subs	r2, r2, r3
 800fd88:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800fd8a:	3310      	adds	r3, #16
 800fd8c:	0092      	lsls	r2, r2, #2
 800fd8e:	601a      	str	r2, [r3, #0]

    z1 = MULTIPLY(tmp12 + tmp13, FIX_0_541196100);
 800fd90:	6a3a      	ldr	r2, [r7, #32]
 800fd92:	69bb      	ldr	r3, [r7, #24]
 800fd94:	4413      	add	r3, r2
 800fd96:	f241 1251 	movw	r2, #4433	@ 0x1151
 800fd9a:	fb02 f303 	mul.w	r3, r2, r3
 800fd9e:	617b      	str	r3, [r7, #20]
    /* Add fudge factor here for final descale. */
    z1 += ONE << (CONST_BITS-PASS1_BITS-1);
 800fda0:	697b      	ldr	r3, [r7, #20]
 800fda2:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 800fda6:	617b      	str	r3, [r7, #20]
    dataptr[2] = (DCTELEM) RIGHT_SHIFT(z1 + MULTIPLY(tmp12, FIX_0_765366865),
 800fda8:	6a3b      	ldr	r3, [r7, #32]
 800fdaa:	f641 027e 	movw	r2, #6270	@ 0x187e
 800fdae:	fb03 f202 	mul.w	r2, r3, r2
 800fdb2:	697b      	ldr	r3, [r7, #20]
 800fdb4:	441a      	add	r2, r3
 800fdb6:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800fdb8:	3308      	adds	r3, #8
 800fdba:	12d2      	asrs	r2, r2, #11
 800fdbc:	601a      	str	r2, [r3, #0]
				       CONST_BITS-PASS1_BITS);
    dataptr[6] = (DCTELEM) RIGHT_SHIFT(z1 - MULTIPLY(tmp13, FIX_1_847759065),
 800fdbe:	69bb      	ldr	r3, [r7, #24]
 800fdc0:	4a45      	ldr	r2, [pc, #276]	@ (800fed8 <jpeg_fdct_islow+0x238>)
 800fdc2:	fb03 f202 	mul.w	r2, r3, r2
 800fdc6:	697b      	ldr	r3, [r7, #20]
 800fdc8:	441a      	add	r2, r3
 800fdca:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800fdcc:	3318      	adds	r3, #24
 800fdce:	12d2      	asrs	r2, r2, #11
 800fdd0:	601a      	str	r2, [r3, #0]
    /* Odd part per figure 8 --- note paper omits factor of sqrt(2).
     * cK represents sqrt(2) * cos(K*pi/16).
     * i0..i3 in the paper are tmp0..tmp3 here.
     */

    tmp10 = tmp0 + tmp3;
 800fdd2:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800fdd4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800fdd6:	4413      	add	r3, r2
 800fdd8:	627b      	str	r3, [r7, #36]	@ 0x24
    tmp11 = tmp1 + tmp2;
 800fdda:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800fddc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800fdde:	4413      	add	r3, r2
 800fde0:	61fb      	str	r3, [r7, #28]
    tmp12 = tmp0 + tmp2;
 800fde2:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800fde4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800fde6:	4413      	add	r3, r2
 800fde8:	623b      	str	r3, [r7, #32]
    tmp13 = tmp1 + tmp3;
 800fdea:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800fdec:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800fdee:	4413      	add	r3, r2
 800fdf0:	61bb      	str	r3, [r7, #24]
    z1 = MULTIPLY(tmp12 + tmp13, FIX_1_175875602); /*  c3 */
 800fdf2:	6a3a      	ldr	r2, [r7, #32]
 800fdf4:	69bb      	ldr	r3, [r7, #24]
 800fdf6:	4413      	add	r3, r2
 800fdf8:	f242 52a1 	movw	r2, #9633	@ 0x25a1
 800fdfc:	fb02 f303 	mul.w	r3, r2, r3
 800fe00:	617b      	str	r3, [r7, #20]
    /* Add fudge factor here for final descale. */
    z1 += ONE << (CONST_BITS-PASS1_BITS-1);
 800fe02:	697b      	ldr	r3, [r7, #20]
 800fe04:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 800fe08:	617b      	str	r3, [r7, #20]

    tmp0  = MULTIPLY(tmp0,    FIX_1_501321110);    /*  c1+c3-c5-c7 */
 800fe0a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800fe0c:	f243 020b 	movw	r2, #12299	@ 0x300b
 800fe10:	fb02 f303 	mul.w	r3, r2, r3
 800fe14:	637b      	str	r3, [r7, #52]	@ 0x34
    tmp1  = MULTIPLY(tmp1,    FIX_3_072711026);    /*  c1+c3+c5-c7 */
 800fe16:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800fe18:	f246 2254 	movw	r2, #25172	@ 0x6254
 800fe1c:	fb02 f303 	mul.w	r3, r2, r3
 800fe20:	633b      	str	r3, [r7, #48]	@ 0x30
    tmp2  = MULTIPLY(tmp2,    FIX_2_053119869);    /*  c1+c3-c5+c7 */
 800fe22:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800fe24:	f244 12b3 	movw	r2, #16819	@ 0x41b3
 800fe28:	fb02 f303 	mul.w	r3, r2, r3
 800fe2c:	62fb      	str	r3, [r7, #44]	@ 0x2c
    tmp3  = MULTIPLY(tmp3,    FIX_0_298631336);    /* -c1+c3+c5-c7 */
 800fe2e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800fe30:	f640 128e 	movw	r2, #2446	@ 0x98e
 800fe34:	fb02 f303 	mul.w	r3, r2, r3
 800fe38:	62bb      	str	r3, [r7, #40]	@ 0x28
    tmp10 = MULTIPLY(tmp10, - FIX_0_899976223);    /*  c7-c3 */
 800fe3a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800fe3c:	4a27      	ldr	r2, [pc, #156]	@ (800fedc <jpeg_fdct_islow+0x23c>)
 800fe3e:	fb02 f303 	mul.w	r3, r2, r3
 800fe42:	627b      	str	r3, [r7, #36]	@ 0x24
    tmp11 = MULTIPLY(tmp11, - FIX_2_562915447);    /* -c1-c3 */
 800fe44:	69fb      	ldr	r3, [r7, #28]
 800fe46:	4a26      	ldr	r2, [pc, #152]	@ (800fee0 <jpeg_fdct_islow+0x240>)
 800fe48:	fb02 f303 	mul.w	r3, r2, r3
 800fe4c:	61fb      	str	r3, [r7, #28]
    tmp12 = MULTIPLY(tmp12, - FIX_0_390180644);    /*  c5-c3 */
 800fe4e:	6a3b      	ldr	r3, [r7, #32]
 800fe50:	4a24      	ldr	r2, [pc, #144]	@ (800fee4 <jpeg_fdct_islow+0x244>)
 800fe52:	fb02 f303 	mul.w	r3, r2, r3
 800fe56:	623b      	str	r3, [r7, #32]
    tmp13 = MULTIPLY(tmp13, - FIX_1_961570560);    /* -c3-c5 */
 800fe58:	69bb      	ldr	r3, [r7, #24]
 800fe5a:	4a23      	ldr	r2, [pc, #140]	@ (800fee8 <jpeg_fdct_islow+0x248>)
 800fe5c:	fb02 f303 	mul.w	r3, r2, r3
 800fe60:	61bb      	str	r3, [r7, #24]

    tmp12 += z1;
 800fe62:	6a3a      	ldr	r2, [r7, #32]
 800fe64:	697b      	ldr	r3, [r7, #20]
 800fe66:	4413      	add	r3, r2
 800fe68:	623b      	str	r3, [r7, #32]
    tmp13 += z1;
 800fe6a:	69ba      	ldr	r2, [r7, #24]
 800fe6c:	697b      	ldr	r3, [r7, #20]
 800fe6e:	4413      	add	r3, r2
 800fe70:	61bb      	str	r3, [r7, #24]

    dataptr[1] = (DCTELEM)
      RIGHT_SHIFT(tmp0 + tmp10 + tmp12, CONST_BITS-PASS1_BITS);
 800fe72:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800fe74:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800fe76:	441a      	add	r2, r3
 800fe78:	6a3b      	ldr	r3, [r7, #32]
 800fe7a:	441a      	add	r2, r3
    dataptr[1] = (DCTELEM)
 800fe7c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800fe7e:	3304      	adds	r3, #4
      RIGHT_SHIFT(tmp0 + tmp10 + tmp12, CONST_BITS-PASS1_BITS);
 800fe80:	12d2      	asrs	r2, r2, #11
    dataptr[1] = (DCTELEM)
 800fe82:	601a      	str	r2, [r3, #0]
    dataptr[3] = (DCTELEM)
      RIGHT_SHIFT(tmp1 + tmp11 + tmp13, CONST_BITS-PASS1_BITS);
 800fe84:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800fe86:	69fb      	ldr	r3, [r7, #28]
 800fe88:	441a      	add	r2, r3
 800fe8a:	69bb      	ldr	r3, [r7, #24]
 800fe8c:	441a      	add	r2, r3
    dataptr[3] = (DCTELEM)
 800fe8e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800fe90:	330c      	adds	r3, #12
      RIGHT_SHIFT(tmp1 + tmp11 + tmp13, CONST_BITS-PASS1_BITS);
 800fe92:	12d2      	asrs	r2, r2, #11
    dataptr[3] = (DCTELEM)
 800fe94:	601a      	str	r2, [r3, #0]
    dataptr[5] = (DCTELEM)
      RIGHT_SHIFT(tmp2 + tmp11 + tmp12, CONST_BITS-PASS1_BITS);
 800fe96:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800fe98:	69fb      	ldr	r3, [r7, #28]
 800fe9a:	441a      	add	r2, r3
 800fe9c:	6a3b      	ldr	r3, [r7, #32]
 800fe9e:	441a      	add	r2, r3
    dataptr[5] = (DCTELEM)
 800fea0:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800fea2:	3314      	adds	r3, #20
      RIGHT_SHIFT(tmp2 + tmp11 + tmp12, CONST_BITS-PASS1_BITS);
 800fea4:	12d2      	asrs	r2, r2, #11
    dataptr[5] = (DCTELEM)
 800fea6:	601a      	str	r2, [r3, #0]
    dataptr[7] = (DCTELEM)
      RIGHT_SHIFT(tmp3 + tmp10 + tmp13, CONST_BITS-PASS1_BITS);
 800fea8:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800feaa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800feac:	441a      	add	r2, r3
 800feae:	69bb      	ldr	r3, [r7, #24]
 800feb0:	441a      	add	r2, r3
    dataptr[7] = (DCTELEM)
 800feb2:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800feb4:	331c      	adds	r3, #28
      RIGHT_SHIFT(tmp3 + tmp10 + tmp13, CONST_BITS-PASS1_BITS);
 800feb6:	12d2      	asrs	r2, r2, #11
    dataptr[7] = (DCTELEM)
 800feb8:	601a      	str	r2, [r3, #0]

    dataptr += DCTSIZE;		/* advance pointer to next row */
 800feba:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800febc:	3320      	adds	r3, #32
 800febe:	63fb      	str	r3, [r7, #60]	@ 0x3c
  for (ctr = 0; ctr < DCTSIZE; ctr++) {
 800fec0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800fec2:	3301      	adds	r3, #1
 800fec4:	63bb      	str	r3, [r7, #56]	@ 0x38
 800fec6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800fec8:	2b07      	cmp	r3, #7
 800feca:	f77f aef4 	ble.w	800fcb6 <jpeg_fdct_islow+0x16>
  /* Pass 2: process columns.
   * We remove the PASS1_BITS scaling, but leave the results scaled up
   * by an overall factor of 8.
   */

  dataptr = data;
 800fece:	68fb      	ldr	r3, [r7, #12]
 800fed0:	63fb      	str	r3, [r7, #60]	@ 0x3c
  for (ctr = DCTSIZE-1; ctr >= 0; ctr--) {
 800fed2:	2307      	movs	r3, #7
 800fed4:	63bb      	str	r3, [r7, #56]	@ 0x38
 800fed6:	e100      	b.n	80100da <jpeg_fdct_islow+0x43a>
 800fed8:	ffffc4df 	.word	0xffffc4df
 800fedc:	ffffe333 	.word	0xffffe333
 800fee0:	ffffadfd 	.word	0xffffadfd
 800fee4:	fffff384 	.word	0xfffff384
 800fee8:	ffffc13b 	.word	0xffffc13b
    /* Even part per LL&M figure 1 --- note that published figure is faulty;
     * rotator "sqrt(2)*c1" should be "sqrt(2)*c6".
     */

    tmp0 = dataptr[DCTSIZE*0] + dataptr[DCTSIZE*7];
 800feec:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800feee:	681a      	ldr	r2, [r3, #0]
 800fef0:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800fef2:	33e0      	adds	r3, #224	@ 0xe0
 800fef4:	681b      	ldr	r3, [r3, #0]
 800fef6:	4413      	add	r3, r2
 800fef8:	637b      	str	r3, [r7, #52]	@ 0x34
    tmp1 = dataptr[DCTSIZE*1] + dataptr[DCTSIZE*6];
 800fefa:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800fefc:	3320      	adds	r3, #32
 800fefe:	681a      	ldr	r2, [r3, #0]
 800ff00:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800ff02:	33c0      	adds	r3, #192	@ 0xc0
 800ff04:	681b      	ldr	r3, [r3, #0]
 800ff06:	4413      	add	r3, r2
 800ff08:	633b      	str	r3, [r7, #48]	@ 0x30
    tmp2 = dataptr[DCTSIZE*2] + dataptr[DCTSIZE*5];
 800ff0a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800ff0c:	3340      	adds	r3, #64	@ 0x40
 800ff0e:	681a      	ldr	r2, [r3, #0]
 800ff10:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800ff12:	33a0      	adds	r3, #160	@ 0xa0
 800ff14:	681b      	ldr	r3, [r3, #0]
 800ff16:	4413      	add	r3, r2
 800ff18:	62fb      	str	r3, [r7, #44]	@ 0x2c
    tmp3 = dataptr[DCTSIZE*3] + dataptr[DCTSIZE*4];
 800ff1a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800ff1c:	3360      	adds	r3, #96	@ 0x60
 800ff1e:	681a      	ldr	r2, [r3, #0]
 800ff20:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800ff22:	3380      	adds	r3, #128	@ 0x80
 800ff24:	681b      	ldr	r3, [r3, #0]
 800ff26:	4413      	add	r3, r2
 800ff28:	62bb      	str	r3, [r7, #40]	@ 0x28

    /* Add fudge factor here for final descale. */
    tmp10 = tmp0 + tmp3 + (ONE << (PASS1_BITS-1));
 800ff2a:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800ff2c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800ff2e:	4413      	add	r3, r2
 800ff30:	3302      	adds	r3, #2
 800ff32:	627b      	str	r3, [r7, #36]	@ 0x24
    tmp12 = tmp0 - tmp3;
 800ff34:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800ff36:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800ff38:	1ad3      	subs	r3, r2, r3
 800ff3a:	623b      	str	r3, [r7, #32]
    tmp11 = tmp1 + tmp2;
 800ff3c:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800ff3e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800ff40:	4413      	add	r3, r2
 800ff42:	61fb      	str	r3, [r7, #28]
    tmp13 = tmp1 - tmp2;
 800ff44:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800ff46:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800ff48:	1ad3      	subs	r3, r2, r3
 800ff4a:	61bb      	str	r3, [r7, #24]

    tmp0 = dataptr[DCTSIZE*0] - dataptr[DCTSIZE*7];
 800ff4c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800ff4e:	681a      	ldr	r2, [r3, #0]
 800ff50:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800ff52:	33e0      	adds	r3, #224	@ 0xe0
 800ff54:	681b      	ldr	r3, [r3, #0]
 800ff56:	1ad3      	subs	r3, r2, r3
 800ff58:	637b      	str	r3, [r7, #52]	@ 0x34
    tmp1 = dataptr[DCTSIZE*1] - dataptr[DCTSIZE*6];
 800ff5a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800ff5c:	3320      	adds	r3, #32
 800ff5e:	681a      	ldr	r2, [r3, #0]
 800ff60:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800ff62:	33c0      	adds	r3, #192	@ 0xc0
 800ff64:	681b      	ldr	r3, [r3, #0]
 800ff66:	1ad3      	subs	r3, r2, r3
 800ff68:	633b      	str	r3, [r7, #48]	@ 0x30
    tmp2 = dataptr[DCTSIZE*2] - dataptr[DCTSIZE*5];
 800ff6a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800ff6c:	3340      	adds	r3, #64	@ 0x40
 800ff6e:	681a      	ldr	r2, [r3, #0]
 800ff70:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800ff72:	33a0      	adds	r3, #160	@ 0xa0
 800ff74:	681b      	ldr	r3, [r3, #0]
 800ff76:	1ad3      	subs	r3, r2, r3
 800ff78:	62fb      	str	r3, [r7, #44]	@ 0x2c
    tmp3 = dataptr[DCTSIZE*3] - dataptr[DCTSIZE*4];
 800ff7a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800ff7c:	3360      	adds	r3, #96	@ 0x60
 800ff7e:	681a      	ldr	r2, [r3, #0]
 800ff80:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800ff82:	3380      	adds	r3, #128	@ 0x80
 800ff84:	681b      	ldr	r3, [r3, #0]
 800ff86:	1ad3      	subs	r3, r2, r3
 800ff88:	62bb      	str	r3, [r7, #40]	@ 0x28

    dataptr[DCTSIZE*0] = (DCTELEM) RIGHT_SHIFT(tmp10 + tmp11, PASS1_BITS);
 800ff8a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800ff8c:	69fb      	ldr	r3, [r7, #28]
 800ff8e:	4413      	add	r3, r2
 800ff90:	109a      	asrs	r2, r3, #2
 800ff92:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800ff94:	601a      	str	r2, [r3, #0]
    dataptr[DCTSIZE*4] = (DCTELEM) RIGHT_SHIFT(tmp10 - tmp11, PASS1_BITS);
 800ff96:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800ff98:	69fb      	ldr	r3, [r7, #28]
 800ff9a:	1ad2      	subs	r2, r2, r3
 800ff9c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800ff9e:	3380      	adds	r3, #128	@ 0x80
 800ffa0:	1092      	asrs	r2, r2, #2
 800ffa2:	601a      	str	r2, [r3, #0]

    z1 = MULTIPLY(tmp12 + tmp13, FIX_0_541196100);
 800ffa4:	6a3a      	ldr	r2, [r7, #32]
 800ffa6:	69bb      	ldr	r3, [r7, #24]
 800ffa8:	4413      	add	r3, r2
 800ffaa:	f241 1251 	movw	r2, #4433	@ 0x1151
 800ffae:	fb02 f303 	mul.w	r3, r2, r3
 800ffb2:	617b      	str	r3, [r7, #20]
    /* Add fudge factor here for final descale. */
    z1 += ONE << (CONST_BITS+PASS1_BITS-1);
 800ffb4:	697b      	ldr	r3, [r7, #20]
 800ffb6:	f503 4380 	add.w	r3, r3, #16384	@ 0x4000
 800ffba:	617b      	str	r3, [r7, #20]
    dataptr[DCTSIZE*2] = (DCTELEM)
      RIGHT_SHIFT(z1 + MULTIPLY(tmp12, FIX_0_765366865), CONST_BITS+PASS1_BITS);
 800ffbc:	6a3b      	ldr	r3, [r7, #32]
 800ffbe:	f641 027e 	movw	r2, #6270	@ 0x187e
 800ffc2:	fb03 f202 	mul.w	r2, r3, r2
 800ffc6:	697b      	ldr	r3, [r7, #20]
 800ffc8:	441a      	add	r2, r3
    dataptr[DCTSIZE*2] = (DCTELEM)
 800ffca:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800ffcc:	3340      	adds	r3, #64	@ 0x40
      RIGHT_SHIFT(z1 + MULTIPLY(tmp12, FIX_0_765366865), CONST_BITS+PASS1_BITS);
 800ffce:	13d2      	asrs	r2, r2, #15
    dataptr[DCTSIZE*2] = (DCTELEM)
 800ffd0:	601a      	str	r2, [r3, #0]
    dataptr[DCTSIZE*6] = (DCTELEM)
      RIGHT_SHIFT(z1 - MULTIPLY(tmp13, FIX_1_847759065), CONST_BITS+PASS1_BITS);
 800ffd2:	69bb      	ldr	r3, [r7, #24]
 800ffd4:	4a46      	ldr	r2, [pc, #280]	@ (80100f0 <jpeg_fdct_islow+0x450>)
 800ffd6:	fb03 f202 	mul.w	r2, r3, r2
 800ffda:	697b      	ldr	r3, [r7, #20]
 800ffdc:	441a      	add	r2, r3
    dataptr[DCTSIZE*6] = (DCTELEM)
 800ffde:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800ffe0:	33c0      	adds	r3, #192	@ 0xc0
      RIGHT_SHIFT(z1 - MULTIPLY(tmp13, FIX_1_847759065), CONST_BITS+PASS1_BITS);
 800ffe2:	13d2      	asrs	r2, r2, #15
    dataptr[DCTSIZE*6] = (DCTELEM)
 800ffe4:	601a      	str	r2, [r3, #0]
    /* Odd part per figure 8 --- note paper omits factor of sqrt(2).
     * cK represents sqrt(2) * cos(K*pi/16).
     * i0..i3 in the paper are tmp0..tmp3 here.
     */

    tmp10 = tmp0 + tmp3;
 800ffe6:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800ffe8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800ffea:	4413      	add	r3, r2
 800ffec:	627b      	str	r3, [r7, #36]	@ 0x24
    tmp11 = tmp1 + tmp2;
 800ffee:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800fff0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800fff2:	4413      	add	r3, r2
 800fff4:	61fb      	str	r3, [r7, #28]
    tmp12 = tmp0 + tmp2;
 800fff6:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800fff8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800fffa:	4413      	add	r3, r2
 800fffc:	623b      	str	r3, [r7, #32]
    tmp13 = tmp1 + tmp3;
 800fffe:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8010000:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8010002:	4413      	add	r3, r2
 8010004:	61bb      	str	r3, [r7, #24]
    z1 = MULTIPLY(tmp12 + tmp13, FIX_1_175875602); /*  c3 */
 8010006:	6a3a      	ldr	r2, [r7, #32]
 8010008:	69bb      	ldr	r3, [r7, #24]
 801000a:	4413      	add	r3, r2
 801000c:	f242 52a1 	movw	r2, #9633	@ 0x25a1
 8010010:	fb02 f303 	mul.w	r3, r2, r3
 8010014:	617b      	str	r3, [r7, #20]
    /* Add fudge factor here for final descale. */
    z1 += ONE << (CONST_BITS+PASS1_BITS-1);
 8010016:	697b      	ldr	r3, [r7, #20]
 8010018:	f503 4380 	add.w	r3, r3, #16384	@ 0x4000
 801001c:	617b      	str	r3, [r7, #20]

    tmp0  = MULTIPLY(tmp0,    FIX_1_501321110);    /*  c1+c3-c5-c7 */
 801001e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8010020:	f243 020b 	movw	r2, #12299	@ 0x300b
 8010024:	fb02 f303 	mul.w	r3, r2, r3
 8010028:	637b      	str	r3, [r7, #52]	@ 0x34
    tmp1  = MULTIPLY(tmp1,    FIX_3_072711026);    /*  c1+c3+c5-c7 */
 801002a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801002c:	f246 2254 	movw	r2, #25172	@ 0x6254
 8010030:	fb02 f303 	mul.w	r3, r2, r3
 8010034:	633b      	str	r3, [r7, #48]	@ 0x30
    tmp2  = MULTIPLY(tmp2,    FIX_2_053119869);    /*  c1+c3-c5+c7 */
 8010036:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8010038:	f244 12b3 	movw	r2, #16819	@ 0x41b3
 801003c:	fb02 f303 	mul.w	r3, r2, r3
 8010040:	62fb      	str	r3, [r7, #44]	@ 0x2c
    tmp3  = MULTIPLY(tmp3,    FIX_0_298631336);    /* -c1+c3+c5-c7 */
 8010042:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8010044:	f640 128e 	movw	r2, #2446	@ 0x98e
 8010048:	fb02 f303 	mul.w	r3, r2, r3
 801004c:	62bb      	str	r3, [r7, #40]	@ 0x28
    tmp10 = MULTIPLY(tmp10, - FIX_0_899976223);    /*  c7-c3 */
 801004e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8010050:	4a28      	ldr	r2, [pc, #160]	@ (80100f4 <jpeg_fdct_islow+0x454>)
 8010052:	fb02 f303 	mul.w	r3, r2, r3
 8010056:	627b      	str	r3, [r7, #36]	@ 0x24
    tmp11 = MULTIPLY(tmp11, - FIX_2_562915447);    /* -c1-c3 */
 8010058:	69fb      	ldr	r3, [r7, #28]
 801005a:	4a27      	ldr	r2, [pc, #156]	@ (80100f8 <jpeg_fdct_islow+0x458>)
 801005c:	fb02 f303 	mul.w	r3, r2, r3
 8010060:	61fb      	str	r3, [r7, #28]
    tmp12 = MULTIPLY(tmp12, - FIX_0_390180644);    /*  c5-c3 */
 8010062:	6a3b      	ldr	r3, [r7, #32]
 8010064:	4a25      	ldr	r2, [pc, #148]	@ (80100fc <jpeg_fdct_islow+0x45c>)
 8010066:	fb02 f303 	mul.w	r3, r2, r3
 801006a:	623b      	str	r3, [r7, #32]
    tmp13 = MULTIPLY(tmp13, - FIX_1_961570560);    /* -c3-c5 */
 801006c:	69bb      	ldr	r3, [r7, #24]
 801006e:	4a24      	ldr	r2, [pc, #144]	@ (8010100 <jpeg_fdct_islow+0x460>)
 8010070:	fb02 f303 	mul.w	r3, r2, r3
 8010074:	61bb      	str	r3, [r7, #24]

    tmp12 += z1;
 8010076:	6a3a      	ldr	r2, [r7, #32]
 8010078:	697b      	ldr	r3, [r7, #20]
 801007a:	4413      	add	r3, r2
 801007c:	623b      	str	r3, [r7, #32]
    tmp13 += z1;
 801007e:	69ba      	ldr	r2, [r7, #24]
 8010080:	697b      	ldr	r3, [r7, #20]
 8010082:	4413      	add	r3, r2
 8010084:	61bb      	str	r3, [r7, #24]

    dataptr[DCTSIZE*1] = (DCTELEM)
      RIGHT_SHIFT(tmp0 + tmp10 + tmp12, CONST_BITS+PASS1_BITS);
 8010086:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8010088:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801008a:	441a      	add	r2, r3
 801008c:	6a3b      	ldr	r3, [r7, #32]
 801008e:	441a      	add	r2, r3
    dataptr[DCTSIZE*1] = (DCTELEM)
 8010090:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8010092:	3320      	adds	r3, #32
      RIGHT_SHIFT(tmp0 + tmp10 + tmp12, CONST_BITS+PASS1_BITS);
 8010094:	13d2      	asrs	r2, r2, #15
    dataptr[DCTSIZE*1] = (DCTELEM)
 8010096:	601a      	str	r2, [r3, #0]
    dataptr[DCTSIZE*3] = (DCTELEM)
      RIGHT_SHIFT(tmp1 + tmp11 + tmp13, CONST_BITS+PASS1_BITS);
 8010098:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 801009a:	69fb      	ldr	r3, [r7, #28]
 801009c:	441a      	add	r2, r3
 801009e:	69bb      	ldr	r3, [r7, #24]
 80100a0:	441a      	add	r2, r3
    dataptr[DCTSIZE*3] = (DCTELEM)
 80100a2:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80100a4:	3360      	adds	r3, #96	@ 0x60
      RIGHT_SHIFT(tmp1 + tmp11 + tmp13, CONST_BITS+PASS1_BITS);
 80100a6:	13d2      	asrs	r2, r2, #15
    dataptr[DCTSIZE*3] = (DCTELEM)
 80100a8:	601a      	str	r2, [r3, #0]
    dataptr[DCTSIZE*5] = (DCTELEM)
      RIGHT_SHIFT(tmp2 + tmp11 + tmp12, CONST_BITS+PASS1_BITS);
 80100aa:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80100ac:	69fb      	ldr	r3, [r7, #28]
 80100ae:	441a      	add	r2, r3
 80100b0:	6a3b      	ldr	r3, [r7, #32]
 80100b2:	441a      	add	r2, r3
    dataptr[DCTSIZE*5] = (DCTELEM)
 80100b4:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80100b6:	33a0      	adds	r3, #160	@ 0xa0
      RIGHT_SHIFT(tmp2 + tmp11 + tmp12, CONST_BITS+PASS1_BITS);
 80100b8:	13d2      	asrs	r2, r2, #15
    dataptr[DCTSIZE*5] = (DCTELEM)
 80100ba:	601a      	str	r2, [r3, #0]
    dataptr[DCTSIZE*7] = (DCTELEM)
      RIGHT_SHIFT(tmp3 + tmp10 + tmp13, CONST_BITS+PASS1_BITS);
 80100bc:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 80100be:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80100c0:	441a      	add	r2, r3
 80100c2:	69bb      	ldr	r3, [r7, #24]
 80100c4:	441a      	add	r2, r3
    dataptr[DCTSIZE*7] = (DCTELEM)
 80100c6:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80100c8:	33e0      	adds	r3, #224	@ 0xe0
      RIGHT_SHIFT(tmp3 + tmp10 + tmp13, CONST_BITS+PASS1_BITS);
 80100ca:	13d2      	asrs	r2, r2, #15
    dataptr[DCTSIZE*7] = (DCTELEM)
 80100cc:	601a      	str	r2, [r3, #0]

    dataptr++;			/* advance pointer to next column */
 80100ce:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80100d0:	3304      	adds	r3, #4
 80100d2:	63fb      	str	r3, [r7, #60]	@ 0x3c
  for (ctr = DCTSIZE-1; ctr >= 0; ctr--) {
 80100d4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80100d6:	3b01      	subs	r3, #1
 80100d8:	63bb      	str	r3, [r7, #56]	@ 0x38
 80100da:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80100dc:	2b00      	cmp	r3, #0
 80100de:	f6bf af05 	bge.w	800feec <jpeg_fdct_islow+0x24c>
  }
}
 80100e2:	bf00      	nop
 80100e4:	bf00      	nop
 80100e6:	3744      	adds	r7, #68	@ 0x44
 80100e8:	46bd      	mov	sp, r7
 80100ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80100ee:	4770      	bx	lr
 80100f0:	ffffc4df 	.word	0xffffc4df
 80100f4:	ffffe333 	.word	0xffffe333
 80100f8:	ffffadfd 	.word	0xffffadfd
 80100fc:	fffff384 	.word	0xfffff384
 8010100:	ffffc13b 	.word	0xffffc13b

08010104 <jpeg_fdct_7x7>:
 * Perform the forward DCT on a 7x7 sample block.
 */

GLOBAL(void)
jpeg_fdct_7x7 (DCTELEM * data, JSAMPARRAY sample_data, JDIMENSION start_col)
{
 8010104:	b580      	push	{r7, lr}
 8010106:	b092      	sub	sp, #72	@ 0x48
 8010108:	af00      	add	r7, sp, #0
 801010a:	60f8      	str	r0, [r7, #12]
 801010c:	60b9      	str	r1, [r7, #8]
 801010e:	607a      	str	r2, [r7, #4]
  JSAMPROW elemptr;
  int ctr;
  SHIFT_TEMPS

  /* Pre-zero output coefficient block. */
  MEMZERO(data, SIZEOF(DCTELEM) * DCTSIZE2);
 8010110:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8010114:	2100      	movs	r1, #0
 8010116:	68f8      	ldr	r0, [r7, #12]
 8010118:	f009 fc6a 	bl	80199f0 <memset>
  /* Pass 1: process rows. */
  /* Note results are scaled up by sqrt(8) compared to a true DCT; */
  /* furthermore, we scale the results by 2**PASS1_BITS. */
  /* cK represents sqrt(2) * cos(K*pi/14). */

  dataptr = data;
 801011c:	68fb      	ldr	r3, [r7, #12]
 801011e:	647b      	str	r3, [r7, #68]	@ 0x44
  for (ctr = 0; ctr < 7; ctr++) {
 8010120:	2300      	movs	r3, #0
 8010122:	643b      	str	r3, [r7, #64]	@ 0x40
 8010124:	e0f3      	b.n	801030e <jpeg_fdct_7x7+0x20a>
    elemptr = sample_data[ctr] + start_col;
 8010126:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8010128:	009b      	lsls	r3, r3, #2
 801012a:	68ba      	ldr	r2, [r7, #8]
 801012c:	4413      	add	r3, r2
 801012e:	681a      	ldr	r2, [r3, #0]
 8010130:	687b      	ldr	r3, [r7, #4]
 8010132:	4413      	add	r3, r2
 8010134:	617b      	str	r3, [r7, #20]

    /* Even part */

    tmp0 = GETJSAMPLE(elemptr[0]) + GETJSAMPLE(elemptr[6]);
 8010136:	697b      	ldr	r3, [r7, #20]
 8010138:	781b      	ldrb	r3, [r3, #0]
 801013a:	461a      	mov	r2, r3
 801013c:	697b      	ldr	r3, [r7, #20]
 801013e:	3306      	adds	r3, #6
 8010140:	781b      	ldrb	r3, [r3, #0]
 8010142:	4413      	add	r3, r2
 8010144:	63fb      	str	r3, [r7, #60]	@ 0x3c
    tmp1 = GETJSAMPLE(elemptr[1]) + GETJSAMPLE(elemptr[5]);
 8010146:	697b      	ldr	r3, [r7, #20]
 8010148:	3301      	adds	r3, #1
 801014a:	781b      	ldrb	r3, [r3, #0]
 801014c:	461a      	mov	r2, r3
 801014e:	697b      	ldr	r3, [r7, #20]
 8010150:	3305      	adds	r3, #5
 8010152:	781b      	ldrb	r3, [r3, #0]
 8010154:	4413      	add	r3, r2
 8010156:	63bb      	str	r3, [r7, #56]	@ 0x38
    tmp2 = GETJSAMPLE(elemptr[2]) + GETJSAMPLE(elemptr[4]);
 8010158:	697b      	ldr	r3, [r7, #20]
 801015a:	3302      	adds	r3, #2
 801015c:	781b      	ldrb	r3, [r3, #0]
 801015e:	461a      	mov	r2, r3
 8010160:	697b      	ldr	r3, [r7, #20]
 8010162:	3304      	adds	r3, #4
 8010164:	781b      	ldrb	r3, [r3, #0]
 8010166:	4413      	add	r3, r2
 8010168:	637b      	str	r3, [r7, #52]	@ 0x34
    tmp3 = GETJSAMPLE(elemptr[3]);
 801016a:	697b      	ldr	r3, [r7, #20]
 801016c:	3303      	adds	r3, #3
 801016e:	781b      	ldrb	r3, [r3, #0]
 8010170:	633b      	str	r3, [r7, #48]	@ 0x30

    tmp10 = GETJSAMPLE(elemptr[0]) - GETJSAMPLE(elemptr[6]);
 8010172:	697b      	ldr	r3, [r7, #20]
 8010174:	781b      	ldrb	r3, [r3, #0]
 8010176:	461a      	mov	r2, r3
 8010178:	697b      	ldr	r3, [r7, #20]
 801017a:	3306      	adds	r3, #6
 801017c:	781b      	ldrb	r3, [r3, #0]
 801017e:	1ad3      	subs	r3, r2, r3
 8010180:	62fb      	str	r3, [r7, #44]	@ 0x2c
    tmp11 = GETJSAMPLE(elemptr[1]) - GETJSAMPLE(elemptr[5]);
 8010182:	697b      	ldr	r3, [r7, #20]
 8010184:	3301      	adds	r3, #1
 8010186:	781b      	ldrb	r3, [r3, #0]
 8010188:	461a      	mov	r2, r3
 801018a:	697b      	ldr	r3, [r7, #20]
 801018c:	3305      	adds	r3, #5
 801018e:	781b      	ldrb	r3, [r3, #0]
 8010190:	1ad3      	subs	r3, r2, r3
 8010192:	62bb      	str	r3, [r7, #40]	@ 0x28
    tmp12 = GETJSAMPLE(elemptr[2]) - GETJSAMPLE(elemptr[4]);
 8010194:	697b      	ldr	r3, [r7, #20]
 8010196:	3302      	adds	r3, #2
 8010198:	781b      	ldrb	r3, [r3, #0]
 801019a:	461a      	mov	r2, r3
 801019c:	697b      	ldr	r3, [r7, #20]
 801019e:	3304      	adds	r3, #4
 80101a0:	781b      	ldrb	r3, [r3, #0]
 80101a2:	1ad3      	subs	r3, r2, r3
 80101a4:	627b      	str	r3, [r7, #36]	@ 0x24

    z1 = tmp0 + tmp2;
 80101a6:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 80101a8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80101aa:	4413      	add	r3, r2
 80101ac:	623b      	str	r3, [r7, #32]
    /* Apply unsigned->signed conversion */
    dataptr[0] = (DCTELEM)
      ((z1 + tmp1 + tmp3 - 7 * CENTERJSAMPLE) << PASS1_BITS);
 80101ae:	6a3a      	ldr	r2, [r7, #32]
 80101b0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80101b2:	441a      	add	r2, r3
 80101b4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80101b6:	4413      	add	r3, r2
 80101b8:	f5a3 7360 	sub.w	r3, r3, #896	@ 0x380
 80101bc:	009a      	lsls	r2, r3, #2
    dataptr[0] = (DCTELEM)
 80101be:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80101c0:	601a      	str	r2, [r3, #0]
    tmp3 += tmp3;
 80101c2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80101c4:	005b      	lsls	r3, r3, #1
 80101c6:	633b      	str	r3, [r7, #48]	@ 0x30
    z1 -= tmp3;
 80101c8:	6a3a      	ldr	r2, [r7, #32]
 80101ca:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80101cc:	1ad3      	subs	r3, r2, r3
 80101ce:	623b      	str	r3, [r7, #32]
    z1 -= tmp3;
 80101d0:	6a3a      	ldr	r2, [r7, #32]
 80101d2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80101d4:	1ad3      	subs	r3, r2, r3
 80101d6:	623b      	str	r3, [r7, #32]
    z1 = MULTIPLY(z1, FIX(0.353553391));                /* (c2+c6-c4)/2 */
 80101d8:	6a3b      	ldr	r3, [r7, #32]
 80101da:	f44f 6235 	mov.w	r2, #2896	@ 0xb50
 80101de:	fb02 f303 	mul.w	r3, r2, r3
 80101e2:	623b      	str	r3, [r7, #32]
    z2 = MULTIPLY(tmp0 - tmp2, FIX(0.920609002));       /* (c2+c4-c6)/2 */
 80101e4:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 80101e6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80101e8:	1ad3      	subs	r3, r2, r3
 80101ea:	f641 5276 	movw	r2, #7542	@ 0x1d76
 80101ee:	fb02 f303 	mul.w	r3, r2, r3
 80101f2:	61fb      	str	r3, [r7, #28]
    z3 = MULTIPLY(tmp1 - tmp2, FIX(0.314692123));       /* c6 */
 80101f4:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 80101f6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80101f8:	1ad3      	subs	r3, r2, r3
 80101fa:	f640 2212 	movw	r2, #2578	@ 0xa12
 80101fe:	fb02 f303 	mul.w	r3, r2, r3
 8010202:	61bb      	str	r3, [r7, #24]
    dataptr[2] = (DCTELEM) DESCALE(z1 + z2 + z3, CONST_BITS-PASS1_BITS);
 8010204:	6a3a      	ldr	r2, [r7, #32]
 8010206:	69fb      	ldr	r3, [r7, #28]
 8010208:	441a      	add	r2, r3
 801020a:	69bb      	ldr	r3, [r7, #24]
 801020c:	4413      	add	r3, r2
 801020e:	f503 6280 	add.w	r2, r3, #1024	@ 0x400
 8010212:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8010214:	3308      	adds	r3, #8
 8010216:	12d2      	asrs	r2, r2, #11
 8010218:	601a      	str	r2, [r3, #0]
    z1 -= z2;
 801021a:	6a3a      	ldr	r2, [r7, #32]
 801021c:	69fb      	ldr	r3, [r7, #28]
 801021e:	1ad3      	subs	r3, r2, r3
 8010220:	623b      	str	r3, [r7, #32]
    z2 = MULTIPLY(tmp0 - tmp1, FIX(0.881747734));       /* c4 */
 8010222:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 8010224:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8010226:	1ad3      	subs	r3, r2, r3
 8010228:	f641 4237 	movw	r2, #7223	@ 0x1c37
 801022c:	fb02 f303 	mul.w	r3, r2, r3
 8010230:	61fb      	str	r3, [r7, #28]
    dataptr[4] = (DCTELEM)
      DESCALE(z2 + z3 - MULTIPLY(tmp1 - tmp3, FIX(0.707106781)), /* c2+c6-c4 */
 8010232:	69fa      	ldr	r2, [r7, #28]
 8010234:	69bb      	ldr	r3, [r7, #24]
 8010236:	441a      	add	r2, r3
 8010238:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 801023a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801023c:	1acb      	subs	r3, r1, r3
 801023e:	f46f 51b5 	mvn.w	r1, #5792	@ 0x16a0
 8010242:	fb01 f303 	mul.w	r3, r1, r3
 8010246:	4413      	add	r3, r2
 8010248:	f503 6280 	add.w	r2, r3, #1024	@ 0x400
    dataptr[4] = (DCTELEM)
 801024c:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 801024e:	3310      	adds	r3, #16
      DESCALE(z2 + z3 - MULTIPLY(tmp1 - tmp3, FIX(0.707106781)), /* c2+c6-c4 */
 8010250:	12d2      	asrs	r2, r2, #11
    dataptr[4] = (DCTELEM)
 8010252:	601a      	str	r2, [r3, #0]
	      CONST_BITS-PASS1_BITS);
    dataptr[6] = (DCTELEM) DESCALE(z1 + z2, CONST_BITS-PASS1_BITS);
 8010254:	6a3a      	ldr	r2, [r7, #32]
 8010256:	69fb      	ldr	r3, [r7, #28]
 8010258:	4413      	add	r3, r2
 801025a:	f503 6280 	add.w	r2, r3, #1024	@ 0x400
 801025e:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8010260:	3318      	adds	r3, #24
 8010262:	12d2      	asrs	r2, r2, #11
 8010264:	601a      	str	r2, [r3, #0]

    /* Odd part */

    tmp1 = MULTIPLY(tmp10 + tmp11, FIX(0.935414347));   /* (c3+c1-c5)/2 */
 8010266:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8010268:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801026a:	4413      	add	r3, r2
 801026c:	f641 52ef 	movw	r2, #7663	@ 0x1def
 8010270:	fb02 f303 	mul.w	r3, r2, r3
 8010274:	63bb      	str	r3, [r7, #56]	@ 0x38
    tmp2 = MULTIPLY(tmp10 - tmp11, FIX(0.170262339));   /* (c3+c5-c1)/2 */
 8010276:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8010278:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801027a:	1ad3      	subs	r3, r2, r3
 801027c:	f240 5273 	movw	r2, #1395	@ 0x573
 8010280:	fb02 f303 	mul.w	r3, r2, r3
 8010284:	637b      	str	r3, [r7, #52]	@ 0x34
    tmp0 = tmp1 - tmp2;
 8010286:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8010288:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 801028a:	1ad3      	subs	r3, r2, r3
 801028c:	63fb      	str	r3, [r7, #60]	@ 0x3c
    tmp1 += tmp2;
 801028e:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8010290:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8010292:	4413      	add	r3, r2
 8010294:	63bb      	str	r3, [r7, #56]	@ 0x38
    tmp2 = MULTIPLY(tmp11 + tmp12, - FIX(1.378756276)); /* -c1 */
 8010296:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8010298:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801029a:	4413      	add	r3, r2
 801029c:	4a99      	ldr	r2, [pc, #612]	@ (8010504 <jpeg_fdct_7x7+0x400>)
 801029e:	fb02 f303 	mul.w	r3, r2, r3
 80102a2:	637b      	str	r3, [r7, #52]	@ 0x34
    tmp1 += tmp2;
 80102a4:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 80102a6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80102a8:	4413      	add	r3, r2
 80102aa:	63bb      	str	r3, [r7, #56]	@ 0x38
    tmp3 = MULTIPLY(tmp10 + tmp12, FIX(0.613604268));   /* c5 */
 80102ac:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80102ae:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80102b0:	4413      	add	r3, r2
 80102b2:	f241 32a3 	movw	r2, #5027	@ 0x13a3
 80102b6:	fb02 f303 	mul.w	r3, r2, r3
 80102ba:	633b      	str	r3, [r7, #48]	@ 0x30
    tmp0 += tmp3;
 80102bc:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 80102be:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80102c0:	4413      	add	r3, r2
 80102c2:	63fb      	str	r3, [r7, #60]	@ 0x3c
    tmp2 += tmp3 + MULTIPLY(tmp12, FIX(1.870828693));   /* c3+c1-c5 */
 80102c4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80102c6:	f643 32de 	movw	r2, #15326	@ 0x3bde
 80102ca:	fb03 f202 	mul.w	r2, r3, r2
 80102ce:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80102d0:	4413      	add	r3, r2
 80102d2:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 80102d4:	4413      	add	r3, r2
 80102d6:	637b      	str	r3, [r7, #52]	@ 0x34

    dataptr[1] = (DCTELEM) DESCALE(tmp0, CONST_BITS-PASS1_BITS);
 80102d8:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80102da:	f503 6280 	add.w	r2, r3, #1024	@ 0x400
 80102de:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80102e0:	3304      	adds	r3, #4
 80102e2:	12d2      	asrs	r2, r2, #11
 80102e4:	601a      	str	r2, [r3, #0]
    dataptr[3] = (DCTELEM) DESCALE(tmp1, CONST_BITS-PASS1_BITS);
 80102e6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80102e8:	f503 6280 	add.w	r2, r3, #1024	@ 0x400
 80102ec:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80102ee:	330c      	adds	r3, #12
 80102f0:	12d2      	asrs	r2, r2, #11
 80102f2:	601a      	str	r2, [r3, #0]
    dataptr[5] = (DCTELEM) DESCALE(tmp2, CONST_BITS-PASS1_BITS);
 80102f4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80102f6:	f503 6280 	add.w	r2, r3, #1024	@ 0x400
 80102fa:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80102fc:	3314      	adds	r3, #20
 80102fe:	12d2      	asrs	r2, r2, #11
 8010300:	601a      	str	r2, [r3, #0]

    dataptr += DCTSIZE;		/* advance pointer to next row */
 8010302:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8010304:	3320      	adds	r3, #32
 8010306:	647b      	str	r3, [r7, #68]	@ 0x44
  for (ctr = 0; ctr < 7; ctr++) {
 8010308:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 801030a:	3301      	adds	r3, #1
 801030c:	643b      	str	r3, [r7, #64]	@ 0x40
 801030e:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8010310:	2b06      	cmp	r3, #6
 8010312:	f77f af08 	ble.w	8010126 <jpeg_fdct_7x7+0x22>
   * We must also scale the output by (8/7)**2 = 64/49, which we fold
   * into the constant multipliers:
   * cK now represents sqrt(2) * cos(K*pi/14) * 64/49.
   */

  dataptr = data;
 8010316:	68fb      	ldr	r3, [r7, #12]
 8010318:	647b      	str	r3, [r7, #68]	@ 0x44
  for (ctr = 0; ctr < 7; ctr++) {
 801031a:	2300      	movs	r3, #0
 801031c:	643b      	str	r3, [r7, #64]	@ 0x40
 801031e:	e0e8      	b.n	80104f2 <jpeg_fdct_7x7+0x3ee>
    /* Even part */

    tmp0 = dataptr[DCTSIZE*0] + dataptr[DCTSIZE*6];
 8010320:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8010322:	681a      	ldr	r2, [r3, #0]
 8010324:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8010326:	33c0      	adds	r3, #192	@ 0xc0
 8010328:	681b      	ldr	r3, [r3, #0]
 801032a:	4413      	add	r3, r2
 801032c:	63fb      	str	r3, [r7, #60]	@ 0x3c
    tmp1 = dataptr[DCTSIZE*1] + dataptr[DCTSIZE*5];
 801032e:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8010330:	3320      	adds	r3, #32
 8010332:	681a      	ldr	r2, [r3, #0]
 8010334:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8010336:	33a0      	adds	r3, #160	@ 0xa0
 8010338:	681b      	ldr	r3, [r3, #0]
 801033a:	4413      	add	r3, r2
 801033c:	63bb      	str	r3, [r7, #56]	@ 0x38
    tmp2 = dataptr[DCTSIZE*2] + dataptr[DCTSIZE*4];
 801033e:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8010340:	3340      	adds	r3, #64	@ 0x40
 8010342:	681a      	ldr	r2, [r3, #0]
 8010344:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8010346:	3380      	adds	r3, #128	@ 0x80
 8010348:	681b      	ldr	r3, [r3, #0]
 801034a:	4413      	add	r3, r2
 801034c:	637b      	str	r3, [r7, #52]	@ 0x34
    tmp3 = dataptr[DCTSIZE*3];
 801034e:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8010350:	3360      	adds	r3, #96	@ 0x60
 8010352:	681b      	ldr	r3, [r3, #0]
 8010354:	633b      	str	r3, [r7, #48]	@ 0x30

    tmp10 = dataptr[DCTSIZE*0] - dataptr[DCTSIZE*6];
 8010356:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8010358:	681a      	ldr	r2, [r3, #0]
 801035a:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 801035c:	33c0      	adds	r3, #192	@ 0xc0
 801035e:	681b      	ldr	r3, [r3, #0]
 8010360:	1ad3      	subs	r3, r2, r3
 8010362:	62fb      	str	r3, [r7, #44]	@ 0x2c
    tmp11 = dataptr[DCTSIZE*1] - dataptr[DCTSIZE*5];
 8010364:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8010366:	3320      	adds	r3, #32
 8010368:	681a      	ldr	r2, [r3, #0]
 801036a:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 801036c:	33a0      	adds	r3, #160	@ 0xa0
 801036e:	681b      	ldr	r3, [r3, #0]
 8010370:	1ad3      	subs	r3, r2, r3
 8010372:	62bb      	str	r3, [r7, #40]	@ 0x28
    tmp12 = dataptr[DCTSIZE*2] - dataptr[DCTSIZE*4];
 8010374:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8010376:	3340      	adds	r3, #64	@ 0x40
 8010378:	681a      	ldr	r2, [r3, #0]
 801037a:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 801037c:	3380      	adds	r3, #128	@ 0x80
 801037e:	681b      	ldr	r3, [r3, #0]
 8010380:	1ad3      	subs	r3, r2, r3
 8010382:	627b      	str	r3, [r7, #36]	@ 0x24

    z1 = tmp0 + tmp2;
 8010384:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 8010386:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8010388:	4413      	add	r3, r2
 801038a:	623b      	str	r3, [r7, #32]
    dataptr[DCTSIZE*0] = (DCTELEM)
      DESCALE(MULTIPLY(z1 + tmp1 + tmp3, FIX(1.306122449)), /* 64/49 */
 801038c:	6a3a      	ldr	r2, [r7, #32]
 801038e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8010390:	441a      	add	r2, r3
 8010392:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8010394:	4413      	add	r3, r2
 8010396:	f642 12cc 	movw	r2, #10700	@ 0x29cc
 801039a:	fb02 f303 	mul.w	r3, r2, r3
 801039e:	f503 4380 	add.w	r3, r3, #16384	@ 0x4000
 80103a2:	13da      	asrs	r2, r3, #15
    dataptr[DCTSIZE*0] = (DCTELEM)
 80103a4:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80103a6:	601a      	str	r2, [r3, #0]
	      CONST_BITS+PASS1_BITS);
    tmp3 += tmp3;
 80103a8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80103aa:	005b      	lsls	r3, r3, #1
 80103ac:	633b      	str	r3, [r7, #48]	@ 0x30
    z1 -= tmp3;
 80103ae:	6a3a      	ldr	r2, [r7, #32]
 80103b0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80103b2:	1ad3      	subs	r3, r2, r3
 80103b4:	623b      	str	r3, [r7, #32]
    z1 -= tmp3;
 80103b6:	6a3a      	ldr	r2, [r7, #32]
 80103b8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80103ba:	1ad3      	subs	r3, r2, r3
 80103bc:	623b      	str	r3, [r7, #32]
    z1 = MULTIPLY(z1, FIX(0.461784020));                /* (c2+c6-c4)/2 */
 80103be:	6a3b      	ldr	r3, [r7, #32]
 80103c0:	f640 62c7 	movw	r2, #3783	@ 0xec7
 80103c4:	fb02 f303 	mul.w	r3, r2, r3
 80103c8:	623b      	str	r3, [r7, #32]
    z2 = MULTIPLY(tmp0 - tmp2, FIX(1.202428084));       /* (c2+c4-c6)/2 */
 80103ca:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 80103cc:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80103ce:	1ad3      	subs	r3, r2, r3
 80103d0:	f242 627a 	movw	r2, #9850	@ 0x267a
 80103d4:	fb02 f303 	mul.w	r3, r2, r3
 80103d8:	61fb      	str	r3, [r7, #28]
    z3 = MULTIPLY(tmp1 - tmp2, FIX(0.411026446));       /* c6 */
 80103da:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 80103dc:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80103de:	1ad3      	subs	r3, r2, r3
 80103e0:	f640 5227 	movw	r2, #3367	@ 0xd27
 80103e4:	fb02 f303 	mul.w	r3, r2, r3
 80103e8:	61bb      	str	r3, [r7, #24]
    dataptr[DCTSIZE*2] = (DCTELEM) DESCALE(z1 + z2 + z3, CONST_BITS+PASS1_BITS);
 80103ea:	6a3a      	ldr	r2, [r7, #32]
 80103ec:	69fb      	ldr	r3, [r7, #28]
 80103ee:	441a      	add	r2, r3
 80103f0:	69bb      	ldr	r3, [r7, #24]
 80103f2:	4413      	add	r3, r2
 80103f4:	f503 4280 	add.w	r2, r3, #16384	@ 0x4000
 80103f8:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80103fa:	3340      	adds	r3, #64	@ 0x40
 80103fc:	13d2      	asrs	r2, r2, #15
 80103fe:	601a      	str	r2, [r3, #0]
    z1 -= z2;
 8010400:	6a3a      	ldr	r2, [r7, #32]
 8010402:	69fb      	ldr	r3, [r7, #28]
 8010404:	1ad3      	subs	r3, r2, r3
 8010406:	623b      	str	r3, [r7, #32]
    z2 = MULTIPLY(tmp0 - tmp1, FIX(1.151670509));       /* c4 */
 8010408:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 801040a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801040c:	1ad3      	subs	r3, r2, r3
 801040e:	f242 42da 	movw	r2, #9434	@ 0x24da
 8010412:	fb02 f303 	mul.w	r3, r2, r3
 8010416:	61fb      	str	r3, [r7, #28]
    dataptr[DCTSIZE*4] = (DCTELEM)
      DESCALE(z2 + z3 - MULTIPLY(tmp1 - tmp3, FIX(0.923568041)), /* c2+c6-c4 */
 8010418:	69fa      	ldr	r2, [r7, #28]
 801041a:	69bb      	ldr	r3, [r7, #24]
 801041c:	441a      	add	r2, r3
 801041e:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 8010420:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8010422:	1acb      	subs	r3, r1, r3
 8010424:	4938      	ldr	r1, [pc, #224]	@ (8010508 <jpeg_fdct_7x7+0x404>)
 8010426:	fb01 f303 	mul.w	r3, r1, r3
 801042a:	4413      	add	r3, r2
 801042c:	f503 4280 	add.w	r2, r3, #16384	@ 0x4000
    dataptr[DCTSIZE*4] = (DCTELEM)
 8010430:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8010432:	3380      	adds	r3, #128	@ 0x80
      DESCALE(z2 + z3 - MULTIPLY(tmp1 - tmp3, FIX(0.923568041)), /* c2+c6-c4 */
 8010434:	13d2      	asrs	r2, r2, #15
    dataptr[DCTSIZE*4] = (DCTELEM)
 8010436:	601a      	str	r2, [r3, #0]
	      CONST_BITS+PASS1_BITS);
    dataptr[DCTSIZE*6] = (DCTELEM) DESCALE(z1 + z2, CONST_BITS+PASS1_BITS);
 8010438:	6a3a      	ldr	r2, [r7, #32]
 801043a:	69fb      	ldr	r3, [r7, #28]
 801043c:	4413      	add	r3, r2
 801043e:	f503 4280 	add.w	r2, r3, #16384	@ 0x4000
 8010442:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8010444:	33c0      	adds	r3, #192	@ 0xc0
 8010446:	13d2      	asrs	r2, r2, #15
 8010448:	601a      	str	r2, [r3, #0]

    /* Odd part */

    tmp1 = MULTIPLY(tmp10 + tmp11, FIX(1.221765677));   /* (c3+c1-c5)/2 */
 801044a:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 801044c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801044e:	4413      	add	r3, r2
 8010450:	f242 7219 	movw	r2, #10009	@ 0x2719
 8010454:	fb02 f303 	mul.w	r3, r2, r3
 8010458:	63bb      	str	r3, [r7, #56]	@ 0x38
    tmp2 = MULTIPLY(tmp10 - tmp11, FIX(0.222383464));   /* (c3+c5-c1)/2 */
 801045a:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 801045c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801045e:	1ad3      	subs	r3, r2, r3
 8010460:	f240 721e 	movw	r2, #1822	@ 0x71e
 8010464:	fb02 f303 	mul.w	r3, r2, r3
 8010468:	637b      	str	r3, [r7, #52]	@ 0x34
    tmp0 = tmp1 - tmp2;
 801046a:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 801046c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 801046e:	1ad3      	subs	r3, r2, r3
 8010470:	63fb      	str	r3, [r7, #60]	@ 0x3c
    tmp1 += tmp2;
 8010472:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8010474:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8010476:	4413      	add	r3, r2
 8010478:	63bb      	str	r3, [r7, #56]	@ 0x38
    tmp2 = MULTIPLY(tmp11 + tmp12, - FIX(1.800824523)); /* -c1 */
 801047a:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 801047c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801047e:	4413      	add	r3, r2
 8010480:	4a22      	ldr	r2, [pc, #136]	@ (801050c <jpeg_fdct_7x7+0x408>)
 8010482:	fb02 f303 	mul.w	r3, r2, r3
 8010486:	637b      	str	r3, [r7, #52]	@ 0x34
    tmp1 += tmp2;
 8010488:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 801048a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 801048c:	4413      	add	r3, r2
 801048e:	63bb      	str	r3, [r7, #56]	@ 0x38
    tmp3 = MULTIPLY(tmp10 + tmp12, FIX(0.801442310));   /* c5 */
 8010490:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8010492:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8010494:	4413      	add	r3, r2
 8010496:	f641 12a5 	movw	r2, #6565	@ 0x19a5
 801049a:	fb02 f303 	mul.w	r3, r2, r3
 801049e:	633b      	str	r3, [r7, #48]	@ 0x30
    tmp0 += tmp3;
 80104a0:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 80104a2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80104a4:	4413      	add	r3, r2
 80104a6:	63fb      	str	r3, [r7, #60]	@ 0x3c
    tmp2 += tmp3 + MULTIPLY(tmp12, FIX(2.443531355));   /* c3+c1-c5 */
 80104a8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80104aa:	f644 6231 	movw	r2, #20017	@ 0x4e31
 80104ae:	fb03 f202 	mul.w	r2, r3, r2
 80104b2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80104b4:	4413      	add	r3, r2
 80104b6:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 80104b8:	4413      	add	r3, r2
 80104ba:	637b      	str	r3, [r7, #52]	@ 0x34

    dataptr[DCTSIZE*1] = (DCTELEM) DESCALE(tmp0, CONST_BITS+PASS1_BITS);
 80104bc:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80104be:	f503 4280 	add.w	r2, r3, #16384	@ 0x4000
 80104c2:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80104c4:	3320      	adds	r3, #32
 80104c6:	13d2      	asrs	r2, r2, #15
 80104c8:	601a      	str	r2, [r3, #0]
    dataptr[DCTSIZE*3] = (DCTELEM) DESCALE(tmp1, CONST_BITS+PASS1_BITS);
 80104ca:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80104cc:	f503 4280 	add.w	r2, r3, #16384	@ 0x4000
 80104d0:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80104d2:	3360      	adds	r3, #96	@ 0x60
 80104d4:	13d2      	asrs	r2, r2, #15
 80104d6:	601a      	str	r2, [r3, #0]
    dataptr[DCTSIZE*5] = (DCTELEM) DESCALE(tmp2, CONST_BITS+PASS1_BITS);
 80104d8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80104da:	f503 4280 	add.w	r2, r3, #16384	@ 0x4000
 80104de:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80104e0:	33a0      	adds	r3, #160	@ 0xa0
 80104e2:	13d2      	asrs	r2, r2, #15
 80104e4:	601a      	str	r2, [r3, #0]

    dataptr++;			/* advance pointer to next column */
 80104e6:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80104e8:	3304      	adds	r3, #4
 80104ea:	647b      	str	r3, [r7, #68]	@ 0x44
  for (ctr = 0; ctr < 7; ctr++) {
 80104ec:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80104ee:	3301      	adds	r3, #1
 80104f0:	643b      	str	r3, [r7, #64]	@ 0x40
 80104f2:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80104f4:	2b06      	cmp	r3, #6
 80104f6:	f77f af13 	ble.w	8010320 <jpeg_fdct_7x7+0x21c>
  }
}
 80104fa:	bf00      	nop
 80104fc:	bf00      	nop
 80104fe:	3748      	adds	r7, #72	@ 0x48
 8010500:	46bd      	mov	sp, r7
 8010502:	bd80      	pop	{r7, pc}
 8010504:	ffffd3e1 	.word	0xffffd3e1
 8010508:	ffffe272 	.word	0xffffe272
 801050c:	ffffc660 	.word	0xffffc660

08010510 <jpeg_fdct_6x6>:
 * Perform the forward DCT on a 6x6 sample block.
 */

GLOBAL(void)
jpeg_fdct_6x6 (DCTELEM * data, JSAMPARRAY sample_data, JDIMENSION start_col)
{
 8010510:	b580      	push	{r7, lr}
 8010512:	b08e      	sub	sp, #56	@ 0x38
 8010514:	af00      	add	r7, sp, #0
 8010516:	60f8      	str	r0, [r7, #12]
 8010518:	60b9      	str	r1, [r7, #8]
 801051a:	607a      	str	r2, [r7, #4]
  JSAMPROW elemptr;
  int ctr;
  SHIFT_TEMPS

  /* Pre-zero output coefficient block. */
  MEMZERO(data, SIZEOF(DCTELEM) * DCTSIZE2);
 801051c:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8010520:	2100      	movs	r1, #0
 8010522:	68f8      	ldr	r0, [r7, #12]
 8010524:	f009 fa64 	bl	80199f0 <memset>
  /* Pass 1: process rows. */
  /* Note results are scaled up by sqrt(8) compared to a true DCT; */
  /* furthermore, we scale the results by 2**PASS1_BITS. */
  /* cK represents sqrt(2) * cos(K*pi/12). */

  dataptr = data;
 8010528:	68fb      	ldr	r3, [r7, #12]
 801052a:	637b      	str	r3, [r7, #52]	@ 0x34
  for (ctr = 0; ctr < 6; ctr++) {
 801052c:	2300      	movs	r3, #0
 801052e:	633b      	str	r3, [r7, #48]	@ 0x30
 8010530:	e091      	b.n	8010656 <jpeg_fdct_6x6+0x146>
    elemptr = sample_data[ctr] + start_col;
 8010532:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8010534:	009b      	lsls	r3, r3, #2
 8010536:	68ba      	ldr	r2, [r7, #8]
 8010538:	4413      	add	r3, r2
 801053a:	681a      	ldr	r2, [r3, #0]
 801053c:	687b      	ldr	r3, [r7, #4]
 801053e:	4413      	add	r3, r2
 8010540:	617b      	str	r3, [r7, #20]

    /* Even part */

    tmp0 = GETJSAMPLE(elemptr[0]) + GETJSAMPLE(elemptr[5]);
 8010542:	697b      	ldr	r3, [r7, #20]
 8010544:	781b      	ldrb	r3, [r3, #0]
 8010546:	461a      	mov	r2, r3
 8010548:	697b      	ldr	r3, [r7, #20]
 801054a:	3305      	adds	r3, #5
 801054c:	781b      	ldrb	r3, [r3, #0]
 801054e:	4413      	add	r3, r2
 8010550:	62fb      	str	r3, [r7, #44]	@ 0x2c
    tmp11 = GETJSAMPLE(elemptr[1]) + GETJSAMPLE(elemptr[4]);
 8010552:	697b      	ldr	r3, [r7, #20]
 8010554:	3301      	adds	r3, #1
 8010556:	781b      	ldrb	r3, [r3, #0]
 8010558:	461a      	mov	r2, r3
 801055a:	697b      	ldr	r3, [r7, #20]
 801055c:	3304      	adds	r3, #4
 801055e:	781b      	ldrb	r3, [r3, #0]
 8010560:	4413      	add	r3, r2
 8010562:	62bb      	str	r3, [r7, #40]	@ 0x28
    tmp2 = GETJSAMPLE(elemptr[2]) + GETJSAMPLE(elemptr[3]);
 8010564:	697b      	ldr	r3, [r7, #20]
 8010566:	3302      	adds	r3, #2
 8010568:	781b      	ldrb	r3, [r3, #0]
 801056a:	461a      	mov	r2, r3
 801056c:	697b      	ldr	r3, [r7, #20]
 801056e:	3303      	adds	r3, #3
 8010570:	781b      	ldrb	r3, [r3, #0]
 8010572:	4413      	add	r3, r2
 8010574:	627b      	str	r3, [r7, #36]	@ 0x24

    tmp10 = tmp0 + tmp2;
 8010576:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8010578:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801057a:	4413      	add	r3, r2
 801057c:	623b      	str	r3, [r7, #32]
    tmp12 = tmp0 - tmp2;
 801057e:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8010580:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8010582:	1ad3      	subs	r3, r2, r3
 8010584:	61fb      	str	r3, [r7, #28]

    tmp0 = GETJSAMPLE(elemptr[0]) - GETJSAMPLE(elemptr[5]);
 8010586:	697b      	ldr	r3, [r7, #20]
 8010588:	781b      	ldrb	r3, [r3, #0]
 801058a:	461a      	mov	r2, r3
 801058c:	697b      	ldr	r3, [r7, #20]
 801058e:	3305      	adds	r3, #5
 8010590:	781b      	ldrb	r3, [r3, #0]
 8010592:	1ad3      	subs	r3, r2, r3
 8010594:	62fb      	str	r3, [r7, #44]	@ 0x2c
    tmp1 = GETJSAMPLE(elemptr[1]) - GETJSAMPLE(elemptr[4]);
 8010596:	697b      	ldr	r3, [r7, #20]
 8010598:	3301      	adds	r3, #1
 801059a:	781b      	ldrb	r3, [r3, #0]
 801059c:	461a      	mov	r2, r3
 801059e:	697b      	ldr	r3, [r7, #20]
 80105a0:	3304      	adds	r3, #4
 80105a2:	781b      	ldrb	r3, [r3, #0]
 80105a4:	1ad3      	subs	r3, r2, r3
 80105a6:	61bb      	str	r3, [r7, #24]
    tmp2 = GETJSAMPLE(elemptr[2]) - GETJSAMPLE(elemptr[3]);
 80105a8:	697b      	ldr	r3, [r7, #20]
 80105aa:	3302      	adds	r3, #2
 80105ac:	781b      	ldrb	r3, [r3, #0]
 80105ae:	461a      	mov	r2, r3
 80105b0:	697b      	ldr	r3, [r7, #20]
 80105b2:	3303      	adds	r3, #3
 80105b4:	781b      	ldrb	r3, [r3, #0]
 80105b6:	1ad3      	subs	r3, r2, r3
 80105b8:	627b      	str	r3, [r7, #36]	@ 0x24

    /* Apply unsigned->signed conversion */
    dataptr[0] = (DCTELEM)
      ((tmp10 + tmp11 - 6 * CENTERJSAMPLE) << PASS1_BITS);
 80105ba:	6a3a      	ldr	r2, [r7, #32]
 80105bc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80105be:	4413      	add	r3, r2
 80105c0:	f5a3 7340 	sub.w	r3, r3, #768	@ 0x300
 80105c4:	009a      	lsls	r2, r3, #2
    dataptr[0] = (DCTELEM)
 80105c6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80105c8:	601a      	str	r2, [r3, #0]
    dataptr[2] = (DCTELEM)
      DESCALE(MULTIPLY(tmp12, FIX(1.224744871)),                 /* c2 */
 80105ca:	69fb      	ldr	r3, [r7, #28]
 80105cc:	f242 7231 	movw	r2, #10033	@ 0x2731
 80105d0:	fb02 f303 	mul.w	r3, r2, r3
 80105d4:	f503 6280 	add.w	r2, r3, #1024	@ 0x400
    dataptr[2] = (DCTELEM)
 80105d8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80105da:	3308      	adds	r3, #8
      DESCALE(MULTIPLY(tmp12, FIX(1.224744871)),                 /* c2 */
 80105dc:	12d2      	asrs	r2, r2, #11
    dataptr[2] = (DCTELEM)
 80105de:	601a      	str	r2, [r3, #0]
	      CONST_BITS-PASS1_BITS);
    dataptr[4] = (DCTELEM)
      DESCALE(MULTIPLY(tmp10 - tmp11 - tmp11, FIX(0.707106781)), /* c4 */
 80105e0:	6a3a      	ldr	r2, [r7, #32]
 80105e2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80105e4:	1ad2      	subs	r2, r2, r3
 80105e6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80105e8:	1ad3      	subs	r3, r2, r3
 80105ea:	f241 62a1 	movw	r2, #5793	@ 0x16a1
 80105ee:	fb02 f303 	mul.w	r3, r2, r3
 80105f2:	f503 6280 	add.w	r2, r3, #1024	@ 0x400
    dataptr[4] = (DCTELEM)
 80105f6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80105f8:	3310      	adds	r3, #16
      DESCALE(MULTIPLY(tmp10 - tmp11 - tmp11, FIX(0.707106781)), /* c4 */
 80105fa:	12d2      	asrs	r2, r2, #11
    dataptr[4] = (DCTELEM)
 80105fc:	601a      	str	r2, [r3, #0]
	      CONST_BITS-PASS1_BITS);

    /* Odd part */

    tmp10 = DESCALE(MULTIPLY(tmp0 + tmp2, FIX(0.366025404)),     /* c5 */
 80105fe:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8010600:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8010602:	4413      	add	r3, r2
 8010604:	f640 32b6 	movw	r2, #2998	@ 0xbb6
 8010608:	fb02 f303 	mul.w	r3, r2, r3
 801060c:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8010610:	12db      	asrs	r3, r3, #11
 8010612:	623b      	str	r3, [r7, #32]
		    CONST_BITS-PASS1_BITS);

    dataptr[1] = (DCTELEM) (tmp10 + ((tmp0 + tmp1) << PASS1_BITS));
 8010614:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8010616:	69bb      	ldr	r3, [r7, #24]
 8010618:	4413      	add	r3, r2
 801061a:	0099      	lsls	r1, r3, #2
 801061c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 801061e:	3304      	adds	r3, #4
 8010620:	6a3a      	ldr	r2, [r7, #32]
 8010622:	440a      	add	r2, r1
 8010624:	601a      	str	r2, [r3, #0]
    dataptr[3] = (DCTELEM) ((tmp0 - tmp1 - tmp2) << PASS1_BITS);
 8010626:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8010628:	69bb      	ldr	r3, [r7, #24]
 801062a:	1ad2      	subs	r2, r2, r3
 801062c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801062e:	1ad2      	subs	r2, r2, r3
 8010630:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8010632:	330c      	adds	r3, #12
 8010634:	0092      	lsls	r2, r2, #2
 8010636:	601a      	str	r2, [r3, #0]
    dataptr[5] = (DCTELEM) (tmp10 + ((tmp2 - tmp1) << PASS1_BITS));
 8010638:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 801063a:	69bb      	ldr	r3, [r7, #24]
 801063c:	1ad3      	subs	r3, r2, r3
 801063e:	0099      	lsls	r1, r3, #2
 8010640:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8010642:	3314      	adds	r3, #20
 8010644:	6a3a      	ldr	r2, [r7, #32]
 8010646:	440a      	add	r2, r1
 8010648:	601a      	str	r2, [r3, #0]

    dataptr += DCTSIZE;		/* advance pointer to next row */
 801064a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 801064c:	3320      	adds	r3, #32
 801064e:	637b      	str	r3, [r7, #52]	@ 0x34
  for (ctr = 0; ctr < 6; ctr++) {
 8010650:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8010652:	3301      	adds	r3, #1
 8010654:	633b      	str	r3, [r7, #48]	@ 0x30
 8010656:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8010658:	2b05      	cmp	r3, #5
 801065a:	f77f af6a 	ble.w	8010532 <jpeg_fdct_6x6+0x22>
   * We must also scale the output by (8/6)**2 = 16/9, which we fold
   * into the constant multipliers:
   * cK now represents sqrt(2) * cos(K*pi/12) * 16/9.
   */

  dataptr = data;
 801065e:	68fb      	ldr	r3, [r7, #12]
 8010660:	637b      	str	r3, [r7, #52]	@ 0x34
  for (ctr = 0; ctr < 6; ctr++) {
 8010662:	2300      	movs	r3, #0
 8010664:	633b      	str	r3, [r7, #48]	@ 0x30
 8010666:	e096      	b.n	8010796 <jpeg_fdct_6x6+0x286>
    /* Even part */

    tmp0 = dataptr[DCTSIZE*0] + dataptr[DCTSIZE*5];
 8010668:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 801066a:	681a      	ldr	r2, [r3, #0]
 801066c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 801066e:	33a0      	adds	r3, #160	@ 0xa0
 8010670:	681b      	ldr	r3, [r3, #0]
 8010672:	4413      	add	r3, r2
 8010674:	62fb      	str	r3, [r7, #44]	@ 0x2c
    tmp11 = dataptr[DCTSIZE*1] + dataptr[DCTSIZE*4];
 8010676:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8010678:	3320      	adds	r3, #32
 801067a:	681a      	ldr	r2, [r3, #0]
 801067c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 801067e:	3380      	adds	r3, #128	@ 0x80
 8010680:	681b      	ldr	r3, [r3, #0]
 8010682:	4413      	add	r3, r2
 8010684:	62bb      	str	r3, [r7, #40]	@ 0x28
    tmp2 = dataptr[DCTSIZE*2] + dataptr[DCTSIZE*3];
 8010686:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8010688:	3340      	adds	r3, #64	@ 0x40
 801068a:	681a      	ldr	r2, [r3, #0]
 801068c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 801068e:	3360      	adds	r3, #96	@ 0x60
 8010690:	681b      	ldr	r3, [r3, #0]
 8010692:	4413      	add	r3, r2
 8010694:	627b      	str	r3, [r7, #36]	@ 0x24

    tmp10 = tmp0 + tmp2;
 8010696:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8010698:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801069a:	4413      	add	r3, r2
 801069c:	623b      	str	r3, [r7, #32]
    tmp12 = tmp0 - tmp2;
 801069e:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80106a0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80106a2:	1ad3      	subs	r3, r2, r3
 80106a4:	61fb      	str	r3, [r7, #28]

    tmp0 = dataptr[DCTSIZE*0] - dataptr[DCTSIZE*5];
 80106a6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80106a8:	681a      	ldr	r2, [r3, #0]
 80106aa:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80106ac:	33a0      	adds	r3, #160	@ 0xa0
 80106ae:	681b      	ldr	r3, [r3, #0]
 80106b0:	1ad3      	subs	r3, r2, r3
 80106b2:	62fb      	str	r3, [r7, #44]	@ 0x2c
    tmp1 = dataptr[DCTSIZE*1] - dataptr[DCTSIZE*4];
 80106b4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80106b6:	3320      	adds	r3, #32
 80106b8:	681a      	ldr	r2, [r3, #0]
 80106ba:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80106bc:	3380      	adds	r3, #128	@ 0x80
 80106be:	681b      	ldr	r3, [r3, #0]
 80106c0:	1ad3      	subs	r3, r2, r3
 80106c2:	61bb      	str	r3, [r7, #24]
    tmp2 = dataptr[DCTSIZE*2] - dataptr[DCTSIZE*3];
 80106c4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80106c6:	3340      	adds	r3, #64	@ 0x40
 80106c8:	681a      	ldr	r2, [r3, #0]
 80106ca:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80106cc:	3360      	adds	r3, #96	@ 0x60
 80106ce:	681b      	ldr	r3, [r3, #0]
 80106d0:	1ad3      	subs	r3, r2, r3
 80106d2:	627b      	str	r3, [r7, #36]	@ 0x24

    dataptr[DCTSIZE*0] = (DCTELEM)
      DESCALE(MULTIPLY(tmp10 + tmp11, FIX(1.777777778)),         /* 16/9 */
 80106d4:	6a3a      	ldr	r2, [r7, #32]
 80106d6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80106d8:	4413      	add	r3, r2
 80106da:	f643 02e4 	movw	r2, #14564	@ 0x38e4
 80106de:	fb02 f303 	mul.w	r3, r2, r3
 80106e2:	f503 4380 	add.w	r3, r3, #16384	@ 0x4000
 80106e6:	13da      	asrs	r2, r3, #15
    dataptr[DCTSIZE*0] = (DCTELEM)
 80106e8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80106ea:	601a      	str	r2, [r3, #0]
	      CONST_BITS+PASS1_BITS);
    dataptr[DCTSIZE*2] = (DCTELEM)
      DESCALE(MULTIPLY(tmp12, FIX(2.177324216)),                 /* c2 */
 80106ec:	69fb      	ldr	r3, [r7, #28]
 80106ee:	f244 52ad 	movw	r2, #17837	@ 0x45ad
 80106f2:	fb02 f303 	mul.w	r3, r2, r3
 80106f6:	f503 4280 	add.w	r2, r3, #16384	@ 0x4000
    dataptr[DCTSIZE*2] = (DCTELEM)
 80106fa:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80106fc:	3340      	adds	r3, #64	@ 0x40
      DESCALE(MULTIPLY(tmp12, FIX(2.177324216)),                 /* c2 */
 80106fe:	13d2      	asrs	r2, r2, #15
    dataptr[DCTSIZE*2] = (DCTELEM)
 8010700:	601a      	str	r2, [r3, #0]
	      CONST_BITS+PASS1_BITS);
    dataptr[DCTSIZE*4] = (DCTELEM)
      DESCALE(MULTIPLY(tmp10 - tmp11 - tmp11, FIX(1.257078722)), /* c4 */
 8010702:	6a3a      	ldr	r2, [r7, #32]
 8010704:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8010706:	1ad2      	subs	r2, r2, r3
 8010708:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801070a:	1ad3      	subs	r3, r2, r3
 801070c:	f642 023a 	movw	r2, #10298	@ 0x283a
 8010710:	fb02 f303 	mul.w	r3, r2, r3
 8010714:	f503 4280 	add.w	r2, r3, #16384	@ 0x4000
    dataptr[DCTSIZE*4] = (DCTELEM)
 8010718:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 801071a:	3380      	adds	r3, #128	@ 0x80
      DESCALE(MULTIPLY(tmp10 - tmp11 - tmp11, FIX(1.257078722)), /* c4 */
 801071c:	13d2      	asrs	r2, r2, #15
    dataptr[DCTSIZE*4] = (DCTELEM)
 801071e:	601a      	str	r2, [r3, #0]
	      CONST_BITS+PASS1_BITS);

    /* Odd part */

    tmp10 = MULTIPLY(tmp0 + tmp2, FIX(0.650711829));             /* c5 */
 8010720:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8010722:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8010724:	4413      	add	r3, r2
 8010726:	f241 42d3 	movw	r2, #5331	@ 0x14d3
 801072a:	fb02 f303 	mul.w	r3, r2, r3
 801072e:	623b      	str	r3, [r7, #32]

    dataptr[DCTSIZE*1] = (DCTELEM)
      DESCALE(tmp10 + MULTIPLY(tmp0 + tmp1, FIX(1.777777778)),   /* 16/9 */
 8010730:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8010732:	69bb      	ldr	r3, [r7, #24]
 8010734:	4413      	add	r3, r2
 8010736:	f643 02e4 	movw	r2, #14564	@ 0x38e4
 801073a:	fb03 f202 	mul.w	r2, r3, r2
 801073e:	6a3b      	ldr	r3, [r7, #32]
 8010740:	4413      	add	r3, r2
 8010742:	f503 4280 	add.w	r2, r3, #16384	@ 0x4000
    dataptr[DCTSIZE*1] = (DCTELEM)
 8010746:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8010748:	3320      	adds	r3, #32
      DESCALE(tmp10 + MULTIPLY(tmp0 + tmp1, FIX(1.777777778)),   /* 16/9 */
 801074a:	13d2      	asrs	r2, r2, #15
    dataptr[DCTSIZE*1] = (DCTELEM)
 801074c:	601a      	str	r2, [r3, #0]
	      CONST_BITS+PASS1_BITS);
    dataptr[DCTSIZE*3] = (DCTELEM)
      DESCALE(MULTIPLY(tmp0 - tmp1 - tmp2, FIX(1.777777778)),    /* 16/9 */
 801074e:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8010750:	69bb      	ldr	r3, [r7, #24]
 8010752:	1ad2      	subs	r2, r2, r3
 8010754:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8010756:	1ad3      	subs	r3, r2, r3
 8010758:	f643 02e4 	movw	r2, #14564	@ 0x38e4
 801075c:	fb02 f303 	mul.w	r3, r2, r3
 8010760:	f503 4280 	add.w	r2, r3, #16384	@ 0x4000
    dataptr[DCTSIZE*3] = (DCTELEM)
 8010764:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8010766:	3360      	adds	r3, #96	@ 0x60
      DESCALE(MULTIPLY(tmp0 - tmp1 - tmp2, FIX(1.777777778)),    /* 16/9 */
 8010768:	13d2      	asrs	r2, r2, #15
    dataptr[DCTSIZE*3] = (DCTELEM)
 801076a:	601a      	str	r2, [r3, #0]
	      CONST_BITS+PASS1_BITS);
    dataptr[DCTSIZE*5] = (DCTELEM)
      DESCALE(tmp10 + MULTIPLY(tmp2 - tmp1, FIX(1.777777778)),   /* 16/9 */
 801076c:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 801076e:	69bb      	ldr	r3, [r7, #24]
 8010770:	1ad3      	subs	r3, r2, r3
 8010772:	f643 02e4 	movw	r2, #14564	@ 0x38e4
 8010776:	fb03 f202 	mul.w	r2, r3, r2
 801077a:	6a3b      	ldr	r3, [r7, #32]
 801077c:	4413      	add	r3, r2
 801077e:	f503 4280 	add.w	r2, r3, #16384	@ 0x4000
    dataptr[DCTSIZE*5] = (DCTELEM)
 8010782:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8010784:	33a0      	adds	r3, #160	@ 0xa0
      DESCALE(tmp10 + MULTIPLY(tmp2 - tmp1, FIX(1.777777778)),   /* 16/9 */
 8010786:	13d2      	asrs	r2, r2, #15
    dataptr[DCTSIZE*5] = (DCTELEM)
 8010788:	601a      	str	r2, [r3, #0]
	      CONST_BITS+PASS1_BITS);

    dataptr++;			/* advance pointer to next column */
 801078a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 801078c:	3304      	adds	r3, #4
 801078e:	637b      	str	r3, [r7, #52]	@ 0x34
  for (ctr = 0; ctr < 6; ctr++) {
 8010790:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8010792:	3301      	adds	r3, #1
 8010794:	633b      	str	r3, [r7, #48]	@ 0x30
 8010796:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8010798:	2b05      	cmp	r3, #5
 801079a:	f77f af65 	ble.w	8010668 <jpeg_fdct_6x6+0x158>
  }
}
 801079e:	bf00      	nop
 80107a0:	bf00      	nop
 80107a2:	3738      	adds	r7, #56	@ 0x38
 80107a4:	46bd      	mov	sp, r7
 80107a6:	bd80      	pop	{r7, pc}

080107a8 <jpeg_fdct_5x5>:
 * Perform the forward DCT on a 5x5 sample block.
 */

GLOBAL(void)
jpeg_fdct_5x5 (DCTELEM * data, JSAMPARRAY sample_data, JDIMENSION start_col)
{
 80107a8:	b580      	push	{r7, lr}
 80107aa:	b08c      	sub	sp, #48	@ 0x30
 80107ac:	af00      	add	r7, sp, #0
 80107ae:	60f8      	str	r0, [r7, #12]
 80107b0:	60b9      	str	r1, [r7, #8]
 80107b2:	607a      	str	r2, [r7, #4]
  JSAMPROW elemptr;
  int ctr;
  SHIFT_TEMPS

  /* Pre-zero output coefficient block. */
  MEMZERO(data, SIZEOF(DCTELEM) * DCTSIZE2);
 80107b4:	f44f 7280 	mov.w	r2, #256	@ 0x100
 80107b8:	2100      	movs	r1, #0
 80107ba:	68f8      	ldr	r0, [r7, #12]
 80107bc:	f009 f918 	bl	80199f0 <memset>
  /* furthermore, we scale the results by 2**PASS1_BITS. */
  /* We scale the results further by 2 as part of output adaption */
  /* scaling for different DCT size. */
  /* cK represents sqrt(2) * cos(K*pi/10). */

  dataptr = data;
 80107c0:	68fb      	ldr	r3, [r7, #12]
 80107c2:	62fb      	str	r3, [r7, #44]	@ 0x2c
  for (ctr = 0; ctr < 5; ctr++) {
 80107c4:	2300      	movs	r3, #0
 80107c6:	62bb      	str	r3, [r7, #40]	@ 0x28
 80107c8:	e087      	b.n	80108da <jpeg_fdct_5x5+0x132>
    elemptr = sample_data[ctr] + start_col;
 80107ca:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80107cc:	009b      	lsls	r3, r3, #2
 80107ce:	68ba      	ldr	r2, [r7, #8]
 80107d0:	4413      	add	r3, r2
 80107d2:	681a      	ldr	r2, [r3, #0]
 80107d4:	687b      	ldr	r3, [r7, #4]
 80107d6:	4413      	add	r3, r2
 80107d8:	613b      	str	r3, [r7, #16]

    /* Even part */

    tmp0 = GETJSAMPLE(elemptr[0]) + GETJSAMPLE(elemptr[4]);
 80107da:	693b      	ldr	r3, [r7, #16]
 80107dc:	781b      	ldrb	r3, [r3, #0]
 80107de:	461a      	mov	r2, r3
 80107e0:	693b      	ldr	r3, [r7, #16]
 80107e2:	3304      	adds	r3, #4
 80107e4:	781b      	ldrb	r3, [r3, #0]
 80107e6:	4413      	add	r3, r2
 80107e8:	627b      	str	r3, [r7, #36]	@ 0x24
    tmp1 = GETJSAMPLE(elemptr[1]) + GETJSAMPLE(elemptr[3]);
 80107ea:	693b      	ldr	r3, [r7, #16]
 80107ec:	3301      	adds	r3, #1
 80107ee:	781b      	ldrb	r3, [r3, #0]
 80107f0:	461a      	mov	r2, r3
 80107f2:	693b      	ldr	r3, [r7, #16]
 80107f4:	3303      	adds	r3, #3
 80107f6:	781b      	ldrb	r3, [r3, #0]
 80107f8:	4413      	add	r3, r2
 80107fa:	623b      	str	r3, [r7, #32]
    tmp2 = GETJSAMPLE(elemptr[2]);
 80107fc:	693b      	ldr	r3, [r7, #16]
 80107fe:	3302      	adds	r3, #2
 8010800:	781b      	ldrb	r3, [r3, #0]
 8010802:	61fb      	str	r3, [r7, #28]

    tmp10 = tmp0 + tmp1;
 8010804:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8010806:	6a3b      	ldr	r3, [r7, #32]
 8010808:	4413      	add	r3, r2
 801080a:	61bb      	str	r3, [r7, #24]
    tmp11 = tmp0 - tmp1;
 801080c:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 801080e:	6a3b      	ldr	r3, [r7, #32]
 8010810:	1ad3      	subs	r3, r2, r3
 8010812:	617b      	str	r3, [r7, #20]

    tmp0 = GETJSAMPLE(elemptr[0]) - GETJSAMPLE(elemptr[4]);
 8010814:	693b      	ldr	r3, [r7, #16]
 8010816:	781b      	ldrb	r3, [r3, #0]
 8010818:	461a      	mov	r2, r3
 801081a:	693b      	ldr	r3, [r7, #16]
 801081c:	3304      	adds	r3, #4
 801081e:	781b      	ldrb	r3, [r3, #0]
 8010820:	1ad3      	subs	r3, r2, r3
 8010822:	627b      	str	r3, [r7, #36]	@ 0x24
    tmp1 = GETJSAMPLE(elemptr[1]) - GETJSAMPLE(elemptr[3]);
 8010824:	693b      	ldr	r3, [r7, #16]
 8010826:	3301      	adds	r3, #1
 8010828:	781b      	ldrb	r3, [r3, #0]
 801082a:	461a      	mov	r2, r3
 801082c:	693b      	ldr	r3, [r7, #16]
 801082e:	3303      	adds	r3, #3
 8010830:	781b      	ldrb	r3, [r3, #0]
 8010832:	1ad3      	subs	r3, r2, r3
 8010834:	623b      	str	r3, [r7, #32]

    /* Apply unsigned->signed conversion */
    dataptr[0] = (DCTELEM)
      ((tmp10 + tmp2 - 5 * CENTERJSAMPLE) << (PASS1_BITS+1));
 8010836:	69ba      	ldr	r2, [r7, #24]
 8010838:	69fb      	ldr	r3, [r7, #28]
 801083a:	4413      	add	r3, r2
 801083c:	f5a3 7320 	sub.w	r3, r3, #640	@ 0x280
 8010840:	00da      	lsls	r2, r3, #3
    dataptr[0] = (DCTELEM)
 8010842:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8010844:	601a      	str	r2, [r3, #0]
    tmp11 = MULTIPLY(tmp11, FIX(0.790569415));          /* (c2+c4)/2 */
 8010846:	697b      	ldr	r3, [r7, #20]
 8010848:	f641 124c 	movw	r2, #6476	@ 0x194c
 801084c:	fb02 f303 	mul.w	r3, r2, r3
 8010850:	617b      	str	r3, [r7, #20]
    tmp10 -= tmp2 << 2;
 8010852:	69fb      	ldr	r3, [r7, #28]
 8010854:	009b      	lsls	r3, r3, #2
 8010856:	69ba      	ldr	r2, [r7, #24]
 8010858:	1ad3      	subs	r3, r2, r3
 801085a:	61bb      	str	r3, [r7, #24]
    tmp10 = MULTIPLY(tmp10, FIX(0.353553391));          /* (c2-c4)/2 */
 801085c:	69bb      	ldr	r3, [r7, #24]
 801085e:	f44f 6235 	mov.w	r2, #2896	@ 0xb50
 8010862:	fb02 f303 	mul.w	r3, r2, r3
 8010866:	61bb      	str	r3, [r7, #24]
    dataptr[2] = (DCTELEM) DESCALE(tmp11 + tmp10, CONST_BITS-PASS1_BITS-1);
 8010868:	697a      	ldr	r2, [r7, #20]
 801086a:	69bb      	ldr	r3, [r7, #24]
 801086c:	4413      	add	r3, r2
 801086e:	f503 7200 	add.w	r2, r3, #512	@ 0x200
 8010872:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8010874:	3308      	adds	r3, #8
 8010876:	1292      	asrs	r2, r2, #10
 8010878:	601a      	str	r2, [r3, #0]
    dataptr[4] = (DCTELEM) DESCALE(tmp11 - tmp10, CONST_BITS-PASS1_BITS-1);
 801087a:	697a      	ldr	r2, [r7, #20]
 801087c:	69bb      	ldr	r3, [r7, #24]
 801087e:	1ad3      	subs	r3, r2, r3
 8010880:	f503 7200 	add.w	r2, r3, #512	@ 0x200
 8010884:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8010886:	3310      	adds	r3, #16
 8010888:	1292      	asrs	r2, r2, #10
 801088a:	601a      	str	r2, [r3, #0]

    /* Odd part */

    tmp10 = MULTIPLY(tmp0 + tmp1, FIX(0.831253876));    /* c3 */
 801088c:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 801088e:	6a3b      	ldr	r3, [r7, #32]
 8010890:	4413      	add	r3, r2
 8010892:	f641 229a 	movw	r2, #6810	@ 0x1a9a
 8010896:	fb02 f303 	mul.w	r3, r2, r3
 801089a:	61bb      	str	r3, [r7, #24]

    dataptr[1] = (DCTELEM)
      DESCALE(tmp10 + MULTIPLY(tmp0, FIX(0.513743148)), /* c1-c3 */
 801089c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801089e:	f241 0271 	movw	r2, #4209	@ 0x1071
 80108a2:	fb03 f202 	mul.w	r2, r3, r2
 80108a6:	69bb      	ldr	r3, [r7, #24]
 80108a8:	4413      	add	r3, r2
 80108aa:	f503 7200 	add.w	r2, r3, #512	@ 0x200
    dataptr[1] = (DCTELEM)
 80108ae:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80108b0:	3304      	adds	r3, #4
      DESCALE(tmp10 + MULTIPLY(tmp0, FIX(0.513743148)), /* c1-c3 */
 80108b2:	1292      	asrs	r2, r2, #10
    dataptr[1] = (DCTELEM)
 80108b4:	601a      	str	r2, [r3, #0]
	      CONST_BITS-PASS1_BITS-1);
    dataptr[3] = (DCTELEM)
      DESCALE(tmp10 - MULTIPLY(tmp1, FIX(2.176250899)), /* c1+c3 */
 80108b6:	6a3b      	ldr	r3, [r7, #32]
 80108b8:	4a51      	ldr	r2, [pc, #324]	@ (8010a00 <jpeg_fdct_5x5+0x258>)
 80108ba:	fb03 f202 	mul.w	r2, r3, r2
 80108be:	69bb      	ldr	r3, [r7, #24]
 80108c0:	4413      	add	r3, r2
 80108c2:	f503 7200 	add.w	r2, r3, #512	@ 0x200
    dataptr[3] = (DCTELEM)
 80108c6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80108c8:	330c      	adds	r3, #12
      DESCALE(tmp10 - MULTIPLY(tmp1, FIX(2.176250899)), /* c1+c3 */
 80108ca:	1292      	asrs	r2, r2, #10
    dataptr[3] = (DCTELEM)
 80108cc:	601a      	str	r2, [r3, #0]
	      CONST_BITS-PASS1_BITS-1);

    dataptr += DCTSIZE;		/* advance pointer to next row */
 80108ce:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80108d0:	3320      	adds	r3, #32
 80108d2:	62fb      	str	r3, [r7, #44]	@ 0x2c
  for (ctr = 0; ctr < 5; ctr++) {
 80108d4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80108d6:	3301      	adds	r3, #1
 80108d8:	62bb      	str	r3, [r7, #40]	@ 0x28
 80108da:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80108dc:	2b04      	cmp	r3, #4
 80108de:	f77f af74 	ble.w	80107ca <jpeg_fdct_5x5+0x22>
   * We must also scale the output by (8/5)**2 = 64/25, which we partially
   * fold into the constant multipliers (other part was done in pass 1):
   * cK now represents sqrt(2) * cos(K*pi/10) * 32/25.
   */

  dataptr = data;
 80108e2:	68fb      	ldr	r3, [r7, #12]
 80108e4:	62fb      	str	r3, [r7, #44]	@ 0x2c
  for (ctr = 0; ctr < 5; ctr++) {
 80108e6:	2300      	movs	r3, #0
 80108e8:	62bb      	str	r3, [r7, #40]	@ 0x28
 80108ea:	e07f      	b.n	80109ec <jpeg_fdct_5x5+0x244>
    /* Even part */

    tmp0 = dataptr[DCTSIZE*0] + dataptr[DCTSIZE*4];
 80108ec:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80108ee:	681a      	ldr	r2, [r3, #0]
 80108f0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80108f2:	3380      	adds	r3, #128	@ 0x80
 80108f4:	681b      	ldr	r3, [r3, #0]
 80108f6:	4413      	add	r3, r2
 80108f8:	627b      	str	r3, [r7, #36]	@ 0x24
    tmp1 = dataptr[DCTSIZE*1] + dataptr[DCTSIZE*3];
 80108fa:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80108fc:	3320      	adds	r3, #32
 80108fe:	681a      	ldr	r2, [r3, #0]
 8010900:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8010902:	3360      	adds	r3, #96	@ 0x60
 8010904:	681b      	ldr	r3, [r3, #0]
 8010906:	4413      	add	r3, r2
 8010908:	623b      	str	r3, [r7, #32]
    tmp2 = dataptr[DCTSIZE*2];
 801090a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801090c:	3340      	adds	r3, #64	@ 0x40
 801090e:	681b      	ldr	r3, [r3, #0]
 8010910:	61fb      	str	r3, [r7, #28]

    tmp10 = tmp0 + tmp1;
 8010912:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8010914:	6a3b      	ldr	r3, [r7, #32]
 8010916:	4413      	add	r3, r2
 8010918:	61bb      	str	r3, [r7, #24]
    tmp11 = tmp0 - tmp1;
 801091a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 801091c:	6a3b      	ldr	r3, [r7, #32]
 801091e:	1ad3      	subs	r3, r2, r3
 8010920:	617b      	str	r3, [r7, #20]

    tmp0 = dataptr[DCTSIZE*0] - dataptr[DCTSIZE*4];
 8010922:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8010924:	681a      	ldr	r2, [r3, #0]
 8010926:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8010928:	3380      	adds	r3, #128	@ 0x80
 801092a:	681b      	ldr	r3, [r3, #0]
 801092c:	1ad3      	subs	r3, r2, r3
 801092e:	627b      	str	r3, [r7, #36]	@ 0x24
    tmp1 = dataptr[DCTSIZE*1] - dataptr[DCTSIZE*3];
 8010930:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8010932:	3320      	adds	r3, #32
 8010934:	681a      	ldr	r2, [r3, #0]
 8010936:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8010938:	3360      	adds	r3, #96	@ 0x60
 801093a:	681b      	ldr	r3, [r3, #0]
 801093c:	1ad3      	subs	r3, r2, r3
 801093e:	623b      	str	r3, [r7, #32]

    dataptr[DCTSIZE*0] = (DCTELEM)
      DESCALE(MULTIPLY(tmp10 + tmp2, FIX(1.28)),        /* 32/25 */
 8010940:	69ba      	ldr	r2, [r7, #24]
 8010942:	69fb      	ldr	r3, [r7, #28]
 8010944:	4413      	add	r3, r2
 8010946:	f642 02f6 	movw	r2, #10486	@ 0x28f6
 801094a:	fb02 f303 	mul.w	r3, r2, r3
 801094e:	f503 4380 	add.w	r3, r3, #16384	@ 0x4000
 8010952:	13da      	asrs	r2, r3, #15
    dataptr[DCTSIZE*0] = (DCTELEM)
 8010954:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8010956:	601a      	str	r2, [r3, #0]
	      CONST_BITS+PASS1_BITS);
    tmp11 = MULTIPLY(tmp11, FIX(1.011928851));          /* (c2+c4)/2 */
 8010958:	697b      	ldr	r3, [r7, #20]
 801095a:	f242 0262 	movw	r2, #8290	@ 0x2062
 801095e:	fb02 f303 	mul.w	r3, r2, r3
 8010962:	617b      	str	r3, [r7, #20]
    tmp10 -= tmp2 << 2;
 8010964:	69fb      	ldr	r3, [r7, #28]
 8010966:	009b      	lsls	r3, r3, #2
 8010968:	69ba      	ldr	r2, [r7, #24]
 801096a:	1ad3      	subs	r3, r2, r3
 801096c:	61bb      	str	r3, [r7, #24]
    tmp10 = MULTIPLY(tmp10, FIX(0.452548340));          /* (c2-c4)/2 */
 801096e:	69bb      	ldr	r3, [r7, #24]
 8010970:	f640 627b 	movw	r2, #3707	@ 0xe7b
 8010974:	fb02 f303 	mul.w	r3, r2, r3
 8010978:	61bb      	str	r3, [r7, #24]
    dataptr[DCTSIZE*2] = (DCTELEM) DESCALE(tmp11 + tmp10, CONST_BITS+PASS1_BITS);
 801097a:	697a      	ldr	r2, [r7, #20]
 801097c:	69bb      	ldr	r3, [r7, #24]
 801097e:	4413      	add	r3, r2
 8010980:	f503 4280 	add.w	r2, r3, #16384	@ 0x4000
 8010984:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8010986:	3340      	adds	r3, #64	@ 0x40
 8010988:	13d2      	asrs	r2, r2, #15
 801098a:	601a      	str	r2, [r3, #0]
    dataptr[DCTSIZE*4] = (DCTELEM) DESCALE(tmp11 - tmp10, CONST_BITS+PASS1_BITS);
 801098c:	697a      	ldr	r2, [r7, #20]
 801098e:	69bb      	ldr	r3, [r7, #24]
 8010990:	1ad3      	subs	r3, r2, r3
 8010992:	f503 4280 	add.w	r2, r3, #16384	@ 0x4000
 8010996:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8010998:	3380      	adds	r3, #128	@ 0x80
 801099a:	13d2      	asrs	r2, r2, #15
 801099c:	601a      	str	r2, [r3, #0]

    /* Odd part */

    tmp10 = MULTIPLY(tmp0 + tmp1, FIX(1.064004961));    /* c3 */
 801099e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80109a0:	6a3b      	ldr	r3, [r7, #32]
 80109a2:	4413      	add	r3, r2
 80109a4:	f242 220c 	movw	r2, #8716	@ 0x220c
 80109a8:	fb02 f303 	mul.w	r3, r2, r3
 80109ac:	61bb      	str	r3, [r7, #24]

    dataptr[DCTSIZE*1] = (DCTELEM)
      DESCALE(tmp10 + MULTIPLY(tmp0, FIX(0.657591230)), /* c1-c3 */
 80109ae:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80109b0:	f241 520b 	movw	r2, #5387	@ 0x150b
 80109b4:	fb03 f202 	mul.w	r2, r3, r2
 80109b8:	69bb      	ldr	r3, [r7, #24]
 80109ba:	4413      	add	r3, r2
 80109bc:	f503 4280 	add.w	r2, r3, #16384	@ 0x4000
    dataptr[DCTSIZE*1] = (DCTELEM)
 80109c0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80109c2:	3320      	adds	r3, #32
      DESCALE(tmp10 + MULTIPLY(tmp0, FIX(0.657591230)), /* c1-c3 */
 80109c4:	13d2      	asrs	r2, r2, #15
    dataptr[DCTSIZE*1] = (DCTELEM)
 80109c6:	601a      	str	r2, [r3, #0]
	      CONST_BITS+PASS1_BITS);
    dataptr[DCTSIZE*3] = (DCTELEM)
      DESCALE(tmp10 - MULTIPLY(tmp1, FIX(2.785601151)), /* c1+c3 */
 80109c8:	6a3b      	ldr	r3, [r7, #32]
 80109ca:	4a0e      	ldr	r2, [pc, #56]	@ (8010a04 <jpeg_fdct_5x5+0x25c>)
 80109cc:	fb03 f202 	mul.w	r2, r3, r2
 80109d0:	69bb      	ldr	r3, [r7, #24]
 80109d2:	4413      	add	r3, r2
 80109d4:	f503 4280 	add.w	r2, r3, #16384	@ 0x4000
    dataptr[DCTSIZE*3] = (DCTELEM)
 80109d8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80109da:	3360      	adds	r3, #96	@ 0x60
      DESCALE(tmp10 - MULTIPLY(tmp1, FIX(2.785601151)), /* c1+c3 */
 80109dc:	13d2      	asrs	r2, r2, #15
    dataptr[DCTSIZE*3] = (DCTELEM)
 80109de:	601a      	str	r2, [r3, #0]
	      CONST_BITS+PASS1_BITS);

    dataptr++;			/* advance pointer to next column */
 80109e0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80109e2:	3304      	adds	r3, #4
 80109e4:	62fb      	str	r3, [r7, #44]	@ 0x2c
  for (ctr = 0; ctr < 5; ctr++) {
 80109e6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80109e8:	3301      	adds	r3, #1
 80109ea:	62bb      	str	r3, [r7, #40]	@ 0x28
 80109ec:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80109ee:	2b04      	cmp	r3, #4
 80109f0:	f77f af7c 	ble.w	80108ec <jpeg_fdct_5x5+0x144>
  }
}
 80109f4:	bf00      	nop
 80109f6:	bf00      	nop
 80109f8:	3730      	adds	r7, #48	@ 0x30
 80109fa:	46bd      	mov	sp, r7
 80109fc:	bd80      	pop	{r7, pc}
 80109fe:	bf00      	nop
 8010a00:	ffffba5c 	.word	0xffffba5c
 8010a04:	ffffa6dc 	.word	0xffffa6dc

08010a08 <jpeg_fdct_4x4>:
 * Perform the forward DCT on a 4x4 sample block.
 */

GLOBAL(void)
jpeg_fdct_4x4 (DCTELEM * data, JSAMPARRAY sample_data, JDIMENSION start_col)
{
 8010a08:	b580      	push	{r7, lr}
 8010a0a:	b08c      	sub	sp, #48	@ 0x30
 8010a0c:	af00      	add	r7, sp, #0
 8010a0e:	60f8      	str	r0, [r7, #12]
 8010a10:	60b9      	str	r1, [r7, #8]
 8010a12:	607a      	str	r2, [r7, #4]
  JSAMPROW elemptr;
  int ctr;
  SHIFT_TEMPS

  /* Pre-zero output coefficient block. */
  MEMZERO(data, SIZEOF(DCTELEM) * DCTSIZE2);
 8010a14:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8010a18:	2100      	movs	r1, #0
 8010a1a:	68f8      	ldr	r0, [r7, #12]
 8010a1c:	f008 ffe8 	bl	80199f0 <memset>
  /* Note results are scaled up by sqrt(8) compared to a true DCT; */
  /* furthermore, we scale the results by 2**PASS1_BITS. */
  /* We must also scale the output by (8/4)**2 = 2**2, which we add here. */
  /* cK represents sqrt(2) * cos(K*pi/16) [refers to 8-point FDCT]. */

  dataptr = data;
 8010a20:	68fb      	ldr	r3, [r7, #12]
 8010a22:	62fb      	str	r3, [r7, #44]	@ 0x2c
  for (ctr = 0; ctr < 4; ctr++) {
 8010a24:	2300      	movs	r3, #0
 8010a26:	62bb      	str	r3, [r7, #40]	@ 0x28
 8010a28:	e05f      	b.n	8010aea <jpeg_fdct_4x4+0xe2>
    elemptr = sample_data[ctr] + start_col;
 8010a2a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8010a2c:	009b      	lsls	r3, r3, #2
 8010a2e:	68ba      	ldr	r2, [r7, #8]
 8010a30:	4413      	add	r3, r2
 8010a32:	681a      	ldr	r2, [r3, #0]
 8010a34:	687b      	ldr	r3, [r7, #4]
 8010a36:	4413      	add	r3, r2
 8010a38:	617b      	str	r3, [r7, #20]

    /* Even part */

    tmp0 = GETJSAMPLE(elemptr[0]) + GETJSAMPLE(elemptr[3]);
 8010a3a:	697b      	ldr	r3, [r7, #20]
 8010a3c:	781b      	ldrb	r3, [r3, #0]
 8010a3e:	461a      	mov	r2, r3
 8010a40:	697b      	ldr	r3, [r7, #20]
 8010a42:	3303      	adds	r3, #3
 8010a44:	781b      	ldrb	r3, [r3, #0]
 8010a46:	4413      	add	r3, r2
 8010a48:	627b      	str	r3, [r7, #36]	@ 0x24
    tmp1 = GETJSAMPLE(elemptr[1]) + GETJSAMPLE(elemptr[2]);
 8010a4a:	697b      	ldr	r3, [r7, #20]
 8010a4c:	3301      	adds	r3, #1
 8010a4e:	781b      	ldrb	r3, [r3, #0]
 8010a50:	461a      	mov	r2, r3
 8010a52:	697b      	ldr	r3, [r7, #20]
 8010a54:	3302      	adds	r3, #2
 8010a56:	781b      	ldrb	r3, [r3, #0]
 8010a58:	4413      	add	r3, r2
 8010a5a:	623b      	str	r3, [r7, #32]

    tmp10 = GETJSAMPLE(elemptr[0]) - GETJSAMPLE(elemptr[3]);
 8010a5c:	697b      	ldr	r3, [r7, #20]
 8010a5e:	781b      	ldrb	r3, [r3, #0]
 8010a60:	461a      	mov	r2, r3
 8010a62:	697b      	ldr	r3, [r7, #20]
 8010a64:	3303      	adds	r3, #3
 8010a66:	781b      	ldrb	r3, [r3, #0]
 8010a68:	1ad3      	subs	r3, r2, r3
 8010a6a:	61fb      	str	r3, [r7, #28]
    tmp11 = GETJSAMPLE(elemptr[1]) - GETJSAMPLE(elemptr[2]);
 8010a6c:	697b      	ldr	r3, [r7, #20]
 8010a6e:	3301      	adds	r3, #1
 8010a70:	781b      	ldrb	r3, [r3, #0]
 8010a72:	461a      	mov	r2, r3
 8010a74:	697b      	ldr	r3, [r7, #20]
 8010a76:	3302      	adds	r3, #2
 8010a78:	781b      	ldrb	r3, [r3, #0]
 8010a7a:	1ad3      	subs	r3, r2, r3
 8010a7c:	61bb      	str	r3, [r7, #24]

    /* Apply unsigned->signed conversion */
    dataptr[0] = (DCTELEM)
      ((tmp0 + tmp1 - 4 * CENTERJSAMPLE) << (PASS1_BITS+2));
 8010a7e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8010a80:	6a3b      	ldr	r3, [r7, #32]
 8010a82:	4413      	add	r3, r2
 8010a84:	f5a3 7300 	sub.w	r3, r3, #512	@ 0x200
 8010a88:	011a      	lsls	r2, r3, #4
    dataptr[0] = (DCTELEM)
 8010a8a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8010a8c:	601a      	str	r2, [r3, #0]
    dataptr[2] = (DCTELEM) ((tmp0 - tmp1) << (PASS1_BITS+2));
 8010a8e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8010a90:	6a3b      	ldr	r3, [r7, #32]
 8010a92:	1ad2      	subs	r2, r2, r3
 8010a94:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8010a96:	3308      	adds	r3, #8
 8010a98:	0112      	lsls	r2, r2, #4
 8010a9a:	601a      	str	r2, [r3, #0]

    /* Odd part */

    tmp0 = MULTIPLY(tmp10 + tmp11, FIX_0_541196100);       /* c6 */
 8010a9c:	69fa      	ldr	r2, [r7, #28]
 8010a9e:	69bb      	ldr	r3, [r7, #24]
 8010aa0:	4413      	add	r3, r2
 8010aa2:	f241 1251 	movw	r2, #4433	@ 0x1151
 8010aa6:	fb02 f303 	mul.w	r3, r2, r3
 8010aaa:	627b      	str	r3, [r7, #36]	@ 0x24
    /* Add fudge factor here for final descale. */
    tmp0 += ONE << (CONST_BITS-PASS1_BITS-3);
 8010aac:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8010aae:	f503 7380 	add.w	r3, r3, #256	@ 0x100
 8010ab2:	627b      	str	r3, [r7, #36]	@ 0x24

    dataptr[1] = (DCTELEM)
      RIGHT_SHIFT(tmp0 + MULTIPLY(tmp10, FIX_0_765366865), /* c2-c6 */
 8010ab4:	69fb      	ldr	r3, [r7, #28]
 8010ab6:	f641 027e 	movw	r2, #6270	@ 0x187e
 8010aba:	fb03 f202 	mul.w	r2, r3, r2
 8010abe:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8010ac0:	441a      	add	r2, r3
    dataptr[1] = (DCTELEM)
 8010ac2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8010ac4:	3304      	adds	r3, #4
      RIGHT_SHIFT(tmp0 + MULTIPLY(tmp10, FIX_0_765366865), /* c2-c6 */
 8010ac6:	1252      	asrs	r2, r2, #9
    dataptr[1] = (DCTELEM)
 8010ac8:	601a      	str	r2, [r3, #0]
		  CONST_BITS-PASS1_BITS-2);
    dataptr[3] = (DCTELEM)
      RIGHT_SHIFT(tmp0 - MULTIPLY(tmp11, FIX_1_847759065), /* c2+c6 */
 8010aca:	69bb      	ldr	r3, [r7, #24]
 8010acc:	4a38      	ldr	r2, [pc, #224]	@ (8010bb0 <jpeg_fdct_4x4+0x1a8>)
 8010ace:	fb03 f202 	mul.w	r2, r3, r2
 8010ad2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8010ad4:	441a      	add	r2, r3
    dataptr[3] = (DCTELEM)
 8010ad6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8010ad8:	330c      	adds	r3, #12
      RIGHT_SHIFT(tmp0 - MULTIPLY(tmp11, FIX_1_847759065), /* c2+c6 */
 8010ada:	1252      	asrs	r2, r2, #9
    dataptr[3] = (DCTELEM)
 8010adc:	601a      	str	r2, [r3, #0]
		  CONST_BITS-PASS1_BITS-2);

    dataptr += DCTSIZE;		/* advance pointer to next row */
 8010ade:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8010ae0:	3320      	adds	r3, #32
 8010ae2:	62fb      	str	r3, [r7, #44]	@ 0x2c
  for (ctr = 0; ctr < 4; ctr++) {
 8010ae4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8010ae6:	3301      	adds	r3, #1
 8010ae8:	62bb      	str	r3, [r7, #40]	@ 0x28
 8010aea:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8010aec:	2b03      	cmp	r3, #3
 8010aee:	dd9c      	ble.n	8010a2a <jpeg_fdct_4x4+0x22>
  /* Pass 2: process columns.
   * We remove the PASS1_BITS scaling, but leave the results scaled up
   * by an overall factor of 8.
   */

  dataptr = data;
 8010af0:	68fb      	ldr	r3, [r7, #12]
 8010af2:	62fb      	str	r3, [r7, #44]	@ 0x2c
  for (ctr = 0; ctr < 4; ctr++) {
 8010af4:	2300      	movs	r3, #0
 8010af6:	62bb      	str	r3, [r7, #40]	@ 0x28
 8010af8:	e052      	b.n	8010ba0 <jpeg_fdct_4x4+0x198>
    /* Even part */

    /* Add fudge factor here for final descale. */
    tmp0 = dataptr[DCTSIZE*0] + dataptr[DCTSIZE*3] + (ONE << (PASS1_BITS-1));
 8010afa:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8010afc:	681a      	ldr	r2, [r3, #0]
 8010afe:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8010b00:	3360      	adds	r3, #96	@ 0x60
 8010b02:	681b      	ldr	r3, [r3, #0]
 8010b04:	4413      	add	r3, r2
 8010b06:	3302      	adds	r3, #2
 8010b08:	627b      	str	r3, [r7, #36]	@ 0x24
    tmp1 = dataptr[DCTSIZE*1] + dataptr[DCTSIZE*2];
 8010b0a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8010b0c:	3320      	adds	r3, #32
 8010b0e:	681a      	ldr	r2, [r3, #0]
 8010b10:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8010b12:	3340      	adds	r3, #64	@ 0x40
 8010b14:	681b      	ldr	r3, [r3, #0]
 8010b16:	4413      	add	r3, r2
 8010b18:	623b      	str	r3, [r7, #32]

    tmp10 = dataptr[DCTSIZE*0] - dataptr[DCTSIZE*3];
 8010b1a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8010b1c:	681a      	ldr	r2, [r3, #0]
 8010b1e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8010b20:	3360      	adds	r3, #96	@ 0x60
 8010b22:	681b      	ldr	r3, [r3, #0]
 8010b24:	1ad3      	subs	r3, r2, r3
 8010b26:	61fb      	str	r3, [r7, #28]
    tmp11 = dataptr[DCTSIZE*1] - dataptr[DCTSIZE*2];
 8010b28:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8010b2a:	3320      	adds	r3, #32
 8010b2c:	681a      	ldr	r2, [r3, #0]
 8010b2e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8010b30:	3340      	adds	r3, #64	@ 0x40
 8010b32:	681b      	ldr	r3, [r3, #0]
 8010b34:	1ad3      	subs	r3, r2, r3
 8010b36:	61bb      	str	r3, [r7, #24]

    dataptr[DCTSIZE*0] = (DCTELEM) RIGHT_SHIFT(tmp0 + tmp1, PASS1_BITS);
 8010b38:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8010b3a:	6a3b      	ldr	r3, [r7, #32]
 8010b3c:	4413      	add	r3, r2
 8010b3e:	109a      	asrs	r2, r3, #2
 8010b40:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8010b42:	601a      	str	r2, [r3, #0]
    dataptr[DCTSIZE*2] = (DCTELEM) RIGHT_SHIFT(tmp0 - tmp1, PASS1_BITS);
 8010b44:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8010b46:	6a3b      	ldr	r3, [r7, #32]
 8010b48:	1ad2      	subs	r2, r2, r3
 8010b4a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8010b4c:	3340      	adds	r3, #64	@ 0x40
 8010b4e:	1092      	asrs	r2, r2, #2
 8010b50:	601a      	str	r2, [r3, #0]

    /* Odd part */

    tmp0 = MULTIPLY(tmp10 + tmp11, FIX_0_541196100);       /* c6 */
 8010b52:	69fa      	ldr	r2, [r7, #28]
 8010b54:	69bb      	ldr	r3, [r7, #24]
 8010b56:	4413      	add	r3, r2
 8010b58:	f241 1251 	movw	r2, #4433	@ 0x1151
 8010b5c:	fb02 f303 	mul.w	r3, r2, r3
 8010b60:	627b      	str	r3, [r7, #36]	@ 0x24
    /* Add fudge factor here for final descale. */
    tmp0 += ONE << (CONST_BITS+PASS1_BITS-1);
 8010b62:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8010b64:	f503 4380 	add.w	r3, r3, #16384	@ 0x4000
 8010b68:	627b      	str	r3, [r7, #36]	@ 0x24

    dataptr[DCTSIZE*1] = (DCTELEM)
      RIGHT_SHIFT(tmp0 + MULTIPLY(tmp10, FIX_0_765366865), /* c2-c6 */
 8010b6a:	69fb      	ldr	r3, [r7, #28]
 8010b6c:	f641 027e 	movw	r2, #6270	@ 0x187e
 8010b70:	fb03 f202 	mul.w	r2, r3, r2
 8010b74:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8010b76:	441a      	add	r2, r3
    dataptr[DCTSIZE*1] = (DCTELEM)
 8010b78:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8010b7a:	3320      	adds	r3, #32
      RIGHT_SHIFT(tmp0 + MULTIPLY(tmp10, FIX_0_765366865), /* c2-c6 */
 8010b7c:	13d2      	asrs	r2, r2, #15
    dataptr[DCTSIZE*1] = (DCTELEM)
 8010b7e:	601a      	str	r2, [r3, #0]
		  CONST_BITS+PASS1_BITS);
    dataptr[DCTSIZE*3] = (DCTELEM)
      RIGHT_SHIFT(tmp0 - MULTIPLY(tmp11, FIX_1_847759065), /* c2+c6 */
 8010b80:	69bb      	ldr	r3, [r7, #24]
 8010b82:	4a0b      	ldr	r2, [pc, #44]	@ (8010bb0 <jpeg_fdct_4x4+0x1a8>)
 8010b84:	fb03 f202 	mul.w	r2, r3, r2
 8010b88:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8010b8a:	441a      	add	r2, r3
    dataptr[DCTSIZE*3] = (DCTELEM)
 8010b8c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8010b8e:	3360      	adds	r3, #96	@ 0x60
      RIGHT_SHIFT(tmp0 - MULTIPLY(tmp11, FIX_1_847759065), /* c2+c6 */
 8010b90:	13d2      	asrs	r2, r2, #15
    dataptr[DCTSIZE*3] = (DCTELEM)
 8010b92:	601a      	str	r2, [r3, #0]
		  CONST_BITS+PASS1_BITS);

    dataptr++;			/* advance pointer to next column */
 8010b94:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8010b96:	3304      	adds	r3, #4
 8010b98:	62fb      	str	r3, [r7, #44]	@ 0x2c
  for (ctr = 0; ctr < 4; ctr++) {
 8010b9a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8010b9c:	3301      	adds	r3, #1
 8010b9e:	62bb      	str	r3, [r7, #40]	@ 0x28
 8010ba0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8010ba2:	2b03      	cmp	r3, #3
 8010ba4:	dda9      	ble.n	8010afa <jpeg_fdct_4x4+0xf2>
  }
}
 8010ba6:	bf00      	nop
 8010ba8:	bf00      	nop
 8010baa:	3730      	adds	r7, #48	@ 0x30
 8010bac:	46bd      	mov	sp, r7
 8010bae:	bd80      	pop	{r7, pc}
 8010bb0:	ffffc4df 	.word	0xffffc4df

08010bb4 <jpeg_fdct_3x3>:
 * Perform the forward DCT on a 3x3 sample block.
 */

GLOBAL(void)
jpeg_fdct_3x3 (DCTELEM * data, JSAMPARRAY sample_data, JDIMENSION start_col)
{
 8010bb4:	b580      	push	{r7, lr}
 8010bb6:	b08a      	sub	sp, #40	@ 0x28
 8010bb8:	af00      	add	r7, sp, #0
 8010bba:	60f8      	str	r0, [r7, #12]
 8010bbc:	60b9      	str	r1, [r7, #8]
 8010bbe:	607a      	str	r2, [r7, #4]
  JSAMPROW elemptr;
  int ctr;
  SHIFT_TEMPS

  /* Pre-zero output coefficient block. */
  MEMZERO(data, SIZEOF(DCTELEM) * DCTSIZE2);
 8010bc0:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8010bc4:	2100      	movs	r1, #0
 8010bc6:	68f8      	ldr	r0, [r7, #12]
 8010bc8:	f008 ff12 	bl	80199f0 <memset>
  /* furthermore, we scale the results by 2**PASS1_BITS. */
  /* We scale the results further by 2**2 as part of output adaption */
  /* scaling for different DCT size. */
  /* cK represents sqrt(2) * cos(K*pi/6). */

  dataptr = data;
 8010bcc:	68fb      	ldr	r3, [r7, #12]
 8010bce:	627b      	str	r3, [r7, #36]	@ 0x24
  for (ctr = 0; ctr < 3; ctr++) {
 8010bd0:	2300      	movs	r3, #0
 8010bd2:	623b      	str	r3, [r7, #32]
 8010bd4:	e043      	b.n	8010c5e <jpeg_fdct_3x3+0xaa>
    elemptr = sample_data[ctr] + start_col;
 8010bd6:	6a3b      	ldr	r3, [r7, #32]
 8010bd8:	009b      	lsls	r3, r3, #2
 8010bda:	68ba      	ldr	r2, [r7, #8]
 8010bdc:	4413      	add	r3, r2
 8010bde:	681a      	ldr	r2, [r3, #0]
 8010be0:	687b      	ldr	r3, [r7, #4]
 8010be2:	4413      	add	r3, r2
 8010be4:	613b      	str	r3, [r7, #16]

    /* Even part */

    tmp0 = GETJSAMPLE(elemptr[0]) + GETJSAMPLE(elemptr[2]);
 8010be6:	693b      	ldr	r3, [r7, #16]
 8010be8:	781b      	ldrb	r3, [r3, #0]
 8010bea:	461a      	mov	r2, r3
 8010bec:	693b      	ldr	r3, [r7, #16]
 8010bee:	3302      	adds	r3, #2
 8010bf0:	781b      	ldrb	r3, [r3, #0]
 8010bf2:	4413      	add	r3, r2
 8010bf4:	61fb      	str	r3, [r7, #28]
    tmp1 = GETJSAMPLE(elemptr[1]);
 8010bf6:	693b      	ldr	r3, [r7, #16]
 8010bf8:	3301      	adds	r3, #1
 8010bfa:	781b      	ldrb	r3, [r3, #0]
 8010bfc:	61bb      	str	r3, [r7, #24]

    tmp2 = GETJSAMPLE(elemptr[0]) - GETJSAMPLE(elemptr[2]);
 8010bfe:	693b      	ldr	r3, [r7, #16]
 8010c00:	781b      	ldrb	r3, [r3, #0]
 8010c02:	461a      	mov	r2, r3
 8010c04:	693b      	ldr	r3, [r7, #16]
 8010c06:	3302      	adds	r3, #2
 8010c08:	781b      	ldrb	r3, [r3, #0]
 8010c0a:	1ad3      	subs	r3, r2, r3
 8010c0c:	617b      	str	r3, [r7, #20]

    /* Apply unsigned->signed conversion */
    dataptr[0] = (DCTELEM)
      ((tmp0 + tmp1 - 3 * CENTERJSAMPLE) << (PASS1_BITS+2));
 8010c0e:	69fa      	ldr	r2, [r7, #28]
 8010c10:	69bb      	ldr	r3, [r7, #24]
 8010c12:	4413      	add	r3, r2
 8010c14:	f5a3 73c0 	sub.w	r3, r3, #384	@ 0x180
 8010c18:	011a      	lsls	r2, r3, #4
    dataptr[0] = (DCTELEM)
 8010c1a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8010c1c:	601a      	str	r2, [r3, #0]
    dataptr[2] = (DCTELEM)
      DESCALE(MULTIPLY(tmp0 - tmp1 - tmp1, FIX(0.707106781)), /* c2 */
 8010c1e:	69fa      	ldr	r2, [r7, #28]
 8010c20:	69bb      	ldr	r3, [r7, #24]
 8010c22:	1ad2      	subs	r2, r2, r3
 8010c24:	69bb      	ldr	r3, [r7, #24]
 8010c26:	1ad3      	subs	r3, r2, r3
 8010c28:	f241 62a1 	movw	r2, #5793	@ 0x16a1
 8010c2c:	fb02 f303 	mul.w	r3, r2, r3
 8010c30:	f503 7280 	add.w	r2, r3, #256	@ 0x100
    dataptr[2] = (DCTELEM)
 8010c34:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8010c36:	3308      	adds	r3, #8
      DESCALE(MULTIPLY(tmp0 - tmp1 - tmp1, FIX(0.707106781)), /* c2 */
 8010c38:	1252      	asrs	r2, r2, #9
    dataptr[2] = (DCTELEM)
 8010c3a:	601a      	str	r2, [r3, #0]
	      CONST_BITS-PASS1_BITS-2);

    /* Odd part */

    dataptr[1] = (DCTELEM)
      DESCALE(MULTIPLY(tmp2, FIX(1.224744871)),               /* c1 */
 8010c3c:	697b      	ldr	r3, [r7, #20]
 8010c3e:	f242 7231 	movw	r2, #10033	@ 0x2731
 8010c42:	fb02 f303 	mul.w	r3, r2, r3
 8010c46:	f503 7280 	add.w	r2, r3, #256	@ 0x100
    dataptr[1] = (DCTELEM)
 8010c4a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8010c4c:	3304      	adds	r3, #4
      DESCALE(MULTIPLY(tmp2, FIX(1.224744871)),               /* c1 */
 8010c4e:	1252      	asrs	r2, r2, #9
    dataptr[1] = (DCTELEM)
 8010c50:	601a      	str	r2, [r3, #0]
	      CONST_BITS-PASS1_BITS-2);

    dataptr += DCTSIZE;		/* advance pointer to next row */
 8010c52:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8010c54:	3320      	adds	r3, #32
 8010c56:	627b      	str	r3, [r7, #36]	@ 0x24
  for (ctr = 0; ctr < 3; ctr++) {
 8010c58:	6a3b      	ldr	r3, [r7, #32]
 8010c5a:	3301      	adds	r3, #1
 8010c5c:	623b      	str	r3, [r7, #32]
 8010c5e:	6a3b      	ldr	r3, [r7, #32]
 8010c60:	2b02      	cmp	r3, #2
 8010c62:	ddb8      	ble.n	8010bd6 <jpeg_fdct_3x3+0x22>
   * We must also scale the output by (8/3)**2 = 64/9, which we partially
   * fold into the constant multipliers (other part was done in pass 1):
   * cK now represents sqrt(2) * cos(K*pi/6) * 16/9.
   */

  dataptr = data;
 8010c64:	68fb      	ldr	r3, [r7, #12]
 8010c66:	627b      	str	r3, [r7, #36]	@ 0x24
  for (ctr = 0; ctr < 3; ctr++) {
 8010c68:	2300      	movs	r3, #0
 8010c6a:	623b      	str	r3, [r7, #32]
 8010c6c:	e03d      	b.n	8010cea <jpeg_fdct_3x3+0x136>
    /* Even part */

    tmp0 = dataptr[DCTSIZE*0] + dataptr[DCTSIZE*2];
 8010c6e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8010c70:	681a      	ldr	r2, [r3, #0]
 8010c72:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8010c74:	3340      	adds	r3, #64	@ 0x40
 8010c76:	681b      	ldr	r3, [r3, #0]
 8010c78:	4413      	add	r3, r2
 8010c7a:	61fb      	str	r3, [r7, #28]
    tmp1 = dataptr[DCTSIZE*1];
 8010c7c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8010c7e:	3320      	adds	r3, #32
 8010c80:	681b      	ldr	r3, [r3, #0]
 8010c82:	61bb      	str	r3, [r7, #24]

    tmp2 = dataptr[DCTSIZE*0] - dataptr[DCTSIZE*2];
 8010c84:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8010c86:	681a      	ldr	r2, [r3, #0]
 8010c88:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8010c8a:	3340      	adds	r3, #64	@ 0x40
 8010c8c:	681b      	ldr	r3, [r3, #0]
 8010c8e:	1ad3      	subs	r3, r2, r3
 8010c90:	617b      	str	r3, [r7, #20]

    dataptr[DCTSIZE*0] = (DCTELEM)
      DESCALE(MULTIPLY(tmp0 + tmp1, FIX(1.777777778)),        /* 16/9 */
 8010c92:	69fa      	ldr	r2, [r7, #28]
 8010c94:	69bb      	ldr	r3, [r7, #24]
 8010c96:	4413      	add	r3, r2
 8010c98:	f643 02e4 	movw	r2, #14564	@ 0x38e4
 8010c9c:	fb02 f303 	mul.w	r3, r2, r3
 8010ca0:	f503 4380 	add.w	r3, r3, #16384	@ 0x4000
 8010ca4:	13da      	asrs	r2, r3, #15
    dataptr[DCTSIZE*0] = (DCTELEM)
 8010ca6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8010ca8:	601a      	str	r2, [r3, #0]
	      CONST_BITS+PASS1_BITS);
    dataptr[DCTSIZE*2] = (DCTELEM)
      DESCALE(MULTIPLY(tmp0 - tmp1 - tmp1, FIX(1.257078722)), /* c2 */
 8010caa:	69fa      	ldr	r2, [r7, #28]
 8010cac:	69bb      	ldr	r3, [r7, #24]
 8010cae:	1ad2      	subs	r2, r2, r3
 8010cb0:	69bb      	ldr	r3, [r7, #24]
 8010cb2:	1ad3      	subs	r3, r2, r3
 8010cb4:	f642 023a 	movw	r2, #10298	@ 0x283a
 8010cb8:	fb02 f303 	mul.w	r3, r2, r3
 8010cbc:	f503 4280 	add.w	r2, r3, #16384	@ 0x4000
    dataptr[DCTSIZE*2] = (DCTELEM)
 8010cc0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8010cc2:	3340      	adds	r3, #64	@ 0x40
      DESCALE(MULTIPLY(tmp0 - tmp1 - tmp1, FIX(1.257078722)), /* c2 */
 8010cc4:	13d2      	asrs	r2, r2, #15
    dataptr[DCTSIZE*2] = (DCTELEM)
 8010cc6:	601a      	str	r2, [r3, #0]
	      CONST_BITS+PASS1_BITS);

    /* Odd part */

    dataptr[DCTSIZE*1] = (DCTELEM)
      DESCALE(MULTIPLY(tmp2, FIX(2.177324216)),               /* c1 */
 8010cc8:	697b      	ldr	r3, [r7, #20]
 8010cca:	f244 52ad 	movw	r2, #17837	@ 0x45ad
 8010cce:	fb02 f303 	mul.w	r3, r2, r3
 8010cd2:	f503 4280 	add.w	r2, r3, #16384	@ 0x4000
    dataptr[DCTSIZE*1] = (DCTELEM)
 8010cd6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8010cd8:	3320      	adds	r3, #32
      DESCALE(MULTIPLY(tmp2, FIX(2.177324216)),               /* c1 */
 8010cda:	13d2      	asrs	r2, r2, #15
    dataptr[DCTSIZE*1] = (DCTELEM)
 8010cdc:	601a      	str	r2, [r3, #0]
	      CONST_BITS+PASS1_BITS);

    dataptr++;			/* advance pointer to next column */
 8010cde:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8010ce0:	3304      	adds	r3, #4
 8010ce2:	627b      	str	r3, [r7, #36]	@ 0x24
  for (ctr = 0; ctr < 3; ctr++) {
 8010ce4:	6a3b      	ldr	r3, [r7, #32]
 8010ce6:	3301      	adds	r3, #1
 8010ce8:	623b      	str	r3, [r7, #32]
 8010cea:	6a3b      	ldr	r3, [r7, #32]
 8010cec:	2b02      	cmp	r3, #2
 8010cee:	ddbe      	ble.n	8010c6e <jpeg_fdct_3x3+0xba>
  }
}
 8010cf0:	bf00      	nop
 8010cf2:	bf00      	nop
 8010cf4:	3728      	adds	r7, #40	@ 0x28
 8010cf6:	46bd      	mov	sp, r7
 8010cf8:	bd80      	pop	{r7, pc}

08010cfa <jpeg_fdct_2x2>:
 * Perform the forward DCT on a 2x2 sample block.
 */

GLOBAL(void)
jpeg_fdct_2x2 (DCTELEM * data, JSAMPARRAY sample_data, JDIMENSION start_col)
{
 8010cfa:	b580      	push	{r7, lr}
 8010cfc:	b08a      	sub	sp, #40	@ 0x28
 8010cfe:	af00      	add	r7, sp, #0
 8010d00:	60f8      	str	r0, [r7, #12]
 8010d02:	60b9      	str	r1, [r7, #8]
 8010d04:	607a      	str	r2, [r7, #4]
  INT32 tmp0, tmp1, tmp2, tmp3;
  JSAMPROW elemptr;

  /* Pre-zero output coefficient block. */
  MEMZERO(data, SIZEOF(DCTELEM) * DCTSIZE2);
 8010d06:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8010d0a:	2100      	movs	r1, #0
 8010d0c:	68f8      	ldr	r0, [r7, #12]
 8010d0e:	f008 fe6f 	bl	80199f0 <memset>

  /* Pass 1: process rows. */
  /* Note results are scaled up by sqrt(8) compared to a true DCT. */

  /* Row 0 */
  elemptr = sample_data[0] + start_col;
 8010d12:	68bb      	ldr	r3, [r7, #8]
 8010d14:	681a      	ldr	r2, [r3, #0]
 8010d16:	687b      	ldr	r3, [r7, #4]
 8010d18:	4413      	add	r3, r2
 8010d1a:	627b      	str	r3, [r7, #36]	@ 0x24

  tmp0 = GETJSAMPLE(elemptr[0]) + GETJSAMPLE(elemptr[1]);
 8010d1c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8010d1e:	781b      	ldrb	r3, [r3, #0]
 8010d20:	461a      	mov	r2, r3
 8010d22:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8010d24:	3301      	adds	r3, #1
 8010d26:	781b      	ldrb	r3, [r3, #0]
 8010d28:	4413      	add	r3, r2
 8010d2a:	623b      	str	r3, [r7, #32]
  tmp1 = GETJSAMPLE(elemptr[0]) - GETJSAMPLE(elemptr[1]);
 8010d2c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8010d2e:	781b      	ldrb	r3, [r3, #0]
 8010d30:	461a      	mov	r2, r3
 8010d32:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8010d34:	3301      	adds	r3, #1
 8010d36:	781b      	ldrb	r3, [r3, #0]
 8010d38:	1ad3      	subs	r3, r2, r3
 8010d3a:	61fb      	str	r3, [r7, #28]

  /* Row 1 */
  elemptr = sample_data[1] + start_col;
 8010d3c:	68bb      	ldr	r3, [r7, #8]
 8010d3e:	3304      	adds	r3, #4
 8010d40:	681a      	ldr	r2, [r3, #0]
 8010d42:	687b      	ldr	r3, [r7, #4]
 8010d44:	4413      	add	r3, r2
 8010d46:	627b      	str	r3, [r7, #36]	@ 0x24

  tmp2 = GETJSAMPLE(elemptr[0]) + GETJSAMPLE(elemptr[1]);
 8010d48:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8010d4a:	781b      	ldrb	r3, [r3, #0]
 8010d4c:	461a      	mov	r2, r3
 8010d4e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8010d50:	3301      	adds	r3, #1
 8010d52:	781b      	ldrb	r3, [r3, #0]
 8010d54:	4413      	add	r3, r2
 8010d56:	61bb      	str	r3, [r7, #24]
  tmp3 = GETJSAMPLE(elemptr[0]) - GETJSAMPLE(elemptr[1]);
 8010d58:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8010d5a:	781b      	ldrb	r3, [r3, #0]
 8010d5c:	461a      	mov	r2, r3
 8010d5e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8010d60:	3301      	adds	r3, #1
 8010d62:	781b      	ldrb	r3, [r3, #0]
 8010d64:	1ad3      	subs	r3, r2, r3
 8010d66:	617b      	str	r3, [r7, #20]
   * We must also scale the output by (8/2)**2 = 2**4.
   */

  /* Column 0 */
  /* Apply unsigned->signed conversion */
  data[DCTSIZE*0] = (DCTELEM) ((tmp0 + tmp2 - 4 * CENTERJSAMPLE) << 4);
 8010d68:	6a3a      	ldr	r2, [r7, #32]
 8010d6a:	69bb      	ldr	r3, [r7, #24]
 8010d6c:	4413      	add	r3, r2
 8010d6e:	f5a3 7300 	sub.w	r3, r3, #512	@ 0x200
 8010d72:	011a      	lsls	r2, r3, #4
 8010d74:	68fb      	ldr	r3, [r7, #12]
 8010d76:	601a      	str	r2, [r3, #0]
  data[DCTSIZE*1] = (DCTELEM) ((tmp0 - tmp2) << 4);
 8010d78:	6a3a      	ldr	r2, [r7, #32]
 8010d7a:	69bb      	ldr	r3, [r7, #24]
 8010d7c:	1ad2      	subs	r2, r2, r3
 8010d7e:	68fb      	ldr	r3, [r7, #12]
 8010d80:	3320      	adds	r3, #32
 8010d82:	0112      	lsls	r2, r2, #4
 8010d84:	601a      	str	r2, [r3, #0]

  /* Column 1 */
  data[DCTSIZE*0+1] = (DCTELEM) ((tmp1 + tmp3) << 4);
 8010d86:	69fa      	ldr	r2, [r7, #28]
 8010d88:	697b      	ldr	r3, [r7, #20]
 8010d8a:	441a      	add	r2, r3
 8010d8c:	68fb      	ldr	r3, [r7, #12]
 8010d8e:	3304      	adds	r3, #4
 8010d90:	0112      	lsls	r2, r2, #4
 8010d92:	601a      	str	r2, [r3, #0]
  data[DCTSIZE*1+1] = (DCTELEM) ((tmp1 - tmp3) << 4);
 8010d94:	69fa      	ldr	r2, [r7, #28]
 8010d96:	697b      	ldr	r3, [r7, #20]
 8010d98:	1ad2      	subs	r2, r2, r3
 8010d9a:	68fb      	ldr	r3, [r7, #12]
 8010d9c:	3324      	adds	r3, #36	@ 0x24
 8010d9e:	0112      	lsls	r2, r2, #4
 8010da0:	601a      	str	r2, [r3, #0]
}
 8010da2:	bf00      	nop
 8010da4:	3728      	adds	r7, #40	@ 0x28
 8010da6:	46bd      	mov	sp, r7
 8010da8:	bd80      	pop	{r7, pc}

08010daa <jpeg_fdct_1x1>:
 * Perform the forward DCT on a 1x1 sample block.
 */

GLOBAL(void)
jpeg_fdct_1x1 (DCTELEM * data, JSAMPARRAY sample_data, JDIMENSION start_col)
{
 8010daa:	b580      	push	{r7, lr}
 8010dac:	b084      	sub	sp, #16
 8010dae:	af00      	add	r7, sp, #0
 8010db0:	60f8      	str	r0, [r7, #12]
 8010db2:	60b9      	str	r1, [r7, #8]
 8010db4:	607a      	str	r2, [r7, #4]
  /* Pre-zero output coefficient block. */
  MEMZERO(data, SIZEOF(DCTELEM) * DCTSIZE2);
 8010db6:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8010dba:	2100      	movs	r1, #0
 8010dbc:	68f8      	ldr	r0, [r7, #12]
 8010dbe:	f008 fe17 	bl	80199f0 <memset>

  /* We leave the result scaled up by an overall factor of 8. */
  /* We must also scale the output by (8/1)**2 = 2**6. */
  /* Apply unsigned->signed conversion */
  data[0] = (DCTELEM)
    ((GETJSAMPLE(sample_data[0][start_col]) - CENTERJSAMPLE) << 6);
 8010dc2:	68bb      	ldr	r3, [r7, #8]
 8010dc4:	681a      	ldr	r2, [r3, #0]
 8010dc6:	687b      	ldr	r3, [r7, #4]
 8010dc8:	4413      	add	r3, r2
 8010dca:	781b      	ldrb	r3, [r3, #0]
 8010dcc:	3b80      	subs	r3, #128	@ 0x80
  data[0] = (DCTELEM)
 8010dce:	019a      	lsls	r2, r3, #6
 8010dd0:	68fb      	ldr	r3, [r7, #12]
 8010dd2:	601a      	str	r2, [r3, #0]
}
 8010dd4:	bf00      	nop
 8010dd6:	3710      	adds	r7, #16
 8010dd8:	46bd      	mov	sp, r7
 8010dda:	bd80      	pop	{r7, pc}

08010ddc <jpeg_fdct_9x9>:
 * Perform the forward DCT on a 9x9 sample block.
 */

GLOBAL(void)
jpeg_fdct_9x9 (DCTELEM * data, JSAMPARRAY sample_data, JDIMENSION start_col)
{
 8010ddc:	b480      	push	{r7}
 8010dde:	b09d      	sub	sp, #116	@ 0x74
 8010de0:	af00      	add	r7, sp, #0
 8010de2:	60f8      	str	r0, [r7, #12]
 8010de4:	60b9      	str	r1, [r7, #8]
 8010de6:	607a      	str	r2, [r7, #4]
  /* Note results are scaled up by sqrt(8) compared to a true DCT; */
  /* we scale the results further by 2 as part of output adaption */
  /* scaling for different DCT size. */
  /* cK represents sqrt(2) * cos(K*pi/18). */

  dataptr = data;
 8010de8:	68fb      	ldr	r3, [r7, #12]
 8010dea:	66fb      	str	r3, [r7, #108]	@ 0x6c
  ctr = 0;
 8010dec:	2300      	movs	r3, #0
 8010dee:	667b      	str	r3, [r7, #100]	@ 0x64
  for (;;) {
    elemptr = sample_data[ctr] + start_col;
 8010df0:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8010df2:	009b      	lsls	r3, r3, #2
 8010df4:	68ba      	ldr	r2, [r7, #8]
 8010df6:	4413      	add	r3, r2
 8010df8:	681a      	ldr	r2, [r3, #0]
 8010dfa:	687b      	ldr	r3, [r7, #4]
 8010dfc:	4413      	add	r3, r2
 8010dfe:	663b      	str	r3, [r7, #96]	@ 0x60

    /* Even part */

    tmp0 = GETJSAMPLE(elemptr[0]) + GETJSAMPLE(elemptr[8]);
 8010e00:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8010e02:	781b      	ldrb	r3, [r3, #0]
 8010e04:	461a      	mov	r2, r3
 8010e06:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8010e08:	3308      	adds	r3, #8
 8010e0a:	781b      	ldrb	r3, [r3, #0]
 8010e0c:	4413      	add	r3, r2
 8010e0e:	65fb      	str	r3, [r7, #92]	@ 0x5c
    tmp1 = GETJSAMPLE(elemptr[1]) + GETJSAMPLE(elemptr[7]);
 8010e10:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8010e12:	3301      	adds	r3, #1
 8010e14:	781b      	ldrb	r3, [r3, #0]
 8010e16:	461a      	mov	r2, r3
 8010e18:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8010e1a:	3307      	adds	r3, #7
 8010e1c:	781b      	ldrb	r3, [r3, #0]
 8010e1e:	4413      	add	r3, r2
 8010e20:	65bb      	str	r3, [r7, #88]	@ 0x58
    tmp2 = GETJSAMPLE(elemptr[2]) + GETJSAMPLE(elemptr[6]);
 8010e22:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8010e24:	3302      	adds	r3, #2
 8010e26:	781b      	ldrb	r3, [r3, #0]
 8010e28:	461a      	mov	r2, r3
 8010e2a:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8010e2c:	3306      	adds	r3, #6
 8010e2e:	781b      	ldrb	r3, [r3, #0]
 8010e30:	4413      	add	r3, r2
 8010e32:	657b      	str	r3, [r7, #84]	@ 0x54
    tmp3 = GETJSAMPLE(elemptr[3]) + GETJSAMPLE(elemptr[5]);
 8010e34:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8010e36:	3303      	adds	r3, #3
 8010e38:	781b      	ldrb	r3, [r3, #0]
 8010e3a:	461a      	mov	r2, r3
 8010e3c:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8010e3e:	3305      	adds	r3, #5
 8010e40:	781b      	ldrb	r3, [r3, #0]
 8010e42:	4413      	add	r3, r2
 8010e44:	653b      	str	r3, [r7, #80]	@ 0x50
    tmp4 = GETJSAMPLE(elemptr[4]);
 8010e46:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8010e48:	3304      	adds	r3, #4
 8010e4a:	781b      	ldrb	r3, [r3, #0]
 8010e4c:	64fb      	str	r3, [r7, #76]	@ 0x4c

    tmp10 = GETJSAMPLE(elemptr[0]) - GETJSAMPLE(elemptr[8]);
 8010e4e:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8010e50:	781b      	ldrb	r3, [r3, #0]
 8010e52:	461a      	mov	r2, r3
 8010e54:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8010e56:	3308      	adds	r3, #8
 8010e58:	781b      	ldrb	r3, [r3, #0]
 8010e5a:	1ad3      	subs	r3, r2, r3
 8010e5c:	64bb      	str	r3, [r7, #72]	@ 0x48
    tmp11 = GETJSAMPLE(elemptr[1]) - GETJSAMPLE(elemptr[7]);
 8010e5e:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8010e60:	3301      	adds	r3, #1
 8010e62:	781b      	ldrb	r3, [r3, #0]
 8010e64:	461a      	mov	r2, r3
 8010e66:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8010e68:	3307      	adds	r3, #7
 8010e6a:	781b      	ldrb	r3, [r3, #0]
 8010e6c:	1ad3      	subs	r3, r2, r3
 8010e6e:	647b      	str	r3, [r7, #68]	@ 0x44
    tmp12 = GETJSAMPLE(elemptr[2]) - GETJSAMPLE(elemptr[6]);
 8010e70:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8010e72:	3302      	adds	r3, #2
 8010e74:	781b      	ldrb	r3, [r3, #0]
 8010e76:	461a      	mov	r2, r3
 8010e78:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8010e7a:	3306      	adds	r3, #6
 8010e7c:	781b      	ldrb	r3, [r3, #0]
 8010e7e:	1ad3      	subs	r3, r2, r3
 8010e80:	643b      	str	r3, [r7, #64]	@ 0x40
    tmp13 = GETJSAMPLE(elemptr[3]) - GETJSAMPLE(elemptr[5]);
 8010e82:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8010e84:	3303      	adds	r3, #3
 8010e86:	781b      	ldrb	r3, [r3, #0]
 8010e88:	461a      	mov	r2, r3
 8010e8a:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8010e8c:	3305      	adds	r3, #5
 8010e8e:	781b      	ldrb	r3, [r3, #0]
 8010e90:	1ad3      	subs	r3, r2, r3
 8010e92:	63fb      	str	r3, [r7, #60]	@ 0x3c

    z1 = tmp0 + tmp2 + tmp3;
 8010e94:	6dfa      	ldr	r2, [r7, #92]	@ 0x5c
 8010e96:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8010e98:	4413      	add	r3, r2
 8010e9a:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 8010e9c:	4413      	add	r3, r2
 8010e9e:	63bb      	str	r3, [r7, #56]	@ 0x38
    z2 = tmp1 + tmp4;
 8010ea0:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8010ea2:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8010ea4:	4413      	add	r3, r2
 8010ea6:	637b      	str	r3, [r7, #52]	@ 0x34
    /* Apply unsigned->signed conversion */
    dataptr[0] = (DCTELEM) ((z1 + z2 - 9 * CENTERJSAMPLE) << 1);
 8010ea8:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8010eaa:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8010eac:	4413      	add	r3, r2
 8010eae:	f5a3 6390 	sub.w	r3, r3, #1152	@ 0x480
 8010eb2:	005a      	lsls	r2, r3, #1
 8010eb4:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8010eb6:	601a      	str	r2, [r3, #0]
    dataptr[6] = (DCTELEM)
      DESCALE(MULTIPLY(z1 - z2 - z2, FIX(0.707106781)),  /* c6 */
 8010eb8:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8010eba:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8010ebc:	1ad2      	subs	r2, r2, r3
 8010ebe:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8010ec0:	1ad3      	subs	r3, r2, r3
 8010ec2:	f241 62a1 	movw	r2, #5793	@ 0x16a1
 8010ec6:	fb02 f303 	mul.w	r3, r2, r3
 8010eca:	f503 6200 	add.w	r2, r3, #2048	@ 0x800
    dataptr[6] = (DCTELEM)
 8010ece:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8010ed0:	3318      	adds	r3, #24
      DESCALE(MULTIPLY(z1 - z2 - z2, FIX(0.707106781)),  /* c6 */
 8010ed2:	1312      	asrs	r2, r2, #12
    dataptr[6] = (DCTELEM)
 8010ed4:	601a      	str	r2, [r3, #0]
	      CONST_BITS-1);
    z1 = MULTIPLY(tmp0 - tmp2, FIX(1.328926049));        /* c2 */
 8010ed6:	6dfa      	ldr	r2, [r7, #92]	@ 0x5c
 8010ed8:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8010eda:	1ad3      	subs	r3, r2, r3
 8010edc:	f642 2287 	movw	r2, #10887	@ 0x2a87
 8010ee0:	fb02 f303 	mul.w	r3, r2, r3
 8010ee4:	63bb      	str	r3, [r7, #56]	@ 0x38
    z2 = MULTIPLY(tmp1 - tmp4 - tmp4, FIX(0.707106781)); /* c6 */
 8010ee6:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8010ee8:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8010eea:	1ad2      	subs	r2, r2, r3
 8010eec:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8010eee:	1ad3      	subs	r3, r2, r3
 8010ef0:	f241 62a1 	movw	r2, #5793	@ 0x16a1
 8010ef4:	fb02 f303 	mul.w	r3, r2, r3
 8010ef8:	637b      	str	r3, [r7, #52]	@ 0x34
    dataptr[2] = (DCTELEM)
      DESCALE(MULTIPLY(tmp2 - tmp3, FIX(1.083350441))    /* c4 */
 8010efa:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 8010efc:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8010efe:	1ad3      	subs	r3, r2, r3
 8010f00:	f242 22ab 	movw	r2, #8875	@ 0x22ab
 8010f04:	fb03 f202 	mul.w	r2, r3, r2
 8010f08:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8010f0a:	441a      	add	r2, r3
 8010f0c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8010f0e:	4413      	add	r3, r2
 8010f10:	f503 6200 	add.w	r2, r3, #2048	@ 0x800
    dataptr[2] = (DCTELEM)
 8010f14:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8010f16:	3308      	adds	r3, #8
      DESCALE(MULTIPLY(tmp2 - tmp3, FIX(1.083350441))    /* c4 */
 8010f18:	1312      	asrs	r2, r2, #12
    dataptr[2] = (DCTELEM)
 8010f1a:	601a      	str	r2, [r3, #0]
	      + z1 + z2, CONST_BITS-1);
    dataptr[4] = (DCTELEM)
      DESCALE(MULTIPLY(tmp3 - tmp0, FIX(0.245575608))    /* c8 */
 8010f1c:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 8010f1e:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8010f20:	1ad3      	subs	r3, r2, r3
 8010f22:	f240 72dc 	movw	r2, #2012	@ 0x7dc
 8010f26:	fb03 f202 	mul.w	r2, r3, r2
 8010f2a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8010f2c:	441a      	add	r2, r3
 8010f2e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8010f30:	1ad3      	subs	r3, r2, r3
 8010f32:	f503 6200 	add.w	r2, r3, #2048	@ 0x800
    dataptr[4] = (DCTELEM)
 8010f36:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8010f38:	3310      	adds	r3, #16
      DESCALE(MULTIPLY(tmp3 - tmp0, FIX(0.245575608))    /* c8 */
 8010f3a:	1312      	asrs	r2, r2, #12
    dataptr[4] = (DCTELEM)
 8010f3c:	601a      	str	r2, [r3, #0]
	      + z1 - z2, CONST_BITS-1);

    /* Odd part */

    dataptr[3] = (DCTELEM)
      DESCALE(MULTIPLY(tmp10 - tmp12 - tmp13, FIX(1.224744871)), /* c3 */
 8010f3e:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8010f40:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8010f42:	1ad2      	subs	r2, r2, r3
 8010f44:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8010f46:	1ad3      	subs	r3, r2, r3
 8010f48:	f242 7231 	movw	r2, #10033	@ 0x2731
 8010f4c:	fb02 f303 	mul.w	r3, r2, r3
 8010f50:	f503 6200 	add.w	r2, r3, #2048	@ 0x800
    dataptr[3] = (DCTELEM)
 8010f54:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8010f56:	330c      	adds	r3, #12
      DESCALE(MULTIPLY(tmp10 - tmp12 - tmp13, FIX(1.224744871)), /* c3 */
 8010f58:	1312      	asrs	r2, r2, #12
    dataptr[3] = (DCTELEM)
 8010f5a:	601a      	str	r2, [r3, #0]
	      CONST_BITS-1);

    tmp11 = MULTIPLY(tmp11, FIX(1.224744871));        /* c3 */
 8010f5c:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8010f5e:	f242 7231 	movw	r2, #10033	@ 0x2731
 8010f62:	fb02 f303 	mul.w	r3, r2, r3
 8010f66:	647b      	str	r3, [r7, #68]	@ 0x44
    tmp0 = MULTIPLY(tmp10 + tmp12, FIX(0.909038955)); /* c5 */
 8010f68:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8010f6a:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8010f6c:	4413      	add	r3, r2
 8010f6e:	f641 5217 	movw	r2, #7447	@ 0x1d17
 8010f72:	fb02 f303 	mul.w	r3, r2, r3
 8010f76:	65fb      	str	r3, [r7, #92]	@ 0x5c
    tmp1 = MULTIPLY(tmp10 + tmp13, FIX(0.483689525)); /* c7 */
 8010f78:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8010f7a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8010f7c:	4413      	add	r3, r2
 8010f7e:	f640 727a 	movw	r2, #3962	@ 0xf7a
 8010f82:	fb02 f303 	mul.w	r3, r2, r3
 8010f86:	65bb      	str	r3, [r7, #88]	@ 0x58

    dataptr[1] = (DCTELEM) DESCALE(tmp11 + tmp0 + tmp1, CONST_BITS-1);
 8010f88:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8010f8a:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8010f8c:	441a      	add	r2, r3
 8010f8e:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8010f90:	4413      	add	r3, r2
 8010f92:	f503 6200 	add.w	r2, r3, #2048	@ 0x800
 8010f96:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8010f98:	3304      	adds	r3, #4
 8010f9a:	1312      	asrs	r2, r2, #12
 8010f9c:	601a      	str	r2, [r3, #0]

    tmp2 = MULTIPLY(tmp12 - tmp13, FIX(1.392728481)); /* c1 */
 8010f9e:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8010fa0:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8010fa2:	1ad3      	subs	r3, r2, r3
 8010fa4:	f642 4291 	movw	r2, #11409	@ 0x2c91
 8010fa8:	fb02 f303 	mul.w	r3, r2, r3
 8010fac:	657b      	str	r3, [r7, #84]	@ 0x54

    dataptr[5] = (DCTELEM) DESCALE(tmp0 - tmp11 - tmp2, CONST_BITS-1);
 8010fae:	6dfa      	ldr	r2, [r7, #92]	@ 0x5c
 8010fb0:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8010fb2:	1ad2      	subs	r2, r2, r3
 8010fb4:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8010fb6:	1ad3      	subs	r3, r2, r3
 8010fb8:	f503 6200 	add.w	r2, r3, #2048	@ 0x800
 8010fbc:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8010fbe:	3314      	adds	r3, #20
 8010fc0:	1312      	asrs	r2, r2, #12
 8010fc2:	601a      	str	r2, [r3, #0]
    dataptr[7] = (DCTELEM) DESCALE(tmp1 - tmp11 + tmp2, CONST_BITS-1);
 8010fc4:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8010fc6:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8010fc8:	1ad2      	subs	r2, r2, r3
 8010fca:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8010fcc:	4413      	add	r3, r2
 8010fce:	f503 6200 	add.w	r2, r3, #2048	@ 0x800
 8010fd2:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8010fd4:	331c      	adds	r3, #28
 8010fd6:	1312      	asrs	r2, r2, #12
 8010fd8:	601a      	str	r2, [r3, #0]

    ctr++;
 8010fda:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8010fdc:	3301      	adds	r3, #1
 8010fde:	667b      	str	r3, [r7, #100]	@ 0x64

    if (ctr != DCTSIZE) {
 8010fe0:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8010fe2:	2b08      	cmp	r3, #8
 8010fe4:	d006      	beq.n	8010ff4 <jpeg_fdct_9x9+0x218>
      if (ctr == 9)
 8010fe6:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8010fe8:	2b09      	cmp	r3, #9
 8010fea:	d007      	beq.n	8010ffc <jpeg_fdct_9x9+0x220>
	break;			/* Done. */
      dataptr += DCTSIZE;	/* advance pointer to next row */
 8010fec:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8010fee:	3320      	adds	r3, #32
 8010ff0:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8010ff2:	e6fd      	b.n	8010df0 <jpeg_fdct_9x9+0x14>
    } else
      dataptr = workspace;	/* switch pointer to extended workspace */
 8010ff4:	f107 0314 	add.w	r3, r7, #20
 8010ff8:	66fb      	str	r3, [r7, #108]	@ 0x6c
    elemptr = sample_data[ctr] + start_col;
 8010ffa:	e6f9      	b.n	8010df0 <jpeg_fdct_9x9+0x14>
	break;			/* Done. */
 8010ffc:	bf00      	nop
   * We must also scale the output by (8/9)**2 = 64/81, which we partially
   * fold into the constant multipliers and final/initial shifting:
   * cK now represents sqrt(2) * cos(K*pi/18) * 128/81.
   */

  dataptr = data;
 8010ffe:	68fb      	ldr	r3, [r7, #12]
 8011000:	66fb      	str	r3, [r7, #108]	@ 0x6c
  wsptr = workspace;
 8011002:	f107 0314 	add.w	r3, r7, #20
 8011006:	66bb      	str	r3, [r7, #104]	@ 0x68
  for (ctr = DCTSIZE-1; ctr >= 0; ctr--) {
 8011008:	2307      	movs	r3, #7
 801100a:	667b      	str	r3, [r7, #100]	@ 0x64
 801100c:	e0ef      	b.n	80111ee <jpeg_fdct_9x9+0x412>
    /* Even part */

    tmp0 = dataptr[DCTSIZE*0] + wsptr[DCTSIZE*0];
 801100e:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8011010:	681a      	ldr	r2, [r3, #0]
 8011012:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8011014:	681b      	ldr	r3, [r3, #0]
 8011016:	4413      	add	r3, r2
 8011018:	65fb      	str	r3, [r7, #92]	@ 0x5c
    tmp1 = dataptr[DCTSIZE*1] + dataptr[DCTSIZE*7];
 801101a:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 801101c:	3320      	adds	r3, #32
 801101e:	681a      	ldr	r2, [r3, #0]
 8011020:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8011022:	33e0      	adds	r3, #224	@ 0xe0
 8011024:	681b      	ldr	r3, [r3, #0]
 8011026:	4413      	add	r3, r2
 8011028:	65bb      	str	r3, [r7, #88]	@ 0x58
    tmp2 = dataptr[DCTSIZE*2] + dataptr[DCTSIZE*6];
 801102a:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 801102c:	3340      	adds	r3, #64	@ 0x40
 801102e:	681a      	ldr	r2, [r3, #0]
 8011030:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8011032:	33c0      	adds	r3, #192	@ 0xc0
 8011034:	681b      	ldr	r3, [r3, #0]
 8011036:	4413      	add	r3, r2
 8011038:	657b      	str	r3, [r7, #84]	@ 0x54
    tmp3 = dataptr[DCTSIZE*3] + dataptr[DCTSIZE*5];
 801103a:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 801103c:	3360      	adds	r3, #96	@ 0x60
 801103e:	681a      	ldr	r2, [r3, #0]
 8011040:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8011042:	33a0      	adds	r3, #160	@ 0xa0
 8011044:	681b      	ldr	r3, [r3, #0]
 8011046:	4413      	add	r3, r2
 8011048:	653b      	str	r3, [r7, #80]	@ 0x50
    tmp4 = dataptr[DCTSIZE*4];
 801104a:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 801104c:	3380      	adds	r3, #128	@ 0x80
 801104e:	681b      	ldr	r3, [r3, #0]
 8011050:	64fb      	str	r3, [r7, #76]	@ 0x4c

    tmp10 = dataptr[DCTSIZE*0] - wsptr[DCTSIZE*0];
 8011052:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8011054:	681a      	ldr	r2, [r3, #0]
 8011056:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8011058:	681b      	ldr	r3, [r3, #0]
 801105a:	1ad3      	subs	r3, r2, r3
 801105c:	64bb      	str	r3, [r7, #72]	@ 0x48
    tmp11 = dataptr[DCTSIZE*1] - dataptr[DCTSIZE*7];
 801105e:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8011060:	3320      	adds	r3, #32
 8011062:	681a      	ldr	r2, [r3, #0]
 8011064:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8011066:	33e0      	adds	r3, #224	@ 0xe0
 8011068:	681b      	ldr	r3, [r3, #0]
 801106a:	1ad3      	subs	r3, r2, r3
 801106c:	647b      	str	r3, [r7, #68]	@ 0x44
    tmp12 = dataptr[DCTSIZE*2] - dataptr[DCTSIZE*6];
 801106e:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8011070:	3340      	adds	r3, #64	@ 0x40
 8011072:	681a      	ldr	r2, [r3, #0]
 8011074:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8011076:	33c0      	adds	r3, #192	@ 0xc0
 8011078:	681b      	ldr	r3, [r3, #0]
 801107a:	1ad3      	subs	r3, r2, r3
 801107c:	643b      	str	r3, [r7, #64]	@ 0x40
    tmp13 = dataptr[DCTSIZE*3] - dataptr[DCTSIZE*5];
 801107e:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8011080:	3360      	adds	r3, #96	@ 0x60
 8011082:	681a      	ldr	r2, [r3, #0]
 8011084:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8011086:	33a0      	adds	r3, #160	@ 0xa0
 8011088:	681b      	ldr	r3, [r3, #0]
 801108a:	1ad3      	subs	r3, r2, r3
 801108c:	63fb      	str	r3, [r7, #60]	@ 0x3c

    z1 = tmp0 + tmp2 + tmp3;
 801108e:	6dfa      	ldr	r2, [r7, #92]	@ 0x5c
 8011090:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8011092:	4413      	add	r3, r2
 8011094:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 8011096:	4413      	add	r3, r2
 8011098:	63bb      	str	r3, [r7, #56]	@ 0x38
    z2 = tmp1 + tmp4;
 801109a:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 801109c:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 801109e:	4413      	add	r3, r2
 80110a0:	637b      	str	r3, [r7, #52]	@ 0x34
    dataptr[DCTSIZE*0] = (DCTELEM)
      DESCALE(MULTIPLY(z1 + z2, FIX(1.580246914)),       /* 128/81 */
 80110a2:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 80110a4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80110a6:	4413      	add	r3, r2
 80110a8:	f243 2291 	movw	r2, #12945	@ 0x3291
 80110ac:	fb02 f303 	mul.w	r3, r2, r3
 80110b0:	f503 4380 	add.w	r3, r3, #16384	@ 0x4000
 80110b4:	13da      	asrs	r2, r3, #15
    dataptr[DCTSIZE*0] = (DCTELEM)
 80110b6:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80110b8:	601a      	str	r2, [r3, #0]
	      CONST_BITS+2);
    dataptr[DCTSIZE*6] = (DCTELEM)
      DESCALE(MULTIPLY(z1 - z2 - z2, FIX(1.117403309)),  /* c6 */
 80110ba:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 80110bc:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80110be:	1ad2      	subs	r2, r2, r3
 80110c0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80110c2:	1ad3      	subs	r3, r2, r3
 80110c4:	f242 32c2 	movw	r2, #9154	@ 0x23c2
 80110c8:	fb02 f303 	mul.w	r3, r2, r3
 80110cc:	f503 4280 	add.w	r2, r3, #16384	@ 0x4000
    dataptr[DCTSIZE*6] = (DCTELEM)
 80110d0:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80110d2:	33c0      	adds	r3, #192	@ 0xc0
      DESCALE(MULTIPLY(z1 - z2 - z2, FIX(1.117403309)),  /* c6 */
 80110d4:	13d2      	asrs	r2, r2, #15
    dataptr[DCTSIZE*6] = (DCTELEM)
 80110d6:	601a      	str	r2, [r3, #0]
	      CONST_BITS+2);
    z1 = MULTIPLY(tmp0 - tmp2, FIX(2.100031287));        /* c2 */
 80110d8:	6dfa      	ldr	r2, [r7, #92]	@ 0x5c
 80110da:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80110dc:	1ad3      	subs	r3, r2, r3
 80110de:	f244 3233 	movw	r2, #17203	@ 0x4333
 80110e2:	fb02 f303 	mul.w	r3, r2, r3
 80110e6:	63bb      	str	r3, [r7, #56]	@ 0x38
    z2 = MULTIPLY(tmp1 - tmp4 - tmp4, FIX(1.117403309)); /* c6 */
 80110e8:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 80110ea:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80110ec:	1ad2      	subs	r2, r2, r3
 80110ee:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80110f0:	1ad3      	subs	r3, r2, r3
 80110f2:	f242 32c2 	movw	r2, #9154	@ 0x23c2
 80110f6:	fb02 f303 	mul.w	r3, r2, r3
 80110fa:	637b      	str	r3, [r7, #52]	@ 0x34
    dataptr[DCTSIZE*2] = (DCTELEM)
      DESCALE(MULTIPLY(tmp2 - tmp3, FIX(1.711961190))    /* c4 */
 80110fc:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 80110fe:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8011100:	1ad3      	subs	r3, r2, r3
 8011102:	f243 62c8 	movw	r2, #14024	@ 0x36c8
 8011106:	fb03 f202 	mul.w	r2, r3, r2
 801110a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801110c:	441a      	add	r2, r3
 801110e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8011110:	4413      	add	r3, r2
 8011112:	f503 4280 	add.w	r2, r3, #16384	@ 0x4000
    dataptr[DCTSIZE*2] = (DCTELEM)
 8011116:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8011118:	3340      	adds	r3, #64	@ 0x40
      DESCALE(MULTIPLY(tmp2 - tmp3, FIX(1.711961190))    /* c4 */
 801111a:	13d2      	asrs	r2, r2, #15
    dataptr[DCTSIZE*2] = (DCTELEM)
 801111c:	601a      	str	r2, [r3, #0]
	      + z1 + z2, CONST_BITS+2);
    dataptr[DCTSIZE*4] = (DCTELEM)
      DESCALE(MULTIPLY(tmp3 - tmp0, FIX(0.388070096))    /* c8 */
 801111e:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 8011120:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8011122:	1ad3      	subs	r3, r2, r3
 8011124:	f640 426b 	movw	r2, #3179	@ 0xc6b
 8011128:	fb03 f202 	mul.w	r2, r3, r2
 801112c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801112e:	441a      	add	r2, r3
 8011130:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8011132:	1ad3      	subs	r3, r2, r3
 8011134:	f503 4280 	add.w	r2, r3, #16384	@ 0x4000
    dataptr[DCTSIZE*4] = (DCTELEM)
 8011138:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 801113a:	3380      	adds	r3, #128	@ 0x80
      DESCALE(MULTIPLY(tmp3 - tmp0, FIX(0.388070096))    /* c8 */
 801113c:	13d2      	asrs	r2, r2, #15
    dataptr[DCTSIZE*4] = (DCTELEM)
 801113e:	601a      	str	r2, [r3, #0]
	      + z1 - z2, CONST_BITS+2);

    /* Odd part */

    dataptr[DCTSIZE*3] = (DCTELEM)
      DESCALE(MULTIPLY(tmp10 - tmp12 - tmp13, FIX(1.935399303)), /* c3 */
 8011140:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8011142:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8011144:	1ad2      	subs	r2, r2, r3
 8011146:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8011148:	1ad3      	subs	r3, r2, r3
 801114a:	f643 52ef 	movw	r2, #15855	@ 0x3def
 801114e:	fb02 f303 	mul.w	r3, r2, r3
 8011152:	f503 4280 	add.w	r2, r3, #16384	@ 0x4000
    dataptr[DCTSIZE*3] = (DCTELEM)
 8011156:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8011158:	3360      	adds	r3, #96	@ 0x60
      DESCALE(MULTIPLY(tmp10 - tmp12 - tmp13, FIX(1.935399303)), /* c3 */
 801115a:	13d2      	asrs	r2, r2, #15
    dataptr[DCTSIZE*3] = (DCTELEM)
 801115c:	601a      	str	r2, [r3, #0]
	      CONST_BITS+2);

    tmp11 = MULTIPLY(tmp11, FIX(1.935399303));        /* c3 */
 801115e:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8011160:	f643 52ef 	movw	r2, #15855	@ 0x3def
 8011164:	fb02 f303 	mul.w	r3, r2, r3
 8011168:	647b      	str	r3, [r7, #68]	@ 0x44
    tmp0 = MULTIPLY(tmp10 + tmp12, FIX(1.436506004)); /* c5 */
 801116a:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 801116c:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 801116e:	4413      	add	r3, r2
 8011170:	f642 52f8 	movw	r2, #11768	@ 0x2df8
 8011174:	fb02 f303 	mul.w	r3, r2, r3
 8011178:	65fb      	str	r3, [r7, #92]	@ 0x5c
    tmp1 = MULTIPLY(tmp10 + tmp13, FIX(0.764348879)); /* c7 */
 801117a:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 801117c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 801117e:	4413      	add	r3, r2
 8011180:	f641 0276 	movw	r2, #6262	@ 0x1876
 8011184:	fb02 f303 	mul.w	r3, r2, r3
 8011188:	65bb      	str	r3, [r7, #88]	@ 0x58

    dataptr[DCTSIZE*1] = (DCTELEM)
      DESCALE(tmp11 + tmp0 + tmp1, CONST_BITS+2);
 801118a:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 801118c:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 801118e:	441a      	add	r2, r3
 8011190:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8011192:	4413      	add	r3, r2
 8011194:	f503 4280 	add.w	r2, r3, #16384	@ 0x4000
    dataptr[DCTSIZE*1] = (DCTELEM)
 8011198:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 801119a:	3320      	adds	r3, #32
      DESCALE(tmp11 + tmp0 + tmp1, CONST_BITS+2);
 801119c:	13d2      	asrs	r2, r2, #15
    dataptr[DCTSIZE*1] = (DCTELEM)
 801119e:	601a      	str	r2, [r3, #0]

    tmp2 = MULTIPLY(tmp12 - tmp13, FIX(2.200854883)); /* c1 */
 80111a0:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 80111a2:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80111a4:	1ad3      	subs	r3, r2, r3
 80111a6:	f244 626d 	movw	r2, #18029	@ 0x466d
 80111aa:	fb02 f303 	mul.w	r3, r2, r3
 80111ae:	657b      	str	r3, [r7, #84]	@ 0x54

    dataptr[DCTSIZE*5] = (DCTELEM)
      DESCALE(tmp0 - tmp11 - tmp2, CONST_BITS+2);
 80111b0:	6dfa      	ldr	r2, [r7, #92]	@ 0x5c
 80111b2:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80111b4:	1ad2      	subs	r2, r2, r3
 80111b6:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80111b8:	1ad3      	subs	r3, r2, r3
 80111ba:	f503 4280 	add.w	r2, r3, #16384	@ 0x4000
    dataptr[DCTSIZE*5] = (DCTELEM)
 80111be:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80111c0:	33a0      	adds	r3, #160	@ 0xa0
      DESCALE(tmp0 - tmp11 - tmp2, CONST_BITS+2);
 80111c2:	13d2      	asrs	r2, r2, #15
    dataptr[DCTSIZE*5] = (DCTELEM)
 80111c4:	601a      	str	r2, [r3, #0]
    dataptr[DCTSIZE*7] = (DCTELEM)
      DESCALE(tmp1 - tmp11 + tmp2, CONST_BITS+2);
 80111c6:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 80111c8:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80111ca:	1ad2      	subs	r2, r2, r3
 80111cc:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80111ce:	4413      	add	r3, r2
 80111d0:	f503 4280 	add.w	r2, r3, #16384	@ 0x4000
    dataptr[DCTSIZE*7] = (DCTELEM)
 80111d4:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80111d6:	33e0      	adds	r3, #224	@ 0xe0
      DESCALE(tmp1 - tmp11 + tmp2, CONST_BITS+2);
 80111d8:	13d2      	asrs	r2, r2, #15
    dataptr[DCTSIZE*7] = (DCTELEM)
 80111da:	601a      	str	r2, [r3, #0]

    dataptr++;			/* advance pointer to next column */
 80111dc:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80111de:	3304      	adds	r3, #4
 80111e0:	66fb      	str	r3, [r7, #108]	@ 0x6c
    wsptr++;			/* advance pointer to next column */
 80111e2:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 80111e4:	3304      	adds	r3, #4
 80111e6:	66bb      	str	r3, [r7, #104]	@ 0x68
  for (ctr = DCTSIZE-1; ctr >= 0; ctr--) {
 80111e8:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 80111ea:	3b01      	subs	r3, #1
 80111ec:	667b      	str	r3, [r7, #100]	@ 0x64
 80111ee:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 80111f0:	2b00      	cmp	r3, #0
 80111f2:	f6bf af0c 	bge.w	801100e <jpeg_fdct_9x9+0x232>
  }
}
 80111f6:	bf00      	nop
 80111f8:	bf00      	nop
 80111fa:	3774      	adds	r7, #116	@ 0x74
 80111fc:	46bd      	mov	sp, r7
 80111fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011202:	4770      	bx	lr

08011204 <jpeg_fdct_10x10>:
 * Perform the forward DCT on a 10x10 sample block.
 */

GLOBAL(void)
jpeg_fdct_10x10 (DCTELEM * data, JSAMPARRAY sample_data, JDIMENSION start_col)
{
 8011204:	b480      	push	{r7}
 8011206:	b0a3      	sub	sp, #140	@ 0x8c
 8011208:	af00      	add	r7, sp, #0
 801120a:	60f8      	str	r0, [r7, #12]
 801120c:	60b9      	str	r1, [r7, #8]
 801120e:	607a      	str	r2, [r7, #4]
  /* Note results are scaled up by sqrt(8) compared to a true DCT; */
  /* we scale the results further by 2 as part of output adaption */
  /* scaling for different DCT size. */
  /* cK represents sqrt(2) * cos(K*pi/20). */

  dataptr = data;
 8011210:	68fb      	ldr	r3, [r7, #12]
 8011212:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
  ctr = 0;
 8011216:	2300      	movs	r3, #0
 8011218:	67fb      	str	r3, [r7, #124]	@ 0x7c
  for (;;) {
    elemptr = sample_data[ctr] + start_col;
 801121a:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 801121c:	009b      	lsls	r3, r3, #2
 801121e:	68ba      	ldr	r2, [r7, #8]
 8011220:	4413      	add	r3, r2
 8011222:	681a      	ldr	r2, [r3, #0]
 8011224:	687b      	ldr	r3, [r7, #4]
 8011226:	4413      	add	r3, r2
 8011228:	67bb      	str	r3, [r7, #120]	@ 0x78

    /* Even part */

    tmp0 = GETJSAMPLE(elemptr[0]) + GETJSAMPLE(elemptr[9]);
 801122a:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 801122c:	781b      	ldrb	r3, [r3, #0]
 801122e:	461a      	mov	r2, r3
 8011230:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8011232:	3309      	adds	r3, #9
 8011234:	781b      	ldrb	r3, [r3, #0]
 8011236:	4413      	add	r3, r2
 8011238:	677b      	str	r3, [r7, #116]	@ 0x74
    tmp1 = GETJSAMPLE(elemptr[1]) + GETJSAMPLE(elemptr[8]);
 801123a:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 801123c:	3301      	adds	r3, #1
 801123e:	781b      	ldrb	r3, [r3, #0]
 8011240:	461a      	mov	r2, r3
 8011242:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8011244:	3308      	adds	r3, #8
 8011246:	781b      	ldrb	r3, [r3, #0]
 8011248:	4413      	add	r3, r2
 801124a:	673b      	str	r3, [r7, #112]	@ 0x70
    tmp12 = GETJSAMPLE(elemptr[2]) + GETJSAMPLE(elemptr[7]);
 801124c:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 801124e:	3302      	adds	r3, #2
 8011250:	781b      	ldrb	r3, [r3, #0]
 8011252:	461a      	mov	r2, r3
 8011254:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8011256:	3307      	adds	r3, #7
 8011258:	781b      	ldrb	r3, [r3, #0]
 801125a:	4413      	add	r3, r2
 801125c:	66fb      	str	r3, [r7, #108]	@ 0x6c
    tmp3 = GETJSAMPLE(elemptr[3]) + GETJSAMPLE(elemptr[6]);
 801125e:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8011260:	3303      	adds	r3, #3
 8011262:	781b      	ldrb	r3, [r3, #0]
 8011264:	461a      	mov	r2, r3
 8011266:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8011268:	3306      	adds	r3, #6
 801126a:	781b      	ldrb	r3, [r3, #0]
 801126c:	4413      	add	r3, r2
 801126e:	66bb      	str	r3, [r7, #104]	@ 0x68
    tmp4 = GETJSAMPLE(elemptr[4]) + GETJSAMPLE(elemptr[5]);
 8011270:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8011272:	3304      	adds	r3, #4
 8011274:	781b      	ldrb	r3, [r3, #0]
 8011276:	461a      	mov	r2, r3
 8011278:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 801127a:	3305      	adds	r3, #5
 801127c:	781b      	ldrb	r3, [r3, #0]
 801127e:	4413      	add	r3, r2
 8011280:	667b      	str	r3, [r7, #100]	@ 0x64

    tmp10 = tmp0 + tmp4;
 8011282:	6f7a      	ldr	r2, [r7, #116]	@ 0x74
 8011284:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8011286:	4413      	add	r3, r2
 8011288:	663b      	str	r3, [r7, #96]	@ 0x60
    tmp13 = tmp0 - tmp4;
 801128a:	6f7a      	ldr	r2, [r7, #116]	@ 0x74
 801128c:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 801128e:	1ad3      	subs	r3, r2, r3
 8011290:	65fb      	str	r3, [r7, #92]	@ 0x5c
    tmp11 = tmp1 + tmp3;
 8011292:	6f3a      	ldr	r2, [r7, #112]	@ 0x70
 8011294:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8011296:	4413      	add	r3, r2
 8011298:	65bb      	str	r3, [r7, #88]	@ 0x58
    tmp14 = tmp1 - tmp3;
 801129a:	6f3a      	ldr	r2, [r7, #112]	@ 0x70
 801129c:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 801129e:	1ad3      	subs	r3, r2, r3
 80112a0:	657b      	str	r3, [r7, #84]	@ 0x54

    tmp0 = GETJSAMPLE(elemptr[0]) - GETJSAMPLE(elemptr[9]);
 80112a2:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 80112a4:	781b      	ldrb	r3, [r3, #0]
 80112a6:	461a      	mov	r2, r3
 80112a8:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 80112aa:	3309      	adds	r3, #9
 80112ac:	781b      	ldrb	r3, [r3, #0]
 80112ae:	1ad3      	subs	r3, r2, r3
 80112b0:	677b      	str	r3, [r7, #116]	@ 0x74
    tmp1 = GETJSAMPLE(elemptr[1]) - GETJSAMPLE(elemptr[8]);
 80112b2:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 80112b4:	3301      	adds	r3, #1
 80112b6:	781b      	ldrb	r3, [r3, #0]
 80112b8:	461a      	mov	r2, r3
 80112ba:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 80112bc:	3308      	adds	r3, #8
 80112be:	781b      	ldrb	r3, [r3, #0]
 80112c0:	1ad3      	subs	r3, r2, r3
 80112c2:	673b      	str	r3, [r7, #112]	@ 0x70
    tmp2 = GETJSAMPLE(elemptr[2]) - GETJSAMPLE(elemptr[7]);
 80112c4:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 80112c6:	3302      	adds	r3, #2
 80112c8:	781b      	ldrb	r3, [r3, #0]
 80112ca:	461a      	mov	r2, r3
 80112cc:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 80112ce:	3307      	adds	r3, #7
 80112d0:	781b      	ldrb	r3, [r3, #0]
 80112d2:	1ad3      	subs	r3, r2, r3
 80112d4:	653b      	str	r3, [r7, #80]	@ 0x50
    tmp3 = GETJSAMPLE(elemptr[3]) - GETJSAMPLE(elemptr[6]);
 80112d6:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 80112d8:	3303      	adds	r3, #3
 80112da:	781b      	ldrb	r3, [r3, #0]
 80112dc:	461a      	mov	r2, r3
 80112de:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 80112e0:	3306      	adds	r3, #6
 80112e2:	781b      	ldrb	r3, [r3, #0]
 80112e4:	1ad3      	subs	r3, r2, r3
 80112e6:	66bb      	str	r3, [r7, #104]	@ 0x68
    tmp4 = GETJSAMPLE(elemptr[4]) - GETJSAMPLE(elemptr[5]);
 80112e8:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 80112ea:	3304      	adds	r3, #4
 80112ec:	781b      	ldrb	r3, [r3, #0]
 80112ee:	461a      	mov	r2, r3
 80112f0:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 80112f2:	3305      	adds	r3, #5
 80112f4:	781b      	ldrb	r3, [r3, #0]
 80112f6:	1ad3      	subs	r3, r2, r3
 80112f8:	667b      	str	r3, [r7, #100]	@ 0x64

    /* Apply unsigned->signed conversion */
    dataptr[0] = (DCTELEM)
      ((tmp10 + tmp11 + tmp12 - 10 * CENTERJSAMPLE) << 1);
 80112fa:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 80112fc:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 80112fe:	441a      	add	r2, r3
 8011300:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8011302:	4413      	add	r3, r2
 8011304:	f5a3 63a0 	sub.w	r3, r3, #1280	@ 0x500
 8011308:	005a      	lsls	r2, r3, #1
    dataptr[0] = (DCTELEM)
 801130a:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 801130e:	601a      	str	r2, [r3, #0]
    tmp12 += tmp12;
 8011310:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8011312:	005b      	lsls	r3, r3, #1
 8011314:	66fb      	str	r3, [r7, #108]	@ 0x6c
    dataptr[4] = (DCTELEM)
      DESCALE(MULTIPLY(tmp10 - tmp12, FIX(1.144122806)) - /* c4 */
 8011316:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 8011318:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 801131a:	1ad3      	subs	r3, r2, r3
 801131c:	f242 429d 	movw	r2, #9373	@ 0x249d
 8011320:	fb03 f202 	mul.w	r2, r3, r2
 8011324:	6db9      	ldr	r1, [r7, #88]	@ 0x58
 8011326:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8011328:	1acb      	subs	r3, r1, r3
 801132a:	4959      	ldr	r1, [pc, #356]	@ (8011490 <jpeg_fdct_10x10+0x28c>)
 801132c:	fb01 f303 	mul.w	r3, r1, r3
 8011330:	4413      	add	r3, r2
 8011332:	f503 6200 	add.w	r2, r3, #2048	@ 0x800
    dataptr[4] = (DCTELEM)
 8011336:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 801133a:	3310      	adds	r3, #16
      DESCALE(MULTIPLY(tmp10 - tmp12, FIX(1.144122806)) - /* c4 */
 801133c:	1312      	asrs	r2, r2, #12
    dataptr[4] = (DCTELEM)
 801133e:	601a      	str	r2, [r3, #0]
	      MULTIPLY(tmp11 - tmp12, FIX(0.437016024)),  /* c8 */
	      CONST_BITS-1);
    tmp10 = MULTIPLY(tmp13 + tmp14, FIX(0.831253876));    /* c6 */
 8011340:	6dfa      	ldr	r2, [r7, #92]	@ 0x5c
 8011342:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8011344:	4413      	add	r3, r2
 8011346:	f641 229a 	movw	r2, #6810	@ 0x1a9a
 801134a:	fb02 f303 	mul.w	r3, r2, r3
 801134e:	663b      	str	r3, [r7, #96]	@ 0x60
    dataptr[2] = (DCTELEM)
      DESCALE(tmp10 + MULTIPLY(tmp13, FIX(0.513743148)),  /* c2-c6 */
 8011350:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8011352:	f241 0271 	movw	r2, #4209	@ 0x1071
 8011356:	fb03 f202 	mul.w	r2, r3, r2
 801135a:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 801135c:	4413      	add	r3, r2
 801135e:	f503 6200 	add.w	r2, r3, #2048	@ 0x800
    dataptr[2] = (DCTELEM)
 8011362:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8011366:	3308      	adds	r3, #8
      DESCALE(tmp10 + MULTIPLY(tmp13, FIX(0.513743148)),  /* c2-c6 */
 8011368:	1312      	asrs	r2, r2, #12
    dataptr[2] = (DCTELEM)
 801136a:	601a      	str	r2, [r3, #0]
	      CONST_BITS-1);
    dataptr[6] = (DCTELEM)
      DESCALE(tmp10 - MULTIPLY(tmp14, FIX(2.176250899)),  /* c2+c6 */
 801136c:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 801136e:	4a49      	ldr	r2, [pc, #292]	@ (8011494 <jpeg_fdct_10x10+0x290>)
 8011370:	fb03 f202 	mul.w	r2, r3, r2
 8011374:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8011376:	4413      	add	r3, r2
 8011378:	f503 6200 	add.w	r2, r3, #2048	@ 0x800
    dataptr[6] = (DCTELEM)
 801137c:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8011380:	3318      	adds	r3, #24
      DESCALE(tmp10 - MULTIPLY(tmp14, FIX(2.176250899)),  /* c2+c6 */
 8011382:	1312      	asrs	r2, r2, #12
    dataptr[6] = (DCTELEM)
 8011384:	601a      	str	r2, [r3, #0]
	      CONST_BITS-1);

    /* Odd part */

    tmp10 = tmp0 + tmp4;
 8011386:	6f7a      	ldr	r2, [r7, #116]	@ 0x74
 8011388:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 801138a:	4413      	add	r3, r2
 801138c:	663b      	str	r3, [r7, #96]	@ 0x60
    tmp11 = tmp1 - tmp3;
 801138e:	6f3a      	ldr	r2, [r7, #112]	@ 0x70
 8011390:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8011392:	1ad3      	subs	r3, r2, r3
 8011394:	65bb      	str	r3, [r7, #88]	@ 0x58
    dataptr[5] = (DCTELEM) ((tmp10 - tmp11 - tmp2) << 1);
 8011396:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 8011398:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 801139a:	1ad2      	subs	r2, r2, r3
 801139c:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 801139e:	1ad2      	subs	r2, r2, r3
 80113a0:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 80113a4:	3314      	adds	r3, #20
 80113a6:	0052      	lsls	r2, r2, #1
 80113a8:	601a      	str	r2, [r3, #0]
    tmp2 <<= CONST_BITS;
 80113aa:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80113ac:	035b      	lsls	r3, r3, #13
 80113ae:	653b      	str	r3, [r7, #80]	@ 0x50
    dataptr[1] = (DCTELEM)
      DESCALE(MULTIPLY(tmp0, FIX(1.396802247)) +          /* c1 */
 80113b0:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 80113b2:	f642 42b3 	movw	r2, #11443	@ 0x2cb3
 80113b6:	fb03 f202 	mul.w	r2, r3, r2
 80113ba:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 80113bc:	f642 0153 	movw	r1, #10323	@ 0x2853
 80113c0:	fb01 f303 	mul.w	r3, r1, r3
 80113c4:	441a      	add	r2, r3
 80113c6:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80113c8:	441a      	add	r2, r3
 80113ca:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 80113cc:	f241 418c 	movw	r1, #5260	@ 0x148c
 80113d0:	fb01 f303 	mul.w	r3, r1, r3
 80113d4:	441a      	add	r2, r3
 80113d6:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 80113d8:	f240 7114 	movw	r1, #1812	@ 0x714
 80113dc:	fb01 f303 	mul.w	r3, r1, r3
 80113e0:	4413      	add	r3, r2
 80113e2:	f503 6200 	add.w	r2, r3, #2048	@ 0x800
    dataptr[1] = (DCTELEM)
 80113e6:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 80113ea:	3304      	adds	r3, #4
      DESCALE(MULTIPLY(tmp0, FIX(1.396802247)) +          /* c1 */
 80113ec:	1312      	asrs	r2, r2, #12
    dataptr[1] = (DCTELEM)
 80113ee:	601a      	str	r2, [r3, #0]
	      MULTIPLY(tmp1, FIX(1.260073511)) + tmp2 +   /* c3 */
	      MULTIPLY(tmp3, FIX(0.642039522)) +          /* c7 */
	      MULTIPLY(tmp4, FIX(0.221231742)),           /* c9 */
	      CONST_BITS-1);
    tmp12 = MULTIPLY(tmp0 - tmp4, FIX(0.951056516)) -     /* (c3+c7)/2 */
 80113f0:	6f7a      	ldr	r2, [r7, #116]	@ 0x74
 80113f2:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 80113f4:	1ad3      	subs	r3, r2, r3
 80113f6:	f641 626f 	movw	r2, #7791	@ 0x1e6f
 80113fa:	fb03 f202 	mul.w	r2, r3, r2
	    MULTIPLY(tmp1 + tmp3, FIX(0.587785252));      /* (c1-c9)/2 */
 80113fe:	6f39      	ldr	r1, [r7, #112]	@ 0x70
 8011400:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8011402:	440b      	add	r3, r1
 8011404:	4924      	ldr	r1, [pc, #144]	@ (8011498 <jpeg_fdct_10x10+0x294>)
 8011406:	fb01 f303 	mul.w	r3, r1, r3
    tmp12 = MULTIPLY(tmp0 - tmp4, FIX(0.951056516)) -     /* (c3+c7)/2 */
 801140a:	4413      	add	r3, r2
 801140c:	66fb      	str	r3, [r7, #108]	@ 0x6c
    tmp13 = MULTIPLY(tmp10 + tmp11, FIX(0.309016994)) +   /* (c3-c7)/2 */
 801140e:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 8011410:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8011412:	4413      	add	r3, r2
 8011414:	f640 12e3 	movw	r2, #2531	@ 0x9e3
 8011418:	fb03 f202 	mul.w	r2, r3, r2
	    (tmp11 << (CONST_BITS - 1)) - tmp2;
 801141c:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 801141e:	031b      	lsls	r3, r3, #12
    tmp13 = MULTIPLY(tmp10 + tmp11, FIX(0.309016994)) +   /* (c3-c7)/2 */
 8011420:	441a      	add	r2, r3
 8011422:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8011424:	1ad3      	subs	r3, r2, r3
 8011426:	65fb      	str	r3, [r7, #92]	@ 0x5c
    dataptr[3] = (DCTELEM) DESCALE(tmp12 + tmp13, CONST_BITS-1);
 8011428:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 801142a:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 801142c:	4413      	add	r3, r2
 801142e:	f503 6200 	add.w	r2, r3, #2048	@ 0x800
 8011432:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8011436:	330c      	adds	r3, #12
 8011438:	1312      	asrs	r2, r2, #12
 801143a:	601a      	str	r2, [r3, #0]
    dataptr[7] = (DCTELEM) DESCALE(tmp12 - tmp13, CONST_BITS-1);
 801143c:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 801143e:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8011440:	1ad3      	subs	r3, r2, r3
 8011442:	f503 6200 	add.w	r2, r3, #2048	@ 0x800
 8011446:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 801144a:	331c      	adds	r3, #28
 801144c:	1312      	asrs	r2, r2, #12
 801144e:	601a      	str	r2, [r3, #0]

    ctr++;
 8011450:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8011452:	3301      	adds	r3, #1
 8011454:	67fb      	str	r3, [r7, #124]	@ 0x7c

    if (ctr != DCTSIZE) {
 8011456:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8011458:	2b08      	cmp	r3, #8
 801145a:	d008      	beq.n	801146e <jpeg_fdct_10x10+0x26a>
      if (ctr == 10)
 801145c:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 801145e:	2b0a      	cmp	r3, #10
 8011460:	d00a      	beq.n	8011478 <jpeg_fdct_10x10+0x274>
	break;			/* Done. */
      dataptr += DCTSIZE;	/* advance pointer to next row */
 8011462:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8011466:	3320      	adds	r3, #32
 8011468:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 801146c:	e6d5      	b.n	801121a <jpeg_fdct_10x10+0x16>
    } else
      dataptr = workspace;	/* switch pointer to extended workspace */
 801146e:	f107 0310 	add.w	r3, r7, #16
 8011472:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
    elemptr = sample_data[ctr] + start_col;
 8011476:	e6d0      	b.n	801121a <jpeg_fdct_10x10+0x16>
	break;			/* Done. */
 8011478:	bf00      	nop
   * We must also scale the output by (8/10)**2 = 16/25, which we partially
   * fold into the constant multipliers and final/initial shifting:
   * cK now represents sqrt(2) * cos(K*pi/20) * 32/25.
   */

  dataptr = data;
 801147a:	68fb      	ldr	r3, [r7, #12]
 801147c:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
  wsptr = workspace;
 8011480:	f107 0310 	add.w	r3, r7, #16
 8011484:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
  for (ctr = DCTSIZE-1; ctr >= 0; ctr--) {
 8011488:	2307      	movs	r3, #7
 801148a:	67fb      	str	r3, [r7, #124]	@ 0x7c
 801148c:	e13e      	b.n	801170c <jpeg_fdct_10x10+0x508>
 801148e:	bf00      	nop
 8011490:	fffff204 	.word	0xfffff204
 8011494:	ffffba5c 	.word	0xffffba5c
 8011498:	ffffed31 	.word	0xffffed31
    /* Even part */

    tmp0 = dataptr[DCTSIZE*0] + wsptr[DCTSIZE*1];
 801149c:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 80114a0:	681a      	ldr	r2, [r3, #0]
 80114a2:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 80114a6:	3320      	adds	r3, #32
 80114a8:	681b      	ldr	r3, [r3, #0]
 80114aa:	4413      	add	r3, r2
 80114ac:	677b      	str	r3, [r7, #116]	@ 0x74
    tmp1 = dataptr[DCTSIZE*1] + wsptr[DCTSIZE*0];
 80114ae:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 80114b2:	3320      	adds	r3, #32
 80114b4:	681a      	ldr	r2, [r3, #0]
 80114b6:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 80114ba:	681b      	ldr	r3, [r3, #0]
 80114bc:	4413      	add	r3, r2
 80114be:	673b      	str	r3, [r7, #112]	@ 0x70
    tmp12 = dataptr[DCTSIZE*2] + dataptr[DCTSIZE*7];
 80114c0:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 80114c4:	3340      	adds	r3, #64	@ 0x40
 80114c6:	681a      	ldr	r2, [r3, #0]
 80114c8:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 80114cc:	33e0      	adds	r3, #224	@ 0xe0
 80114ce:	681b      	ldr	r3, [r3, #0]
 80114d0:	4413      	add	r3, r2
 80114d2:	66fb      	str	r3, [r7, #108]	@ 0x6c
    tmp3 = dataptr[DCTSIZE*3] + dataptr[DCTSIZE*6];
 80114d4:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 80114d8:	3360      	adds	r3, #96	@ 0x60
 80114da:	681a      	ldr	r2, [r3, #0]
 80114dc:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 80114e0:	33c0      	adds	r3, #192	@ 0xc0
 80114e2:	681b      	ldr	r3, [r3, #0]
 80114e4:	4413      	add	r3, r2
 80114e6:	66bb      	str	r3, [r7, #104]	@ 0x68
    tmp4 = dataptr[DCTSIZE*4] + dataptr[DCTSIZE*5];
 80114e8:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 80114ec:	3380      	adds	r3, #128	@ 0x80
 80114ee:	681a      	ldr	r2, [r3, #0]
 80114f0:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 80114f4:	33a0      	adds	r3, #160	@ 0xa0
 80114f6:	681b      	ldr	r3, [r3, #0]
 80114f8:	4413      	add	r3, r2
 80114fa:	667b      	str	r3, [r7, #100]	@ 0x64

    tmp10 = tmp0 + tmp4;
 80114fc:	6f7a      	ldr	r2, [r7, #116]	@ 0x74
 80114fe:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8011500:	4413      	add	r3, r2
 8011502:	663b      	str	r3, [r7, #96]	@ 0x60
    tmp13 = tmp0 - tmp4;
 8011504:	6f7a      	ldr	r2, [r7, #116]	@ 0x74
 8011506:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8011508:	1ad3      	subs	r3, r2, r3
 801150a:	65fb      	str	r3, [r7, #92]	@ 0x5c
    tmp11 = tmp1 + tmp3;
 801150c:	6f3a      	ldr	r2, [r7, #112]	@ 0x70
 801150e:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8011510:	4413      	add	r3, r2
 8011512:	65bb      	str	r3, [r7, #88]	@ 0x58
    tmp14 = tmp1 - tmp3;
 8011514:	6f3a      	ldr	r2, [r7, #112]	@ 0x70
 8011516:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8011518:	1ad3      	subs	r3, r2, r3
 801151a:	657b      	str	r3, [r7, #84]	@ 0x54

    tmp0 = dataptr[DCTSIZE*0] - wsptr[DCTSIZE*1];
 801151c:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8011520:	681a      	ldr	r2, [r3, #0]
 8011522:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8011526:	3320      	adds	r3, #32
 8011528:	681b      	ldr	r3, [r3, #0]
 801152a:	1ad3      	subs	r3, r2, r3
 801152c:	677b      	str	r3, [r7, #116]	@ 0x74
    tmp1 = dataptr[DCTSIZE*1] - wsptr[DCTSIZE*0];
 801152e:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8011532:	3320      	adds	r3, #32
 8011534:	681a      	ldr	r2, [r3, #0]
 8011536:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 801153a:	681b      	ldr	r3, [r3, #0]
 801153c:	1ad3      	subs	r3, r2, r3
 801153e:	673b      	str	r3, [r7, #112]	@ 0x70
    tmp2 = dataptr[DCTSIZE*2] - dataptr[DCTSIZE*7];
 8011540:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8011544:	3340      	adds	r3, #64	@ 0x40
 8011546:	681a      	ldr	r2, [r3, #0]
 8011548:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 801154c:	33e0      	adds	r3, #224	@ 0xe0
 801154e:	681b      	ldr	r3, [r3, #0]
 8011550:	1ad3      	subs	r3, r2, r3
 8011552:	653b      	str	r3, [r7, #80]	@ 0x50
    tmp3 = dataptr[DCTSIZE*3] - dataptr[DCTSIZE*6];
 8011554:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8011558:	3360      	adds	r3, #96	@ 0x60
 801155a:	681a      	ldr	r2, [r3, #0]
 801155c:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8011560:	33c0      	adds	r3, #192	@ 0xc0
 8011562:	681b      	ldr	r3, [r3, #0]
 8011564:	1ad3      	subs	r3, r2, r3
 8011566:	66bb      	str	r3, [r7, #104]	@ 0x68
    tmp4 = dataptr[DCTSIZE*4] - dataptr[DCTSIZE*5];
 8011568:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 801156c:	3380      	adds	r3, #128	@ 0x80
 801156e:	681a      	ldr	r2, [r3, #0]
 8011570:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8011574:	33a0      	adds	r3, #160	@ 0xa0
 8011576:	681b      	ldr	r3, [r3, #0]
 8011578:	1ad3      	subs	r3, r2, r3
 801157a:	667b      	str	r3, [r7, #100]	@ 0x64

    dataptr[DCTSIZE*0] = (DCTELEM)
      DESCALE(MULTIPLY(tmp10 + tmp11 + tmp12, FIX(1.28)), /* 32/25 */
 801157c:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 801157e:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8011580:	441a      	add	r2, r3
 8011582:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8011584:	4413      	add	r3, r2
 8011586:	f642 02f6 	movw	r2, #10486	@ 0x28f6
 801158a:	fb02 f303 	mul.w	r3, r2, r3
 801158e:	f503 4380 	add.w	r3, r3, #16384	@ 0x4000
 8011592:	13da      	asrs	r2, r3, #15
    dataptr[DCTSIZE*0] = (DCTELEM)
 8011594:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8011598:	601a      	str	r2, [r3, #0]
	      CONST_BITS+2);
    tmp12 += tmp12;
 801159a:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 801159c:	005b      	lsls	r3, r3, #1
 801159e:	66fb      	str	r3, [r7, #108]	@ 0x6c
    dataptr[DCTSIZE*4] = (DCTELEM)
      DESCALE(MULTIPLY(tmp10 - tmp12, FIX(1.464477191)) - /* c4 */
 80115a0:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 80115a2:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80115a4:	1ad3      	subs	r3, r2, r3
 80115a6:	f642 62dd 	movw	r2, #11997	@ 0x2edd
 80115aa:	fb03 f202 	mul.w	r2, r3, r2
 80115ae:	6db9      	ldr	r1, [r7, #88]	@ 0x58
 80115b0:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80115b2:	1acb      	subs	r3, r1, r3
 80115b4:	495b      	ldr	r1, [pc, #364]	@ (8011724 <jpeg_fdct_10x10+0x520>)
 80115b6:	fb01 f303 	mul.w	r3, r1, r3
 80115ba:	4413      	add	r3, r2
 80115bc:	f503 4280 	add.w	r2, r3, #16384	@ 0x4000
    dataptr[DCTSIZE*4] = (DCTELEM)
 80115c0:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 80115c4:	3380      	adds	r3, #128	@ 0x80
      DESCALE(MULTIPLY(tmp10 - tmp12, FIX(1.464477191)) - /* c4 */
 80115c6:	13d2      	asrs	r2, r2, #15
    dataptr[DCTSIZE*4] = (DCTELEM)
 80115c8:	601a      	str	r2, [r3, #0]
	      MULTIPLY(tmp11 - tmp12, FIX(0.559380511)),  /* c8 */
	      CONST_BITS+2);
    tmp10 = MULTIPLY(tmp13 + tmp14, FIX(1.064004961));    /* c6 */
 80115ca:	6dfa      	ldr	r2, [r7, #92]	@ 0x5c
 80115cc:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80115ce:	4413      	add	r3, r2
 80115d0:	f242 220c 	movw	r2, #8716	@ 0x220c
 80115d4:	fb02 f303 	mul.w	r3, r2, r3
 80115d8:	663b      	str	r3, [r7, #96]	@ 0x60
    dataptr[DCTSIZE*2] = (DCTELEM)
      DESCALE(tmp10 + MULTIPLY(tmp13, FIX(0.657591230)),  /* c2-c6 */
 80115da:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80115dc:	f241 520b 	movw	r2, #5387	@ 0x150b
 80115e0:	fb03 f202 	mul.w	r2, r3, r2
 80115e4:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 80115e6:	4413      	add	r3, r2
 80115e8:	f503 4280 	add.w	r2, r3, #16384	@ 0x4000
    dataptr[DCTSIZE*2] = (DCTELEM)
 80115ec:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 80115f0:	3340      	adds	r3, #64	@ 0x40
      DESCALE(tmp10 + MULTIPLY(tmp13, FIX(0.657591230)),  /* c2-c6 */
 80115f2:	13d2      	asrs	r2, r2, #15
    dataptr[DCTSIZE*2] = (DCTELEM)
 80115f4:	601a      	str	r2, [r3, #0]
	      CONST_BITS+2);
    dataptr[DCTSIZE*6] = (DCTELEM)
      DESCALE(tmp10 - MULTIPLY(tmp14, FIX(2.785601151)),  /* c2+c6 */
 80115f6:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80115f8:	4a4b      	ldr	r2, [pc, #300]	@ (8011728 <jpeg_fdct_10x10+0x524>)
 80115fa:	fb03 f202 	mul.w	r2, r3, r2
 80115fe:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8011600:	4413      	add	r3, r2
 8011602:	f503 4280 	add.w	r2, r3, #16384	@ 0x4000
    dataptr[DCTSIZE*6] = (DCTELEM)
 8011606:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 801160a:	33c0      	adds	r3, #192	@ 0xc0
      DESCALE(tmp10 - MULTIPLY(tmp14, FIX(2.785601151)),  /* c2+c6 */
 801160c:	13d2      	asrs	r2, r2, #15
    dataptr[DCTSIZE*6] = (DCTELEM)
 801160e:	601a      	str	r2, [r3, #0]
	      CONST_BITS+2);

    /* Odd part */

    tmp10 = tmp0 + tmp4;
 8011610:	6f7a      	ldr	r2, [r7, #116]	@ 0x74
 8011612:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8011614:	4413      	add	r3, r2
 8011616:	663b      	str	r3, [r7, #96]	@ 0x60
    tmp11 = tmp1 - tmp3;
 8011618:	6f3a      	ldr	r2, [r7, #112]	@ 0x70
 801161a:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 801161c:	1ad3      	subs	r3, r2, r3
 801161e:	65bb      	str	r3, [r7, #88]	@ 0x58
    dataptr[DCTSIZE*5] = (DCTELEM)
      DESCALE(MULTIPLY(tmp10 - tmp11 - tmp2, FIX(1.28)),  /* 32/25 */
 8011620:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 8011622:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8011624:	1ad2      	subs	r2, r2, r3
 8011626:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8011628:	1ad3      	subs	r3, r2, r3
 801162a:	f642 02f6 	movw	r2, #10486	@ 0x28f6
 801162e:	fb02 f303 	mul.w	r3, r2, r3
 8011632:	f503 4280 	add.w	r2, r3, #16384	@ 0x4000
    dataptr[DCTSIZE*5] = (DCTELEM)
 8011636:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 801163a:	33a0      	adds	r3, #160	@ 0xa0
      DESCALE(MULTIPLY(tmp10 - tmp11 - tmp2, FIX(1.28)),  /* 32/25 */
 801163c:	13d2      	asrs	r2, r2, #15
    dataptr[DCTSIZE*5] = (DCTELEM)
 801163e:	601a      	str	r2, [r3, #0]
	      CONST_BITS+2);
    tmp2 = MULTIPLY(tmp2, FIX(1.28));                     /* 32/25 */
 8011640:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8011642:	f642 02f6 	movw	r2, #10486	@ 0x28f6
 8011646:	fb02 f303 	mul.w	r3, r2, r3
 801164a:	653b      	str	r3, [r7, #80]	@ 0x50
    dataptr[DCTSIZE*1] = (DCTELEM)
      DESCALE(MULTIPLY(tmp0, FIX(1.787906876)) +          /* c1 */
 801164c:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 801164e:	f643 1237 	movw	r2, #14647	@ 0x3937
 8011652:	fb03 f202 	mul.w	r2, r3, r2
 8011656:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8011658:	f243 319d 	movw	r1, #13213	@ 0x339d
 801165c:	fb01 f303 	mul.w	r3, r1, r3
 8011660:	441a      	add	r2, r3
 8011662:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8011664:	441a      	add	r2, r3
 8011666:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8011668:	f641 214c 	movw	r1, #6732	@ 0x1a4c
 801166c:	fb01 f303 	mul.w	r3, r1, r3
 8011670:	441a      	add	r2, r3
 8011672:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8011674:	f44f 6111 	mov.w	r1, #2320	@ 0x910
 8011678:	fb01 f303 	mul.w	r3, r1, r3
 801167c:	4413      	add	r3, r2
 801167e:	f503 4280 	add.w	r2, r3, #16384	@ 0x4000
    dataptr[DCTSIZE*1] = (DCTELEM)
 8011682:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8011686:	3320      	adds	r3, #32
      DESCALE(MULTIPLY(tmp0, FIX(1.787906876)) +          /* c1 */
 8011688:	13d2      	asrs	r2, r2, #15
    dataptr[DCTSIZE*1] = (DCTELEM)
 801168a:	601a      	str	r2, [r3, #0]
	      MULTIPLY(tmp1, FIX(1.612894094)) + tmp2 +   /* c3 */
	      MULTIPLY(tmp3, FIX(0.821810588)) +          /* c7 */
	      MULTIPLY(tmp4, FIX(0.283176630)),           /* c9 */
	      CONST_BITS+2);
    tmp12 = MULTIPLY(tmp0 - tmp4, FIX(1.217352341)) -     /* (c3+c7)/2 */
 801168c:	6f7a      	ldr	r2, [r7, #116]	@ 0x74
 801168e:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8011690:	1ad3      	subs	r3, r2, r3
 8011692:	f242 62f5 	movw	r2, #9973	@ 0x26f5
 8011696:	fb03 f202 	mul.w	r2, r3, r2
	    MULTIPLY(tmp1 + tmp3, FIX(0.752365123));      /* (c1-c9)/2 */
 801169a:	6f39      	ldr	r1, [r7, #112]	@ 0x70
 801169c:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 801169e:	440b      	add	r3, r1
 80116a0:	4922      	ldr	r1, [pc, #136]	@ (801172c <jpeg_fdct_10x10+0x528>)
 80116a2:	fb01 f303 	mul.w	r3, r1, r3
    tmp12 = MULTIPLY(tmp0 - tmp4, FIX(1.217352341)) -     /* (c3+c7)/2 */
 80116a6:	4413      	add	r3, r2
 80116a8:	66fb      	str	r3, [r7, #108]	@ 0x6c
    tmp13 = MULTIPLY(tmp10 + tmp11, FIX(0.395541753)) +   /* (c3-c7)/2 */
 80116aa:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 80116ac:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 80116ae:	4413      	add	r3, r2
 80116b0:	f640 42a8 	movw	r2, #3240	@ 0xca8
 80116b4:	fb03 f202 	mul.w	r2, r3, r2
	    MULTIPLY(tmp11, FIX(0.64)) - tmp2;            /* 16/25 */
 80116b8:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 80116ba:	f241 417b 	movw	r1, #5243	@ 0x147b
 80116be:	fb01 f303 	mul.w	r3, r1, r3
    tmp13 = MULTIPLY(tmp10 + tmp11, FIX(0.395541753)) +   /* (c3-c7)/2 */
 80116c2:	441a      	add	r2, r3
 80116c4:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80116c6:	1ad3      	subs	r3, r2, r3
 80116c8:	65fb      	str	r3, [r7, #92]	@ 0x5c
    dataptr[DCTSIZE*3] = (DCTELEM) DESCALE(tmp12 + tmp13, CONST_BITS+2);
 80116ca:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 80116cc:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80116ce:	4413      	add	r3, r2
 80116d0:	f503 4280 	add.w	r2, r3, #16384	@ 0x4000
 80116d4:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 80116d8:	3360      	adds	r3, #96	@ 0x60
 80116da:	13d2      	asrs	r2, r2, #15
 80116dc:	601a      	str	r2, [r3, #0]
    dataptr[DCTSIZE*7] = (DCTELEM) DESCALE(tmp12 - tmp13, CONST_BITS+2);
 80116de:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 80116e0:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80116e2:	1ad3      	subs	r3, r2, r3
 80116e4:	f503 4280 	add.w	r2, r3, #16384	@ 0x4000
 80116e8:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 80116ec:	33e0      	adds	r3, #224	@ 0xe0
 80116ee:	13d2      	asrs	r2, r2, #15
 80116f0:	601a      	str	r2, [r3, #0]

    dataptr++;			/* advance pointer to next column */
 80116f2:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 80116f6:	3304      	adds	r3, #4
 80116f8:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
    wsptr++;			/* advance pointer to next column */
 80116fc:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8011700:	3304      	adds	r3, #4
 8011702:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
  for (ctr = DCTSIZE-1; ctr >= 0; ctr--) {
 8011706:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8011708:	3b01      	subs	r3, #1
 801170a:	67fb      	str	r3, [r7, #124]	@ 0x7c
 801170c:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 801170e:	2b00      	cmp	r3, #0
 8011710:	f6bf aec4 	bge.w	801149c <jpeg_fdct_10x10+0x298>
  }
}
 8011714:	bf00      	nop
 8011716:	bf00      	nop
 8011718:	378c      	adds	r7, #140	@ 0x8c
 801171a:	46bd      	mov	sp, r7
 801171c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011720:	4770      	bx	lr
 8011722:	bf00      	nop
 8011724:	ffffee1a 	.word	0xffffee1a
 8011728:	ffffa6dc 	.word	0xffffa6dc
 801172c:	ffffe7ed 	.word	0xffffe7ed

08011730 <jpeg_fdct_11x11>:
 * Perform the forward DCT on an 11x11 sample block.
 */

GLOBAL(void)
jpeg_fdct_11x11 (DCTELEM * data, JSAMPARRAY sample_data, JDIMENSION start_col)
{
 8011730:	b480      	push	{r7}
 8011732:	b0af      	sub	sp, #188	@ 0xbc
 8011734:	af00      	add	r7, sp, #0
 8011736:	60f8      	str	r0, [r7, #12]
 8011738:	60b9      	str	r1, [r7, #8]
 801173a:	607a      	str	r2, [r7, #4]
  /* Note results are scaled up by sqrt(8) compared to a true DCT; */
  /* we scale the results further by 2 as part of output adaption */
  /* scaling for different DCT size. */
  /* cK represents sqrt(2) * cos(K*pi/22). */

  dataptr = data;
 801173c:	68fb      	ldr	r3, [r7, #12]
 801173e:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
  ctr = 0;
 8011742:	2300      	movs	r3, #0
 8011744:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
  for (;;) {
    elemptr = sample_data[ctr] + start_col;
 8011748:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 801174c:	009b      	lsls	r3, r3, #2
 801174e:	68ba      	ldr	r2, [r7, #8]
 8011750:	4413      	add	r3, r2
 8011752:	681a      	ldr	r2, [r3, #0]
 8011754:	687b      	ldr	r3, [r7, #4]
 8011756:	4413      	add	r3, r2
 8011758:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8

    /* Even part */

    tmp0 = GETJSAMPLE(elemptr[0]) + GETJSAMPLE(elemptr[10]);
 801175c:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8011760:	781b      	ldrb	r3, [r3, #0]
 8011762:	461a      	mov	r2, r3
 8011764:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8011768:	330a      	adds	r3, #10
 801176a:	781b      	ldrb	r3, [r3, #0]
 801176c:	4413      	add	r3, r2
 801176e:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
    tmp1 = GETJSAMPLE(elemptr[1]) + GETJSAMPLE(elemptr[9]);
 8011772:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8011776:	3301      	adds	r3, #1
 8011778:	781b      	ldrb	r3, [r3, #0]
 801177a:	461a      	mov	r2, r3
 801177c:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8011780:	3309      	adds	r3, #9
 8011782:	781b      	ldrb	r3, [r3, #0]
 8011784:	4413      	add	r3, r2
 8011786:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
    tmp2 = GETJSAMPLE(elemptr[2]) + GETJSAMPLE(elemptr[8]);
 801178a:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 801178e:	3302      	adds	r3, #2
 8011790:	781b      	ldrb	r3, [r3, #0]
 8011792:	461a      	mov	r2, r3
 8011794:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8011798:	3308      	adds	r3, #8
 801179a:	781b      	ldrb	r3, [r3, #0]
 801179c:	4413      	add	r3, r2
 801179e:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
    tmp3 = GETJSAMPLE(elemptr[3]) + GETJSAMPLE(elemptr[7]);
 80117a2:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 80117a6:	3303      	adds	r3, #3
 80117a8:	781b      	ldrb	r3, [r3, #0]
 80117aa:	461a      	mov	r2, r3
 80117ac:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 80117b0:	3307      	adds	r3, #7
 80117b2:	781b      	ldrb	r3, [r3, #0]
 80117b4:	4413      	add	r3, r2
 80117b6:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
    tmp4 = GETJSAMPLE(elemptr[4]) + GETJSAMPLE(elemptr[6]);
 80117ba:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 80117be:	3304      	adds	r3, #4
 80117c0:	781b      	ldrb	r3, [r3, #0]
 80117c2:	461a      	mov	r2, r3
 80117c4:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 80117c8:	3306      	adds	r3, #6
 80117ca:	781b      	ldrb	r3, [r3, #0]
 80117cc:	4413      	add	r3, r2
 80117ce:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
    tmp5 = GETJSAMPLE(elemptr[5]);
 80117d2:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 80117d6:	3305      	adds	r3, #5
 80117d8:	781b      	ldrb	r3, [r3, #0]
 80117da:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90

    tmp10 = GETJSAMPLE(elemptr[0]) - GETJSAMPLE(elemptr[10]);
 80117de:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 80117e2:	781b      	ldrb	r3, [r3, #0]
 80117e4:	461a      	mov	r2, r3
 80117e6:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 80117ea:	330a      	adds	r3, #10
 80117ec:	781b      	ldrb	r3, [r3, #0]
 80117ee:	1ad3      	subs	r3, r2, r3
 80117f0:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
    tmp11 = GETJSAMPLE(elemptr[1]) - GETJSAMPLE(elemptr[9]);
 80117f4:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 80117f8:	3301      	adds	r3, #1
 80117fa:	781b      	ldrb	r3, [r3, #0]
 80117fc:	461a      	mov	r2, r3
 80117fe:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8011802:	3309      	adds	r3, #9
 8011804:	781b      	ldrb	r3, [r3, #0]
 8011806:	1ad3      	subs	r3, r2, r3
 8011808:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
    tmp12 = GETJSAMPLE(elemptr[2]) - GETJSAMPLE(elemptr[8]);
 801180c:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8011810:	3302      	adds	r3, #2
 8011812:	781b      	ldrb	r3, [r3, #0]
 8011814:	461a      	mov	r2, r3
 8011816:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 801181a:	3308      	adds	r3, #8
 801181c:	781b      	ldrb	r3, [r3, #0]
 801181e:	1ad3      	subs	r3, r2, r3
 8011820:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
    tmp13 = GETJSAMPLE(elemptr[3]) - GETJSAMPLE(elemptr[7]);
 8011824:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8011828:	3303      	adds	r3, #3
 801182a:	781b      	ldrb	r3, [r3, #0]
 801182c:	461a      	mov	r2, r3
 801182e:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8011832:	3307      	adds	r3, #7
 8011834:	781b      	ldrb	r3, [r3, #0]
 8011836:	1ad3      	subs	r3, r2, r3
 8011838:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
    tmp14 = GETJSAMPLE(elemptr[4]) - GETJSAMPLE(elemptr[6]);
 801183c:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8011840:	3304      	adds	r3, #4
 8011842:	781b      	ldrb	r3, [r3, #0]
 8011844:	461a      	mov	r2, r3
 8011846:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 801184a:	3306      	adds	r3, #6
 801184c:	781b      	ldrb	r3, [r3, #0]
 801184e:	1ad3      	subs	r3, r2, r3
 8011850:	67fb      	str	r3, [r7, #124]	@ 0x7c

    /* Apply unsigned->signed conversion */
    dataptr[0] = (DCTELEM)
      ((tmp0 + tmp1 + tmp2 + tmp3 + tmp4 + tmp5 - 11 * CENTERJSAMPLE) << 1);
 8011852:	f8d7 20a4 	ldr.w	r2, [r7, #164]	@ 0xa4
 8011856:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 801185a:	441a      	add	r2, r3
 801185c:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8011860:	441a      	add	r2, r3
 8011862:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8011866:	441a      	add	r2, r3
 8011868:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 801186c:	441a      	add	r2, r3
 801186e:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 8011872:	4413      	add	r3, r2
 8011874:	f5a3 63b0 	sub.w	r3, r3, #1408	@ 0x580
 8011878:	005a      	lsls	r2, r3, #1
    dataptr[0] = (DCTELEM)
 801187a:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 801187e:	601a      	str	r2, [r3, #0]
    tmp5 += tmp5;
 8011880:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 8011884:	005b      	lsls	r3, r3, #1
 8011886:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
    tmp0 -= tmp5;
 801188a:	f8d7 20a4 	ldr.w	r2, [r7, #164]	@ 0xa4
 801188e:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 8011892:	1ad3      	subs	r3, r2, r3
 8011894:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
    tmp1 -= tmp5;
 8011898:	f8d7 20a0 	ldr.w	r2, [r7, #160]	@ 0xa0
 801189c:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 80118a0:	1ad3      	subs	r3, r2, r3
 80118a2:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
    tmp2 -= tmp5;
 80118a6:	f8d7 209c 	ldr.w	r2, [r7, #156]	@ 0x9c
 80118aa:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 80118ae:	1ad3      	subs	r3, r2, r3
 80118b0:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
    tmp3 -= tmp5;
 80118b4:	f8d7 2098 	ldr.w	r2, [r7, #152]	@ 0x98
 80118b8:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 80118bc:	1ad3      	subs	r3, r2, r3
 80118be:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
    tmp4 -= tmp5;
 80118c2:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 80118c6:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 80118ca:	1ad3      	subs	r3, r2, r3
 80118cc:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
    z1 = MULTIPLY(tmp0 + tmp3, FIX(1.356927976)) +       /* c2 */
 80118d0:	f8d7 20a4 	ldr.w	r2, [r7, #164]	@ 0xa4
 80118d4:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 80118d8:	4413      	add	r3, r2
 80118da:	f642 326c 	movw	r2, #11116	@ 0x2b6c
 80118de:	fb03 f202 	mul.w	r2, r3, r2
	 MULTIPLY(tmp2 + tmp4, FIX(0.201263574));        /* c10 */
 80118e2:	f8d7 109c 	ldr.w	r1, [r7, #156]	@ 0x9c
 80118e6:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 80118ea:	440b      	add	r3, r1
 80118ec:	f240 6171 	movw	r1, #1649	@ 0x671
 80118f0:	fb01 f303 	mul.w	r3, r1, r3
    z1 = MULTIPLY(tmp0 + tmp3, FIX(1.356927976)) +       /* c2 */
 80118f4:	4413      	add	r3, r2
 80118f6:	67bb      	str	r3, [r7, #120]	@ 0x78
    z2 = MULTIPLY(tmp1 - tmp3, FIX(0.926112931));        /* c6 */
 80118f8:	f8d7 20a0 	ldr.w	r2, [r7, #160]	@ 0xa0
 80118fc:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8011900:	1ad3      	subs	r3, r2, r3
 8011902:	f641 52a3 	movw	r2, #7587	@ 0x1da3
 8011906:	fb02 f303 	mul.w	r3, r2, r3
 801190a:	677b      	str	r3, [r7, #116]	@ 0x74
    z3 = MULTIPLY(tmp0 - tmp1, FIX(1.189712156));        /* c4 */
 801190c:	f8d7 20a4 	ldr.w	r2, [r7, #164]	@ 0xa4
 8011910:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8011914:	1ad3      	subs	r3, r2, r3
 8011916:	f242 6212 	movw	r2, #9746	@ 0x2612
 801191a:	fb02 f303 	mul.w	r3, r2, r3
 801191e:	673b      	str	r3, [r7, #112]	@ 0x70
    dataptr[2] = (DCTELEM)
      DESCALE(z1 + z2 - MULTIPLY(tmp3, FIX(1.018300590)) /* c2+c8-c6 */
 8011920:	6fba      	ldr	r2, [r7, #120]	@ 0x78
 8011922:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8011924:	441a      	add	r2, r3
 8011926:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 801192a:	4992      	ldr	r1, [pc, #584]	@ (8011b74 <jpeg_fdct_11x11+0x444>)
 801192c:	fb01 f303 	mul.w	r3, r1, r3
 8011930:	441a      	add	r2, r3
 8011932:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8011936:	4990      	ldr	r1, [pc, #576]	@ (8011b78 <jpeg_fdct_11x11+0x448>)
 8011938:	fb01 f303 	mul.w	r3, r1, r3
 801193c:	4413      	add	r3, r2
 801193e:	f503 6200 	add.w	r2, r3, #2048	@ 0x800
    dataptr[2] = (DCTELEM)
 8011942:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 8011946:	3308      	adds	r3, #8
      DESCALE(z1 + z2 - MULTIPLY(tmp3, FIX(1.018300590)) /* c2+c8-c6 */
 8011948:	1312      	asrs	r2, r2, #12
    dataptr[2] = (DCTELEM)
 801194a:	601a      	str	r2, [r3, #0]
	      - MULTIPLY(tmp4, FIX(1.390975730)),        /* c4+c10 */
	      CONST_BITS-1);
    dataptr[4] = (DCTELEM)
      DESCALE(z2 + z3 + MULTIPLY(tmp1, FIX(0.062335650)) /* c4-c6-c10 */
 801194c:	6f7a      	ldr	r2, [r7, #116]	@ 0x74
 801194e:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8011950:	18d1      	adds	r1, r2, r3
 8011952:	f8d7 20a0 	ldr.w	r2, [r7, #160]	@ 0xa0
 8011956:	4613      	mov	r3, r2
 8011958:	025b      	lsls	r3, r3, #9
 801195a:	1a9b      	subs	r3, r3, r2
 801195c:	18ca      	adds	r2, r1, r3
 801195e:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8011962:	4986      	ldr	r1, [pc, #536]	@ (8011b7c <jpeg_fdct_11x11+0x44c>)
 8011964:	fb01 f303 	mul.w	r3, r1, r3
 8011968:	441a      	add	r2, r3
 801196a:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 801196e:	f241 21cd 	movw	r1, #4813	@ 0x12cd
 8011972:	fb01 f303 	mul.w	r3, r1, r3
 8011976:	4413      	add	r3, r2
 8011978:	f503 6200 	add.w	r2, r3, #2048	@ 0x800
    dataptr[4] = (DCTELEM)
 801197c:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 8011980:	3310      	adds	r3, #16
      DESCALE(z2 + z3 + MULTIPLY(tmp1, FIX(0.062335650)) /* c4-c6-c10 */
 8011982:	1312      	asrs	r2, r2, #12
    dataptr[4] = (DCTELEM)
 8011984:	601a      	str	r2, [r3, #0]
	      - MULTIPLY(tmp2, FIX(1.356927976))         /* c2 */
	      + MULTIPLY(tmp4, FIX(0.587485545)),        /* c8 */
	      CONST_BITS-1);
    dataptr[6] = (DCTELEM)
      DESCALE(z1 + z3 - MULTIPLY(tmp0, FIX(1.620527200)) /* c2+c4-c6 */
 8011986:	6fba      	ldr	r2, [r7, #120]	@ 0x78
 8011988:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 801198a:	441a      	add	r2, r3
 801198c:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 8011990:	497b      	ldr	r1, [pc, #492]	@ (8011b80 <jpeg_fdct_11x11+0x450>)
 8011992:	fb01 f303 	mul.w	r3, r1, r3
 8011996:	441a      	add	r2, r3
 8011998:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 801199c:	4979      	ldr	r1, [pc, #484]	@ (8011b84 <jpeg_fdct_11x11+0x454>)
 801199e:	fb01 f303 	mul.w	r3, r1, r3
 80119a2:	4413      	add	r3, r2
 80119a4:	f503 6200 	add.w	r2, r3, #2048	@ 0x800
    dataptr[6] = (DCTELEM)
 80119a8:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 80119ac:	3318      	adds	r3, #24
      DESCALE(z1 + z3 - MULTIPLY(tmp0, FIX(1.620527200)) /* c2+c4-c6 */
 80119ae:	1312      	asrs	r2, r2, #12
    dataptr[6] = (DCTELEM)
 80119b0:	601a      	str	r2, [r3, #0]
	      - MULTIPLY(tmp2, FIX(0.788749120)),        /* c8+c10 */
	      CONST_BITS-1);

    /* Odd part */

    tmp1 = MULTIPLY(tmp10 + tmp11, FIX(1.286413905));    /* c3 */
 80119b2:	f8d7 208c 	ldr.w	r2, [r7, #140]	@ 0x8c
 80119b6:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 80119ba:	4413      	add	r3, r2
 80119bc:	f642 122a 	movw	r2, #10538	@ 0x292a
 80119c0:	fb02 f303 	mul.w	r3, r2, r3
 80119c4:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
    tmp2 = MULTIPLY(tmp10 + tmp12, FIX(1.068791298));    /* c5 */
 80119c8:	f8d7 208c 	ldr.w	r2, [r7, #140]	@ 0x8c
 80119cc:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 80119d0:	4413      	add	r3, r2
 80119d2:	f242 2234 	movw	r2, #8756	@ 0x2234
 80119d6:	fb02 f303 	mul.w	r3, r2, r3
 80119da:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
    tmp3 = MULTIPLY(tmp10 + tmp13, FIX(0.764581576));    /* c7 */
 80119de:	f8d7 208c 	ldr.w	r2, [r7, #140]	@ 0x8c
 80119e2:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 80119e6:	4413      	add	r3, r2
 80119e8:	f641 0277 	movw	r2, #6263	@ 0x1877
 80119ec:	fb02 f303 	mul.w	r3, r2, r3
 80119f0:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
    tmp0 = tmp1 + tmp2 + tmp3 - MULTIPLY(tmp10, FIX(1.719967871)) /* c7+c5+c3-c1 */
 80119f4:	f8d7 20a0 	ldr.w	r2, [r7, #160]	@ 0xa0
 80119f8:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 80119fc:	441a      	add	r2, r3
 80119fe:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8011a02:	441a      	add	r2, r3
 8011a04:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8011a08:	495f      	ldr	r1, [pc, #380]	@ (8011b88 <jpeg_fdct_11x11+0x458>)
 8011a0a:	fb01 f303 	mul.w	r3, r1, r3
 8011a0e:	441a      	add	r2, r3
	   + MULTIPLY(tmp14, FIX(0.398430003));          /* c9 */
 8011a10:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8011a12:	f44f 614c 	mov.w	r1, #3264	@ 0xcc0
 8011a16:	fb01 f303 	mul.w	r3, r1, r3
    tmp0 = tmp1 + tmp2 + tmp3 - MULTIPLY(tmp10, FIX(1.719967871)) /* c7+c5+c3-c1 */
 8011a1a:	4413      	add	r3, r2
 8011a1c:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
    tmp4 = MULTIPLY(tmp11 + tmp12, - FIX(0.764581576));  /* -c7 */
 8011a20:	f8d7 2088 	ldr.w	r2, [r7, #136]	@ 0x88
 8011a24:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8011a28:	4413      	add	r3, r2
 8011a2a:	4a58      	ldr	r2, [pc, #352]	@ (8011b8c <jpeg_fdct_11x11+0x45c>)
 8011a2c:	fb02 f303 	mul.w	r3, r2, r3
 8011a30:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
    tmp5 = MULTIPLY(tmp11 + tmp13, - FIX(1.399818907));  /* -c1 */
 8011a34:	f8d7 2088 	ldr.w	r2, [r7, #136]	@ 0x88
 8011a38:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8011a3c:	4413      	add	r3, r2
 8011a3e:	4a54      	ldr	r2, [pc, #336]	@ (8011b90 <jpeg_fdct_11x11+0x460>)
 8011a40:	fb02 f303 	mul.w	r3, r2, r3
 8011a44:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
    tmp1 += tmp4 + tmp5 + MULTIPLY(tmp11, FIX(1.276416582)) /* c9+c7+c1-c3 */
 8011a48:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 8011a4c:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 8011a50:	441a      	add	r2, r3
 8011a52:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8011a56:	f642 01d8 	movw	r1, #10456	@ 0x28d8
 8011a5a:	fb01 f303 	mul.w	r3, r1, r3
 8011a5e:	441a      	add	r2, r3
	    - MULTIPLY(tmp14, FIX(1.068791298));         /* c5 */
 8011a60:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8011a62:	494c      	ldr	r1, [pc, #304]	@ (8011b94 <jpeg_fdct_11x11+0x464>)
 8011a64:	fb01 f303 	mul.w	r3, r1, r3
 8011a68:	4413      	add	r3, r2
    tmp1 += tmp4 + tmp5 + MULTIPLY(tmp11, FIX(1.276416582)) /* c9+c7+c1-c3 */
 8011a6a:	f8d7 20a0 	ldr.w	r2, [r7, #160]	@ 0xa0
 8011a6e:	4413      	add	r3, r2
 8011a70:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
    tmp10 = MULTIPLY(tmp12 + tmp13, FIX(0.398430003));   /* c9 */
 8011a74:	f8d7 2084 	ldr.w	r2, [r7, #132]	@ 0x84
 8011a78:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8011a7c:	4413      	add	r3, r2
 8011a7e:	f44f 624c 	mov.w	r2, #3264	@ 0xcc0
 8011a82:	fb02 f303 	mul.w	r3, r2, r3
 8011a86:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
    tmp2 += tmp4 + tmp10 - MULTIPLY(tmp12, FIX(1.989053629)) /* c9+c5+c3-c7 */
 8011a8a:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 8011a8e:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8011a92:	441a      	add	r2, r3
 8011a94:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8011a98:	493f      	ldr	r1, [pc, #252]	@ (8011b98 <jpeg_fdct_11x11+0x468>)
 8011a9a:	fb01 f303 	mul.w	r3, r1, r3
 8011a9e:	441a      	add	r2, r3
	    + MULTIPLY(tmp14, FIX(1.399818907));         /* c1 */
 8011aa0:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8011aa2:	f642 41cb 	movw	r1, #11467	@ 0x2ccb
 8011aa6:	fb01 f303 	mul.w	r3, r1, r3
 8011aaa:	4413      	add	r3, r2
    tmp2 += tmp4 + tmp10 - MULTIPLY(tmp12, FIX(1.989053629)) /* c9+c5+c3-c7 */
 8011aac:	f8d7 209c 	ldr.w	r2, [r7, #156]	@ 0x9c
 8011ab0:	4413      	add	r3, r2
 8011ab2:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
    tmp3 += tmp5 + tmp10 + MULTIPLY(tmp13, FIX(1.305598626)) /* c1+c5-c9-c7 */
 8011ab6:	f8d7 2090 	ldr.w	r2, [r7, #144]	@ 0x90
 8011aba:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8011abe:	441a      	add	r2, r3
 8011ac0:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8011ac4:	f642 11c7 	movw	r1, #10695	@ 0x29c7
 8011ac8:	fb01 f303 	mul.w	r3, r1, r3
 8011acc:	441a      	add	r2, r3
	    - MULTIPLY(tmp14, FIX(1.286413905));         /* c3 */
 8011ace:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8011ad0:	4932      	ldr	r1, [pc, #200]	@ (8011b9c <jpeg_fdct_11x11+0x46c>)
 8011ad2:	fb01 f303 	mul.w	r3, r1, r3
 8011ad6:	4413      	add	r3, r2
    tmp3 += tmp5 + tmp10 + MULTIPLY(tmp13, FIX(1.305598626)) /* c1+c5-c9-c7 */
 8011ad8:	f8d7 2098 	ldr.w	r2, [r7, #152]	@ 0x98
 8011adc:	4413      	add	r3, r2
 8011ade:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98

    dataptr[1] = (DCTELEM) DESCALE(tmp0, CONST_BITS-1);
 8011ae2:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 8011ae6:	f503 6200 	add.w	r2, r3, #2048	@ 0x800
 8011aea:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 8011aee:	3304      	adds	r3, #4
 8011af0:	1312      	asrs	r2, r2, #12
 8011af2:	601a      	str	r2, [r3, #0]
    dataptr[3] = (DCTELEM) DESCALE(tmp1, CONST_BITS-1);
 8011af4:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8011af8:	f503 6200 	add.w	r2, r3, #2048	@ 0x800
 8011afc:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 8011b00:	330c      	adds	r3, #12
 8011b02:	1312      	asrs	r2, r2, #12
 8011b04:	601a      	str	r2, [r3, #0]
    dataptr[5] = (DCTELEM) DESCALE(tmp2, CONST_BITS-1);
 8011b06:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8011b0a:	f503 6200 	add.w	r2, r3, #2048	@ 0x800
 8011b0e:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 8011b12:	3314      	adds	r3, #20
 8011b14:	1312      	asrs	r2, r2, #12
 8011b16:	601a      	str	r2, [r3, #0]
    dataptr[7] = (DCTELEM) DESCALE(tmp3, CONST_BITS-1);
 8011b18:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8011b1c:	f503 6200 	add.w	r2, r3, #2048	@ 0x800
 8011b20:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 8011b24:	331c      	adds	r3, #28
 8011b26:	1312      	asrs	r2, r2, #12
 8011b28:	601a      	str	r2, [r3, #0]

    ctr++;
 8011b2a:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8011b2e:	3301      	adds	r3, #1
 8011b30:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac

    if (ctr != DCTSIZE) {
 8011b34:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8011b38:	2b08      	cmp	r3, #8
 8011b3a:	d009      	beq.n	8011b50 <jpeg_fdct_11x11+0x420>
      if (ctr == 11)
 8011b3c:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8011b40:	2b0b      	cmp	r3, #11
 8011b42:	d00a      	beq.n	8011b5a <jpeg_fdct_11x11+0x42a>
	break;			/* Done. */
      dataptr += DCTSIZE;	/* advance pointer to next row */
 8011b44:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 8011b48:	3320      	adds	r3, #32
 8011b4a:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8011b4e:	e5fb      	b.n	8011748 <jpeg_fdct_11x11+0x18>
    } else
      dataptr = workspace;	/* switch pointer to extended workspace */
 8011b50:	f107 0310 	add.w	r3, r7, #16
 8011b54:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
    elemptr = sample_data[ctr] + start_col;
 8011b58:	e5f6      	b.n	8011748 <jpeg_fdct_11x11+0x18>
	break;			/* Done. */
 8011b5a:	bf00      	nop
   * We must also scale the output by (8/11)**2 = 64/121, which we partially
   * fold into the constant multipliers and final/initial shifting:
   * cK now represents sqrt(2) * cos(K*pi/22) * 128/121.
   */

  dataptr = data;
 8011b5c:	68fb      	ldr	r3, [r7, #12]
 8011b5e:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
  wsptr = workspace;
 8011b62:	f107 0310 	add.w	r3, r7, #16
 8011b66:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
  for (ctr = DCTSIZE-1; ctr >= 0; ctr--) {
 8011b6a:	2307      	movs	r3, #7
 8011b6c:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 8011b70:	e205      	b.n	8011f7e <jpeg_fdct_11x11+0x84e>
 8011b72:	bf00      	nop
 8011b74:	ffffdf6a 	.word	0xffffdf6a
 8011b78:	ffffd37d 	.word	0xffffd37d
 8011b7c:	ffffd494 	.word	0xffffd494
 8011b80:	ffffcc25 	.word	0xffffcc25
 8011b84:	ffffe6c3 	.word	0xffffe6c3
 8011b88:	ffffc8f6 	.word	0xffffc8f6
 8011b8c:	ffffe789 	.word	0xffffe789
 8011b90:	ffffd335 	.word	0xffffd335
 8011b94:	ffffddcc 	.word	0xffffddcc
 8011b98:	ffffc05a 	.word	0xffffc05a
 8011b9c:	ffffd6d6 	.word	0xffffd6d6
    /* Even part */

    tmp0 = dataptr[DCTSIZE*0] + wsptr[DCTSIZE*2];
 8011ba0:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 8011ba4:	681a      	ldr	r2, [r3, #0]
 8011ba6:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 8011baa:	3340      	adds	r3, #64	@ 0x40
 8011bac:	681b      	ldr	r3, [r3, #0]
 8011bae:	4413      	add	r3, r2
 8011bb0:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
    tmp1 = dataptr[DCTSIZE*1] + wsptr[DCTSIZE*1];
 8011bb4:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 8011bb8:	3320      	adds	r3, #32
 8011bba:	681a      	ldr	r2, [r3, #0]
 8011bbc:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 8011bc0:	3320      	adds	r3, #32
 8011bc2:	681b      	ldr	r3, [r3, #0]
 8011bc4:	4413      	add	r3, r2
 8011bc6:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
    tmp2 = dataptr[DCTSIZE*2] + wsptr[DCTSIZE*0];
 8011bca:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 8011bce:	3340      	adds	r3, #64	@ 0x40
 8011bd0:	681a      	ldr	r2, [r3, #0]
 8011bd2:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 8011bd6:	681b      	ldr	r3, [r3, #0]
 8011bd8:	4413      	add	r3, r2
 8011bda:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
    tmp3 = dataptr[DCTSIZE*3] + dataptr[DCTSIZE*7];
 8011bde:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 8011be2:	3360      	adds	r3, #96	@ 0x60
 8011be4:	681a      	ldr	r2, [r3, #0]
 8011be6:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 8011bea:	33e0      	adds	r3, #224	@ 0xe0
 8011bec:	681b      	ldr	r3, [r3, #0]
 8011bee:	4413      	add	r3, r2
 8011bf0:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
    tmp4 = dataptr[DCTSIZE*4] + dataptr[DCTSIZE*6];
 8011bf4:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 8011bf8:	3380      	adds	r3, #128	@ 0x80
 8011bfa:	681a      	ldr	r2, [r3, #0]
 8011bfc:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 8011c00:	33c0      	adds	r3, #192	@ 0xc0
 8011c02:	681b      	ldr	r3, [r3, #0]
 8011c04:	4413      	add	r3, r2
 8011c06:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
    tmp5 = dataptr[DCTSIZE*5];
 8011c0a:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 8011c0e:	33a0      	adds	r3, #160	@ 0xa0
 8011c10:	681b      	ldr	r3, [r3, #0]
 8011c12:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90

    tmp10 = dataptr[DCTSIZE*0] - wsptr[DCTSIZE*2];
 8011c16:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 8011c1a:	681a      	ldr	r2, [r3, #0]
 8011c1c:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 8011c20:	3340      	adds	r3, #64	@ 0x40
 8011c22:	681b      	ldr	r3, [r3, #0]
 8011c24:	1ad3      	subs	r3, r2, r3
 8011c26:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
    tmp11 = dataptr[DCTSIZE*1] - wsptr[DCTSIZE*1];
 8011c2a:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 8011c2e:	3320      	adds	r3, #32
 8011c30:	681a      	ldr	r2, [r3, #0]
 8011c32:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 8011c36:	3320      	adds	r3, #32
 8011c38:	681b      	ldr	r3, [r3, #0]
 8011c3a:	1ad3      	subs	r3, r2, r3
 8011c3c:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
    tmp12 = dataptr[DCTSIZE*2] - wsptr[DCTSIZE*0];
 8011c40:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 8011c44:	3340      	adds	r3, #64	@ 0x40
 8011c46:	681a      	ldr	r2, [r3, #0]
 8011c48:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 8011c4c:	681b      	ldr	r3, [r3, #0]
 8011c4e:	1ad3      	subs	r3, r2, r3
 8011c50:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
    tmp13 = dataptr[DCTSIZE*3] - dataptr[DCTSIZE*7];
 8011c54:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 8011c58:	3360      	adds	r3, #96	@ 0x60
 8011c5a:	681a      	ldr	r2, [r3, #0]
 8011c5c:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 8011c60:	33e0      	adds	r3, #224	@ 0xe0
 8011c62:	681b      	ldr	r3, [r3, #0]
 8011c64:	1ad3      	subs	r3, r2, r3
 8011c66:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
    tmp14 = dataptr[DCTSIZE*4] - dataptr[DCTSIZE*6];
 8011c6a:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 8011c6e:	3380      	adds	r3, #128	@ 0x80
 8011c70:	681a      	ldr	r2, [r3, #0]
 8011c72:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 8011c76:	33c0      	adds	r3, #192	@ 0xc0
 8011c78:	681b      	ldr	r3, [r3, #0]
 8011c7a:	1ad3      	subs	r3, r2, r3
 8011c7c:	67fb      	str	r3, [r7, #124]	@ 0x7c

    dataptr[DCTSIZE*0] = (DCTELEM)
      DESCALE(MULTIPLY(tmp0 + tmp1 + tmp2 + tmp3 + tmp4 + tmp5,
 8011c7e:	f8d7 20a4 	ldr.w	r2, [r7, #164]	@ 0xa4
 8011c82:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8011c86:	441a      	add	r2, r3
 8011c88:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8011c8c:	441a      	add	r2, r3
 8011c8e:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8011c92:	441a      	add	r2, r3
 8011c94:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8011c98:	441a      	add	r2, r3
 8011c9a:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 8011c9e:	4413      	add	r3, r2
 8011ca0:	f242 12da 	movw	r2, #8666	@ 0x21da
 8011ca4:	fb02 f303 	mul.w	r3, r2, r3
 8011ca8:	f503 4380 	add.w	r3, r3, #16384	@ 0x4000
 8011cac:	13da      	asrs	r2, r3, #15
    dataptr[DCTSIZE*0] = (DCTELEM)
 8011cae:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 8011cb2:	601a      	str	r2, [r3, #0]
		       FIX(1.057851240)),                /* 128/121 */
	      CONST_BITS+2);
    tmp5 += tmp5;
 8011cb4:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 8011cb8:	005b      	lsls	r3, r3, #1
 8011cba:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
    tmp0 -= tmp5;
 8011cbe:	f8d7 20a4 	ldr.w	r2, [r7, #164]	@ 0xa4
 8011cc2:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 8011cc6:	1ad3      	subs	r3, r2, r3
 8011cc8:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
    tmp1 -= tmp5;
 8011ccc:	f8d7 20a0 	ldr.w	r2, [r7, #160]	@ 0xa0
 8011cd0:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 8011cd4:	1ad3      	subs	r3, r2, r3
 8011cd6:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
    tmp2 -= tmp5;
 8011cda:	f8d7 209c 	ldr.w	r2, [r7, #156]	@ 0x9c
 8011cde:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 8011ce2:	1ad3      	subs	r3, r2, r3
 8011ce4:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
    tmp3 -= tmp5;
 8011ce8:	f8d7 2098 	ldr.w	r2, [r7, #152]	@ 0x98
 8011cec:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 8011cf0:	1ad3      	subs	r3, r2, r3
 8011cf2:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
    tmp4 -= tmp5;
 8011cf6:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 8011cfa:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 8011cfe:	1ad3      	subs	r3, r2, r3
 8011d00:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
    z1 = MULTIPLY(tmp0 + tmp3, FIX(1.435427942)) +       /* c2 */
 8011d04:	f8d7 20a4 	ldr.w	r2, [r7, #164]	@ 0xa4
 8011d08:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8011d0c:	4413      	add	r3, r2
 8011d0e:	f642 52ef 	movw	r2, #11759	@ 0x2def
 8011d12:	fb03 f202 	mul.w	r2, r3, r2
	 MULTIPLY(tmp2 + tmp4, FIX(0.212906922));        /* c10 */
 8011d16:	f8d7 109c 	ldr.w	r1, [r7, #156]	@ 0x9c
 8011d1a:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8011d1e:	440b      	add	r3, r1
 8011d20:	f44f 61da 	mov.w	r1, #1744	@ 0x6d0
 8011d24:	fb01 f303 	mul.w	r3, r1, r3
    z1 = MULTIPLY(tmp0 + tmp3, FIX(1.435427942)) +       /* c2 */
 8011d28:	4413      	add	r3, r2
 8011d2a:	67bb      	str	r3, [r7, #120]	@ 0x78
    z2 = MULTIPLY(tmp1 - tmp3, FIX(0.979689713));        /* c6 */
 8011d2c:	f8d7 20a0 	ldr.w	r2, [r7, #160]	@ 0xa0
 8011d30:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8011d34:	1ad3      	subs	r3, r2, r3
 8011d36:	f641 725a 	movw	r2, #8026	@ 0x1f5a
 8011d3a:	fb02 f303 	mul.w	r3, r2, r3
 8011d3e:	677b      	str	r3, [r7, #116]	@ 0x74
    z3 = MULTIPLY(tmp0 - tmp1, FIX(1.258538479));        /* c4 */
 8011d40:	f8d7 20a4 	ldr.w	r2, [r7, #164]	@ 0xa4
 8011d44:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8011d48:	1ad3      	subs	r3, r2, r3
 8011d4a:	f642 0246 	movw	r2, #10310	@ 0x2846
 8011d4e:	fb02 f303 	mul.w	r3, r2, r3
 8011d52:	673b      	str	r3, [r7, #112]	@ 0x70
    dataptr[DCTSIZE*2] = (DCTELEM)
      DESCALE(z1 + z2 - MULTIPLY(tmp3, FIX(1.077210542)) /* c2+c8-c6 */
 8011d54:	6fba      	ldr	r2, [r7, #120]	@ 0x78
 8011d56:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8011d58:	441a      	add	r2, r3
 8011d5a:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8011d5e:	498e      	ldr	r1, [pc, #568]	@ (8011f98 <jpeg_fdct_11x11+0x868>)
 8011d60:	fb01 f303 	mul.w	r3, r1, r3
 8011d64:	441a      	add	r2, r3
 8011d66:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8011d6a:	498c      	ldr	r1, [pc, #560]	@ (8011f9c <jpeg_fdct_11x11+0x86c>)
 8011d6c:	fb01 f303 	mul.w	r3, r1, r3
 8011d70:	4413      	add	r3, r2
 8011d72:	f503 4280 	add.w	r2, r3, #16384	@ 0x4000
    dataptr[DCTSIZE*2] = (DCTELEM)
 8011d76:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 8011d7a:	3340      	adds	r3, #64	@ 0x40
      DESCALE(z1 + z2 - MULTIPLY(tmp3, FIX(1.077210542)) /* c2+c8-c6 */
 8011d7c:	13d2      	asrs	r2, r2, #15
    dataptr[DCTSIZE*2] = (DCTELEM)
 8011d7e:	601a      	str	r2, [r3, #0]
	      - MULTIPLY(tmp4, FIX(1.471445400)),        /* c4+c10 */
	      CONST_BITS+2);
    dataptr[DCTSIZE*4] = (DCTELEM)
      DESCALE(z2 + z3 + MULTIPLY(tmp1, FIX(0.065941844)) /* c4-c6-c10 */
 8011d80:	6f7a      	ldr	r2, [r7, #116]	@ 0x74
 8011d82:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8011d84:	441a      	add	r2, r3
 8011d86:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8011d8a:	f44f 7107 	mov.w	r1, #540	@ 0x21c
 8011d8e:	fb01 f303 	mul.w	r3, r1, r3
 8011d92:	441a      	add	r2, r3
 8011d94:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8011d98:	4981      	ldr	r1, [pc, #516]	@ (8011fa0 <jpeg_fdct_11x11+0x870>)
 8011d9a:	fb01 f303 	mul.w	r3, r1, r3
 8011d9e:	441a      	add	r2, r3
 8011da0:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8011da4:	f241 31e3 	movw	r1, #5091	@ 0x13e3
 8011da8:	fb01 f303 	mul.w	r3, r1, r3
 8011dac:	4413      	add	r3, r2
 8011dae:	f503 4280 	add.w	r2, r3, #16384	@ 0x4000
    dataptr[DCTSIZE*4] = (DCTELEM)
 8011db2:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 8011db6:	3380      	adds	r3, #128	@ 0x80
      DESCALE(z2 + z3 + MULTIPLY(tmp1, FIX(0.065941844)) /* c4-c6-c10 */
 8011db8:	13d2      	asrs	r2, r2, #15
    dataptr[DCTSIZE*4] = (DCTELEM)
 8011dba:	601a      	str	r2, [r3, #0]
	      - MULTIPLY(tmp2, FIX(1.435427942))         /* c2 */
	      + MULTIPLY(tmp4, FIX(0.621472312)),        /* c8 */
	      CONST_BITS+2);
    dataptr[DCTSIZE*6] = (DCTELEM)
      DESCALE(z1 + z3 - MULTIPLY(tmp0, FIX(1.714276708)) /* c2+c4-c6 */
 8011dbc:	6fba      	ldr	r2, [r7, #120]	@ 0x78
 8011dbe:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8011dc0:	441a      	add	r2, r3
 8011dc2:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 8011dc6:	4977      	ldr	r1, [pc, #476]	@ (8011fa4 <jpeg_fdct_11x11+0x874>)
 8011dc8:	fb01 f303 	mul.w	r3, r1, r3
 8011dcc:	441a      	add	r2, r3
 8011dce:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8011dd2:	4975      	ldr	r1, [pc, #468]	@ (8011fa8 <jpeg_fdct_11x11+0x878>)
 8011dd4:	fb01 f303 	mul.w	r3, r1, r3
 8011dd8:	4413      	add	r3, r2
 8011dda:	f503 4280 	add.w	r2, r3, #16384	@ 0x4000
    dataptr[DCTSIZE*6] = (DCTELEM)
 8011dde:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 8011de2:	33c0      	adds	r3, #192	@ 0xc0
      DESCALE(z1 + z3 - MULTIPLY(tmp0, FIX(1.714276708)) /* c2+c4-c6 */
 8011de4:	13d2      	asrs	r2, r2, #15
    dataptr[DCTSIZE*6] = (DCTELEM)
 8011de6:	601a      	str	r2, [r3, #0]
	      - MULTIPLY(tmp2, FIX(0.834379234)),        /* c8+c10 */
	      CONST_BITS+2);

    /* Odd part */

    tmp1 = MULTIPLY(tmp10 + tmp11, FIX(1.360834544));    /* c3 */
 8011de8:	f8d7 208c 	ldr.w	r2, [r7, #140]	@ 0x8c
 8011dec:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8011df0:	4413      	add	r3, r2
 8011df2:	f642 328c 	movw	r2, #11148	@ 0x2b8c
 8011df6:	fb02 f303 	mul.w	r3, r2, r3
 8011dfa:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
    tmp2 = MULTIPLY(tmp10 + tmp12, FIX(1.130622199));    /* c5 */
 8011dfe:	f8d7 208c 	ldr.w	r2, [r7, #140]	@ 0x8c
 8011e02:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8011e06:	4413      	add	r3, r2
 8011e08:	f242 422e 	movw	r2, #9262	@ 0x242e
 8011e0c:	fb02 f303 	mul.w	r3, r2, r3
 8011e10:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
    tmp3 = MULTIPLY(tmp10 + tmp13, FIX(0.808813568));    /* c7 */
 8011e14:	f8d7 208c 	ldr.w	r2, [r7, #140]	@ 0x8c
 8011e18:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8011e1c:	4413      	add	r3, r2
 8011e1e:	f641 12e2 	movw	r2, #6626	@ 0x19e2
 8011e22:	fb02 f303 	mul.w	r3, r2, r3
 8011e26:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
    tmp0 = tmp1 + tmp2 + tmp3 - MULTIPLY(tmp10, FIX(1.819470145)) /* c7+c5+c3-c1 */
 8011e2a:	f8d7 20a0 	ldr.w	r2, [r7, #160]	@ 0xa0
 8011e2e:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8011e32:	441a      	add	r2, r3
 8011e34:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8011e38:	441a      	add	r2, r3
 8011e3a:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8011e3e:	495b      	ldr	r1, [pc, #364]	@ (8011fac <jpeg_fdct_11x11+0x87c>)
 8011e40:	fb01 f303 	mul.w	r3, r1, r3
 8011e44:	441a      	add	r2, r3
	   + MULTIPLY(tmp14, FIX(0.421479672));          /* c9 */
 8011e46:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8011e48:	f640 517d 	movw	r1, #3453	@ 0xd7d
 8011e4c:	fb01 f303 	mul.w	r3, r1, r3
    tmp0 = tmp1 + tmp2 + tmp3 - MULTIPLY(tmp10, FIX(1.819470145)) /* c7+c5+c3-c1 */
 8011e50:	4413      	add	r3, r2
 8011e52:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
    tmp4 = MULTIPLY(tmp11 + tmp12, - FIX(0.808813568));  /* -c7 */
 8011e56:	f8d7 2088 	ldr.w	r2, [r7, #136]	@ 0x88
 8011e5a:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8011e5e:	4413      	add	r3, r2
 8011e60:	4a53      	ldr	r2, [pc, #332]	@ (8011fb0 <jpeg_fdct_11x11+0x880>)
 8011e62:	fb02 f303 	mul.w	r3, r2, r3
 8011e66:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
    tmp5 = MULTIPLY(tmp11 + tmp13, - FIX(1.480800167));  /* -c1 */
 8011e6a:	f8d7 2088 	ldr.w	r2, [r7, #136]	@ 0x88
 8011e6e:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8011e72:	4413      	add	r3, r2
 8011e74:	4a4f      	ldr	r2, [pc, #316]	@ (8011fb4 <jpeg_fdct_11x11+0x884>)
 8011e76:	fb02 f303 	mul.w	r3, r2, r3
 8011e7a:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
    tmp1 += tmp4 + tmp5 + MULTIPLY(tmp11, FIX(1.350258864)) /* c9+c7+c1-c3 */
 8011e7e:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 8011e82:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 8011e86:	441a      	add	r2, r3
 8011e88:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8011e8c:	f642 3135 	movw	r1, #11061	@ 0x2b35
 8011e90:	fb01 f303 	mul.w	r3, r1, r3
 8011e94:	441a      	add	r2, r3
	    - MULTIPLY(tmp14, FIX(1.130622199));         /* c5 */
 8011e96:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8011e98:	4947      	ldr	r1, [pc, #284]	@ (8011fb8 <jpeg_fdct_11x11+0x888>)
 8011e9a:	fb01 f303 	mul.w	r3, r1, r3
 8011e9e:	4413      	add	r3, r2
    tmp1 += tmp4 + tmp5 + MULTIPLY(tmp11, FIX(1.350258864)) /* c9+c7+c1-c3 */
 8011ea0:	f8d7 20a0 	ldr.w	r2, [r7, #160]	@ 0xa0
 8011ea4:	4413      	add	r3, r2
 8011ea6:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
    tmp10 = MULTIPLY(tmp12 + tmp13, FIX(0.421479672));   /* c9 */
 8011eaa:	f8d7 2084 	ldr.w	r2, [r7, #132]	@ 0x84
 8011eae:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8011eb2:	4413      	add	r3, r2
 8011eb4:	f640 527d 	movw	r2, #3453	@ 0xd7d
 8011eb8:	fb02 f303 	mul.w	r3, r2, r3
 8011ebc:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
    tmp2 += tmp4 + tmp10 - MULTIPLY(tmp12, FIX(2.104122847)) /* c9+c5+c3-c7 */
 8011ec0:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 8011ec4:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8011ec8:	441a      	add	r2, r3
 8011eca:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8011ece:	493b      	ldr	r1, [pc, #236]	@ (8011fbc <jpeg_fdct_11x11+0x88c>)
 8011ed0:	fb01 f303 	mul.w	r3, r1, r3
 8011ed4:	441a      	add	r2, r3
	    + MULTIPLY(tmp14, FIX(1.480800167));         /* c1 */
 8011ed6:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8011ed8:	f642 7163 	movw	r1, #12131	@ 0x2f63
 8011edc:	fb01 f303 	mul.w	r3, r1, r3
 8011ee0:	4413      	add	r3, r2
    tmp2 += tmp4 + tmp10 - MULTIPLY(tmp12, FIX(2.104122847)) /* c9+c5+c3-c7 */
 8011ee2:	f8d7 209c 	ldr.w	r2, [r7, #156]	@ 0x9c
 8011ee6:	4413      	add	r3, r2
 8011ee8:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
    tmp3 += tmp5 + tmp10 + MULTIPLY(tmp13, FIX(1.381129125)) /* c1+c5-c9-c7 */
 8011eec:	f8d7 2090 	ldr.w	r2, [r7, #144]	@ 0x90
 8011ef0:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8011ef4:	441a      	add	r2, r3
 8011ef6:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8011efa:	f642 4132 	movw	r1, #11314	@ 0x2c32
 8011efe:	fb01 f303 	mul.w	r3, r1, r3
 8011f02:	441a      	add	r2, r3
	    - MULTIPLY(tmp14, FIX(1.360834544));         /* c3 */
 8011f04:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8011f06:	492e      	ldr	r1, [pc, #184]	@ (8011fc0 <jpeg_fdct_11x11+0x890>)
 8011f08:	fb01 f303 	mul.w	r3, r1, r3
 8011f0c:	4413      	add	r3, r2
    tmp3 += tmp5 + tmp10 + MULTIPLY(tmp13, FIX(1.381129125)) /* c1+c5-c9-c7 */
 8011f0e:	f8d7 2098 	ldr.w	r2, [r7, #152]	@ 0x98
 8011f12:	4413      	add	r3, r2
 8011f14:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98

    dataptr[DCTSIZE*1] = (DCTELEM) DESCALE(tmp0, CONST_BITS+2);
 8011f18:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 8011f1c:	f503 4280 	add.w	r2, r3, #16384	@ 0x4000
 8011f20:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 8011f24:	3320      	adds	r3, #32
 8011f26:	13d2      	asrs	r2, r2, #15
 8011f28:	601a      	str	r2, [r3, #0]
    dataptr[DCTSIZE*3] = (DCTELEM) DESCALE(tmp1, CONST_BITS+2);
 8011f2a:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8011f2e:	f503 4280 	add.w	r2, r3, #16384	@ 0x4000
 8011f32:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 8011f36:	3360      	adds	r3, #96	@ 0x60
 8011f38:	13d2      	asrs	r2, r2, #15
 8011f3a:	601a      	str	r2, [r3, #0]
    dataptr[DCTSIZE*5] = (DCTELEM) DESCALE(tmp2, CONST_BITS+2);
 8011f3c:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8011f40:	f503 4280 	add.w	r2, r3, #16384	@ 0x4000
 8011f44:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 8011f48:	33a0      	adds	r3, #160	@ 0xa0
 8011f4a:	13d2      	asrs	r2, r2, #15
 8011f4c:	601a      	str	r2, [r3, #0]
    dataptr[DCTSIZE*7] = (DCTELEM) DESCALE(tmp3, CONST_BITS+2);
 8011f4e:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8011f52:	f503 4280 	add.w	r2, r3, #16384	@ 0x4000
 8011f56:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 8011f5a:	33e0      	adds	r3, #224	@ 0xe0
 8011f5c:	13d2      	asrs	r2, r2, #15
 8011f5e:	601a      	str	r2, [r3, #0]

    dataptr++;			/* advance pointer to next column */
 8011f60:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 8011f64:	3304      	adds	r3, #4
 8011f66:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
    wsptr++;			/* advance pointer to next column */
 8011f6a:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 8011f6e:	3304      	adds	r3, #4
 8011f70:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
  for (ctr = DCTSIZE-1; ctr >= 0; ctr--) {
 8011f74:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8011f78:	3b01      	subs	r3, #1
 8011f7a:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 8011f7e:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8011f82:	2b00      	cmp	r3, #0
 8011f84:	f6bf ae0c 	bge.w	8011ba0 <jpeg_fdct_11x11+0x470>
  }
}
 8011f88:	bf00      	nop
 8011f8a:	bf00      	nop
 8011f8c:	37bc      	adds	r7, #188	@ 0xbc
 8011f8e:	46bd      	mov	sp, r7
 8011f90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011f94:	4770      	bx	lr
 8011f96:	bf00      	nop
 8011f98:	ffffdd87 	.word	0xffffdd87
 8011f9c:	ffffd0ea 	.word	0xffffd0ea
 8011fa0:	ffffd211 	.word	0xffffd211
 8011fa4:	ffffc925 	.word	0xffffc925
 8011fa8:	ffffe54d 	.word	0xffffe54d
 8011fac:	ffffc5c7 	.word	0xffffc5c7
 8011fb0:	ffffe61e 	.word	0xffffe61e
 8011fb4:	ffffd09d 	.word	0xffffd09d
 8011fb8:	ffffdbd2 	.word	0xffffdbd2
 8011fbc:	ffffbcab 	.word	0xffffbcab
 8011fc0:	ffffd474 	.word	0xffffd474

08011fc4 <jpeg_fdct_12x12>:
 * Perform the forward DCT on a 12x12 sample block.
 */

GLOBAL(void)
jpeg_fdct_12x12 (DCTELEM * data, JSAMPARRAY sample_data, JDIMENSION start_col)
{
 8011fc4:	b480      	push	{r7}
 8011fc6:	b0b5      	sub	sp, #212	@ 0xd4
 8011fc8:	af00      	add	r7, sp, #0
 8011fca:	60f8      	str	r0, [r7, #12]
 8011fcc:	60b9      	str	r1, [r7, #8]
 8011fce:	607a      	str	r2, [r7, #4]

  /* Pass 1: process rows. */
  /* Note results are scaled up by sqrt(8) compared to a true DCT. */
  /* cK represents sqrt(2) * cos(K*pi/24). */

  dataptr = data;
 8011fd0:	68fb      	ldr	r3, [r7, #12]
 8011fd2:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
  ctr = 0;
 8011fd6:	2300      	movs	r3, #0
 8011fd8:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
  for (;;) {
    elemptr = sample_data[ctr] + start_col;
 8011fdc:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8011fe0:	009b      	lsls	r3, r3, #2
 8011fe2:	68ba      	ldr	r2, [r7, #8]
 8011fe4:	4413      	add	r3, r2
 8011fe6:	681a      	ldr	r2, [r3, #0]
 8011fe8:	687b      	ldr	r3, [r7, #4]
 8011fea:	4413      	add	r3, r2
 8011fec:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0

    /* Even part */

    tmp0 = GETJSAMPLE(elemptr[0]) + GETJSAMPLE(elemptr[11]);
 8011ff0:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 8011ff4:	781b      	ldrb	r3, [r3, #0]
 8011ff6:	461a      	mov	r2, r3
 8011ff8:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 8011ffc:	330b      	adds	r3, #11
 8011ffe:	781b      	ldrb	r3, [r3, #0]
 8012000:	4413      	add	r3, r2
 8012002:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
    tmp1 = GETJSAMPLE(elemptr[1]) + GETJSAMPLE(elemptr[10]);
 8012006:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 801200a:	3301      	adds	r3, #1
 801200c:	781b      	ldrb	r3, [r3, #0]
 801200e:	461a      	mov	r2, r3
 8012010:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 8012014:	330a      	adds	r3, #10
 8012016:	781b      	ldrb	r3, [r3, #0]
 8012018:	4413      	add	r3, r2
 801201a:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
    tmp2 = GETJSAMPLE(elemptr[2]) + GETJSAMPLE(elemptr[9]);
 801201e:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 8012022:	3302      	adds	r3, #2
 8012024:	781b      	ldrb	r3, [r3, #0]
 8012026:	461a      	mov	r2, r3
 8012028:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 801202c:	3309      	adds	r3, #9
 801202e:	781b      	ldrb	r3, [r3, #0]
 8012030:	4413      	add	r3, r2
 8012032:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
    tmp3 = GETJSAMPLE(elemptr[3]) + GETJSAMPLE(elemptr[8]);
 8012036:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 801203a:	3303      	adds	r3, #3
 801203c:	781b      	ldrb	r3, [r3, #0]
 801203e:	461a      	mov	r2, r3
 8012040:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 8012044:	3308      	adds	r3, #8
 8012046:	781b      	ldrb	r3, [r3, #0]
 8012048:	4413      	add	r3, r2
 801204a:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
    tmp4 = GETJSAMPLE(elemptr[4]) + GETJSAMPLE(elemptr[7]);
 801204e:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 8012052:	3304      	adds	r3, #4
 8012054:	781b      	ldrb	r3, [r3, #0]
 8012056:	461a      	mov	r2, r3
 8012058:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 801205c:	3307      	adds	r3, #7
 801205e:	781b      	ldrb	r3, [r3, #0]
 8012060:	4413      	add	r3, r2
 8012062:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    tmp5 = GETJSAMPLE(elemptr[5]) + GETJSAMPLE(elemptr[6]);
 8012066:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 801206a:	3305      	adds	r3, #5
 801206c:	781b      	ldrb	r3, [r3, #0]
 801206e:	461a      	mov	r2, r3
 8012070:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 8012074:	3306      	adds	r3, #6
 8012076:	781b      	ldrb	r3, [r3, #0]
 8012078:	4413      	add	r3, r2
 801207a:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8

    tmp10 = tmp0 + tmp5;
 801207e:	f8d7 20bc 	ldr.w	r2, [r7, #188]	@ 0xbc
 8012082:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8012086:	4413      	add	r3, r2
 8012088:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
    tmp13 = tmp0 - tmp5;
 801208c:	f8d7 20bc 	ldr.w	r2, [r7, #188]	@ 0xbc
 8012090:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8012094:	1ad3      	subs	r3, r2, r3
 8012096:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
    tmp11 = tmp1 + tmp4;
 801209a:	f8d7 20b8 	ldr.w	r2, [r7, #184]	@ 0xb8
 801209e:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 80120a2:	4413      	add	r3, r2
 80120a4:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
    tmp14 = tmp1 - tmp4;
 80120a8:	f8d7 20b8 	ldr.w	r2, [r7, #184]	@ 0xb8
 80120ac:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 80120b0:	1ad3      	subs	r3, r2, r3
 80120b2:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
    tmp12 = tmp2 + tmp3;
 80120b6:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 80120ba:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 80120be:	4413      	add	r3, r2
 80120c0:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
    tmp15 = tmp2 - tmp3;
 80120c4:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 80120c8:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 80120cc:	1ad3      	subs	r3, r2, r3
 80120ce:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90

    tmp0 = GETJSAMPLE(elemptr[0]) - GETJSAMPLE(elemptr[11]);
 80120d2:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 80120d6:	781b      	ldrb	r3, [r3, #0]
 80120d8:	461a      	mov	r2, r3
 80120da:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 80120de:	330b      	adds	r3, #11
 80120e0:	781b      	ldrb	r3, [r3, #0]
 80120e2:	1ad3      	subs	r3, r2, r3
 80120e4:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
    tmp1 = GETJSAMPLE(elemptr[1]) - GETJSAMPLE(elemptr[10]);
 80120e8:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 80120ec:	3301      	adds	r3, #1
 80120ee:	781b      	ldrb	r3, [r3, #0]
 80120f0:	461a      	mov	r2, r3
 80120f2:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 80120f6:	330a      	adds	r3, #10
 80120f8:	781b      	ldrb	r3, [r3, #0]
 80120fa:	1ad3      	subs	r3, r2, r3
 80120fc:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
    tmp2 = GETJSAMPLE(elemptr[2]) - GETJSAMPLE(elemptr[9]);
 8012100:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 8012104:	3302      	adds	r3, #2
 8012106:	781b      	ldrb	r3, [r3, #0]
 8012108:	461a      	mov	r2, r3
 801210a:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 801210e:	3309      	adds	r3, #9
 8012110:	781b      	ldrb	r3, [r3, #0]
 8012112:	1ad3      	subs	r3, r2, r3
 8012114:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
    tmp3 = GETJSAMPLE(elemptr[3]) - GETJSAMPLE(elemptr[8]);
 8012118:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 801211c:	3303      	adds	r3, #3
 801211e:	781b      	ldrb	r3, [r3, #0]
 8012120:	461a      	mov	r2, r3
 8012122:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 8012126:	3308      	adds	r3, #8
 8012128:	781b      	ldrb	r3, [r3, #0]
 801212a:	1ad3      	subs	r3, r2, r3
 801212c:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
    tmp4 = GETJSAMPLE(elemptr[4]) - GETJSAMPLE(elemptr[7]);
 8012130:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 8012134:	3304      	adds	r3, #4
 8012136:	781b      	ldrb	r3, [r3, #0]
 8012138:	461a      	mov	r2, r3
 801213a:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 801213e:	3307      	adds	r3, #7
 8012140:	781b      	ldrb	r3, [r3, #0]
 8012142:	1ad3      	subs	r3, r2, r3
 8012144:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    tmp5 = GETJSAMPLE(elemptr[5]) - GETJSAMPLE(elemptr[6]);
 8012148:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 801214c:	3305      	adds	r3, #5
 801214e:	781b      	ldrb	r3, [r3, #0]
 8012150:	461a      	mov	r2, r3
 8012152:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 8012156:	3306      	adds	r3, #6
 8012158:	781b      	ldrb	r3, [r3, #0]
 801215a:	1ad3      	subs	r3, r2, r3
 801215c:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8

    /* Apply unsigned->signed conversion */
    dataptr[0] = (DCTELEM) (tmp10 + tmp11 + tmp12 - 12 * CENTERJSAMPLE);
 8012160:	f8d7 20a4 	ldr.w	r2, [r7, #164]	@ 0xa4
 8012164:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8012168:	441a      	add	r2, r3
 801216a:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 801216e:	4413      	add	r3, r2
 8012170:	f5a3 62c0 	sub.w	r2, r3, #1536	@ 0x600
 8012174:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8012178:	601a      	str	r2, [r3, #0]
    dataptr[6] = (DCTELEM) (tmp13 - tmp14 - tmp15);
 801217a:	f8d7 20a0 	ldr.w	r2, [r7, #160]	@ 0xa0
 801217e:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8012182:	1ad1      	subs	r1, r2, r3
 8012184:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8012188:	3318      	adds	r3, #24
 801218a:	f8d7 2090 	ldr.w	r2, [r7, #144]	@ 0x90
 801218e:	1a8a      	subs	r2, r1, r2
 8012190:	601a      	str	r2, [r3, #0]
    dataptr[4] = (DCTELEM)
      DESCALE(MULTIPLY(tmp10 - tmp12, FIX(1.224744871)), /* c4 */
 8012192:	f8d7 20a4 	ldr.w	r2, [r7, #164]	@ 0xa4
 8012196:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 801219a:	1ad3      	subs	r3, r2, r3
 801219c:	f242 7231 	movw	r2, #10033	@ 0x2731
 80121a0:	fb02 f303 	mul.w	r3, r2, r3
 80121a4:	f503 5280 	add.w	r2, r3, #4096	@ 0x1000
    dataptr[4] = (DCTELEM)
 80121a8:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 80121ac:	3310      	adds	r3, #16
      DESCALE(MULTIPLY(tmp10 - tmp12, FIX(1.224744871)), /* c4 */
 80121ae:	1352      	asrs	r2, r2, #13
    dataptr[4] = (DCTELEM)
 80121b0:	601a      	str	r2, [r3, #0]
	      CONST_BITS);
    dataptr[2] = (DCTELEM)
      DESCALE(tmp14 - tmp15 + MULTIPLY(tmp13 + tmp15, FIX(1.366025404)), /* c2 */
 80121b2:	f8d7 2098 	ldr.w	r2, [r7, #152]	@ 0x98
 80121b6:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 80121ba:	1ad2      	subs	r2, r2, r3
 80121bc:	f8d7 10a0 	ldr.w	r1, [r7, #160]	@ 0xa0
 80121c0:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 80121c4:	440b      	add	r3, r1
 80121c6:	f642 31b6 	movw	r1, #11190	@ 0x2bb6
 80121ca:	fb01 f303 	mul.w	r3, r1, r3
 80121ce:	4413      	add	r3, r2
 80121d0:	f503 5280 	add.w	r2, r3, #4096	@ 0x1000
    dataptr[2] = (DCTELEM)
 80121d4:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 80121d8:	3308      	adds	r3, #8
      DESCALE(tmp14 - tmp15 + MULTIPLY(tmp13 + tmp15, FIX(1.366025404)), /* c2 */
 80121da:	1352      	asrs	r2, r2, #13
    dataptr[2] = (DCTELEM)
 80121dc:	601a      	str	r2, [r3, #0]
	      CONST_BITS);

    /* Odd part */

    tmp10 = MULTIPLY(tmp1 + tmp4, FIX_0_541196100);    /* c9 */
 80121de:	f8d7 20b8 	ldr.w	r2, [r7, #184]	@ 0xb8
 80121e2:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 80121e6:	4413      	add	r3, r2
 80121e8:	f241 1251 	movw	r2, #4433	@ 0x1151
 80121ec:	fb02 f303 	mul.w	r3, r2, r3
 80121f0:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
    tmp14 = tmp10 + MULTIPLY(tmp1, FIX_0_765366865);   /* c3-c9 */
 80121f4:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 80121f8:	f641 027e 	movw	r2, #6270	@ 0x187e
 80121fc:	fb02 f303 	mul.w	r3, r2, r3
 8012200:	f8d7 20a4 	ldr.w	r2, [r7, #164]	@ 0xa4
 8012204:	4413      	add	r3, r2
 8012206:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
    tmp15 = tmp10 - MULTIPLY(tmp4, FIX_1_847759065);   /* c3+c9 */
 801220a:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 801220e:	4a66      	ldr	r2, [pc, #408]	@ (80123a8 <jpeg_fdct_12x12+0x3e4>)
 8012210:	fb02 f303 	mul.w	r3, r2, r3
 8012214:	f8d7 20a4 	ldr.w	r2, [r7, #164]	@ 0xa4
 8012218:	4413      	add	r3, r2
 801221a:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
    tmp12 = MULTIPLY(tmp0 + tmp2, FIX(1.121971054));   /* c5 */
 801221e:	f8d7 20bc 	ldr.w	r2, [r7, #188]	@ 0xbc
 8012222:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 8012226:	4413      	add	r3, r2
 8012228:	f242 32e7 	movw	r2, #9191	@ 0x23e7
 801222c:	fb02 f303 	mul.w	r3, r2, r3
 8012230:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
    tmp13 = MULTIPLY(tmp0 + tmp3, FIX(0.860918669));   /* c7 */
 8012234:	f8d7 20bc 	ldr.w	r2, [r7, #188]	@ 0xbc
 8012238:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 801223c:	4413      	add	r3, r2
 801223e:	f641 328d 	movw	r2, #7053	@ 0x1b8d
 8012242:	fb02 f303 	mul.w	r3, r2, r3
 8012246:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
    tmp10 = tmp12 + tmp13 + tmp14 - MULTIPLY(tmp0, FIX(0.580774953)) /* c5+c7-c1 */
 801224a:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 801224e:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8012252:	441a      	add	r2, r3
 8012254:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8012258:	441a      	add	r2, r3
 801225a:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
 801225e:	4953      	ldr	r1, [pc, #332]	@ (80123ac <jpeg_fdct_12x12+0x3e8>)
 8012260:	fb01 f303 	mul.w	r3, r1, r3
 8012264:	441a      	add	r2, r3
	    + MULTIPLY(tmp5, FIX(0.184591911));        /* c11 */
 8012266:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 801226a:	f44f 61bd 	mov.w	r1, #1512	@ 0x5e8
 801226e:	fb01 f303 	mul.w	r3, r1, r3
    tmp10 = tmp12 + tmp13 + tmp14 - MULTIPLY(tmp0, FIX(0.580774953)) /* c5+c7-c1 */
 8012272:	4413      	add	r3, r2
 8012274:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
    tmp11 = MULTIPLY(tmp2 + tmp3, - FIX(0.184591911)); /* -c11 */
 8012278:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 801227c:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 8012280:	4413      	add	r3, r2
 8012282:	4a4b      	ldr	r2, [pc, #300]	@ (80123b0 <jpeg_fdct_12x12+0x3ec>)
 8012284:	fb02 f303 	mul.w	r3, r2, r3
 8012288:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
    tmp12 += tmp11 - tmp15 - MULTIPLY(tmp2, FIX(2.339493912)) /* c1+c5-c11 */
 801228c:	f8d7 209c 	ldr.w	r2, [r7, #156]	@ 0x9c
 8012290:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 8012294:	1ad2      	subs	r2, r2, r3
 8012296:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 801229a:	4946      	ldr	r1, [pc, #280]	@ (80123b4 <jpeg_fdct_12x12+0x3f0>)
 801229c:	fb01 f303 	mul.w	r3, r1, r3
 80122a0:	441a      	add	r2, r3
	    + MULTIPLY(tmp5, FIX(0.860918669));        /* c7 */
 80122a2:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 80122a6:	f641 318d 	movw	r1, #7053	@ 0x1b8d
 80122aa:	fb01 f303 	mul.w	r3, r1, r3
 80122ae:	4413      	add	r3, r2
    tmp12 += tmp11 - tmp15 - MULTIPLY(tmp2, FIX(2.339493912)) /* c1+c5-c11 */
 80122b0:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 80122b4:	4413      	add	r3, r2
 80122b6:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
    tmp13 += tmp11 - tmp14 + MULTIPLY(tmp3, FIX(0.725788011)) /* c1+c11-c7 */
 80122ba:	f8d7 209c 	ldr.w	r2, [r7, #156]	@ 0x9c
 80122be:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 80122c2:	1ad2      	subs	r2, r2, r3
 80122c4:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 80122c8:	f241 713a 	movw	r1, #5946	@ 0x173a
 80122cc:	fb01 f303 	mul.w	r3, r1, r3
 80122d0:	441a      	add	r2, r3
	    - MULTIPLY(tmp5, FIX(1.121971054));        /* c5 */
 80122d2:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 80122d6:	4938      	ldr	r1, [pc, #224]	@ (80123b8 <jpeg_fdct_12x12+0x3f4>)
 80122d8:	fb01 f303 	mul.w	r3, r1, r3
 80122dc:	4413      	add	r3, r2
    tmp13 += tmp11 - tmp14 + MULTIPLY(tmp3, FIX(0.725788011)) /* c1+c11-c7 */
 80122de:	f8d7 20a0 	ldr.w	r2, [r7, #160]	@ 0xa0
 80122e2:	4413      	add	r3, r2
 80122e4:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
    tmp11 = tmp15 + MULTIPLY(tmp0 - tmp3, FIX(1.306562965)) /* c3 */
 80122e8:	f8d7 20bc 	ldr.w	r2, [r7, #188]	@ 0xbc
 80122ec:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 80122f0:	1ad3      	subs	r3, r2, r3
 80122f2:	f642 12cf 	movw	r2, #10703	@ 0x29cf
 80122f6:	fb03 f202 	mul.w	r2, r3, r2
 80122fa:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 80122fe:	441a      	add	r2, r3
	    - MULTIPLY(tmp2 + tmp5, FIX_0_541196100);  /* c9 */
 8012300:	f8d7 10b4 	ldr.w	r1, [r7, #180]	@ 0xb4
 8012304:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8012308:	440b      	add	r3, r1
 801230a:	492c      	ldr	r1, [pc, #176]	@ (80123bc <jpeg_fdct_12x12+0x3f8>)
 801230c:	fb01 f303 	mul.w	r3, r1, r3
    tmp11 = tmp15 + MULTIPLY(tmp0 - tmp3, FIX(1.306562965)) /* c3 */
 8012310:	4413      	add	r3, r2
 8012312:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c

    dataptr[1] = (DCTELEM) DESCALE(tmp10, CONST_BITS);
 8012316:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 801231a:	f503 5280 	add.w	r2, r3, #4096	@ 0x1000
 801231e:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8012322:	3304      	adds	r3, #4
 8012324:	1352      	asrs	r2, r2, #13
 8012326:	601a      	str	r2, [r3, #0]
    dataptr[3] = (DCTELEM) DESCALE(tmp11, CONST_BITS);
 8012328:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 801232c:	f503 5280 	add.w	r2, r3, #4096	@ 0x1000
 8012330:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8012334:	330c      	adds	r3, #12
 8012336:	1352      	asrs	r2, r2, #13
 8012338:	601a      	str	r2, [r3, #0]
    dataptr[5] = (DCTELEM) DESCALE(tmp12, CONST_BITS);
 801233a:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 801233e:	f503 5280 	add.w	r2, r3, #4096	@ 0x1000
 8012342:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8012346:	3314      	adds	r3, #20
 8012348:	1352      	asrs	r2, r2, #13
 801234a:	601a      	str	r2, [r3, #0]
    dataptr[7] = (DCTELEM) DESCALE(tmp13, CONST_BITS);
 801234c:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8012350:	f503 5280 	add.w	r2, r3, #4096	@ 0x1000
 8012354:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8012358:	331c      	adds	r3, #28
 801235a:	1352      	asrs	r2, r2, #13
 801235c:	601a      	str	r2, [r3, #0]

    ctr++;
 801235e:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8012362:	3301      	adds	r3, #1
 8012364:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4

    if (ctr != DCTSIZE) {
 8012368:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 801236c:	2b08      	cmp	r3, #8
 801236e:	d009      	beq.n	8012384 <jpeg_fdct_12x12+0x3c0>
      if (ctr == 12)
 8012370:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8012374:	2b0c      	cmp	r3, #12
 8012376:	d00a      	beq.n	801238e <jpeg_fdct_12x12+0x3ca>
	break;			/* Done. */
      dataptr += DCTSIZE;	/* advance pointer to next row */
 8012378:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 801237c:	3320      	adds	r3, #32
 801237e:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 8012382:	e62b      	b.n	8011fdc <jpeg_fdct_12x12+0x18>
    } else
      dataptr = workspace;	/* switch pointer to extended workspace */
 8012384:	f107 0310 	add.w	r3, r7, #16
 8012388:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
    elemptr = sample_data[ctr] + start_col;
 801238c:	e626      	b.n	8011fdc <jpeg_fdct_12x12+0x18>
	break;			/* Done. */
 801238e:	bf00      	nop
   * We must also scale the output by (8/12)**2 = 4/9, which we partially
   * fold into the constant multipliers and final shifting:
   * cK now represents sqrt(2) * cos(K*pi/24) * 8/9.
   */

  dataptr = data;
 8012390:	68fb      	ldr	r3, [r7, #12]
 8012392:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
  wsptr = workspace;
 8012396:	f107 0310 	add.w	r3, r7, #16
 801239a:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
  for (ctr = DCTSIZE-1; ctr >= 0; ctr--) {
 801239e:	2307      	movs	r3, #7
 80123a0:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 80123a4:	e1d4      	b.n	8012750 <jpeg_fdct_12x12+0x78c>
 80123a6:	bf00      	nop
 80123a8:	ffffc4df 	.word	0xffffc4df
 80123ac:	ffffed6a 	.word	0xffffed6a
 80123b0:	fffffa18 	.word	0xfffffa18
 80123b4:	ffffb523 	.word	0xffffb523
 80123b8:	ffffdc19 	.word	0xffffdc19
 80123bc:	ffffeeaf 	.word	0xffffeeaf
    /* Even part */

    tmp0 = dataptr[DCTSIZE*0] + wsptr[DCTSIZE*3];
 80123c0:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 80123c4:	681a      	ldr	r2, [r3, #0]
 80123c6:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 80123ca:	3360      	adds	r3, #96	@ 0x60
 80123cc:	681b      	ldr	r3, [r3, #0]
 80123ce:	4413      	add	r3, r2
 80123d0:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
    tmp1 = dataptr[DCTSIZE*1] + wsptr[DCTSIZE*2];
 80123d4:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 80123d8:	3320      	adds	r3, #32
 80123da:	681a      	ldr	r2, [r3, #0]
 80123dc:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 80123e0:	3340      	adds	r3, #64	@ 0x40
 80123e2:	681b      	ldr	r3, [r3, #0]
 80123e4:	4413      	add	r3, r2
 80123e6:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
    tmp2 = dataptr[DCTSIZE*2] + wsptr[DCTSIZE*1];
 80123ea:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 80123ee:	3340      	adds	r3, #64	@ 0x40
 80123f0:	681a      	ldr	r2, [r3, #0]
 80123f2:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 80123f6:	3320      	adds	r3, #32
 80123f8:	681b      	ldr	r3, [r3, #0]
 80123fa:	4413      	add	r3, r2
 80123fc:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
    tmp3 = dataptr[DCTSIZE*3] + wsptr[DCTSIZE*0];
 8012400:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8012404:	3360      	adds	r3, #96	@ 0x60
 8012406:	681a      	ldr	r2, [r3, #0]
 8012408:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 801240c:	681b      	ldr	r3, [r3, #0]
 801240e:	4413      	add	r3, r2
 8012410:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
    tmp4 = dataptr[DCTSIZE*4] + dataptr[DCTSIZE*7];
 8012414:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8012418:	3380      	adds	r3, #128	@ 0x80
 801241a:	681a      	ldr	r2, [r3, #0]
 801241c:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8012420:	33e0      	adds	r3, #224	@ 0xe0
 8012422:	681b      	ldr	r3, [r3, #0]
 8012424:	4413      	add	r3, r2
 8012426:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    tmp5 = dataptr[DCTSIZE*5] + dataptr[DCTSIZE*6];
 801242a:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 801242e:	33a0      	adds	r3, #160	@ 0xa0
 8012430:	681a      	ldr	r2, [r3, #0]
 8012432:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8012436:	33c0      	adds	r3, #192	@ 0xc0
 8012438:	681b      	ldr	r3, [r3, #0]
 801243a:	4413      	add	r3, r2
 801243c:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8

    tmp10 = tmp0 + tmp5;
 8012440:	f8d7 20bc 	ldr.w	r2, [r7, #188]	@ 0xbc
 8012444:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8012448:	4413      	add	r3, r2
 801244a:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
    tmp13 = tmp0 - tmp5;
 801244e:	f8d7 20bc 	ldr.w	r2, [r7, #188]	@ 0xbc
 8012452:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8012456:	1ad3      	subs	r3, r2, r3
 8012458:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
    tmp11 = tmp1 + tmp4;
 801245c:	f8d7 20b8 	ldr.w	r2, [r7, #184]	@ 0xb8
 8012460:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8012464:	4413      	add	r3, r2
 8012466:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
    tmp14 = tmp1 - tmp4;
 801246a:	f8d7 20b8 	ldr.w	r2, [r7, #184]	@ 0xb8
 801246e:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8012472:	1ad3      	subs	r3, r2, r3
 8012474:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
    tmp12 = tmp2 + tmp3;
 8012478:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 801247c:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 8012480:	4413      	add	r3, r2
 8012482:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
    tmp15 = tmp2 - tmp3;
 8012486:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 801248a:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 801248e:	1ad3      	subs	r3, r2, r3
 8012490:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90

    tmp0 = dataptr[DCTSIZE*0] - wsptr[DCTSIZE*3];
 8012494:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8012498:	681a      	ldr	r2, [r3, #0]
 801249a:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 801249e:	3360      	adds	r3, #96	@ 0x60
 80124a0:	681b      	ldr	r3, [r3, #0]
 80124a2:	1ad3      	subs	r3, r2, r3
 80124a4:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
    tmp1 = dataptr[DCTSIZE*1] - wsptr[DCTSIZE*2];
 80124a8:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 80124ac:	3320      	adds	r3, #32
 80124ae:	681a      	ldr	r2, [r3, #0]
 80124b0:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 80124b4:	3340      	adds	r3, #64	@ 0x40
 80124b6:	681b      	ldr	r3, [r3, #0]
 80124b8:	1ad3      	subs	r3, r2, r3
 80124ba:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
    tmp2 = dataptr[DCTSIZE*2] - wsptr[DCTSIZE*1];
 80124be:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 80124c2:	3340      	adds	r3, #64	@ 0x40
 80124c4:	681a      	ldr	r2, [r3, #0]
 80124c6:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 80124ca:	3320      	adds	r3, #32
 80124cc:	681b      	ldr	r3, [r3, #0]
 80124ce:	1ad3      	subs	r3, r2, r3
 80124d0:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
    tmp3 = dataptr[DCTSIZE*3] - wsptr[DCTSIZE*0];
 80124d4:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 80124d8:	3360      	adds	r3, #96	@ 0x60
 80124da:	681a      	ldr	r2, [r3, #0]
 80124dc:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 80124e0:	681b      	ldr	r3, [r3, #0]
 80124e2:	1ad3      	subs	r3, r2, r3
 80124e4:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
    tmp4 = dataptr[DCTSIZE*4] - dataptr[DCTSIZE*7];
 80124e8:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 80124ec:	3380      	adds	r3, #128	@ 0x80
 80124ee:	681a      	ldr	r2, [r3, #0]
 80124f0:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 80124f4:	33e0      	adds	r3, #224	@ 0xe0
 80124f6:	681b      	ldr	r3, [r3, #0]
 80124f8:	1ad3      	subs	r3, r2, r3
 80124fa:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    tmp5 = dataptr[DCTSIZE*5] - dataptr[DCTSIZE*6];
 80124fe:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8012502:	33a0      	adds	r3, #160	@ 0xa0
 8012504:	681a      	ldr	r2, [r3, #0]
 8012506:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 801250a:	33c0      	adds	r3, #192	@ 0xc0
 801250c:	681b      	ldr	r3, [r3, #0]
 801250e:	1ad3      	subs	r3, r2, r3
 8012510:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8

    dataptr[DCTSIZE*0] = (DCTELEM)
      DESCALE(MULTIPLY(tmp10 + tmp11 + tmp12, FIX(0.888888889)), /* 8/9 */
 8012514:	f8d7 20a4 	ldr.w	r2, [r7, #164]	@ 0xa4
 8012518:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 801251c:	441a      	add	r2, r3
 801251e:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8012522:	4413      	add	r3, r2
 8012524:	f641 4272 	movw	r2, #7282	@ 0x1c72
 8012528:	fb02 f303 	mul.w	r3, r2, r3
 801252c:	f503 5300 	add.w	r3, r3, #8192	@ 0x2000
 8012530:	139a      	asrs	r2, r3, #14
    dataptr[DCTSIZE*0] = (DCTELEM)
 8012532:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8012536:	601a      	str	r2, [r3, #0]
	      CONST_BITS+1);
    dataptr[DCTSIZE*6] = (DCTELEM)
      DESCALE(MULTIPLY(tmp13 - tmp14 - tmp15, FIX(0.888888889)), /* 8/9 */
 8012538:	f8d7 20a0 	ldr.w	r2, [r7, #160]	@ 0xa0
 801253c:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8012540:	1ad2      	subs	r2, r2, r3
 8012542:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 8012546:	1ad3      	subs	r3, r2, r3
 8012548:	f641 4272 	movw	r2, #7282	@ 0x1c72
 801254c:	fb02 f303 	mul.w	r3, r2, r3
 8012550:	f503 5200 	add.w	r2, r3, #8192	@ 0x2000
    dataptr[DCTSIZE*6] = (DCTELEM)
 8012554:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8012558:	33c0      	adds	r3, #192	@ 0xc0
      DESCALE(MULTIPLY(tmp13 - tmp14 - tmp15, FIX(0.888888889)), /* 8/9 */
 801255a:	1392      	asrs	r2, r2, #14
    dataptr[DCTSIZE*6] = (DCTELEM)
 801255c:	601a      	str	r2, [r3, #0]
	      CONST_BITS+1);
    dataptr[DCTSIZE*4] = (DCTELEM)
      DESCALE(MULTIPLY(tmp10 - tmp12, FIX(1.088662108)),         /* c4 */
 801255e:	f8d7 20a4 	ldr.w	r2, [r7, #164]	@ 0xa4
 8012562:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8012566:	1ad3      	subs	r3, r2, r3
 8012568:	f242 22d6 	movw	r2, #8918	@ 0x22d6
 801256c:	fb02 f303 	mul.w	r3, r2, r3
 8012570:	f503 5200 	add.w	r2, r3, #8192	@ 0x2000
    dataptr[DCTSIZE*4] = (DCTELEM)
 8012574:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8012578:	3380      	adds	r3, #128	@ 0x80
      DESCALE(MULTIPLY(tmp10 - tmp12, FIX(1.088662108)),         /* c4 */
 801257a:	1392      	asrs	r2, r2, #14
    dataptr[DCTSIZE*4] = (DCTELEM)
 801257c:	601a      	str	r2, [r3, #0]
	      CONST_BITS+1);
    dataptr[DCTSIZE*2] = (DCTELEM)
      DESCALE(MULTIPLY(tmp14 - tmp15, FIX(0.888888889)) +        /* 8/9 */
 801257e:	f8d7 2098 	ldr.w	r2, [r7, #152]	@ 0x98
 8012582:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 8012586:	1ad3      	subs	r3, r2, r3
 8012588:	f641 4272 	movw	r2, #7282	@ 0x1c72
 801258c:	fb03 f202 	mul.w	r2, r3, r2
 8012590:	f8d7 10a0 	ldr.w	r1, [r7, #160]	@ 0xa0
 8012594:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 8012598:	440b      	add	r3, r1
 801259a:	f242 61db 	movw	r1, #9947	@ 0x26db
 801259e:	fb01 f303 	mul.w	r3, r1, r3
 80125a2:	4413      	add	r3, r2
 80125a4:	f503 5200 	add.w	r2, r3, #8192	@ 0x2000
    dataptr[DCTSIZE*2] = (DCTELEM)
 80125a8:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 80125ac:	3340      	adds	r3, #64	@ 0x40
      DESCALE(MULTIPLY(tmp14 - tmp15, FIX(0.888888889)) +        /* 8/9 */
 80125ae:	1392      	asrs	r2, r2, #14
    dataptr[DCTSIZE*2] = (DCTELEM)
 80125b0:	601a      	str	r2, [r3, #0]
	      MULTIPLY(tmp13 + tmp15, FIX(1.214244803)),         /* c2 */
	      CONST_BITS+1);

    /* Odd part */

    tmp10 = MULTIPLY(tmp1 + tmp4, FIX(0.481063200));   /* c9 */
 80125b2:	f8d7 20b8 	ldr.w	r2, [r7, #184]	@ 0xb8
 80125b6:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 80125ba:	4413      	add	r3, r2
 80125bc:	f640 7265 	movw	r2, #3941	@ 0xf65
 80125c0:	fb02 f303 	mul.w	r3, r2, r3
 80125c4:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
    tmp14 = tmp10 + MULTIPLY(tmp1, FIX(0.680326102));  /* c3-c9 */
 80125c8:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 80125cc:	f241 52c5 	movw	r2, #5573	@ 0x15c5
 80125d0:	fb02 f303 	mul.w	r3, r2, r3
 80125d4:	f8d7 20a4 	ldr.w	r2, [r7, #164]	@ 0xa4
 80125d8:	4413      	add	r3, r2
 80125da:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
    tmp15 = tmp10 - MULTIPLY(tmp4, FIX(1.642452502));  /* c3+c9 */
 80125de:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 80125e2:	4a61      	ldr	r2, [pc, #388]	@ (8012768 <jpeg_fdct_12x12+0x7a4>)
 80125e4:	fb02 f303 	mul.w	r3, r2, r3
 80125e8:	f8d7 20a4 	ldr.w	r2, [r7, #164]	@ 0xa4
 80125ec:	4413      	add	r3, r2
 80125ee:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
    tmp12 = MULTIPLY(tmp0 + tmp2, FIX(0.997307603));   /* c5 */
 80125f2:	f8d7 20bc 	ldr.w	r2, [r7, #188]	@ 0xbc
 80125f6:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 80125fa:	4413      	add	r3, r2
 80125fc:	f641 72ea 	movw	r2, #8170	@ 0x1fea
 8012600:	fb02 f303 	mul.w	r3, r2, r3
 8012604:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
    tmp13 = MULTIPLY(tmp0 + tmp3, FIX(0.765261039));   /* c7 */
 8012608:	f8d7 20bc 	ldr.w	r2, [r7, #188]	@ 0xbc
 801260c:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 8012610:	4413      	add	r3, r2
 8012612:	f641 027d 	movw	r2, #6269	@ 0x187d
 8012616:	fb02 f303 	mul.w	r3, r2, r3
 801261a:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
    tmp10 = tmp12 + tmp13 + tmp14 - MULTIPLY(tmp0, FIX(0.516244403)) /* c5+c7-c1 */
 801261e:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 8012622:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8012626:	441a      	add	r2, r3
 8012628:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 801262c:	441a      	add	r2, r3
 801262e:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
 8012632:	494e      	ldr	r1, [pc, #312]	@ (801276c <jpeg_fdct_12x12+0x7a8>)
 8012634:	fb01 f303 	mul.w	r3, r1, r3
 8012638:	441a      	add	r2, r3
	    + MULTIPLY(tmp5, FIX(0.164081699));        /* c11 */
 801263a:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 801263e:	f44f 61a8 	mov.w	r1, #1344	@ 0x540
 8012642:	fb01 f303 	mul.w	r3, r1, r3
    tmp10 = tmp12 + tmp13 + tmp14 - MULTIPLY(tmp0, FIX(0.516244403)) /* c5+c7-c1 */
 8012646:	4413      	add	r3, r2
 8012648:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
    tmp11 = MULTIPLY(tmp2 + tmp3, - FIX(0.164081699)); /* -c11 */
 801264c:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 8012650:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 8012654:	4413      	add	r3, r2
 8012656:	4a46      	ldr	r2, [pc, #280]	@ (8012770 <jpeg_fdct_12x12+0x7ac>)
 8012658:	fb02 f303 	mul.w	r3, r2, r3
 801265c:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
    tmp12 += tmp11 - tmp15 - MULTIPLY(tmp2, FIX(2.079550144)) /* c1+c5-c11 */
 8012660:	f8d7 209c 	ldr.w	r2, [r7, #156]	@ 0x9c
 8012664:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 8012668:	1ad2      	subs	r2, r2, r3
 801266a:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 801266e:	4941      	ldr	r1, [pc, #260]	@ (8012774 <jpeg_fdct_12x12+0x7b0>)
 8012670:	fb01 f303 	mul.w	r3, r1, r3
 8012674:	441a      	add	r2, r3
	    + MULTIPLY(tmp5, FIX(0.765261039));        /* c7 */
 8012676:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 801267a:	f641 017d 	movw	r1, #6269	@ 0x187d
 801267e:	fb01 f303 	mul.w	r3, r1, r3
 8012682:	4413      	add	r3, r2
    tmp12 += tmp11 - tmp15 - MULTIPLY(tmp2, FIX(2.079550144)) /* c1+c5-c11 */
 8012684:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 8012688:	4413      	add	r3, r2
 801268a:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
    tmp13 += tmp11 - tmp14 + MULTIPLY(tmp3, FIX(0.645144899)) /* c1+c11-c7 */
 801268e:	f8d7 209c 	ldr.w	r2, [r7, #156]	@ 0x9c
 8012692:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8012696:	1ad2      	subs	r2, r2, r3
 8012698:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 801269c:	f241 41a5 	movw	r1, #5285	@ 0x14a5
 80126a0:	fb01 f303 	mul.w	r3, r1, r3
 80126a4:	441a      	add	r2, r3
	    - MULTIPLY(tmp5, FIX(0.997307603));        /* c5 */
 80126a6:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 80126aa:	4933      	ldr	r1, [pc, #204]	@ (8012778 <jpeg_fdct_12x12+0x7b4>)
 80126ac:	fb01 f303 	mul.w	r3, r1, r3
 80126b0:	4413      	add	r3, r2
    tmp13 += tmp11 - tmp14 + MULTIPLY(tmp3, FIX(0.645144899)) /* c1+c11-c7 */
 80126b2:	f8d7 20a0 	ldr.w	r2, [r7, #160]	@ 0xa0
 80126b6:	4413      	add	r3, r2
 80126b8:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
    tmp11 = tmp15 + MULTIPLY(tmp0 - tmp3, FIX(1.161389302)) /* c3 */
 80126bc:	f8d7 20bc 	ldr.w	r2, [r7, #188]	@ 0xbc
 80126c0:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 80126c4:	1ad3      	subs	r3, r2, r3
 80126c6:	f242 522a 	movw	r2, #9514	@ 0x252a
 80126ca:	fb03 f202 	mul.w	r2, r3, r2
 80126ce:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 80126d2:	441a      	add	r2, r3
	    - MULTIPLY(tmp2 + tmp5, FIX(0.481063200)); /* c9 */
 80126d4:	f8d7 10b4 	ldr.w	r1, [r7, #180]	@ 0xb4
 80126d8:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 80126dc:	440b      	add	r3, r1
 80126de:	4927      	ldr	r1, [pc, #156]	@ (801277c <jpeg_fdct_12x12+0x7b8>)
 80126e0:	fb01 f303 	mul.w	r3, r1, r3
    tmp11 = tmp15 + MULTIPLY(tmp0 - tmp3, FIX(1.161389302)) /* c3 */
 80126e4:	4413      	add	r3, r2
 80126e6:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c

    dataptr[DCTSIZE*1] = (DCTELEM) DESCALE(tmp10, CONST_BITS+1);
 80126ea:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 80126ee:	f503 5200 	add.w	r2, r3, #8192	@ 0x2000
 80126f2:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 80126f6:	3320      	adds	r3, #32
 80126f8:	1392      	asrs	r2, r2, #14
 80126fa:	601a      	str	r2, [r3, #0]
    dataptr[DCTSIZE*3] = (DCTELEM) DESCALE(tmp11, CONST_BITS+1);
 80126fc:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8012700:	f503 5200 	add.w	r2, r3, #8192	@ 0x2000
 8012704:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8012708:	3360      	adds	r3, #96	@ 0x60
 801270a:	1392      	asrs	r2, r2, #14
 801270c:	601a      	str	r2, [r3, #0]
    dataptr[DCTSIZE*5] = (DCTELEM) DESCALE(tmp12, CONST_BITS+1);
 801270e:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8012712:	f503 5200 	add.w	r2, r3, #8192	@ 0x2000
 8012716:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 801271a:	33a0      	adds	r3, #160	@ 0xa0
 801271c:	1392      	asrs	r2, r2, #14
 801271e:	601a      	str	r2, [r3, #0]
    dataptr[DCTSIZE*7] = (DCTELEM) DESCALE(tmp13, CONST_BITS+1);
 8012720:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8012724:	f503 5200 	add.w	r2, r3, #8192	@ 0x2000
 8012728:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 801272c:	33e0      	adds	r3, #224	@ 0xe0
 801272e:	1392      	asrs	r2, r2, #14
 8012730:	601a      	str	r2, [r3, #0]

    dataptr++;			/* advance pointer to next column */
 8012732:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8012736:	3304      	adds	r3, #4
 8012738:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
    wsptr++;			/* advance pointer to next column */
 801273c:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 8012740:	3304      	adds	r3, #4
 8012742:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
  for (ctr = DCTSIZE-1; ctr >= 0; ctr--) {
 8012746:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 801274a:	3b01      	subs	r3, #1
 801274c:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 8012750:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8012754:	2b00      	cmp	r3, #0
 8012756:	f6bf ae33 	bge.w	80123c0 <jpeg_fdct_12x12+0x3fc>
  }
}
 801275a:	bf00      	nop
 801275c:	bf00      	nop
 801275e:	37d4      	adds	r7, #212	@ 0xd4
 8012760:	46bd      	mov	sp, r7
 8012762:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012766:	4770      	bx	lr
 8012768:	ffffcb71 	.word	0xffffcb71
 801276c:	ffffef7b 	.word	0xffffef7b
 8012770:	fffffac0 	.word	0xfffffac0
 8012774:	ffffbd74 	.word	0xffffbd74
 8012778:	ffffe016 	.word	0xffffe016
 801277c:	fffff09b 	.word	0xfffff09b

08012780 <jpeg_fdct_13x13>:
 * Perform the forward DCT on a 13x13 sample block.
 */

GLOBAL(void)
jpeg_fdct_13x13 (DCTELEM * data, JSAMPARRAY sample_data, JDIMENSION start_col)
{
 8012780:	b480      	push	{r7}
 8012782:	b0c1      	sub	sp, #260	@ 0x104
 8012784:	af00      	add	r7, sp, #0
 8012786:	60f8      	str	r0, [r7, #12]
 8012788:	60b9      	str	r1, [r7, #8]
 801278a:	607a      	str	r2, [r7, #4]

  /* Pass 1: process rows. */
  /* Note results are scaled up by sqrt(8) compared to a true DCT. */
  /* cK represents sqrt(2) * cos(K*pi/26). */

  dataptr = data;
 801278c:	68fb      	ldr	r3, [r7, #12]
 801278e:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
  ctr = 0;
 8012792:	2300      	movs	r3, #0
 8012794:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
  for (;;) {
    elemptr = sample_data[ctr] + start_col;
 8012798:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 801279c:	009b      	lsls	r3, r3, #2
 801279e:	68ba      	ldr	r2, [r7, #8]
 80127a0:	4413      	add	r3, r2
 80127a2:	681a      	ldr	r2, [r3, #0]
 80127a4:	687b      	ldr	r3, [r7, #4]
 80127a6:	4413      	add	r3, r2
 80127a8:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0

    /* Even part */

    tmp0 = GETJSAMPLE(elemptr[0]) + GETJSAMPLE(elemptr[12]);
 80127ac:	f8d7 30f0 	ldr.w	r3, [r7, #240]	@ 0xf0
 80127b0:	781b      	ldrb	r3, [r3, #0]
 80127b2:	461a      	mov	r2, r3
 80127b4:	f8d7 30f0 	ldr.w	r3, [r7, #240]	@ 0xf0
 80127b8:	330c      	adds	r3, #12
 80127ba:	781b      	ldrb	r3, [r3, #0]
 80127bc:	4413      	add	r3, r2
 80127be:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
    tmp1 = GETJSAMPLE(elemptr[1]) + GETJSAMPLE(elemptr[11]);
 80127c2:	f8d7 30f0 	ldr.w	r3, [r7, #240]	@ 0xf0
 80127c6:	3301      	adds	r3, #1
 80127c8:	781b      	ldrb	r3, [r3, #0]
 80127ca:	461a      	mov	r2, r3
 80127cc:	f8d7 30f0 	ldr.w	r3, [r7, #240]	@ 0xf0
 80127d0:	330b      	adds	r3, #11
 80127d2:	781b      	ldrb	r3, [r3, #0]
 80127d4:	4413      	add	r3, r2
 80127d6:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
    tmp2 = GETJSAMPLE(elemptr[2]) + GETJSAMPLE(elemptr[10]);
 80127da:	f8d7 30f0 	ldr.w	r3, [r7, #240]	@ 0xf0
 80127de:	3302      	adds	r3, #2
 80127e0:	781b      	ldrb	r3, [r3, #0]
 80127e2:	461a      	mov	r2, r3
 80127e4:	f8d7 30f0 	ldr.w	r3, [r7, #240]	@ 0xf0
 80127e8:	330a      	adds	r3, #10
 80127ea:	781b      	ldrb	r3, [r3, #0]
 80127ec:	4413      	add	r3, r2
 80127ee:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    tmp3 = GETJSAMPLE(elemptr[3]) + GETJSAMPLE(elemptr[9]);
 80127f2:	f8d7 30f0 	ldr.w	r3, [r7, #240]	@ 0xf0
 80127f6:	3303      	adds	r3, #3
 80127f8:	781b      	ldrb	r3, [r3, #0]
 80127fa:	461a      	mov	r2, r3
 80127fc:	f8d7 30f0 	ldr.w	r3, [r7, #240]	@ 0xf0
 8012800:	3309      	adds	r3, #9
 8012802:	781b      	ldrb	r3, [r3, #0]
 8012804:	4413      	add	r3, r2
 8012806:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
    tmp4 = GETJSAMPLE(elemptr[4]) + GETJSAMPLE(elemptr[8]);
 801280a:	f8d7 30f0 	ldr.w	r3, [r7, #240]	@ 0xf0
 801280e:	3304      	adds	r3, #4
 8012810:	781b      	ldrb	r3, [r3, #0]
 8012812:	461a      	mov	r2, r3
 8012814:	f8d7 30f0 	ldr.w	r3, [r7, #240]	@ 0xf0
 8012818:	3308      	adds	r3, #8
 801281a:	781b      	ldrb	r3, [r3, #0]
 801281c:	4413      	add	r3, r2
 801281e:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
    tmp5 = GETJSAMPLE(elemptr[5]) + GETJSAMPLE(elemptr[7]);
 8012822:	f8d7 30f0 	ldr.w	r3, [r7, #240]	@ 0xf0
 8012826:	3305      	adds	r3, #5
 8012828:	781b      	ldrb	r3, [r3, #0]
 801282a:	461a      	mov	r2, r3
 801282c:	f8d7 30f0 	ldr.w	r3, [r7, #240]	@ 0xf0
 8012830:	3307      	adds	r3, #7
 8012832:	781b      	ldrb	r3, [r3, #0]
 8012834:	4413      	add	r3, r2
 8012836:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
    tmp6 = GETJSAMPLE(elemptr[6]);
 801283a:	f8d7 30f0 	ldr.w	r3, [r7, #240]	@ 0xf0
 801283e:	3306      	adds	r3, #6
 8012840:	781b      	ldrb	r3, [r3, #0]
 8012842:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4

    tmp10 = GETJSAMPLE(elemptr[0]) - GETJSAMPLE(elemptr[12]);
 8012846:	f8d7 30f0 	ldr.w	r3, [r7, #240]	@ 0xf0
 801284a:	781b      	ldrb	r3, [r3, #0]
 801284c:	461a      	mov	r2, r3
 801284e:	f8d7 30f0 	ldr.w	r3, [r7, #240]	@ 0xf0
 8012852:	330c      	adds	r3, #12
 8012854:	781b      	ldrb	r3, [r3, #0]
 8012856:	1ad3      	subs	r3, r2, r3
 8012858:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
    tmp11 = GETJSAMPLE(elemptr[1]) - GETJSAMPLE(elemptr[11]);
 801285c:	f8d7 30f0 	ldr.w	r3, [r7, #240]	@ 0xf0
 8012860:	3301      	adds	r3, #1
 8012862:	781b      	ldrb	r3, [r3, #0]
 8012864:	461a      	mov	r2, r3
 8012866:	f8d7 30f0 	ldr.w	r3, [r7, #240]	@ 0xf0
 801286a:	330b      	adds	r3, #11
 801286c:	781b      	ldrb	r3, [r3, #0]
 801286e:	1ad3      	subs	r3, r2, r3
 8012870:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
    tmp12 = GETJSAMPLE(elemptr[2]) - GETJSAMPLE(elemptr[10]);
 8012874:	f8d7 30f0 	ldr.w	r3, [r7, #240]	@ 0xf0
 8012878:	3302      	adds	r3, #2
 801287a:	781b      	ldrb	r3, [r3, #0]
 801287c:	461a      	mov	r2, r3
 801287e:	f8d7 30f0 	ldr.w	r3, [r7, #240]	@ 0xf0
 8012882:	330a      	adds	r3, #10
 8012884:	781b      	ldrb	r3, [r3, #0]
 8012886:	1ad3      	subs	r3, r2, r3
 8012888:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
    tmp13 = GETJSAMPLE(elemptr[3]) - GETJSAMPLE(elemptr[9]);
 801288c:	f8d7 30f0 	ldr.w	r3, [r7, #240]	@ 0xf0
 8012890:	3303      	adds	r3, #3
 8012892:	781b      	ldrb	r3, [r3, #0]
 8012894:	461a      	mov	r2, r3
 8012896:	f8d7 30f0 	ldr.w	r3, [r7, #240]	@ 0xf0
 801289a:	3309      	adds	r3, #9
 801289c:	781b      	ldrb	r3, [r3, #0]
 801289e:	1ad3      	subs	r3, r2, r3
 80128a0:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
    tmp14 = GETJSAMPLE(elemptr[4]) - GETJSAMPLE(elemptr[8]);
 80128a4:	f8d7 30f0 	ldr.w	r3, [r7, #240]	@ 0xf0
 80128a8:	3304      	adds	r3, #4
 80128aa:	781b      	ldrb	r3, [r3, #0]
 80128ac:	461a      	mov	r2, r3
 80128ae:	f8d7 30f0 	ldr.w	r3, [r7, #240]	@ 0xf0
 80128b2:	3308      	adds	r3, #8
 80128b4:	781b      	ldrb	r3, [r3, #0]
 80128b6:	1ad3      	subs	r3, r2, r3
 80128b8:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
    tmp15 = GETJSAMPLE(elemptr[5]) - GETJSAMPLE(elemptr[7]);
 80128bc:	f8d7 30f0 	ldr.w	r3, [r7, #240]	@ 0xf0
 80128c0:	3305      	adds	r3, #5
 80128c2:	781b      	ldrb	r3, [r3, #0]
 80128c4:	461a      	mov	r2, r3
 80128c6:	f8d7 30f0 	ldr.w	r3, [r7, #240]	@ 0xf0
 80128ca:	3307      	adds	r3, #7
 80128cc:	781b      	ldrb	r3, [r3, #0]
 80128ce:	1ad3      	subs	r3, r2, r3
 80128d0:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc

    /* Apply unsigned->signed conversion */
    dataptr[0] = (DCTELEM)
      (tmp0 + tmp1 + tmp2 + tmp3 + tmp4 + tmp5 + tmp6 - 13 * CENTERJSAMPLE);
 80128d4:	f8d7 20ec 	ldr.w	r2, [r7, #236]	@ 0xec
 80128d8:	f8d7 30e8 	ldr.w	r3, [r7, #232]	@ 0xe8
 80128dc:	441a      	add	r2, r3
 80128de:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80128e2:	441a      	add	r2, r3
 80128e4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80128e8:	441a      	add	r2, r3
 80128ea:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80128ee:	441a      	add	r2, r3
 80128f0:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 80128f4:	441a      	add	r2, r3
 80128f6:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 80128fa:	4413      	add	r3, r2
 80128fc:	f5a3 62d0 	sub.w	r2, r3, #1664	@ 0x680
    dataptr[0] = (DCTELEM)
 8012900:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8012904:	601a      	str	r2, [r3, #0]
    tmp6 += tmp6;
 8012906:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 801290a:	005b      	lsls	r3, r3, #1
 801290c:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
    tmp0 -= tmp6;
 8012910:	f8d7 20ec 	ldr.w	r2, [r7, #236]	@ 0xec
 8012914:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8012918:	1ad3      	subs	r3, r2, r3
 801291a:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
    tmp1 -= tmp6;
 801291e:	f8d7 20e8 	ldr.w	r2, [r7, #232]	@ 0xe8
 8012922:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8012926:	1ad3      	subs	r3, r2, r3
 8012928:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
    tmp2 -= tmp6;
 801292c:	f8d7 20e4 	ldr.w	r2, [r7, #228]	@ 0xe4
 8012930:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8012934:	1ad3      	subs	r3, r2, r3
 8012936:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    tmp3 -= tmp6;
 801293a:	f8d7 20e0 	ldr.w	r2, [r7, #224]	@ 0xe0
 801293e:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8012942:	1ad3      	subs	r3, r2, r3
 8012944:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
    tmp4 -= tmp6;
 8012948:	f8d7 20dc 	ldr.w	r2, [r7, #220]	@ 0xdc
 801294c:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8012950:	1ad3      	subs	r3, r2, r3
 8012952:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
    tmp5 -= tmp6;
 8012956:	f8d7 20d8 	ldr.w	r2, [r7, #216]	@ 0xd8
 801295a:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 801295e:	1ad3      	subs	r3, r2, r3
 8012960:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
    dataptr[2] = (DCTELEM)
      DESCALE(MULTIPLY(tmp0, FIX(1.373119086)) +   /* c2 */
 8012964:	f8d7 30ec 	ldr.w	r3, [r7, #236]	@ 0xec
 8012968:	f642 32f1 	movw	r2, #11249	@ 0x2bf1
 801296c:	fb03 f202 	mul.w	r2, r3, r2
 8012970:	f8d7 30e8 	ldr.w	r3, [r7, #232]	@ 0xe8
 8012974:	f242 11e0 	movw	r1, #8672	@ 0x21e0
 8012978:	fb01 f303 	mul.w	r3, r1, r3
 801297c:	441a      	add	r2, r3
 801297e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8012982:	f241 010c 	movw	r1, #4108	@ 0x100c
 8012986:	fb01 f303 	mul.w	r3, r1, r3
 801298a:	441a      	add	r2, r3
 801298c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8012990:	49b0      	ldr	r1, [pc, #704]	@ (8012c54 <jpeg_fdct_13x13+0x4d4>)
 8012992:	fb01 f303 	mul.w	r3, r1, r3
 8012996:	441a      	add	r2, r3
 8012998:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 801299c:	49ae      	ldr	r1, [pc, #696]	@ (8012c58 <jpeg_fdct_13x13+0x4d8>)
 801299e:	fb01 f303 	mul.w	r3, r1, r3
 80129a2:	441a      	add	r2, r3
 80129a4:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 80129a8:	49ac      	ldr	r1, [pc, #688]	@ (8012c5c <jpeg_fdct_13x13+0x4dc>)
 80129aa:	fb01 f303 	mul.w	r3, r1, r3
 80129ae:	4413      	add	r3, r2
 80129b0:	f503 5280 	add.w	r2, r3, #4096	@ 0x1000
    dataptr[2] = (DCTELEM)
 80129b4:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80129b8:	3308      	adds	r3, #8
      DESCALE(MULTIPLY(tmp0, FIX(1.373119086)) +   /* c2 */
 80129ba:	1352      	asrs	r2, r2, #13
    dataptr[2] = (DCTELEM)
 80129bc:	601a      	str	r2, [r3, #0]
	      MULTIPLY(tmp2, FIX(0.501487041)) -   /* c10 */
	      MULTIPLY(tmp3, FIX(0.170464608)) -   /* c12 */
	      MULTIPLY(tmp4, FIX(0.803364869)) -   /* c8 */
	      MULTIPLY(tmp5, FIX(1.252223920)),    /* c4 */
	      CONST_BITS);
    z1 = MULTIPLY(tmp0 - tmp2, FIX(1.155388986)) - /* (c4+c6)/2 */
 80129be:	f8d7 20ec 	ldr.w	r2, [r7, #236]	@ 0xec
 80129c2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80129c6:	1ad3      	subs	r3, r2, r3
 80129c8:	f242 42f9 	movw	r2, #9465	@ 0x24f9
 80129cc:	fb03 f202 	mul.w	r2, r3, r2
	 MULTIPLY(tmp3 - tmp4, FIX(0.435816023)) - /* (c2-c10)/2 */
 80129d0:	f8d7 10e0 	ldr.w	r1, [r7, #224]	@ 0xe0
 80129d4:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80129d8:	1acb      	subs	r3, r1, r3
 80129da:	49a1      	ldr	r1, [pc, #644]	@ (8012c60 <jpeg_fdct_13x13+0x4e0>)
 80129dc:	fb01 f303 	mul.w	r3, r1, r3
    z1 = MULTIPLY(tmp0 - tmp2, FIX(1.155388986)) - /* (c4+c6)/2 */
 80129e0:	441a      	add	r2, r3
	 MULTIPLY(tmp1 - tmp5, FIX(0.316450131));  /* (c8-c12)/2 */
 80129e2:	f8d7 10e8 	ldr.w	r1, [r7, #232]	@ 0xe8
 80129e6:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 80129ea:	1acb      	subs	r3, r1, r3
 80129ec:	499d      	ldr	r1, [pc, #628]	@ (8012c64 <jpeg_fdct_13x13+0x4e4>)
 80129ee:	fb01 f303 	mul.w	r3, r1, r3
    z1 = MULTIPLY(tmp0 - tmp2, FIX(1.155388986)) - /* (c4+c6)/2 */
 80129f2:	4413      	add	r3, r2
 80129f4:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
    z2 = MULTIPLY(tmp0 + tmp2, FIX(0.096834934)) - /* (c4-c6)/2 */
 80129f8:	f8d7 20ec 	ldr.w	r2, [r7, #236]	@ 0xec
 80129fc:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8012a00:	4413      	add	r3, r2
 8012a02:	f240 3219 	movw	r2, #793	@ 0x319
 8012a06:	fb03 f202 	mul.w	r2, r3, r2
	 MULTIPLY(tmp3 + tmp4, FIX(0.937303064)) + /* (c2+c10)/2 */
 8012a0a:	f8d7 10e0 	ldr.w	r1, [r7, #224]	@ 0xe0
 8012a0e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8012a12:	440b      	add	r3, r1
 8012a14:	4994      	ldr	r1, [pc, #592]	@ (8012c68 <jpeg_fdct_13x13+0x4e8>)
 8012a16:	fb01 f303 	mul.w	r3, r1, r3
    z2 = MULTIPLY(tmp0 + tmp2, FIX(0.096834934)) - /* (c4-c6)/2 */
 8012a1a:	441a      	add	r2, r3
	 MULTIPLY(tmp1 + tmp5, FIX(0.486914739));  /* (c8+c12)/2 */
 8012a1c:	f8d7 10e8 	ldr.w	r1, [r7, #232]	@ 0xe8
 8012a20:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8012a24:	440b      	add	r3, r1
 8012a26:	f640 7195 	movw	r1, #3989	@ 0xf95
 8012a2a:	fb01 f303 	mul.w	r3, r1, r3
    z2 = MULTIPLY(tmp0 + tmp2, FIX(0.096834934)) - /* (c4-c6)/2 */
 8012a2e:	4413      	add	r3, r2
 8012a30:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4

    dataptr[4] = (DCTELEM) DESCALE(z1 + z2, CONST_BITS);
 8012a34:	f8d7 20b8 	ldr.w	r2, [r7, #184]	@ 0xb8
 8012a38:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 8012a3c:	4413      	add	r3, r2
 8012a3e:	f503 5280 	add.w	r2, r3, #4096	@ 0x1000
 8012a42:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8012a46:	3310      	adds	r3, #16
 8012a48:	1352      	asrs	r2, r2, #13
 8012a4a:	601a      	str	r2, [r3, #0]
    dataptr[6] = (DCTELEM) DESCALE(z1 - z2, CONST_BITS);
 8012a4c:	f8d7 20b8 	ldr.w	r2, [r7, #184]	@ 0xb8
 8012a50:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 8012a54:	1ad3      	subs	r3, r2, r3
 8012a56:	f503 5280 	add.w	r2, r3, #4096	@ 0x1000
 8012a5a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8012a5e:	3318      	adds	r3, #24
 8012a60:	1352      	asrs	r2, r2, #13
 8012a62:	601a      	str	r2, [r3, #0]

    /* Odd part */

    tmp1 = MULTIPLY(tmp10 + tmp11, FIX(1.322312651));   /* c3 */
 8012a64:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 8012a68:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8012a6c:	4413      	add	r3, r2
 8012a6e:	f642 2250 	movw	r2, #10832	@ 0x2a50
 8012a72:	fb02 f303 	mul.w	r3, r2, r3
 8012a76:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
    tmp2 = MULTIPLY(tmp10 + tmp12, FIX(1.163874945));   /* c5 */
 8012a7a:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 8012a7e:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 8012a82:	4413      	add	r3, r2
 8012a84:	f242 523e 	movw	r2, #9534	@ 0x253e
 8012a88:	fb02 f303 	mul.w	r3, r2, r3
 8012a8c:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    tmp3 = MULTIPLY(tmp10 + tmp13, FIX(0.937797057)) +  /* c7 */
 8012a90:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 8012a94:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8012a98:	4413      	add	r3, r2
 8012a9a:	f641 6202 	movw	r2, #7682	@ 0x1e02
 8012a9e:	fb03 f202 	mul.w	r2, r3, r2
	   MULTIPLY(tmp14 + tmp15, FIX(0.338443458));   /* c11 */
 8012aa2:	f8d7 10c0 	ldr.w	r1, [r7, #192]	@ 0xc0
 8012aa6:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
 8012aaa:	440b      	add	r3, r1
 8012aac:	f640 21d5 	movw	r1, #2773	@ 0xad5
 8012ab0:	fb01 f303 	mul.w	r3, r1, r3
    tmp3 = MULTIPLY(tmp10 + tmp13, FIX(0.937797057)) +  /* c7 */
 8012ab4:	4413      	add	r3, r2
 8012ab6:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
    tmp0 = tmp1 + tmp2 + tmp3 -
 8012aba:	f8d7 20e8 	ldr.w	r2, [r7, #232]	@ 0xe8
 8012abe:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8012ac2:	441a      	add	r2, r3
 8012ac4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8012ac8:	441a      	add	r2, r3
	   MULTIPLY(tmp10, FIX(2.020082300)) +          /* c3+c5+c7-c1 */
 8012aca:	f8d7 30d0 	ldr.w	r3, [r7, #208]	@ 0xd0
 8012ace:	4967      	ldr	r1, [pc, #412]	@ (8012c6c <jpeg_fdct_13x13+0x4ec>)
 8012ad0:	fb01 f303 	mul.w	r3, r1, r3
    tmp0 = tmp1 + tmp2 + tmp3 -
 8012ad4:	441a      	add	r2, r3
	   MULTIPLY(tmp14, FIX(0.318774355));           /* c9-c11 */
 8012ad6:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 8012ada:	f640 2133 	movw	r1, #2611	@ 0xa33
 8012ade:	fb01 f303 	mul.w	r3, r1, r3
    tmp0 = tmp1 + tmp2 + tmp3 -
 8012ae2:	4413      	add	r3, r2
 8012ae4:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
    tmp4 = MULTIPLY(tmp14 - tmp15, FIX(0.937797057)) -  /* c7 */
 8012ae8:	f8d7 20c0 	ldr.w	r2, [r7, #192]	@ 0xc0
 8012aec:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
 8012af0:	1ad3      	subs	r3, r2, r3
 8012af2:	f641 6202 	movw	r2, #7682	@ 0x1e02
 8012af6:	fb03 f202 	mul.w	r2, r3, r2
	   MULTIPLY(tmp11 + tmp12, FIX(0.338443458));   /* c11 */
 8012afa:	f8d7 10cc 	ldr.w	r1, [r7, #204]	@ 0xcc
 8012afe:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 8012b02:	440b      	add	r3, r1
 8012b04:	495a      	ldr	r1, [pc, #360]	@ (8012c70 <jpeg_fdct_13x13+0x4f0>)
 8012b06:	fb01 f303 	mul.w	r3, r1, r3
    tmp4 = MULTIPLY(tmp14 - tmp15, FIX(0.937797057)) -  /* c7 */
 8012b0a:	4413      	add	r3, r2
 8012b0c:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
    tmp5 = MULTIPLY(tmp11 + tmp13, - FIX(1.163874945)); /* -c5 */
 8012b10:	f8d7 20cc 	ldr.w	r2, [r7, #204]	@ 0xcc
 8012b14:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8012b18:	4413      	add	r3, r2
 8012b1a:	4a56      	ldr	r2, [pc, #344]	@ (8012c74 <jpeg_fdct_13x13+0x4f4>)
 8012b1c:	fb02 f303 	mul.w	r3, r2, r3
 8012b20:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
    tmp1 += tmp4 + tmp5 +
 8012b24:	f8d7 20dc 	ldr.w	r2, [r7, #220]	@ 0xdc
 8012b28:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8012b2c:	441a      	add	r2, r3
	    MULTIPLY(tmp11, FIX(0.837223564)) -         /* c5+c9+c11-c3 */
 8012b2e:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8012b32:	f641 21cb 	movw	r1, #6859	@ 0x1acb
 8012b36:	fb01 f303 	mul.w	r3, r1, r3
    tmp1 += tmp4 + tmp5 +
 8012b3a:	441a      	add	r2, r3
	    MULTIPLY(tmp14, FIX(2.341699410));          /* c1+c7 */
 8012b3c:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 8012b40:	494d      	ldr	r1, [pc, #308]	@ (8012c78 <jpeg_fdct_13x13+0x4f8>)
 8012b42:	fb01 f303 	mul.w	r3, r1, r3
	    MULTIPLY(tmp11, FIX(0.837223564)) -         /* c5+c9+c11-c3 */
 8012b46:	4413      	add	r3, r2
    tmp1 += tmp4 + tmp5 +
 8012b48:	f8d7 20e8 	ldr.w	r2, [r7, #232]	@ 0xe8
 8012b4c:	4413      	add	r3, r2
 8012b4e:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
    tmp6 = MULTIPLY(tmp12 + tmp13, - FIX(0.657217813)); /* -c9 */
 8012b52:	f8d7 20c8 	ldr.w	r2, [r7, #200]	@ 0xc8
 8012b56:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8012b5a:	4413      	add	r3, r2
 8012b5c:	4a47      	ldr	r2, [pc, #284]	@ (8012c7c <jpeg_fdct_13x13+0x4fc>)
 8012b5e:	fb02 f303 	mul.w	r3, r2, r3
 8012b62:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
    tmp2 += tmp4 + tmp6 -
 8012b66:	f8d7 20dc 	ldr.w	r2, [r7, #220]	@ 0xdc
 8012b6a:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8012b6e:	441a      	add	r2, r3
	    MULTIPLY(tmp12, FIX(1.572116027)) +         /* c1+c5-c9-c11 */
 8012b70:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 8012b74:	4942      	ldr	r1, [pc, #264]	@ (8012c80 <jpeg_fdct_13x13+0x500>)
 8012b76:	fb01 f303 	mul.w	r3, r1, r3
    tmp2 += tmp4 + tmp6 -
 8012b7a:	441a      	add	r2, r3
	    MULTIPLY(tmp15, FIX(2.260109708));          /* c3+c7 */
 8012b7c:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
 8012b80:	f644 0153 	movw	r1, #18515	@ 0x4853
 8012b84:	fb01 f303 	mul.w	r3, r1, r3
	    MULTIPLY(tmp12, FIX(1.572116027)) +         /* c1+c5-c9-c11 */
 8012b88:	4413      	add	r3, r2
    tmp2 += tmp4 + tmp6 -
 8012b8a:	f8d7 20e4 	ldr.w	r2, [r7, #228]	@ 0xe4
 8012b8e:	4413      	add	r3, r2
 8012b90:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    tmp3 += tmp5 + tmp6 +
 8012b94:	f8d7 20d8 	ldr.w	r2, [r7, #216]	@ 0xd8
 8012b98:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8012b9c:	441a      	add	r2, r3
	    MULTIPLY(tmp13, FIX(2.205608352)) -         /* c3+c5+c9-c7 */
 8012b9e:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8012ba2:	f244 6194 	movw	r1, #18068	@ 0x4694
 8012ba6:	fb01 f303 	mul.w	r3, r1, r3
    tmp3 += tmp5 + tmp6 +
 8012baa:	441a      	add	r2, r3
	    MULTIPLY(tmp15, FIX(1.742345811));          /* c1+c11 */
 8012bac:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
 8012bb0:	f46f 515f 	mvn.w	r1, #14272	@ 0x37c0
 8012bb4:	fb01 f303 	mul.w	r3, r1, r3
	    MULTIPLY(tmp13, FIX(2.205608352)) -         /* c3+c5+c9-c7 */
 8012bb8:	4413      	add	r3, r2
    tmp3 += tmp5 + tmp6 +
 8012bba:	f8d7 20e0 	ldr.w	r2, [r7, #224]	@ 0xe0
 8012bbe:	4413      	add	r3, r2
 8012bc0:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0

    dataptr[1] = (DCTELEM) DESCALE(tmp0, CONST_BITS);
 8012bc4:	f8d7 30ec 	ldr.w	r3, [r7, #236]	@ 0xec
 8012bc8:	f503 5280 	add.w	r2, r3, #4096	@ 0x1000
 8012bcc:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8012bd0:	3304      	adds	r3, #4
 8012bd2:	1352      	asrs	r2, r2, #13
 8012bd4:	601a      	str	r2, [r3, #0]
    dataptr[3] = (DCTELEM) DESCALE(tmp1, CONST_BITS);
 8012bd6:	f8d7 30e8 	ldr.w	r3, [r7, #232]	@ 0xe8
 8012bda:	f503 5280 	add.w	r2, r3, #4096	@ 0x1000
 8012bde:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8012be2:	330c      	adds	r3, #12
 8012be4:	1352      	asrs	r2, r2, #13
 8012be6:	601a      	str	r2, [r3, #0]
    dataptr[5] = (DCTELEM) DESCALE(tmp2, CONST_BITS);
 8012be8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8012bec:	f503 5280 	add.w	r2, r3, #4096	@ 0x1000
 8012bf0:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8012bf4:	3314      	adds	r3, #20
 8012bf6:	1352      	asrs	r2, r2, #13
 8012bf8:	601a      	str	r2, [r3, #0]
    dataptr[7] = (DCTELEM) DESCALE(tmp3, CONST_BITS);
 8012bfa:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8012bfe:	f503 5280 	add.w	r2, r3, #4096	@ 0x1000
 8012c02:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8012c06:	331c      	adds	r3, #28
 8012c08:	1352      	asrs	r2, r2, #13
 8012c0a:	601a      	str	r2, [r3, #0]

    ctr++;
 8012c0c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8012c10:	3301      	adds	r3, #1
 8012c12:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4

    if (ctr != DCTSIZE) {
 8012c16:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8012c1a:	2b08      	cmp	r3, #8
 8012c1c:	d009      	beq.n	8012c32 <jpeg_fdct_13x13+0x4b2>
      if (ctr == 13)
 8012c1e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8012c22:	2b0d      	cmp	r3, #13
 8012c24:	d00a      	beq.n	8012c3c <jpeg_fdct_13x13+0x4bc>
	break;			/* Done. */
      dataptr += DCTSIZE;	/* advance pointer to next row */
 8012c26:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8012c2a:	3320      	adds	r3, #32
 8012c2c:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
 8012c30:	e5b2      	b.n	8012798 <jpeg_fdct_13x13+0x18>
    } else
      dataptr = workspace;	/* switch pointer to extended workspace */
 8012c32:	f107 0314 	add.w	r3, r7, #20
 8012c36:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
    elemptr = sample_data[ctr] + start_col;
 8012c3a:	e5ad      	b.n	8012798 <jpeg_fdct_13x13+0x18>
	break;			/* Done. */
 8012c3c:	bf00      	nop
   * We must also scale the output by (8/13)**2 = 64/169, which we partially
   * fold into the constant multipliers and final shifting:
   * cK now represents sqrt(2) * cos(K*pi/26) * 128/169.
   */

  dataptr = data;
 8012c3e:	68fb      	ldr	r3, [r7, #12]
 8012c40:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
  wsptr = workspace;
 8012c44:	f107 0314 	add.w	r3, r7, #20
 8012c48:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
  for (ctr = DCTSIZE-1; ctr >= 0; ctr--) {
 8012c4c:	2307      	movs	r3, #7
 8012c4e:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
 8012c52:	e24e      	b.n	80130f2 <jpeg_fdct_13x13+0x972>
 8012c54:	fffffa8c 	.word	0xfffffa8c
 8012c58:	ffffe64b 	.word	0xffffe64b
 8012c5c:	ffffd7ee 	.word	0xffffd7ee
 8012c60:	fffff20e 	.word	0xfffff20e
 8012c64:	fffff5e0 	.word	0xfffff5e0
 8012c68:	ffffe202 	.word	0xffffe202
 8012c6c:	ffffbf5b 	.word	0xffffbf5b
 8012c70:	fffff52b 	.word	0xfffff52b
 8012c74:	ffffdac2 	.word	0xffffdac2
 8012c78:	ffffb511 	.word	0xffffb511
 8012c7c:	ffffeaf8 	.word	0xffffeaf8
 8012c80:	ffffcdb1 	.word	0xffffcdb1
    /* Even part */

    tmp0 = dataptr[DCTSIZE*0] + wsptr[DCTSIZE*4];
 8012c84:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8012c88:	681a      	ldr	r2, [r3, #0]
 8012c8a:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 8012c8e:	3380      	adds	r3, #128	@ 0x80
 8012c90:	681b      	ldr	r3, [r3, #0]
 8012c92:	4413      	add	r3, r2
 8012c94:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
    tmp1 = dataptr[DCTSIZE*1] + wsptr[DCTSIZE*3];
 8012c98:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8012c9c:	3320      	adds	r3, #32
 8012c9e:	681a      	ldr	r2, [r3, #0]
 8012ca0:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 8012ca4:	3360      	adds	r3, #96	@ 0x60
 8012ca6:	681b      	ldr	r3, [r3, #0]
 8012ca8:	4413      	add	r3, r2
 8012caa:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
    tmp2 = dataptr[DCTSIZE*2] + wsptr[DCTSIZE*2];
 8012cae:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8012cb2:	3340      	adds	r3, #64	@ 0x40
 8012cb4:	681a      	ldr	r2, [r3, #0]
 8012cb6:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 8012cba:	3340      	adds	r3, #64	@ 0x40
 8012cbc:	681b      	ldr	r3, [r3, #0]
 8012cbe:	4413      	add	r3, r2
 8012cc0:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    tmp3 = dataptr[DCTSIZE*3] + wsptr[DCTSIZE*1];
 8012cc4:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8012cc8:	3360      	adds	r3, #96	@ 0x60
 8012cca:	681a      	ldr	r2, [r3, #0]
 8012ccc:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 8012cd0:	3320      	adds	r3, #32
 8012cd2:	681b      	ldr	r3, [r3, #0]
 8012cd4:	4413      	add	r3, r2
 8012cd6:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
    tmp4 = dataptr[DCTSIZE*4] + wsptr[DCTSIZE*0];
 8012cda:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8012cde:	3380      	adds	r3, #128	@ 0x80
 8012ce0:	681a      	ldr	r2, [r3, #0]
 8012ce2:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 8012ce6:	681b      	ldr	r3, [r3, #0]
 8012ce8:	4413      	add	r3, r2
 8012cea:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
    tmp5 = dataptr[DCTSIZE*5] + dataptr[DCTSIZE*7];
 8012cee:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8012cf2:	33a0      	adds	r3, #160	@ 0xa0
 8012cf4:	681a      	ldr	r2, [r3, #0]
 8012cf6:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8012cfa:	33e0      	adds	r3, #224	@ 0xe0
 8012cfc:	681b      	ldr	r3, [r3, #0]
 8012cfe:	4413      	add	r3, r2
 8012d00:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
    tmp6 = dataptr[DCTSIZE*6];
 8012d04:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8012d08:	33c0      	adds	r3, #192	@ 0xc0
 8012d0a:	681b      	ldr	r3, [r3, #0]
 8012d0c:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4

    tmp10 = dataptr[DCTSIZE*0] - wsptr[DCTSIZE*4];
 8012d10:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8012d14:	681a      	ldr	r2, [r3, #0]
 8012d16:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 8012d1a:	3380      	adds	r3, #128	@ 0x80
 8012d1c:	681b      	ldr	r3, [r3, #0]
 8012d1e:	1ad3      	subs	r3, r2, r3
 8012d20:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
    tmp11 = dataptr[DCTSIZE*1] - wsptr[DCTSIZE*3];
 8012d24:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8012d28:	3320      	adds	r3, #32
 8012d2a:	681a      	ldr	r2, [r3, #0]
 8012d2c:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 8012d30:	3360      	adds	r3, #96	@ 0x60
 8012d32:	681b      	ldr	r3, [r3, #0]
 8012d34:	1ad3      	subs	r3, r2, r3
 8012d36:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
    tmp12 = dataptr[DCTSIZE*2] - wsptr[DCTSIZE*2];
 8012d3a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8012d3e:	3340      	adds	r3, #64	@ 0x40
 8012d40:	681a      	ldr	r2, [r3, #0]
 8012d42:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 8012d46:	3340      	adds	r3, #64	@ 0x40
 8012d48:	681b      	ldr	r3, [r3, #0]
 8012d4a:	1ad3      	subs	r3, r2, r3
 8012d4c:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
    tmp13 = dataptr[DCTSIZE*3] - wsptr[DCTSIZE*1];
 8012d50:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8012d54:	3360      	adds	r3, #96	@ 0x60
 8012d56:	681a      	ldr	r2, [r3, #0]
 8012d58:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 8012d5c:	3320      	adds	r3, #32
 8012d5e:	681b      	ldr	r3, [r3, #0]
 8012d60:	1ad3      	subs	r3, r2, r3
 8012d62:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
    tmp14 = dataptr[DCTSIZE*4] - wsptr[DCTSIZE*0];
 8012d66:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8012d6a:	3380      	adds	r3, #128	@ 0x80
 8012d6c:	681a      	ldr	r2, [r3, #0]
 8012d6e:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 8012d72:	681b      	ldr	r3, [r3, #0]
 8012d74:	1ad3      	subs	r3, r2, r3
 8012d76:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
    tmp15 = dataptr[DCTSIZE*5] - dataptr[DCTSIZE*7];
 8012d7a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8012d7e:	33a0      	adds	r3, #160	@ 0xa0
 8012d80:	681a      	ldr	r2, [r3, #0]
 8012d82:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8012d86:	33e0      	adds	r3, #224	@ 0xe0
 8012d88:	681b      	ldr	r3, [r3, #0]
 8012d8a:	1ad3      	subs	r3, r2, r3
 8012d8c:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc

    dataptr[DCTSIZE*0] = (DCTELEM)
      DESCALE(MULTIPLY(tmp0 + tmp1 + tmp2 + tmp3 + tmp4 + tmp5 + tmp6,
 8012d90:	f8d7 20ec 	ldr.w	r2, [r7, #236]	@ 0xec
 8012d94:	f8d7 30e8 	ldr.w	r3, [r7, #232]	@ 0xe8
 8012d98:	441a      	add	r2, r3
 8012d9a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8012d9e:	441a      	add	r2, r3
 8012da0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8012da4:	441a      	add	r2, r3
 8012da6:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8012daa:	441a      	add	r2, r3
 8012dac:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8012db0:	441a      	add	r2, r3
 8012db2:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8012db6:	4413      	add	r3, r2
 8012db8:	f641 023d 	movw	r2, #6205	@ 0x183d
 8012dbc:	fb02 f303 	mul.w	r3, r2, r3
 8012dc0:	f503 5300 	add.w	r3, r3, #8192	@ 0x2000
 8012dc4:	139a      	asrs	r2, r3, #14
    dataptr[DCTSIZE*0] = (DCTELEM)
 8012dc6:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8012dca:	601a      	str	r2, [r3, #0]
		       FIX(0.757396450)),          /* 128/169 */
	      CONST_BITS+1);
    tmp6 += tmp6;
 8012dcc:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8012dd0:	005b      	lsls	r3, r3, #1
 8012dd2:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
    tmp0 -= tmp6;
 8012dd6:	f8d7 20ec 	ldr.w	r2, [r7, #236]	@ 0xec
 8012dda:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8012dde:	1ad3      	subs	r3, r2, r3
 8012de0:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
    tmp1 -= tmp6;
 8012de4:	f8d7 20e8 	ldr.w	r2, [r7, #232]	@ 0xe8
 8012de8:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8012dec:	1ad3      	subs	r3, r2, r3
 8012dee:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
    tmp2 -= tmp6;
 8012df2:	f8d7 20e4 	ldr.w	r2, [r7, #228]	@ 0xe4
 8012df6:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8012dfa:	1ad3      	subs	r3, r2, r3
 8012dfc:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    tmp3 -= tmp6;
 8012e00:	f8d7 20e0 	ldr.w	r2, [r7, #224]	@ 0xe0
 8012e04:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8012e08:	1ad3      	subs	r3, r2, r3
 8012e0a:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
    tmp4 -= tmp6;
 8012e0e:	f8d7 20dc 	ldr.w	r2, [r7, #220]	@ 0xdc
 8012e12:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8012e16:	1ad3      	subs	r3, r2, r3
 8012e18:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
    tmp5 -= tmp6;
 8012e1c:	f8d7 20d8 	ldr.w	r2, [r7, #216]	@ 0xd8
 8012e20:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8012e24:	1ad3      	subs	r3, r2, r3
 8012e26:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
    dataptr[DCTSIZE*2] = (DCTELEM)
      DESCALE(MULTIPLY(tmp0, FIX(1.039995521)) +   /* c2 */
 8012e2a:	f8d7 30ec 	ldr.w	r3, [r7, #236]	@ 0xec
 8012e2e:	f242 1248 	movw	r2, #8520	@ 0x2148
 8012e32:	fb03 f202 	mul.w	r2, r3, r2
 8012e36:	f8d7 30e8 	ldr.w	r3, [r7, #232]	@ 0xe8
 8012e3a:	f641 11a8 	movw	r1, #6568	@ 0x19a8
 8012e3e:	fb01 f303 	mul.w	r3, r1, r3
 8012e42:	441a      	add	r2, r3
 8012e44:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8012e48:	f640 4128 	movw	r1, #3112	@ 0xc28
 8012e4c:	fb01 f303 	mul.w	r3, r1, r3
 8012e50:	441a      	add	r2, r3
 8012e52:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8012e56:	49ad      	ldr	r1, [pc, #692]	@ (801310c <jpeg_fdct_13x13+0x98c>)
 8012e58:	fb01 f303 	mul.w	r3, r1, r3
 8012e5c:	441a      	add	r2, r3
 8012e5e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8012e62:	49ab      	ldr	r1, [pc, #684]	@ (8013110 <jpeg_fdct_13x13+0x990>)
 8012e64:	fb01 f303 	mul.w	r3, r1, r3
 8012e68:	441a      	add	r2, r3
 8012e6a:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8012e6e:	49a9      	ldr	r1, [pc, #676]	@ (8013114 <jpeg_fdct_13x13+0x994>)
 8012e70:	fb01 f303 	mul.w	r3, r1, r3
 8012e74:	4413      	add	r3, r2
 8012e76:	f503 5200 	add.w	r2, r3, #8192	@ 0x2000
    dataptr[DCTSIZE*2] = (DCTELEM)
 8012e7a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8012e7e:	3340      	adds	r3, #64	@ 0x40
      DESCALE(MULTIPLY(tmp0, FIX(1.039995521)) +   /* c2 */
 8012e80:	1392      	asrs	r2, r2, #14
    dataptr[DCTSIZE*2] = (DCTELEM)
 8012e82:	601a      	str	r2, [r3, #0]
	      MULTIPLY(tmp2, FIX(0.379824504)) -   /* c10 */
	      MULTIPLY(tmp3, FIX(0.129109289)) -   /* c12 */
	      MULTIPLY(tmp4, FIX(0.608465700)) -   /* c8 */
	      MULTIPLY(tmp5, FIX(0.948429952)),    /* c4 */
	      CONST_BITS+1);
    z1 = MULTIPLY(tmp0 - tmp2, FIX(0.875087516)) - /* (c4+c6)/2 */
 8012e84:	f8d7 20ec 	ldr.w	r2, [r7, #236]	@ 0xec
 8012e88:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8012e8c:	1ad2      	subs	r2, r2, r3
 8012e8e:	4613      	mov	r3, r2
 8012e90:	00db      	lsls	r3, r3, #3
 8012e92:	1a9b      	subs	r3, r3, r2
 8012e94:	029b      	lsls	r3, r3, #10
 8012e96:	441a      	add	r2, r3
	 MULTIPLY(tmp3 - tmp4, FIX(0.330085509)) - /* (c2-c10)/2 */
 8012e98:	f8d7 10e0 	ldr.w	r1, [r7, #224]	@ 0xe0
 8012e9c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8012ea0:	1acb      	subs	r3, r1, r3
 8012ea2:	499d      	ldr	r1, [pc, #628]	@ (8013118 <jpeg_fdct_13x13+0x998>)
 8012ea4:	fb01 f303 	mul.w	r3, r1, r3
    z1 = MULTIPLY(tmp0 - tmp2, FIX(0.875087516)) - /* (c4+c6)/2 */
 8012ea8:	441a      	add	r2, r3
	 MULTIPLY(tmp1 - tmp5, FIX(0.239678205));  /* (c8-c12)/2 */
 8012eaa:	f8d7 10e8 	ldr.w	r1, [r7, #232]	@ 0xe8
 8012eae:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8012eb2:	1acb      	subs	r3, r1, r3
 8012eb4:	4999      	ldr	r1, [pc, #612]	@ (801311c <jpeg_fdct_13x13+0x99c>)
 8012eb6:	fb01 f303 	mul.w	r3, r1, r3
    z1 = MULTIPLY(tmp0 - tmp2, FIX(0.875087516)) - /* (c4+c6)/2 */
 8012eba:	4413      	add	r3, r2
 8012ebc:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
    z2 = MULTIPLY(tmp0 + tmp2, FIX(0.073342435)) - /* (c4-c6)/2 */
 8012ec0:	f8d7 20ec 	ldr.w	r2, [r7, #236]	@ 0xec
 8012ec4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8012ec8:	4413      	add	r3, r2
 8012eca:	f240 2259 	movw	r2, #601	@ 0x259
 8012ece:	fb03 f202 	mul.w	r2, r3, r2
	 MULTIPLY(tmp3 + tmp4, FIX(0.709910013)) + /* (c2+c10)/2 */
 8012ed2:	f8d7 10e0 	ldr.w	r1, [r7, #224]	@ 0xe0
 8012ed6:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8012eda:	440b      	add	r3, r1
 8012edc:	4990      	ldr	r1, [pc, #576]	@ (8013120 <jpeg_fdct_13x13+0x9a0>)
 8012ede:	fb01 f303 	mul.w	r3, r1, r3
    z2 = MULTIPLY(tmp0 + tmp2, FIX(0.073342435)) - /* (c4-c6)/2 */
 8012ee2:	441a      	add	r2, r3
	 MULTIPLY(tmp1 + tmp5, FIX(0.368787494));  /* (c8+c12)/2 */
 8012ee4:	f8d7 10e8 	ldr.w	r1, [r7, #232]	@ 0xe8
 8012ee8:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8012eec:	440b      	add	r3, r1
 8012eee:	f640 31cd 	movw	r1, #3021	@ 0xbcd
 8012ef2:	fb01 f303 	mul.w	r3, r1, r3
    z2 = MULTIPLY(tmp0 + tmp2, FIX(0.073342435)) - /* (c4-c6)/2 */
 8012ef6:	4413      	add	r3, r2
 8012ef8:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4

    dataptr[DCTSIZE*4] = (DCTELEM) DESCALE(z1 + z2, CONST_BITS+1);
 8012efc:	f8d7 20b8 	ldr.w	r2, [r7, #184]	@ 0xb8
 8012f00:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 8012f04:	4413      	add	r3, r2
 8012f06:	f503 5200 	add.w	r2, r3, #8192	@ 0x2000
 8012f0a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8012f0e:	3380      	adds	r3, #128	@ 0x80
 8012f10:	1392      	asrs	r2, r2, #14
 8012f12:	601a      	str	r2, [r3, #0]
    dataptr[DCTSIZE*6] = (DCTELEM) DESCALE(z1 - z2, CONST_BITS+1);
 8012f14:	f8d7 20b8 	ldr.w	r2, [r7, #184]	@ 0xb8
 8012f18:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 8012f1c:	1ad3      	subs	r3, r2, r3
 8012f1e:	f503 5200 	add.w	r2, r3, #8192	@ 0x2000
 8012f22:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8012f26:	33c0      	adds	r3, #192	@ 0xc0
 8012f28:	1392      	asrs	r2, r2, #14
 8012f2a:	601a      	str	r2, [r3, #0]

    /* Odd part */

    tmp1 = MULTIPLY(tmp10 + tmp11, FIX(1.001514908));   /* c3 */
 8012f2c:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 8012f30:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8012f34:	4413      	add	r3, r2
 8012f36:	f242 020c 	movw	r2, #8204	@ 0x200c
 8012f3a:	fb02 f303 	mul.w	r3, r2, r3
 8012f3e:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
    tmp2 = MULTIPLY(tmp10 + tmp12, FIX(0.881514751));   /* c5 */
 8012f42:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 8012f46:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 8012f4a:	4413      	add	r3, r2
 8012f4c:	f641 4235 	movw	r2, #7221	@ 0x1c35
 8012f50:	fb02 f303 	mul.w	r3, r2, r3
 8012f54:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    tmp3 = MULTIPLY(tmp10 + tmp13, FIX(0.710284161)) +  /* c7 */
 8012f58:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 8012f5c:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8012f60:	4413      	add	r3, r2
 8012f62:	f241 62bb 	movw	r2, #5819	@ 0x16bb
 8012f66:	fb03 f202 	mul.w	r2, r3, r2
	   MULTIPLY(tmp14 + tmp15, FIX(0.256335874));   /* c11 */
 8012f6a:	f8d7 10c0 	ldr.w	r1, [r7, #192]	@ 0xc0
 8012f6e:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
 8012f72:	440b      	add	r3, r1
 8012f74:	f640 0134 	movw	r1, #2100	@ 0x834
 8012f78:	fb01 f303 	mul.w	r3, r1, r3
    tmp3 = MULTIPLY(tmp10 + tmp13, FIX(0.710284161)) +  /* c7 */
 8012f7c:	4413      	add	r3, r2
 8012f7e:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
    tmp0 = tmp1 + tmp2 + tmp3 -
 8012f82:	f8d7 20e8 	ldr.w	r2, [r7, #232]	@ 0xe8
 8012f86:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8012f8a:	441a      	add	r2, r3
 8012f8c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8012f90:	441a      	add	r2, r3
	   MULTIPLY(tmp10, FIX(1.530003162)) +          /* c3+c5+c7-c1 */
 8012f92:	f8d7 30d0 	ldr.w	r3, [r7, #208]	@ 0xd0
 8012f96:	4963      	ldr	r1, [pc, #396]	@ (8013124 <jpeg_fdct_13x13+0x9a4>)
 8012f98:	fb01 f303 	mul.w	r3, r1, r3
    tmp0 = tmp1 + tmp2 + tmp3 -
 8012f9c:	441a      	add	r2, r3
	   MULTIPLY(tmp14, FIX(0.241438564));           /* c9-c11 */
 8012f9e:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 8012fa2:	f240 71ba 	movw	r1, #1978	@ 0x7ba
 8012fa6:	fb01 f303 	mul.w	r3, r1, r3
    tmp0 = tmp1 + tmp2 + tmp3 -
 8012faa:	4413      	add	r3, r2
 8012fac:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
    tmp4 = MULTIPLY(tmp14 - tmp15, FIX(0.710284161)) -  /* c7 */
 8012fb0:	f8d7 20c0 	ldr.w	r2, [r7, #192]	@ 0xc0
 8012fb4:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
 8012fb8:	1ad3      	subs	r3, r2, r3
 8012fba:	f241 62bb 	movw	r2, #5819	@ 0x16bb
 8012fbe:	fb03 f202 	mul.w	r2, r3, r2
	   MULTIPLY(tmp11 + tmp12, FIX(0.256335874));   /* c11 */
 8012fc2:	f8d7 10cc 	ldr.w	r1, [r7, #204]	@ 0xcc
 8012fc6:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 8012fca:	440b      	add	r3, r1
 8012fcc:	4956      	ldr	r1, [pc, #344]	@ (8013128 <jpeg_fdct_13x13+0x9a8>)
 8012fce:	fb01 f303 	mul.w	r3, r1, r3
    tmp4 = MULTIPLY(tmp14 - tmp15, FIX(0.710284161)) -  /* c7 */
 8012fd2:	4413      	add	r3, r2
 8012fd4:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
    tmp5 = MULTIPLY(tmp11 + tmp13, - FIX(0.881514751)); /* -c5 */
 8012fd8:	f8d7 20cc 	ldr.w	r2, [r7, #204]	@ 0xcc
 8012fdc:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8012fe0:	4413      	add	r3, r2
 8012fe2:	4a52      	ldr	r2, [pc, #328]	@ (801312c <jpeg_fdct_13x13+0x9ac>)
 8012fe4:	fb02 f303 	mul.w	r3, r2, r3
 8012fe8:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
    tmp1 += tmp4 + tmp5 +
 8012fec:	f8d7 20dc 	ldr.w	r2, [r7, #220]	@ 0xdc
 8012ff0:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8012ff4:	441a      	add	r2, r3
	    MULTIPLY(tmp11, FIX(0.634110155)) -         /* c5+c9+c11-c3 */
 8012ff6:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8012ffa:	f241 414b 	movw	r1, #5195	@ 0x144b
 8012ffe:	fb01 f303 	mul.w	r3, r1, r3
    tmp1 += tmp4 + tmp5 +
 8013002:	441a      	add	r2, r3
	    MULTIPLY(tmp14, FIX(1.773594819));          /* c1+c7 */
 8013004:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 8013008:	f46f 5163 	mvn.w	r1, #14528	@ 0x38c0
 801300c:	fb01 f303 	mul.w	r3, r1, r3
	    MULTIPLY(tmp11, FIX(0.634110155)) -         /* c5+c9+c11-c3 */
 8013010:	4413      	add	r3, r2
    tmp1 += tmp4 + tmp5 +
 8013012:	f8d7 20e8 	ldr.w	r2, [r7, #232]	@ 0xe8
 8013016:	4413      	add	r3, r2
 8013018:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
    tmp6 = MULTIPLY(tmp12 + tmp13, - FIX(0.497774438)); /* -c9 */
 801301c:	f8d7 20c8 	ldr.w	r2, [r7, #200]	@ 0xc8
 8013020:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8013024:	4413      	add	r3, r2
 8013026:	4a42      	ldr	r2, [pc, #264]	@ (8013130 <jpeg_fdct_13x13+0x9b0>)
 8013028:	fb02 f303 	mul.w	r3, r2, r3
 801302c:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
    tmp2 += tmp4 + tmp6 -
 8013030:	f8d7 20dc 	ldr.w	r2, [r7, #220]	@ 0xdc
 8013034:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8013038:	441a      	add	r2, r3
	    MULTIPLY(tmp12, FIX(1.190715098)) +         /* c1+c5-c9-c11 */
 801303a:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 801303e:	493d      	ldr	r1, [pc, #244]	@ (8013134 <jpeg_fdct_13x13+0x9b4>)
 8013040:	fb01 f303 	mul.w	r3, r1, r3
    tmp2 += tmp4 + tmp6 -
 8013044:	441a      	add	r2, r3
	    MULTIPLY(tmp15, FIX(1.711799069));          /* c3+c7 */
 8013046:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
 801304a:	f243 61c7 	movw	r1, #14023	@ 0x36c7
 801304e:	fb01 f303 	mul.w	r3, r1, r3
	    MULTIPLY(tmp12, FIX(1.190715098)) +         /* c1+c5-c9-c11 */
 8013052:	4413      	add	r3, r2
    tmp2 += tmp4 + tmp6 -
 8013054:	f8d7 20e4 	ldr.w	r2, [r7, #228]	@ 0xe4
 8013058:	4413      	add	r3, r2
 801305a:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    tmp3 += tmp5 + tmp6 +
 801305e:	f8d7 20d8 	ldr.w	r2, [r7, #216]	@ 0xd8
 8013062:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8013066:	441a      	add	r2, r3
	    MULTIPLY(tmp13, FIX(1.670519935)) -         /* c3+c5+c9-c7 */
 8013068:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 801306c:	f243 5175 	movw	r1, #13685	@ 0x3575
 8013070:	fb01 f303 	mul.w	r3, r1, r3
    tmp3 += tmp5 + tmp6 +
 8013074:	441a      	add	r2, r3
	    MULTIPLY(tmp15, FIX(1.319646532));          /* c1+c11 */
 8013076:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
 801307a:	492f      	ldr	r1, [pc, #188]	@ (8013138 <jpeg_fdct_13x13+0x9b8>)
 801307c:	fb01 f303 	mul.w	r3, r1, r3
	    MULTIPLY(tmp13, FIX(1.670519935)) -         /* c3+c5+c9-c7 */
 8013080:	4413      	add	r3, r2
    tmp3 += tmp5 + tmp6 +
 8013082:	f8d7 20e0 	ldr.w	r2, [r7, #224]	@ 0xe0
 8013086:	4413      	add	r3, r2
 8013088:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0

    dataptr[DCTSIZE*1] = (DCTELEM) DESCALE(tmp0, CONST_BITS+1);
 801308c:	f8d7 30ec 	ldr.w	r3, [r7, #236]	@ 0xec
 8013090:	f503 5200 	add.w	r2, r3, #8192	@ 0x2000
 8013094:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8013098:	3320      	adds	r3, #32
 801309a:	1392      	asrs	r2, r2, #14
 801309c:	601a      	str	r2, [r3, #0]
    dataptr[DCTSIZE*3] = (DCTELEM) DESCALE(tmp1, CONST_BITS+1);
 801309e:	f8d7 30e8 	ldr.w	r3, [r7, #232]	@ 0xe8
 80130a2:	f503 5200 	add.w	r2, r3, #8192	@ 0x2000
 80130a6:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80130aa:	3360      	adds	r3, #96	@ 0x60
 80130ac:	1392      	asrs	r2, r2, #14
 80130ae:	601a      	str	r2, [r3, #0]
    dataptr[DCTSIZE*5] = (DCTELEM) DESCALE(tmp2, CONST_BITS+1);
 80130b0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80130b4:	f503 5200 	add.w	r2, r3, #8192	@ 0x2000
 80130b8:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80130bc:	33a0      	adds	r3, #160	@ 0xa0
 80130be:	1392      	asrs	r2, r2, #14
 80130c0:	601a      	str	r2, [r3, #0]
    dataptr[DCTSIZE*7] = (DCTELEM) DESCALE(tmp3, CONST_BITS+1);
 80130c2:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80130c6:	f503 5200 	add.w	r2, r3, #8192	@ 0x2000
 80130ca:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80130ce:	33e0      	adds	r3, #224	@ 0xe0
 80130d0:	1392      	asrs	r2, r2, #14
 80130d2:	601a      	str	r2, [r3, #0]

    dataptr++;			/* advance pointer to next column */
 80130d4:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80130d8:	3304      	adds	r3, #4
 80130da:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
    wsptr++;			/* advance pointer to next column */
 80130de:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 80130e2:	3304      	adds	r3, #4
 80130e4:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
  for (ctr = DCTSIZE-1; ctr >= 0; ctr--) {
 80130e8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80130ec:	3b01      	subs	r3, #1
 80130ee:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
 80130f2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80130f6:	2b00      	cmp	r3, #0
 80130f8:	f6bf adc4 	bge.w	8012c84 <jpeg_fdct_13x13+0x504>
  }
}
 80130fc:	bf00      	nop
 80130fe:	bf00      	nop
 8013100:	f507 7782 	add.w	r7, r7, #260	@ 0x104
 8013104:	46bd      	mov	sp, r7
 8013106:	f85d 7b04 	ldr.w	r7, [sp], #4
 801310a:	4770      	bx	lr
 801310c:	fffffbde 	.word	0xfffffbde
 8013110:	ffffec87 	.word	0xffffec87
 8013114:	ffffe1a6 	.word	0xffffe1a6
 8013118:	fffff570 	.word	0xfffff570
 801311c:	fffff855 	.word	0xfffff855
 8013120:	ffffe948 	.word	0xffffe948
 8013124:	ffffcf0a 	.word	0xffffcf0a
 8013128:	fffff7cc 	.word	0xfffff7cc
 801312c:	ffffe3cb 	.word	0xffffe3cb
 8013130:	fffff012 	.word	0xfffff012
 8013134:	ffffd9e6 	.word	0xffffd9e6
 8013138:	ffffd5c5 	.word	0xffffd5c5

0801313c <jpeg_fdct_14x14>:
 * Perform the forward DCT on a 14x14 sample block.
 */

GLOBAL(void)
jpeg_fdct_14x14 (DCTELEM * data, JSAMPARRAY sample_data, JDIMENSION start_col)
{
 801313c:	b480      	push	{r7}
 801313e:	b0c7      	sub	sp, #284	@ 0x11c
 8013140:	af00      	add	r7, sp, #0
 8013142:	f507 738c 	add.w	r3, r7, #280	@ 0x118
 8013146:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 801314a:	6018      	str	r0, [r3, #0]
 801314c:	f507 738c 	add.w	r3, r7, #280	@ 0x118
 8013150:	f5a3 7388 	sub.w	r3, r3, #272	@ 0x110
 8013154:	6019      	str	r1, [r3, #0]
 8013156:	f507 738c 	add.w	r3, r7, #280	@ 0x118
 801315a:	f5a3 738a 	sub.w	r3, r3, #276	@ 0x114
 801315e:	601a      	str	r2, [r3, #0]

  /* Pass 1: process rows. */
  /* Note results are scaled up by sqrt(8) compared to a true DCT. */
  /* cK represents sqrt(2) * cos(K*pi/28). */

  dataptr = data;
 8013160:	f507 738c 	add.w	r3, r7, #280	@ 0x118
 8013164:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 8013168:	681b      	ldr	r3, [r3, #0]
 801316a:	f8c7 3114 	str.w	r3, [r7, #276]	@ 0x114
  ctr = 0;
 801316e:	2300      	movs	r3, #0
 8013170:	f8c7 310c 	str.w	r3, [r7, #268]	@ 0x10c
  for (;;) {
    elemptr = sample_data[ctr] + start_col;
 8013174:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8013178:	009b      	lsls	r3, r3, #2
 801317a:	f507 728c 	add.w	r2, r7, #280	@ 0x118
 801317e:	f5a2 7288 	sub.w	r2, r2, #272	@ 0x110
 8013182:	6812      	ldr	r2, [r2, #0]
 8013184:	4413      	add	r3, r2
 8013186:	681a      	ldr	r2, [r3, #0]
 8013188:	f507 738c 	add.w	r3, r7, #280	@ 0x118
 801318c:	f5a3 738a 	sub.w	r3, r3, #276	@ 0x114
 8013190:	681b      	ldr	r3, [r3, #0]
 8013192:	4413      	add	r3, r2
 8013194:	f8c7 3108 	str.w	r3, [r7, #264]	@ 0x108

    /* Even part */

    tmp0 = GETJSAMPLE(elemptr[0]) + GETJSAMPLE(elemptr[13]);
 8013198:	f8d7 3108 	ldr.w	r3, [r7, #264]	@ 0x108
 801319c:	781b      	ldrb	r3, [r3, #0]
 801319e:	461a      	mov	r2, r3
 80131a0:	f8d7 3108 	ldr.w	r3, [r7, #264]	@ 0x108
 80131a4:	330d      	adds	r3, #13
 80131a6:	781b      	ldrb	r3, [r3, #0]
 80131a8:	4413      	add	r3, r2
 80131aa:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
    tmp1 = GETJSAMPLE(elemptr[1]) + GETJSAMPLE(elemptr[12]);
 80131ae:	f8d7 3108 	ldr.w	r3, [r7, #264]	@ 0x108
 80131b2:	3301      	adds	r3, #1
 80131b4:	781b      	ldrb	r3, [r3, #0]
 80131b6:	461a      	mov	r2, r3
 80131b8:	f8d7 3108 	ldr.w	r3, [r7, #264]	@ 0x108
 80131bc:	330c      	adds	r3, #12
 80131be:	781b      	ldrb	r3, [r3, #0]
 80131c0:	4413      	add	r3, r2
 80131c2:	f8c7 3100 	str.w	r3, [r7, #256]	@ 0x100
    tmp2 = GETJSAMPLE(elemptr[2]) + GETJSAMPLE(elemptr[11]);
 80131c6:	f8d7 3108 	ldr.w	r3, [r7, #264]	@ 0x108
 80131ca:	3302      	adds	r3, #2
 80131cc:	781b      	ldrb	r3, [r3, #0]
 80131ce:	461a      	mov	r2, r3
 80131d0:	f8d7 3108 	ldr.w	r3, [r7, #264]	@ 0x108
 80131d4:	330b      	adds	r3, #11
 80131d6:	781b      	ldrb	r3, [r3, #0]
 80131d8:	4413      	add	r3, r2
 80131da:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
    tmp13 = GETJSAMPLE(elemptr[3]) + GETJSAMPLE(elemptr[10]);
 80131de:	f8d7 3108 	ldr.w	r3, [r7, #264]	@ 0x108
 80131e2:	3303      	adds	r3, #3
 80131e4:	781b      	ldrb	r3, [r3, #0]
 80131e6:	461a      	mov	r2, r3
 80131e8:	f8d7 3108 	ldr.w	r3, [r7, #264]	@ 0x108
 80131ec:	330a      	adds	r3, #10
 80131ee:	781b      	ldrb	r3, [r3, #0]
 80131f0:	4413      	add	r3, r2
 80131f2:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
    tmp4 = GETJSAMPLE(elemptr[4]) + GETJSAMPLE(elemptr[9]);
 80131f6:	f8d7 3108 	ldr.w	r3, [r7, #264]	@ 0x108
 80131fa:	3304      	adds	r3, #4
 80131fc:	781b      	ldrb	r3, [r3, #0]
 80131fe:	461a      	mov	r2, r3
 8013200:	f8d7 3108 	ldr.w	r3, [r7, #264]	@ 0x108
 8013204:	3309      	adds	r3, #9
 8013206:	781b      	ldrb	r3, [r3, #0]
 8013208:	4413      	add	r3, r2
 801320a:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
    tmp5 = GETJSAMPLE(elemptr[5]) + GETJSAMPLE(elemptr[8]);
 801320e:	f8d7 3108 	ldr.w	r3, [r7, #264]	@ 0x108
 8013212:	3305      	adds	r3, #5
 8013214:	781b      	ldrb	r3, [r3, #0]
 8013216:	461a      	mov	r2, r3
 8013218:	f8d7 3108 	ldr.w	r3, [r7, #264]	@ 0x108
 801321c:	3308      	adds	r3, #8
 801321e:	781b      	ldrb	r3, [r3, #0]
 8013220:	4413      	add	r3, r2
 8013222:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
    tmp6 = GETJSAMPLE(elemptr[6]) + GETJSAMPLE(elemptr[7]);
 8013226:	f8d7 3108 	ldr.w	r3, [r7, #264]	@ 0x108
 801322a:	3306      	adds	r3, #6
 801322c:	781b      	ldrb	r3, [r3, #0]
 801322e:	461a      	mov	r2, r3
 8013230:	f8d7 3108 	ldr.w	r3, [r7, #264]	@ 0x108
 8013234:	3307      	adds	r3, #7
 8013236:	781b      	ldrb	r3, [r3, #0]
 8013238:	4413      	add	r3, r2
 801323a:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec

    tmp10 = tmp0 + tmp6;
 801323e:	f8d7 2104 	ldr.w	r2, [r7, #260]	@ 0x104
 8013242:	f8d7 30ec 	ldr.w	r3, [r7, #236]	@ 0xec
 8013246:	4413      	add	r3, r2
 8013248:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
    tmp14 = tmp0 - tmp6;
 801324c:	f8d7 2104 	ldr.w	r2, [r7, #260]	@ 0x104
 8013250:	f8d7 30ec 	ldr.w	r3, [r7, #236]	@ 0xec
 8013254:	1ad3      	subs	r3, r2, r3
 8013256:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    tmp11 = tmp1 + tmp5;
 801325a:	f8d7 2100 	ldr.w	r2, [r7, #256]	@ 0x100
 801325e:	f8d7 30f0 	ldr.w	r3, [r7, #240]	@ 0xf0
 8013262:	4413      	add	r3, r2
 8013264:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
    tmp15 = tmp1 - tmp5;
 8013268:	f8d7 2100 	ldr.w	r2, [r7, #256]	@ 0x100
 801326c:	f8d7 30f0 	ldr.w	r3, [r7, #240]	@ 0xf0
 8013270:	1ad3      	subs	r3, r2, r3
 8013272:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
    tmp12 = tmp2 + tmp4;
 8013276:	f8d7 20fc 	ldr.w	r2, [r7, #252]	@ 0xfc
 801327a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 801327e:	4413      	add	r3, r2
 8013280:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
    tmp16 = tmp2 - tmp4;
 8013284:	f8d7 20fc 	ldr.w	r2, [r7, #252]	@ 0xfc
 8013288:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 801328c:	1ad3      	subs	r3, r2, r3
 801328e:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4

    tmp0 = GETJSAMPLE(elemptr[0]) - GETJSAMPLE(elemptr[13]);
 8013292:	f8d7 3108 	ldr.w	r3, [r7, #264]	@ 0x108
 8013296:	781b      	ldrb	r3, [r3, #0]
 8013298:	461a      	mov	r2, r3
 801329a:	f8d7 3108 	ldr.w	r3, [r7, #264]	@ 0x108
 801329e:	330d      	adds	r3, #13
 80132a0:	781b      	ldrb	r3, [r3, #0]
 80132a2:	1ad3      	subs	r3, r2, r3
 80132a4:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
    tmp1 = GETJSAMPLE(elemptr[1]) - GETJSAMPLE(elemptr[12]);
 80132a8:	f8d7 3108 	ldr.w	r3, [r7, #264]	@ 0x108
 80132ac:	3301      	adds	r3, #1
 80132ae:	781b      	ldrb	r3, [r3, #0]
 80132b0:	461a      	mov	r2, r3
 80132b2:	f8d7 3108 	ldr.w	r3, [r7, #264]	@ 0x108
 80132b6:	330c      	adds	r3, #12
 80132b8:	781b      	ldrb	r3, [r3, #0]
 80132ba:	1ad3      	subs	r3, r2, r3
 80132bc:	f8c7 3100 	str.w	r3, [r7, #256]	@ 0x100
    tmp2 = GETJSAMPLE(elemptr[2]) - GETJSAMPLE(elemptr[11]);
 80132c0:	f8d7 3108 	ldr.w	r3, [r7, #264]	@ 0x108
 80132c4:	3302      	adds	r3, #2
 80132c6:	781b      	ldrb	r3, [r3, #0]
 80132c8:	461a      	mov	r2, r3
 80132ca:	f8d7 3108 	ldr.w	r3, [r7, #264]	@ 0x108
 80132ce:	330b      	adds	r3, #11
 80132d0:	781b      	ldrb	r3, [r3, #0]
 80132d2:	1ad3      	subs	r3, r2, r3
 80132d4:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
    tmp3 = GETJSAMPLE(elemptr[3]) - GETJSAMPLE(elemptr[10]);
 80132d8:	f8d7 3108 	ldr.w	r3, [r7, #264]	@ 0x108
 80132dc:	3303      	adds	r3, #3
 80132de:	781b      	ldrb	r3, [r3, #0]
 80132e0:	461a      	mov	r2, r3
 80132e2:	f8d7 3108 	ldr.w	r3, [r7, #264]	@ 0x108
 80132e6:	330a      	adds	r3, #10
 80132e8:	781b      	ldrb	r3, [r3, #0]
 80132ea:	1ad3      	subs	r3, r2, r3
 80132ec:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
    tmp4 = GETJSAMPLE(elemptr[4]) - GETJSAMPLE(elemptr[9]);
 80132f0:	f8d7 3108 	ldr.w	r3, [r7, #264]	@ 0x108
 80132f4:	3304      	adds	r3, #4
 80132f6:	781b      	ldrb	r3, [r3, #0]
 80132f8:	461a      	mov	r2, r3
 80132fa:	f8d7 3108 	ldr.w	r3, [r7, #264]	@ 0x108
 80132fe:	3309      	adds	r3, #9
 8013300:	781b      	ldrb	r3, [r3, #0]
 8013302:	1ad3      	subs	r3, r2, r3
 8013304:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
    tmp5 = GETJSAMPLE(elemptr[5]) - GETJSAMPLE(elemptr[8]);
 8013308:	f8d7 3108 	ldr.w	r3, [r7, #264]	@ 0x108
 801330c:	3305      	adds	r3, #5
 801330e:	781b      	ldrb	r3, [r3, #0]
 8013310:	461a      	mov	r2, r3
 8013312:	f8d7 3108 	ldr.w	r3, [r7, #264]	@ 0x108
 8013316:	3308      	adds	r3, #8
 8013318:	781b      	ldrb	r3, [r3, #0]
 801331a:	1ad3      	subs	r3, r2, r3
 801331c:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
    tmp6 = GETJSAMPLE(elemptr[6]) - GETJSAMPLE(elemptr[7]);
 8013320:	f8d7 3108 	ldr.w	r3, [r7, #264]	@ 0x108
 8013324:	3306      	adds	r3, #6
 8013326:	781b      	ldrb	r3, [r3, #0]
 8013328:	461a      	mov	r2, r3
 801332a:	f8d7 3108 	ldr.w	r3, [r7, #264]	@ 0x108
 801332e:	3307      	adds	r3, #7
 8013330:	781b      	ldrb	r3, [r3, #0]
 8013332:	1ad3      	subs	r3, r2, r3
 8013334:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec

    /* Apply unsigned->signed conversion */
    dataptr[0] = (DCTELEM)
      (tmp10 + tmp11 + tmp12 + tmp13 - 14 * CENTERJSAMPLE);
 8013338:	f8d7 20e8 	ldr.w	r2, [r7, #232]	@ 0xe8
 801333c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8013340:	441a      	add	r2, r3
 8013342:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8013346:	441a      	add	r2, r3
 8013348:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 801334c:	4413      	add	r3, r2
 801334e:	f5a3 62e0 	sub.w	r2, r3, #1792	@ 0x700
    dataptr[0] = (DCTELEM)
 8013352:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8013356:	601a      	str	r2, [r3, #0]
    tmp13 += tmp13;
 8013358:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 801335c:	005b      	lsls	r3, r3, #1
 801335e:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
    dataptr[4] = (DCTELEM)
      DESCALE(MULTIPLY(tmp10 - tmp13, FIX(1.274162392)) + /* c4 */
 8013362:	f8d7 20e8 	ldr.w	r2, [r7, #232]	@ 0xe8
 8013366:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 801336a:	1ad3      	subs	r3, r2, r3
 801336c:	f642 02c6 	movw	r2, #10438	@ 0x28c6
 8013370:	fb03 f202 	mul.w	r2, r3, r2
 8013374:	f8d7 10e0 	ldr.w	r1, [r7, #224]	@ 0xe0
 8013378:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 801337c:	1acb      	subs	r3, r1, r3
 801337e:	f640 2112 	movw	r1, #2578	@ 0xa12
 8013382:	fb01 f303 	mul.w	r3, r1, r3
 8013386:	441a      	add	r2, r3
 8013388:	f8d7 10d8 	ldr.w	r1, [r7, #216]	@ 0xd8
 801338c:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 8013390:	1acb      	subs	r3, r1, r3
 8013392:	498f      	ldr	r1, [pc, #572]	@ (80135d0 <jpeg_fdct_14x14+0x494>)
 8013394:	fb01 f303 	mul.w	r3, r1, r3
 8013398:	4413      	add	r3, r2
 801339a:	f503 5280 	add.w	r2, r3, #4096	@ 0x1000
    dataptr[4] = (DCTELEM)
 801339e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80133a2:	3310      	adds	r3, #16
      DESCALE(MULTIPLY(tmp10 - tmp13, FIX(1.274162392)) + /* c4 */
 80133a4:	1352      	asrs	r2, r2, #13
    dataptr[4] = (DCTELEM)
 80133a6:	601a      	str	r2, [r3, #0]
	      MULTIPLY(tmp11 - tmp13, FIX(0.314692123)) - /* c12 */
	      MULTIPLY(tmp12 - tmp13, FIX(0.881747734)),  /* c8 */
	      CONST_BITS);

    tmp10 = MULTIPLY(tmp14 + tmp15, FIX(1.105676686));    /* c6 */
 80133a8:	f8d7 20e4 	ldr.w	r2, [r7, #228]	@ 0xe4
 80133ac:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80133b0:	4413      	add	r3, r2
 80133b2:	f242 3262 	movw	r2, #9058	@ 0x2362
 80133b6:	fb02 f303 	mul.w	r3, r2, r3
 80133ba:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8

    dataptr[2] = (DCTELEM)
      DESCALE(tmp10 + MULTIPLY(tmp14, FIX(0.273079590))   /* c2-c6 */
 80133be:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80133c2:	f640 02bd 	movw	r2, #2237	@ 0x8bd
 80133c6:	fb03 f202 	mul.w	r2, r3, r2
 80133ca:	f8d7 30e8 	ldr.w	r3, [r7, #232]	@ 0xe8
 80133ce:	441a      	add	r2, r3
 80133d0:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 80133d4:	f241 31a3 	movw	r1, #5027	@ 0x13a3
 80133d8:	fb01 f303 	mul.w	r3, r1, r3
 80133dc:	4413      	add	r3, r2
 80133de:	f503 5280 	add.w	r2, r3, #4096	@ 0x1000
    dataptr[2] = (DCTELEM)
 80133e2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80133e6:	3308      	adds	r3, #8
      DESCALE(tmp10 + MULTIPLY(tmp14, FIX(0.273079590))   /* c2-c6 */
 80133e8:	1352      	asrs	r2, r2, #13
    dataptr[2] = (DCTELEM)
 80133ea:	601a      	str	r2, [r3, #0]
	      + MULTIPLY(tmp16, FIX(0.613604268)),        /* c10 */
	      CONST_BITS);
    dataptr[6] = (DCTELEM)
      DESCALE(tmp10 - MULTIPLY(tmp15, FIX(1.719280954))   /* c6+c10 */
 80133ec:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80133f0:	4a78      	ldr	r2, [pc, #480]	@ (80135d4 <jpeg_fdct_14x14+0x498>)
 80133f2:	fb03 f202 	mul.w	r2, r3, r2
 80133f6:	f8d7 30e8 	ldr.w	r3, [r7, #232]	@ 0xe8
 80133fa:	441a      	add	r2, r3
 80133fc:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8013400:	4975      	ldr	r1, [pc, #468]	@ (80135d8 <jpeg_fdct_14x14+0x49c>)
 8013402:	fb01 f303 	mul.w	r3, r1, r3
 8013406:	4413      	add	r3, r2
 8013408:	f503 5280 	add.w	r2, r3, #4096	@ 0x1000
    dataptr[6] = (DCTELEM)
 801340c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8013410:	3318      	adds	r3, #24
      DESCALE(tmp10 - MULTIPLY(tmp15, FIX(1.719280954))   /* c6+c10 */
 8013412:	1352      	asrs	r2, r2, #13
    dataptr[6] = (DCTELEM)
 8013414:	601a      	str	r2, [r3, #0]
	      - MULTIPLY(tmp16, FIX(1.378756276)),        /* c2 */
	      CONST_BITS);

    /* Odd part */

    tmp10 = tmp1 + tmp2;
 8013416:	f8d7 2100 	ldr.w	r2, [r7, #256]	@ 0x100
 801341a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 801341e:	4413      	add	r3, r2
 8013420:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
    tmp11 = tmp5 - tmp4;
 8013424:	f8d7 20f0 	ldr.w	r2, [r7, #240]	@ 0xf0
 8013428:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 801342c:	1ad3      	subs	r3, r2, r3
 801342e:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
    dataptr[7] = (DCTELEM) (tmp0 - tmp10 + tmp3 - tmp11 - tmp6);
 8013432:	f8d7 2104 	ldr.w	r2, [r7, #260]	@ 0x104
 8013436:	f8d7 30e8 	ldr.w	r3, [r7, #232]	@ 0xe8
 801343a:	1ad2      	subs	r2, r2, r3
 801343c:	f8d7 30d0 	ldr.w	r3, [r7, #208]	@ 0xd0
 8013440:	441a      	add	r2, r3
 8013442:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8013446:	1ad1      	subs	r1, r2, r3
 8013448:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 801344c:	331c      	adds	r3, #28
 801344e:	f8d7 20ec 	ldr.w	r2, [r7, #236]	@ 0xec
 8013452:	1a8a      	subs	r2, r1, r2
 8013454:	601a      	str	r2, [r3, #0]
    tmp3 <<= CONST_BITS;
 8013456:	f8d7 30d0 	ldr.w	r3, [r7, #208]	@ 0xd0
 801345a:	035b      	lsls	r3, r3, #13
 801345c:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
    tmp10 = MULTIPLY(tmp10, - FIX(0.158341681));          /* -c13 */
 8013460:	f8d7 30e8 	ldr.w	r3, [r7, #232]	@ 0xe8
 8013464:	f46f 62a2 	mvn.w	r2, #1296	@ 0x510
 8013468:	fb02 f303 	mul.w	r3, r2, r3
 801346c:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
    tmp11 = MULTIPLY(tmp11, FIX(1.405321284));            /* c1 */
 8013470:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8013474:	f642 42f8 	movw	r2, #11512	@ 0x2cf8
 8013478:	fb02 f303 	mul.w	r3, r2, r3
 801347c:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
    tmp10 += tmp11 - tmp3;
 8013480:	f8d7 20e0 	ldr.w	r2, [r7, #224]	@ 0xe0
 8013484:	f8d7 30d0 	ldr.w	r3, [r7, #208]	@ 0xd0
 8013488:	1ad3      	subs	r3, r2, r3
 801348a:	f8d7 20e8 	ldr.w	r2, [r7, #232]	@ 0xe8
 801348e:	4413      	add	r3, r2
 8013490:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
    tmp11 = MULTIPLY(tmp0 + tmp2, FIX(1.197448846)) +     /* c5 */
 8013494:	f8d7 2104 	ldr.w	r2, [r7, #260]	@ 0x104
 8013498:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 801349c:	4413      	add	r3, r2
 801349e:	f242 6252 	movw	r2, #9810	@ 0x2652
 80134a2:	fb03 f202 	mul.w	r2, r3, r2
	    MULTIPLY(tmp4 + tmp6, FIX(0.752406978));      /* c9 */
 80134a6:	f8d7 10f4 	ldr.w	r1, [r7, #244]	@ 0xf4
 80134aa:	f8d7 30ec 	ldr.w	r3, [r7, #236]	@ 0xec
 80134ae:	440b      	add	r3, r1
 80134b0:	f641 0114 	movw	r1, #6164	@ 0x1814
 80134b4:	fb01 f303 	mul.w	r3, r1, r3
    tmp11 = MULTIPLY(tmp0 + tmp2, FIX(1.197448846)) +     /* c5 */
 80134b8:	4413      	add	r3, r2
 80134ba:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
    dataptr[5] = (DCTELEM)
      DESCALE(tmp10 + tmp11 - MULTIPLY(tmp2, FIX(2.373959773)) /* c3+c5-c13 */
 80134be:	f8d7 20e8 	ldr.w	r2, [r7, #232]	@ 0xe8
 80134c2:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80134c6:	441a      	add	r2, r3
 80134c8:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80134cc:	4943      	ldr	r1, [pc, #268]	@ (80135dc <jpeg_fdct_14x14+0x4a0>)
 80134ce:	fb01 f303 	mul.w	r3, r1, r3
 80134d2:	441a      	add	r2, r3
 80134d4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80134d8:	f242 31d7 	movw	r1, #9175	@ 0x23d7
 80134dc:	fb01 f303 	mul.w	r3, r1, r3
 80134e0:	4413      	add	r3, r2
 80134e2:	f503 5280 	add.w	r2, r3, #4096	@ 0x1000
    dataptr[5] = (DCTELEM)
 80134e6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80134ea:	3314      	adds	r3, #20
      DESCALE(tmp10 + tmp11 - MULTIPLY(tmp2, FIX(2.373959773)) /* c3+c5-c13 */
 80134ec:	1352      	asrs	r2, r2, #13
    dataptr[5] = (DCTELEM)
 80134ee:	601a      	str	r2, [r3, #0]
	      + MULTIPLY(tmp4, FIX(1.119999435)),         /* c1+c11-c9 */
	      CONST_BITS);
    tmp12 = MULTIPLY(tmp0 + tmp1, FIX(1.334852607)) +     /* c3 */
 80134f0:	f8d7 2104 	ldr.w	r2, [r7, #260]	@ 0x104
 80134f4:	f8d7 3100 	ldr.w	r3, [r7, #256]	@ 0x100
 80134f8:	4413      	add	r3, r2
 80134fa:	f642 22b7 	movw	r2, #10935	@ 0x2ab7
 80134fe:	fb03 f202 	mul.w	r2, r3, r2
	    MULTIPLY(tmp5 - tmp6, FIX(0.467085129));      /* c11 */
 8013502:	f8d7 10f0 	ldr.w	r1, [r7, #240]	@ 0xf0
 8013506:	f8d7 30ec 	ldr.w	r3, [r7, #236]	@ 0xec
 801350a:	1acb      	subs	r3, r1, r3
 801350c:	f640 61f2 	movw	r1, #3826	@ 0xef2
 8013510:	fb01 f303 	mul.w	r3, r1, r3
    tmp12 = MULTIPLY(tmp0 + tmp1, FIX(1.334852607)) +     /* c3 */
 8013514:	4413      	add	r3, r2
 8013516:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
    dataptr[3] = (DCTELEM)
      DESCALE(tmp10 + tmp12 - MULTIPLY(tmp1, FIX(0.424103948)) /* c3-c9-c13 */
 801351a:	f8d7 20e8 	ldr.w	r2, [r7, #232]	@ 0xe8
 801351e:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8013522:	441a      	add	r2, r3
 8013524:	f8d7 3100 	ldr.w	r3, [r7, #256]	@ 0x100
 8013528:	492d      	ldr	r1, [pc, #180]	@ (80135e0 <jpeg_fdct_14x14+0x4a4>)
 801352a:	fb01 f303 	mul.w	r3, r1, r3
 801352e:	441a      	add	r2, r3
 8013530:	f8d7 30f0 	ldr.w	r3, [r7, #240]	@ 0xf0
 8013534:	492b      	ldr	r1, [pc, #172]	@ (80135e4 <jpeg_fdct_14x14+0x4a8>)
 8013536:	fb01 f303 	mul.w	r3, r1, r3
 801353a:	4413      	add	r3, r2
 801353c:	f503 5280 	add.w	r2, r3, #4096	@ 0x1000
    dataptr[3] = (DCTELEM)
 8013540:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8013544:	330c      	adds	r3, #12
      DESCALE(tmp10 + tmp12 - MULTIPLY(tmp1, FIX(0.424103948)) /* c3-c9-c13 */
 8013546:	1352      	asrs	r2, r2, #13
    dataptr[3] = (DCTELEM)
 8013548:	601a      	str	r2, [r3, #0]
	      - MULTIPLY(tmp5, FIX(3.069855259)),         /* c1+c5+c11 */
	      CONST_BITS);
    dataptr[1] = (DCTELEM)
      DESCALE(tmp11 + tmp12 + tmp3 + tmp6 -
 801354a:	f8d7 20e0 	ldr.w	r2, [r7, #224]	@ 0xe0
 801354e:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8013552:	441a      	add	r2, r3
 8013554:	f8d7 30d0 	ldr.w	r3, [r7, #208]	@ 0xd0
 8013558:	441a      	add	r2, r3
 801355a:	f8d7 30ec 	ldr.w	r3, [r7, #236]	@ 0xec
 801355e:	441a      	add	r2, r3
 8013560:	f8d7 1104 	ldr.w	r1, [r7, #260]	@ 0x104
 8013564:	f8d7 30ec 	ldr.w	r3, [r7, #236]	@ 0xec
 8013568:	440b      	add	r3, r1
 801356a:	491f      	ldr	r1, [pc, #124]	@ (80135e8 <jpeg_fdct_14x14+0x4ac>)
 801356c:	fb01 f303 	mul.w	r3, r1, r3
 8013570:	4413      	add	r3, r2
 8013572:	f503 5280 	add.w	r2, r3, #4096	@ 0x1000
    dataptr[1] = (DCTELEM)
 8013576:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 801357a:	3304      	adds	r3, #4
      DESCALE(tmp11 + tmp12 + tmp3 + tmp6 -
 801357c:	1352      	asrs	r2, r2, #13
    dataptr[1] = (DCTELEM)
 801357e:	601a      	str	r2, [r3, #0]
	      MULTIPLY(tmp0 + tmp6, FIX(1.126980169)),    /* c3+c5-c1 */
	      CONST_BITS);

    ctr++;
 8013580:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8013584:	3301      	adds	r3, #1
 8013586:	f8c7 310c 	str.w	r3, [r7, #268]	@ 0x10c

    if (ctr != DCTSIZE) {
 801358a:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 801358e:	2b08      	cmp	r3, #8
 8013590:	d009      	beq.n	80135a6 <jpeg_fdct_14x14+0x46a>
      if (ctr == 14)
 8013592:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8013596:	2b0e      	cmp	r3, #14
 8013598:	d00a      	beq.n	80135b0 <jpeg_fdct_14x14+0x474>
	break;			/* Done. */
      dataptr += DCTSIZE;	/* advance pointer to next row */
 801359a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 801359e:	3320      	adds	r3, #32
 80135a0:	f8c7 3114 	str.w	r3, [r7, #276]	@ 0x114
 80135a4:	e5e6      	b.n	8013174 <jpeg_fdct_14x14+0x38>
    } else
      dataptr = workspace;	/* switch pointer to extended workspace */
 80135a6:	f107 0310 	add.w	r3, r7, #16
 80135aa:	f8c7 3114 	str.w	r3, [r7, #276]	@ 0x114
    elemptr = sample_data[ctr] + start_col;
 80135ae:	e5e1      	b.n	8013174 <jpeg_fdct_14x14+0x38>
	break;			/* Done. */
 80135b0:	bf00      	nop
   * We must also scale the output by (8/14)**2 = 16/49, which we partially
   * fold into the constant multipliers and final shifting:
   * cK now represents sqrt(2) * cos(K*pi/28) * 32/49.
   */

  dataptr = data;
 80135b2:	f507 738c 	add.w	r3, r7, #280	@ 0x118
 80135b6:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 80135ba:	681b      	ldr	r3, [r3, #0]
 80135bc:	f8c7 3114 	str.w	r3, [r7, #276]	@ 0x114
  wsptr = workspace;
 80135c0:	f107 0310 	add.w	r3, r7, #16
 80135c4:	f8c7 3110 	str.w	r3, [r7, #272]	@ 0x110
  for (ctr = DCTSIZE-1; ctr >= 0; ctr--) {
 80135c8:	2307      	movs	r3, #7
 80135ca:	f8c7 310c 	str.w	r3, [r7, #268]	@ 0x10c
 80135ce:	e20e      	b.n	80139ee <jpeg_fdct_14x14+0x8b2>
 80135d0:	ffffe3c9 	.word	0xffffe3c9
 80135d4:	ffffc8fc 	.word	0xffffc8fc
 80135d8:	ffffd3e1 	.word	0xffffd3e1
 80135dc:	ffffb409 	.word	0xffffb409
 80135e0:	fffff26e 	.word	0xfffff26e
 80135e4:	ffff9dc4 	.word	0xffff9dc4
 80135e8:	ffffdbf0 	.word	0xffffdbf0
    /* Even part */

    tmp0 = dataptr[DCTSIZE*0] + wsptr[DCTSIZE*5];
 80135ec:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80135f0:	681a      	ldr	r2, [r3, #0]
 80135f2:	f8d7 3110 	ldr.w	r3, [r7, #272]	@ 0x110
 80135f6:	33a0      	adds	r3, #160	@ 0xa0
 80135f8:	681b      	ldr	r3, [r3, #0]
 80135fa:	4413      	add	r3, r2
 80135fc:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
    tmp1 = dataptr[DCTSIZE*1] + wsptr[DCTSIZE*4];
 8013600:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8013604:	3320      	adds	r3, #32
 8013606:	681a      	ldr	r2, [r3, #0]
 8013608:	f8d7 3110 	ldr.w	r3, [r7, #272]	@ 0x110
 801360c:	3380      	adds	r3, #128	@ 0x80
 801360e:	681b      	ldr	r3, [r3, #0]
 8013610:	4413      	add	r3, r2
 8013612:	f8c7 3100 	str.w	r3, [r7, #256]	@ 0x100
    tmp2 = dataptr[DCTSIZE*2] + wsptr[DCTSIZE*3];
 8013616:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 801361a:	3340      	adds	r3, #64	@ 0x40
 801361c:	681a      	ldr	r2, [r3, #0]
 801361e:	f8d7 3110 	ldr.w	r3, [r7, #272]	@ 0x110
 8013622:	3360      	adds	r3, #96	@ 0x60
 8013624:	681b      	ldr	r3, [r3, #0]
 8013626:	4413      	add	r3, r2
 8013628:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
    tmp13 = dataptr[DCTSIZE*3] + wsptr[DCTSIZE*2];
 801362c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8013630:	3360      	adds	r3, #96	@ 0x60
 8013632:	681a      	ldr	r2, [r3, #0]
 8013634:	f8d7 3110 	ldr.w	r3, [r7, #272]	@ 0x110
 8013638:	3340      	adds	r3, #64	@ 0x40
 801363a:	681b      	ldr	r3, [r3, #0]
 801363c:	4413      	add	r3, r2
 801363e:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
    tmp4 = dataptr[DCTSIZE*4] + wsptr[DCTSIZE*1];
 8013642:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8013646:	3380      	adds	r3, #128	@ 0x80
 8013648:	681a      	ldr	r2, [r3, #0]
 801364a:	f8d7 3110 	ldr.w	r3, [r7, #272]	@ 0x110
 801364e:	3320      	adds	r3, #32
 8013650:	681b      	ldr	r3, [r3, #0]
 8013652:	4413      	add	r3, r2
 8013654:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
    tmp5 = dataptr[DCTSIZE*5] + wsptr[DCTSIZE*0];
 8013658:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 801365c:	33a0      	adds	r3, #160	@ 0xa0
 801365e:	681a      	ldr	r2, [r3, #0]
 8013660:	f8d7 3110 	ldr.w	r3, [r7, #272]	@ 0x110
 8013664:	681b      	ldr	r3, [r3, #0]
 8013666:	4413      	add	r3, r2
 8013668:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
    tmp6 = dataptr[DCTSIZE*6] + dataptr[DCTSIZE*7];
 801366c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8013670:	33c0      	adds	r3, #192	@ 0xc0
 8013672:	681a      	ldr	r2, [r3, #0]
 8013674:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8013678:	33e0      	adds	r3, #224	@ 0xe0
 801367a:	681b      	ldr	r3, [r3, #0]
 801367c:	4413      	add	r3, r2
 801367e:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec

    tmp10 = tmp0 + tmp6;
 8013682:	f8d7 2104 	ldr.w	r2, [r7, #260]	@ 0x104
 8013686:	f8d7 30ec 	ldr.w	r3, [r7, #236]	@ 0xec
 801368a:	4413      	add	r3, r2
 801368c:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
    tmp14 = tmp0 - tmp6;
 8013690:	f8d7 2104 	ldr.w	r2, [r7, #260]	@ 0x104
 8013694:	f8d7 30ec 	ldr.w	r3, [r7, #236]	@ 0xec
 8013698:	1ad3      	subs	r3, r2, r3
 801369a:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    tmp11 = tmp1 + tmp5;
 801369e:	f8d7 2100 	ldr.w	r2, [r7, #256]	@ 0x100
 80136a2:	f8d7 30f0 	ldr.w	r3, [r7, #240]	@ 0xf0
 80136a6:	4413      	add	r3, r2
 80136a8:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
    tmp15 = tmp1 - tmp5;
 80136ac:	f8d7 2100 	ldr.w	r2, [r7, #256]	@ 0x100
 80136b0:	f8d7 30f0 	ldr.w	r3, [r7, #240]	@ 0xf0
 80136b4:	1ad3      	subs	r3, r2, r3
 80136b6:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
    tmp12 = tmp2 + tmp4;
 80136ba:	f8d7 20fc 	ldr.w	r2, [r7, #252]	@ 0xfc
 80136be:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80136c2:	4413      	add	r3, r2
 80136c4:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
    tmp16 = tmp2 - tmp4;
 80136c8:	f8d7 20fc 	ldr.w	r2, [r7, #252]	@ 0xfc
 80136cc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80136d0:	1ad3      	subs	r3, r2, r3
 80136d2:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4

    tmp0 = dataptr[DCTSIZE*0] - wsptr[DCTSIZE*5];
 80136d6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80136da:	681a      	ldr	r2, [r3, #0]
 80136dc:	f8d7 3110 	ldr.w	r3, [r7, #272]	@ 0x110
 80136e0:	33a0      	adds	r3, #160	@ 0xa0
 80136e2:	681b      	ldr	r3, [r3, #0]
 80136e4:	1ad3      	subs	r3, r2, r3
 80136e6:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
    tmp1 = dataptr[DCTSIZE*1] - wsptr[DCTSIZE*4];
 80136ea:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80136ee:	3320      	adds	r3, #32
 80136f0:	681a      	ldr	r2, [r3, #0]
 80136f2:	f8d7 3110 	ldr.w	r3, [r7, #272]	@ 0x110
 80136f6:	3380      	adds	r3, #128	@ 0x80
 80136f8:	681b      	ldr	r3, [r3, #0]
 80136fa:	1ad3      	subs	r3, r2, r3
 80136fc:	f8c7 3100 	str.w	r3, [r7, #256]	@ 0x100
    tmp2 = dataptr[DCTSIZE*2] - wsptr[DCTSIZE*3];
 8013700:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8013704:	3340      	adds	r3, #64	@ 0x40
 8013706:	681a      	ldr	r2, [r3, #0]
 8013708:	f8d7 3110 	ldr.w	r3, [r7, #272]	@ 0x110
 801370c:	3360      	adds	r3, #96	@ 0x60
 801370e:	681b      	ldr	r3, [r3, #0]
 8013710:	1ad3      	subs	r3, r2, r3
 8013712:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
    tmp3 = dataptr[DCTSIZE*3] - wsptr[DCTSIZE*2];
 8013716:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 801371a:	3360      	adds	r3, #96	@ 0x60
 801371c:	681a      	ldr	r2, [r3, #0]
 801371e:	f8d7 3110 	ldr.w	r3, [r7, #272]	@ 0x110
 8013722:	3340      	adds	r3, #64	@ 0x40
 8013724:	681b      	ldr	r3, [r3, #0]
 8013726:	1ad3      	subs	r3, r2, r3
 8013728:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
    tmp4 = dataptr[DCTSIZE*4] - wsptr[DCTSIZE*1];
 801372c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8013730:	3380      	adds	r3, #128	@ 0x80
 8013732:	681a      	ldr	r2, [r3, #0]
 8013734:	f8d7 3110 	ldr.w	r3, [r7, #272]	@ 0x110
 8013738:	3320      	adds	r3, #32
 801373a:	681b      	ldr	r3, [r3, #0]
 801373c:	1ad3      	subs	r3, r2, r3
 801373e:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
    tmp5 = dataptr[DCTSIZE*5] - wsptr[DCTSIZE*0];
 8013742:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8013746:	33a0      	adds	r3, #160	@ 0xa0
 8013748:	681a      	ldr	r2, [r3, #0]
 801374a:	f8d7 3110 	ldr.w	r3, [r7, #272]	@ 0x110
 801374e:	681b      	ldr	r3, [r3, #0]
 8013750:	1ad3      	subs	r3, r2, r3
 8013752:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
    tmp6 = dataptr[DCTSIZE*6] - dataptr[DCTSIZE*7];
 8013756:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 801375a:	33c0      	adds	r3, #192	@ 0xc0
 801375c:	681a      	ldr	r2, [r3, #0]
 801375e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8013762:	33e0      	adds	r3, #224	@ 0xe0
 8013764:	681b      	ldr	r3, [r3, #0]
 8013766:	1ad3      	subs	r3, r2, r3
 8013768:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec

    dataptr[DCTSIZE*0] = (DCTELEM)
      DESCALE(MULTIPLY(tmp10 + tmp11 + tmp12 + tmp13,
 801376c:	f8d7 20e8 	ldr.w	r2, [r7, #232]	@ 0xe8
 8013770:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8013774:	441a      	add	r2, r3
 8013776:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 801377a:	441a      	add	r2, r3
 801377c:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 8013780:	4413      	add	r3, r2
 8013782:	f241 42e6 	movw	r2, #5350	@ 0x14e6
 8013786:	fb02 f303 	mul.w	r3, r2, r3
 801378a:	f503 5300 	add.w	r3, r3, #8192	@ 0x2000
 801378e:	139a      	asrs	r2, r3, #14
    dataptr[DCTSIZE*0] = (DCTELEM)
 8013790:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8013794:	601a      	str	r2, [r3, #0]
		       FIX(0.653061224)),                 /* 32/49 */
	      CONST_BITS+1);
    tmp13 += tmp13;
 8013796:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 801379a:	005b      	lsls	r3, r3, #1
 801379c:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
    dataptr[DCTSIZE*4] = (DCTELEM)
      DESCALE(MULTIPLY(tmp10 - tmp13, FIX(0.832106052)) + /* c4 */
 80137a0:	f8d7 20e8 	ldr.w	r2, [r7, #232]	@ 0xe8
 80137a4:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 80137a8:	1ad3      	subs	r3, r2, r3
 80137aa:	f641 22a1 	movw	r2, #6817	@ 0x1aa1
 80137ae:	fb03 f202 	mul.w	r2, r3, r2
 80137b2:	f8d7 10e0 	ldr.w	r1, [r7, #224]	@ 0xe0
 80137b6:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 80137ba:	1acb      	subs	r3, r1, r3
 80137bc:	f240 6194 	movw	r1, #1684	@ 0x694
 80137c0:	fb01 f303 	mul.w	r3, r1, r3
 80137c4:	441a      	add	r2, r3
 80137c6:	f8d7 10d8 	ldr.w	r1, [r7, #216]	@ 0xd8
 80137ca:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 80137ce:	1acb      	subs	r3, r1, r3
 80137d0:	498d      	ldr	r1, [pc, #564]	@ (8013a08 <jpeg_fdct_14x14+0x8cc>)
 80137d2:	fb01 f303 	mul.w	r3, r1, r3
 80137d6:	4413      	add	r3, r2
 80137d8:	f503 5200 	add.w	r2, r3, #8192	@ 0x2000
    dataptr[DCTSIZE*4] = (DCTELEM)
 80137dc:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80137e0:	3380      	adds	r3, #128	@ 0x80
      DESCALE(MULTIPLY(tmp10 - tmp13, FIX(0.832106052)) + /* c4 */
 80137e2:	1392      	asrs	r2, r2, #14
    dataptr[DCTSIZE*4] = (DCTELEM)
 80137e4:	601a      	str	r2, [r3, #0]
	      MULTIPLY(tmp11 - tmp13, FIX(0.205513223)) - /* c12 */
	      MULTIPLY(tmp12 - tmp13, FIX(0.575835255)),  /* c8 */
	      CONST_BITS+1);

    tmp10 = MULTIPLY(tmp14 + tmp15, FIX(0.722074570));    /* c6 */
 80137e6:	f8d7 20e4 	ldr.w	r2, [r7, #228]	@ 0xe4
 80137ea:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80137ee:	4413      	add	r3, r2
 80137f0:	f241 721b 	movw	r2, #5915	@ 0x171b
 80137f4:	fb02 f303 	mul.w	r3, r2, r3
 80137f8:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8

    dataptr[DCTSIZE*2] = (DCTELEM)
      DESCALE(tmp10 + MULTIPLY(tmp14, FIX(0.178337691))   /* c2-c6 */
 80137fc:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8013800:	f240 52b5 	movw	r2, #1461	@ 0x5b5
 8013804:	fb03 f202 	mul.w	r2, r3, r2
 8013808:	f8d7 30e8 	ldr.w	r3, [r7, #232]	@ 0xe8
 801380c:	441a      	add	r2, r3
 801380e:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8013812:	f640 41d3 	movw	r1, #3283	@ 0xcd3
 8013816:	fb01 f303 	mul.w	r3, r1, r3
 801381a:	4413      	add	r3, r2
 801381c:	f503 5200 	add.w	r2, r3, #8192	@ 0x2000
    dataptr[DCTSIZE*2] = (DCTELEM)
 8013820:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8013824:	3340      	adds	r3, #64	@ 0x40
      DESCALE(tmp10 + MULTIPLY(tmp14, FIX(0.178337691))   /* c2-c6 */
 8013826:	1392      	asrs	r2, r2, #14
    dataptr[DCTSIZE*2] = (DCTELEM)
 8013828:	601a      	str	r2, [r3, #0]
	      + MULTIPLY(tmp16, FIX(0.400721155)),        /* c10 */
	      CONST_BITS+1);
    dataptr[DCTSIZE*6] = (DCTELEM)
      DESCALE(tmp10 - MULTIPLY(tmp15, FIX(1.122795725))   /* c6+c10 */
 801382a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 801382e:	4a77      	ldr	r2, [pc, #476]	@ (8013a0c <jpeg_fdct_14x14+0x8d0>)
 8013830:	fb03 f202 	mul.w	r2, r3, r2
 8013834:	f8d7 30e8 	ldr.w	r3, [r7, #232]	@ 0xe8
 8013838:	441a      	add	r2, r3
 801383a:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 801383e:	4974      	ldr	r1, [pc, #464]	@ (8013a10 <jpeg_fdct_14x14+0x8d4>)
 8013840:	fb01 f303 	mul.w	r3, r1, r3
 8013844:	4413      	add	r3, r2
 8013846:	f503 5200 	add.w	r2, r3, #8192	@ 0x2000
    dataptr[DCTSIZE*6] = (DCTELEM)
 801384a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 801384e:	33c0      	adds	r3, #192	@ 0xc0
      DESCALE(tmp10 - MULTIPLY(tmp15, FIX(1.122795725))   /* c6+c10 */
 8013850:	1392      	asrs	r2, r2, #14
    dataptr[DCTSIZE*6] = (DCTELEM)
 8013852:	601a      	str	r2, [r3, #0]
	      - MULTIPLY(tmp16, FIX(0.900412262)),        /* c2 */
	      CONST_BITS+1);

    /* Odd part */

    tmp10 = tmp1 + tmp2;
 8013854:	f8d7 2100 	ldr.w	r2, [r7, #256]	@ 0x100
 8013858:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 801385c:	4413      	add	r3, r2
 801385e:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
    tmp11 = tmp5 - tmp4;
 8013862:	f8d7 20f0 	ldr.w	r2, [r7, #240]	@ 0xf0
 8013866:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 801386a:	1ad3      	subs	r3, r2, r3
 801386c:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
    dataptr[DCTSIZE*7] = (DCTELEM)
      DESCALE(MULTIPLY(tmp0 - tmp10 + tmp3 - tmp11 - tmp6,
 8013870:	f8d7 2104 	ldr.w	r2, [r7, #260]	@ 0x104
 8013874:	f8d7 30e8 	ldr.w	r3, [r7, #232]	@ 0xe8
 8013878:	1ad2      	subs	r2, r2, r3
 801387a:	f8d7 30d0 	ldr.w	r3, [r7, #208]	@ 0xd0
 801387e:	441a      	add	r2, r3
 8013880:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8013884:	1ad2      	subs	r2, r2, r3
 8013886:	f8d7 30ec 	ldr.w	r3, [r7, #236]	@ 0xec
 801388a:	1ad3      	subs	r3, r2, r3
 801388c:	f241 42e6 	movw	r2, #5350	@ 0x14e6
 8013890:	fb02 f303 	mul.w	r3, r2, r3
 8013894:	f503 5200 	add.w	r2, r3, #8192	@ 0x2000
    dataptr[DCTSIZE*7] = (DCTELEM)
 8013898:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 801389c:	33e0      	adds	r3, #224	@ 0xe0
      DESCALE(MULTIPLY(tmp0 - tmp10 + tmp3 - tmp11 - tmp6,
 801389e:	1392      	asrs	r2, r2, #14
    dataptr[DCTSIZE*7] = (DCTELEM)
 80138a0:	601a      	str	r2, [r3, #0]
		       FIX(0.653061224)),                 /* 32/49 */
	      CONST_BITS+1);
    tmp3  = MULTIPLY(tmp3 , FIX(0.653061224));            /* 32/49 */
 80138a2:	f8d7 30d0 	ldr.w	r3, [r7, #208]	@ 0xd0
 80138a6:	f241 42e6 	movw	r2, #5350	@ 0x14e6
 80138aa:	fb02 f303 	mul.w	r3, r2, r3
 80138ae:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
    tmp10 = MULTIPLY(tmp10, - FIX(0.103406812));          /* -c13 */
 80138b2:	f8d7 30e8 	ldr.w	r3, [r7, #232]	@ 0xe8
 80138b6:	4a57      	ldr	r2, [pc, #348]	@ (8013a14 <jpeg_fdct_14x14+0x8d8>)
 80138b8:	fb02 f303 	mul.w	r3, r2, r3
 80138bc:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
    tmp11 = MULTIPLY(tmp11, FIX(0.917760839));            /* c1 */
 80138c0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80138c4:	f641 525e 	movw	r2, #7518	@ 0x1d5e
 80138c8:	fb02 f303 	mul.w	r3, r2, r3
 80138cc:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
    tmp10 += tmp11 - tmp3;
 80138d0:	f8d7 20e0 	ldr.w	r2, [r7, #224]	@ 0xe0
 80138d4:	f8d7 30d0 	ldr.w	r3, [r7, #208]	@ 0xd0
 80138d8:	1ad3      	subs	r3, r2, r3
 80138da:	f8d7 20e8 	ldr.w	r2, [r7, #232]	@ 0xe8
 80138de:	4413      	add	r3, r2
 80138e0:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
    tmp11 = MULTIPLY(tmp0 + tmp2, FIX(0.782007410)) +     /* c5 */
 80138e4:	f8d7 2104 	ldr.w	r2, [r7, #260]	@ 0x104
 80138e8:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80138ec:	4413      	add	r3, r2
 80138ee:	f641 1206 	movw	r2, #6406	@ 0x1906
 80138f2:	fb03 f202 	mul.w	r2, r3, r2
	    MULTIPLY(tmp4 + tmp6, FIX(0.491367823));      /* c9 */
 80138f6:	f8d7 10f4 	ldr.w	r1, [r7, #244]	@ 0xf4
 80138fa:	f8d7 30ec 	ldr.w	r3, [r7, #236]	@ 0xec
 80138fe:	440b      	add	r3, r1
 8013900:	f640 71b9 	movw	r1, #4025	@ 0xfb9
 8013904:	fb01 f303 	mul.w	r3, r1, r3
    tmp11 = MULTIPLY(tmp0 + tmp2, FIX(0.782007410)) +     /* c5 */
 8013908:	4413      	add	r3, r2
 801390a:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
    dataptr[DCTSIZE*5] = (DCTELEM)
      DESCALE(tmp10 + tmp11 - MULTIPLY(tmp2, FIX(1.550341076)) /* c3+c5-c13 */
 801390e:	f8d7 20e8 	ldr.w	r2, [r7, #232]	@ 0xe8
 8013912:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8013916:	441a      	add	r2, r3
 8013918:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 801391c:	493e      	ldr	r1, [pc, #248]	@ (8013a18 <jpeg_fdct_14x14+0x8dc>)
 801391e:	fb01 f303 	mul.w	r3, r1, r3
 8013922:	441a      	add	r2, r3
 8013924:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8013928:	f241 7168 	movw	r1, #5992	@ 0x1768
 801392c:	fb01 f303 	mul.w	r3, r1, r3
 8013930:	4413      	add	r3, r2
 8013932:	f503 5200 	add.w	r2, r3, #8192	@ 0x2000
    dataptr[DCTSIZE*5] = (DCTELEM)
 8013936:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 801393a:	33a0      	adds	r3, #160	@ 0xa0
      DESCALE(tmp10 + tmp11 - MULTIPLY(tmp2, FIX(1.550341076)) /* c3+c5-c13 */
 801393c:	1392      	asrs	r2, r2, #14
    dataptr[DCTSIZE*5] = (DCTELEM)
 801393e:	601a      	str	r2, [r3, #0]
	      + MULTIPLY(tmp4, FIX(0.731428202)),         /* c1+c11-c9 */
	      CONST_BITS+1);
    tmp12 = MULTIPLY(tmp0 + tmp1, FIX(0.871740478)) +     /* c3 */
 8013940:	f8d7 2104 	ldr.w	r2, [r7, #260]	@ 0x104
 8013944:	f8d7 3100 	ldr.w	r3, [r7, #256]	@ 0x100
 8013948:	4413      	add	r3, r2
 801394a:	f641 32e5 	movw	r2, #7141	@ 0x1be5
 801394e:	fb03 f202 	mul.w	r2, r3, r2
	    MULTIPLY(tmp5 - tmp6, FIX(0.305035186));      /* c11 */
 8013952:	f8d7 10f0 	ldr.w	r1, [r7, #240]	@ 0xf0
 8013956:	f8d7 30ec 	ldr.w	r3, [r7, #236]	@ 0xec
 801395a:	1acb      	subs	r3, r1, r3
 801395c:	f640 11c3 	movw	r1, #2499	@ 0x9c3
 8013960:	fb01 f303 	mul.w	r3, r1, r3
    tmp12 = MULTIPLY(tmp0 + tmp1, FIX(0.871740478)) +     /* c3 */
 8013964:	4413      	add	r3, r2
 8013966:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
    dataptr[DCTSIZE*3] = (DCTELEM)
      DESCALE(tmp10 + tmp12 - MULTIPLY(tmp1, FIX(0.276965844)) /* c3-c9-c13 */
 801396a:	f8d7 20e8 	ldr.w	r2, [r7, #232]	@ 0xe8
 801396e:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8013972:	441a      	add	r2, r3
 8013974:	f8d7 3100 	ldr.w	r3, [r7, #256]	@ 0x100
 8013978:	4928      	ldr	r1, [pc, #160]	@ (8013a1c <jpeg_fdct_14x14+0x8e0>)
 801397a:	fb01 f303 	mul.w	r3, r1, r3
 801397e:	441a      	add	r2, r3
 8013980:	f8d7 30f0 	ldr.w	r3, [r7, #240]	@ 0xf0
 8013984:	4926      	ldr	r1, [pc, #152]	@ (8013a20 <jpeg_fdct_14x14+0x8e4>)
 8013986:	fb01 f303 	mul.w	r3, r1, r3
 801398a:	4413      	add	r3, r2
 801398c:	f503 5200 	add.w	r2, r3, #8192	@ 0x2000
    dataptr[DCTSIZE*3] = (DCTELEM)
 8013990:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8013994:	3360      	adds	r3, #96	@ 0x60
      DESCALE(tmp10 + tmp12 - MULTIPLY(tmp1, FIX(0.276965844)) /* c3-c9-c13 */
 8013996:	1392      	asrs	r2, r2, #14
    dataptr[DCTSIZE*3] = (DCTELEM)
 8013998:	601a      	str	r2, [r3, #0]
	      - MULTIPLY(tmp5, FIX(2.004803435)),         /* c1+c5+c11 */
	      CONST_BITS+1);
    dataptr[DCTSIZE*1] = (DCTELEM)
      DESCALE(tmp11 + tmp12 + tmp3
 801399a:	f8d7 20e0 	ldr.w	r2, [r7, #224]	@ 0xe0
 801399e:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 80139a2:	441a      	add	r2, r3
 80139a4:	f8d7 30d0 	ldr.w	r3, [r7, #208]	@ 0xd0
 80139a8:	441a      	add	r2, r3
 80139aa:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80139ae:	491d      	ldr	r1, [pc, #116]	@ (8013a24 <jpeg_fdct_14x14+0x8e8>)
 80139b0:	fb01 f303 	mul.w	r3, r1, r3
 80139b4:	441a      	add	r2, r3
 80139b6:	f8d7 30ec 	ldr.w	r3, [r7, #236]	@ 0xec
 80139ba:	491b      	ldr	r1, [pc, #108]	@ (8013a28 <jpeg_fdct_14x14+0x8ec>)
 80139bc:	fb01 f303 	mul.w	r3, r1, r3
 80139c0:	4413      	add	r3, r2
 80139c2:	f503 5200 	add.w	r2, r3, #8192	@ 0x2000
    dataptr[DCTSIZE*1] = (DCTELEM)
 80139c6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80139ca:	3320      	adds	r3, #32
      DESCALE(tmp11 + tmp12 + tmp3
 80139cc:	1392      	asrs	r2, r2, #14
    dataptr[DCTSIZE*1] = (DCTELEM)
 80139ce:	601a      	str	r2, [r3, #0]
	      - MULTIPLY(tmp0, FIX(0.735987049))          /* c3+c5-c1 */
	      - MULTIPLY(tmp6, FIX(0.082925825)),         /* c9-c11-c13 */
	      CONST_BITS+1);

    dataptr++;			/* advance pointer to next column */
 80139d0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80139d4:	3304      	adds	r3, #4
 80139d6:	f8c7 3114 	str.w	r3, [r7, #276]	@ 0x114
    wsptr++;			/* advance pointer to next column */
 80139da:	f8d7 3110 	ldr.w	r3, [r7, #272]	@ 0x110
 80139de:	3304      	adds	r3, #4
 80139e0:	f8c7 3110 	str.w	r3, [r7, #272]	@ 0x110
  for (ctr = DCTSIZE-1; ctr >= 0; ctr--) {
 80139e4:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80139e8:	3b01      	subs	r3, #1
 80139ea:	f8c7 310c 	str.w	r3, [r7, #268]	@ 0x10c
 80139ee:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80139f2:	2b00      	cmp	r3, #0
 80139f4:	f6bf adfa 	bge.w	80135ec <jpeg_fdct_14x14+0x4b0>
  }
}
 80139f8:	bf00      	nop
 80139fa:	bf00      	nop
 80139fc:	f507 778e 	add.w	r7, r7, #284	@ 0x11c
 8013a00:	46bd      	mov	sp, r7
 8013a02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013a06:	4770      	bx	lr
 8013a08:	ffffed93 	.word	0xffffed93
 8013a0c:	ffffdc12 	.word	0xffffdc12
 8013a10:	ffffe330 	.word	0xffffe330
 8013a14:	fffffcb1 	.word	0xfffffcb1
 8013a18:	ffffce64 	.word	0xffffce64
 8013a1c:	fffff723 	.word	0xfffff723
 8013a20:	ffffbfd9 	.word	0xffffbfd9
 8013a24:	ffffe873 	.word	0xffffe873
 8013a28:	fffffd59 	.word	0xfffffd59

08013a2c <jpeg_fdct_15x15>:
 * Perform the forward DCT on a 15x15 sample block.
 */

GLOBAL(void)
jpeg_fdct_15x15 (DCTELEM * data, JSAMPARRAY sample_data, JDIMENSION start_col)
{
 8013a2c:	b480      	push	{r7}
 8013a2e:	b0d3      	sub	sp, #332	@ 0x14c
 8013a30:	af00      	add	r7, sp, #0
 8013a32:	f507 73a4 	add.w	r3, r7, #328	@ 0x148
 8013a36:	f5a3 739e 	sub.w	r3, r3, #316	@ 0x13c
 8013a3a:	6018      	str	r0, [r3, #0]
 8013a3c:	f507 73a4 	add.w	r3, r7, #328	@ 0x148
 8013a40:	f5a3 73a0 	sub.w	r3, r3, #320	@ 0x140
 8013a44:	6019      	str	r1, [r3, #0]
 8013a46:	f507 73a4 	add.w	r3, r7, #328	@ 0x148
 8013a4a:	f5a3 73a2 	sub.w	r3, r3, #324	@ 0x144
 8013a4e:	601a      	str	r2, [r3, #0]

  /* Pass 1: process rows. */
  /* Note results are scaled up by sqrt(8) compared to a true DCT. */
  /* cK represents sqrt(2) * cos(K*pi/30). */

  dataptr = data;
 8013a50:	f507 73a4 	add.w	r3, r7, #328	@ 0x148
 8013a54:	f5a3 739e 	sub.w	r3, r3, #316	@ 0x13c
 8013a58:	681b      	ldr	r3, [r3, #0]
 8013a5a:	f8c7 3144 	str.w	r3, [r7, #324]	@ 0x144
  ctr = 0;
 8013a5e:	2300      	movs	r3, #0
 8013a60:	f8c7 313c 	str.w	r3, [r7, #316]	@ 0x13c
  for (;;) {
    elemptr = sample_data[ctr] + start_col;
 8013a64:	f8d7 313c 	ldr.w	r3, [r7, #316]	@ 0x13c
 8013a68:	009b      	lsls	r3, r3, #2
 8013a6a:	f507 72a4 	add.w	r2, r7, #328	@ 0x148
 8013a6e:	f5a2 72a0 	sub.w	r2, r2, #320	@ 0x140
 8013a72:	6812      	ldr	r2, [r2, #0]
 8013a74:	4413      	add	r3, r2
 8013a76:	681a      	ldr	r2, [r3, #0]
 8013a78:	f507 73a4 	add.w	r3, r7, #328	@ 0x148
 8013a7c:	f5a3 73a2 	sub.w	r3, r3, #324	@ 0x144
 8013a80:	681b      	ldr	r3, [r3, #0]
 8013a82:	4413      	add	r3, r2
 8013a84:	f8c7 3138 	str.w	r3, [r7, #312]	@ 0x138

    /* Even part */

    tmp0 = GETJSAMPLE(elemptr[0]) + GETJSAMPLE(elemptr[14]);
 8013a88:	f8d7 3138 	ldr.w	r3, [r7, #312]	@ 0x138
 8013a8c:	781b      	ldrb	r3, [r3, #0]
 8013a8e:	461a      	mov	r2, r3
 8013a90:	f8d7 3138 	ldr.w	r3, [r7, #312]	@ 0x138
 8013a94:	330e      	adds	r3, #14
 8013a96:	781b      	ldrb	r3, [r3, #0]
 8013a98:	4413      	add	r3, r2
 8013a9a:	f8c7 3134 	str.w	r3, [r7, #308]	@ 0x134
    tmp1 = GETJSAMPLE(elemptr[1]) + GETJSAMPLE(elemptr[13]);
 8013a9e:	f8d7 3138 	ldr.w	r3, [r7, #312]	@ 0x138
 8013aa2:	3301      	adds	r3, #1
 8013aa4:	781b      	ldrb	r3, [r3, #0]
 8013aa6:	461a      	mov	r2, r3
 8013aa8:	f8d7 3138 	ldr.w	r3, [r7, #312]	@ 0x138
 8013aac:	330d      	adds	r3, #13
 8013aae:	781b      	ldrb	r3, [r3, #0]
 8013ab0:	4413      	add	r3, r2
 8013ab2:	f8c7 3130 	str.w	r3, [r7, #304]	@ 0x130
    tmp2 = GETJSAMPLE(elemptr[2]) + GETJSAMPLE(elemptr[12]);
 8013ab6:	f8d7 3138 	ldr.w	r3, [r7, #312]	@ 0x138
 8013aba:	3302      	adds	r3, #2
 8013abc:	781b      	ldrb	r3, [r3, #0]
 8013abe:	461a      	mov	r2, r3
 8013ac0:	f8d7 3138 	ldr.w	r3, [r7, #312]	@ 0x138
 8013ac4:	330c      	adds	r3, #12
 8013ac6:	781b      	ldrb	r3, [r3, #0]
 8013ac8:	4413      	add	r3, r2
 8013aca:	f8c7 312c 	str.w	r3, [r7, #300]	@ 0x12c
    tmp3 = GETJSAMPLE(elemptr[3]) + GETJSAMPLE(elemptr[11]);
 8013ace:	f8d7 3138 	ldr.w	r3, [r7, #312]	@ 0x138
 8013ad2:	3303      	adds	r3, #3
 8013ad4:	781b      	ldrb	r3, [r3, #0]
 8013ad6:	461a      	mov	r2, r3
 8013ad8:	f8d7 3138 	ldr.w	r3, [r7, #312]	@ 0x138
 8013adc:	330b      	adds	r3, #11
 8013ade:	781b      	ldrb	r3, [r3, #0]
 8013ae0:	4413      	add	r3, r2
 8013ae2:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
    tmp4 = GETJSAMPLE(elemptr[4]) + GETJSAMPLE(elemptr[10]);
 8013ae6:	f8d7 3138 	ldr.w	r3, [r7, #312]	@ 0x138
 8013aea:	3304      	adds	r3, #4
 8013aec:	781b      	ldrb	r3, [r3, #0]
 8013aee:	461a      	mov	r2, r3
 8013af0:	f8d7 3138 	ldr.w	r3, [r7, #312]	@ 0x138
 8013af4:	330a      	adds	r3, #10
 8013af6:	781b      	ldrb	r3, [r3, #0]
 8013af8:	4413      	add	r3, r2
 8013afa:	f8c7 3124 	str.w	r3, [r7, #292]	@ 0x124
    tmp5 = GETJSAMPLE(elemptr[5]) + GETJSAMPLE(elemptr[9]);
 8013afe:	f8d7 3138 	ldr.w	r3, [r7, #312]	@ 0x138
 8013b02:	3305      	adds	r3, #5
 8013b04:	781b      	ldrb	r3, [r3, #0]
 8013b06:	461a      	mov	r2, r3
 8013b08:	f8d7 3138 	ldr.w	r3, [r7, #312]	@ 0x138
 8013b0c:	3309      	adds	r3, #9
 8013b0e:	781b      	ldrb	r3, [r3, #0]
 8013b10:	4413      	add	r3, r2
 8013b12:	f8c7 3120 	str.w	r3, [r7, #288]	@ 0x120
    tmp6 = GETJSAMPLE(elemptr[6]) + GETJSAMPLE(elemptr[8]);
 8013b16:	f8d7 3138 	ldr.w	r3, [r7, #312]	@ 0x138
 8013b1a:	3306      	adds	r3, #6
 8013b1c:	781b      	ldrb	r3, [r3, #0]
 8013b1e:	461a      	mov	r2, r3
 8013b20:	f8d7 3138 	ldr.w	r3, [r7, #312]	@ 0x138
 8013b24:	3308      	adds	r3, #8
 8013b26:	781b      	ldrb	r3, [r3, #0]
 8013b28:	4413      	add	r3, r2
 8013b2a:	f8c7 311c 	str.w	r3, [r7, #284]	@ 0x11c
    tmp7 = GETJSAMPLE(elemptr[7]);
 8013b2e:	f8d7 3138 	ldr.w	r3, [r7, #312]	@ 0x138
 8013b32:	3307      	adds	r3, #7
 8013b34:	781b      	ldrb	r3, [r3, #0]
 8013b36:	f8c7 3118 	str.w	r3, [r7, #280]	@ 0x118

    tmp10 = GETJSAMPLE(elemptr[0]) - GETJSAMPLE(elemptr[14]);
 8013b3a:	f8d7 3138 	ldr.w	r3, [r7, #312]	@ 0x138
 8013b3e:	781b      	ldrb	r3, [r3, #0]
 8013b40:	461a      	mov	r2, r3
 8013b42:	f8d7 3138 	ldr.w	r3, [r7, #312]	@ 0x138
 8013b46:	330e      	adds	r3, #14
 8013b48:	781b      	ldrb	r3, [r3, #0]
 8013b4a:	1ad3      	subs	r3, r2, r3
 8013b4c:	f8c7 3114 	str.w	r3, [r7, #276]	@ 0x114
    tmp11 = GETJSAMPLE(elemptr[1]) - GETJSAMPLE(elemptr[13]);
 8013b50:	f8d7 3138 	ldr.w	r3, [r7, #312]	@ 0x138
 8013b54:	3301      	adds	r3, #1
 8013b56:	781b      	ldrb	r3, [r3, #0]
 8013b58:	461a      	mov	r2, r3
 8013b5a:	f8d7 3138 	ldr.w	r3, [r7, #312]	@ 0x138
 8013b5e:	330d      	adds	r3, #13
 8013b60:	781b      	ldrb	r3, [r3, #0]
 8013b62:	1ad3      	subs	r3, r2, r3
 8013b64:	f8c7 3110 	str.w	r3, [r7, #272]	@ 0x110
    tmp12 = GETJSAMPLE(elemptr[2]) - GETJSAMPLE(elemptr[12]);
 8013b68:	f8d7 3138 	ldr.w	r3, [r7, #312]	@ 0x138
 8013b6c:	3302      	adds	r3, #2
 8013b6e:	781b      	ldrb	r3, [r3, #0]
 8013b70:	461a      	mov	r2, r3
 8013b72:	f8d7 3138 	ldr.w	r3, [r7, #312]	@ 0x138
 8013b76:	330c      	adds	r3, #12
 8013b78:	781b      	ldrb	r3, [r3, #0]
 8013b7a:	1ad3      	subs	r3, r2, r3
 8013b7c:	f8c7 310c 	str.w	r3, [r7, #268]	@ 0x10c
    tmp13 = GETJSAMPLE(elemptr[3]) - GETJSAMPLE(elemptr[11]);
 8013b80:	f8d7 3138 	ldr.w	r3, [r7, #312]	@ 0x138
 8013b84:	3303      	adds	r3, #3
 8013b86:	781b      	ldrb	r3, [r3, #0]
 8013b88:	461a      	mov	r2, r3
 8013b8a:	f8d7 3138 	ldr.w	r3, [r7, #312]	@ 0x138
 8013b8e:	330b      	adds	r3, #11
 8013b90:	781b      	ldrb	r3, [r3, #0]
 8013b92:	1ad3      	subs	r3, r2, r3
 8013b94:	f8c7 3108 	str.w	r3, [r7, #264]	@ 0x108
    tmp14 = GETJSAMPLE(elemptr[4]) - GETJSAMPLE(elemptr[10]);
 8013b98:	f8d7 3138 	ldr.w	r3, [r7, #312]	@ 0x138
 8013b9c:	3304      	adds	r3, #4
 8013b9e:	781b      	ldrb	r3, [r3, #0]
 8013ba0:	461a      	mov	r2, r3
 8013ba2:	f8d7 3138 	ldr.w	r3, [r7, #312]	@ 0x138
 8013ba6:	330a      	adds	r3, #10
 8013ba8:	781b      	ldrb	r3, [r3, #0]
 8013baa:	1ad3      	subs	r3, r2, r3
 8013bac:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
    tmp15 = GETJSAMPLE(elemptr[5]) - GETJSAMPLE(elemptr[9]);
 8013bb0:	f8d7 3138 	ldr.w	r3, [r7, #312]	@ 0x138
 8013bb4:	3305      	adds	r3, #5
 8013bb6:	781b      	ldrb	r3, [r3, #0]
 8013bb8:	461a      	mov	r2, r3
 8013bba:	f8d7 3138 	ldr.w	r3, [r7, #312]	@ 0x138
 8013bbe:	3309      	adds	r3, #9
 8013bc0:	781b      	ldrb	r3, [r3, #0]
 8013bc2:	1ad3      	subs	r3, r2, r3
 8013bc4:	f8c7 3100 	str.w	r3, [r7, #256]	@ 0x100
    tmp16 = GETJSAMPLE(elemptr[6]) - GETJSAMPLE(elemptr[8]);
 8013bc8:	f8d7 3138 	ldr.w	r3, [r7, #312]	@ 0x138
 8013bcc:	3306      	adds	r3, #6
 8013bce:	781b      	ldrb	r3, [r3, #0]
 8013bd0:	461a      	mov	r2, r3
 8013bd2:	f8d7 3138 	ldr.w	r3, [r7, #312]	@ 0x138
 8013bd6:	3308      	adds	r3, #8
 8013bd8:	781b      	ldrb	r3, [r3, #0]
 8013bda:	1ad3      	subs	r3, r2, r3
 8013bdc:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc

    z1 = tmp0 + tmp4 + tmp5;
 8013be0:	f8d7 2134 	ldr.w	r2, [r7, #308]	@ 0x134
 8013be4:	f8d7 3124 	ldr.w	r3, [r7, #292]	@ 0x124
 8013be8:	4413      	add	r3, r2
 8013bea:	f8d7 2120 	ldr.w	r2, [r7, #288]	@ 0x120
 8013bee:	4413      	add	r3, r2
 8013bf0:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
    z2 = tmp1 + tmp3 + tmp6;
 8013bf4:	f8d7 2130 	ldr.w	r2, [r7, #304]	@ 0x130
 8013bf8:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 8013bfc:	4413      	add	r3, r2
 8013bfe:	f8d7 211c 	ldr.w	r2, [r7, #284]	@ 0x11c
 8013c02:	4413      	add	r3, r2
 8013c04:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
    z3 = tmp2 + tmp7;
 8013c08:	f8d7 212c 	ldr.w	r2, [r7, #300]	@ 0x12c
 8013c0c:	f8d7 3118 	ldr.w	r3, [r7, #280]	@ 0x118
 8013c10:	4413      	add	r3, r2
 8013c12:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
    /* Apply unsigned->signed conversion */
    dataptr[0] = (DCTELEM) (z1 + z2 + z3 - 15 * CENTERJSAMPLE);
 8013c16:	f8d7 20f8 	ldr.w	r2, [r7, #248]	@ 0xf8
 8013c1a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8013c1e:	441a      	add	r2, r3
 8013c20:	f8d7 30f0 	ldr.w	r3, [r7, #240]	@ 0xf0
 8013c24:	4413      	add	r3, r2
 8013c26:	f5a3 62f0 	sub.w	r2, r3, #1920	@ 0x780
 8013c2a:	f8d7 3144 	ldr.w	r3, [r7, #324]	@ 0x144
 8013c2e:	601a      	str	r2, [r3, #0]
    z3 += z3;
 8013c30:	f8d7 30f0 	ldr.w	r3, [r7, #240]	@ 0xf0
 8013c34:	005b      	lsls	r3, r3, #1
 8013c36:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
    dataptr[6] = (DCTELEM)
      DESCALE(MULTIPLY(z1 - z3, FIX(1.144122806)) - /* c6 */
 8013c3a:	f8d7 20f8 	ldr.w	r2, [r7, #248]	@ 0xf8
 8013c3e:	f8d7 30f0 	ldr.w	r3, [r7, #240]	@ 0xf0
 8013c42:	1ad3      	subs	r3, r2, r3
 8013c44:	f242 429d 	movw	r2, #9373	@ 0x249d
 8013c48:	fb03 f202 	mul.w	r2, r3, r2
 8013c4c:	f8d7 10f4 	ldr.w	r1, [r7, #244]	@ 0xf4
 8013c50:	f8d7 30f0 	ldr.w	r3, [r7, #240]	@ 0xf0
 8013c54:	1acb      	subs	r3, r1, r3
 8013c56:	49a8      	ldr	r1, [pc, #672]	@ (8013ef8 <jpeg_fdct_15x15+0x4cc>)
 8013c58:	fb01 f303 	mul.w	r3, r1, r3
 8013c5c:	4413      	add	r3, r2
 8013c5e:	f503 5280 	add.w	r2, r3, #4096	@ 0x1000
    dataptr[6] = (DCTELEM)
 8013c62:	f8d7 3144 	ldr.w	r3, [r7, #324]	@ 0x144
 8013c66:	3318      	adds	r3, #24
      DESCALE(MULTIPLY(z1 - z3, FIX(1.144122806)) - /* c6 */
 8013c68:	1352      	asrs	r2, r2, #13
    dataptr[6] = (DCTELEM)
 8013c6a:	601a      	str	r2, [r3, #0]
	      MULTIPLY(z2 - z3, FIX(0.437016024)),  /* c12 */
	      CONST_BITS);
    tmp2 += ((tmp1 + tmp4) >> 1) - tmp7 - tmp7;
 8013c6c:	f8d7 2130 	ldr.w	r2, [r7, #304]	@ 0x130
 8013c70:	f8d7 3124 	ldr.w	r3, [r7, #292]	@ 0x124
 8013c74:	4413      	add	r3, r2
 8013c76:	105a      	asrs	r2, r3, #1
 8013c78:	f8d7 3118 	ldr.w	r3, [r7, #280]	@ 0x118
 8013c7c:	1ad2      	subs	r2, r2, r3
 8013c7e:	f8d7 3118 	ldr.w	r3, [r7, #280]	@ 0x118
 8013c82:	1ad3      	subs	r3, r2, r3
 8013c84:	f8d7 212c 	ldr.w	r2, [r7, #300]	@ 0x12c
 8013c88:	4413      	add	r3, r2
 8013c8a:	f8c7 312c 	str.w	r3, [r7, #300]	@ 0x12c
    z1 = MULTIPLY(tmp3 - tmp2, FIX(1.531135173)) -  /* c2+c14 */
 8013c8e:	f8d7 2128 	ldr.w	r2, [r7, #296]	@ 0x128
 8013c92:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 8013c96:	1ad3      	subs	r3, r2, r3
 8013c98:	f243 02ff 	movw	r2, #12543	@ 0x30ff
 8013c9c:	fb03 f202 	mul.w	r2, r3, r2
         MULTIPLY(tmp6 - tmp2, FIX(2.238241955));   /* c4+c8 */
 8013ca0:	f8d7 111c 	ldr.w	r1, [r7, #284]	@ 0x11c
 8013ca4:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 8013ca8:	1acb      	subs	r3, r1, r3
 8013caa:	4994      	ldr	r1, [pc, #592]	@ (8013efc <jpeg_fdct_15x15+0x4d0>)
 8013cac:	fb01 f303 	mul.w	r3, r1, r3
    z1 = MULTIPLY(tmp3 - tmp2, FIX(1.531135173)) -  /* c2+c14 */
 8013cb0:	4413      	add	r3, r2
 8013cb2:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
    z2 = MULTIPLY(tmp5 - tmp2, FIX(0.798468008)) -  /* c8-c14 */
 8013cb6:	f8d7 2120 	ldr.w	r2, [r7, #288]	@ 0x120
 8013cba:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 8013cbe:	1ad3      	subs	r3, r2, r3
 8013cc0:	f641 128d 	movw	r2, #6541	@ 0x198d
 8013cc4:	fb03 f202 	mul.w	r2, r3, r2
	 MULTIPLY(tmp0 - tmp2, FIX(0.091361227));   /* c2-c4 */
 8013cc8:	f8d7 1134 	ldr.w	r1, [r7, #308]	@ 0x134
 8013ccc:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 8013cd0:	1acb      	subs	r3, r1, r3
 8013cd2:	498b      	ldr	r1, [pc, #556]	@ (8013f00 <jpeg_fdct_15x15+0x4d4>)
 8013cd4:	fb01 f303 	mul.w	r3, r1, r3
    z2 = MULTIPLY(tmp5 - tmp2, FIX(0.798468008)) -  /* c8-c14 */
 8013cd8:	4413      	add	r3, r2
 8013cda:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
    z3 = MULTIPLY(tmp0 - tmp3, FIX(1.383309603)) +  /* c2 */
 8013cde:	f8d7 2134 	ldr.w	r2, [r7, #308]	@ 0x134
 8013ce2:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 8013ce6:	1ad3      	subs	r3, r2, r3
 8013ce8:	f642 4244 	movw	r2, #11332	@ 0x2c44
 8013cec:	fb03 f202 	mul.w	r2, r3, r2
	 MULTIPLY(tmp6 - tmp5, FIX(0.946293579)) +  /* c8 */
 8013cf0:	f8d7 111c 	ldr.w	r1, [r7, #284]	@ 0x11c
 8013cf4:	f8d7 3120 	ldr.w	r3, [r7, #288]	@ 0x120
 8013cf8:	1acb      	subs	r3, r1, r3
 8013cfa:	f641 6148 	movw	r1, #7752	@ 0x1e48
 8013cfe:	fb01 f303 	mul.w	r3, r1, r3
    z3 = MULTIPLY(tmp0 - tmp3, FIX(1.383309603)) +  /* c2 */
 8013d02:	441a      	add	r2, r3
	 MULTIPLY(tmp1 - tmp4, FIX(0.790569415));   /* (c6+c12)/2 */
 8013d04:	f8d7 1130 	ldr.w	r1, [r7, #304]	@ 0x130
 8013d08:	f8d7 3124 	ldr.w	r3, [r7, #292]	@ 0x124
 8013d0c:	1acb      	subs	r3, r1, r3
 8013d0e:	f641 114c 	movw	r1, #6476	@ 0x194c
 8013d12:	fb01 f303 	mul.w	r3, r1, r3
    z3 = MULTIPLY(tmp0 - tmp3, FIX(1.383309603)) +  /* c2 */
 8013d16:	4413      	add	r3, r2
 8013d18:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0

    dataptr[2] = (DCTELEM) DESCALE(z1 + z3, CONST_BITS);
 8013d1c:	f8d7 20f8 	ldr.w	r2, [r7, #248]	@ 0xf8
 8013d20:	f8d7 30f0 	ldr.w	r3, [r7, #240]	@ 0xf0
 8013d24:	4413      	add	r3, r2
 8013d26:	f503 5280 	add.w	r2, r3, #4096	@ 0x1000
 8013d2a:	f8d7 3144 	ldr.w	r3, [r7, #324]	@ 0x144
 8013d2e:	3308      	adds	r3, #8
 8013d30:	1352      	asrs	r2, r2, #13
 8013d32:	601a      	str	r2, [r3, #0]
    dataptr[4] = (DCTELEM) DESCALE(z2 + z3, CONST_BITS);
 8013d34:	f8d7 20f4 	ldr.w	r2, [r7, #244]	@ 0xf4
 8013d38:	f8d7 30f0 	ldr.w	r3, [r7, #240]	@ 0xf0
 8013d3c:	4413      	add	r3, r2
 8013d3e:	f503 5280 	add.w	r2, r3, #4096	@ 0x1000
 8013d42:	f8d7 3144 	ldr.w	r3, [r7, #324]	@ 0x144
 8013d46:	3310      	adds	r3, #16
 8013d48:	1352      	asrs	r2, r2, #13
 8013d4a:	601a      	str	r2, [r3, #0]

    /* Odd part */

    tmp2 = MULTIPLY(tmp10 - tmp12 - tmp13 + tmp15 + tmp16,
 8013d4c:	f8d7 2114 	ldr.w	r2, [r7, #276]	@ 0x114
 8013d50:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8013d54:	1ad2      	subs	r2, r2, r3
 8013d56:	f8d7 3108 	ldr.w	r3, [r7, #264]	@ 0x108
 8013d5a:	1ad2      	subs	r2, r2, r3
 8013d5c:	f8d7 3100 	ldr.w	r3, [r7, #256]	@ 0x100
 8013d60:	441a      	add	r2, r3
 8013d62:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8013d66:	4413      	add	r3, r2
 8013d68:	f242 7231 	movw	r2, #10033	@ 0x2731
 8013d6c:	fb02 f303 	mul.w	r3, r2, r3
 8013d70:	f8c7 312c 	str.w	r3, [r7, #300]	@ 0x12c
		    FIX(1.224744871));                         /* c5 */
    tmp1 = MULTIPLY(tmp10 - tmp14 - tmp15, FIX(1.344997024)) + /* c3 */
 8013d74:	f8d7 2114 	ldr.w	r2, [r7, #276]	@ 0x114
 8013d78:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8013d7c:	1ad2      	subs	r2, r2, r3
 8013d7e:	f8d7 3100 	ldr.w	r3, [r7, #256]	@ 0x100
 8013d82:	1ad3      	subs	r3, r2, r3
 8013d84:	f642 320a 	movw	r2, #11018	@ 0x2b0a
 8013d88:	fb03 f202 	mul.w	r2, r3, r2
	   MULTIPLY(tmp11 - tmp13 - tmp16, FIX(0.831253876));  /* c9 */
 8013d8c:	f8d7 1110 	ldr.w	r1, [r7, #272]	@ 0x110
 8013d90:	f8d7 3108 	ldr.w	r3, [r7, #264]	@ 0x108
 8013d94:	1ac9      	subs	r1, r1, r3
 8013d96:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8013d9a:	1acb      	subs	r3, r1, r3
 8013d9c:	f641 219a 	movw	r1, #6810	@ 0x1a9a
 8013da0:	fb01 f303 	mul.w	r3, r1, r3
    tmp1 = MULTIPLY(tmp10 - tmp14 - tmp15, FIX(1.344997024)) + /* c3 */
 8013da4:	4413      	add	r3, r2
 8013da6:	f8c7 3130 	str.w	r3, [r7, #304]	@ 0x130
    tmp12 = MULTIPLY(tmp12, FIX(1.224744871));                 /* c5 */
 8013daa:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8013dae:	f242 7231 	movw	r2, #10033	@ 0x2731
 8013db2:	fb02 f303 	mul.w	r3, r2, r3
 8013db6:	f8c7 310c 	str.w	r3, [r7, #268]	@ 0x10c
    tmp4 = MULTIPLY(tmp10 - tmp16, FIX(1.406466353)) +         /* c1 */
 8013dba:	f8d7 2114 	ldr.w	r2, [r7, #276]	@ 0x114
 8013dbe:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8013dc2:	1ad3      	subs	r3, r2, r3
 8013dc4:	f642 5202 	movw	r2, #11522	@ 0x2d02
 8013dc8:	fb03 f202 	mul.w	r2, r3, r2
	   MULTIPLY(tmp11 + tmp14, FIX(1.344997024)) +         /* c3 */
 8013dcc:	f8d7 1110 	ldr.w	r1, [r7, #272]	@ 0x110
 8013dd0:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8013dd4:	440b      	add	r3, r1
 8013dd6:	f642 310a 	movw	r1, #11018	@ 0x2b0a
 8013dda:	fb01 f303 	mul.w	r3, r1, r3
    tmp4 = MULTIPLY(tmp10 - tmp16, FIX(1.406466353)) +         /* c1 */
 8013dde:	441a      	add	r2, r3
	   MULTIPLY(tmp13 + tmp15, FIX(0.575212477));          /* c11 */
 8013de0:	f8d7 1108 	ldr.w	r1, [r7, #264]	@ 0x108
 8013de4:	f8d7 3100 	ldr.w	r3, [r7, #256]	@ 0x100
 8013de8:	440b      	add	r3, r1
 8013dea:	f241 2168 	movw	r1, #4712	@ 0x1268
 8013dee:	fb01 f303 	mul.w	r3, r1, r3
    tmp4 = MULTIPLY(tmp10 - tmp16, FIX(1.406466353)) +         /* c1 */
 8013df2:	4413      	add	r3, r2
 8013df4:	f8c7 3124 	str.w	r3, [r7, #292]	@ 0x124
    tmp0 = MULTIPLY(tmp13, FIX(0.475753014)) -                 /* c7-c11 */
 8013df8:	f8d7 3108 	ldr.w	r3, [r7, #264]	@ 0x108
 8013dfc:	f640 7239 	movw	r2, #3897	@ 0xf39
 8013e00:	fb03 f202 	mul.w	r2, r3, r2
	   MULTIPLY(tmp14, FIX(0.513743148)) +                 /* c3-c9 */
 8013e04:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8013e08:	493e      	ldr	r1, [pc, #248]	@ (8013f04 <jpeg_fdct_15x15+0x4d8>)
 8013e0a:	fb01 f303 	mul.w	r3, r1, r3
    tmp0 = MULTIPLY(tmp13, FIX(0.475753014)) -                 /* c7-c11 */
 8013e0e:	441a      	add	r2, r3
	   MULTIPLY(tmp16, FIX(1.700497885)) + tmp4 + tmp12;   /* c1+c13 */
 8013e10:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8013e14:	f243 616a 	movw	r1, #13930	@ 0x366a
 8013e18:	fb01 f303 	mul.w	r3, r1, r3
	   MULTIPLY(tmp14, FIX(0.513743148)) +                 /* c3-c9 */
 8013e1c:	441a      	add	r2, r3
	   MULTIPLY(tmp16, FIX(1.700497885)) + tmp4 + tmp12;   /* c1+c13 */
 8013e1e:	f8d7 3124 	ldr.w	r3, [r7, #292]	@ 0x124
 8013e22:	4413      	add	r3, r2
    tmp0 = MULTIPLY(tmp13, FIX(0.475753014)) -                 /* c7-c11 */
 8013e24:	f8d7 210c 	ldr.w	r2, [r7, #268]	@ 0x10c
 8013e28:	4413      	add	r3, r2
 8013e2a:	f8c7 3134 	str.w	r3, [r7, #308]	@ 0x134
    tmp3 = MULTIPLY(tmp10, - FIX(0.355500862)) -               /* -(c1-c7) */
 8013e2e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8013e32:	4a35      	ldr	r2, [pc, #212]	@ (8013f08 <jpeg_fdct_15x15+0x4dc>)
 8013e34:	fb03 f202 	mul.w	r2, r3, r2
	   MULTIPLY(tmp11, FIX(2.176250899)) -                 /* c3+c9 */
 8013e38:	f8d7 3110 	ldr.w	r3, [r7, #272]	@ 0x110
 8013e3c:	4933      	ldr	r1, [pc, #204]	@ (8013f0c <jpeg_fdct_15x15+0x4e0>)
 8013e3e:	fb01 f303 	mul.w	r3, r1, r3
    tmp3 = MULTIPLY(tmp10, - FIX(0.355500862)) -               /* -(c1-c7) */
 8013e42:	441a      	add	r2, r3
	   MULTIPLY(tmp15, FIX(0.869244010)) + tmp4 - tmp12;   /* c11+c13 */
 8013e44:	f8d7 3100 	ldr.w	r3, [r7, #256]	@ 0x100
 8013e48:	4931      	ldr	r1, [pc, #196]	@ (8013f10 <jpeg_fdct_15x15+0x4e4>)
 8013e4a:	fb01 f303 	mul.w	r3, r1, r3
	   MULTIPLY(tmp11, FIX(2.176250899)) -                 /* c3+c9 */
 8013e4e:	441a      	add	r2, r3
	   MULTIPLY(tmp15, FIX(0.869244010)) + tmp4 - tmp12;   /* c11+c13 */
 8013e50:	f8d7 3124 	ldr.w	r3, [r7, #292]	@ 0x124
 8013e54:	441a      	add	r2, r3
    tmp3 = MULTIPLY(tmp10, - FIX(0.355500862)) -               /* -(c1-c7) */
 8013e56:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8013e5a:	1ad3      	subs	r3, r2, r3
 8013e5c:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128

    dataptr[1] = (DCTELEM) DESCALE(tmp0, CONST_BITS);
 8013e60:	f8d7 3134 	ldr.w	r3, [r7, #308]	@ 0x134
 8013e64:	f503 5280 	add.w	r2, r3, #4096	@ 0x1000
 8013e68:	f8d7 3144 	ldr.w	r3, [r7, #324]	@ 0x144
 8013e6c:	3304      	adds	r3, #4
 8013e6e:	1352      	asrs	r2, r2, #13
 8013e70:	601a      	str	r2, [r3, #0]
    dataptr[3] = (DCTELEM) DESCALE(tmp1, CONST_BITS);
 8013e72:	f8d7 3130 	ldr.w	r3, [r7, #304]	@ 0x130
 8013e76:	f503 5280 	add.w	r2, r3, #4096	@ 0x1000
 8013e7a:	f8d7 3144 	ldr.w	r3, [r7, #324]	@ 0x144
 8013e7e:	330c      	adds	r3, #12
 8013e80:	1352      	asrs	r2, r2, #13
 8013e82:	601a      	str	r2, [r3, #0]
    dataptr[5] = (DCTELEM) DESCALE(tmp2, CONST_BITS);
 8013e84:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 8013e88:	f503 5280 	add.w	r2, r3, #4096	@ 0x1000
 8013e8c:	f8d7 3144 	ldr.w	r3, [r7, #324]	@ 0x144
 8013e90:	3314      	adds	r3, #20
 8013e92:	1352      	asrs	r2, r2, #13
 8013e94:	601a      	str	r2, [r3, #0]
    dataptr[7] = (DCTELEM) DESCALE(tmp3, CONST_BITS);
 8013e96:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 8013e9a:	f503 5280 	add.w	r2, r3, #4096	@ 0x1000
 8013e9e:	f8d7 3144 	ldr.w	r3, [r7, #324]	@ 0x144
 8013ea2:	331c      	adds	r3, #28
 8013ea4:	1352      	asrs	r2, r2, #13
 8013ea6:	601a      	str	r2, [r3, #0]

    ctr++;
 8013ea8:	f8d7 313c 	ldr.w	r3, [r7, #316]	@ 0x13c
 8013eac:	3301      	adds	r3, #1
 8013eae:	f8c7 313c 	str.w	r3, [r7, #316]	@ 0x13c

    if (ctr != DCTSIZE) {
 8013eb2:	f8d7 313c 	ldr.w	r3, [r7, #316]	@ 0x13c
 8013eb6:	2b08      	cmp	r3, #8
 8013eb8:	d009      	beq.n	8013ece <jpeg_fdct_15x15+0x4a2>
      if (ctr == 15)
 8013eba:	f8d7 313c 	ldr.w	r3, [r7, #316]	@ 0x13c
 8013ebe:	2b0f      	cmp	r3, #15
 8013ec0:	d00a      	beq.n	8013ed8 <jpeg_fdct_15x15+0x4ac>
	break;			/* Done. */
      dataptr += DCTSIZE;	/* advance pointer to next row */
 8013ec2:	f8d7 3144 	ldr.w	r3, [r7, #324]	@ 0x144
 8013ec6:	3320      	adds	r3, #32
 8013ec8:	f8c7 3144 	str.w	r3, [r7, #324]	@ 0x144
 8013ecc:	e5ca      	b.n	8013a64 <jpeg_fdct_15x15+0x38>
    } else
      dataptr = workspace;	/* switch pointer to extended workspace */
 8013ece:	f107 0310 	add.w	r3, r7, #16
 8013ed2:	f8c7 3144 	str.w	r3, [r7, #324]	@ 0x144
    elemptr = sample_data[ctr] + start_col;
 8013ed6:	e5c5      	b.n	8013a64 <jpeg_fdct_15x15+0x38>
	break;			/* Done. */
 8013ed8:	bf00      	nop
   * We must also scale the output by (8/15)**2 = 64/225, which we partially
   * fold into the constant multipliers and final shifting:
   * cK now represents sqrt(2) * cos(K*pi/30) * 256/225.
   */

  dataptr = data;
 8013eda:	f507 73a4 	add.w	r3, r7, #328	@ 0x148
 8013ede:	f5a3 739e 	sub.w	r3, r3, #316	@ 0x13c
 8013ee2:	681b      	ldr	r3, [r3, #0]
 8013ee4:	f8c7 3144 	str.w	r3, [r7, #324]	@ 0x144
  wsptr = workspace;
 8013ee8:	f107 0310 	add.w	r3, r7, #16
 8013eec:	f8c7 3140 	str.w	r3, [r7, #320]	@ 0x140
  for (ctr = DCTSIZE-1; ctr >= 0; ctr--) {
 8013ef0:	2307      	movs	r3, #7
 8013ef2:	f8c7 313c 	str.w	r3, [r7, #316]	@ 0x13c
 8013ef6:	e221      	b.n	801433c <jpeg_fdct_15x15+0x910>
 8013ef8:	fffff204 	.word	0xfffff204
 8013efc:	ffffb860 	.word	0xffffb860
 8013f00:	fffffd14 	.word	0xfffffd14
 8013f04:	ffffef8f 	.word	0xffffef8f
 8013f08:	fffff4a0 	.word	0xfffff4a0
 8013f0c:	ffffba5c 	.word	0xffffba5c
 8013f10:	ffffe42f 	.word	0xffffe42f
    /* Even part */

    tmp0 = dataptr[DCTSIZE*0] + wsptr[DCTSIZE*6];
 8013f14:	f8d7 3144 	ldr.w	r3, [r7, #324]	@ 0x144
 8013f18:	681a      	ldr	r2, [r3, #0]
 8013f1a:	f8d7 3140 	ldr.w	r3, [r7, #320]	@ 0x140
 8013f1e:	33c0      	adds	r3, #192	@ 0xc0
 8013f20:	681b      	ldr	r3, [r3, #0]
 8013f22:	4413      	add	r3, r2
 8013f24:	f8c7 3134 	str.w	r3, [r7, #308]	@ 0x134
    tmp1 = dataptr[DCTSIZE*1] + wsptr[DCTSIZE*5];
 8013f28:	f8d7 3144 	ldr.w	r3, [r7, #324]	@ 0x144
 8013f2c:	3320      	adds	r3, #32
 8013f2e:	681a      	ldr	r2, [r3, #0]
 8013f30:	f8d7 3140 	ldr.w	r3, [r7, #320]	@ 0x140
 8013f34:	33a0      	adds	r3, #160	@ 0xa0
 8013f36:	681b      	ldr	r3, [r3, #0]
 8013f38:	4413      	add	r3, r2
 8013f3a:	f8c7 3130 	str.w	r3, [r7, #304]	@ 0x130
    tmp2 = dataptr[DCTSIZE*2] + wsptr[DCTSIZE*4];
 8013f3e:	f8d7 3144 	ldr.w	r3, [r7, #324]	@ 0x144
 8013f42:	3340      	adds	r3, #64	@ 0x40
 8013f44:	681a      	ldr	r2, [r3, #0]
 8013f46:	f8d7 3140 	ldr.w	r3, [r7, #320]	@ 0x140
 8013f4a:	3380      	adds	r3, #128	@ 0x80
 8013f4c:	681b      	ldr	r3, [r3, #0]
 8013f4e:	4413      	add	r3, r2
 8013f50:	f8c7 312c 	str.w	r3, [r7, #300]	@ 0x12c
    tmp3 = dataptr[DCTSIZE*3] + wsptr[DCTSIZE*3];
 8013f54:	f8d7 3144 	ldr.w	r3, [r7, #324]	@ 0x144
 8013f58:	3360      	adds	r3, #96	@ 0x60
 8013f5a:	681a      	ldr	r2, [r3, #0]
 8013f5c:	f8d7 3140 	ldr.w	r3, [r7, #320]	@ 0x140
 8013f60:	3360      	adds	r3, #96	@ 0x60
 8013f62:	681b      	ldr	r3, [r3, #0]
 8013f64:	4413      	add	r3, r2
 8013f66:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
    tmp4 = dataptr[DCTSIZE*4] + wsptr[DCTSIZE*2];
 8013f6a:	f8d7 3144 	ldr.w	r3, [r7, #324]	@ 0x144
 8013f6e:	3380      	adds	r3, #128	@ 0x80
 8013f70:	681a      	ldr	r2, [r3, #0]
 8013f72:	f8d7 3140 	ldr.w	r3, [r7, #320]	@ 0x140
 8013f76:	3340      	adds	r3, #64	@ 0x40
 8013f78:	681b      	ldr	r3, [r3, #0]
 8013f7a:	4413      	add	r3, r2
 8013f7c:	f8c7 3124 	str.w	r3, [r7, #292]	@ 0x124
    tmp5 = dataptr[DCTSIZE*5] + wsptr[DCTSIZE*1];
 8013f80:	f8d7 3144 	ldr.w	r3, [r7, #324]	@ 0x144
 8013f84:	33a0      	adds	r3, #160	@ 0xa0
 8013f86:	681a      	ldr	r2, [r3, #0]
 8013f88:	f8d7 3140 	ldr.w	r3, [r7, #320]	@ 0x140
 8013f8c:	3320      	adds	r3, #32
 8013f8e:	681b      	ldr	r3, [r3, #0]
 8013f90:	4413      	add	r3, r2
 8013f92:	f8c7 3120 	str.w	r3, [r7, #288]	@ 0x120
    tmp6 = dataptr[DCTSIZE*6] + wsptr[DCTSIZE*0];
 8013f96:	f8d7 3144 	ldr.w	r3, [r7, #324]	@ 0x144
 8013f9a:	33c0      	adds	r3, #192	@ 0xc0
 8013f9c:	681a      	ldr	r2, [r3, #0]
 8013f9e:	f8d7 3140 	ldr.w	r3, [r7, #320]	@ 0x140
 8013fa2:	681b      	ldr	r3, [r3, #0]
 8013fa4:	4413      	add	r3, r2
 8013fa6:	f8c7 311c 	str.w	r3, [r7, #284]	@ 0x11c
    tmp7 = dataptr[DCTSIZE*7];
 8013faa:	f8d7 3144 	ldr.w	r3, [r7, #324]	@ 0x144
 8013fae:	33e0      	adds	r3, #224	@ 0xe0
 8013fb0:	681b      	ldr	r3, [r3, #0]
 8013fb2:	f8c7 3118 	str.w	r3, [r7, #280]	@ 0x118

    tmp10 = dataptr[DCTSIZE*0] - wsptr[DCTSIZE*6];
 8013fb6:	f8d7 3144 	ldr.w	r3, [r7, #324]	@ 0x144
 8013fba:	681a      	ldr	r2, [r3, #0]
 8013fbc:	f8d7 3140 	ldr.w	r3, [r7, #320]	@ 0x140
 8013fc0:	33c0      	adds	r3, #192	@ 0xc0
 8013fc2:	681b      	ldr	r3, [r3, #0]
 8013fc4:	1ad3      	subs	r3, r2, r3
 8013fc6:	f8c7 3114 	str.w	r3, [r7, #276]	@ 0x114
    tmp11 = dataptr[DCTSIZE*1] - wsptr[DCTSIZE*5];
 8013fca:	f8d7 3144 	ldr.w	r3, [r7, #324]	@ 0x144
 8013fce:	3320      	adds	r3, #32
 8013fd0:	681a      	ldr	r2, [r3, #0]
 8013fd2:	f8d7 3140 	ldr.w	r3, [r7, #320]	@ 0x140
 8013fd6:	33a0      	adds	r3, #160	@ 0xa0
 8013fd8:	681b      	ldr	r3, [r3, #0]
 8013fda:	1ad3      	subs	r3, r2, r3
 8013fdc:	f8c7 3110 	str.w	r3, [r7, #272]	@ 0x110
    tmp12 = dataptr[DCTSIZE*2] - wsptr[DCTSIZE*4];
 8013fe0:	f8d7 3144 	ldr.w	r3, [r7, #324]	@ 0x144
 8013fe4:	3340      	adds	r3, #64	@ 0x40
 8013fe6:	681a      	ldr	r2, [r3, #0]
 8013fe8:	f8d7 3140 	ldr.w	r3, [r7, #320]	@ 0x140
 8013fec:	3380      	adds	r3, #128	@ 0x80
 8013fee:	681b      	ldr	r3, [r3, #0]
 8013ff0:	1ad3      	subs	r3, r2, r3
 8013ff2:	f8c7 310c 	str.w	r3, [r7, #268]	@ 0x10c
    tmp13 = dataptr[DCTSIZE*3] - wsptr[DCTSIZE*3];
 8013ff6:	f8d7 3144 	ldr.w	r3, [r7, #324]	@ 0x144
 8013ffa:	3360      	adds	r3, #96	@ 0x60
 8013ffc:	681a      	ldr	r2, [r3, #0]
 8013ffe:	f8d7 3140 	ldr.w	r3, [r7, #320]	@ 0x140
 8014002:	3360      	adds	r3, #96	@ 0x60
 8014004:	681b      	ldr	r3, [r3, #0]
 8014006:	1ad3      	subs	r3, r2, r3
 8014008:	f8c7 3108 	str.w	r3, [r7, #264]	@ 0x108
    tmp14 = dataptr[DCTSIZE*4] - wsptr[DCTSIZE*2];
 801400c:	f8d7 3144 	ldr.w	r3, [r7, #324]	@ 0x144
 8014010:	3380      	adds	r3, #128	@ 0x80
 8014012:	681a      	ldr	r2, [r3, #0]
 8014014:	f8d7 3140 	ldr.w	r3, [r7, #320]	@ 0x140
 8014018:	3340      	adds	r3, #64	@ 0x40
 801401a:	681b      	ldr	r3, [r3, #0]
 801401c:	1ad3      	subs	r3, r2, r3
 801401e:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
    tmp15 = dataptr[DCTSIZE*5] - wsptr[DCTSIZE*1];
 8014022:	f8d7 3144 	ldr.w	r3, [r7, #324]	@ 0x144
 8014026:	33a0      	adds	r3, #160	@ 0xa0
 8014028:	681a      	ldr	r2, [r3, #0]
 801402a:	f8d7 3140 	ldr.w	r3, [r7, #320]	@ 0x140
 801402e:	3320      	adds	r3, #32
 8014030:	681b      	ldr	r3, [r3, #0]
 8014032:	1ad3      	subs	r3, r2, r3
 8014034:	f8c7 3100 	str.w	r3, [r7, #256]	@ 0x100
    tmp16 = dataptr[DCTSIZE*6] - wsptr[DCTSIZE*0];
 8014038:	f8d7 3144 	ldr.w	r3, [r7, #324]	@ 0x144
 801403c:	33c0      	adds	r3, #192	@ 0xc0
 801403e:	681a      	ldr	r2, [r3, #0]
 8014040:	f8d7 3140 	ldr.w	r3, [r7, #320]	@ 0x140
 8014044:	681b      	ldr	r3, [r3, #0]
 8014046:	1ad3      	subs	r3, r2, r3
 8014048:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc

    z1 = tmp0 + tmp4 + tmp5;
 801404c:	f8d7 2134 	ldr.w	r2, [r7, #308]	@ 0x134
 8014050:	f8d7 3124 	ldr.w	r3, [r7, #292]	@ 0x124
 8014054:	4413      	add	r3, r2
 8014056:	f8d7 2120 	ldr.w	r2, [r7, #288]	@ 0x120
 801405a:	4413      	add	r3, r2
 801405c:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
    z2 = tmp1 + tmp3 + tmp6;
 8014060:	f8d7 2130 	ldr.w	r2, [r7, #304]	@ 0x130
 8014064:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 8014068:	4413      	add	r3, r2
 801406a:	f8d7 211c 	ldr.w	r2, [r7, #284]	@ 0x11c
 801406e:	4413      	add	r3, r2
 8014070:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
    z3 = tmp2 + tmp7;
 8014074:	f8d7 212c 	ldr.w	r2, [r7, #300]	@ 0x12c
 8014078:	f8d7 3118 	ldr.w	r3, [r7, #280]	@ 0x118
 801407c:	4413      	add	r3, r2
 801407e:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
    dataptr[DCTSIZE*0] = (DCTELEM)
      DESCALE(MULTIPLY(z1 + z2 + z3, FIX(1.137777778)), /* 256/225 */
 8014082:	f8d7 20f8 	ldr.w	r2, [r7, #248]	@ 0xf8
 8014086:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 801408a:	441a      	add	r2, r3
 801408c:	f8d7 30f0 	ldr.w	r3, [r7, #240]	@ 0xf0
 8014090:	4413      	add	r3, r2
 8014092:	f242 4269 	movw	r2, #9321	@ 0x2469
 8014096:	fb02 f303 	mul.w	r3, r2, r3
 801409a:	f503 4380 	add.w	r3, r3, #16384	@ 0x4000
 801409e:	13da      	asrs	r2, r3, #15
    dataptr[DCTSIZE*0] = (DCTELEM)
 80140a0:	f8d7 3144 	ldr.w	r3, [r7, #324]	@ 0x144
 80140a4:	601a      	str	r2, [r3, #0]
	      CONST_BITS+2);
    z3 += z3;
 80140a6:	f8d7 30f0 	ldr.w	r3, [r7, #240]	@ 0xf0
 80140aa:	005b      	lsls	r3, r3, #1
 80140ac:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
    dataptr[DCTSIZE*6] = (DCTELEM)
      DESCALE(MULTIPLY(z1 - z3, FIX(1.301757503)) - /* c6 */
 80140b0:	f8d7 20f8 	ldr.w	r2, [r7, #248]	@ 0xf8
 80140b4:	f8d7 30f0 	ldr.w	r3, [r7, #240]	@ 0xf0
 80140b8:	1ad3      	subs	r3, r2, r3
 80140ba:	f642 12a8 	movw	r2, #10664	@ 0x29a8
 80140be:	fb03 f202 	mul.w	r2, r3, r2
 80140c2:	f8d7 10f4 	ldr.w	r1, [r7, #244]	@ 0xf4
 80140c6:	f8d7 30f0 	ldr.w	r3, [r7, #240]	@ 0xf0
 80140ca:	1acb      	subs	r3, r1, r3
 80140cc:	49a2      	ldr	r1, [pc, #648]	@ (8014358 <jpeg_fdct_15x15+0x92c>)
 80140ce:	fb01 f303 	mul.w	r3, r1, r3
 80140d2:	4413      	add	r3, r2
 80140d4:	f503 4280 	add.w	r2, r3, #16384	@ 0x4000
    dataptr[DCTSIZE*6] = (DCTELEM)
 80140d8:	f8d7 3144 	ldr.w	r3, [r7, #324]	@ 0x144
 80140dc:	33c0      	adds	r3, #192	@ 0xc0
      DESCALE(MULTIPLY(z1 - z3, FIX(1.301757503)) - /* c6 */
 80140de:	13d2      	asrs	r2, r2, #15
    dataptr[DCTSIZE*6] = (DCTELEM)
 80140e0:	601a      	str	r2, [r3, #0]
	      MULTIPLY(z2 - z3, FIX(0.497227121)),  /* c12 */
	      CONST_BITS+2);
    tmp2 += ((tmp1 + tmp4) >> 1) - tmp7 - tmp7;
 80140e2:	f8d7 2130 	ldr.w	r2, [r7, #304]	@ 0x130
 80140e6:	f8d7 3124 	ldr.w	r3, [r7, #292]	@ 0x124
 80140ea:	4413      	add	r3, r2
 80140ec:	105a      	asrs	r2, r3, #1
 80140ee:	f8d7 3118 	ldr.w	r3, [r7, #280]	@ 0x118
 80140f2:	1ad2      	subs	r2, r2, r3
 80140f4:	f8d7 3118 	ldr.w	r3, [r7, #280]	@ 0x118
 80140f8:	1ad3      	subs	r3, r2, r3
 80140fa:	f8d7 212c 	ldr.w	r2, [r7, #300]	@ 0x12c
 80140fe:	4413      	add	r3, r2
 8014100:	f8c7 312c 	str.w	r3, [r7, #300]	@ 0x12c
    z1 = MULTIPLY(tmp3 - tmp2, FIX(1.742091575)) -  /* c2+c14 */
 8014104:	f8d7 2128 	ldr.w	r2, [r7, #296]	@ 0x128
 8014108:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 801410c:	1ad3      	subs	r3, r2, r3
 801410e:	f243 72bf 	movw	r2, #14271	@ 0x37bf
 8014112:	fb03 f202 	mul.w	r2, r3, r2
         MULTIPLY(tmp6 - tmp2, FIX(2.546621957));   /* c4+c8 */
 8014116:	f8d7 111c 	ldr.w	r1, [r7, #284]	@ 0x11c
 801411a:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 801411e:	1acb      	subs	r3, r1, r3
 8014120:	498e      	ldr	r1, [pc, #568]	@ (801435c <jpeg_fdct_15x15+0x930>)
 8014122:	fb01 f303 	mul.w	r3, r1, r3
    z1 = MULTIPLY(tmp3 - tmp2, FIX(1.742091575)) -  /* c2+c14 */
 8014126:	4413      	add	r3, r2
 8014128:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
    z2 = MULTIPLY(tmp5 - tmp2, FIX(0.908479156)) -  /* c8-c14 */
 801412c:	f8d7 2120 	ldr.w	r2, [r7, #288]	@ 0x120
 8014130:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 8014134:	1ad3      	subs	r3, r2, r3
 8014136:	f641 5212 	movw	r2, #7442	@ 0x1d12
 801413a:	fb03 f202 	mul.w	r2, r3, r2
	 MULTIPLY(tmp0 - tmp2, FIX(0.103948774));   /* c2-c4 */
 801413e:	f8d7 1134 	ldr.w	r1, [r7, #308]	@ 0x134
 8014142:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 8014146:	1acb      	subs	r3, r1, r3
 8014148:	4985      	ldr	r1, [pc, #532]	@ (8014360 <jpeg_fdct_15x15+0x934>)
 801414a:	fb01 f303 	mul.w	r3, r1, r3
    z2 = MULTIPLY(tmp5 - tmp2, FIX(0.908479156)) -  /* c8-c14 */
 801414e:	4413      	add	r3, r2
 8014150:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
    z3 = MULTIPLY(tmp0 - tmp3, FIX(1.573898926)) +  /* c2 */
 8014154:	f8d7 2134 	ldr.w	r2, [r7, #308]	@ 0x134
 8014158:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 801415c:	1ad3      	subs	r3, r2, r3
 801415e:	f243 225d 	movw	r2, #12893	@ 0x325d
 8014162:	fb03 f202 	mul.w	r2, r3, r2
	 MULTIPLY(tmp6 - tmp5, FIX(1.076671805)) +  /* c8 */
 8014166:	f8d7 111c 	ldr.w	r1, [r7, #284]	@ 0x11c
 801416a:	f8d7 3120 	ldr.w	r3, [r7, #288]	@ 0x120
 801416e:	1acb      	subs	r3, r1, r3
 8014170:	f242 2174 	movw	r1, #8820	@ 0x2274
 8014174:	fb01 f303 	mul.w	r3, r1, r3
    z3 = MULTIPLY(tmp0 - tmp3, FIX(1.573898926)) +  /* c2 */
 8014178:	441a      	add	r2, r3
	 MULTIPLY(tmp1 - tmp4, FIX(0.899492312));   /* (c6+c12)/2 */
 801417a:	f8d7 1130 	ldr.w	r1, [r7, #304]	@ 0x130
 801417e:	f8d7 3124 	ldr.w	r3, [r7, #292]	@ 0x124
 8014182:	1acb      	subs	r3, r1, r3
 8014184:	f641 41c9 	movw	r1, #7369	@ 0x1cc9
 8014188:	fb01 f303 	mul.w	r3, r1, r3
    z3 = MULTIPLY(tmp0 - tmp3, FIX(1.573898926)) +  /* c2 */
 801418c:	4413      	add	r3, r2
 801418e:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0

    dataptr[DCTSIZE*2] = (DCTELEM) DESCALE(z1 + z3, CONST_BITS+2);
 8014192:	f8d7 20f8 	ldr.w	r2, [r7, #248]	@ 0xf8
 8014196:	f8d7 30f0 	ldr.w	r3, [r7, #240]	@ 0xf0
 801419a:	4413      	add	r3, r2
 801419c:	f503 4280 	add.w	r2, r3, #16384	@ 0x4000
 80141a0:	f8d7 3144 	ldr.w	r3, [r7, #324]	@ 0x144
 80141a4:	3340      	adds	r3, #64	@ 0x40
 80141a6:	13d2      	asrs	r2, r2, #15
 80141a8:	601a      	str	r2, [r3, #0]
    dataptr[DCTSIZE*4] = (DCTELEM) DESCALE(z2 + z3, CONST_BITS+2);
 80141aa:	f8d7 20f4 	ldr.w	r2, [r7, #244]	@ 0xf4
 80141ae:	f8d7 30f0 	ldr.w	r3, [r7, #240]	@ 0xf0
 80141b2:	4413      	add	r3, r2
 80141b4:	f503 4280 	add.w	r2, r3, #16384	@ 0x4000
 80141b8:	f8d7 3144 	ldr.w	r3, [r7, #324]	@ 0x144
 80141bc:	3380      	adds	r3, #128	@ 0x80
 80141be:	13d2      	asrs	r2, r2, #15
 80141c0:	601a      	str	r2, [r3, #0]

    /* Odd part */

    tmp2 = MULTIPLY(tmp10 - tmp12 - tmp13 + tmp15 + tmp16,
 80141c2:	f8d7 2114 	ldr.w	r2, [r7, #276]	@ 0x114
 80141c6:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80141ca:	1ad2      	subs	r2, r2, r3
 80141cc:	f8d7 3108 	ldr.w	r3, [r7, #264]	@ 0x108
 80141d0:	1ad2      	subs	r2, r2, r3
 80141d2:	f8d7 3100 	ldr.w	r3, [r7, #256]	@ 0x100
 80141d6:	441a      	add	r2, r3
 80141d8:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80141dc:	4413      	add	r3, r2
 80141de:	f642 4297 	movw	r2, #11415	@ 0x2c97
 80141e2:	fb02 f303 	mul.w	r3, r2, r3
 80141e6:	f8c7 312c 	str.w	r3, [r7, #300]	@ 0x12c
		    FIX(1.393487498));                         /* c5 */
    tmp1 = MULTIPLY(tmp10 - tmp14 - tmp15, FIX(1.530307725)) + /* c3 */
 80141ea:	f8d7 2114 	ldr.w	r2, [r7, #276]	@ 0x114
 80141ee:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80141f2:	1ad2      	subs	r2, r2, r3
 80141f4:	f8d7 3100 	ldr.w	r3, [r7, #256]	@ 0x100
 80141f8:	1ad3      	subs	r3, r2, r3
 80141fa:	f243 02f8 	movw	r2, #12536	@ 0x30f8
 80141fe:	fb03 f202 	mul.w	r2, r3, r2
	   MULTIPLY(tmp11 - tmp13 - tmp16, FIX(0.945782187));  /* c9 */
 8014202:	f8d7 1110 	ldr.w	r1, [r7, #272]	@ 0x110
 8014206:	f8d7 3108 	ldr.w	r3, [r7, #264]	@ 0x108
 801420a:	1ac9      	subs	r1, r1, r3
 801420c:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8014210:	1acb      	subs	r3, r1, r3
 8014212:	f641 6144 	movw	r1, #7748	@ 0x1e44
 8014216:	fb01 f303 	mul.w	r3, r1, r3
    tmp1 = MULTIPLY(tmp10 - tmp14 - tmp15, FIX(1.530307725)) + /* c3 */
 801421a:	4413      	add	r3, r2
 801421c:	f8c7 3130 	str.w	r3, [r7, #304]	@ 0x130
    tmp12 = MULTIPLY(tmp12, FIX(1.393487498));                 /* c5 */
 8014220:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8014224:	f642 4297 	movw	r2, #11415	@ 0x2c97
 8014228:	fb02 f303 	mul.w	r3, r2, r3
 801422c:	f8c7 310c 	str.w	r3, [r7, #268]	@ 0x10c
    tmp4 = MULTIPLY(tmp10 - tmp16, FIX(1.600246161)) +         /* c1 */
 8014230:	f8d7 2114 	ldr.w	r2, [r7, #276]	@ 0x114
 8014234:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8014238:	1ad3      	subs	r3, r2, r3
 801423a:	f243 3235 	movw	r2, #13109	@ 0x3335
 801423e:	fb03 f202 	mul.w	r2, r3, r2
	   MULTIPLY(tmp11 + tmp14, FIX(1.530307725)) +         /* c3 */
 8014242:	f8d7 1110 	ldr.w	r1, [r7, #272]	@ 0x110
 8014246:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 801424a:	440b      	add	r3, r1
 801424c:	f243 01f8 	movw	r1, #12536	@ 0x30f8
 8014250:	fb01 f303 	mul.w	r3, r1, r3
    tmp4 = MULTIPLY(tmp10 - tmp16, FIX(1.600246161)) +         /* c1 */
 8014254:	441a      	add	r2, r3
	   MULTIPLY(tmp13 + tmp15, FIX(0.654463974));          /* c11 */
 8014256:	f8d7 1108 	ldr.w	r1, [r7, #264]	@ 0x108
 801425a:	f8d7 3100 	ldr.w	r3, [r7, #256]	@ 0x100
 801425e:	440b      	add	r3, r1
 8014260:	f241 41f1 	movw	r1, #5361	@ 0x14f1
 8014264:	fb01 f303 	mul.w	r3, r1, r3
    tmp4 = MULTIPLY(tmp10 - tmp16, FIX(1.600246161)) +         /* c1 */
 8014268:	4413      	add	r3, r2
 801426a:	f8c7 3124 	str.w	r3, [r7, #292]	@ 0x124
    tmp0 = MULTIPLY(tmp13, FIX(0.541301207)) -                 /* c7-c11 */
 801426e:	f8d7 3108 	ldr.w	r3, [r7, #264]	@ 0x108
 8014272:	f241 1252 	movw	r2, #4434	@ 0x1152
 8014276:	fb03 f202 	mul.w	r2, r3, r2
	   MULTIPLY(tmp14, FIX(0.584525538)) +                 /* c3-c9 */
 801427a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 801427e:	4939      	ldr	r1, [pc, #228]	@ (8014364 <jpeg_fdct_15x15+0x938>)
 8014280:	fb01 f303 	mul.w	r3, r1, r3
    tmp0 = MULTIPLY(tmp13, FIX(0.541301207)) -                 /* c7-c11 */
 8014284:	441a      	add	r2, r3
	   MULTIPLY(tmp16, FIX(1.934788705)) + tmp4 + tmp12;   /* c1+c13 */
 8014286:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 801428a:	f643 51ea 	movw	r1, #15850	@ 0x3dea
 801428e:	fb01 f303 	mul.w	r3, r1, r3
	   MULTIPLY(tmp14, FIX(0.584525538)) +                 /* c3-c9 */
 8014292:	441a      	add	r2, r3
	   MULTIPLY(tmp16, FIX(1.934788705)) + tmp4 + tmp12;   /* c1+c13 */
 8014294:	f8d7 3124 	ldr.w	r3, [r7, #292]	@ 0x124
 8014298:	4413      	add	r3, r2
    tmp0 = MULTIPLY(tmp13, FIX(0.541301207)) -                 /* c7-c11 */
 801429a:	f8d7 210c 	ldr.w	r2, [r7, #268]	@ 0x10c
 801429e:	4413      	add	r3, r2
 80142a0:	f8c7 3134 	str.w	r3, [r7, #308]	@ 0x134
    tmp3 = MULTIPLY(tmp10, - FIX(0.404480980)) -               /* -(c1-c7) */
 80142a4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80142a8:	4a2f      	ldr	r2, [pc, #188]	@ (8014368 <jpeg_fdct_15x15+0x93c>)
 80142aa:	fb03 f202 	mul.w	r2, r3, r2
	   MULTIPLY(tmp11, FIX(2.476089912)) -                 /* c3+c9 */
 80142ae:	f8d7 3110 	ldr.w	r3, [r7, #272]	@ 0x110
 80142b2:	492e      	ldr	r1, [pc, #184]	@ (801436c <jpeg_fdct_15x15+0x940>)
 80142b4:	fb01 f303 	mul.w	r3, r1, r3
    tmp3 = MULTIPLY(tmp10, - FIX(0.404480980)) -               /* -(c1-c7) */
 80142b8:	441a      	add	r2, r3
	   MULTIPLY(tmp15, FIX(0.989006518)) + tmp4 - tmp12;   /* c11+c13 */
 80142ba:	f8d7 3100 	ldr.w	r3, [r7, #256]	@ 0x100
 80142be:	492c      	ldr	r1, [pc, #176]	@ (8014370 <jpeg_fdct_15x15+0x944>)
 80142c0:	fb01 f303 	mul.w	r3, r1, r3
	   MULTIPLY(tmp11, FIX(2.476089912)) -                 /* c3+c9 */
 80142c4:	441a      	add	r2, r3
	   MULTIPLY(tmp15, FIX(0.989006518)) + tmp4 - tmp12;   /* c11+c13 */
 80142c6:	f8d7 3124 	ldr.w	r3, [r7, #292]	@ 0x124
 80142ca:	441a      	add	r2, r3
    tmp3 = MULTIPLY(tmp10, - FIX(0.404480980)) -               /* -(c1-c7) */
 80142cc:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80142d0:	1ad3      	subs	r3, r2, r3
 80142d2:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128

    dataptr[DCTSIZE*1] = (DCTELEM) DESCALE(tmp0, CONST_BITS+2);
 80142d6:	f8d7 3134 	ldr.w	r3, [r7, #308]	@ 0x134
 80142da:	f503 4280 	add.w	r2, r3, #16384	@ 0x4000
 80142de:	f8d7 3144 	ldr.w	r3, [r7, #324]	@ 0x144
 80142e2:	3320      	adds	r3, #32
 80142e4:	13d2      	asrs	r2, r2, #15
 80142e6:	601a      	str	r2, [r3, #0]
    dataptr[DCTSIZE*3] = (DCTELEM) DESCALE(tmp1, CONST_BITS+2);
 80142e8:	f8d7 3130 	ldr.w	r3, [r7, #304]	@ 0x130
 80142ec:	f503 4280 	add.w	r2, r3, #16384	@ 0x4000
 80142f0:	f8d7 3144 	ldr.w	r3, [r7, #324]	@ 0x144
 80142f4:	3360      	adds	r3, #96	@ 0x60
 80142f6:	13d2      	asrs	r2, r2, #15
 80142f8:	601a      	str	r2, [r3, #0]
    dataptr[DCTSIZE*5] = (DCTELEM) DESCALE(tmp2, CONST_BITS+2);
 80142fa:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 80142fe:	f503 4280 	add.w	r2, r3, #16384	@ 0x4000
 8014302:	f8d7 3144 	ldr.w	r3, [r7, #324]	@ 0x144
 8014306:	33a0      	adds	r3, #160	@ 0xa0
 8014308:	13d2      	asrs	r2, r2, #15
 801430a:	601a      	str	r2, [r3, #0]
    dataptr[DCTSIZE*7] = (DCTELEM) DESCALE(tmp3, CONST_BITS+2);
 801430c:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 8014310:	f503 4280 	add.w	r2, r3, #16384	@ 0x4000
 8014314:	f8d7 3144 	ldr.w	r3, [r7, #324]	@ 0x144
 8014318:	33e0      	adds	r3, #224	@ 0xe0
 801431a:	13d2      	asrs	r2, r2, #15
 801431c:	601a      	str	r2, [r3, #0]

    dataptr++;			/* advance pointer to next column */
 801431e:	f8d7 3144 	ldr.w	r3, [r7, #324]	@ 0x144
 8014322:	3304      	adds	r3, #4
 8014324:	f8c7 3144 	str.w	r3, [r7, #324]	@ 0x144
    wsptr++;			/* advance pointer to next column */
 8014328:	f8d7 3140 	ldr.w	r3, [r7, #320]	@ 0x140
 801432c:	3304      	adds	r3, #4
 801432e:	f8c7 3140 	str.w	r3, [r7, #320]	@ 0x140
  for (ctr = DCTSIZE-1; ctr >= 0; ctr--) {
 8014332:	f8d7 313c 	ldr.w	r3, [r7, #316]	@ 0x13c
 8014336:	3b01      	subs	r3, #1
 8014338:	f8c7 313c 	str.w	r3, [r7, #316]	@ 0x13c
 801433c:	f8d7 313c 	ldr.w	r3, [r7, #316]	@ 0x13c
 8014340:	2b00      	cmp	r3, #0
 8014342:	f6bf ade7 	bge.w	8013f14 <jpeg_fdct_15x15+0x4e8>
  }
}
 8014346:	bf00      	nop
 8014348:	bf00      	nop
 801434a:	f507 77a6 	add.w	r7, r7, #332	@ 0x14c
 801434e:	46bd      	mov	sp, r7
 8014350:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014354:	4770      	bx	lr
 8014356:	bf00      	nop
 8014358:	fffff017 	.word	0xfffff017
 801435c:	ffffae82 	.word	0xffffae82
 8014360:	fffffcac 	.word	0xfffffcac
 8014364:	ffffed4c 	.word	0xffffed4c
 8014368:	fffff30e 	.word	0xfffff30e
 801436c:	ffffb0c4 	.word	0xffffb0c4
 8014370:	ffffe05a 	.word	0xffffe05a

08014374 <jpeg_fdct_16x16>:
 * Perform the forward DCT on a 16x16 sample block.
 */

GLOBAL(void)
jpeg_fdct_16x16 (DCTELEM * data, JSAMPARRAY sample_data, JDIMENSION start_col)
{
 8014374:	b480      	push	{r7}
 8014376:	b0d9      	sub	sp, #356	@ 0x164
 8014378:	af00      	add	r7, sp, #0
 801437a:	f507 73b0 	add.w	r3, r7, #352	@ 0x160
 801437e:	f5a3 73aa 	sub.w	r3, r3, #340	@ 0x154
 8014382:	6018      	str	r0, [r3, #0]
 8014384:	f507 73b0 	add.w	r3, r7, #352	@ 0x160
 8014388:	f5a3 73ac 	sub.w	r3, r3, #344	@ 0x158
 801438c:	6019      	str	r1, [r3, #0]
 801438e:	f507 73b0 	add.w	r3, r7, #352	@ 0x160
 8014392:	f5a3 73ae 	sub.w	r3, r3, #348	@ 0x15c
 8014396:	601a      	str	r2, [r3, #0]
  /* Pass 1: process rows. */
  /* Note results are scaled up by sqrt(8) compared to a true DCT; */
  /* furthermore, we scale the results by 2**PASS1_BITS. */
  /* cK represents sqrt(2) * cos(K*pi/32). */

  dataptr = data;
 8014398:	f507 73b0 	add.w	r3, r7, #352	@ 0x160
 801439c:	f5a3 73aa 	sub.w	r3, r3, #340	@ 0x154
 80143a0:	681b      	ldr	r3, [r3, #0]
 80143a2:	f8c7 315c 	str.w	r3, [r7, #348]	@ 0x15c
  ctr = 0;
 80143a6:	2300      	movs	r3, #0
 80143a8:	f8c7 3154 	str.w	r3, [r7, #340]	@ 0x154
  for (;;) {
    elemptr = sample_data[ctr] + start_col;
 80143ac:	f8d7 3154 	ldr.w	r3, [r7, #340]	@ 0x154
 80143b0:	009b      	lsls	r3, r3, #2
 80143b2:	f507 72b0 	add.w	r2, r7, #352	@ 0x160
 80143b6:	f5a2 72ac 	sub.w	r2, r2, #344	@ 0x158
 80143ba:	6812      	ldr	r2, [r2, #0]
 80143bc:	4413      	add	r3, r2
 80143be:	681a      	ldr	r2, [r3, #0]
 80143c0:	f507 73b0 	add.w	r3, r7, #352	@ 0x160
 80143c4:	f5a3 73ae 	sub.w	r3, r3, #348	@ 0x15c
 80143c8:	681b      	ldr	r3, [r3, #0]
 80143ca:	4413      	add	r3, r2
 80143cc:	f8c7 3150 	str.w	r3, [r7, #336]	@ 0x150

    /* Even part */

    tmp0 = GETJSAMPLE(elemptr[0]) + GETJSAMPLE(elemptr[15]);
 80143d0:	f8d7 3150 	ldr.w	r3, [r7, #336]	@ 0x150
 80143d4:	781b      	ldrb	r3, [r3, #0]
 80143d6:	461a      	mov	r2, r3
 80143d8:	f8d7 3150 	ldr.w	r3, [r7, #336]	@ 0x150
 80143dc:	330f      	adds	r3, #15
 80143de:	781b      	ldrb	r3, [r3, #0]
 80143e0:	4413      	add	r3, r2
 80143e2:	f8c7 314c 	str.w	r3, [r7, #332]	@ 0x14c
    tmp1 = GETJSAMPLE(elemptr[1]) + GETJSAMPLE(elemptr[14]);
 80143e6:	f8d7 3150 	ldr.w	r3, [r7, #336]	@ 0x150
 80143ea:	3301      	adds	r3, #1
 80143ec:	781b      	ldrb	r3, [r3, #0]
 80143ee:	461a      	mov	r2, r3
 80143f0:	f8d7 3150 	ldr.w	r3, [r7, #336]	@ 0x150
 80143f4:	330e      	adds	r3, #14
 80143f6:	781b      	ldrb	r3, [r3, #0]
 80143f8:	4413      	add	r3, r2
 80143fa:	f8c7 3148 	str.w	r3, [r7, #328]	@ 0x148
    tmp2 = GETJSAMPLE(elemptr[2]) + GETJSAMPLE(elemptr[13]);
 80143fe:	f8d7 3150 	ldr.w	r3, [r7, #336]	@ 0x150
 8014402:	3302      	adds	r3, #2
 8014404:	781b      	ldrb	r3, [r3, #0]
 8014406:	461a      	mov	r2, r3
 8014408:	f8d7 3150 	ldr.w	r3, [r7, #336]	@ 0x150
 801440c:	330d      	adds	r3, #13
 801440e:	781b      	ldrb	r3, [r3, #0]
 8014410:	4413      	add	r3, r2
 8014412:	f8c7 3144 	str.w	r3, [r7, #324]	@ 0x144
    tmp3 = GETJSAMPLE(elemptr[3]) + GETJSAMPLE(elemptr[12]);
 8014416:	f8d7 3150 	ldr.w	r3, [r7, #336]	@ 0x150
 801441a:	3303      	adds	r3, #3
 801441c:	781b      	ldrb	r3, [r3, #0]
 801441e:	461a      	mov	r2, r3
 8014420:	f8d7 3150 	ldr.w	r3, [r7, #336]	@ 0x150
 8014424:	330c      	adds	r3, #12
 8014426:	781b      	ldrb	r3, [r3, #0]
 8014428:	4413      	add	r3, r2
 801442a:	f8c7 3140 	str.w	r3, [r7, #320]	@ 0x140
    tmp4 = GETJSAMPLE(elemptr[4]) + GETJSAMPLE(elemptr[11]);
 801442e:	f8d7 3150 	ldr.w	r3, [r7, #336]	@ 0x150
 8014432:	3304      	adds	r3, #4
 8014434:	781b      	ldrb	r3, [r3, #0]
 8014436:	461a      	mov	r2, r3
 8014438:	f8d7 3150 	ldr.w	r3, [r7, #336]	@ 0x150
 801443c:	330b      	adds	r3, #11
 801443e:	781b      	ldrb	r3, [r3, #0]
 8014440:	4413      	add	r3, r2
 8014442:	f8c7 313c 	str.w	r3, [r7, #316]	@ 0x13c
    tmp5 = GETJSAMPLE(elemptr[5]) + GETJSAMPLE(elemptr[10]);
 8014446:	f8d7 3150 	ldr.w	r3, [r7, #336]	@ 0x150
 801444a:	3305      	adds	r3, #5
 801444c:	781b      	ldrb	r3, [r3, #0]
 801444e:	461a      	mov	r2, r3
 8014450:	f8d7 3150 	ldr.w	r3, [r7, #336]	@ 0x150
 8014454:	330a      	adds	r3, #10
 8014456:	781b      	ldrb	r3, [r3, #0]
 8014458:	4413      	add	r3, r2
 801445a:	f8c7 3138 	str.w	r3, [r7, #312]	@ 0x138
    tmp6 = GETJSAMPLE(elemptr[6]) + GETJSAMPLE(elemptr[9]);
 801445e:	f8d7 3150 	ldr.w	r3, [r7, #336]	@ 0x150
 8014462:	3306      	adds	r3, #6
 8014464:	781b      	ldrb	r3, [r3, #0]
 8014466:	461a      	mov	r2, r3
 8014468:	f8d7 3150 	ldr.w	r3, [r7, #336]	@ 0x150
 801446c:	3309      	adds	r3, #9
 801446e:	781b      	ldrb	r3, [r3, #0]
 8014470:	4413      	add	r3, r2
 8014472:	f8c7 3134 	str.w	r3, [r7, #308]	@ 0x134
    tmp7 = GETJSAMPLE(elemptr[7]) + GETJSAMPLE(elemptr[8]);
 8014476:	f8d7 3150 	ldr.w	r3, [r7, #336]	@ 0x150
 801447a:	3307      	adds	r3, #7
 801447c:	781b      	ldrb	r3, [r3, #0]
 801447e:	461a      	mov	r2, r3
 8014480:	f8d7 3150 	ldr.w	r3, [r7, #336]	@ 0x150
 8014484:	3308      	adds	r3, #8
 8014486:	781b      	ldrb	r3, [r3, #0]
 8014488:	4413      	add	r3, r2
 801448a:	f8c7 3130 	str.w	r3, [r7, #304]	@ 0x130

    tmp10 = tmp0 + tmp7;
 801448e:	f8d7 214c 	ldr.w	r2, [r7, #332]	@ 0x14c
 8014492:	f8d7 3130 	ldr.w	r3, [r7, #304]	@ 0x130
 8014496:	4413      	add	r3, r2
 8014498:	f8c7 312c 	str.w	r3, [r7, #300]	@ 0x12c
    tmp14 = tmp0 - tmp7;
 801449c:	f8d7 214c 	ldr.w	r2, [r7, #332]	@ 0x14c
 80144a0:	f8d7 3130 	ldr.w	r3, [r7, #304]	@ 0x130
 80144a4:	1ad3      	subs	r3, r2, r3
 80144a6:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
    tmp11 = tmp1 + tmp6;
 80144aa:	f8d7 2148 	ldr.w	r2, [r7, #328]	@ 0x148
 80144ae:	f8d7 3134 	ldr.w	r3, [r7, #308]	@ 0x134
 80144b2:	4413      	add	r3, r2
 80144b4:	f8c7 3124 	str.w	r3, [r7, #292]	@ 0x124
    tmp15 = tmp1 - tmp6;
 80144b8:	f8d7 2148 	ldr.w	r2, [r7, #328]	@ 0x148
 80144bc:	f8d7 3134 	ldr.w	r3, [r7, #308]	@ 0x134
 80144c0:	1ad3      	subs	r3, r2, r3
 80144c2:	f8c7 3120 	str.w	r3, [r7, #288]	@ 0x120
    tmp12 = tmp2 + tmp5;
 80144c6:	f8d7 2144 	ldr.w	r2, [r7, #324]	@ 0x144
 80144ca:	f8d7 3138 	ldr.w	r3, [r7, #312]	@ 0x138
 80144ce:	4413      	add	r3, r2
 80144d0:	f8c7 311c 	str.w	r3, [r7, #284]	@ 0x11c
    tmp16 = tmp2 - tmp5;
 80144d4:	f8d7 2144 	ldr.w	r2, [r7, #324]	@ 0x144
 80144d8:	f8d7 3138 	ldr.w	r3, [r7, #312]	@ 0x138
 80144dc:	1ad3      	subs	r3, r2, r3
 80144de:	f8c7 3118 	str.w	r3, [r7, #280]	@ 0x118
    tmp13 = tmp3 + tmp4;
 80144e2:	f8d7 2140 	ldr.w	r2, [r7, #320]	@ 0x140
 80144e6:	f8d7 313c 	ldr.w	r3, [r7, #316]	@ 0x13c
 80144ea:	4413      	add	r3, r2
 80144ec:	f8c7 3114 	str.w	r3, [r7, #276]	@ 0x114
    tmp17 = tmp3 - tmp4;
 80144f0:	f8d7 2140 	ldr.w	r2, [r7, #320]	@ 0x140
 80144f4:	f8d7 313c 	ldr.w	r3, [r7, #316]	@ 0x13c
 80144f8:	1ad3      	subs	r3, r2, r3
 80144fa:	f8c7 3110 	str.w	r3, [r7, #272]	@ 0x110

    tmp0 = GETJSAMPLE(elemptr[0]) - GETJSAMPLE(elemptr[15]);
 80144fe:	f8d7 3150 	ldr.w	r3, [r7, #336]	@ 0x150
 8014502:	781b      	ldrb	r3, [r3, #0]
 8014504:	461a      	mov	r2, r3
 8014506:	f8d7 3150 	ldr.w	r3, [r7, #336]	@ 0x150
 801450a:	330f      	adds	r3, #15
 801450c:	781b      	ldrb	r3, [r3, #0]
 801450e:	1ad3      	subs	r3, r2, r3
 8014510:	f8c7 314c 	str.w	r3, [r7, #332]	@ 0x14c
    tmp1 = GETJSAMPLE(elemptr[1]) - GETJSAMPLE(elemptr[14]);
 8014514:	f8d7 3150 	ldr.w	r3, [r7, #336]	@ 0x150
 8014518:	3301      	adds	r3, #1
 801451a:	781b      	ldrb	r3, [r3, #0]
 801451c:	461a      	mov	r2, r3
 801451e:	f8d7 3150 	ldr.w	r3, [r7, #336]	@ 0x150
 8014522:	330e      	adds	r3, #14
 8014524:	781b      	ldrb	r3, [r3, #0]
 8014526:	1ad3      	subs	r3, r2, r3
 8014528:	f8c7 3148 	str.w	r3, [r7, #328]	@ 0x148
    tmp2 = GETJSAMPLE(elemptr[2]) - GETJSAMPLE(elemptr[13]);
 801452c:	f8d7 3150 	ldr.w	r3, [r7, #336]	@ 0x150
 8014530:	3302      	adds	r3, #2
 8014532:	781b      	ldrb	r3, [r3, #0]
 8014534:	461a      	mov	r2, r3
 8014536:	f8d7 3150 	ldr.w	r3, [r7, #336]	@ 0x150
 801453a:	330d      	adds	r3, #13
 801453c:	781b      	ldrb	r3, [r3, #0]
 801453e:	1ad3      	subs	r3, r2, r3
 8014540:	f8c7 3144 	str.w	r3, [r7, #324]	@ 0x144
    tmp3 = GETJSAMPLE(elemptr[3]) - GETJSAMPLE(elemptr[12]);
 8014544:	f8d7 3150 	ldr.w	r3, [r7, #336]	@ 0x150
 8014548:	3303      	adds	r3, #3
 801454a:	781b      	ldrb	r3, [r3, #0]
 801454c:	461a      	mov	r2, r3
 801454e:	f8d7 3150 	ldr.w	r3, [r7, #336]	@ 0x150
 8014552:	330c      	adds	r3, #12
 8014554:	781b      	ldrb	r3, [r3, #0]
 8014556:	1ad3      	subs	r3, r2, r3
 8014558:	f8c7 3140 	str.w	r3, [r7, #320]	@ 0x140
    tmp4 = GETJSAMPLE(elemptr[4]) - GETJSAMPLE(elemptr[11]);
 801455c:	f8d7 3150 	ldr.w	r3, [r7, #336]	@ 0x150
 8014560:	3304      	adds	r3, #4
 8014562:	781b      	ldrb	r3, [r3, #0]
 8014564:	461a      	mov	r2, r3
 8014566:	f8d7 3150 	ldr.w	r3, [r7, #336]	@ 0x150
 801456a:	330b      	adds	r3, #11
 801456c:	781b      	ldrb	r3, [r3, #0]
 801456e:	1ad3      	subs	r3, r2, r3
 8014570:	f8c7 313c 	str.w	r3, [r7, #316]	@ 0x13c
    tmp5 = GETJSAMPLE(elemptr[5]) - GETJSAMPLE(elemptr[10]);
 8014574:	f8d7 3150 	ldr.w	r3, [r7, #336]	@ 0x150
 8014578:	3305      	adds	r3, #5
 801457a:	781b      	ldrb	r3, [r3, #0]
 801457c:	461a      	mov	r2, r3
 801457e:	f8d7 3150 	ldr.w	r3, [r7, #336]	@ 0x150
 8014582:	330a      	adds	r3, #10
 8014584:	781b      	ldrb	r3, [r3, #0]
 8014586:	1ad3      	subs	r3, r2, r3
 8014588:	f8c7 3138 	str.w	r3, [r7, #312]	@ 0x138
    tmp6 = GETJSAMPLE(elemptr[6]) - GETJSAMPLE(elemptr[9]);
 801458c:	f8d7 3150 	ldr.w	r3, [r7, #336]	@ 0x150
 8014590:	3306      	adds	r3, #6
 8014592:	781b      	ldrb	r3, [r3, #0]
 8014594:	461a      	mov	r2, r3
 8014596:	f8d7 3150 	ldr.w	r3, [r7, #336]	@ 0x150
 801459a:	3309      	adds	r3, #9
 801459c:	781b      	ldrb	r3, [r3, #0]
 801459e:	1ad3      	subs	r3, r2, r3
 80145a0:	f8c7 3134 	str.w	r3, [r7, #308]	@ 0x134
    tmp7 = GETJSAMPLE(elemptr[7]) - GETJSAMPLE(elemptr[8]);
 80145a4:	f8d7 3150 	ldr.w	r3, [r7, #336]	@ 0x150
 80145a8:	3307      	adds	r3, #7
 80145aa:	781b      	ldrb	r3, [r3, #0]
 80145ac:	461a      	mov	r2, r3
 80145ae:	f8d7 3150 	ldr.w	r3, [r7, #336]	@ 0x150
 80145b2:	3308      	adds	r3, #8
 80145b4:	781b      	ldrb	r3, [r3, #0]
 80145b6:	1ad3      	subs	r3, r2, r3
 80145b8:	f8c7 3130 	str.w	r3, [r7, #304]	@ 0x130

    /* Apply unsigned->signed conversion */
    dataptr[0] = (DCTELEM)
      ((tmp10 + tmp11 + tmp12 + tmp13 - 16 * CENTERJSAMPLE) << PASS1_BITS);
 80145bc:	f8d7 212c 	ldr.w	r2, [r7, #300]	@ 0x12c
 80145c0:	f8d7 3124 	ldr.w	r3, [r7, #292]	@ 0x124
 80145c4:	441a      	add	r2, r3
 80145c6:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 80145ca:	441a      	add	r2, r3
 80145cc:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80145d0:	4413      	add	r3, r2
 80145d2:	f5a3 6300 	sub.w	r3, r3, #2048	@ 0x800
 80145d6:	009a      	lsls	r2, r3, #2
    dataptr[0] = (DCTELEM)
 80145d8:	f8d7 315c 	ldr.w	r3, [r7, #348]	@ 0x15c
 80145dc:	601a      	str	r2, [r3, #0]
    dataptr[4] = (DCTELEM)
      DESCALE(MULTIPLY(tmp10 - tmp13, FIX(1.306562965)) + /* c4[16] = c2[8] */
 80145de:	f8d7 212c 	ldr.w	r2, [r7, #300]	@ 0x12c
 80145e2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80145e6:	1ad3      	subs	r3, r2, r3
 80145e8:	f642 12cf 	movw	r2, #10703	@ 0x29cf
 80145ec:	fb03 f202 	mul.w	r2, r3, r2
 80145f0:	f8d7 1124 	ldr.w	r1, [r7, #292]	@ 0x124
 80145f4:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 80145f8:	1acb      	subs	r3, r1, r3
 80145fa:	f241 1151 	movw	r1, #4433	@ 0x1151
 80145fe:	fb01 f303 	mul.w	r3, r1, r3
 8014602:	4413      	add	r3, r2
 8014604:	f503 6280 	add.w	r2, r3, #1024	@ 0x400
    dataptr[4] = (DCTELEM)
 8014608:	f8d7 315c 	ldr.w	r3, [r7, #348]	@ 0x15c
 801460c:	3310      	adds	r3, #16
      DESCALE(MULTIPLY(tmp10 - tmp13, FIX(1.306562965)) + /* c4[16] = c2[8] */
 801460e:	12d2      	asrs	r2, r2, #11
    dataptr[4] = (DCTELEM)
 8014610:	601a      	str	r2, [r3, #0]
	      MULTIPLY(tmp11 - tmp12, FIX_0_541196100),   /* c12[16] = c6[8] */
	      CONST_BITS-PASS1_BITS);

    tmp10 = MULTIPLY(tmp17 - tmp15, FIX(0.275899379)) +   /* c14[16] = c7[8] */
 8014612:	f8d7 2110 	ldr.w	r2, [r7, #272]	@ 0x110
 8014616:	f8d7 3120 	ldr.w	r3, [r7, #288]	@ 0x120
 801461a:	1ad3      	subs	r3, r2, r3
 801461c:	f640 02d4 	movw	r2, #2260	@ 0x8d4
 8014620:	fb03 f202 	mul.w	r2, r3, r2
	    MULTIPLY(tmp14 - tmp16, FIX(1.387039845));    /* c2[16] = c1[8] */
 8014624:	f8d7 1128 	ldr.w	r1, [r7, #296]	@ 0x128
 8014628:	f8d7 3118 	ldr.w	r3, [r7, #280]	@ 0x118
 801462c:	1acb      	subs	r3, r1, r3
 801462e:	f642 4163 	movw	r1, #11363	@ 0x2c63
 8014632:	fb01 f303 	mul.w	r3, r1, r3
    tmp10 = MULTIPLY(tmp17 - tmp15, FIX(0.275899379)) +   /* c14[16] = c7[8] */
 8014636:	4413      	add	r3, r2
 8014638:	f8c7 312c 	str.w	r3, [r7, #300]	@ 0x12c

    dataptr[2] = (DCTELEM)
      DESCALE(tmp10 + MULTIPLY(tmp15, FIX(1.451774982))   /* c6+c14 */
 801463c:	f8d7 3120 	ldr.w	r3, [r7, #288]	@ 0x120
 8014640:	f642 6275 	movw	r2, #11893	@ 0x2e75
 8014644:	fb03 f202 	mul.w	r2, r3, r2
 8014648:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 801464c:	441a      	add	r2, r3
 801464e:	f8d7 3118 	ldr.w	r3, [r7, #280]	@ 0x118
 8014652:	f244 5187 	movw	r1, #17799	@ 0x4587
 8014656:	fb01 f303 	mul.w	r3, r1, r3
 801465a:	4413      	add	r3, r2
 801465c:	f503 6280 	add.w	r2, r3, #1024	@ 0x400
    dataptr[2] = (DCTELEM)
 8014660:	f8d7 315c 	ldr.w	r3, [r7, #348]	@ 0x15c
 8014664:	3308      	adds	r3, #8
      DESCALE(tmp10 + MULTIPLY(tmp15, FIX(1.451774982))   /* c6+c14 */
 8014666:	12d2      	asrs	r2, r2, #11
    dataptr[2] = (DCTELEM)
 8014668:	601a      	str	r2, [r3, #0]
	      + MULTIPLY(tmp16, FIX(2.172734804)),        /* c2+c10 */
	      CONST_BITS-PASS1_BITS);
    dataptr[6] = (DCTELEM)
      DESCALE(tmp10 - MULTIPLY(tmp14, FIX(0.211164243))   /* c2-c6 */
 801466a:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 801466e:	4a9b      	ldr	r2, [pc, #620]	@ (80148dc <jpeg_fdct_16x16+0x568>)
 8014670:	fb03 f202 	mul.w	r2, r3, r2
 8014674:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 8014678:	441a      	add	r2, r3
 801467a:	f8d7 3110 	ldr.w	r3, [r7, #272]	@ 0x110
 801467e:	4998      	ldr	r1, [pc, #608]	@ (80148e0 <jpeg_fdct_16x16+0x56c>)
 8014680:	fb01 f303 	mul.w	r3, r1, r3
 8014684:	4413      	add	r3, r2
 8014686:	f503 6280 	add.w	r2, r3, #1024	@ 0x400
    dataptr[6] = (DCTELEM)
 801468a:	f8d7 315c 	ldr.w	r3, [r7, #348]	@ 0x15c
 801468e:	3318      	adds	r3, #24
      DESCALE(tmp10 - MULTIPLY(tmp14, FIX(0.211164243))   /* c2-c6 */
 8014690:	12d2      	asrs	r2, r2, #11
    dataptr[6] = (DCTELEM)
 8014692:	601a      	str	r2, [r3, #0]
	      - MULTIPLY(tmp17, FIX(1.061594338)),        /* c10+c14 */
	      CONST_BITS-PASS1_BITS);

    /* Odd part */

    tmp11 = MULTIPLY(tmp0 + tmp1, FIX(1.353318001)) +         /* c3 */
 8014694:	f8d7 214c 	ldr.w	r2, [r7, #332]	@ 0x14c
 8014698:	f8d7 3148 	ldr.w	r3, [r7, #328]	@ 0x148
 801469c:	4413      	add	r3, r2
 801469e:	f642 324e 	movw	r2, #11086	@ 0x2b4e
 80146a2:	fb03 f202 	mul.w	r2, r3, r2
	    MULTIPLY(tmp6 - tmp7, FIX(0.410524528));          /* c13 */
 80146a6:	f8d7 1134 	ldr.w	r1, [r7, #308]	@ 0x134
 80146aa:	f8d7 3130 	ldr.w	r3, [r7, #304]	@ 0x130
 80146ae:	1acb      	subs	r3, r1, r3
 80146b0:	f640 5123 	movw	r1, #3363	@ 0xd23
 80146b4:	fb01 f303 	mul.w	r3, r1, r3
    tmp11 = MULTIPLY(tmp0 + tmp1, FIX(1.353318001)) +         /* c3 */
 80146b8:	4413      	add	r3, r2
 80146ba:	f8c7 3124 	str.w	r3, [r7, #292]	@ 0x124
    tmp12 = MULTIPLY(tmp0 + tmp2, FIX(1.247225013)) +         /* c5 */
 80146be:	f8d7 214c 	ldr.w	r2, [r7, #332]	@ 0x14c
 80146c2:	f8d7 3144 	ldr.w	r3, [r7, #324]	@ 0x144
 80146c6:	4413      	add	r3, r2
 80146c8:	f242 72e9 	movw	r2, #10217	@ 0x27e9
 80146cc:	fb03 f202 	mul.w	r2, r3, r2
	    MULTIPLY(tmp5 + tmp7, FIX(0.666655658));          /* c11 */
 80146d0:	f8d7 1138 	ldr.w	r1, [r7, #312]	@ 0x138
 80146d4:	f8d7 3130 	ldr.w	r3, [r7, #304]	@ 0x130
 80146d8:	440b      	add	r3, r1
 80146da:	f241 5155 	movw	r1, #5461	@ 0x1555
 80146de:	fb01 f303 	mul.w	r3, r1, r3
    tmp12 = MULTIPLY(tmp0 + tmp2, FIX(1.247225013)) +         /* c5 */
 80146e2:	4413      	add	r3, r2
 80146e4:	f8c7 311c 	str.w	r3, [r7, #284]	@ 0x11c
    tmp13 = MULTIPLY(tmp0 + tmp3, FIX(1.093201867)) +         /* c7 */
 80146e8:	f8d7 214c 	ldr.w	r2, [r7, #332]	@ 0x14c
 80146ec:	f8d7 3140 	ldr.w	r3, [r7, #320]	@ 0x140
 80146f0:	4413      	add	r3, r2
 80146f2:	f242 22fc 	movw	r2, #8956	@ 0x22fc
 80146f6:	fb03 f202 	mul.w	r2, r3, r2
	    MULTIPLY(tmp4 - tmp7, FIX(0.897167586));          /* c9 */
 80146fa:	f8d7 113c 	ldr.w	r1, [r7, #316]	@ 0x13c
 80146fe:	f8d7 3130 	ldr.w	r3, [r7, #304]	@ 0x130
 8014702:	1acb      	subs	r3, r1, r3
 8014704:	f641 41b6 	movw	r1, #7350	@ 0x1cb6
 8014708:	fb01 f303 	mul.w	r3, r1, r3
    tmp13 = MULTIPLY(tmp0 + tmp3, FIX(1.093201867)) +         /* c7 */
 801470c:	4413      	add	r3, r2
 801470e:	f8c7 3114 	str.w	r3, [r7, #276]	@ 0x114
    tmp14 = MULTIPLY(tmp1 + tmp2, FIX(0.138617169)) +         /* c15 */
 8014712:	f8d7 2148 	ldr.w	r2, [r7, #328]	@ 0x148
 8014716:	f8d7 3144 	ldr.w	r3, [r7, #324]	@ 0x144
 801471a:	4413      	add	r3, r2
 801471c:	f44f 628e 	mov.w	r2, #1136	@ 0x470
 8014720:	fb03 f202 	mul.w	r2, r3, r2
	    MULTIPLY(tmp6 - tmp5, FIX(1.407403738));          /* c1 */
 8014724:	f8d7 1134 	ldr.w	r1, [r7, #308]	@ 0x134
 8014728:	f8d7 3138 	ldr.w	r3, [r7, #312]	@ 0x138
 801472c:	1acb      	subs	r3, r1, r3
 801472e:	f642 5109 	movw	r1, #11529	@ 0x2d09
 8014732:	fb01 f303 	mul.w	r3, r1, r3
    tmp14 = MULTIPLY(tmp1 + tmp2, FIX(0.138617169)) +         /* c15 */
 8014736:	4413      	add	r3, r2
 8014738:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
    tmp15 = MULTIPLY(tmp1 + tmp3, - FIX(0.666655658)) +       /* -c11 */
 801473c:	f8d7 2148 	ldr.w	r2, [r7, #328]	@ 0x148
 8014740:	f8d7 3140 	ldr.w	r3, [r7, #320]	@ 0x140
 8014744:	4413      	add	r3, r2
 8014746:	4a67      	ldr	r2, [pc, #412]	@ (80148e4 <jpeg_fdct_16x16+0x570>)
 8014748:	fb03 f202 	mul.w	r2, r3, r2
	    MULTIPLY(tmp4 + tmp6, - FIX(1.247225013));        /* -c5 */
 801474c:	f8d7 113c 	ldr.w	r1, [r7, #316]	@ 0x13c
 8014750:	f8d7 3134 	ldr.w	r3, [r7, #308]	@ 0x134
 8014754:	440b      	add	r3, r1
 8014756:	4964      	ldr	r1, [pc, #400]	@ (80148e8 <jpeg_fdct_16x16+0x574>)
 8014758:	fb01 f303 	mul.w	r3, r1, r3
    tmp15 = MULTIPLY(tmp1 + tmp3, - FIX(0.666655658)) +       /* -c11 */
 801475c:	4413      	add	r3, r2
 801475e:	f8c7 3120 	str.w	r3, [r7, #288]	@ 0x120
    tmp16 = MULTIPLY(tmp2 + tmp3, - FIX(1.353318001)) +       /* -c3 */
 8014762:	f8d7 2144 	ldr.w	r2, [r7, #324]	@ 0x144
 8014766:	f8d7 3140 	ldr.w	r3, [r7, #320]	@ 0x140
 801476a:	4413      	add	r3, r2
 801476c:	4a5f      	ldr	r2, [pc, #380]	@ (80148ec <jpeg_fdct_16x16+0x578>)
 801476e:	fb03 f202 	mul.w	r2, r3, r2
	    MULTIPLY(tmp5 - tmp4, FIX(0.410524528));          /* c13 */
 8014772:	f8d7 1138 	ldr.w	r1, [r7, #312]	@ 0x138
 8014776:	f8d7 313c 	ldr.w	r3, [r7, #316]	@ 0x13c
 801477a:	1acb      	subs	r3, r1, r3
 801477c:	f640 5123 	movw	r1, #3363	@ 0xd23
 8014780:	fb01 f303 	mul.w	r3, r1, r3
    tmp16 = MULTIPLY(tmp2 + tmp3, - FIX(1.353318001)) +       /* -c3 */
 8014784:	4413      	add	r3, r2
 8014786:	f8c7 3118 	str.w	r3, [r7, #280]	@ 0x118
    tmp10 = tmp11 + tmp12 + tmp13 -
 801478a:	f8d7 2124 	ldr.w	r2, [r7, #292]	@ 0x124
 801478e:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8014792:	441a      	add	r2, r3
 8014794:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8014798:	441a      	add	r2, r3
	    MULTIPLY(tmp0, FIX(2.286341144)) +                /* c7+c5+c3-c1 */
 801479a:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 801479e:	4954      	ldr	r1, [pc, #336]	@ (80148f0 <jpeg_fdct_16x16+0x57c>)
 80147a0:	fb01 f303 	mul.w	r3, r1, r3
    tmp10 = tmp11 + tmp12 + tmp13 -
 80147a4:	441a      	add	r2, r3
	    MULTIPLY(tmp7, FIX(0.779653625));                 /* c15+c13-c11+c9 */
 80147a6:	f8d7 3130 	ldr.w	r3, [r7, #304]	@ 0x130
 80147aa:	f641 01f3 	movw	r1, #6387	@ 0x18f3
 80147ae:	fb01 f303 	mul.w	r3, r1, r3
    tmp10 = tmp11 + tmp12 + tmp13 -
 80147b2:	4413      	add	r3, r2
 80147b4:	f8c7 312c 	str.w	r3, [r7, #300]	@ 0x12c
    tmp11 += tmp14 + tmp15 + MULTIPLY(tmp1, FIX(0.071888074)) /* c9-c3-c15+c11 */
 80147b8:	f8d7 2128 	ldr.w	r2, [r7, #296]	@ 0x128
 80147bc:	f8d7 3120 	ldr.w	r3, [r7, #288]	@ 0x120
 80147c0:	441a      	add	r2, r3
 80147c2:	f8d7 3148 	ldr.w	r3, [r7, #328]	@ 0x148
 80147c6:	f240 214d 	movw	r1, #589	@ 0x24d
 80147ca:	fb01 f303 	mul.w	r3, r1, r3
 80147ce:	441a      	add	r2, r3
	     - MULTIPLY(tmp6, FIX(1.663905119));              /* c7+c13+c1-c5 */
 80147d0:	f8d7 3134 	ldr.w	r3, [r7, #308]	@ 0x134
 80147d4:	4947      	ldr	r1, [pc, #284]	@ (80148f4 <jpeg_fdct_16x16+0x580>)
 80147d6:	fb01 f303 	mul.w	r3, r1, r3
 80147da:	4413      	add	r3, r2
    tmp11 += tmp14 + tmp15 + MULTIPLY(tmp1, FIX(0.071888074)) /* c9-c3-c15+c11 */
 80147dc:	f8d7 2124 	ldr.w	r2, [r7, #292]	@ 0x124
 80147e0:	4413      	add	r3, r2
 80147e2:	f8c7 3124 	str.w	r3, [r7, #292]	@ 0x124
    tmp12 += tmp14 + tmp16 - MULTIPLY(tmp2, FIX(1.125726048)) /* c7+c5+c15-c3 */
 80147e6:	f8d7 2128 	ldr.w	r2, [r7, #296]	@ 0x128
 80147ea:	f8d7 3118 	ldr.w	r3, [r7, #280]	@ 0x118
 80147ee:	441a      	add	r2, r3
 80147f0:	f8d7 3144 	ldr.w	r3, [r7, #324]	@ 0x144
 80147f4:	4940      	ldr	r1, [pc, #256]	@ (80148f8 <jpeg_fdct_16x16+0x584>)
 80147f6:	fb01 f303 	mul.w	r3, r1, r3
 80147fa:	441a      	add	r2, r3
	     + MULTIPLY(tmp5, FIX(1.227391138));              /* c9-c11+c1-c13 */
 80147fc:	f8d7 3138 	ldr.w	r3, [r7, #312]	@ 0x138
 8014800:	f242 7147 	movw	r1, #10055	@ 0x2747
 8014804:	fb01 f303 	mul.w	r3, r1, r3
 8014808:	4413      	add	r3, r2
    tmp12 += tmp14 + tmp16 - MULTIPLY(tmp2, FIX(1.125726048)) /* c7+c5+c15-c3 */
 801480a:	f8d7 211c 	ldr.w	r2, [r7, #284]	@ 0x11c
 801480e:	4413      	add	r3, r2
 8014810:	f8c7 311c 	str.w	r3, [r7, #284]	@ 0x11c
    tmp13 += tmp15 + tmp16 + MULTIPLY(tmp3, FIX(1.065388962)) /* c15+c3+c11-c7 */
 8014814:	f8d7 2120 	ldr.w	r2, [r7, #288]	@ 0x120
 8014818:	f8d7 3118 	ldr.w	r3, [r7, #280]	@ 0x118
 801481c:	441a      	add	r2, r3
 801481e:	f8d7 3140 	ldr.w	r3, [r7, #320]	@ 0x140
 8014822:	f242 2118 	movw	r1, #8728	@ 0x2218
 8014826:	fb01 f303 	mul.w	r3, r1, r3
 801482a:	441a      	add	r2, r3
	     + MULTIPLY(tmp4, FIX(2.167985692));              /* c1+c13+c5-c9 */
 801482c:	f8d7 313c 	ldr.w	r3, [r7, #316]	@ 0x13c
 8014830:	f244 5160 	movw	r1, #17760	@ 0x4560
 8014834:	fb01 f303 	mul.w	r3, r1, r3
 8014838:	4413      	add	r3, r2
    tmp13 += tmp15 + tmp16 + MULTIPLY(tmp3, FIX(1.065388962)) /* c15+c3+c11-c7 */
 801483a:	f8d7 2114 	ldr.w	r2, [r7, #276]	@ 0x114
 801483e:	4413      	add	r3, r2
 8014840:	f8c7 3114 	str.w	r3, [r7, #276]	@ 0x114

    dataptr[1] = (DCTELEM) DESCALE(tmp10, CONST_BITS-PASS1_BITS);
 8014844:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 8014848:	f503 6280 	add.w	r2, r3, #1024	@ 0x400
 801484c:	f8d7 315c 	ldr.w	r3, [r7, #348]	@ 0x15c
 8014850:	3304      	adds	r3, #4
 8014852:	12d2      	asrs	r2, r2, #11
 8014854:	601a      	str	r2, [r3, #0]
    dataptr[3] = (DCTELEM) DESCALE(tmp11, CONST_BITS-PASS1_BITS);
 8014856:	f8d7 3124 	ldr.w	r3, [r7, #292]	@ 0x124
 801485a:	f503 6280 	add.w	r2, r3, #1024	@ 0x400
 801485e:	f8d7 315c 	ldr.w	r3, [r7, #348]	@ 0x15c
 8014862:	330c      	adds	r3, #12
 8014864:	12d2      	asrs	r2, r2, #11
 8014866:	601a      	str	r2, [r3, #0]
    dataptr[5] = (DCTELEM) DESCALE(tmp12, CONST_BITS-PASS1_BITS);
 8014868:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 801486c:	f503 6280 	add.w	r2, r3, #1024	@ 0x400
 8014870:	f8d7 315c 	ldr.w	r3, [r7, #348]	@ 0x15c
 8014874:	3314      	adds	r3, #20
 8014876:	12d2      	asrs	r2, r2, #11
 8014878:	601a      	str	r2, [r3, #0]
    dataptr[7] = (DCTELEM) DESCALE(tmp13, CONST_BITS-PASS1_BITS);
 801487a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 801487e:	f503 6280 	add.w	r2, r3, #1024	@ 0x400
 8014882:	f8d7 315c 	ldr.w	r3, [r7, #348]	@ 0x15c
 8014886:	331c      	adds	r3, #28
 8014888:	12d2      	asrs	r2, r2, #11
 801488a:	601a      	str	r2, [r3, #0]

    ctr++;
 801488c:	f8d7 3154 	ldr.w	r3, [r7, #340]	@ 0x154
 8014890:	3301      	adds	r3, #1
 8014892:	f8c7 3154 	str.w	r3, [r7, #340]	@ 0x154

    if (ctr != DCTSIZE) {
 8014896:	f8d7 3154 	ldr.w	r3, [r7, #340]	@ 0x154
 801489a:	2b08      	cmp	r3, #8
 801489c:	d009      	beq.n	80148b2 <jpeg_fdct_16x16+0x53e>
      if (ctr == DCTSIZE * 2)
 801489e:	f8d7 3154 	ldr.w	r3, [r7, #340]	@ 0x154
 80148a2:	2b10      	cmp	r3, #16
 80148a4:	d00a      	beq.n	80148bc <jpeg_fdct_16x16+0x548>
	break;			/* Done. */
      dataptr += DCTSIZE;	/* advance pointer to next row */
 80148a6:	f8d7 315c 	ldr.w	r3, [r7, #348]	@ 0x15c
 80148aa:	3320      	adds	r3, #32
 80148ac:	f8c7 315c 	str.w	r3, [r7, #348]	@ 0x15c
 80148b0:	e57c      	b.n	80143ac <jpeg_fdct_16x16+0x38>
    } else
      dataptr = workspace;	/* switch pointer to extended workspace */
 80148b2:	f107 0310 	add.w	r3, r7, #16
 80148b6:	f8c7 315c 	str.w	r3, [r7, #348]	@ 0x15c
    elemptr = sample_data[ctr] + start_col;
 80148ba:	e577      	b.n	80143ac <jpeg_fdct_16x16+0x38>
	break;			/* Done. */
 80148bc:	bf00      	nop
   * We remove the PASS1_BITS scaling, but leave the results scaled up
   * by an overall factor of 8.
   * We must also scale the output by (8/16)**2 = 1/2**2.
   */

  dataptr = data;
 80148be:	f507 73b0 	add.w	r3, r7, #352	@ 0x160
 80148c2:	f5a3 73aa 	sub.w	r3, r3, #340	@ 0x154
 80148c6:	681b      	ldr	r3, [r3, #0]
 80148c8:	f8c7 315c 	str.w	r3, [r7, #348]	@ 0x15c
  wsptr = workspace;
 80148cc:	f107 0310 	add.w	r3, r7, #16
 80148d0:	f8c7 3158 	str.w	r3, [r7, #344]	@ 0x158
  for (ctr = DCTSIZE-1; ctr >= 0; ctr--) {
 80148d4:	2307      	movs	r3, #7
 80148d6:	f8c7 3154 	str.w	r3, [r7, #340]	@ 0x154
 80148da:	e269      	b.n	8014db0 <jpeg_fdct_16x16+0xa3c>
 80148dc:	fffff93e 	.word	0xfffff93e
 80148e0:	ffffde07 	.word	0xffffde07
 80148e4:	ffffeaab 	.word	0xffffeaab
 80148e8:	ffffd817 	.word	0xffffd817
 80148ec:	ffffd4b2 	.word	0xffffd4b2
 80148f0:	ffffb6d6 	.word	0xffffb6d6
 80148f4:	ffffcac1 	.word	0xffffcac1
 80148f8:	ffffdbfa 	.word	0xffffdbfa
    /* Even part */

    tmp0 = dataptr[DCTSIZE*0] + wsptr[DCTSIZE*7];
 80148fc:	f8d7 315c 	ldr.w	r3, [r7, #348]	@ 0x15c
 8014900:	681a      	ldr	r2, [r3, #0]
 8014902:	f8d7 3158 	ldr.w	r3, [r7, #344]	@ 0x158
 8014906:	33e0      	adds	r3, #224	@ 0xe0
 8014908:	681b      	ldr	r3, [r3, #0]
 801490a:	4413      	add	r3, r2
 801490c:	f8c7 314c 	str.w	r3, [r7, #332]	@ 0x14c
    tmp1 = dataptr[DCTSIZE*1] + wsptr[DCTSIZE*6];
 8014910:	f8d7 315c 	ldr.w	r3, [r7, #348]	@ 0x15c
 8014914:	3320      	adds	r3, #32
 8014916:	681a      	ldr	r2, [r3, #0]
 8014918:	f8d7 3158 	ldr.w	r3, [r7, #344]	@ 0x158
 801491c:	33c0      	adds	r3, #192	@ 0xc0
 801491e:	681b      	ldr	r3, [r3, #0]
 8014920:	4413      	add	r3, r2
 8014922:	f8c7 3148 	str.w	r3, [r7, #328]	@ 0x148
    tmp2 = dataptr[DCTSIZE*2] + wsptr[DCTSIZE*5];
 8014926:	f8d7 315c 	ldr.w	r3, [r7, #348]	@ 0x15c
 801492a:	3340      	adds	r3, #64	@ 0x40
 801492c:	681a      	ldr	r2, [r3, #0]
 801492e:	f8d7 3158 	ldr.w	r3, [r7, #344]	@ 0x158
 8014932:	33a0      	adds	r3, #160	@ 0xa0
 8014934:	681b      	ldr	r3, [r3, #0]
 8014936:	4413      	add	r3, r2
 8014938:	f8c7 3144 	str.w	r3, [r7, #324]	@ 0x144
    tmp3 = dataptr[DCTSIZE*3] + wsptr[DCTSIZE*4];
 801493c:	f8d7 315c 	ldr.w	r3, [r7, #348]	@ 0x15c
 8014940:	3360      	adds	r3, #96	@ 0x60
 8014942:	681a      	ldr	r2, [r3, #0]
 8014944:	f8d7 3158 	ldr.w	r3, [r7, #344]	@ 0x158
 8014948:	3380      	adds	r3, #128	@ 0x80
 801494a:	681b      	ldr	r3, [r3, #0]
 801494c:	4413      	add	r3, r2
 801494e:	f8c7 3140 	str.w	r3, [r7, #320]	@ 0x140
    tmp4 = dataptr[DCTSIZE*4] + wsptr[DCTSIZE*3];
 8014952:	f8d7 315c 	ldr.w	r3, [r7, #348]	@ 0x15c
 8014956:	3380      	adds	r3, #128	@ 0x80
 8014958:	681a      	ldr	r2, [r3, #0]
 801495a:	f8d7 3158 	ldr.w	r3, [r7, #344]	@ 0x158
 801495e:	3360      	adds	r3, #96	@ 0x60
 8014960:	681b      	ldr	r3, [r3, #0]
 8014962:	4413      	add	r3, r2
 8014964:	f8c7 313c 	str.w	r3, [r7, #316]	@ 0x13c
    tmp5 = dataptr[DCTSIZE*5] + wsptr[DCTSIZE*2];
 8014968:	f8d7 315c 	ldr.w	r3, [r7, #348]	@ 0x15c
 801496c:	33a0      	adds	r3, #160	@ 0xa0
 801496e:	681a      	ldr	r2, [r3, #0]
 8014970:	f8d7 3158 	ldr.w	r3, [r7, #344]	@ 0x158
 8014974:	3340      	adds	r3, #64	@ 0x40
 8014976:	681b      	ldr	r3, [r3, #0]
 8014978:	4413      	add	r3, r2
 801497a:	f8c7 3138 	str.w	r3, [r7, #312]	@ 0x138
    tmp6 = dataptr[DCTSIZE*6] + wsptr[DCTSIZE*1];
 801497e:	f8d7 315c 	ldr.w	r3, [r7, #348]	@ 0x15c
 8014982:	33c0      	adds	r3, #192	@ 0xc0
 8014984:	681a      	ldr	r2, [r3, #0]
 8014986:	f8d7 3158 	ldr.w	r3, [r7, #344]	@ 0x158
 801498a:	3320      	adds	r3, #32
 801498c:	681b      	ldr	r3, [r3, #0]
 801498e:	4413      	add	r3, r2
 8014990:	f8c7 3134 	str.w	r3, [r7, #308]	@ 0x134
    tmp7 = dataptr[DCTSIZE*7] + wsptr[DCTSIZE*0];
 8014994:	f8d7 315c 	ldr.w	r3, [r7, #348]	@ 0x15c
 8014998:	33e0      	adds	r3, #224	@ 0xe0
 801499a:	681a      	ldr	r2, [r3, #0]
 801499c:	f8d7 3158 	ldr.w	r3, [r7, #344]	@ 0x158
 80149a0:	681b      	ldr	r3, [r3, #0]
 80149a2:	4413      	add	r3, r2
 80149a4:	f8c7 3130 	str.w	r3, [r7, #304]	@ 0x130

    tmp10 = tmp0 + tmp7;
 80149a8:	f8d7 214c 	ldr.w	r2, [r7, #332]	@ 0x14c
 80149ac:	f8d7 3130 	ldr.w	r3, [r7, #304]	@ 0x130
 80149b0:	4413      	add	r3, r2
 80149b2:	f8c7 312c 	str.w	r3, [r7, #300]	@ 0x12c
    tmp14 = tmp0 - tmp7;
 80149b6:	f8d7 214c 	ldr.w	r2, [r7, #332]	@ 0x14c
 80149ba:	f8d7 3130 	ldr.w	r3, [r7, #304]	@ 0x130
 80149be:	1ad3      	subs	r3, r2, r3
 80149c0:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
    tmp11 = tmp1 + tmp6;
 80149c4:	f8d7 2148 	ldr.w	r2, [r7, #328]	@ 0x148
 80149c8:	f8d7 3134 	ldr.w	r3, [r7, #308]	@ 0x134
 80149cc:	4413      	add	r3, r2
 80149ce:	f8c7 3124 	str.w	r3, [r7, #292]	@ 0x124
    tmp15 = tmp1 - tmp6;
 80149d2:	f8d7 2148 	ldr.w	r2, [r7, #328]	@ 0x148
 80149d6:	f8d7 3134 	ldr.w	r3, [r7, #308]	@ 0x134
 80149da:	1ad3      	subs	r3, r2, r3
 80149dc:	f8c7 3120 	str.w	r3, [r7, #288]	@ 0x120
    tmp12 = tmp2 + tmp5;
 80149e0:	f8d7 2144 	ldr.w	r2, [r7, #324]	@ 0x144
 80149e4:	f8d7 3138 	ldr.w	r3, [r7, #312]	@ 0x138
 80149e8:	4413      	add	r3, r2
 80149ea:	f8c7 311c 	str.w	r3, [r7, #284]	@ 0x11c
    tmp16 = tmp2 - tmp5;
 80149ee:	f8d7 2144 	ldr.w	r2, [r7, #324]	@ 0x144
 80149f2:	f8d7 3138 	ldr.w	r3, [r7, #312]	@ 0x138
 80149f6:	1ad3      	subs	r3, r2, r3
 80149f8:	f8c7 3118 	str.w	r3, [r7, #280]	@ 0x118
    tmp13 = tmp3 + tmp4;
 80149fc:	f8d7 2140 	ldr.w	r2, [r7, #320]	@ 0x140
 8014a00:	f8d7 313c 	ldr.w	r3, [r7, #316]	@ 0x13c
 8014a04:	4413      	add	r3, r2
 8014a06:	f8c7 3114 	str.w	r3, [r7, #276]	@ 0x114
    tmp17 = tmp3 - tmp4;
 8014a0a:	f8d7 2140 	ldr.w	r2, [r7, #320]	@ 0x140
 8014a0e:	f8d7 313c 	ldr.w	r3, [r7, #316]	@ 0x13c
 8014a12:	1ad3      	subs	r3, r2, r3
 8014a14:	f8c7 3110 	str.w	r3, [r7, #272]	@ 0x110

    tmp0 = dataptr[DCTSIZE*0] - wsptr[DCTSIZE*7];
 8014a18:	f8d7 315c 	ldr.w	r3, [r7, #348]	@ 0x15c
 8014a1c:	681a      	ldr	r2, [r3, #0]
 8014a1e:	f8d7 3158 	ldr.w	r3, [r7, #344]	@ 0x158
 8014a22:	33e0      	adds	r3, #224	@ 0xe0
 8014a24:	681b      	ldr	r3, [r3, #0]
 8014a26:	1ad3      	subs	r3, r2, r3
 8014a28:	f8c7 314c 	str.w	r3, [r7, #332]	@ 0x14c
    tmp1 = dataptr[DCTSIZE*1] - wsptr[DCTSIZE*6];
 8014a2c:	f8d7 315c 	ldr.w	r3, [r7, #348]	@ 0x15c
 8014a30:	3320      	adds	r3, #32
 8014a32:	681a      	ldr	r2, [r3, #0]
 8014a34:	f8d7 3158 	ldr.w	r3, [r7, #344]	@ 0x158
 8014a38:	33c0      	adds	r3, #192	@ 0xc0
 8014a3a:	681b      	ldr	r3, [r3, #0]
 8014a3c:	1ad3      	subs	r3, r2, r3
 8014a3e:	f8c7 3148 	str.w	r3, [r7, #328]	@ 0x148
    tmp2 = dataptr[DCTSIZE*2] - wsptr[DCTSIZE*5];
 8014a42:	f8d7 315c 	ldr.w	r3, [r7, #348]	@ 0x15c
 8014a46:	3340      	adds	r3, #64	@ 0x40
 8014a48:	681a      	ldr	r2, [r3, #0]
 8014a4a:	f8d7 3158 	ldr.w	r3, [r7, #344]	@ 0x158
 8014a4e:	33a0      	adds	r3, #160	@ 0xa0
 8014a50:	681b      	ldr	r3, [r3, #0]
 8014a52:	1ad3      	subs	r3, r2, r3
 8014a54:	f8c7 3144 	str.w	r3, [r7, #324]	@ 0x144
    tmp3 = dataptr[DCTSIZE*3] - wsptr[DCTSIZE*4];
 8014a58:	f8d7 315c 	ldr.w	r3, [r7, #348]	@ 0x15c
 8014a5c:	3360      	adds	r3, #96	@ 0x60
 8014a5e:	681a      	ldr	r2, [r3, #0]
 8014a60:	f8d7 3158 	ldr.w	r3, [r7, #344]	@ 0x158
 8014a64:	3380      	adds	r3, #128	@ 0x80
 8014a66:	681b      	ldr	r3, [r3, #0]
 8014a68:	1ad3      	subs	r3, r2, r3
 8014a6a:	f8c7 3140 	str.w	r3, [r7, #320]	@ 0x140
    tmp4 = dataptr[DCTSIZE*4] - wsptr[DCTSIZE*3];
 8014a6e:	f8d7 315c 	ldr.w	r3, [r7, #348]	@ 0x15c
 8014a72:	3380      	adds	r3, #128	@ 0x80
 8014a74:	681a      	ldr	r2, [r3, #0]
 8014a76:	f8d7 3158 	ldr.w	r3, [r7, #344]	@ 0x158
 8014a7a:	3360      	adds	r3, #96	@ 0x60
 8014a7c:	681b      	ldr	r3, [r3, #0]
 8014a7e:	1ad3      	subs	r3, r2, r3
 8014a80:	f8c7 313c 	str.w	r3, [r7, #316]	@ 0x13c
    tmp5 = dataptr[DCTSIZE*5] - wsptr[DCTSIZE*2];
 8014a84:	f8d7 315c 	ldr.w	r3, [r7, #348]	@ 0x15c
 8014a88:	33a0      	adds	r3, #160	@ 0xa0
 8014a8a:	681a      	ldr	r2, [r3, #0]
 8014a8c:	f8d7 3158 	ldr.w	r3, [r7, #344]	@ 0x158
 8014a90:	3340      	adds	r3, #64	@ 0x40
 8014a92:	681b      	ldr	r3, [r3, #0]
 8014a94:	1ad3      	subs	r3, r2, r3
 8014a96:	f8c7 3138 	str.w	r3, [r7, #312]	@ 0x138
    tmp6 = dataptr[DCTSIZE*6] - wsptr[DCTSIZE*1];
 8014a9a:	f8d7 315c 	ldr.w	r3, [r7, #348]	@ 0x15c
 8014a9e:	33c0      	adds	r3, #192	@ 0xc0
 8014aa0:	681a      	ldr	r2, [r3, #0]
 8014aa2:	f8d7 3158 	ldr.w	r3, [r7, #344]	@ 0x158
 8014aa6:	3320      	adds	r3, #32
 8014aa8:	681b      	ldr	r3, [r3, #0]
 8014aaa:	1ad3      	subs	r3, r2, r3
 8014aac:	f8c7 3134 	str.w	r3, [r7, #308]	@ 0x134
    tmp7 = dataptr[DCTSIZE*7] - wsptr[DCTSIZE*0];
 8014ab0:	f8d7 315c 	ldr.w	r3, [r7, #348]	@ 0x15c
 8014ab4:	33e0      	adds	r3, #224	@ 0xe0
 8014ab6:	681a      	ldr	r2, [r3, #0]
 8014ab8:	f8d7 3158 	ldr.w	r3, [r7, #344]	@ 0x158
 8014abc:	681b      	ldr	r3, [r3, #0]
 8014abe:	1ad3      	subs	r3, r2, r3
 8014ac0:	f8c7 3130 	str.w	r3, [r7, #304]	@ 0x130

    dataptr[DCTSIZE*0] = (DCTELEM)
      DESCALE(tmp10 + tmp11 + tmp12 + tmp13, PASS1_BITS+2);
 8014ac4:	f8d7 212c 	ldr.w	r2, [r7, #300]	@ 0x12c
 8014ac8:	f8d7 3124 	ldr.w	r3, [r7, #292]	@ 0x124
 8014acc:	441a      	add	r2, r3
 8014ace:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8014ad2:	441a      	add	r2, r3
 8014ad4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8014ad8:	4413      	add	r3, r2
 8014ada:	3308      	adds	r3, #8
 8014adc:	111a      	asrs	r2, r3, #4
    dataptr[DCTSIZE*0] = (DCTELEM)
 8014ade:	f8d7 315c 	ldr.w	r3, [r7, #348]	@ 0x15c
 8014ae2:	601a      	str	r2, [r3, #0]
    dataptr[DCTSIZE*4] = (DCTELEM)
      DESCALE(MULTIPLY(tmp10 - tmp13, FIX(1.306562965)) + /* c4[16] = c2[8] */
 8014ae4:	f8d7 212c 	ldr.w	r2, [r7, #300]	@ 0x12c
 8014ae8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8014aec:	1ad3      	subs	r3, r2, r3
 8014aee:	f642 12cf 	movw	r2, #10703	@ 0x29cf
 8014af2:	fb03 f202 	mul.w	r2, r3, r2
 8014af6:	f8d7 1124 	ldr.w	r1, [r7, #292]	@ 0x124
 8014afa:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8014afe:	1acb      	subs	r3, r1, r3
 8014b00:	f241 1151 	movw	r1, #4433	@ 0x1151
 8014b04:	fb01 f303 	mul.w	r3, r1, r3
 8014b08:	4413      	add	r3, r2
 8014b0a:	f503 3280 	add.w	r2, r3, #65536	@ 0x10000
    dataptr[DCTSIZE*4] = (DCTELEM)
 8014b0e:	f8d7 315c 	ldr.w	r3, [r7, #348]	@ 0x15c
 8014b12:	3380      	adds	r3, #128	@ 0x80
      DESCALE(MULTIPLY(tmp10 - tmp13, FIX(1.306562965)) + /* c4[16] = c2[8] */
 8014b14:	1452      	asrs	r2, r2, #17
    dataptr[DCTSIZE*4] = (DCTELEM)
 8014b16:	601a      	str	r2, [r3, #0]
	      MULTIPLY(tmp11 - tmp12, FIX_0_541196100),   /* c12[16] = c6[8] */
	      CONST_BITS+PASS1_BITS+2);

    tmp10 = MULTIPLY(tmp17 - tmp15, FIX(0.275899379)) +   /* c14[16] = c7[8] */
 8014b18:	f8d7 2110 	ldr.w	r2, [r7, #272]	@ 0x110
 8014b1c:	f8d7 3120 	ldr.w	r3, [r7, #288]	@ 0x120
 8014b20:	1ad3      	subs	r3, r2, r3
 8014b22:	f640 02d4 	movw	r2, #2260	@ 0x8d4
 8014b26:	fb03 f202 	mul.w	r2, r3, r2
	    MULTIPLY(tmp14 - tmp16, FIX(1.387039845));    /* c2[16] = c1[8] */
 8014b2a:	f8d7 1128 	ldr.w	r1, [r7, #296]	@ 0x128
 8014b2e:	f8d7 3118 	ldr.w	r3, [r7, #280]	@ 0x118
 8014b32:	1acb      	subs	r3, r1, r3
 8014b34:	f642 4163 	movw	r1, #11363	@ 0x2c63
 8014b38:	fb01 f303 	mul.w	r3, r1, r3
    tmp10 = MULTIPLY(tmp17 - tmp15, FIX(0.275899379)) +   /* c14[16] = c7[8] */
 8014b3c:	4413      	add	r3, r2
 8014b3e:	f8c7 312c 	str.w	r3, [r7, #300]	@ 0x12c

    dataptr[DCTSIZE*2] = (DCTELEM)
      DESCALE(tmp10 + MULTIPLY(tmp15, FIX(1.451774982))   /* c6+c14 */
 8014b42:	f8d7 3120 	ldr.w	r3, [r7, #288]	@ 0x120
 8014b46:	f642 6275 	movw	r2, #11893	@ 0x2e75
 8014b4a:	fb03 f202 	mul.w	r2, r3, r2
 8014b4e:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 8014b52:	441a      	add	r2, r3
 8014b54:	f8d7 3118 	ldr.w	r3, [r7, #280]	@ 0x118
 8014b58:	f244 5187 	movw	r1, #17799	@ 0x4587
 8014b5c:	fb01 f303 	mul.w	r3, r1, r3
 8014b60:	4413      	add	r3, r2
 8014b62:	f503 3280 	add.w	r2, r3, #65536	@ 0x10000
    dataptr[DCTSIZE*2] = (DCTELEM)
 8014b66:	f8d7 315c 	ldr.w	r3, [r7, #348]	@ 0x15c
 8014b6a:	3340      	adds	r3, #64	@ 0x40
      DESCALE(tmp10 + MULTIPLY(tmp15, FIX(1.451774982))   /* c6+c14 */
 8014b6c:	1452      	asrs	r2, r2, #17
    dataptr[DCTSIZE*2] = (DCTELEM)
 8014b6e:	601a      	str	r2, [r3, #0]
	      + MULTIPLY(tmp16, FIX(2.172734804)),        /* c2+10 */
	      CONST_BITS+PASS1_BITS+2);
    dataptr[DCTSIZE*6] = (DCTELEM)
      DESCALE(tmp10 - MULTIPLY(tmp14, FIX(0.211164243))   /* c2-c6 */
 8014b70:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 8014b74:	4a95      	ldr	r2, [pc, #596]	@ (8014dcc <jpeg_fdct_16x16+0xa58>)
 8014b76:	fb03 f202 	mul.w	r2, r3, r2
 8014b7a:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 8014b7e:	441a      	add	r2, r3
 8014b80:	f8d7 3110 	ldr.w	r3, [r7, #272]	@ 0x110
 8014b84:	4992      	ldr	r1, [pc, #584]	@ (8014dd0 <jpeg_fdct_16x16+0xa5c>)
 8014b86:	fb01 f303 	mul.w	r3, r1, r3
 8014b8a:	4413      	add	r3, r2
 8014b8c:	f503 3280 	add.w	r2, r3, #65536	@ 0x10000
    dataptr[DCTSIZE*6] = (DCTELEM)
 8014b90:	f8d7 315c 	ldr.w	r3, [r7, #348]	@ 0x15c
 8014b94:	33c0      	adds	r3, #192	@ 0xc0
      DESCALE(tmp10 - MULTIPLY(tmp14, FIX(0.211164243))   /* c2-c6 */
 8014b96:	1452      	asrs	r2, r2, #17
    dataptr[DCTSIZE*6] = (DCTELEM)
 8014b98:	601a      	str	r2, [r3, #0]
	      - MULTIPLY(tmp17, FIX(1.061594338)),        /* c10+c14 */
	      CONST_BITS+PASS1_BITS+2);

    /* Odd part */

    tmp11 = MULTIPLY(tmp0 + tmp1, FIX(1.353318001)) +         /* c3 */
 8014b9a:	f8d7 214c 	ldr.w	r2, [r7, #332]	@ 0x14c
 8014b9e:	f8d7 3148 	ldr.w	r3, [r7, #328]	@ 0x148
 8014ba2:	4413      	add	r3, r2
 8014ba4:	f642 324e 	movw	r2, #11086	@ 0x2b4e
 8014ba8:	fb03 f202 	mul.w	r2, r3, r2
	    MULTIPLY(tmp6 - tmp7, FIX(0.410524528));          /* c13 */
 8014bac:	f8d7 1134 	ldr.w	r1, [r7, #308]	@ 0x134
 8014bb0:	f8d7 3130 	ldr.w	r3, [r7, #304]	@ 0x130
 8014bb4:	1acb      	subs	r3, r1, r3
 8014bb6:	f640 5123 	movw	r1, #3363	@ 0xd23
 8014bba:	fb01 f303 	mul.w	r3, r1, r3
    tmp11 = MULTIPLY(tmp0 + tmp1, FIX(1.353318001)) +         /* c3 */
 8014bbe:	4413      	add	r3, r2
 8014bc0:	f8c7 3124 	str.w	r3, [r7, #292]	@ 0x124
    tmp12 = MULTIPLY(tmp0 + tmp2, FIX(1.247225013)) +         /* c5 */
 8014bc4:	f8d7 214c 	ldr.w	r2, [r7, #332]	@ 0x14c
 8014bc8:	f8d7 3144 	ldr.w	r3, [r7, #324]	@ 0x144
 8014bcc:	4413      	add	r3, r2
 8014bce:	f242 72e9 	movw	r2, #10217	@ 0x27e9
 8014bd2:	fb03 f202 	mul.w	r2, r3, r2
	    MULTIPLY(tmp5 + tmp7, FIX(0.666655658));          /* c11 */
 8014bd6:	f8d7 1138 	ldr.w	r1, [r7, #312]	@ 0x138
 8014bda:	f8d7 3130 	ldr.w	r3, [r7, #304]	@ 0x130
 8014bde:	440b      	add	r3, r1
 8014be0:	f241 5155 	movw	r1, #5461	@ 0x1555
 8014be4:	fb01 f303 	mul.w	r3, r1, r3
    tmp12 = MULTIPLY(tmp0 + tmp2, FIX(1.247225013)) +         /* c5 */
 8014be8:	4413      	add	r3, r2
 8014bea:	f8c7 311c 	str.w	r3, [r7, #284]	@ 0x11c
    tmp13 = MULTIPLY(tmp0 + tmp3, FIX(1.093201867)) +         /* c7 */
 8014bee:	f8d7 214c 	ldr.w	r2, [r7, #332]	@ 0x14c
 8014bf2:	f8d7 3140 	ldr.w	r3, [r7, #320]	@ 0x140
 8014bf6:	4413      	add	r3, r2
 8014bf8:	f242 22fc 	movw	r2, #8956	@ 0x22fc
 8014bfc:	fb03 f202 	mul.w	r2, r3, r2
	    MULTIPLY(tmp4 - tmp7, FIX(0.897167586));          /* c9 */
 8014c00:	f8d7 113c 	ldr.w	r1, [r7, #316]	@ 0x13c
 8014c04:	f8d7 3130 	ldr.w	r3, [r7, #304]	@ 0x130
 8014c08:	1acb      	subs	r3, r1, r3
 8014c0a:	f641 41b6 	movw	r1, #7350	@ 0x1cb6
 8014c0e:	fb01 f303 	mul.w	r3, r1, r3
    tmp13 = MULTIPLY(tmp0 + tmp3, FIX(1.093201867)) +         /* c7 */
 8014c12:	4413      	add	r3, r2
 8014c14:	f8c7 3114 	str.w	r3, [r7, #276]	@ 0x114
    tmp14 = MULTIPLY(tmp1 + tmp2, FIX(0.138617169)) +         /* c15 */
 8014c18:	f8d7 2148 	ldr.w	r2, [r7, #328]	@ 0x148
 8014c1c:	f8d7 3144 	ldr.w	r3, [r7, #324]	@ 0x144
 8014c20:	4413      	add	r3, r2
 8014c22:	f44f 628e 	mov.w	r2, #1136	@ 0x470
 8014c26:	fb03 f202 	mul.w	r2, r3, r2
	    MULTIPLY(tmp6 - tmp5, FIX(1.407403738));          /* c1 */
 8014c2a:	f8d7 1134 	ldr.w	r1, [r7, #308]	@ 0x134
 8014c2e:	f8d7 3138 	ldr.w	r3, [r7, #312]	@ 0x138
 8014c32:	1acb      	subs	r3, r1, r3
 8014c34:	f642 5109 	movw	r1, #11529	@ 0x2d09
 8014c38:	fb01 f303 	mul.w	r3, r1, r3
    tmp14 = MULTIPLY(tmp1 + tmp2, FIX(0.138617169)) +         /* c15 */
 8014c3c:	4413      	add	r3, r2
 8014c3e:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
    tmp15 = MULTIPLY(tmp1 + tmp3, - FIX(0.666655658)) +       /* -c11 */
 8014c42:	f8d7 2148 	ldr.w	r2, [r7, #328]	@ 0x148
 8014c46:	f8d7 3140 	ldr.w	r3, [r7, #320]	@ 0x140
 8014c4a:	4413      	add	r3, r2
 8014c4c:	4a61      	ldr	r2, [pc, #388]	@ (8014dd4 <jpeg_fdct_16x16+0xa60>)
 8014c4e:	fb03 f202 	mul.w	r2, r3, r2
	    MULTIPLY(tmp4 + tmp6, - FIX(1.247225013));        /* -c5 */
 8014c52:	f8d7 113c 	ldr.w	r1, [r7, #316]	@ 0x13c
 8014c56:	f8d7 3134 	ldr.w	r3, [r7, #308]	@ 0x134
 8014c5a:	440b      	add	r3, r1
 8014c5c:	495e      	ldr	r1, [pc, #376]	@ (8014dd8 <jpeg_fdct_16x16+0xa64>)
 8014c5e:	fb01 f303 	mul.w	r3, r1, r3
    tmp15 = MULTIPLY(tmp1 + tmp3, - FIX(0.666655658)) +       /* -c11 */
 8014c62:	4413      	add	r3, r2
 8014c64:	f8c7 3120 	str.w	r3, [r7, #288]	@ 0x120
    tmp16 = MULTIPLY(tmp2 + tmp3, - FIX(1.353318001)) +       /* -c3 */
 8014c68:	f8d7 2144 	ldr.w	r2, [r7, #324]	@ 0x144
 8014c6c:	f8d7 3140 	ldr.w	r3, [r7, #320]	@ 0x140
 8014c70:	4413      	add	r3, r2
 8014c72:	4a5a      	ldr	r2, [pc, #360]	@ (8014ddc <jpeg_fdct_16x16+0xa68>)
 8014c74:	fb03 f202 	mul.w	r2, r3, r2
	    MULTIPLY(tmp5 - tmp4, FIX(0.410524528));          /* c13 */
 8014c78:	f8d7 1138 	ldr.w	r1, [r7, #312]	@ 0x138
 8014c7c:	f8d7 313c 	ldr.w	r3, [r7, #316]	@ 0x13c
 8014c80:	1acb      	subs	r3, r1, r3
 8014c82:	f640 5123 	movw	r1, #3363	@ 0xd23
 8014c86:	fb01 f303 	mul.w	r3, r1, r3
    tmp16 = MULTIPLY(tmp2 + tmp3, - FIX(1.353318001)) +       /* -c3 */
 8014c8a:	4413      	add	r3, r2
 8014c8c:	f8c7 3118 	str.w	r3, [r7, #280]	@ 0x118
    tmp10 = tmp11 + tmp12 + tmp13 -
 8014c90:	f8d7 2124 	ldr.w	r2, [r7, #292]	@ 0x124
 8014c94:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8014c98:	441a      	add	r2, r3
 8014c9a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8014c9e:	441a      	add	r2, r3
	    MULTIPLY(tmp0, FIX(2.286341144)) +                /* c7+c5+c3-c1 */
 8014ca0:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8014ca4:	494e      	ldr	r1, [pc, #312]	@ (8014de0 <jpeg_fdct_16x16+0xa6c>)
 8014ca6:	fb01 f303 	mul.w	r3, r1, r3
    tmp10 = tmp11 + tmp12 + tmp13 -
 8014caa:	441a      	add	r2, r3
	    MULTIPLY(tmp7, FIX(0.779653625));                 /* c15+c13-c11+c9 */
 8014cac:	f8d7 3130 	ldr.w	r3, [r7, #304]	@ 0x130
 8014cb0:	f641 01f3 	movw	r1, #6387	@ 0x18f3
 8014cb4:	fb01 f303 	mul.w	r3, r1, r3
    tmp10 = tmp11 + tmp12 + tmp13 -
 8014cb8:	4413      	add	r3, r2
 8014cba:	f8c7 312c 	str.w	r3, [r7, #300]	@ 0x12c
    tmp11 += tmp14 + tmp15 + MULTIPLY(tmp1, FIX(0.071888074)) /* c9-c3-c15+c11 */
 8014cbe:	f8d7 2128 	ldr.w	r2, [r7, #296]	@ 0x128
 8014cc2:	f8d7 3120 	ldr.w	r3, [r7, #288]	@ 0x120
 8014cc6:	441a      	add	r2, r3
 8014cc8:	f8d7 3148 	ldr.w	r3, [r7, #328]	@ 0x148
 8014ccc:	f240 214d 	movw	r1, #589	@ 0x24d
 8014cd0:	fb01 f303 	mul.w	r3, r1, r3
 8014cd4:	441a      	add	r2, r3
	     - MULTIPLY(tmp6, FIX(1.663905119));              /* c7+c13+c1-c5 */
 8014cd6:	f8d7 3134 	ldr.w	r3, [r7, #308]	@ 0x134
 8014cda:	4942      	ldr	r1, [pc, #264]	@ (8014de4 <jpeg_fdct_16x16+0xa70>)
 8014cdc:	fb01 f303 	mul.w	r3, r1, r3
 8014ce0:	4413      	add	r3, r2
    tmp11 += tmp14 + tmp15 + MULTIPLY(tmp1, FIX(0.071888074)) /* c9-c3-c15+c11 */
 8014ce2:	f8d7 2124 	ldr.w	r2, [r7, #292]	@ 0x124
 8014ce6:	4413      	add	r3, r2
 8014ce8:	f8c7 3124 	str.w	r3, [r7, #292]	@ 0x124
    tmp12 += tmp14 + tmp16 - MULTIPLY(tmp2, FIX(1.125726048)) /* c7+c5+c15-c3 */
 8014cec:	f8d7 2128 	ldr.w	r2, [r7, #296]	@ 0x128
 8014cf0:	f8d7 3118 	ldr.w	r3, [r7, #280]	@ 0x118
 8014cf4:	441a      	add	r2, r3
 8014cf6:	f8d7 3144 	ldr.w	r3, [r7, #324]	@ 0x144
 8014cfa:	493b      	ldr	r1, [pc, #236]	@ (8014de8 <jpeg_fdct_16x16+0xa74>)
 8014cfc:	fb01 f303 	mul.w	r3, r1, r3
 8014d00:	441a      	add	r2, r3
	     + MULTIPLY(tmp5, FIX(1.227391138));              /* c9-c11+c1-c13 */
 8014d02:	f8d7 3138 	ldr.w	r3, [r7, #312]	@ 0x138
 8014d06:	f242 7147 	movw	r1, #10055	@ 0x2747
 8014d0a:	fb01 f303 	mul.w	r3, r1, r3
 8014d0e:	4413      	add	r3, r2
    tmp12 += tmp14 + tmp16 - MULTIPLY(tmp2, FIX(1.125726048)) /* c7+c5+c15-c3 */
 8014d10:	f8d7 211c 	ldr.w	r2, [r7, #284]	@ 0x11c
 8014d14:	4413      	add	r3, r2
 8014d16:	f8c7 311c 	str.w	r3, [r7, #284]	@ 0x11c
    tmp13 += tmp15 + tmp16 + MULTIPLY(tmp3, FIX(1.065388962)) /* c15+c3+c11-c7 */
 8014d1a:	f8d7 2120 	ldr.w	r2, [r7, #288]	@ 0x120
 8014d1e:	f8d7 3118 	ldr.w	r3, [r7, #280]	@ 0x118
 8014d22:	441a      	add	r2, r3
 8014d24:	f8d7 3140 	ldr.w	r3, [r7, #320]	@ 0x140
 8014d28:	f242 2118 	movw	r1, #8728	@ 0x2218
 8014d2c:	fb01 f303 	mul.w	r3, r1, r3
 8014d30:	441a      	add	r2, r3
	     + MULTIPLY(tmp4, FIX(2.167985692));              /* c1+c13+c5-c9 */
 8014d32:	f8d7 313c 	ldr.w	r3, [r7, #316]	@ 0x13c
 8014d36:	f244 5160 	movw	r1, #17760	@ 0x4560
 8014d3a:	fb01 f303 	mul.w	r3, r1, r3
 8014d3e:	4413      	add	r3, r2
    tmp13 += tmp15 + tmp16 + MULTIPLY(tmp3, FIX(1.065388962)) /* c15+c3+c11-c7 */
 8014d40:	f8d7 2114 	ldr.w	r2, [r7, #276]	@ 0x114
 8014d44:	4413      	add	r3, r2
 8014d46:	f8c7 3114 	str.w	r3, [r7, #276]	@ 0x114

    dataptr[DCTSIZE*1] = (DCTELEM) DESCALE(tmp10, CONST_BITS+PASS1_BITS+2);
 8014d4a:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 8014d4e:	f503 3280 	add.w	r2, r3, #65536	@ 0x10000
 8014d52:	f8d7 315c 	ldr.w	r3, [r7, #348]	@ 0x15c
 8014d56:	3320      	adds	r3, #32
 8014d58:	1452      	asrs	r2, r2, #17
 8014d5a:	601a      	str	r2, [r3, #0]
    dataptr[DCTSIZE*3] = (DCTELEM) DESCALE(tmp11, CONST_BITS+PASS1_BITS+2);
 8014d5c:	f8d7 3124 	ldr.w	r3, [r7, #292]	@ 0x124
 8014d60:	f503 3280 	add.w	r2, r3, #65536	@ 0x10000
 8014d64:	f8d7 315c 	ldr.w	r3, [r7, #348]	@ 0x15c
 8014d68:	3360      	adds	r3, #96	@ 0x60
 8014d6a:	1452      	asrs	r2, r2, #17
 8014d6c:	601a      	str	r2, [r3, #0]
    dataptr[DCTSIZE*5] = (DCTELEM) DESCALE(tmp12, CONST_BITS+PASS1_BITS+2);
 8014d6e:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8014d72:	f503 3280 	add.w	r2, r3, #65536	@ 0x10000
 8014d76:	f8d7 315c 	ldr.w	r3, [r7, #348]	@ 0x15c
 8014d7a:	33a0      	adds	r3, #160	@ 0xa0
 8014d7c:	1452      	asrs	r2, r2, #17
 8014d7e:	601a      	str	r2, [r3, #0]
    dataptr[DCTSIZE*7] = (DCTELEM) DESCALE(tmp13, CONST_BITS+PASS1_BITS+2);
 8014d80:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8014d84:	f503 3280 	add.w	r2, r3, #65536	@ 0x10000
 8014d88:	f8d7 315c 	ldr.w	r3, [r7, #348]	@ 0x15c
 8014d8c:	33e0      	adds	r3, #224	@ 0xe0
 8014d8e:	1452      	asrs	r2, r2, #17
 8014d90:	601a      	str	r2, [r3, #0]

    dataptr++;			/* advance pointer to next column */
 8014d92:	f8d7 315c 	ldr.w	r3, [r7, #348]	@ 0x15c
 8014d96:	3304      	adds	r3, #4
 8014d98:	f8c7 315c 	str.w	r3, [r7, #348]	@ 0x15c
    wsptr++;			/* advance pointer to next column */
 8014d9c:	f8d7 3158 	ldr.w	r3, [r7, #344]	@ 0x158
 8014da0:	3304      	adds	r3, #4
 8014da2:	f8c7 3158 	str.w	r3, [r7, #344]	@ 0x158
  for (ctr = DCTSIZE-1; ctr >= 0; ctr--) {
 8014da6:	f8d7 3154 	ldr.w	r3, [r7, #340]	@ 0x154
 8014daa:	3b01      	subs	r3, #1
 8014dac:	f8c7 3154 	str.w	r3, [r7, #340]	@ 0x154
 8014db0:	f8d7 3154 	ldr.w	r3, [r7, #340]	@ 0x154
 8014db4:	2b00      	cmp	r3, #0
 8014db6:	f6bf ada1 	bge.w	80148fc <jpeg_fdct_16x16+0x588>
  }
}
 8014dba:	bf00      	nop
 8014dbc:	bf00      	nop
 8014dbe:	f507 77b2 	add.w	r7, r7, #356	@ 0x164
 8014dc2:	46bd      	mov	sp, r7
 8014dc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014dc8:	4770      	bx	lr
 8014dca:	bf00      	nop
 8014dcc:	fffff93e 	.word	0xfffff93e
 8014dd0:	ffffde07 	.word	0xffffde07
 8014dd4:	ffffeaab 	.word	0xffffeaab
 8014dd8:	ffffd817 	.word	0xffffd817
 8014ddc:	ffffd4b2 	.word	0xffffd4b2
 8014de0:	ffffb6d6 	.word	0xffffb6d6
 8014de4:	ffffcac1 	.word	0xffffcac1
 8014de8:	ffffdbfa 	.word	0xffffdbfa

08014dec <jpeg_fdct_16x8>:
 * 16-point FDCT in pass 1 (rows), 8-point in pass 2 (columns).
 */

GLOBAL(void)
jpeg_fdct_16x8 (DCTELEM * data, JSAMPARRAY sample_data, JDIMENSION start_col)
{
 8014dec:	b480      	push	{r7}
 8014dee:	b099      	sub	sp, #100	@ 0x64
 8014df0:	af00      	add	r7, sp, #0
 8014df2:	60f8      	str	r0, [r7, #12]
 8014df4:	60b9      	str	r1, [r7, #8]
 8014df6:	607a      	str	r2, [r7, #4]
  /* Pass 1: process rows. */
  /* Note results are scaled up by sqrt(8) compared to a true DCT; */
  /* furthermore, we scale the results by 2**PASS1_BITS. */
  /* 16-point FDCT kernel, cK represents sqrt(2) * cos(K*pi/32). */

  dataptr = data;
 8014df8:	68fb      	ldr	r3, [r7, #12]
 8014dfa:	65fb      	str	r3, [r7, #92]	@ 0x5c
  ctr = 0;
 8014dfc:	2300      	movs	r3, #0
 8014dfe:	65bb      	str	r3, [r7, #88]	@ 0x58
  for (ctr = 0; ctr < DCTSIZE; ctr++) {
 8014e00:	2300      	movs	r3, #0
 8014e02:	65bb      	str	r3, [r7, #88]	@ 0x58
 8014e04:	e1ce      	b.n	80151a4 <jpeg_fdct_16x8+0x3b8>
    elemptr = sample_data[ctr] + start_col;
 8014e06:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8014e08:	009b      	lsls	r3, r3, #2
 8014e0a:	68ba      	ldr	r2, [r7, #8]
 8014e0c:	4413      	add	r3, r2
 8014e0e:	681a      	ldr	r2, [r3, #0]
 8014e10:	687b      	ldr	r3, [r7, #4]
 8014e12:	4413      	add	r3, r2
 8014e14:	633b      	str	r3, [r7, #48]	@ 0x30

    /* Even part */

    tmp0 = GETJSAMPLE(elemptr[0]) + GETJSAMPLE(elemptr[15]);
 8014e16:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8014e18:	781b      	ldrb	r3, [r3, #0]
 8014e1a:	461a      	mov	r2, r3
 8014e1c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8014e1e:	330f      	adds	r3, #15
 8014e20:	781b      	ldrb	r3, [r3, #0]
 8014e22:	4413      	add	r3, r2
 8014e24:	657b      	str	r3, [r7, #84]	@ 0x54
    tmp1 = GETJSAMPLE(elemptr[1]) + GETJSAMPLE(elemptr[14]);
 8014e26:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8014e28:	3301      	adds	r3, #1
 8014e2a:	781b      	ldrb	r3, [r3, #0]
 8014e2c:	461a      	mov	r2, r3
 8014e2e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8014e30:	330e      	adds	r3, #14
 8014e32:	781b      	ldrb	r3, [r3, #0]
 8014e34:	4413      	add	r3, r2
 8014e36:	653b      	str	r3, [r7, #80]	@ 0x50
    tmp2 = GETJSAMPLE(elemptr[2]) + GETJSAMPLE(elemptr[13]);
 8014e38:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8014e3a:	3302      	adds	r3, #2
 8014e3c:	781b      	ldrb	r3, [r3, #0]
 8014e3e:	461a      	mov	r2, r3
 8014e40:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8014e42:	330d      	adds	r3, #13
 8014e44:	781b      	ldrb	r3, [r3, #0]
 8014e46:	4413      	add	r3, r2
 8014e48:	64fb      	str	r3, [r7, #76]	@ 0x4c
    tmp3 = GETJSAMPLE(elemptr[3]) + GETJSAMPLE(elemptr[12]);
 8014e4a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8014e4c:	3303      	adds	r3, #3
 8014e4e:	781b      	ldrb	r3, [r3, #0]
 8014e50:	461a      	mov	r2, r3
 8014e52:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8014e54:	330c      	adds	r3, #12
 8014e56:	781b      	ldrb	r3, [r3, #0]
 8014e58:	4413      	add	r3, r2
 8014e5a:	64bb      	str	r3, [r7, #72]	@ 0x48
    tmp4 = GETJSAMPLE(elemptr[4]) + GETJSAMPLE(elemptr[11]);
 8014e5c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8014e5e:	3304      	adds	r3, #4
 8014e60:	781b      	ldrb	r3, [r3, #0]
 8014e62:	461a      	mov	r2, r3
 8014e64:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8014e66:	330b      	adds	r3, #11
 8014e68:	781b      	ldrb	r3, [r3, #0]
 8014e6a:	4413      	add	r3, r2
 8014e6c:	62fb      	str	r3, [r7, #44]	@ 0x2c
    tmp5 = GETJSAMPLE(elemptr[5]) + GETJSAMPLE(elemptr[10]);
 8014e6e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8014e70:	3305      	adds	r3, #5
 8014e72:	781b      	ldrb	r3, [r3, #0]
 8014e74:	461a      	mov	r2, r3
 8014e76:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8014e78:	330a      	adds	r3, #10
 8014e7a:	781b      	ldrb	r3, [r3, #0]
 8014e7c:	4413      	add	r3, r2
 8014e7e:	62bb      	str	r3, [r7, #40]	@ 0x28
    tmp6 = GETJSAMPLE(elemptr[6]) + GETJSAMPLE(elemptr[9]);
 8014e80:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8014e82:	3306      	adds	r3, #6
 8014e84:	781b      	ldrb	r3, [r3, #0]
 8014e86:	461a      	mov	r2, r3
 8014e88:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8014e8a:	3309      	adds	r3, #9
 8014e8c:	781b      	ldrb	r3, [r3, #0]
 8014e8e:	4413      	add	r3, r2
 8014e90:	627b      	str	r3, [r7, #36]	@ 0x24
    tmp7 = GETJSAMPLE(elemptr[7]) + GETJSAMPLE(elemptr[8]);
 8014e92:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8014e94:	3307      	adds	r3, #7
 8014e96:	781b      	ldrb	r3, [r3, #0]
 8014e98:	461a      	mov	r2, r3
 8014e9a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8014e9c:	3308      	adds	r3, #8
 8014e9e:	781b      	ldrb	r3, [r3, #0]
 8014ea0:	4413      	add	r3, r2
 8014ea2:	623b      	str	r3, [r7, #32]

    tmp10 = tmp0 + tmp7;
 8014ea4:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 8014ea6:	6a3b      	ldr	r3, [r7, #32]
 8014ea8:	4413      	add	r3, r2
 8014eaa:	647b      	str	r3, [r7, #68]	@ 0x44
    tmp14 = tmp0 - tmp7;
 8014eac:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 8014eae:	6a3b      	ldr	r3, [r7, #32]
 8014eb0:	1ad3      	subs	r3, r2, r3
 8014eb2:	61fb      	str	r3, [r7, #28]
    tmp11 = tmp1 + tmp6;
 8014eb4:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 8014eb6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8014eb8:	4413      	add	r3, r2
 8014eba:	63fb      	str	r3, [r7, #60]	@ 0x3c
    tmp15 = tmp1 - tmp6;
 8014ebc:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 8014ebe:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8014ec0:	1ad3      	subs	r3, r2, r3
 8014ec2:	61bb      	str	r3, [r7, #24]
    tmp12 = tmp2 + tmp5;
 8014ec4:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8014ec6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8014ec8:	4413      	add	r3, r2
 8014eca:	643b      	str	r3, [r7, #64]	@ 0x40
    tmp16 = tmp2 - tmp5;
 8014ecc:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8014ece:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8014ed0:	1ad3      	subs	r3, r2, r3
 8014ed2:	617b      	str	r3, [r7, #20]
    tmp13 = tmp3 + tmp4;
 8014ed4:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8014ed6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8014ed8:	4413      	add	r3, r2
 8014eda:	63bb      	str	r3, [r7, #56]	@ 0x38
    tmp17 = tmp3 - tmp4;
 8014edc:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8014ede:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8014ee0:	1ad3      	subs	r3, r2, r3
 8014ee2:	613b      	str	r3, [r7, #16]

    tmp0 = GETJSAMPLE(elemptr[0]) - GETJSAMPLE(elemptr[15]);
 8014ee4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8014ee6:	781b      	ldrb	r3, [r3, #0]
 8014ee8:	461a      	mov	r2, r3
 8014eea:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8014eec:	330f      	adds	r3, #15
 8014eee:	781b      	ldrb	r3, [r3, #0]
 8014ef0:	1ad3      	subs	r3, r2, r3
 8014ef2:	657b      	str	r3, [r7, #84]	@ 0x54
    tmp1 = GETJSAMPLE(elemptr[1]) - GETJSAMPLE(elemptr[14]);
 8014ef4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8014ef6:	3301      	adds	r3, #1
 8014ef8:	781b      	ldrb	r3, [r3, #0]
 8014efa:	461a      	mov	r2, r3
 8014efc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8014efe:	330e      	adds	r3, #14
 8014f00:	781b      	ldrb	r3, [r3, #0]
 8014f02:	1ad3      	subs	r3, r2, r3
 8014f04:	653b      	str	r3, [r7, #80]	@ 0x50
    tmp2 = GETJSAMPLE(elemptr[2]) - GETJSAMPLE(elemptr[13]);
 8014f06:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8014f08:	3302      	adds	r3, #2
 8014f0a:	781b      	ldrb	r3, [r3, #0]
 8014f0c:	461a      	mov	r2, r3
 8014f0e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8014f10:	330d      	adds	r3, #13
 8014f12:	781b      	ldrb	r3, [r3, #0]
 8014f14:	1ad3      	subs	r3, r2, r3
 8014f16:	64fb      	str	r3, [r7, #76]	@ 0x4c
    tmp3 = GETJSAMPLE(elemptr[3]) - GETJSAMPLE(elemptr[12]);
 8014f18:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8014f1a:	3303      	adds	r3, #3
 8014f1c:	781b      	ldrb	r3, [r3, #0]
 8014f1e:	461a      	mov	r2, r3
 8014f20:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8014f22:	330c      	adds	r3, #12
 8014f24:	781b      	ldrb	r3, [r3, #0]
 8014f26:	1ad3      	subs	r3, r2, r3
 8014f28:	64bb      	str	r3, [r7, #72]	@ 0x48
    tmp4 = GETJSAMPLE(elemptr[4]) - GETJSAMPLE(elemptr[11]);
 8014f2a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8014f2c:	3304      	adds	r3, #4
 8014f2e:	781b      	ldrb	r3, [r3, #0]
 8014f30:	461a      	mov	r2, r3
 8014f32:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8014f34:	330b      	adds	r3, #11
 8014f36:	781b      	ldrb	r3, [r3, #0]
 8014f38:	1ad3      	subs	r3, r2, r3
 8014f3a:	62fb      	str	r3, [r7, #44]	@ 0x2c
    tmp5 = GETJSAMPLE(elemptr[5]) - GETJSAMPLE(elemptr[10]);
 8014f3c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8014f3e:	3305      	adds	r3, #5
 8014f40:	781b      	ldrb	r3, [r3, #0]
 8014f42:	461a      	mov	r2, r3
 8014f44:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8014f46:	330a      	adds	r3, #10
 8014f48:	781b      	ldrb	r3, [r3, #0]
 8014f4a:	1ad3      	subs	r3, r2, r3
 8014f4c:	62bb      	str	r3, [r7, #40]	@ 0x28
    tmp6 = GETJSAMPLE(elemptr[6]) - GETJSAMPLE(elemptr[9]);
 8014f4e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8014f50:	3306      	adds	r3, #6
 8014f52:	781b      	ldrb	r3, [r3, #0]
 8014f54:	461a      	mov	r2, r3
 8014f56:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8014f58:	3309      	adds	r3, #9
 8014f5a:	781b      	ldrb	r3, [r3, #0]
 8014f5c:	1ad3      	subs	r3, r2, r3
 8014f5e:	627b      	str	r3, [r7, #36]	@ 0x24
    tmp7 = GETJSAMPLE(elemptr[7]) - GETJSAMPLE(elemptr[8]);
 8014f60:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8014f62:	3307      	adds	r3, #7
 8014f64:	781b      	ldrb	r3, [r3, #0]
 8014f66:	461a      	mov	r2, r3
 8014f68:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8014f6a:	3308      	adds	r3, #8
 8014f6c:	781b      	ldrb	r3, [r3, #0]
 8014f6e:	1ad3      	subs	r3, r2, r3
 8014f70:	623b      	str	r3, [r7, #32]

    /* Apply unsigned->signed conversion */
    dataptr[0] = (DCTELEM)
      ((tmp10 + tmp11 + tmp12 + tmp13 - 16 * CENTERJSAMPLE) << PASS1_BITS);
 8014f72:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8014f74:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8014f76:	441a      	add	r2, r3
 8014f78:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8014f7a:	441a      	add	r2, r3
 8014f7c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8014f7e:	4413      	add	r3, r2
 8014f80:	f5a3 6300 	sub.w	r3, r3, #2048	@ 0x800
 8014f84:	009a      	lsls	r2, r3, #2
    dataptr[0] = (DCTELEM)
 8014f86:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8014f88:	601a      	str	r2, [r3, #0]
    dataptr[4] = (DCTELEM)
      DESCALE(MULTIPLY(tmp10 - tmp13, FIX(1.306562965)) + /* c4[16] = c2[8] */
 8014f8a:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8014f8c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8014f8e:	1ad3      	subs	r3, r2, r3
 8014f90:	f642 12cf 	movw	r2, #10703	@ 0x29cf
 8014f94:	fb03 f202 	mul.w	r2, r3, r2
 8014f98:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8014f9a:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8014f9c:	1acb      	subs	r3, r1, r3
 8014f9e:	f241 1151 	movw	r1, #4433	@ 0x1151
 8014fa2:	fb01 f303 	mul.w	r3, r1, r3
 8014fa6:	4413      	add	r3, r2
 8014fa8:	f503 6280 	add.w	r2, r3, #1024	@ 0x400
    dataptr[4] = (DCTELEM)
 8014fac:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8014fae:	3310      	adds	r3, #16
      DESCALE(MULTIPLY(tmp10 - tmp13, FIX(1.306562965)) + /* c4[16] = c2[8] */
 8014fb0:	12d2      	asrs	r2, r2, #11
    dataptr[4] = (DCTELEM)
 8014fb2:	601a      	str	r2, [r3, #0]
	      MULTIPLY(tmp11 - tmp12, FIX_0_541196100),   /* c12[16] = c6[8] */
	      CONST_BITS-PASS1_BITS);

    tmp10 = MULTIPLY(tmp17 - tmp15, FIX(0.275899379)) +   /* c14[16] = c7[8] */
 8014fb4:	693a      	ldr	r2, [r7, #16]
 8014fb6:	69bb      	ldr	r3, [r7, #24]
 8014fb8:	1ad3      	subs	r3, r2, r3
 8014fba:	f640 02d4 	movw	r2, #2260	@ 0x8d4
 8014fbe:	fb03 f202 	mul.w	r2, r3, r2
	    MULTIPLY(tmp14 - tmp16, FIX(1.387039845));    /* c2[16] = c1[8] */
 8014fc2:	69f9      	ldr	r1, [r7, #28]
 8014fc4:	697b      	ldr	r3, [r7, #20]
 8014fc6:	1acb      	subs	r3, r1, r3
 8014fc8:	f642 4163 	movw	r1, #11363	@ 0x2c63
 8014fcc:	fb01 f303 	mul.w	r3, r1, r3
    tmp10 = MULTIPLY(tmp17 - tmp15, FIX(0.275899379)) +   /* c14[16] = c7[8] */
 8014fd0:	4413      	add	r3, r2
 8014fd2:	647b      	str	r3, [r7, #68]	@ 0x44

    dataptr[2] = (DCTELEM)
      DESCALE(tmp10 + MULTIPLY(tmp15, FIX(1.451774982))   /* c6+c14 */
 8014fd4:	69bb      	ldr	r3, [r7, #24]
 8014fd6:	f642 6275 	movw	r2, #11893	@ 0x2e75
 8014fda:	fb03 f202 	mul.w	r2, r3, r2
 8014fde:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8014fe0:	441a      	add	r2, r3
 8014fe2:	697b      	ldr	r3, [r7, #20]
 8014fe4:	f244 5187 	movw	r1, #17799	@ 0x4587
 8014fe8:	fb01 f303 	mul.w	r3, r1, r3
 8014fec:	4413      	add	r3, r2
 8014fee:	f503 6280 	add.w	r2, r3, #1024	@ 0x400
    dataptr[2] = (DCTELEM)
 8014ff2:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8014ff4:	3308      	adds	r3, #8
      DESCALE(tmp10 + MULTIPLY(tmp15, FIX(1.451774982))   /* c6+c14 */
 8014ff6:	12d2      	asrs	r2, r2, #11
    dataptr[2] = (DCTELEM)
 8014ff8:	601a      	str	r2, [r3, #0]
	      + MULTIPLY(tmp16, FIX(2.172734804)),        /* c2+c10 */
	      CONST_BITS-PASS1_BITS);
    dataptr[6] = (DCTELEM)
      DESCALE(tmp10 - MULTIPLY(tmp14, FIX(0.211164243))   /* c2-c6 */
 8014ffa:	69fb      	ldr	r3, [r7, #28]
 8014ffc:	4a6e      	ldr	r2, [pc, #440]	@ (80151b8 <jpeg_fdct_16x8+0x3cc>)
 8014ffe:	fb03 f202 	mul.w	r2, r3, r2
 8015002:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8015004:	441a      	add	r2, r3
 8015006:	693b      	ldr	r3, [r7, #16]
 8015008:	496c      	ldr	r1, [pc, #432]	@ (80151bc <jpeg_fdct_16x8+0x3d0>)
 801500a:	fb01 f303 	mul.w	r3, r1, r3
 801500e:	4413      	add	r3, r2
 8015010:	f503 6280 	add.w	r2, r3, #1024	@ 0x400
    dataptr[6] = (DCTELEM)
 8015014:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8015016:	3318      	adds	r3, #24
      DESCALE(tmp10 - MULTIPLY(tmp14, FIX(0.211164243))   /* c2-c6 */
 8015018:	12d2      	asrs	r2, r2, #11
    dataptr[6] = (DCTELEM)
 801501a:	601a      	str	r2, [r3, #0]
	      - MULTIPLY(tmp17, FIX(1.061594338)),        /* c10+c14 */
	      CONST_BITS-PASS1_BITS);

    /* Odd part */

    tmp11 = MULTIPLY(tmp0 + tmp1, FIX(1.353318001)) +         /* c3 */
 801501c:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 801501e:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8015020:	4413      	add	r3, r2
 8015022:	f642 324e 	movw	r2, #11086	@ 0x2b4e
 8015026:	fb03 f202 	mul.w	r2, r3, r2
	    MULTIPLY(tmp6 - tmp7, FIX(0.410524528));          /* c13 */
 801502a:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 801502c:	6a3b      	ldr	r3, [r7, #32]
 801502e:	1acb      	subs	r3, r1, r3
 8015030:	f640 5123 	movw	r1, #3363	@ 0xd23
 8015034:	fb01 f303 	mul.w	r3, r1, r3
    tmp11 = MULTIPLY(tmp0 + tmp1, FIX(1.353318001)) +         /* c3 */
 8015038:	4413      	add	r3, r2
 801503a:	63fb      	str	r3, [r7, #60]	@ 0x3c
    tmp12 = MULTIPLY(tmp0 + tmp2, FIX(1.247225013)) +         /* c5 */
 801503c:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 801503e:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8015040:	4413      	add	r3, r2
 8015042:	f242 72e9 	movw	r2, #10217	@ 0x27e9
 8015046:	fb03 f202 	mul.w	r2, r3, r2
	    MULTIPLY(tmp5 + tmp7, FIX(0.666655658));          /* c11 */
 801504a:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 801504c:	6a3b      	ldr	r3, [r7, #32]
 801504e:	440b      	add	r3, r1
 8015050:	f241 5155 	movw	r1, #5461	@ 0x1555
 8015054:	fb01 f303 	mul.w	r3, r1, r3
    tmp12 = MULTIPLY(tmp0 + tmp2, FIX(1.247225013)) +         /* c5 */
 8015058:	4413      	add	r3, r2
 801505a:	643b      	str	r3, [r7, #64]	@ 0x40
    tmp13 = MULTIPLY(tmp0 + tmp3, FIX(1.093201867)) +         /* c7 */
 801505c:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 801505e:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8015060:	4413      	add	r3, r2
 8015062:	f242 22fc 	movw	r2, #8956	@ 0x22fc
 8015066:	fb03 f202 	mul.w	r2, r3, r2
	    MULTIPLY(tmp4 - tmp7, FIX(0.897167586));          /* c9 */
 801506a:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 801506c:	6a3b      	ldr	r3, [r7, #32]
 801506e:	1acb      	subs	r3, r1, r3
 8015070:	f641 41b6 	movw	r1, #7350	@ 0x1cb6
 8015074:	fb01 f303 	mul.w	r3, r1, r3
    tmp13 = MULTIPLY(tmp0 + tmp3, FIX(1.093201867)) +         /* c7 */
 8015078:	4413      	add	r3, r2
 801507a:	63bb      	str	r3, [r7, #56]	@ 0x38
    tmp14 = MULTIPLY(tmp1 + tmp2, FIX(0.138617169)) +         /* c15 */
 801507c:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 801507e:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8015080:	4413      	add	r3, r2
 8015082:	f44f 628e 	mov.w	r2, #1136	@ 0x470
 8015086:	fb03 f202 	mul.w	r2, r3, r2
	    MULTIPLY(tmp6 - tmp5, FIX(1.407403738));          /* c1 */
 801508a:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 801508c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801508e:	1acb      	subs	r3, r1, r3
 8015090:	f642 5109 	movw	r1, #11529	@ 0x2d09
 8015094:	fb01 f303 	mul.w	r3, r1, r3
    tmp14 = MULTIPLY(tmp1 + tmp2, FIX(0.138617169)) +         /* c15 */
 8015098:	4413      	add	r3, r2
 801509a:	61fb      	str	r3, [r7, #28]
    tmp15 = MULTIPLY(tmp1 + tmp3, - FIX(0.666655658)) +       /* -c11 */
 801509c:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 801509e:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80150a0:	4413      	add	r3, r2
 80150a2:	4a47      	ldr	r2, [pc, #284]	@ (80151c0 <jpeg_fdct_16x8+0x3d4>)
 80150a4:	fb03 f202 	mul.w	r2, r3, r2
	    MULTIPLY(tmp4 + tmp6, - FIX(1.247225013));        /* -c5 */
 80150a8:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 80150aa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80150ac:	440b      	add	r3, r1
 80150ae:	4945      	ldr	r1, [pc, #276]	@ (80151c4 <jpeg_fdct_16x8+0x3d8>)
 80150b0:	fb01 f303 	mul.w	r3, r1, r3
    tmp15 = MULTIPLY(tmp1 + tmp3, - FIX(0.666655658)) +       /* -c11 */
 80150b4:	4413      	add	r3, r2
 80150b6:	61bb      	str	r3, [r7, #24]
    tmp16 = MULTIPLY(tmp2 + tmp3, - FIX(1.353318001)) +       /* -c3 */
 80150b8:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 80150ba:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80150bc:	4413      	add	r3, r2
 80150be:	4a42      	ldr	r2, [pc, #264]	@ (80151c8 <jpeg_fdct_16x8+0x3dc>)
 80150c0:	fb03 f202 	mul.w	r2, r3, r2
	    MULTIPLY(tmp5 - tmp4, FIX(0.410524528));          /* c13 */
 80150c4:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 80150c6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80150c8:	1acb      	subs	r3, r1, r3
 80150ca:	f640 5123 	movw	r1, #3363	@ 0xd23
 80150ce:	fb01 f303 	mul.w	r3, r1, r3
    tmp16 = MULTIPLY(tmp2 + tmp3, - FIX(1.353318001)) +       /* -c3 */
 80150d2:	4413      	add	r3, r2
 80150d4:	617b      	str	r3, [r7, #20]
    tmp10 = tmp11 + tmp12 + tmp13 -
 80150d6:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 80150d8:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80150da:	441a      	add	r2, r3
 80150dc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80150de:	441a      	add	r2, r3
	    MULTIPLY(tmp0, FIX(2.286341144)) +                /* c7+c5+c3-c1 */
 80150e0:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80150e2:	493a      	ldr	r1, [pc, #232]	@ (80151cc <jpeg_fdct_16x8+0x3e0>)
 80150e4:	fb01 f303 	mul.w	r3, r1, r3
    tmp10 = tmp11 + tmp12 + tmp13 -
 80150e8:	441a      	add	r2, r3
	    MULTIPLY(tmp7, FIX(0.779653625));                 /* c15+c13-c11+c9 */
 80150ea:	6a3b      	ldr	r3, [r7, #32]
 80150ec:	f641 01f3 	movw	r1, #6387	@ 0x18f3
 80150f0:	fb01 f303 	mul.w	r3, r1, r3
    tmp10 = tmp11 + tmp12 + tmp13 -
 80150f4:	4413      	add	r3, r2
 80150f6:	647b      	str	r3, [r7, #68]	@ 0x44
    tmp11 += tmp14 + tmp15 + MULTIPLY(tmp1, FIX(0.071888074)) /* c9-c3-c15+c11 */
 80150f8:	69fa      	ldr	r2, [r7, #28]
 80150fa:	69bb      	ldr	r3, [r7, #24]
 80150fc:	441a      	add	r2, r3
 80150fe:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8015100:	f240 214d 	movw	r1, #589	@ 0x24d
 8015104:	fb01 f303 	mul.w	r3, r1, r3
 8015108:	441a      	add	r2, r3
	     - MULTIPLY(tmp6, FIX(1.663905119));              /* c7+c13+c1-c5 */
 801510a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801510c:	4930      	ldr	r1, [pc, #192]	@ (80151d0 <jpeg_fdct_16x8+0x3e4>)
 801510e:	fb01 f303 	mul.w	r3, r1, r3
 8015112:	4413      	add	r3, r2
    tmp11 += tmp14 + tmp15 + MULTIPLY(tmp1, FIX(0.071888074)) /* c9-c3-c15+c11 */
 8015114:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 8015116:	4413      	add	r3, r2
 8015118:	63fb      	str	r3, [r7, #60]	@ 0x3c
    tmp12 += tmp14 + tmp16 - MULTIPLY(tmp2, FIX(1.125726048)) /* c7+c5+c15-c3 */
 801511a:	69fa      	ldr	r2, [r7, #28]
 801511c:	697b      	ldr	r3, [r7, #20]
 801511e:	441a      	add	r2, r3
 8015120:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8015122:	492c      	ldr	r1, [pc, #176]	@ (80151d4 <jpeg_fdct_16x8+0x3e8>)
 8015124:	fb01 f303 	mul.w	r3, r1, r3
 8015128:	441a      	add	r2, r3
	     + MULTIPLY(tmp5, FIX(1.227391138));              /* c9-c11+c1-c13 */
 801512a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801512c:	f242 7147 	movw	r1, #10055	@ 0x2747
 8015130:	fb01 f303 	mul.w	r3, r1, r3
 8015134:	4413      	add	r3, r2
    tmp12 += tmp14 + tmp16 - MULTIPLY(tmp2, FIX(1.125726048)) /* c7+c5+c15-c3 */
 8015136:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8015138:	4413      	add	r3, r2
 801513a:	643b      	str	r3, [r7, #64]	@ 0x40
    tmp13 += tmp15 + tmp16 + MULTIPLY(tmp3, FIX(1.065388962)) /* c15+c3+c11-c7 */
 801513c:	69ba      	ldr	r2, [r7, #24]
 801513e:	697b      	ldr	r3, [r7, #20]
 8015140:	441a      	add	r2, r3
 8015142:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8015144:	f242 2118 	movw	r1, #8728	@ 0x2218
 8015148:	fb01 f303 	mul.w	r3, r1, r3
 801514c:	441a      	add	r2, r3
	     + MULTIPLY(tmp4, FIX(2.167985692));              /* c1+c13+c5-c9 */
 801514e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8015150:	f244 5160 	movw	r1, #17760	@ 0x4560
 8015154:	fb01 f303 	mul.w	r3, r1, r3
 8015158:	4413      	add	r3, r2
    tmp13 += tmp15 + tmp16 + MULTIPLY(tmp3, FIX(1.065388962)) /* c15+c3+c11-c7 */
 801515a:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 801515c:	4413      	add	r3, r2
 801515e:	63bb      	str	r3, [r7, #56]	@ 0x38

    dataptr[1] = (DCTELEM) DESCALE(tmp10, CONST_BITS-PASS1_BITS);
 8015160:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8015162:	f503 6280 	add.w	r2, r3, #1024	@ 0x400
 8015166:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8015168:	3304      	adds	r3, #4
 801516a:	12d2      	asrs	r2, r2, #11
 801516c:	601a      	str	r2, [r3, #0]
    dataptr[3] = (DCTELEM) DESCALE(tmp11, CONST_BITS-PASS1_BITS);
 801516e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8015170:	f503 6280 	add.w	r2, r3, #1024	@ 0x400
 8015174:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8015176:	330c      	adds	r3, #12
 8015178:	12d2      	asrs	r2, r2, #11
 801517a:	601a      	str	r2, [r3, #0]
    dataptr[5] = (DCTELEM) DESCALE(tmp12, CONST_BITS-PASS1_BITS);
 801517c:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 801517e:	f503 6280 	add.w	r2, r3, #1024	@ 0x400
 8015182:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8015184:	3314      	adds	r3, #20
 8015186:	12d2      	asrs	r2, r2, #11
 8015188:	601a      	str	r2, [r3, #0]
    dataptr[7] = (DCTELEM) DESCALE(tmp13, CONST_BITS-PASS1_BITS);
 801518a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801518c:	f503 6280 	add.w	r2, r3, #1024	@ 0x400
 8015190:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8015192:	331c      	adds	r3, #28
 8015194:	12d2      	asrs	r2, r2, #11
 8015196:	601a      	str	r2, [r3, #0]

    dataptr += DCTSIZE;		/* advance pointer to next row */
 8015198:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 801519a:	3320      	adds	r3, #32
 801519c:	65fb      	str	r3, [r7, #92]	@ 0x5c
  for (ctr = 0; ctr < DCTSIZE; ctr++) {
 801519e:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 80151a0:	3301      	adds	r3, #1
 80151a2:	65bb      	str	r3, [r7, #88]	@ 0x58
 80151a4:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 80151a6:	2b07      	cmp	r3, #7
 80151a8:	f77f ae2d 	ble.w	8014e06 <jpeg_fdct_16x8+0x1a>
   * We remove the PASS1_BITS scaling, but leave the results scaled up
   * by an overall factor of 8.
   * We must also scale the output by 8/16 = 1/2.
   */

  dataptr = data;
 80151ac:	68fb      	ldr	r3, [r7, #12]
 80151ae:	65fb      	str	r3, [r7, #92]	@ 0x5c
  for (ctr = DCTSIZE-1; ctr >= 0; ctr--) {
 80151b0:	2307      	movs	r3, #7
 80151b2:	65bb      	str	r3, [r7, #88]	@ 0x58
 80151b4:	e10c      	b.n	80153d0 <jpeg_fdct_16x8+0x5e4>
 80151b6:	bf00      	nop
 80151b8:	fffff93e 	.word	0xfffff93e
 80151bc:	ffffde07 	.word	0xffffde07
 80151c0:	ffffeaab 	.word	0xffffeaab
 80151c4:	ffffd817 	.word	0xffffd817
 80151c8:	ffffd4b2 	.word	0xffffd4b2
 80151cc:	ffffb6d6 	.word	0xffffb6d6
 80151d0:	ffffcac1 	.word	0xffffcac1
 80151d4:	ffffdbfa 	.word	0xffffdbfa
    /* Even part per LL&M figure 1 --- note that published figure is faulty;
     * rotator "sqrt(2)*c1" should be "sqrt(2)*c6".
     */

    tmp0 = dataptr[DCTSIZE*0] + dataptr[DCTSIZE*7];
 80151d8:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80151da:	681a      	ldr	r2, [r3, #0]
 80151dc:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80151de:	33e0      	adds	r3, #224	@ 0xe0
 80151e0:	681b      	ldr	r3, [r3, #0]
 80151e2:	4413      	add	r3, r2
 80151e4:	657b      	str	r3, [r7, #84]	@ 0x54
    tmp1 = dataptr[DCTSIZE*1] + dataptr[DCTSIZE*6];
 80151e6:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80151e8:	3320      	adds	r3, #32
 80151ea:	681a      	ldr	r2, [r3, #0]
 80151ec:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80151ee:	33c0      	adds	r3, #192	@ 0xc0
 80151f0:	681b      	ldr	r3, [r3, #0]
 80151f2:	4413      	add	r3, r2
 80151f4:	653b      	str	r3, [r7, #80]	@ 0x50
    tmp2 = dataptr[DCTSIZE*2] + dataptr[DCTSIZE*5];
 80151f6:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80151f8:	3340      	adds	r3, #64	@ 0x40
 80151fa:	681a      	ldr	r2, [r3, #0]
 80151fc:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80151fe:	33a0      	adds	r3, #160	@ 0xa0
 8015200:	681b      	ldr	r3, [r3, #0]
 8015202:	4413      	add	r3, r2
 8015204:	64fb      	str	r3, [r7, #76]	@ 0x4c
    tmp3 = dataptr[DCTSIZE*3] + dataptr[DCTSIZE*4];
 8015206:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8015208:	3360      	adds	r3, #96	@ 0x60
 801520a:	681a      	ldr	r2, [r3, #0]
 801520c:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 801520e:	3380      	adds	r3, #128	@ 0x80
 8015210:	681b      	ldr	r3, [r3, #0]
 8015212:	4413      	add	r3, r2
 8015214:	64bb      	str	r3, [r7, #72]	@ 0x48

    tmp10 = tmp0 + tmp3;
 8015216:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 8015218:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 801521a:	4413      	add	r3, r2
 801521c:	647b      	str	r3, [r7, #68]	@ 0x44
    tmp12 = tmp0 - tmp3;
 801521e:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 8015220:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8015222:	1ad3      	subs	r3, r2, r3
 8015224:	643b      	str	r3, [r7, #64]	@ 0x40
    tmp11 = tmp1 + tmp2;
 8015226:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 8015228:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 801522a:	4413      	add	r3, r2
 801522c:	63fb      	str	r3, [r7, #60]	@ 0x3c
    tmp13 = tmp1 - tmp2;
 801522e:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 8015230:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8015232:	1ad3      	subs	r3, r2, r3
 8015234:	63bb      	str	r3, [r7, #56]	@ 0x38

    tmp0 = dataptr[DCTSIZE*0] - dataptr[DCTSIZE*7];
 8015236:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8015238:	681a      	ldr	r2, [r3, #0]
 801523a:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 801523c:	33e0      	adds	r3, #224	@ 0xe0
 801523e:	681b      	ldr	r3, [r3, #0]
 8015240:	1ad3      	subs	r3, r2, r3
 8015242:	657b      	str	r3, [r7, #84]	@ 0x54
    tmp1 = dataptr[DCTSIZE*1] - dataptr[DCTSIZE*6];
 8015244:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8015246:	3320      	adds	r3, #32
 8015248:	681a      	ldr	r2, [r3, #0]
 801524a:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 801524c:	33c0      	adds	r3, #192	@ 0xc0
 801524e:	681b      	ldr	r3, [r3, #0]
 8015250:	1ad3      	subs	r3, r2, r3
 8015252:	653b      	str	r3, [r7, #80]	@ 0x50
    tmp2 = dataptr[DCTSIZE*2] - dataptr[DCTSIZE*5];
 8015254:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8015256:	3340      	adds	r3, #64	@ 0x40
 8015258:	681a      	ldr	r2, [r3, #0]
 801525a:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 801525c:	33a0      	adds	r3, #160	@ 0xa0
 801525e:	681b      	ldr	r3, [r3, #0]
 8015260:	1ad3      	subs	r3, r2, r3
 8015262:	64fb      	str	r3, [r7, #76]	@ 0x4c
    tmp3 = dataptr[DCTSIZE*3] - dataptr[DCTSIZE*4];
 8015264:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8015266:	3360      	adds	r3, #96	@ 0x60
 8015268:	681a      	ldr	r2, [r3, #0]
 801526a:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 801526c:	3380      	adds	r3, #128	@ 0x80
 801526e:	681b      	ldr	r3, [r3, #0]
 8015270:	1ad3      	subs	r3, r2, r3
 8015272:	64bb      	str	r3, [r7, #72]	@ 0x48

    dataptr[DCTSIZE*0] = (DCTELEM) DESCALE(tmp10 + tmp11, PASS1_BITS+1);
 8015274:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8015276:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8015278:	4413      	add	r3, r2
 801527a:	3304      	adds	r3, #4
 801527c:	10da      	asrs	r2, r3, #3
 801527e:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8015280:	601a      	str	r2, [r3, #0]
    dataptr[DCTSIZE*4] = (DCTELEM) DESCALE(tmp10 - tmp11, PASS1_BITS+1);
 8015282:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8015284:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8015286:	1ad3      	subs	r3, r2, r3
 8015288:	1d1a      	adds	r2, r3, #4
 801528a:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 801528c:	3380      	adds	r3, #128	@ 0x80
 801528e:	10d2      	asrs	r2, r2, #3
 8015290:	601a      	str	r2, [r3, #0]

    z1 = MULTIPLY(tmp12 + tmp13, FIX_0_541196100);
 8015292:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8015294:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8015296:	4413      	add	r3, r2
 8015298:	f241 1251 	movw	r2, #4433	@ 0x1151
 801529c:	fb02 f303 	mul.w	r3, r2, r3
 80152a0:	637b      	str	r3, [r7, #52]	@ 0x34
    dataptr[DCTSIZE*2] = (DCTELEM) DESCALE(z1 + MULTIPLY(tmp12, FIX_0_765366865),
 80152a2:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80152a4:	f641 027e 	movw	r2, #6270	@ 0x187e
 80152a8:	fb03 f202 	mul.w	r2, r3, r2
 80152ac:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80152ae:	4413      	add	r3, r2
 80152b0:	f503 4200 	add.w	r2, r3, #32768	@ 0x8000
 80152b4:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80152b6:	3340      	adds	r3, #64	@ 0x40
 80152b8:	1412      	asrs	r2, r2, #16
 80152ba:	601a      	str	r2, [r3, #0]
					   CONST_BITS+PASS1_BITS+1);
    dataptr[DCTSIZE*6] = (DCTELEM) DESCALE(z1 - MULTIPLY(tmp13, FIX_1_847759065),
 80152bc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80152be:	4a4a      	ldr	r2, [pc, #296]	@ (80153e8 <jpeg_fdct_16x8+0x5fc>)
 80152c0:	fb03 f202 	mul.w	r2, r3, r2
 80152c4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80152c6:	4413      	add	r3, r2
 80152c8:	f503 4200 	add.w	r2, r3, #32768	@ 0x8000
 80152cc:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80152ce:	33c0      	adds	r3, #192	@ 0xc0
 80152d0:	1412      	asrs	r2, r2, #16
 80152d2:	601a      	str	r2, [r3, #0]
    /* Odd part per figure 8 --- note paper omits factor of sqrt(2).
     * 8-point FDCT kernel, cK represents sqrt(2) * cos(K*pi/16).
     * i0..i3 in the paper are tmp0..tmp3 here.
     */

    tmp10 = tmp0 + tmp3;
 80152d4:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 80152d6:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80152d8:	4413      	add	r3, r2
 80152da:	647b      	str	r3, [r7, #68]	@ 0x44
    tmp11 = tmp1 + tmp2;
 80152dc:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 80152de:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80152e0:	4413      	add	r3, r2
 80152e2:	63fb      	str	r3, [r7, #60]	@ 0x3c
    tmp12 = tmp0 + tmp2;
 80152e4:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 80152e6:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80152e8:	4413      	add	r3, r2
 80152ea:	643b      	str	r3, [r7, #64]	@ 0x40
    tmp13 = tmp1 + tmp3;
 80152ec:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 80152ee:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80152f0:	4413      	add	r3, r2
 80152f2:	63bb      	str	r3, [r7, #56]	@ 0x38
    z1 = MULTIPLY(tmp12 + tmp13, FIX_1_175875602); /*  c3 */
 80152f4:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 80152f6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80152f8:	4413      	add	r3, r2
 80152fa:	f242 52a1 	movw	r2, #9633	@ 0x25a1
 80152fe:	fb02 f303 	mul.w	r3, r2, r3
 8015302:	637b      	str	r3, [r7, #52]	@ 0x34

    tmp0  = MULTIPLY(tmp0,    FIX_1_501321110);    /*  c1+c3-c5-c7 */
 8015304:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8015306:	f243 020b 	movw	r2, #12299	@ 0x300b
 801530a:	fb02 f303 	mul.w	r3, r2, r3
 801530e:	657b      	str	r3, [r7, #84]	@ 0x54
    tmp1  = MULTIPLY(tmp1,    FIX_3_072711026);    /*  c1+c3+c5-c7 */
 8015310:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8015312:	f246 2254 	movw	r2, #25172	@ 0x6254
 8015316:	fb02 f303 	mul.w	r3, r2, r3
 801531a:	653b      	str	r3, [r7, #80]	@ 0x50
    tmp2  = MULTIPLY(tmp2,    FIX_2_053119869);    /*  c1+c3-c5+c7 */
 801531c:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 801531e:	f244 12b3 	movw	r2, #16819	@ 0x41b3
 8015322:	fb02 f303 	mul.w	r3, r2, r3
 8015326:	64fb      	str	r3, [r7, #76]	@ 0x4c
    tmp3  = MULTIPLY(tmp3,    FIX_0_298631336);    /* -c1+c3+c5-c7 */
 8015328:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 801532a:	f640 128e 	movw	r2, #2446	@ 0x98e
 801532e:	fb02 f303 	mul.w	r3, r2, r3
 8015332:	64bb      	str	r3, [r7, #72]	@ 0x48
    tmp10 = MULTIPLY(tmp10, - FIX_0_899976223);    /*  c7-c3 */
 8015334:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8015336:	4a2d      	ldr	r2, [pc, #180]	@ (80153ec <jpeg_fdct_16x8+0x600>)
 8015338:	fb02 f303 	mul.w	r3, r2, r3
 801533c:	647b      	str	r3, [r7, #68]	@ 0x44
    tmp11 = MULTIPLY(tmp11, - FIX_2_562915447);    /* -c1-c3 */
 801533e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8015340:	4a2b      	ldr	r2, [pc, #172]	@ (80153f0 <jpeg_fdct_16x8+0x604>)
 8015342:	fb02 f303 	mul.w	r3, r2, r3
 8015346:	63fb      	str	r3, [r7, #60]	@ 0x3c
    tmp12 = MULTIPLY(tmp12, - FIX_0_390180644);    /*  c5-c3 */
 8015348:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 801534a:	4a2a      	ldr	r2, [pc, #168]	@ (80153f4 <jpeg_fdct_16x8+0x608>)
 801534c:	fb02 f303 	mul.w	r3, r2, r3
 8015350:	643b      	str	r3, [r7, #64]	@ 0x40
    tmp13 = MULTIPLY(tmp13, - FIX_1_961570560);    /* -c3-c5 */
 8015352:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8015354:	4a28      	ldr	r2, [pc, #160]	@ (80153f8 <jpeg_fdct_16x8+0x60c>)
 8015356:	fb02 f303 	mul.w	r3, r2, r3
 801535a:	63bb      	str	r3, [r7, #56]	@ 0x38

    tmp12 += z1;
 801535c:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 801535e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8015360:	4413      	add	r3, r2
 8015362:	643b      	str	r3, [r7, #64]	@ 0x40
    tmp13 += z1;
 8015364:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8015366:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8015368:	4413      	add	r3, r2
 801536a:	63bb      	str	r3, [r7, #56]	@ 0x38

    dataptr[DCTSIZE*1] = (DCTELEM) DESCALE(tmp0 + tmp10 + tmp12,
 801536c:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 801536e:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8015370:	441a      	add	r2, r3
 8015372:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8015374:	4413      	add	r3, r2
 8015376:	f503 4200 	add.w	r2, r3, #32768	@ 0x8000
 801537a:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 801537c:	3320      	adds	r3, #32
 801537e:	1412      	asrs	r2, r2, #16
 8015380:	601a      	str	r2, [r3, #0]
					   CONST_BITS+PASS1_BITS+1);
    dataptr[DCTSIZE*3] = (DCTELEM) DESCALE(tmp1 + tmp11 + tmp13,
 8015382:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 8015384:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8015386:	441a      	add	r2, r3
 8015388:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801538a:	4413      	add	r3, r2
 801538c:	f503 4200 	add.w	r2, r3, #32768	@ 0x8000
 8015390:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8015392:	3360      	adds	r3, #96	@ 0x60
 8015394:	1412      	asrs	r2, r2, #16
 8015396:	601a      	str	r2, [r3, #0]
					   CONST_BITS+PASS1_BITS+1);
    dataptr[DCTSIZE*5] = (DCTELEM) DESCALE(tmp2 + tmp11 + tmp12,
 8015398:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 801539a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 801539c:	441a      	add	r2, r3
 801539e:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80153a0:	4413      	add	r3, r2
 80153a2:	f503 4200 	add.w	r2, r3, #32768	@ 0x8000
 80153a6:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80153a8:	33a0      	adds	r3, #160	@ 0xa0
 80153aa:	1412      	asrs	r2, r2, #16
 80153ac:	601a      	str	r2, [r3, #0]
					   CONST_BITS+PASS1_BITS+1);
    dataptr[DCTSIZE*7] = (DCTELEM) DESCALE(tmp3 + tmp10 + tmp13,
 80153ae:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 80153b0:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80153b2:	441a      	add	r2, r3
 80153b4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80153b6:	4413      	add	r3, r2
 80153b8:	f503 4200 	add.w	r2, r3, #32768	@ 0x8000
 80153bc:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80153be:	33e0      	adds	r3, #224	@ 0xe0
 80153c0:	1412      	asrs	r2, r2, #16
 80153c2:	601a      	str	r2, [r3, #0]
					   CONST_BITS+PASS1_BITS+1);

    dataptr++;			/* advance pointer to next column */
 80153c4:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80153c6:	3304      	adds	r3, #4
 80153c8:	65fb      	str	r3, [r7, #92]	@ 0x5c
  for (ctr = DCTSIZE-1; ctr >= 0; ctr--) {
 80153ca:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 80153cc:	3b01      	subs	r3, #1
 80153ce:	65bb      	str	r3, [r7, #88]	@ 0x58
 80153d0:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 80153d2:	2b00      	cmp	r3, #0
 80153d4:	f6bf af00 	bge.w	80151d8 <jpeg_fdct_16x8+0x3ec>
  }
}
 80153d8:	bf00      	nop
 80153da:	bf00      	nop
 80153dc:	3764      	adds	r7, #100	@ 0x64
 80153de:	46bd      	mov	sp, r7
 80153e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80153e4:	4770      	bx	lr
 80153e6:	bf00      	nop
 80153e8:	ffffc4df 	.word	0xffffc4df
 80153ec:	ffffe333 	.word	0xffffe333
 80153f0:	ffffadfd 	.word	0xffffadfd
 80153f4:	fffff384 	.word	0xfffff384
 80153f8:	ffffc13b 	.word	0xffffc13b

080153fc <jpeg_fdct_14x7>:
 * 14-point FDCT in pass 1 (rows), 7-point in pass 2 (columns).
 */

GLOBAL(void)
jpeg_fdct_14x7 (DCTELEM * data, JSAMPARRAY sample_data, JDIMENSION start_col)
{
 80153fc:	b580      	push	{r7, lr}
 80153fe:	b098      	sub	sp, #96	@ 0x60
 8015400:	af00      	add	r7, sp, #0
 8015402:	60f8      	str	r0, [r7, #12]
 8015404:	60b9      	str	r1, [r7, #8]
 8015406:	607a      	str	r2, [r7, #4]
  JSAMPROW elemptr;
  int ctr;
  SHIFT_TEMPS

  /* Zero bottom row of output coefficient block. */
  MEMZERO(&data[DCTSIZE*7], SIZEOF(DCTELEM) * DCTSIZE);
 8015408:	68fb      	ldr	r3, [r7, #12]
 801540a:	33e0      	adds	r3, #224	@ 0xe0
 801540c:	2220      	movs	r2, #32
 801540e:	2100      	movs	r1, #0
 8015410:	4618      	mov	r0, r3
 8015412:	f004 faed 	bl	80199f0 <memset>
  /* Pass 1: process rows. */
  /* Note results are scaled up by sqrt(8) compared to a true DCT; */
  /* furthermore, we scale the results by 2**PASS1_BITS. */
  /* 14-point FDCT kernel, cK represents sqrt(2) * cos(K*pi/28). */

  dataptr = data;
 8015416:	68fb      	ldr	r3, [r7, #12]
 8015418:	65fb      	str	r3, [r7, #92]	@ 0x5c
  for (ctr = 0; ctr < 7; ctr++) {
 801541a:	2300      	movs	r3, #0
 801541c:	65bb      	str	r3, [r7, #88]	@ 0x58
 801541e:	e17d      	b.n	801571c <jpeg_fdct_14x7+0x320>
    elemptr = sample_data[ctr] + start_col;
 8015420:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8015422:	009b      	lsls	r3, r3, #2
 8015424:	68ba      	ldr	r2, [r7, #8]
 8015426:	4413      	add	r3, r2
 8015428:	681a      	ldr	r2, [r3, #0]
 801542a:	687b      	ldr	r3, [r7, #4]
 801542c:	4413      	add	r3, r2
 801542e:	62fb      	str	r3, [r7, #44]	@ 0x2c

    /* Even part */

    tmp0 = GETJSAMPLE(elemptr[0]) + GETJSAMPLE(elemptr[13]);
 8015430:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8015432:	781b      	ldrb	r3, [r3, #0]
 8015434:	461a      	mov	r2, r3
 8015436:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8015438:	330d      	adds	r3, #13
 801543a:	781b      	ldrb	r3, [r3, #0]
 801543c:	4413      	add	r3, r2
 801543e:	657b      	str	r3, [r7, #84]	@ 0x54
    tmp1 = GETJSAMPLE(elemptr[1]) + GETJSAMPLE(elemptr[12]);
 8015440:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8015442:	3301      	adds	r3, #1
 8015444:	781b      	ldrb	r3, [r3, #0]
 8015446:	461a      	mov	r2, r3
 8015448:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801544a:	330c      	adds	r3, #12
 801544c:	781b      	ldrb	r3, [r3, #0]
 801544e:	4413      	add	r3, r2
 8015450:	653b      	str	r3, [r7, #80]	@ 0x50
    tmp2 = GETJSAMPLE(elemptr[2]) + GETJSAMPLE(elemptr[11]);
 8015452:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8015454:	3302      	adds	r3, #2
 8015456:	781b      	ldrb	r3, [r3, #0]
 8015458:	461a      	mov	r2, r3
 801545a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801545c:	330b      	adds	r3, #11
 801545e:	781b      	ldrb	r3, [r3, #0]
 8015460:	4413      	add	r3, r2
 8015462:	64fb      	str	r3, [r7, #76]	@ 0x4c
    tmp13 = GETJSAMPLE(elemptr[3]) + GETJSAMPLE(elemptr[10]);
 8015464:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8015466:	3303      	adds	r3, #3
 8015468:	781b      	ldrb	r3, [r3, #0]
 801546a:	461a      	mov	r2, r3
 801546c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801546e:	330a      	adds	r3, #10
 8015470:	781b      	ldrb	r3, [r3, #0]
 8015472:	4413      	add	r3, r2
 8015474:	62bb      	str	r3, [r7, #40]	@ 0x28
    tmp4 = GETJSAMPLE(elemptr[4]) + GETJSAMPLE(elemptr[9]);
 8015476:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8015478:	3304      	adds	r3, #4
 801547a:	781b      	ldrb	r3, [r3, #0]
 801547c:	461a      	mov	r2, r3
 801547e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8015480:	3309      	adds	r3, #9
 8015482:	781b      	ldrb	r3, [r3, #0]
 8015484:	4413      	add	r3, r2
 8015486:	627b      	str	r3, [r7, #36]	@ 0x24
    tmp5 = GETJSAMPLE(elemptr[5]) + GETJSAMPLE(elemptr[8]);
 8015488:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801548a:	3305      	adds	r3, #5
 801548c:	781b      	ldrb	r3, [r3, #0]
 801548e:	461a      	mov	r2, r3
 8015490:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8015492:	3308      	adds	r3, #8
 8015494:	781b      	ldrb	r3, [r3, #0]
 8015496:	4413      	add	r3, r2
 8015498:	623b      	str	r3, [r7, #32]
    tmp6 = GETJSAMPLE(elemptr[6]) + GETJSAMPLE(elemptr[7]);
 801549a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801549c:	3306      	adds	r3, #6
 801549e:	781b      	ldrb	r3, [r3, #0]
 80154a0:	461a      	mov	r2, r3
 80154a2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80154a4:	3307      	adds	r3, #7
 80154a6:	781b      	ldrb	r3, [r3, #0]
 80154a8:	4413      	add	r3, r2
 80154aa:	61fb      	str	r3, [r7, #28]

    tmp10 = tmp0 + tmp6;
 80154ac:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 80154ae:	69fb      	ldr	r3, [r7, #28]
 80154b0:	4413      	add	r3, r2
 80154b2:	647b      	str	r3, [r7, #68]	@ 0x44
    tmp14 = tmp0 - tmp6;
 80154b4:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 80154b6:	69fb      	ldr	r3, [r7, #28]
 80154b8:	1ad3      	subs	r3, r2, r3
 80154ba:	61bb      	str	r3, [r7, #24]
    tmp11 = tmp1 + tmp5;
 80154bc:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 80154be:	6a3b      	ldr	r3, [r7, #32]
 80154c0:	4413      	add	r3, r2
 80154c2:	643b      	str	r3, [r7, #64]	@ 0x40
    tmp15 = tmp1 - tmp5;
 80154c4:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 80154c6:	6a3b      	ldr	r3, [r7, #32]
 80154c8:	1ad3      	subs	r3, r2, r3
 80154ca:	617b      	str	r3, [r7, #20]
    tmp12 = tmp2 + tmp4;
 80154cc:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 80154ce:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80154d0:	4413      	add	r3, r2
 80154d2:	63fb      	str	r3, [r7, #60]	@ 0x3c
    tmp16 = tmp2 - tmp4;
 80154d4:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 80154d6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80154d8:	1ad3      	subs	r3, r2, r3
 80154da:	613b      	str	r3, [r7, #16]

    tmp0 = GETJSAMPLE(elemptr[0]) - GETJSAMPLE(elemptr[13]);
 80154dc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80154de:	781b      	ldrb	r3, [r3, #0]
 80154e0:	461a      	mov	r2, r3
 80154e2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80154e4:	330d      	adds	r3, #13
 80154e6:	781b      	ldrb	r3, [r3, #0]
 80154e8:	1ad3      	subs	r3, r2, r3
 80154ea:	657b      	str	r3, [r7, #84]	@ 0x54
    tmp1 = GETJSAMPLE(elemptr[1]) - GETJSAMPLE(elemptr[12]);
 80154ec:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80154ee:	3301      	adds	r3, #1
 80154f0:	781b      	ldrb	r3, [r3, #0]
 80154f2:	461a      	mov	r2, r3
 80154f4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80154f6:	330c      	adds	r3, #12
 80154f8:	781b      	ldrb	r3, [r3, #0]
 80154fa:	1ad3      	subs	r3, r2, r3
 80154fc:	653b      	str	r3, [r7, #80]	@ 0x50
    tmp2 = GETJSAMPLE(elemptr[2]) - GETJSAMPLE(elemptr[11]);
 80154fe:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8015500:	3302      	adds	r3, #2
 8015502:	781b      	ldrb	r3, [r3, #0]
 8015504:	461a      	mov	r2, r3
 8015506:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8015508:	330b      	adds	r3, #11
 801550a:	781b      	ldrb	r3, [r3, #0]
 801550c:	1ad3      	subs	r3, r2, r3
 801550e:	64fb      	str	r3, [r7, #76]	@ 0x4c
    tmp3 = GETJSAMPLE(elemptr[3]) - GETJSAMPLE(elemptr[10]);
 8015510:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8015512:	3303      	adds	r3, #3
 8015514:	781b      	ldrb	r3, [r3, #0]
 8015516:	461a      	mov	r2, r3
 8015518:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801551a:	330a      	adds	r3, #10
 801551c:	781b      	ldrb	r3, [r3, #0]
 801551e:	1ad3      	subs	r3, r2, r3
 8015520:	64bb      	str	r3, [r7, #72]	@ 0x48
    tmp4 = GETJSAMPLE(elemptr[4]) - GETJSAMPLE(elemptr[9]);
 8015522:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8015524:	3304      	adds	r3, #4
 8015526:	781b      	ldrb	r3, [r3, #0]
 8015528:	461a      	mov	r2, r3
 801552a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801552c:	3309      	adds	r3, #9
 801552e:	781b      	ldrb	r3, [r3, #0]
 8015530:	1ad3      	subs	r3, r2, r3
 8015532:	627b      	str	r3, [r7, #36]	@ 0x24
    tmp5 = GETJSAMPLE(elemptr[5]) - GETJSAMPLE(elemptr[8]);
 8015534:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8015536:	3305      	adds	r3, #5
 8015538:	781b      	ldrb	r3, [r3, #0]
 801553a:	461a      	mov	r2, r3
 801553c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801553e:	3308      	adds	r3, #8
 8015540:	781b      	ldrb	r3, [r3, #0]
 8015542:	1ad3      	subs	r3, r2, r3
 8015544:	623b      	str	r3, [r7, #32]
    tmp6 = GETJSAMPLE(elemptr[6]) - GETJSAMPLE(elemptr[7]);
 8015546:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8015548:	3306      	adds	r3, #6
 801554a:	781b      	ldrb	r3, [r3, #0]
 801554c:	461a      	mov	r2, r3
 801554e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8015550:	3307      	adds	r3, #7
 8015552:	781b      	ldrb	r3, [r3, #0]
 8015554:	1ad3      	subs	r3, r2, r3
 8015556:	61fb      	str	r3, [r7, #28]

    /* Apply unsigned->signed conversion */
    dataptr[0] = (DCTELEM)
      ((tmp10 + tmp11 + tmp12 + tmp13 - 14 * CENTERJSAMPLE) << PASS1_BITS);
 8015558:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 801555a:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 801555c:	441a      	add	r2, r3
 801555e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8015560:	441a      	add	r2, r3
 8015562:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8015564:	4413      	add	r3, r2
 8015566:	f5a3 63e0 	sub.w	r3, r3, #1792	@ 0x700
 801556a:	009a      	lsls	r2, r3, #2
    dataptr[0] = (DCTELEM)
 801556c:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 801556e:	601a      	str	r2, [r3, #0]
    tmp13 += tmp13;
 8015570:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8015572:	005b      	lsls	r3, r3, #1
 8015574:	62bb      	str	r3, [r7, #40]	@ 0x28
    dataptr[4] = (DCTELEM)
      DESCALE(MULTIPLY(tmp10 - tmp13, FIX(1.274162392)) + /* c4 */
 8015576:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8015578:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801557a:	1ad3      	subs	r3, r2, r3
 801557c:	f642 02c6 	movw	r2, #10438	@ 0x28c6
 8015580:	fb03 f202 	mul.w	r2, r3, r2
 8015584:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8015586:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8015588:	1acb      	subs	r3, r1, r3
 801558a:	f640 2112 	movw	r1, #2578	@ 0xa12
 801558e:	fb01 f303 	mul.w	r3, r1, r3
 8015592:	441a      	add	r2, r3
 8015594:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8015596:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8015598:	1acb      	subs	r3, r1, r3
 801559a:	4965      	ldr	r1, [pc, #404]	@ (8015730 <jpeg_fdct_14x7+0x334>)
 801559c:	fb01 f303 	mul.w	r3, r1, r3
 80155a0:	4413      	add	r3, r2
 80155a2:	f503 6280 	add.w	r2, r3, #1024	@ 0x400
    dataptr[4] = (DCTELEM)
 80155a6:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80155a8:	3310      	adds	r3, #16
      DESCALE(MULTIPLY(tmp10 - tmp13, FIX(1.274162392)) + /* c4 */
 80155aa:	12d2      	asrs	r2, r2, #11
    dataptr[4] = (DCTELEM)
 80155ac:	601a      	str	r2, [r3, #0]
	      MULTIPLY(tmp11 - tmp13, FIX(0.314692123)) - /* c12 */
	      MULTIPLY(tmp12 - tmp13, FIX(0.881747734)),  /* c8 */
	      CONST_BITS-PASS1_BITS);

    tmp10 = MULTIPLY(tmp14 + tmp15, FIX(1.105676686));    /* c6 */
 80155ae:	69ba      	ldr	r2, [r7, #24]
 80155b0:	697b      	ldr	r3, [r7, #20]
 80155b2:	4413      	add	r3, r2
 80155b4:	f242 3262 	movw	r2, #9058	@ 0x2362
 80155b8:	fb02 f303 	mul.w	r3, r2, r3
 80155bc:	647b      	str	r3, [r7, #68]	@ 0x44

    dataptr[2] = (DCTELEM)
      DESCALE(tmp10 + MULTIPLY(tmp14, FIX(0.273079590))   /* c2-c6 */
 80155be:	69bb      	ldr	r3, [r7, #24]
 80155c0:	f640 02bd 	movw	r2, #2237	@ 0x8bd
 80155c4:	fb03 f202 	mul.w	r2, r3, r2
 80155c8:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80155ca:	441a      	add	r2, r3
 80155cc:	693b      	ldr	r3, [r7, #16]
 80155ce:	f241 31a3 	movw	r1, #5027	@ 0x13a3
 80155d2:	fb01 f303 	mul.w	r3, r1, r3
 80155d6:	4413      	add	r3, r2
 80155d8:	f503 6280 	add.w	r2, r3, #1024	@ 0x400
    dataptr[2] = (DCTELEM)
 80155dc:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80155de:	3308      	adds	r3, #8
      DESCALE(tmp10 + MULTIPLY(tmp14, FIX(0.273079590))   /* c2-c6 */
 80155e0:	12d2      	asrs	r2, r2, #11
    dataptr[2] = (DCTELEM)
 80155e2:	601a      	str	r2, [r3, #0]
	      + MULTIPLY(tmp16, FIX(0.613604268)),        /* c10 */
	      CONST_BITS-PASS1_BITS);
    dataptr[6] = (DCTELEM)
      DESCALE(tmp10 - MULTIPLY(tmp15, FIX(1.719280954))   /* c6+c10 */
 80155e4:	697b      	ldr	r3, [r7, #20]
 80155e6:	4a53      	ldr	r2, [pc, #332]	@ (8015734 <jpeg_fdct_14x7+0x338>)
 80155e8:	fb03 f202 	mul.w	r2, r3, r2
 80155ec:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80155ee:	441a      	add	r2, r3
 80155f0:	693b      	ldr	r3, [r7, #16]
 80155f2:	4951      	ldr	r1, [pc, #324]	@ (8015738 <jpeg_fdct_14x7+0x33c>)
 80155f4:	fb01 f303 	mul.w	r3, r1, r3
 80155f8:	4413      	add	r3, r2
 80155fa:	f503 6280 	add.w	r2, r3, #1024	@ 0x400
    dataptr[6] = (DCTELEM)
 80155fe:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8015600:	3318      	adds	r3, #24
      DESCALE(tmp10 - MULTIPLY(tmp15, FIX(1.719280954))   /* c6+c10 */
 8015602:	12d2      	asrs	r2, r2, #11
    dataptr[6] = (DCTELEM)
 8015604:	601a      	str	r2, [r3, #0]
	      - MULTIPLY(tmp16, FIX(1.378756276)),        /* c2 */
	      CONST_BITS-PASS1_BITS);

    /* Odd part */

    tmp10 = tmp1 + tmp2;
 8015606:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 8015608:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 801560a:	4413      	add	r3, r2
 801560c:	647b      	str	r3, [r7, #68]	@ 0x44
    tmp11 = tmp5 - tmp4;
 801560e:	6a3a      	ldr	r2, [r7, #32]
 8015610:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8015612:	1ad3      	subs	r3, r2, r3
 8015614:	643b      	str	r3, [r7, #64]	@ 0x40
    dataptr[7] = (DCTELEM) ((tmp0 - tmp10 + tmp3 - tmp11 - tmp6) << PASS1_BITS);
 8015616:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 8015618:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 801561a:	1ad2      	subs	r2, r2, r3
 801561c:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 801561e:	441a      	add	r2, r3
 8015620:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8015622:	1ad2      	subs	r2, r2, r3
 8015624:	69fb      	ldr	r3, [r7, #28]
 8015626:	1ad2      	subs	r2, r2, r3
 8015628:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 801562a:	331c      	adds	r3, #28
 801562c:	0092      	lsls	r2, r2, #2
 801562e:	601a      	str	r2, [r3, #0]
    tmp3 <<= CONST_BITS;
 8015630:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8015632:	035b      	lsls	r3, r3, #13
 8015634:	64bb      	str	r3, [r7, #72]	@ 0x48
    tmp10 = MULTIPLY(tmp10, - FIX(0.158341681));          /* -c13 */
 8015636:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8015638:	f46f 62a2 	mvn.w	r2, #1296	@ 0x510
 801563c:	fb02 f303 	mul.w	r3, r2, r3
 8015640:	647b      	str	r3, [r7, #68]	@ 0x44
    tmp11 = MULTIPLY(tmp11, FIX(1.405321284));            /* c1 */
 8015642:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8015644:	f642 42f8 	movw	r2, #11512	@ 0x2cf8
 8015648:	fb02 f303 	mul.w	r3, r2, r3
 801564c:	643b      	str	r3, [r7, #64]	@ 0x40
    tmp10 += tmp11 - tmp3;
 801564e:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8015650:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8015652:	1ad3      	subs	r3, r2, r3
 8015654:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8015656:	4413      	add	r3, r2
 8015658:	647b      	str	r3, [r7, #68]	@ 0x44
    tmp11 = MULTIPLY(tmp0 + tmp2, FIX(1.197448846)) +     /* c5 */
 801565a:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 801565c:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 801565e:	4413      	add	r3, r2
 8015660:	f242 6252 	movw	r2, #9810	@ 0x2652
 8015664:	fb03 f202 	mul.w	r2, r3, r2
	    MULTIPLY(tmp4 + tmp6, FIX(0.752406978));      /* c9 */
 8015668:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 801566a:	69fb      	ldr	r3, [r7, #28]
 801566c:	440b      	add	r3, r1
 801566e:	f641 0114 	movw	r1, #6164	@ 0x1814
 8015672:	fb01 f303 	mul.w	r3, r1, r3
    tmp11 = MULTIPLY(tmp0 + tmp2, FIX(1.197448846)) +     /* c5 */
 8015676:	4413      	add	r3, r2
 8015678:	643b      	str	r3, [r7, #64]	@ 0x40
    dataptr[5] = (DCTELEM)
      DESCALE(tmp10 + tmp11 - MULTIPLY(tmp2, FIX(2.373959773)) /* c3+c5-c13 */
 801567a:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 801567c:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 801567e:	441a      	add	r2, r3
 8015680:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8015682:	492e      	ldr	r1, [pc, #184]	@ (801573c <jpeg_fdct_14x7+0x340>)
 8015684:	fb01 f303 	mul.w	r3, r1, r3
 8015688:	441a      	add	r2, r3
 801568a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801568c:	f242 31d7 	movw	r1, #9175	@ 0x23d7
 8015690:	fb01 f303 	mul.w	r3, r1, r3
 8015694:	4413      	add	r3, r2
 8015696:	f503 6280 	add.w	r2, r3, #1024	@ 0x400
    dataptr[5] = (DCTELEM)
 801569a:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 801569c:	3314      	adds	r3, #20
      DESCALE(tmp10 + tmp11 - MULTIPLY(tmp2, FIX(2.373959773)) /* c3+c5-c13 */
 801569e:	12d2      	asrs	r2, r2, #11
    dataptr[5] = (DCTELEM)
 80156a0:	601a      	str	r2, [r3, #0]
	      + MULTIPLY(tmp4, FIX(1.119999435)),         /* c1+c11-c9 */
	      CONST_BITS-PASS1_BITS);
    tmp12 = MULTIPLY(tmp0 + tmp1, FIX(1.334852607)) +     /* c3 */
 80156a2:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 80156a4:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80156a6:	4413      	add	r3, r2
 80156a8:	f642 22b7 	movw	r2, #10935	@ 0x2ab7
 80156ac:	fb03 f202 	mul.w	r2, r3, r2
	    MULTIPLY(tmp5 - tmp6, FIX(0.467085129));      /* c11 */
 80156b0:	6a39      	ldr	r1, [r7, #32]
 80156b2:	69fb      	ldr	r3, [r7, #28]
 80156b4:	1acb      	subs	r3, r1, r3
 80156b6:	f640 61f2 	movw	r1, #3826	@ 0xef2
 80156ba:	fb01 f303 	mul.w	r3, r1, r3
    tmp12 = MULTIPLY(tmp0 + tmp1, FIX(1.334852607)) +     /* c3 */
 80156be:	4413      	add	r3, r2
 80156c0:	63fb      	str	r3, [r7, #60]	@ 0x3c
    dataptr[3] = (DCTELEM)
      DESCALE(tmp10 + tmp12 - MULTIPLY(tmp1, FIX(0.424103948)) /* c3-c9-c13 */
 80156c2:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 80156c4:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80156c6:	441a      	add	r2, r3
 80156c8:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80156ca:	491d      	ldr	r1, [pc, #116]	@ (8015740 <jpeg_fdct_14x7+0x344>)
 80156cc:	fb01 f303 	mul.w	r3, r1, r3
 80156d0:	441a      	add	r2, r3
 80156d2:	6a3b      	ldr	r3, [r7, #32]
 80156d4:	491b      	ldr	r1, [pc, #108]	@ (8015744 <jpeg_fdct_14x7+0x348>)
 80156d6:	fb01 f303 	mul.w	r3, r1, r3
 80156da:	4413      	add	r3, r2
 80156dc:	f503 6280 	add.w	r2, r3, #1024	@ 0x400
    dataptr[3] = (DCTELEM)
 80156e0:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80156e2:	330c      	adds	r3, #12
      DESCALE(tmp10 + tmp12 - MULTIPLY(tmp1, FIX(0.424103948)) /* c3-c9-c13 */
 80156e4:	12d2      	asrs	r2, r2, #11
    dataptr[3] = (DCTELEM)
 80156e6:	601a      	str	r2, [r3, #0]
	      - MULTIPLY(tmp5, FIX(3.069855259)),         /* c1+c5+c11 */
	      CONST_BITS-PASS1_BITS);
    dataptr[1] = (DCTELEM)
      DESCALE(tmp11 + tmp12 + tmp3 + tmp6 -
 80156e8:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 80156ea:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80156ec:	441a      	add	r2, r3
 80156ee:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80156f0:	441a      	add	r2, r3
 80156f2:	69fb      	ldr	r3, [r7, #28]
 80156f4:	441a      	add	r2, r3
 80156f6:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 80156f8:	69fb      	ldr	r3, [r7, #28]
 80156fa:	440b      	add	r3, r1
 80156fc:	4912      	ldr	r1, [pc, #72]	@ (8015748 <jpeg_fdct_14x7+0x34c>)
 80156fe:	fb01 f303 	mul.w	r3, r1, r3
 8015702:	4413      	add	r3, r2
 8015704:	f503 6280 	add.w	r2, r3, #1024	@ 0x400
    dataptr[1] = (DCTELEM)
 8015708:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 801570a:	3304      	adds	r3, #4
      DESCALE(tmp11 + tmp12 + tmp3 + tmp6 -
 801570c:	12d2      	asrs	r2, r2, #11
    dataptr[1] = (DCTELEM)
 801570e:	601a      	str	r2, [r3, #0]
	      MULTIPLY(tmp0 + tmp6, FIX(1.126980169)),    /* c3+c5-c1 */
	      CONST_BITS-PASS1_BITS);

    dataptr += DCTSIZE;		/* advance pointer to next row */
 8015710:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8015712:	3320      	adds	r3, #32
 8015714:	65fb      	str	r3, [r7, #92]	@ 0x5c
  for (ctr = 0; ctr < 7; ctr++) {
 8015716:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8015718:	3301      	adds	r3, #1
 801571a:	65bb      	str	r3, [r7, #88]	@ 0x58
 801571c:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 801571e:	2b06      	cmp	r3, #6
 8015720:	f77f ae7e 	ble.w	8015420 <jpeg_fdct_14x7+0x24>
   * We must also scale the output by (8/14)*(8/7) = 32/49, which we
   * partially fold into the constant multipliers and final shifting:
   * 7-point FDCT kernel, cK represents sqrt(2) * cos(K*pi/14) * 64/49.
   */

  dataptr = data;
 8015724:	68fb      	ldr	r3, [r7, #12]
 8015726:	65fb      	str	r3, [r7, #92]	@ 0x5c
  for (ctr = DCTSIZE-1; ctr >= 0; ctr--) {
 8015728:	2307      	movs	r3, #7
 801572a:	65bb      	str	r3, [r7, #88]	@ 0x58
 801572c:	e0f7      	b.n	801591e <jpeg_fdct_14x7+0x522>
 801572e:	bf00      	nop
 8015730:	ffffe3c9 	.word	0xffffe3c9
 8015734:	ffffc8fc 	.word	0xffffc8fc
 8015738:	ffffd3e1 	.word	0xffffd3e1
 801573c:	ffffb409 	.word	0xffffb409
 8015740:	fffff26e 	.word	0xfffff26e
 8015744:	ffff9dc4 	.word	0xffff9dc4
 8015748:	ffffdbf0 	.word	0xffffdbf0
    /* Even part */

    tmp0 = dataptr[DCTSIZE*0] + dataptr[DCTSIZE*6];
 801574c:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 801574e:	681a      	ldr	r2, [r3, #0]
 8015750:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8015752:	33c0      	adds	r3, #192	@ 0xc0
 8015754:	681b      	ldr	r3, [r3, #0]
 8015756:	4413      	add	r3, r2
 8015758:	657b      	str	r3, [r7, #84]	@ 0x54
    tmp1 = dataptr[DCTSIZE*1] + dataptr[DCTSIZE*5];
 801575a:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 801575c:	3320      	adds	r3, #32
 801575e:	681a      	ldr	r2, [r3, #0]
 8015760:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8015762:	33a0      	adds	r3, #160	@ 0xa0
 8015764:	681b      	ldr	r3, [r3, #0]
 8015766:	4413      	add	r3, r2
 8015768:	653b      	str	r3, [r7, #80]	@ 0x50
    tmp2 = dataptr[DCTSIZE*2] + dataptr[DCTSIZE*4];
 801576a:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 801576c:	3340      	adds	r3, #64	@ 0x40
 801576e:	681a      	ldr	r2, [r3, #0]
 8015770:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8015772:	3380      	adds	r3, #128	@ 0x80
 8015774:	681b      	ldr	r3, [r3, #0]
 8015776:	4413      	add	r3, r2
 8015778:	64fb      	str	r3, [r7, #76]	@ 0x4c
    tmp3 = dataptr[DCTSIZE*3];
 801577a:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 801577c:	3360      	adds	r3, #96	@ 0x60
 801577e:	681b      	ldr	r3, [r3, #0]
 8015780:	64bb      	str	r3, [r7, #72]	@ 0x48

    tmp10 = dataptr[DCTSIZE*0] - dataptr[DCTSIZE*6];
 8015782:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8015784:	681a      	ldr	r2, [r3, #0]
 8015786:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8015788:	33c0      	adds	r3, #192	@ 0xc0
 801578a:	681b      	ldr	r3, [r3, #0]
 801578c:	1ad3      	subs	r3, r2, r3
 801578e:	647b      	str	r3, [r7, #68]	@ 0x44
    tmp11 = dataptr[DCTSIZE*1] - dataptr[DCTSIZE*5];
 8015790:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8015792:	3320      	adds	r3, #32
 8015794:	681a      	ldr	r2, [r3, #0]
 8015796:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8015798:	33a0      	adds	r3, #160	@ 0xa0
 801579a:	681b      	ldr	r3, [r3, #0]
 801579c:	1ad3      	subs	r3, r2, r3
 801579e:	643b      	str	r3, [r7, #64]	@ 0x40
    tmp12 = dataptr[DCTSIZE*2] - dataptr[DCTSIZE*4];
 80157a0:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80157a2:	3340      	adds	r3, #64	@ 0x40
 80157a4:	681a      	ldr	r2, [r3, #0]
 80157a6:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80157a8:	3380      	adds	r3, #128	@ 0x80
 80157aa:	681b      	ldr	r3, [r3, #0]
 80157ac:	1ad3      	subs	r3, r2, r3
 80157ae:	63fb      	str	r3, [r7, #60]	@ 0x3c

    z1 = tmp0 + tmp2;
 80157b0:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 80157b2:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80157b4:	4413      	add	r3, r2
 80157b6:	63bb      	str	r3, [r7, #56]	@ 0x38
    dataptr[DCTSIZE*0] = (DCTELEM)
      DESCALE(MULTIPLY(z1 + tmp1 + tmp3, FIX(1.306122449)), /* 64/49 */
 80157b8:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 80157ba:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80157bc:	441a      	add	r2, r3
 80157be:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80157c0:	4413      	add	r3, r2
 80157c2:	f642 12cc 	movw	r2, #10700	@ 0x29cc
 80157c6:	fb02 f303 	mul.w	r3, r2, r3
 80157ca:	f503 4300 	add.w	r3, r3, #32768	@ 0x8000
 80157ce:	141a      	asrs	r2, r3, #16
    dataptr[DCTSIZE*0] = (DCTELEM)
 80157d0:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80157d2:	601a      	str	r2, [r3, #0]
	      CONST_BITS+PASS1_BITS+1);
    tmp3 += tmp3;
 80157d4:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80157d6:	005b      	lsls	r3, r3, #1
 80157d8:	64bb      	str	r3, [r7, #72]	@ 0x48
    z1 -= tmp3;
 80157da:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 80157dc:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80157de:	1ad3      	subs	r3, r2, r3
 80157e0:	63bb      	str	r3, [r7, #56]	@ 0x38
    z1 -= tmp3;
 80157e2:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 80157e4:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80157e6:	1ad3      	subs	r3, r2, r3
 80157e8:	63bb      	str	r3, [r7, #56]	@ 0x38
    z1 = MULTIPLY(z1, FIX(0.461784020));                /* (c2+c6-c4)/2 */
 80157ea:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80157ec:	f640 62c7 	movw	r2, #3783	@ 0xec7
 80157f0:	fb02 f303 	mul.w	r3, r2, r3
 80157f4:	63bb      	str	r3, [r7, #56]	@ 0x38
    z2 = MULTIPLY(tmp0 - tmp2, FIX(1.202428084));       /* (c2+c4-c6)/2 */
 80157f6:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 80157f8:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80157fa:	1ad3      	subs	r3, r2, r3
 80157fc:	f242 627a 	movw	r2, #9850	@ 0x267a
 8015800:	fb02 f303 	mul.w	r3, r2, r3
 8015804:	637b      	str	r3, [r7, #52]	@ 0x34
    z3 = MULTIPLY(tmp1 - tmp2, FIX(0.411026446));       /* c6 */
 8015806:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 8015808:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 801580a:	1ad3      	subs	r3, r2, r3
 801580c:	f640 5227 	movw	r2, #3367	@ 0xd27
 8015810:	fb02 f303 	mul.w	r3, r2, r3
 8015814:	633b      	str	r3, [r7, #48]	@ 0x30
    dataptr[DCTSIZE*2] = (DCTELEM) DESCALE(z1 + z2 + z3, CONST_BITS+PASS1_BITS+1);
 8015816:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8015818:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 801581a:	441a      	add	r2, r3
 801581c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801581e:	4413      	add	r3, r2
 8015820:	f503 4200 	add.w	r2, r3, #32768	@ 0x8000
 8015824:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8015826:	3340      	adds	r3, #64	@ 0x40
 8015828:	1412      	asrs	r2, r2, #16
 801582a:	601a      	str	r2, [r3, #0]
    z1 -= z2;
 801582c:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 801582e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8015830:	1ad3      	subs	r3, r2, r3
 8015832:	63bb      	str	r3, [r7, #56]	@ 0x38
    z2 = MULTIPLY(tmp0 - tmp1, FIX(1.151670509));       /* c4 */
 8015834:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 8015836:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8015838:	1ad3      	subs	r3, r2, r3
 801583a:	f242 42da 	movw	r2, #9434	@ 0x24da
 801583e:	fb02 f303 	mul.w	r3, r2, r3
 8015842:	637b      	str	r3, [r7, #52]	@ 0x34
    dataptr[DCTSIZE*4] = (DCTELEM)
      DESCALE(z2 + z3 - MULTIPLY(tmp1 - tmp3, FIX(0.923568041)), /* c2+c6-c4 */
 8015844:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8015846:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8015848:	441a      	add	r2, r3
 801584a:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 801584c:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 801584e:	1acb      	subs	r3, r1, r3
 8015850:	4937      	ldr	r1, [pc, #220]	@ (8015930 <jpeg_fdct_14x7+0x534>)
 8015852:	fb01 f303 	mul.w	r3, r1, r3
 8015856:	4413      	add	r3, r2
 8015858:	f503 4200 	add.w	r2, r3, #32768	@ 0x8000
    dataptr[DCTSIZE*4] = (DCTELEM)
 801585c:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 801585e:	3380      	adds	r3, #128	@ 0x80
      DESCALE(z2 + z3 - MULTIPLY(tmp1 - tmp3, FIX(0.923568041)), /* c2+c6-c4 */
 8015860:	1412      	asrs	r2, r2, #16
    dataptr[DCTSIZE*4] = (DCTELEM)
 8015862:	601a      	str	r2, [r3, #0]
	      CONST_BITS+PASS1_BITS+1);
    dataptr[DCTSIZE*6] = (DCTELEM) DESCALE(z1 + z2, CONST_BITS+PASS1_BITS+1);
 8015864:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8015866:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8015868:	4413      	add	r3, r2
 801586a:	f503 4200 	add.w	r2, r3, #32768	@ 0x8000
 801586e:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8015870:	33c0      	adds	r3, #192	@ 0xc0
 8015872:	1412      	asrs	r2, r2, #16
 8015874:	601a      	str	r2, [r3, #0]

    /* Odd part */

    tmp1 = MULTIPLY(tmp10 + tmp11, FIX(1.221765677));   /* (c3+c1-c5)/2 */
 8015876:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8015878:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 801587a:	4413      	add	r3, r2
 801587c:	f242 7219 	movw	r2, #10009	@ 0x2719
 8015880:	fb02 f303 	mul.w	r3, r2, r3
 8015884:	653b      	str	r3, [r7, #80]	@ 0x50
    tmp2 = MULTIPLY(tmp10 - tmp11, FIX(0.222383464));   /* (c3+c5-c1)/2 */
 8015886:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8015888:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 801588a:	1ad3      	subs	r3, r2, r3
 801588c:	f240 721e 	movw	r2, #1822	@ 0x71e
 8015890:	fb02 f303 	mul.w	r3, r2, r3
 8015894:	64fb      	str	r3, [r7, #76]	@ 0x4c
    tmp0 = tmp1 - tmp2;
 8015896:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 8015898:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 801589a:	1ad3      	subs	r3, r2, r3
 801589c:	657b      	str	r3, [r7, #84]	@ 0x54
    tmp1 += tmp2;
 801589e:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 80158a0:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80158a2:	4413      	add	r3, r2
 80158a4:	653b      	str	r3, [r7, #80]	@ 0x50
    tmp2 = MULTIPLY(tmp11 + tmp12, - FIX(1.800824523)); /* -c1 */
 80158a6:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 80158a8:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80158aa:	4413      	add	r3, r2
 80158ac:	4a21      	ldr	r2, [pc, #132]	@ (8015934 <jpeg_fdct_14x7+0x538>)
 80158ae:	fb02 f303 	mul.w	r3, r2, r3
 80158b2:	64fb      	str	r3, [r7, #76]	@ 0x4c
    tmp1 += tmp2;
 80158b4:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 80158b6:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80158b8:	4413      	add	r3, r2
 80158ba:	653b      	str	r3, [r7, #80]	@ 0x50
    tmp3 = MULTIPLY(tmp10 + tmp12, FIX(0.801442310));   /* c5 */
 80158bc:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 80158be:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80158c0:	4413      	add	r3, r2
 80158c2:	f641 12a5 	movw	r2, #6565	@ 0x19a5
 80158c6:	fb02 f303 	mul.w	r3, r2, r3
 80158ca:	64bb      	str	r3, [r7, #72]	@ 0x48
    tmp0 += tmp3;
 80158cc:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 80158ce:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80158d0:	4413      	add	r3, r2
 80158d2:	657b      	str	r3, [r7, #84]	@ 0x54
    tmp2 += tmp3 + MULTIPLY(tmp12, FIX(2.443531355));   /* c3+c1-c5 */
 80158d4:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80158d6:	f644 6231 	movw	r2, #20017	@ 0x4e31
 80158da:	fb03 f202 	mul.w	r2, r3, r2
 80158de:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80158e0:	4413      	add	r3, r2
 80158e2:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 80158e4:	4413      	add	r3, r2
 80158e6:	64fb      	str	r3, [r7, #76]	@ 0x4c

    dataptr[DCTSIZE*1] = (DCTELEM) DESCALE(tmp0, CONST_BITS+PASS1_BITS+1);
 80158e8:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80158ea:	f503 4200 	add.w	r2, r3, #32768	@ 0x8000
 80158ee:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80158f0:	3320      	adds	r3, #32
 80158f2:	1412      	asrs	r2, r2, #16
 80158f4:	601a      	str	r2, [r3, #0]
    dataptr[DCTSIZE*3] = (DCTELEM) DESCALE(tmp1, CONST_BITS+PASS1_BITS+1);
 80158f6:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80158f8:	f503 4200 	add.w	r2, r3, #32768	@ 0x8000
 80158fc:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80158fe:	3360      	adds	r3, #96	@ 0x60
 8015900:	1412      	asrs	r2, r2, #16
 8015902:	601a      	str	r2, [r3, #0]
    dataptr[DCTSIZE*5] = (DCTELEM) DESCALE(tmp2, CONST_BITS+PASS1_BITS+1);
 8015904:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8015906:	f503 4200 	add.w	r2, r3, #32768	@ 0x8000
 801590a:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 801590c:	33a0      	adds	r3, #160	@ 0xa0
 801590e:	1412      	asrs	r2, r2, #16
 8015910:	601a      	str	r2, [r3, #0]

    dataptr++;			/* advance pointer to next column */
 8015912:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8015914:	3304      	adds	r3, #4
 8015916:	65fb      	str	r3, [r7, #92]	@ 0x5c
  for (ctr = DCTSIZE-1; ctr >= 0; ctr--) {
 8015918:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 801591a:	3b01      	subs	r3, #1
 801591c:	65bb      	str	r3, [r7, #88]	@ 0x58
 801591e:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8015920:	2b00      	cmp	r3, #0
 8015922:	f6bf af13 	bge.w	801574c <jpeg_fdct_14x7+0x350>
  }
}
 8015926:	bf00      	nop
 8015928:	bf00      	nop
 801592a:	3760      	adds	r7, #96	@ 0x60
 801592c:	46bd      	mov	sp, r7
 801592e:	bd80      	pop	{r7, pc}
 8015930:	ffffe272 	.word	0xffffe272
 8015934:	ffffc660 	.word	0xffffc660

08015938 <jpeg_fdct_12x6>:
 * 12-point FDCT in pass 1 (rows), 6-point in pass 2 (columns).
 */

GLOBAL(void)
jpeg_fdct_12x6 (DCTELEM * data, JSAMPARRAY sample_data, JDIMENSION start_col)
{
 8015938:	b580      	push	{r7, lr}
 801593a:	b094      	sub	sp, #80	@ 0x50
 801593c:	af00      	add	r7, sp, #0
 801593e:	60f8      	str	r0, [r7, #12]
 8015940:	60b9      	str	r1, [r7, #8]
 8015942:	607a      	str	r2, [r7, #4]
  JSAMPROW elemptr;
  int ctr;
  SHIFT_TEMPS

  /* Zero 2 bottom rows of output coefficient block. */
  MEMZERO(&data[DCTSIZE*6], SIZEOF(DCTELEM) * DCTSIZE * 2);
 8015944:	68fb      	ldr	r3, [r7, #12]
 8015946:	33c0      	adds	r3, #192	@ 0xc0
 8015948:	2240      	movs	r2, #64	@ 0x40
 801594a:	2100      	movs	r1, #0
 801594c:	4618      	mov	r0, r3
 801594e:	f004 f84f 	bl	80199f0 <memset>
  /* Pass 1: process rows. */
  /* Note results are scaled up by sqrt(8) compared to a true DCT; */
  /* furthermore, we scale the results by 2**PASS1_BITS. */
  /* 12-point FDCT kernel, cK represents sqrt(2) * cos(K*pi/24). */

  dataptr = data;
 8015952:	68fb      	ldr	r3, [r7, #12]
 8015954:	64fb      	str	r3, [r7, #76]	@ 0x4c
  for (ctr = 0; ctr < 6; ctr++) {
 8015956:	2300      	movs	r3, #0
 8015958:	64bb      	str	r3, [r7, #72]	@ 0x48
 801595a:	e14e      	b.n	8015bfa <jpeg_fdct_12x6+0x2c2>
    elemptr = sample_data[ctr] + start_col;
 801595c:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 801595e:	009b      	lsls	r3, r3, #2
 8015960:	68ba      	ldr	r2, [r7, #8]
 8015962:	4413      	add	r3, r2
 8015964:	681a      	ldr	r2, [r3, #0]
 8015966:	687b      	ldr	r3, [r7, #4]
 8015968:	4413      	add	r3, r2
 801596a:	62fb      	str	r3, [r7, #44]	@ 0x2c

    /* Even part */

    tmp0 = GETJSAMPLE(elemptr[0]) + GETJSAMPLE(elemptr[11]);
 801596c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801596e:	781b      	ldrb	r3, [r3, #0]
 8015970:	461a      	mov	r2, r3
 8015972:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8015974:	330b      	adds	r3, #11
 8015976:	781b      	ldrb	r3, [r3, #0]
 8015978:	4413      	add	r3, r2
 801597a:	647b      	str	r3, [r7, #68]	@ 0x44
    tmp1 = GETJSAMPLE(elemptr[1]) + GETJSAMPLE(elemptr[10]);
 801597c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801597e:	3301      	adds	r3, #1
 8015980:	781b      	ldrb	r3, [r3, #0]
 8015982:	461a      	mov	r2, r3
 8015984:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8015986:	330a      	adds	r3, #10
 8015988:	781b      	ldrb	r3, [r3, #0]
 801598a:	4413      	add	r3, r2
 801598c:	633b      	str	r3, [r7, #48]	@ 0x30
    tmp2 = GETJSAMPLE(elemptr[2]) + GETJSAMPLE(elemptr[9]);
 801598e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8015990:	3302      	adds	r3, #2
 8015992:	781b      	ldrb	r3, [r3, #0]
 8015994:	461a      	mov	r2, r3
 8015996:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8015998:	3309      	adds	r3, #9
 801599a:	781b      	ldrb	r3, [r3, #0]
 801599c:	4413      	add	r3, r2
 801599e:	63fb      	str	r3, [r7, #60]	@ 0x3c
    tmp3 = GETJSAMPLE(elemptr[3]) + GETJSAMPLE(elemptr[8]);
 80159a0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80159a2:	3303      	adds	r3, #3
 80159a4:	781b      	ldrb	r3, [r3, #0]
 80159a6:	461a      	mov	r2, r3
 80159a8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80159aa:	3308      	adds	r3, #8
 80159ac:	781b      	ldrb	r3, [r3, #0]
 80159ae:	4413      	add	r3, r2
 80159b0:	62bb      	str	r3, [r7, #40]	@ 0x28
    tmp4 = GETJSAMPLE(elemptr[4]) + GETJSAMPLE(elemptr[7]);
 80159b2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80159b4:	3304      	adds	r3, #4
 80159b6:	781b      	ldrb	r3, [r3, #0]
 80159b8:	461a      	mov	r2, r3
 80159ba:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80159bc:	3307      	adds	r3, #7
 80159be:	781b      	ldrb	r3, [r3, #0]
 80159c0:	4413      	add	r3, r2
 80159c2:	627b      	str	r3, [r7, #36]	@ 0x24
    tmp5 = GETJSAMPLE(elemptr[5]) + GETJSAMPLE(elemptr[6]);
 80159c4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80159c6:	3305      	adds	r3, #5
 80159c8:	781b      	ldrb	r3, [r3, #0]
 80159ca:	461a      	mov	r2, r3
 80159cc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80159ce:	3306      	adds	r3, #6
 80159d0:	781b      	ldrb	r3, [r3, #0]
 80159d2:	4413      	add	r3, r2
 80159d4:	623b      	str	r3, [r7, #32]

    tmp10 = tmp0 + tmp5;
 80159d6:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 80159d8:	6a3b      	ldr	r3, [r7, #32]
 80159da:	4413      	add	r3, r2
 80159dc:	63bb      	str	r3, [r7, #56]	@ 0x38
    tmp13 = tmp0 - tmp5;
 80159de:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 80159e0:	6a3b      	ldr	r3, [r7, #32]
 80159e2:	1ad3      	subs	r3, r2, r3
 80159e4:	61fb      	str	r3, [r7, #28]
    tmp11 = tmp1 + tmp4;
 80159e6:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80159e8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80159ea:	4413      	add	r3, r2
 80159ec:	643b      	str	r3, [r7, #64]	@ 0x40
    tmp14 = tmp1 - tmp4;
 80159ee:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80159f0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80159f2:	1ad3      	subs	r3, r2, r3
 80159f4:	61bb      	str	r3, [r7, #24]
    tmp12 = tmp2 + tmp3;
 80159f6:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 80159f8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80159fa:	4413      	add	r3, r2
 80159fc:	637b      	str	r3, [r7, #52]	@ 0x34
    tmp15 = tmp2 - tmp3;
 80159fe:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 8015a00:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8015a02:	1ad3      	subs	r3, r2, r3
 8015a04:	617b      	str	r3, [r7, #20]

    tmp0 = GETJSAMPLE(elemptr[0]) - GETJSAMPLE(elemptr[11]);
 8015a06:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8015a08:	781b      	ldrb	r3, [r3, #0]
 8015a0a:	461a      	mov	r2, r3
 8015a0c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8015a0e:	330b      	adds	r3, #11
 8015a10:	781b      	ldrb	r3, [r3, #0]
 8015a12:	1ad3      	subs	r3, r2, r3
 8015a14:	647b      	str	r3, [r7, #68]	@ 0x44
    tmp1 = GETJSAMPLE(elemptr[1]) - GETJSAMPLE(elemptr[10]);
 8015a16:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8015a18:	3301      	adds	r3, #1
 8015a1a:	781b      	ldrb	r3, [r3, #0]
 8015a1c:	461a      	mov	r2, r3
 8015a1e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8015a20:	330a      	adds	r3, #10
 8015a22:	781b      	ldrb	r3, [r3, #0]
 8015a24:	1ad3      	subs	r3, r2, r3
 8015a26:	633b      	str	r3, [r7, #48]	@ 0x30
    tmp2 = GETJSAMPLE(elemptr[2]) - GETJSAMPLE(elemptr[9]);
 8015a28:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8015a2a:	3302      	adds	r3, #2
 8015a2c:	781b      	ldrb	r3, [r3, #0]
 8015a2e:	461a      	mov	r2, r3
 8015a30:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8015a32:	3309      	adds	r3, #9
 8015a34:	781b      	ldrb	r3, [r3, #0]
 8015a36:	1ad3      	subs	r3, r2, r3
 8015a38:	63fb      	str	r3, [r7, #60]	@ 0x3c
    tmp3 = GETJSAMPLE(elemptr[3]) - GETJSAMPLE(elemptr[8]);
 8015a3a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8015a3c:	3303      	adds	r3, #3
 8015a3e:	781b      	ldrb	r3, [r3, #0]
 8015a40:	461a      	mov	r2, r3
 8015a42:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8015a44:	3308      	adds	r3, #8
 8015a46:	781b      	ldrb	r3, [r3, #0]
 8015a48:	1ad3      	subs	r3, r2, r3
 8015a4a:	62bb      	str	r3, [r7, #40]	@ 0x28
    tmp4 = GETJSAMPLE(elemptr[4]) - GETJSAMPLE(elemptr[7]);
 8015a4c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8015a4e:	3304      	adds	r3, #4
 8015a50:	781b      	ldrb	r3, [r3, #0]
 8015a52:	461a      	mov	r2, r3
 8015a54:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8015a56:	3307      	adds	r3, #7
 8015a58:	781b      	ldrb	r3, [r3, #0]
 8015a5a:	1ad3      	subs	r3, r2, r3
 8015a5c:	627b      	str	r3, [r7, #36]	@ 0x24
    tmp5 = GETJSAMPLE(elemptr[5]) - GETJSAMPLE(elemptr[6]);
 8015a5e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8015a60:	3305      	adds	r3, #5
 8015a62:	781b      	ldrb	r3, [r3, #0]
 8015a64:	461a      	mov	r2, r3
 8015a66:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8015a68:	3306      	adds	r3, #6
 8015a6a:	781b      	ldrb	r3, [r3, #0]
 8015a6c:	1ad3      	subs	r3, r2, r3
 8015a6e:	623b      	str	r3, [r7, #32]

    /* Apply unsigned->signed conversion */
    dataptr[0] = (DCTELEM)
      ((tmp10 + tmp11 + tmp12 - 12 * CENTERJSAMPLE) << PASS1_BITS);
 8015a70:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8015a72:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8015a74:	441a      	add	r2, r3
 8015a76:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8015a78:	4413      	add	r3, r2
 8015a7a:	f5a3 63c0 	sub.w	r3, r3, #1536	@ 0x600
 8015a7e:	009a      	lsls	r2, r3, #2
    dataptr[0] = (DCTELEM)
 8015a80:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8015a82:	601a      	str	r2, [r3, #0]
    dataptr[6] = (DCTELEM) ((tmp13 - tmp14 - tmp15) << PASS1_BITS);
 8015a84:	69fa      	ldr	r2, [r7, #28]
 8015a86:	69bb      	ldr	r3, [r7, #24]
 8015a88:	1ad2      	subs	r2, r2, r3
 8015a8a:	697b      	ldr	r3, [r7, #20]
 8015a8c:	1ad2      	subs	r2, r2, r3
 8015a8e:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8015a90:	3318      	adds	r3, #24
 8015a92:	0092      	lsls	r2, r2, #2
 8015a94:	601a      	str	r2, [r3, #0]
    dataptr[4] = (DCTELEM)
      DESCALE(MULTIPLY(tmp10 - tmp12, FIX(1.224744871)), /* c4 */
 8015a96:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8015a98:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8015a9a:	1ad3      	subs	r3, r2, r3
 8015a9c:	f242 7231 	movw	r2, #10033	@ 0x2731
 8015aa0:	fb02 f303 	mul.w	r3, r2, r3
 8015aa4:	f503 6280 	add.w	r2, r3, #1024	@ 0x400
    dataptr[4] = (DCTELEM)
 8015aa8:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8015aaa:	3310      	adds	r3, #16
      DESCALE(MULTIPLY(tmp10 - tmp12, FIX(1.224744871)), /* c4 */
 8015aac:	12d2      	asrs	r2, r2, #11
    dataptr[4] = (DCTELEM)
 8015aae:	601a      	str	r2, [r3, #0]
	      CONST_BITS-PASS1_BITS);
    dataptr[2] = (DCTELEM)
      DESCALE(tmp14 - tmp15 + MULTIPLY(tmp13 + tmp15, FIX(1.366025404)), /* c2 */
 8015ab0:	69ba      	ldr	r2, [r7, #24]
 8015ab2:	697b      	ldr	r3, [r7, #20]
 8015ab4:	1ad2      	subs	r2, r2, r3
 8015ab6:	69f9      	ldr	r1, [r7, #28]
 8015ab8:	697b      	ldr	r3, [r7, #20]
 8015aba:	440b      	add	r3, r1
 8015abc:	f642 31b6 	movw	r1, #11190	@ 0x2bb6
 8015ac0:	fb01 f303 	mul.w	r3, r1, r3
 8015ac4:	4413      	add	r3, r2
 8015ac6:	f503 6280 	add.w	r2, r3, #1024	@ 0x400
    dataptr[2] = (DCTELEM)
 8015aca:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8015acc:	3308      	adds	r3, #8
      DESCALE(tmp14 - tmp15 + MULTIPLY(tmp13 + tmp15, FIX(1.366025404)), /* c2 */
 8015ace:	12d2      	asrs	r2, r2, #11
    dataptr[2] = (DCTELEM)
 8015ad0:	601a      	str	r2, [r3, #0]
	      CONST_BITS-PASS1_BITS);

    /* Odd part */

    tmp10 = MULTIPLY(tmp1 + tmp4, FIX_0_541196100);    /* c9 */
 8015ad2:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8015ad4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8015ad6:	4413      	add	r3, r2
 8015ad8:	f241 1251 	movw	r2, #4433	@ 0x1151
 8015adc:	fb02 f303 	mul.w	r3, r2, r3
 8015ae0:	63bb      	str	r3, [r7, #56]	@ 0x38
    tmp14 = tmp10 + MULTIPLY(tmp1, FIX_0_765366865);   /* c3-c9 */
 8015ae2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8015ae4:	f641 027e 	movw	r2, #6270	@ 0x187e
 8015ae8:	fb02 f303 	mul.w	r3, r2, r3
 8015aec:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8015aee:	4413      	add	r3, r2
 8015af0:	61bb      	str	r3, [r7, #24]
    tmp15 = tmp10 - MULTIPLY(tmp4, FIX_1_847759065);   /* c3+c9 */
 8015af2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8015af4:	4a95      	ldr	r2, [pc, #596]	@ (8015d4c <jpeg_fdct_12x6+0x414>)
 8015af6:	fb02 f303 	mul.w	r3, r2, r3
 8015afa:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8015afc:	4413      	add	r3, r2
 8015afe:	617b      	str	r3, [r7, #20]
    tmp12 = MULTIPLY(tmp0 + tmp2, FIX(1.121971054));   /* c5 */
 8015b00:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8015b02:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8015b04:	4413      	add	r3, r2
 8015b06:	f242 32e7 	movw	r2, #9191	@ 0x23e7
 8015b0a:	fb02 f303 	mul.w	r3, r2, r3
 8015b0e:	637b      	str	r3, [r7, #52]	@ 0x34
    tmp13 = MULTIPLY(tmp0 + tmp3, FIX(0.860918669));   /* c7 */
 8015b10:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8015b12:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8015b14:	4413      	add	r3, r2
 8015b16:	f641 328d 	movw	r2, #7053	@ 0x1b8d
 8015b1a:	fb02 f303 	mul.w	r3, r2, r3
 8015b1e:	61fb      	str	r3, [r7, #28]
    tmp10 = tmp12 + tmp13 + tmp14 - MULTIPLY(tmp0, FIX(0.580774953)) /* c5+c7-c1 */
 8015b20:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8015b22:	69fb      	ldr	r3, [r7, #28]
 8015b24:	441a      	add	r2, r3
 8015b26:	69bb      	ldr	r3, [r7, #24]
 8015b28:	441a      	add	r2, r3
 8015b2a:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8015b2c:	4988      	ldr	r1, [pc, #544]	@ (8015d50 <jpeg_fdct_12x6+0x418>)
 8015b2e:	fb01 f303 	mul.w	r3, r1, r3
 8015b32:	441a      	add	r2, r3
	    + MULTIPLY(tmp5, FIX(0.184591911));        /* c11 */
 8015b34:	6a3b      	ldr	r3, [r7, #32]
 8015b36:	f44f 61bd 	mov.w	r1, #1512	@ 0x5e8
 8015b3a:	fb01 f303 	mul.w	r3, r1, r3
    tmp10 = tmp12 + tmp13 + tmp14 - MULTIPLY(tmp0, FIX(0.580774953)) /* c5+c7-c1 */
 8015b3e:	4413      	add	r3, r2
 8015b40:	63bb      	str	r3, [r7, #56]	@ 0x38
    tmp11 = MULTIPLY(tmp2 + tmp3, - FIX(0.184591911)); /* -c11 */
 8015b42:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 8015b44:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8015b46:	4413      	add	r3, r2
 8015b48:	4a82      	ldr	r2, [pc, #520]	@ (8015d54 <jpeg_fdct_12x6+0x41c>)
 8015b4a:	fb02 f303 	mul.w	r3, r2, r3
 8015b4e:	643b      	str	r3, [r7, #64]	@ 0x40
    tmp12 += tmp11 - tmp15 - MULTIPLY(tmp2, FIX(2.339493912)) /* c1+c5-c11 */
 8015b50:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8015b52:	697b      	ldr	r3, [r7, #20]
 8015b54:	1ad2      	subs	r2, r2, r3
 8015b56:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8015b58:	497f      	ldr	r1, [pc, #508]	@ (8015d58 <jpeg_fdct_12x6+0x420>)
 8015b5a:	fb01 f303 	mul.w	r3, r1, r3
 8015b5e:	441a      	add	r2, r3
	    + MULTIPLY(tmp5, FIX(0.860918669));        /* c7 */
 8015b60:	6a3b      	ldr	r3, [r7, #32]
 8015b62:	f641 318d 	movw	r1, #7053	@ 0x1b8d
 8015b66:	fb01 f303 	mul.w	r3, r1, r3
 8015b6a:	4413      	add	r3, r2
    tmp12 += tmp11 - tmp15 - MULTIPLY(tmp2, FIX(2.339493912)) /* c1+c5-c11 */
 8015b6c:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8015b6e:	4413      	add	r3, r2
 8015b70:	637b      	str	r3, [r7, #52]	@ 0x34
    tmp13 += tmp11 - tmp14 + MULTIPLY(tmp3, FIX(0.725788011)) /* c1+c11-c7 */
 8015b72:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8015b74:	69bb      	ldr	r3, [r7, #24]
 8015b76:	1ad2      	subs	r2, r2, r3
 8015b78:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8015b7a:	f241 713a 	movw	r1, #5946	@ 0x173a
 8015b7e:	fb01 f303 	mul.w	r3, r1, r3
 8015b82:	441a      	add	r2, r3
	    - MULTIPLY(tmp5, FIX(1.121971054));        /* c5 */
 8015b84:	6a3b      	ldr	r3, [r7, #32]
 8015b86:	4975      	ldr	r1, [pc, #468]	@ (8015d5c <jpeg_fdct_12x6+0x424>)
 8015b88:	fb01 f303 	mul.w	r3, r1, r3
 8015b8c:	4413      	add	r3, r2
    tmp13 += tmp11 - tmp14 + MULTIPLY(tmp3, FIX(0.725788011)) /* c1+c11-c7 */
 8015b8e:	69fa      	ldr	r2, [r7, #28]
 8015b90:	4413      	add	r3, r2
 8015b92:	61fb      	str	r3, [r7, #28]
    tmp11 = tmp15 + MULTIPLY(tmp0 - tmp3, FIX(1.306562965)) /* c3 */
 8015b94:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8015b96:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8015b98:	1ad3      	subs	r3, r2, r3
 8015b9a:	f642 12cf 	movw	r2, #10703	@ 0x29cf
 8015b9e:	fb03 f202 	mul.w	r2, r3, r2
 8015ba2:	697b      	ldr	r3, [r7, #20]
 8015ba4:	441a      	add	r2, r3
	    - MULTIPLY(tmp2 + tmp5, FIX_0_541196100);  /* c9 */
 8015ba6:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8015ba8:	6a3b      	ldr	r3, [r7, #32]
 8015baa:	440b      	add	r3, r1
 8015bac:	496c      	ldr	r1, [pc, #432]	@ (8015d60 <jpeg_fdct_12x6+0x428>)
 8015bae:	fb01 f303 	mul.w	r3, r1, r3
    tmp11 = tmp15 + MULTIPLY(tmp0 - tmp3, FIX(1.306562965)) /* c3 */
 8015bb2:	4413      	add	r3, r2
 8015bb4:	643b      	str	r3, [r7, #64]	@ 0x40

    dataptr[1] = (DCTELEM) DESCALE(tmp10, CONST_BITS-PASS1_BITS);
 8015bb6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8015bb8:	f503 6280 	add.w	r2, r3, #1024	@ 0x400
 8015bbc:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8015bbe:	3304      	adds	r3, #4
 8015bc0:	12d2      	asrs	r2, r2, #11
 8015bc2:	601a      	str	r2, [r3, #0]
    dataptr[3] = (DCTELEM) DESCALE(tmp11, CONST_BITS-PASS1_BITS);
 8015bc4:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8015bc6:	f503 6280 	add.w	r2, r3, #1024	@ 0x400
 8015bca:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8015bcc:	330c      	adds	r3, #12
 8015bce:	12d2      	asrs	r2, r2, #11
 8015bd0:	601a      	str	r2, [r3, #0]
    dataptr[5] = (DCTELEM) DESCALE(tmp12, CONST_BITS-PASS1_BITS);
 8015bd2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8015bd4:	f503 6280 	add.w	r2, r3, #1024	@ 0x400
 8015bd8:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8015bda:	3314      	adds	r3, #20
 8015bdc:	12d2      	asrs	r2, r2, #11
 8015bde:	601a      	str	r2, [r3, #0]
    dataptr[7] = (DCTELEM) DESCALE(tmp13, CONST_BITS-PASS1_BITS);
 8015be0:	69fb      	ldr	r3, [r7, #28]
 8015be2:	f503 6280 	add.w	r2, r3, #1024	@ 0x400
 8015be6:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8015be8:	331c      	adds	r3, #28
 8015bea:	12d2      	asrs	r2, r2, #11
 8015bec:	601a      	str	r2, [r3, #0]

    dataptr += DCTSIZE;		/* advance pointer to next row */
 8015bee:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8015bf0:	3320      	adds	r3, #32
 8015bf2:	64fb      	str	r3, [r7, #76]	@ 0x4c
  for (ctr = 0; ctr < 6; ctr++) {
 8015bf4:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8015bf6:	3301      	adds	r3, #1
 8015bf8:	64bb      	str	r3, [r7, #72]	@ 0x48
 8015bfa:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8015bfc:	2b05      	cmp	r3, #5
 8015bfe:	f77f aead 	ble.w	801595c <jpeg_fdct_12x6+0x24>
   * We must also scale the output by (8/12)*(8/6) = 8/9, which we
   * partially fold into the constant multipliers and final shifting:
   * 6-point FDCT kernel, cK represents sqrt(2) * cos(K*pi/12) * 16/9.
   */

  dataptr = data;
 8015c02:	68fb      	ldr	r3, [r7, #12]
 8015c04:	64fb      	str	r3, [r7, #76]	@ 0x4c
  for (ctr = DCTSIZE-1; ctr >= 0; ctr--) {
 8015c06:	2307      	movs	r3, #7
 8015c08:	64bb      	str	r3, [r7, #72]	@ 0x48
 8015c0a:	e096      	b.n	8015d3a <jpeg_fdct_12x6+0x402>
    /* Even part */

    tmp0 = dataptr[DCTSIZE*0] + dataptr[DCTSIZE*5];
 8015c0c:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8015c0e:	681a      	ldr	r2, [r3, #0]
 8015c10:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8015c12:	33a0      	adds	r3, #160	@ 0xa0
 8015c14:	681b      	ldr	r3, [r3, #0]
 8015c16:	4413      	add	r3, r2
 8015c18:	647b      	str	r3, [r7, #68]	@ 0x44
    tmp11 = dataptr[DCTSIZE*1] + dataptr[DCTSIZE*4];
 8015c1a:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8015c1c:	3320      	adds	r3, #32
 8015c1e:	681a      	ldr	r2, [r3, #0]
 8015c20:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8015c22:	3380      	adds	r3, #128	@ 0x80
 8015c24:	681b      	ldr	r3, [r3, #0]
 8015c26:	4413      	add	r3, r2
 8015c28:	643b      	str	r3, [r7, #64]	@ 0x40
    tmp2 = dataptr[DCTSIZE*2] + dataptr[DCTSIZE*3];
 8015c2a:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8015c2c:	3340      	adds	r3, #64	@ 0x40
 8015c2e:	681a      	ldr	r2, [r3, #0]
 8015c30:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8015c32:	3360      	adds	r3, #96	@ 0x60
 8015c34:	681b      	ldr	r3, [r3, #0]
 8015c36:	4413      	add	r3, r2
 8015c38:	63fb      	str	r3, [r7, #60]	@ 0x3c

    tmp10 = tmp0 + tmp2;
 8015c3a:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8015c3c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8015c3e:	4413      	add	r3, r2
 8015c40:	63bb      	str	r3, [r7, #56]	@ 0x38
    tmp12 = tmp0 - tmp2;
 8015c42:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8015c44:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8015c46:	1ad3      	subs	r3, r2, r3
 8015c48:	637b      	str	r3, [r7, #52]	@ 0x34

    tmp0 = dataptr[DCTSIZE*0] - dataptr[DCTSIZE*5];
 8015c4a:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8015c4c:	681a      	ldr	r2, [r3, #0]
 8015c4e:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8015c50:	33a0      	adds	r3, #160	@ 0xa0
 8015c52:	681b      	ldr	r3, [r3, #0]
 8015c54:	1ad3      	subs	r3, r2, r3
 8015c56:	647b      	str	r3, [r7, #68]	@ 0x44
    tmp1 = dataptr[DCTSIZE*1] - dataptr[DCTSIZE*4];
 8015c58:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8015c5a:	3320      	adds	r3, #32
 8015c5c:	681a      	ldr	r2, [r3, #0]
 8015c5e:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8015c60:	3380      	adds	r3, #128	@ 0x80
 8015c62:	681b      	ldr	r3, [r3, #0]
 8015c64:	1ad3      	subs	r3, r2, r3
 8015c66:	633b      	str	r3, [r7, #48]	@ 0x30
    tmp2 = dataptr[DCTSIZE*2] - dataptr[DCTSIZE*3];
 8015c68:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8015c6a:	3340      	adds	r3, #64	@ 0x40
 8015c6c:	681a      	ldr	r2, [r3, #0]
 8015c6e:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8015c70:	3360      	adds	r3, #96	@ 0x60
 8015c72:	681b      	ldr	r3, [r3, #0]
 8015c74:	1ad3      	subs	r3, r2, r3
 8015c76:	63fb      	str	r3, [r7, #60]	@ 0x3c

    dataptr[DCTSIZE*0] = (DCTELEM)
      DESCALE(MULTIPLY(tmp10 + tmp11, FIX(1.777777778)),         /* 16/9 */
 8015c78:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8015c7a:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8015c7c:	4413      	add	r3, r2
 8015c7e:	f643 02e4 	movw	r2, #14564	@ 0x38e4
 8015c82:	fb02 f303 	mul.w	r3, r2, r3
 8015c86:	f503 4300 	add.w	r3, r3, #32768	@ 0x8000
 8015c8a:	141a      	asrs	r2, r3, #16
    dataptr[DCTSIZE*0] = (DCTELEM)
 8015c8c:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8015c8e:	601a      	str	r2, [r3, #0]
	      CONST_BITS+PASS1_BITS+1);
    dataptr[DCTSIZE*2] = (DCTELEM)
      DESCALE(MULTIPLY(tmp12, FIX(2.177324216)),                 /* c2 */
 8015c90:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8015c92:	f244 52ad 	movw	r2, #17837	@ 0x45ad
 8015c96:	fb02 f303 	mul.w	r3, r2, r3
 8015c9a:	f503 4200 	add.w	r2, r3, #32768	@ 0x8000
    dataptr[DCTSIZE*2] = (DCTELEM)
 8015c9e:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8015ca0:	3340      	adds	r3, #64	@ 0x40
      DESCALE(MULTIPLY(tmp12, FIX(2.177324216)),                 /* c2 */
 8015ca2:	1412      	asrs	r2, r2, #16
    dataptr[DCTSIZE*2] = (DCTELEM)
 8015ca4:	601a      	str	r2, [r3, #0]
	      CONST_BITS+PASS1_BITS+1);
    dataptr[DCTSIZE*4] = (DCTELEM)
      DESCALE(MULTIPLY(tmp10 - tmp11 - tmp11, FIX(1.257078722)), /* c4 */
 8015ca6:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8015ca8:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8015caa:	1ad2      	subs	r2, r2, r3
 8015cac:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8015cae:	1ad3      	subs	r3, r2, r3
 8015cb0:	f642 023a 	movw	r2, #10298	@ 0x283a
 8015cb4:	fb02 f303 	mul.w	r3, r2, r3
 8015cb8:	f503 4200 	add.w	r2, r3, #32768	@ 0x8000
    dataptr[DCTSIZE*4] = (DCTELEM)
 8015cbc:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8015cbe:	3380      	adds	r3, #128	@ 0x80
      DESCALE(MULTIPLY(tmp10 - tmp11 - tmp11, FIX(1.257078722)), /* c4 */
 8015cc0:	1412      	asrs	r2, r2, #16
    dataptr[DCTSIZE*4] = (DCTELEM)
 8015cc2:	601a      	str	r2, [r3, #0]
	      CONST_BITS+PASS1_BITS+1);

    /* Odd part */

    tmp10 = MULTIPLY(tmp0 + tmp2, FIX(0.650711829));             /* c5 */
 8015cc4:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8015cc6:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8015cc8:	4413      	add	r3, r2
 8015cca:	f241 42d3 	movw	r2, #5331	@ 0x14d3
 8015cce:	fb02 f303 	mul.w	r3, r2, r3
 8015cd2:	63bb      	str	r3, [r7, #56]	@ 0x38

    dataptr[DCTSIZE*1] = (DCTELEM)
      DESCALE(tmp10 + MULTIPLY(tmp0 + tmp1, FIX(1.777777778)),   /* 16/9 */
 8015cd4:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8015cd6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8015cd8:	4413      	add	r3, r2
 8015cda:	f643 02e4 	movw	r2, #14564	@ 0x38e4
 8015cde:	fb03 f202 	mul.w	r2, r3, r2
 8015ce2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8015ce4:	4413      	add	r3, r2
 8015ce6:	f503 4200 	add.w	r2, r3, #32768	@ 0x8000
    dataptr[DCTSIZE*1] = (DCTELEM)
 8015cea:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8015cec:	3320      	adds	r3, #32
      DESCALE(tmp10 + MULTIPLY(tmp0 + tmp1, FIX(1.777777778)),   /* 16/9 */
 8015cee:	1412      	asrs	r2, r2, #16
    dataptr[DCTSIZE*1] = (DCTELEM)
 8015cf0:	601a      	str	r2, [r3, #0]
	      CONST_BITS+PASS1_BITS+1);
    dataptr[DCTSIZE*3] = (DCTELEM)
      DESCALE(MULTIPLY(tmp0 - tmp1 - tmp2, FIX(1.777777778)),    /* 16/9 */
 8015cf2:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8015cf4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8015cf6:	1ad2      	subs	r2, r2, r3
 8015cf8:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8015cfa:	1ad3      	subs	r3, r2, r3
 8015cfc:	f643 02e4 	movw	r2, #14564	@ 0x38e4
 8015d00:	fb02 f303 	mul.w	r3, r2, r3
 8015d04:	f503 4200 	add.w	r2, r3, #32768	@ 0x8000
    dataptr[DCTSIZE*3] = (DCTELEM)
 8015d08:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8015d0a:	3360      	adds	r3, #96	@ 0x60
      DESCALE(MULTIPLY(tmp0 - tmp1 - tmp2, FIX(1.777777778)),    /* 16/9 */
 8015d0c:	1412      	asrs	r2, r2, #16
    dataptr[DCTSIZE*3] = (DCTELEM)
 8015d0e:	601a      	str	r2, [r3, #0]
	      CONST_BITS+PASS1_BITS+1);
    dataptr[DCTSIZE*5] = (DCTELEM)
      DESCALE(tmp10 + MULTIPLY(tmp2 - tmp1, FIX(1.777777778)),   /* 16/9 */
 8015d10:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 8015d12:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8015d14:	1ad3      	subs	r3, r2, r3
 8015d16:	f643 02e4 	movw	r2, #14564	@ 0x38e4
 8015d1a:	fb03 f202 	mul.w	r2, r3, r2
 8015d1e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8015d20:	4413      	add	r3, r2
 8015d22:	f503 4200 	add.w	r2, r3, #32768	@ 0x8000
    dataptr[DCTSIZE*5] = (DCTELEM)
 8015d26:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8015d28:	33a0      	adds	r3, #160	@ 0xa0
      DESCALE(tmp10 + MULTIPLY(tmp2 - tmp1, FIX(1.777777778)),   /* 16/9 */
 8015d2a:	1412      	asrs	r2, r2, #16
    dataptr[DCTSIZE*5] = (DCTELEM)
 8015d2c:	601a      	str	r2, [r3, #0]
	      CONST_BITS+PASS1_BITS+1);

    dataptr++;			/* advance pointer to next column */
 8015d2e:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8015d30:	3304      	adds	r3, #4
 8015d32:	64fb      	str	r3, [r7, #76]	@ 0x4c
  for (ctr = DCTSIZE-1; ctr >= 0; ctr--) {
 8015d34:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8015d36:	3b01      	subs	r3, #1
 8015d38:	64bb      	str	r3, [r7, #72]	@ 0x48
 8015d3a:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8015d3c:	2b00      	cmp	r3, #0
 8015d3e:	f6bf af65 	bge.w	8015c0c <jpeg_fdct_12x6+0x2d4>
  }
}
 8015d42:	bf00      	nop
 8015d44:	bf00      	nop
 8015d46:	3750      	adds	r7, #80	@ 0x50
 8015d48:	46bd      	mov	sp, r7
 8015d4a:	bd80      	pop	{r7, pc}
 8015d4c:	ffffc4df 	.word	0xffffc4df
 8015d50:	ffffed6a 	.word	0xffffed6a
 8015d54:	fffffa18 	.word	0xfffffa18
 8015d58:	ffffb523 	.word	0xffffb523
 8015d5c:	ffffdc19 	.word	0xffffdc19
 8015d60:	ffffeeaf 	.word	0xffffeeaf

08015d64 <jpeg_fdct_10x5>:
 * 10-point FDCT in pass 1 (rows), 5-point in pass 2 (columns).
 */

GLOBAL(void)
jpeg_fdct_10x5 (DCTELEM * data, JSAMPARRAY sample_data, JDIMENSION start_col)
{
 8015d64:	b580      	push	{r7, lr}
 8015d66:	b092      	sub	sp, #72	@ 0x48
 8015d68:	af00      	add	r7, sp, #0
 8015d6a:	60f8      	str	r0, [r7, #12]
 8015d6c:	60b9      	str	r1, [r7, #8]
 8015d6e:	607a      	str	r2, [r7, #4]
  JSAMPROW elemptr;
  int ctr;
  SHIFT_TEMPS

  /* Zero 3 bottom rows of output coefficient block. */
  MEMZERO(&data[DCTSIZE*5], SIZEOF(DCTELEM) * DCTSIZE * 3);
 8015d70:	68fb      	ldr	r3, [r7, #12]
 8015d72:	33a0      	adds	r3, #160	@ 0xa0
 8015d74:	2260      	movs	r2, #96	@ 0x60
 8015d76:	2100      	movs	r1, #0
 8015d78:	4618      	mov	r0, r3
 8015d7a:	f003 fe39 	bl	80199f0 <memset>
  /* Pass 1: process rows. */
  /* Note results are scaled up by sqrt(8) compared to a true DCT; */
  /* furthermore, we scale the results by 2**PASS1_BITS. */
  /* 10-point FDCT kernel, cK represents sqrt(2) * cos(K*pi/20). */

  dataptr = data;
 8015d7e:	68fb      	ldr	r3, [r7, #12]
 8015d80:	647b      	str	r3, [r7, #68]	@ 0x44
  for (ctr = 0; ctr < 5; ctr++) {
 8015d82:	2300      	movs	r3, #0
 8015d84:	643b      	str	r3, [r7, #64]	@ 0x40
 8015d86:	e118      	b.n	8015fba <jpeg_fdct_10x5+0x256>
    elemptr = sample_data[ctr] + start_col;
 8015d88:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8015d8a:	009b      	lsls	r3, r3, #2
 8015d8c:	68ba      	ldr	r2, [r7, #8]
 8015d8e:	4413      	add	r3, r2
 8015d90:	681a      	ldr	r2, [r3, #0]
 8015d92:	687b      	ldr	r3, [r7, #4]
 8015d94:	4413      	add	r3, r2
 8015d96:	62bb      	str	r3, [r7, #40]	@ 0x28

    /* Even part */

    tmp0 = GETJSAMPLE(elemptr[0]) + GETJSAMPLE(elemptr[9]);
 8015d98:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8015d9a:	781b      	ldrb	r3, [r3, #0]
 8015d9c:	461a      	mov	r2, r3
 8015d9e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8015da0:	3309      	adds	r3, #9
 8015da2:	781b      	ldrb	r3, [r3, #0]
 8015da4:	4413      	add	r3, r2
 8015da6:	63fb      	str	r3, [r7, #60]	@ 0x3c
    tmp1 = GETJSAMPLE(elemptr[1]) + GETJSAMPLE(elemptr[8]);
 8015da8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8015daa:	3301      	adds	r3, #1
 8015dac:	781b      	ldrb	r3, [r3, #0]
 8015dae:	461a      	mov	r2, r3
 8015db0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8015db2:	3308      	adds	r3, #8
 8015db4:	781b      	ldrb	r3, [r3, #0]
 8015db6:	4413      	add	r3, r2
 8015db8:	63bb      	str	r3, [r7, #56]	@ 0x38
    tmp12 = GETJSAMPLE(elemptr[2]) + GETJSAMPLE(elemptr[7]);
 8015dba:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8015dbc:	3302      	adds	r3, #2
 8015dbe:	781b      	ldrb	r3, [r3, #0]
 8015dc0:	461a      	mov	r2, r3
 8015dc2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8015dc4:	3307      	adds	r3, #7
 8015dc6:	781b      	ldrb	r3, [r3, #0]
 8015dc8:	4413      	add	r3, r2
 8015dca:	627b      	str	r3, [r7, #36]	@ 0x24
    tmp3 = GETJSAMPLE(elemptr[3]) + GETJSAMPLE(elemptr[6]);
 8015dcc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8015dce:	3303      	adds	r3, #3
 8015dd0:	781b      	ldrb	r3, [r3, #0]
 8015dd2:	461a      	mov	r2, r3
 8015dd4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8015dd6:	3306      	adds	r3, #6
 8015dd8:	781b      	ldrb	r3, [r3, #0]
 8015dda:	4413      	add	r3, r2
 8015ddc:	623b      	str	r3, [r7, #32]
    tmp4 = GETJSAMPLE(elemptr[4]) + GETJSAMPLE(elemptr[5]);
 8015dde:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8015de0:	3304      	adds	r3, #4
 8015de2:	781b      	ldrb	r3, [r3, #0]
 8015de4:	461a      	mov	r2, r3
 8015de6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8015de8:	3305      	adds	r3, #5
 8015dea:	781b      	ldrb	r3, [r3, #0]
 8015dec:	4413      	add	r3, r2
 8015dee:	61fb      	str	r3, [r7, #28]

    tmp10 = tmp0 + tmp4;
 8015df0:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 8015df2:	69fb      	ldr	r3, [r7, #28]
 8015df4:	4413      	add	r3, r2
 8015df6:	633b      	str	r3, [r7, #48]	@ 0x30
    tmp13 = tmp0 - tmp4;
 8015df8:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 8015dfa:	69fb      	ldr	r3, [r7, #28]
 8015dfc:	1ad3      	subs	r3, r2, r3
 8015dfe:	61bb      	str	r3, [r7, #24]
    tmp11 = tmp1 + tmp3;
 8015e00:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8015e02:	6a3b      	ldr	r3, [r7, #32]
 8015e04:	4413      	add	r3, r2
 8015e06:	62fb      	str	r3, [r7, #44]	@ 0x2c
    tmp14 = tmp1 - tmp3;
 8015e08:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8015e0a:	6a3b      	ldr	r3, [r7, #32]
 8015e0c:	1ad3      	subs	r3, r2, r3
 8015e0e:	617b      	str	r3, [r7, #20]

    tmp0 = GETJSAMPLE(elemptr[0]) - GETJSAMPLE(elemptr[9]);
 8015e10:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8015e12:	781b      	ldrb	r3, [r3, #0]
 8015e14:	461a      	mov	r2, r3
 8015e16:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8015e18:	3309      	adds	r3, #9
 8015e1a:	781b      	ldrb	r3, [r3, #0]
 8015e1c:	1ad3      	subs	r3, r2, r3
 8015e1e:	63fb      	str	r3, [r7, #60]	@ 0x3c
    tmp1 = GETJSAMPLE(elemptr[1]) - GETJSAMPLE(elemptr[8]);
 8015e20:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8015e22:	3301      	adds	r3, #1
 8015e24:	781b      	ldrb	r3, [r3, #0]
 8015e26:	461a      	mov	r2, r3
 8015e28:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8015e2a:	3308      	adds	r3, #8
 8015e2c:	781b      	ldrb	r3, [r3, #0]
 8015e2e:	1ad3      	subs	r3, r2, r3
 8015e30:	63bb      	str	r3, [r7, #56]	@ 0x38
    tmp2 = GETJSAMPLE(elemptr[2]) - GETJSAMPLE(elemptr[7]);
 8015e32:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8015e34:	3302      	adds	r3, #2
 8015e36:	781b      	ldrb	r3, [r3, #0]
 8015e38:	461a      	mov	r2, r3
 8015e3a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8015e3c:	3307      	adds	r3, #7
 8015e3e:	781b      	ldrb	r3, [r3, #0]
 8015e40:	1ad3      	subs	r3, r2, r3
 8015e42:	637b      	str	r3, [r7, #52]	@ 0x34
    tmp3 = GETJSAMPLE(elemptr[3]) - GETJSAMPLE(elemptr[6]);
 8015e44:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8015e46:	3303      	adds	r3, #3
 8015e48:	781b      	ldrb	r3, [r3, #0]
 8015e4a:	461a      	mov	r2, r3
 8015e4c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8015e4e:	3306      	adds	r3, #6
 8015e50:	781b      	ldrb	r3, [r3, #0]
 8015e52:	1ad3      	subs	r3, r2, r3
 8015e54:	623b      	str	r3, [r7, #32]
    tmp4 = GETJSAMPLE(elemptr[4]) - GETJSAMPLE(elemptr[5]);
 8015e56:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8015e58:	3304      	adds	r3, #4
 8015e5a:	781b      	ldrb	r3, [r3, #0]
 8015e5c:	461a      	mov	r2, r3
 8015e5e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8015e60:	3305      	adds	r3, #5
 8015e62:	781b      	ldrb	r3, [r3, #0]
 8015e64:	1ad3      	subs	r3, r2, r3
 8015e66:	61fb      	str	r3, [r7, #28]

    /* Apply unsigned->signed conversion */
    dataptr[0] = (DCTELEM)
      ((tmp10 + tmp11 + tmp12 - 10 * CENTERJSAMPLE) << PASS1_BITS);
 8015e68:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8015e6a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8015e6c:	441a      	add	r2, r3
 8015e6e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8015e70:	4413      	add	r3, r2
 8015e72:	f5a3 63a0 	sub.w	r3, r3, #1280	@ 0x500
 8015e76:	009a      	lsls	r2, r3, #2
    dataptr[0] = (DCTELEM)
 8015e78:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8015e7a:	601a      	str	r2, [r3, #0]
    tmp12 += tmp12;
 8015e7c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8015e7e:	005b      	lsls	r3, r3, #1
 8015e80:	627b      	str	r3, [r7, #36]	@ 0x24
    dataptr[4] = (DCTELEM)
      DESCALE(MULTIPLY(tmp10 - tmp12, FIX(1.144122806)) - /* c4 */
 8015e82:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8015e84:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8015e86:	1ad3      	subs	r3, r2, r3
 8015e88:	f242 429d 	movw	r2, #9373	@ 0x249d
 8015e8c:	fb03 f202 	mul.w	r2, r3, r2
 8015e90:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8015e92:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8015e94:	1acb      	subs	r3, r1, r3
 8015e96:	4992      	ldr	r1, [pc, #584]	@ (80160e0 <jpeg_fdct_10x5+0x37c>)
 8015e98:	fb01 f303 	mul.w	r3, r1, r3
 8015e9c:	4413      	add	r3, r2
 8015e9e:	f503 6280 	add.w	r2, r3, #1024	@ 0x400
    dataptr[4] = (DCTELEM)
 8015ea2:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8015ea4:	3310      	adds	r3, #16
      DESCALE(MULTIPLY(tmp10 - tmp12, FIX(1.144122806)) - /* c4 */
 8015ea6:	12d2      	asrs	r2, r2, #11
    dataptr[4] = (DCTELEM)
 8015ea8:	601a      	str	r2, [r3, #0]
	      MULTIPLY(tmp11 - tmp12, FIX(0.437016024)),  /* c8 */
	      CONST_BITS-PASS1_BITS);
    tmp10 = MULTIPLY(tmp13 + tmp14, FIX(0.831253876));    /* c6 */
 8015eaa:	69ba      	ldr	r2, [r7, #24]
 8015eac:	697b      	ldr	r3, [r7, #20]
 8015eae:	4413      	add	r3, r2
 8015eb0:	f641 229a 	movw	r2, #6810	@ 0x1a9a
 8015eb4:	fb02 f303 	mul.w	r3, r2, r3
 8015eb8:	633b      	str	r3, [r7, #48]	@ 0x30
    dataptr[2] = (DCTELEM)
      DESCALE(tmp10 + MULTIPLY(tmp13, FIX(0.513743148)),  /* c2-c6 */
 8015eba:	69bb      	ldr	r3, [r7, #24]
 8015ebc:	f241 0271 	movw	r2, #4209	@ 0x1071
 8015ec0:	fb03 f202 	mul.w	r2, r3, r2
 8015ec4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8015ec6:	4413      	add	r3, r2
 8015ec8:	f503 6280 	add.w	r2, r3, #1024	@ 0x400
    dataptr[2] = (DCTELEM)
 8015ecc:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8015ece:	3308      	adds	r3, #8
      DESCALE(tmp10 + MULTIPLY(tmp13, FIX(0.513743148)),  /* c2-c6 */
 8015ed0:	12d2      	asrs	r2, r2, #11
    dataptr[2] = (DCTELEM)
 8015ed2:	601a      	str	r2, [r3, #0]
	      CONST_BITS-PASS1_BITS);
    dataptr[6] = (DCTELEM)
      DESCALE(tmp10 - MULTIPLY(tmp14, FIX(2.176250899)),  /* c2+c6 */
 8015ed4:	697b      	ldr	r3, [r7, #20]
 8015ed6:	4a83      	ldr	r2, [pc, #524]	@ (80160e4 <jpeg_fdct_10x5+0x380>)
 8015ed8:	fb03 f202 	mul.w	r2, r3, r2
 8015edc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8015ede:	4413      	add	r3, r2
 8015ee0:	f503 6280 	add.w	r2, r3, #1024	@ 0x400
    dataptr[6] = (DCTELEM)
 8015ee4:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8015ee6:	3318      	adds	r3, #24
      DESCALE(tmp10 - MULTIPLY(tmp14, FIX(2.176250899)),  /* c2+c6 */
 8015ee8:	12d2      	asrs	r2, r2, #11
    dataptr[6] = (DCTELEM)
 8015eea:	601a      	str	r2, [r3, #0]
	      CONST_BITS-PASS1_BITS);

    /* Odd part */

    tmp10 = tmp0 + tmp4;
 8015eec:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 8015eee:	69fb      	ldr	r3, [r7, #28]
 8015ef0:	4413      	add	r3, r2
 8015ef2:	633b      	str	r3, [r7, #48]	@ 0x30
    tmp11 = tmp1 - tmp3;
 8015ef4:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8015ef6:	6a3b      	ldr	r3, [r7, #32]
 8015ef8:	1ad3      	subs	r3, r2, r3
 8015efa:	62fb      	str	r3, [r7, #44]	@ 0x2c
    dataptr[5] = (DCTELEM) ((tmp10 - tmp11 - tmp2) << PASS1_BITS);
 8015efc:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8015efe:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8015f00:	1ad2      	subs	r2, r2, r3
 8015f02:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8015f04:	1ad2      	subs	r2, r2, r3
 8015f06:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8015f08:	3314      	adds	r3, #20
 8015f0a:	0092      	lsls	r2, r2, #2
 8015f0c:	601a      	str	r2, [r3, #0]
    tmp2 <<= CONST_BITS;
 8015f0e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8015f10:	035b      	lsls	r3, r3, #13
 8015f12:	637b      	str	r3, [r7, #52]	@ 0x34
    dataptr[1] = (DCTELEM)
      DESCALE(MULTIPLY(tmp0, FIX(1.396802247)) +          /* c1 */
 8015f14:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8015f16:	f642 42b3 	movw	r2, #11443	@ 0x2cb3
 8015f1a:	fb03 f202 	mul.w	r2, r3, r2
 8015f1e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8015f20:	f642 0153 	movw	r1, #10323	@ 0x2853
 8015f24:	fb01 f303 	mul.w	r3, r1, r3
 8015f28:	441a      	add	r2, r3
 8015f2a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8015f2c:	441a      	add	r2, r3
 8015f2e:	6a3b      	ldr	r3, [r7, #32]
 8015f30:	f241 418c 	movw	r1, #5260	@ 0x148c
 8015f34:	fb01 f303 	mul.w	r3, r1, r3
 8015f38:	441a      	add	r2, r3
 8015f3a:	69fb      	ldr	r3, [r7, #28]
 8015f3c:	f240 7114 	movw	r1, #1812	@ 0x714
 8015f40:	fb01 f303 	mul.w	r3, r1, r3
 8015f44:	4413      	add	r3, r2
 8015f46:	f503 6280 	add.w	r2, r3, #1024	@ 0x400
    dataptr[1] = (DCTELEM)
 8015f4a:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8015f4c:	3304      	adds	r3, #4
      DESCALE(MULTIPLY(tmp0, FIX(1.396802247)) +          /* c1 */
 8015f4e:	12d2      	asrs	r2, r2, #11
    dataptr[1] = (DCTELEM)
 8015f50:	601a      	str	r2, [r3, #0]
	      MULTIPLY(tmp1, FIX(1.260073511)) + tmp2 +   /* c3 */
	      MULTIPLY(tmp3, FIX(0.642039522)) +          /* c7 */
	      MULTIPLY(tmp4, FIX(0.221231742)),           /* c9 */
	      CONST_BITS-PASS1_BITS);
    tmp12 = MULTIPLY(tmp0 - tmp4, FIX(0.951056516)) -     /* (c3+c7)/2 */
 8015f52:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 8015f54:	69fb      	ldr	r3, [r7, #28]
 8015f56:	1ad3      	subs	r3, r2, r3
 8015f58:	f641 626f 	movw	r2, #7791	@ 0x1e6f
 8015f5c:	fb03 f202 	mul.w	r2, r3, r2
	    MULTIPLY(tmp1 + tmp3, FIX(0.587785252));      /* (c1-c9)/2 */
 8015f60:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 8015f62:	6a3b      	ldr	r3, [r7, #32]
 8015f64:	440b      	add	r3, r1
 8015f66:	4960      	ldr	r1, [pc, #384]	@ (80160e8 <jpeg_fdct_10x5+0x384>)
 8015f68:	fb01 f303 	mul.w	r3, r1, r3
    tmp12 = MULTIPLY(tmp0 - tmp4, FIX(0.951056516)) -     /* (c3+c7)/2 */
 8015f6c:	4413      	add	r3, r2
 8015f6e:	627b      	str	r3, [r7, #36]	@ 0x24
    tmp13 = MULTIPLY(tmp10 + tmp11, FIX(0.309016994)) +   /* (c3-c7)/2 */
 8015f70:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8015f72:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8015f74:	4413      	add	r3, r2
 8015f76:	f640 12e3 	movw	r2, #2531	@ 0x9e3
 8015f7a:	fb03 f202 	mul.w	r2, r3, r2
	    (tmp11 << (CONST_BITS - 1)) - tmp2;
 8015f7e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8015f80:	031b      	lsls	r3, r3, #12
    tmp13 = MULTIPLY(tmp10 + tmp11, FIX(0.309016994)) +   /* (c3-c7)/2 */
 8015f82:	441a      	add	r2, r3
 8015f84:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8015f86:	1ad3      	subs	r3, r2, r3
 8015f88:	61bb      	str	r3, [r7, #24]
    dataptr[3] = (DCTELEM) DESCALE(tmp12 + tmp13, CONST_BITS-PASS1_BITS);
 8015f8a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8015f8c:	69bb      	ldr	r3, [r7, #24]
 8015f8e:	4413      	add	r3, r2
 8015f90:	f503 6280 	add.w	r2, r3, #1024	@ 0x400
 8015f94:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8015f96:	330c      	adds	r3, #12
 8015f98:	12d2      	asrs	r2, r2, #11
 8015f9a:	601a      	str	r2, [r3, #0]
    dataptr[7] = (DCTELEM) DESCALE(tmp12 - tmp13, CONST_BITS-PASS1_BITS);
 8015f9c:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8015f9e:	69bb      	ldr	r3, [r7, #24]
 8015fa0:	1ad3      	subs	r3, r2, r3
 8015fa2:	f503 6280 	add.w	r2, r3, #1024	@ 0x400
 8015fa6:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8015fa8:	331c      	adds	r3, #28
 8015faa:	12d2      	asrs	r2, r2, #11
 8015fac:	601a      	str	r2, [r3, #0]

    dataptr += DCTSIZE;		/* advance pointer to next row */
 8015fae:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8015fb0:	3320      	adds	r3, #32
 8015fb2:	647b      	str	r3, [r7, #68]	@ 0x44
  for (ctr = 0; ctr < 5; ctr++) {
 8015fb4:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8015fb6:	3301      	adds	r3, #1
 8015fb8:	643b      	str	r3, [r7, #64]	@ 0x40
 8015fba:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8015fbc:	2b04      	cmp	r3, #4
 8015fbe:	f77f aee3 	ble.w	8015d88 <jpeg_fdct_10x5+0x24>
   * We must also scale the output by (8/10)*(8/5) = 32/25, which we
   * fold into the constant multipliers:
   * 5-point FDCT kernel, cK represents sqrt(2) * cos(K*pi/10) * 32/25.
   */

  dataptr = data;
 8015fc2:	68fb      	ldr	r3, [r7, #12]
 8015fc4:	647b      	str	r3, [r7, #68]	@ 0x44
  for (ctr = DCTSIZE-1; ctr >= 0; ctr--) {
 8015fc6:	2307      	movs	r3, #7
 8015fc8:	643b      	str	r3, [r7, #64]	@ 0x40
 8015fca:	e07f      	b.n	80160cc <jpeg_fdct_10x5+0x368>
    /* Even part */

    tmp0 = dataptr[DCTSIZE*0] + dataptr[DCTSIZE*4];
 8015fcc:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8015fce:	681a      	ldr	r2, [r3, #0]
 8015fd0:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8015fd2:	3380      	adds	r3, #128	@ 0x80
 8015fd4:	681b      	ldr	r3, [r3, #0]
 8015fd6:	4413      	add	r3, r2
 8015fd8:	63fb      	str	r3, [r7, #60]	@ 0x3c
    tmp1 = dataptr[DCTSIZE*1] + dataptr[DCTSIZE*3];
 8015fda:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8015fdc:	3320      	adds	r3, #32
 8015fde:	681a      	ldr	r2, [r3, #0]
 8015fe0:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8015fe2:	3360      	adds	r3, #96	@ 0x60
 8015fe4:	681b      	ldr	r3, [r3, #0]
 8015fe6:	4413      	add	r3, r2
 8015fe8:	63bb      	str	r3, [r7, #56]	@ 0x38
    tmp2 = dataptr[DCTSIZE*2];
 8015fea:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8015fec:	3340      	adds	r3, #64	@ 0x40
 8015fee:	681b      	ldr	r3, [r3, #0]
 8015ff0:	637b      	str	r3, [r7, #52]	@ 0x34

    tmp10 = tmp0 + tmp1;
 8015ff2:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 8015ff4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8015ff6:	4413      	add	r3, r2
 8015ff8:	633b      	str	r3, [r7, #48]	@ 0x30
    tmp11 = tmp0 - tmp1;
 8015ffa:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 8015ffc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8015ffe:	1ad3      	subs	r3, r2, r3
 8016000:	62fb      	str	r3, [r7, #44]	@ 0x2c

    tmp0 = dataptr[DCTSIZE*0] - dataptr[DCTSIZE*4];
 8016002:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8016004:	681a      	ldr	r2, [r3, #0]
 8016006:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8016008:	3380      	adds	r3, #128	@ 0x80
 801600a:	681b      	ldr	r3, [r3, #0]
 801600c:	1ad3      	subs	r3, r2, r3
 801600e:	63fb      	str	r3, [r7, #60]	@ 0x3c
    tmp1 = dataptr[DCTSIZE*1] - dataptr[DCTSIZE*3];
 8016010:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8016012:	3320      	adds	r3, #32
 8016014:	681a      	ldr	r2, [r3, #0]
 8016016:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8016018:	3360      	adds	r3, #96	@ 0x60
 801601a:	681b      	ldr	r3, [r3, #0]
 801601c:	1ad3      	subs	r3, r2, r3
 801601e:	63bb      	str	r3, [r7, #56]	@ 0x38

    dataptr[DCTSIZE*0] = (DCTELEM)
      DESCALE(MULTIPLY(tmp10 + tmp2, FIX(1.28)),        /* 32/25 */
 8016020:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8016022:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8016024:	4413      	add	r3, r2
 8016026:	f642 02f6 	movw	r2, #10486	@ 0x28f6
 801602a:	fb02 f303 	mul.w	r3, r2, r3
 801602e:	f503 4380 	add.w	r3, r3, #16384	@ 0x4000
 8016032:	13da      	asrs	r2, r3, #15
    dataptr[DCTSIZE*0] = (DCTELEM)
 8016034:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8016036:	601a      	str	r2, [r3, #0]
	      CONST_BITS+PASS1_BITS);
    tmp11 = MULTIPLY(tmp11, FIX(1.011928851));          /* (c2+c4)/2 */
 8016038:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801603a:	f242 0262 	movw	r2, #8290	@ 0x2062
 801603e:	fb02 f303 	mul.w	r3, r2, r3
 8016042:	62fb      	str	r3, [r7, #44]	@ 0x2c
    tmp10 -= tmp2 << 2;
 8016044:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8016046:	009b      	lsls	r3, r3, #2
 8016048:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 801604a:	1ad3      	subs	r3, r2, r3
 801604c:	633b      	str	r3, [r7, #48]	@ 0x30
    tmp10 = MULTIPLY(tmp10, FIX(0.452548340));          /* (c2-c4)/2 */
 801604e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8016050:	f640 627b 	movw	r2, #3707	@ 0xe7b
 8016054:	fb02 f303 	mul.w	r3, r2, r3
 8016058:	633b      	str	r3, [r7, #48]	@ 0x30
    dataptr[DCTSIZE*2] = (DCTELEM) DESCALE(tmp11 + tmp10, CONST_BITS+PASS1_BITS);
 801605a:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 801605c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801605e:	4413      	add	r3, r2
 8016060:	f503 4280 	add.w	r2, r3, #16384	@ 0x4000
 8016064:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8016066:	3340      	adds	r3, #64	@ 0x40
 8016068:	13d2      	asrs	r2, r2, #15
 801606a:	601a      	str	r2, [r3, #0]
    dataptr[DCTSIZE*4] = (DCTELEM) DESCALE(tmp11 - tmp10, CONST_BITS+PASS1_BITS);
 801606c:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 801606e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8016070:	1ad3      	subs	r3, r2, r3
 8016072:	f503 4280 	add.w	r2, r3, #16384	@ 0x4000
 8016076:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8016078:	3380      	adds	r3, #128	@ 0x80
 801607a:	13d2      	asrs	r2, r2, #15
 801607c:	601a      	str	r2, [r3, #0]

    /* Odd part */

    tmp10 = MULTIPLY(tmp0 + tmp1, FIX(1.064004961));    /* c3 */
 801607e:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 8016080:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8016082:	4413      	add	r3, r2
 8016084:	f242 220c 	movw	r2, #8716	@ 0x220c
 8016088:	fb02 f303 	mul.w	r3, r2, r3
 801608c:	633b      	str	r3, [r7, #48]	@ 0x30

    dataptr[DCTSIZE*1] = (DCTELEM)
      DESCALE(tmp10 + MULTIPLY(tmp0, FIX(0.657591230)), /* c1-c3 */
 801608e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8016090:	f241 520b 	movw	r2, #5387	@ 0x150b
 8016094:	fb03 f202 	mul.w	r2, r3, r2
 8016098:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801609a:	4413      	add	r3, r2
 801609c:	f503 4280 	add.w	r2, r3, #16384	@ 0x4000
    dataptr[DCTSIZE*1] = (DCTELEM)
 80160a0:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80160a2:	3320      	adds	r3, #32
      DESCALE(tmp10 + MULTIPLY(tmp0, FIX(0.657591230)), /* c1-c3 */
 80160a4:	13d2      	asrs	r2, r2, #15
    dataptr[DCTSIZE*1] = (DCTELEM)
 80160a6:	601a      	str	r2, [r3, #0]
	      CONST_BITS+PASS1_BITS);
    dataptr[DCTSIZE*3] = (DCTELEM)
      DESCALE(tmp10 - MULTIPLY(tmp1, FIX(2.785601151)), /* c1+c3 */
 80160a8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80160aa:	4a10      	ldr	r2, [pc, #64]	@ (80160ec <jpeg_fdct_10x5+0x388>)
 80160ac:	fb03 f202 	mul.w	r2, r3, r2
 80160b0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80160b2:	4413      	add	r3, r2
 80160b4:	f503 4280 	add.w	r2, r3, #16384	@ 0x4000
    dataptr[DCTSIZE*3] = (DCTELEM)
 80160b8:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80160ba:	3360      	adds	r3, #96	@ 0x60
      DESCALE(tmp10 - MULTIPLY(tmp1, FIX(2.785601151)), /* c1+c3 */
 80160bc:	13d2      	asrs	r2, r2, #15
    dataptr[DCTSIZE*3] = (DCTELEM)
 80160be:	601a      	str	r2, [r3, #0]
	      CONST_BITS+PASS1_BITS);

    dataptr++;			/* advance pointer to next column */
 80160c0:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80160c2:	3304      	adds	r3, #4
 80160c4:	647b      	str	r3, [r7, #68]	@ 0x44
  for (ctr = DCTSIZE-1; ctr >= 0; ctr--) {
 80160c6:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80160c8:	3b01      	subs	r3, #1
 80160ca:	643b      	str	r3, [r7, #64]	@ 0x40
 80160cc:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80160ce:	2b00      	cmp	r3, #0
 80160d0:	f6bf af7c 	bge.w	8015fcc <jpeg_fdct_10x5+0x268>
  }
}
 80160d4:	bf00      	nop
 80160d6:	bf00      	nop
 80160d8:	3748      	adds	r7, #72	@ 0x48
 80160da:	46bd      	mov	sp, r7
 80160dc:	bd80      	pop	{r7, pc}
 80160de:	bf00      	nop
 80160e0:	fffff204 	.word	0xfffff204
 80160e4:	ffffba5c 	.word	0xffffba5c
 80160e8:	ffffed31 	.word	0xffffed31
 80160ec:	ffffa6dc 	.word	0xffffa6dc

080160f0 <jpeg_fdct_8x4>:
 * 8-point FDCT in pass 1 (rows), 4-point in pass 2 (columns).
 */

GLOBAL(void)
jpeg_fdct_8x4 (DCTELEM * data, JSAMPARRAY sample_data, JDIMENSION start_col)
{
 80160f0:	b580      	push	{r7, lr}
 80160f2:	b090      	sub	sp, #64	@ 0x40
 80160f4:	af00      	add	r7, sp, #0
 80160f6:	60f8      	str	r0, [r7, #12]
 80160f8:	60b9      	str	r1, [r7, #8]
 80160fa:	607a      	str	r2, [r7, #4]
  JSAMPROW elemptr;
  int ctr;
  SHIFT_TEMPS

  /* Zero 4 bottom rows of output coefficient block. */
  MEMZERO(&data[DCTSIZE*4], SIZEOF(DCTELEM) * DCTSIZE * 4);
 80160fc:	68fb      	ldr	r3, [r7, #12]
 80160fe:	3380      	adds	r3, #128	@ 0x80
 8016100:	2280      	movs	r2, #128	@ 0x80
 8016102:	2100      	movs	r1, #0
 8016104:	4618      	mov	r0, r3
 8016106:	f003 fc73 	bl	80199f0 <memset>
  /* Pass 1: process rows. */
  /* Note results are scaled up by sqrt(8) compared to a true DCT; */
  /* furthermore, we scale the results by 2**PASS1_BITS. */
  /* We must also scale the output by 8/4 = 2, which we add here. */

  dataptr = data;
 801610a:	68fb      	ldr	r3, [r7, #12]
 801610c:	63fb      	str	r3, [r7, #60]	@ 0x3c
  for (ctr = 0; ctr < 4; ctr++) {
 801610e:	2300      	movs	r3, #0
 8016110:	63bb      	str	r3, [r7, #56]	@ 0x38
 8016112:	e107      	b.n	8016324 <jpeg_fdct_8x4+0x234>
    elemptr = sample_data[ctr] + start_col;
 8016114:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8016116:	009b      	lsls	r3, r3, #2
 8016118:	68ba      	ldr	r2, [r7, #8]
 801611a:	4413      	add	r3, r2
 801611c:	681a      	ldr	r2, [r3, #0]
 801611e:	687b      	ldr	r3, [r7, #4]
 8016120:	4413      	add	r3, r2
 8016122:	627b      	str	r3, [r7, #36]	@ 0x24

    /* Even part per LL&M figure 1 --- note that published figure is faulty;
     * rotator "sqrt(2)*c1" should be "sqrt(2)*c6".
     */

    tmp0 = GETJSAMPLE(elemptr[0]) + GETJSAMPLE(elemptr[7]);
 8016124:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8016126:	781b      	ldrb	r3, [r3, #0]
 8016128:	461a      	mov	r2, r3
 801612a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801612c:	3307      	adds	r3, #7
 801612e:	781b      	ldrb	r3, [r3, #0]
 8016130:	4413      	add	r3, r2
 8016132:	637b      	str	r3, [r7, #52]	@ 0x34
    tmp1 = GETJSAMPLE(elemptr[1]) + GETJSAMPLE(elemptr[6]);
 8016134:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8016136:	3301      	adds	r3, #1
 8016138:	781b      	ldrb	r3, [r3, #0]
 801613a:	461a      	mov	r2, r3
 801613c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801613e:	3306      	adds	r3, #6
 8016140:	781b      	ldrb	r3, [r3, #0]
 8016142:	4413      	add	r3, r2
 8016144:	633b      	str	r3, [r7, #48]	@ 0x30
    tmp2 = GETJSAMPLE(elemptr[2]) + GETJSAMPLE(elemptr[5]);
 8016146:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8016148:	3302      	adds	r3, #2
 801614a:	781b      	ldrb	r3, [r3, #0]
 801614c:	461a      	mov	r2, r3
 801614e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8016150:	3305      	adds	r3, #5
 8016152:	781b      	ldrb	r3, [r3, #0]
 8016154:	4413      	add	r3, r2
 8016156:	623b      	str	r3, [r7, #32]
    tmp3 = GETJSAMPLE(elemptr[3]) + GETJSAMPLE(elemptr[4]);
 8016158:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801615a:	3303      	adds	r3, #3
 801615c:	781b      	ldrb	r3, [r3, #0]
 801615e:	461a      	mov	r2, r3
 8016160:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8016162:	3304      	adds	r3, #4
 8016164:	781b      	ldrb	r3, [r3, #0]
 8016166:	4413      	add	r3, r2
 8016168:	61fb      	str	r3, [r7, #28]

    tmp10 = tmp0 + tmp3;
 801616a:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 801616c:	69fb      	ldr	r3, [r7, #28]
 801616e:	4413      	add	r3, r2
 8016170:	62fb      	str	r3, [r7, #44]	@ 0x2c
    tmp12 = tmp0 - tmp3;
 8016172:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8016174:	69fb      	ldr	r3, [r7, #28]
 8016176:	1ad3      	subs	r3, r2, r3
 8016178:	61bb      	str	r3, [r7, #24]
    tmp11 = tmp1 + tmp2;
 801617a:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 801617c:	6a3b      	ldr	r3, [r7, #32]
 801617e:	4413      	add	r3, r2
 8016180:	62bb      	str	r3, [r7, #40]	@ 0x28
    tmp13 = tmp1 - tmp2;
 8016182:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8016184:	6a3b      	ldr	r3, [r7, #32]
 8016186:	1ad3      	subs	r3, r2, r3
 8016188:	617b      	str	r3, [r7, #20]

    tmp0 = GETJSAMPLE(elemptr[0]) - GETJSAMPLE(elemptr[7]);
 801618a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801618c:	781b      	ldrb	r3, [r3, #0]
 801618e:	461a      	mov	r2, r3
 8016190:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8016192:	3307      	adds	r3, #7
 8016194:	781b      	ldrb	r3, [r3, #0]
 8016196:	1ad3      	subs	r3, r2, r3
 8016198:	637b      	str	r3, [r7, #52]	@ 0x34
    tmp1 = GETJSAMPLE(elemptr[1]) - GETJSAMPLE(elemptr[6]);
 801619a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801619c:	3301      	adds	r3, #1
 801619e:	781b      	ldrb	r3, [r3, #0]
 80161a0:	461a      	mov	r2, r3
 80161a2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80161a4:	3306      	adds	r3, #6
 80161a6:	781b      	ldrb	r3, [r3, #0]
 80161a8:	1ad3      	subs	r3, r2, r3
 80161aa:	633b      	str	r3, [r7, #48]	@ 0x30
    tmp2 = GETJSAMPLE(elemptr[2]) - GETJSAMPLE(elemptr[5]);
 80161ac:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80161ae:	3302      	adds	r3, #2
 80161b0:	781b      	ldrb	r3, [r3, #0]
 80161b2:	461a      	mov	r2, r3
 80161b4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80161b6:	3305      	adds	r3, #5
 80161b8:	781b      	ldrb	r3, [r3, #0]
 80161ba:	1ad3      	subs	r3, r2, r3
 80161bc:	623b      	str	r3, [r7, #32]
    tmp3 = GETJSAMPLE(elemptr[3]) - GETJSAMPLE(elemptr[4]);
 80161be:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80161c0:	3303      	adds	r3, #3
 80161c2:	781b      	ldrb	r3, [r3, #0]
 80161c4:	461a      	mov	r2, r3
 80161c6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80161c8:	3304      	adds	r3, #4
 80161ca:	781b      	ldrb	r3, [r3, #0]
 80161cc:	1ad3      	subs	r3, r2, r3
 80161ce:	61fb      	str	r3, [r7, #28]

    /* Apply unsigned->signed conversion */
    dataptr[0] = (DCTELEM)
      ((tmp10 + tmp11 - 8 * CENTERJSAMPLE) << (PASS1_BITS+1));
 80161d0:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80161d2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80161d4:	4413      	add	r3, r2
 80161d6:	f5a3 6380 	sub.w	r3, r3, #1024	@ 0x400
 80161da:	00da      	lsls	r2, r3, #3
    dataptr[0] = (DCTELEM)
 80161dc:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80161de:	601a      	str	r2, [r3, #0]
    dataptr[4] = (DCTELEM) ((tmp10 - tmp11) << (PASS1_BITS+1));
 80161e0:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80161e2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80161e4:	1ad2      	subs	r2, r2, r3
 80161e6:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80161e8:	3310      	adds	r3, #16
 80161ea:	00d2      	lsls	r2, r2, #3
 80161ec:	601a      	str	r2, [r3, #0]

    z1 = MULTIPLY(tmp12 + tmp13, FIX_0_541196100);
 80161ee:	69ba      	ldr	r2, [r7, #24]
 80161f0:	697b      	ldr	r3, [r7, #20]
 80161f2:	4413      	add	r3, r2
 80161f4:	f241 1251 	movw	r2, #4433	@ 0x1151
 80161f8:	fb02 f303 	mul.w	r3, r2, r3
 80161fc:	613b      	str	r3, [r7, #16]
    /* Add fudge factor here for final descale. */
    z1 += ONE << (CONST_BITS-PASS1_BITS-2);
 80161fe:	693b      	ldr	r3, [r7, #16]
 8016200:	f503 7300 	add.w	r3, r3, #512	@ 0x200
 8016204:	613b      	str	r3, [r7, #16]
    dataptr[2] = (DCTELEM) RIGHT_SHIFT(z1 + MULTIPLY(tmp12, FIX_0_765366865),
 8016206:	69bb      	ldr	r3, [r7, #24]
 8016208:	f641 027e 	movw	r2, #6270	@ 0x187e
 801620c:	fb03 f202 	mul.w	r2, r3, r2
 8016210:	693b      	ldr	r3, [r7, #16]
 8016212:	441a      	add	r2, r3
 8016214:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8016216:	3308      	adds	r3, #8
 8016218:	1292      	asrs	r2, r2, #10
 801621a:	601a      	str	r2, [r3, #0]
				       CONST_BITS-PASS1_BITS-1);
    dataptr[6] = (DCTELEM) RIGHT_SHIFT(z1 - MULTIPLY(tmp13, FIX_1_847759065),
 801621c:	697b      	ldr	r3, [r7, #20]
 801621e:	4a73      	ldr	r2, [pc, #460]	@ (80163ec <jpeg_fdct_8x4+0x2fc>)
 8016220:	fb03 f202 	mul.w	r2, r3, r2
 8016224:	693b      	ldr	r3, [r7, #16]
 8016226:	441a      	add	r2, r3
 8016228:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 801622a:	3318      	adds	r3, #24
 801622c:	1292      	asrs	r2, r2, #10
 801622e:	601a      	str	r2, [r3, #0]
    /* Odd part per figure 8 --- note paper omits factor of sqrt(2).
     * 8-point FDCT kernel, cK represents sqrt(2) * cos(K*pi/16).
     * i0..i3 in the paper are tmp0..tmp3 here.
     */

    tmp10 = tmp0 + tmp3;
 8016230:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8016232:	69fb      	ldr	r3, [r7, #28]
 8016234:	4413      	add	r3, r2
 8016236:	62fb      	str	r3, [r7, #44]	@ 0x2c
    tmp11 = tmp1 + tmp2;
 8016238:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 801623a:	6a3b      	ldr	r3, [r7, #32]
 801623c:	4413      	add	r3, r2
 801623e:	62bb      	str	r3, [r7, #40]	@ 0x28
    tmp12 = tmp0 + tmp2;
 8016240:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8016242:	6a3b      	ldr	r3, [r7, #32]
 8016244:	4413      	add	r3, r2
 8016246:	61bb      	str	r3, [r7, #24]
    tmp13 = tmp1 + tmp3;
 8016248:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 801624a:	69fb      	ldr	r3, [r7, #28]
 801624c:	4413      	add	r3, r2
 801624e:	617b      	str	r3, [r7, #20]
    z1 = MULTIPLY(tmp12 + tmp13, FIX_1_175875602); /*  c3 */
 8016250:	69ba      	ldr	r2, [r7, #24]
 8016252:	697b      	ldr	r3, [r7, #20]
 8016254:	4413      	add	r3, r2
 8016256:	f242 52a1 	movw	r2, #9633	@ 0x25a1
 801625a:	fb02 f303 	mul.w	r3, r2, r3
 801625e:	613b      	str	r3, [r7, #16]
    /* Add fudge factor here for final descale. */
    z1 += ONE << (CONST_BITS-PASS1_BITS-2);
 8016260:	693b      	ldr	r3, [r7, #16]
 8016262:	f503 7300 	add.w	r3, r3, #512	@ 0x200
 8016266:	613b      	str	r3, [r7, #16]

    tmp0  = MULTIPLY(tmp0,    FIX_1_501321110);    /*  c1+c3-c5-c7 */
 8016268:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 801626a:	f243 020b 	movw	r2, #12299	@ 0x300b
 801626e:	fb02 f303 	mul.w	r3, r2, r3
 8016272:	637b      	str	r3, [r7, #52]	@ 0x34
    tmp1  = MULTIPLY(tmp1,    FIX_3_072711026);    /*  c1+c3+c5-c7 */
 8016274:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8016276:	f246 2254 	movw	r2, #25172	@ 0x6254
 801627a:	fb02 f303 	mul.w	r3, r2, r3
 801627e:	633b      	str	r3, [r7, #48]	@ 0x30
    tmp2  = MULTIPLY(tmp2,    FIX_2_053119869);    /*  c1+c3-c5+c7 */
 8016280:	6a3b      	ldr	r3, [r7, #32]
 8016282:	f244 12b3 	movw	r2, #16819	@ 0x41b3
 8016286:	fb02 f303 	mul.w	r3, r2, r3
 801628a:	623b      	str	r3, [r7, #32]
    tmp3  = MULTIPLY(tmp3,    FIX_0_298631336);    /* -c1+c3+c5-c7 */
 801628c:	69fb      	ldr	r3, [r7, #28]
 801628e:	f640 128e 	movw	r2, #2446	@ 0x98e
 8016292:	fb02 f303 	mul.w	r3, r2, r3
 8016296:	61fb      	str	r3, [r7, #28]
    tmp10 = MULTIPLY(tmp10, - FIX_0_899976223);    /*  c7-c3 */
 8016298:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801629a:	4a55      	ldr	r2, [pc, #340]	@ (80163f0 <jpeg_fdct_8x4+0x300>)
 801629c:	fb02 f303 	mul.w	r3, r2, r3
 80162a0:	62fb      	str	r3, [r7, #44]	@ 0x2c
    tmp11 = MULTIPLY(tmp11, - FIX_2_562915447);    /* -c1-c3 */
 80162a2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80162a4:	4a53      	ldr	r2, [pc, #332]	@ (80163f4 <jpeg_fdct_8x4+0x304>)
 80162a6:	fb02 f303 	mul.w	r3, r2, r3
 80162aa:	62bb      	str	r3, [r7, #40]	@ 0x28
    tmp12 = MULTIPLY(tmp12, - FIX_0_390180644);    /*  c5-c3 */
 80162ac:	69bb      	ldr	r3, [r7, #24]
 80162ae:	4a52      	ldr	r2, [pc, #328]	@ (80163f8 <jpeg_fdct_8x4+0x308>)
 80162b0:	fb02 f303 	mul.w	r3, r2, r3
 80162b4:	61bb      	str	r3, [r7, #24]
    tmp13 = MULTIPLY(tmp13, - FIX_1_961570560);    /* -c3-c5 */
 80162b6:	697b      	ldr	r3, [r7, #20]
 80162b8:	4a50      	ldr	r2, [pc, #320]	@ (80163fc <jpeg_fdct_8x4+0x30c>)
 80162ba:	fb02 f303 	mul.w	r3, r2, r3
 80162be:	617b      	str	r3, [r7, #20]

    tmp12 += z1;
 80162c0:	69ba      	ldr	r2, [r7, #24]
 80162c2:	693b      	ldr	r3, [r7, #16]
 80162c4:	4413      	add	r3, r2
 80162c6:	61bb      	str	r3, [r7, #24]
    tmp13 += z1;
 80162c8:	697a      	ldr	r2, [r7, #20]
 80162ca:	693b      	ldr	r3, [r7, #16]
 80162cc:	4413      	add	r3, r2
 80162ce:	617b      	str	r3, [r7, #20]

    dataptr[1] = (DCTELEM)
      RIGHT_SHIFT(tmp0 + tmp10 + tmp12, CONST_BITS-PASS1_BITS-1);
 80162d0:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 80162d2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80162d4:	441a      	add	r2, r3
 80162d6:	69bb      	ldr	r3, [r7, #24]
 80162d8:	441a      	add	r2, r3
    dataptr[1] = (DCTELEM)
 80162da:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80162dc:	3304      	adds	r3, #4
      RIGHT_SHIFT(tmp0 + tmp10 + tmp12, CONST_BITS-PASS1_BITS-1);
 80162de:	1292      	asrs	r2, r2, #10
    dataptr[1] = (DCTELEM)
 80162e0:	601a      	str	r2, [r3, #0]
    dataptr[3] = (DCTELEM)
      RIGHT_SHIFT(tmp1 + tmp11 + tmp13, CONST_BITS-PASS1_BITS-1);
 80162e2:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80162e4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80162e6:	441a      	add	r2, r3
 80162e8:	697b      	ldr	r3, [r7, #20]
 80162ea:	441a      	add	r2, r3
    dataptr[3] = (DCTELEM)
 80162ec:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80162ee:	330c      	adds	r3, #12
      RIGHT_SHIFT(tmp1 + tmp11 + tmp13, CONST_BITS-PASS1_BITS-1);
 80162f0:	1292      	asrs	r2, r2, #10
    dataptr[3] = (DCTELEM)
 80162f2:	601a      	str	r2, [r3, #0]
    dataptr[5] = (DCTELEM)
      RIGHT_SHIFT(tmp2 + tmp11 + tmp12, CONST_BITS-PASS1_BITS-1);
 80162f4:	6a3a      	ldr	r2, [r7, #32]
 80162f6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80162f8:	441a      	add	r2, r3
 80162fa:	69bb      	ldr	r3, [r7, #24]
 80162fc:	441a      	add	r2, r3
    dataptr[5] = (DCTELEM)
 80162fe:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8016300:	3314      	adds	r3, #20
      RIGHT_SHIFT(tmp2 + tmp11 + tmp12, CONST_BITS-PASS1_BITS-1);
 8016302:	1292      	asrs	r2, r2, #10
    dataptr[5] = (DCTELEM)
 8016304:	601a      	str	r2, [r3, #0]
    dataptr[7] = (DCTELEM)
      RIGHT_SHIFT(tmp3 + tmp10 + tmp13, CONST_BITS-PASS1_BITS-1);
 8016306:	69fa      	ldr	r2, [r7, #28]
 8016308:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801630a:	441a      	add	r2, r3
 801630c:	697b      	ldr	r3, [r7, #20]
 801630e:	441a      	add	r2, r3
    dataptr[7] = (DCTELEM)
 8016310:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8016312:	331c      	adds	r3, #28
      RIGHT_SHIFT(tmp3 + tmp10 + tmp13, CONST_BITS-PASS1_BITS-1);
 8016314:	1292      	asrs	r2, r2, #10
    dataptr[7] = (DCTELEM)
 8016316:	601a      	str	r2, [r3, #0]

    dataptr += DCTSIZE;		/* advance pointer to next row */
 8016318:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 801631a:	3320      	adds	r3, #32
 801631c:	63fb      	str	r3, [r7, #60]	@ 0x3c
  for (ctr = 0; ctr < 4; ctr++) {
 801631e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8016320:	3301      	adds	r3, #1
 8016322:	63bb      	str	r3, [r7, #56]	@ 0x38
 8016324:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8016326:	2b03      	cmp	r3, #3
 8016328:	f77f aef4 	ble.w	8016114 <jpeg_fdct_8x4+0x24>
   * We remove the PASS1_BITS scaling, but leave the results scaled up
   * by an overall factor of 8.
   * 4-point FDCT kernel, cK represents sqrt(2) * cos(K*pi/16).
   */

  dataptr = data;
 801632c:	68fb      	ldr	r3, [r7, #12]
 801632e:	63fb      	str	r3, [r7, #60]	@ 0x3c
  for (ctr = DCTSIZE-1; ctr >= 0; ctr--) {
 8016330:	2307      	movs	r3, #7
 8016332:	63bb      	str	r3, [r7, #56]	@ 0x38
 8016334:	e052      	b.n	80163dc <jpeg_fdct_8x4+0x2ec>
    /* Even part */

    /* Add fudge factor here for final descale. */
    tmp0 = dataptr[DCTSIZE*0] + dataptr[DCTSIZE*3] + (ONE << (PASS1_BITS-1));
 8016336:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8016338:	681a      	ldr	r2, [r3, #0]
 801633a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 801633c:	3360      	adds	r3, #96	@ 0x60
 801633e:	681b      	ldr	r3, [r3, #0]
 8016340:	4413      	add	r3, r2
 8016342:	3302      	adds	r3, #2
 8016344:	637b      	str	r3, [r7, #52]	@ 0x34
    tmp1 = dataptr[DCTSIZE*1] + dataptr[DCTSIZE*2];
 8016346:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8016348:	3320      	adds	r3, #32
 801634a:	681a      	ldr	r2, [r3, #0]
 801634c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 801634e:	3340      	adds	r3, #64	@ 0x40
 8016350:	681b      	ldr	r3, [r3, #0]
 8016352:	4413      	add	r3, r2
 8016354:	633b      	str	r3, [r7, #48]	@ 0x30

    tmp10 = dataptr[DCTSIZE*0] - dataptr[DCTSIZE*3];
 8016356:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8016358:	681a      	ldr	r2, [r3, #0]
 801635a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 801635c:	3360      	adds	r3, #96	@ 0x60
 801635e:	681b      	ldr	r3, [r3, #0]
 8016360:	1ad3      	subs	r3, r2, r3
 8016362:	62fb      	str	r3, [r7, #44]	@ 0x2c
    tmp11 = dataptr[DCTSIZE*1] - dataptr[DCTSIZE*2];
 8016364:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8016366:	3320      	adds	r3, #32
 8016368:	681a      	ldr	r2, [r3, #0]
 801636a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 801636c:	3340      	adds	r3, #64	@ 0x40
 801636e:	681b      	ldr	r3, [r3, #0]
 8016370:	1ad3      	subs	r3, r2, r3
 8016372:	62bb      	str	r3, [r7, #40]	@ 0x28

    dataptr[DCTSIZE*0] = (DCTELEM) RIGHT_SHIFT(tmp0 + tmp1, PASS1_BITS);
 8016374:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8016376:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8016378:	4413      	add	r3, r2
 801637a:	109a      	asrs	r2, r3, #2
 801637c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 801637e:	601a      	str	r2, [r3, #0]
    dataptr[DCTSIZE*2] = (DCTELEM) RIGHT_SHIFT(tmp0 - tmp1, PASS1_BITS);
 8016380:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8016382:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8016384:	1ad2      	subs	r2, r2, r3
 8016386:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8016388:	3340      	adds	r3, #64	@ 0x40
 801638a:	1092      	asrs	r2, r2, #2
 801638c:	601a      	str	r2, [r3, #0]

    /* Odd part */

    tmp0 = MULTIPLY(tmp10 + tmp11, FIX_0_541196100);   /* c6 */
 801638e:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8016390:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8016392:	4413      	add	r3, r2
 8016394:	f241 1251 	movw	r2, #4433	@ 0x1151
 8016398:	fb02 f303 	mul.w	r3, r2, r3
 801639c:	637b      	str	r3, [r7, #52]	@ 0x34
    /* Add fudge factor here for final descale. */
    tmp0 += ONE << (CONST_BITS+PASS1_BITS-1);
 801639e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80163a0:	f503 4380 	add.w	r3, r3, #16384	@ 0x4000
 80163a4:	637b      	str	r3, [r7, #52]	@ 0x34

    dataptr[DCTSIZE*1] = (DCTELEM)
      RIGHT_SHIFT(tmp0 + MULTIPLY(tmp10, FIX_0_765366865), /* c2-c6 */
 80163a6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80163a8:	f641 027e 	movw	r2, #6270	@ 0x187e
 80163ac:	fb03 f202 	mul.w	r2, r3, r2
 80163b0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80163b2:	441a      	add	r2, r3
    dataptr[DCTSIZE*1] = (DCTELEM)
 80163b4:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80163b6:	3320      	adds	r3, #32
      RIGHT_SHIFT(tmp0 + MULTIPLY(tmp10, FIX_0_765366865), /* c2-c6 */
 80163b8:	13d2      	asrs	r2, r2, #15
    dataptr[DCTSIZE*1] = (DCTELEM)
 80163ba:	601a      	str	r2, [r3, #0]
		  CONST_BITS+PASS1_BITS);
    dataptr[DCTSIZE*3] = (DCTELEM)
      RIGHT_SHIFT(tmp0 - MULTIPLY(tmp11, FIX_1_847759065), /* c2+c6 */
 80163bc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80163be:	4a0b      	ldr	r2, [pc, #44]	@ (80163ec <jpeg_fdct_8x4+0x2fc>)
 80163c0:	fb03 f202 	mul.w	r2, r3, r2
 80163c4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80163c6:	441a      	add	r2, r3
    dataptr[DCTSIZE*3] = (DCTELEM)
 80163c8:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80163ca:	3360      	adds	r3, #96	@ 0x60
      RIGHT_SHIFT(tmp0 - MULTIPLY(tmp11, FIX_1_847759065), /* c2+c6 */
 80163cc:	13d2      	asrs	r2, r2, #15
    dataptr[DCTSIZE*3] = (DCTELEM)
 80163ce:	601a      	str	r2, [r3, #0]
		  CONST_BITS+PASS1_BITS);

    dataptr++;			/* advance pointer to next column */
 80163d0:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80163d2:	3304      	adds	r3, #4
 80163d4:	63fb      	str	r3, [r7, #60]	@ 0x3c
  for (ctr = DCTSIZE-1; ctr >= 0; ctr--) {
 80163d6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80163d8:	3b01      	subs	r3, #1
 80163da:	63bb      	str	r3, [r7, #56]	@ 0x38
 80163dc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80163de:	2b00      	cmp	r3, #0
 80163e0:	daa9      	bge.n	8016336 <jpeg_fdct_8x4+0x246>
  }
}
 80163e2:	bf00      	nop
 80163e4:	bf00      	nop
 80163e6:	3740      	adds	r7, #64	@ 0x40
 80163e8:	46bd      	mov	sp, r7
 80163ea:	bd80      	pop	{r7, pc}
 80163ec:	ffffc4df 	.word	0xffffc4df
 80163f0:	ffffe333 	.word	0xffffe333
 80163f4:	ffffadfd 	.word	0xffffadfd
 80163f8:	fffff384 	.word	0xfffff384
 80163fc:	ffffc13b 	.word	0xffffc13b

08016400 <jpeg_fdct_6x3>:
 * 6-point FDCT in pass 1 (rows), 3-point in pass 2 (columns).
 */

GLOBAL(void)
jpeg_fdct_6x3 (DCTELEM * data, JSAMPARRAY sample_data, JDIMENSION start_col)
{
 8016400:	b580      	push	{r7, lr}
 8016402:	b08e      	sub	sp, #56	@ 0x38
 8016404:	af00      	add	r7, sp, #0
 8016406:	60f8      	str	r0, [r7, #12]
 8016408:	60b9      	str	r1, [r7, #8]
 801640a:	607a      	str	r2, [r7, #4]
  JSAMPROW elemptr;
  int ctr;
  SHIFT_TEMPS

  /* Pre-zero output coefficient block. */
  MEMZERO(data, SIZEOF(DCTELEM) * DCTSIZE2);
 801640c:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8016410:	2100      	movs	r1, #0
 8016412:	68f8      	ldr	r0, [r7, #12]
 8016414:	f003 faec 	bl	80199f0 <memset>
  /* furthermore, we scale the results by 2**PASS1_BITS. */
  /* We scale the results further by 2 as part of output adaption */
  /* scaling for different DCT size. */
  /* 6-point FDCT kernel, cK represents sqrt(2) * cos(K*pi/12). */

  dataptr = data;
 8016418:	68fb      	ldr	r3, [r7, #12]
 801641a:	637b      	str	r3, [r7, #52]	@ 0x34
  for (ctr = 0; ctr < 3; ctr++) {
 801641c:	2300      	movs	r3, #0
 801641e:	633b      	str	r3, [r7, #48]	@ 0x30
 8016420:	e091      	b.n	8016546 <jpeg_fdct_6x3+0x146>
    elemptr = sample_data[ctr] + start_col;
 8016422:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8016424:	009b      	lsls	r3, r3, #2
 8016426:	68ba      	ldr	r2, [r7, #8]
 8016428:	4413      	add	r3, r2
 801642a:	681a      	ldr	r2, [r3, #0]
 801642c:	687b      	ldr	r3, [r7, #4]
 801642e:	4413      	add	r3, r2
 8016430:	623b      	str	r3, [r7, #32]

    /* Even part */

    tmp0 = GETJSAMPLE(elemptr[0]) + GETJSAMPLE(elemptr[5]);
 8016432:	6a3b      	ldr	r3, [r7, #32]
 8016434:	781b      	ldrb	r3, [r3, #0]
 8016436:	461a      	mov	r2, r3
 8016438:	6a3b      	ldr	r3, [r7, #32]
 801643a:	3305      	adds	r3, #5
 801643c:	781b      	ldrb	r3, [r3, #0]
 801643e:	4413      	add	r3, r2
 8016440:	62fb      	str	r3, [r7, #44]	@ 0x2c
    tmp11 = GETJSAMPLE(elemptr[1]) + GETJSAMPLE(elemptr[4]);
 8016442:	6a3b      	ldr	r3, [r7, #32]
 8016444:	3301      	adds	r3, #1
 8016446:	781b      	ldrb	r3, [r3, #0]
 8016448:	461a      	mov	r2, r3
 801644a:	6a3b      	ldr	r3, [r7, #32]
 801644c:	3304      	adds	r3, #4
 801644e:	781b      	ldrb	r3, [r3, #0]
 8016450:	4413      	add	r3, r2
 8016452:	61fb      	str	r3, [r7, #28]
    tmp2 = GETJSAMPLE(elemptr[2]) + GETJSAMPLE(elemptr[3]);
 8016454:	6a3b      	ldr	r3, [r7, #32]
 8016456:	3302      	adds	r3, #2
 8016458:	781b      	ldrb	r3, [r3, #0]
 801645a:	461a      	mov	r2, r3
 801645c:	6a3b      	ldr	r3, [r7, #32]
 801645e:	3303      	adds	r3, #3
 8016460:	781b      	ldrb	r3, [r3, #0]
 8016462:	4413      	add	r3, r2
 8016464:	627b      	str	r3, [r7, #36]	@ 0x24

    tmp10 = tmp0 + tmp2;
 8016466:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8016468:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801646a:	4413      	add	r3, r2
 801646c:	61bb      	str	r3, [r7, #24]
    tmp12 = tmp0 - tmp2;
 801646e:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8016470:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8016472:	1ad3      	subs	r3, r2, r3
 8016474:	617b      	str	r3, [r7, #20]

    tmp0 = GETJSAMPLE(elemptr[0]) - GETJSAMPLE(elemptr[5]);
 8016476:	6a3b      	ldr	r3, [r7, #32]
 8016478:	781b      	ldrb	r3, [r3, #0]
 801647a:	461a      	mov	r2, r3
 801647c:	6a3b      	ldr	r3, [r7, #32]
 801647e:	3305      	adds	r3, #5
 8016480:	781b      	ldrb	r3, [r3, #0]
 8016482:	1ad3      	subs	r3, r2, r3
 8016484:	62fb      	str	r3, [r7, #44]	@ 0x2c
    tmp1 = GETJSAMPLE(elemptr[1]) - GETJSAMPLE(elemptr[4]);
 8016486:	6a3b      	ldr	r3, [r7, #32]
 8016488:	3301      	adds	r3, #1
 801648a:	781b      	ldrb	r3, [r3, #0]
 801648c:	461a      	mov	r2, r3
 801648e:	6a3b      	ldr	r3, [r7, #32]
 8016490:	3304      	adds	r3, #4
 8016492:	781b      	ldrb	r3, [r3, #0]
 8016494:	1ad3      	subs	r3, r2, r3
 8016496:	62bb      	str	r3, [r7, #40]	@ 0x28
    tmp2 = GETJSAMPLE(elemptr[2]) - GETJSAMPLE(elemptr[3]);
 8016498:	6a3b      	ldr	r3, [r7, #32]
 801649a:	3302      	adds	r3, #2
 801649c:	781b      	ldrb	r3, [r3, #0]
 801649e:	461a      	mov	r2, r3
 80164a0:	6a3b      	ldr	r3, [r7, #32]
 80164a2:	3303      	adds	r3, #3
 80164a4:	781b      	ldrb	r3, [r3, #0]
 80164a6:	1ad3      	subs	r3, r2, r3
 80164a8:	627b      	str	r3, [r7, #36]	@ 0x24

    /* Apply unsigned->signed conversion */
    dataptr[0] = (DCTELEM)
      ((tmp10 + tmp11 - 6 * CENTERJSAMPLE) << (PASS1_BITS+1));
 80164aa:	69ba      	ldr	r2, [r7, #24]
 80164ac:	69fb      	ldr	r3, [r7, #28]
 80164ae:	4413      	add	r3, r2
 80164b0:	f5a3 7340 	sub.w	r3, r3, #768	@ 0x300
 80164b4:	00da      	lsls	r2, r3, #3
    dataptr[0] = (DCTELEM)
 80164b6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80164b8:	601a      	str	r2, [r3, #0]
    dataptr[2] = (DCTELEM)
      DESCALE(MULTIPLY(tmp12, FIX(1.224744871)),                 /* c2 */
 80164ba:	697b      	ldr	r3, [r7, #20]
 80164bc:	f242 7231 	movw	r2, #10033	@ 0x2731
 80164c0:	fb02 f303 	mul.w	r3, r2, r3
 80164c4:	f503 7200 	add.w	r2, r3, #512	@ 0x200
    dataptr[2] = (DCTELEM)
 80164c8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80164ca:	3308      	adds	r3, #8
      DESCALE(MULTIPLY(tmp12, FIX(1.224744871)),                 /* c2 */
 80164cc:	1292      	asrs	r2, r2, #10
    dataptr[2] = (DCTELEM)
 80164ce:	601a      	str	r2, [r3, #0]
	      CONST_BITS-PASS1_BITS-1);
    dataptr[4] = (DCTELEM)
      DESCALE(MULTIPLY(tmp10 - tmp11 - tmp11, FIX(0.707106781)), /* c4 */
 80164d0:	69ba      	ldr	r2, [r7, #24]
 80164d2:	69fb      	ldr	r3, [r7, #28]
 80164d4:	1ad2      	subs	r2, r2, r3
 80164d6:	69fb      	ldr	r3, [r7, #28]
 80164d8:	1ad3      	subs	r3, r2, r3
 80164da:	f241 62a1 	movw	r2, #5793	@ 0x16a1
 80164de:	fb02 f303 	mul.w	r3, r2, r3
 80164e2:	f503 7200 	add.w	r2, r3, #512	@ 0x200
    dataptr[4] = (DCTELEM)
 80164e6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80164e8:	3310      	adds	r3, #16
      DESCALE(MULTIPLY(tmp10 - tmp11 - tmp11, FIX(0.707106781)), /* c4 */
 80164ea:	1292      	asrs	r2, r2, #10
    dataptr[4] = (DCTELEM)
 80164ec:	601a      	str	r2, [r3, #0]
	      CONST_BITS-PASS1_BITS-1);

    /* Odd part */

    tmp10 = DESCALE(MULTIPLY(tmp0 + tmp2, FIX(0.366025404)),     /* c5 */
 80164ee:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80164f0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80164f2:	4413      	add	r3, r2
 80164f4:	f640 32b6 	movw	r2, #2998	@ 0xbb6
 80164f8:	fb02 f303 	mul.w	r3, r2, r3
 80164fc:	f503 7300 	add.w	r3, r3, #512	@ 0x200
 8016500:	129b      	asrs	r3, r3, #10
 8016502:	61bb      	str	r3, [r7, #24]
		    CONST_BITS-PASS1_BITS-1);

    dataptr[1] = (DCTELEM) (tmp10 + ((tmp0 + tmp1) << (PASS1_BITS+1)));
 8016504:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8016506:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8016508:	4413      	add	r3, r2
 801650a:	00d9      	lsls	r1, r3, #3
 801650c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 801650e:	3304      	adds	r3, #4
 8016510:	69ba      	ldr	r2, [r7, #24]
 8016512:	440a      	add	r2, r1
 8016514:	601a      	str	r2, [r3, #0]
    dataptr[3] = (DCTELEM) ((tmp0 - tmp1 - tmp2) << (PASS1_BITS+1));
 8016516:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8016518:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801651a:	1ad2      	subs	r2, r2, r3
 801651c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801651e:	1ad2      	subs	r2, r2, r3
 8016520:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8016522:	330c      	adds	r3, #12
 8016524:	00d2      	lsls	r2, r2, #3
 8016526:	601a      	str	r2, [r3, #0]
    dataptr[5] = (DCTELEM) (tmp10 + ((tmp2 - tmp1) << (PASS1_BITS+1)));
 8016528:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 801652a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801652c:	1ad3      	subs	r3, r2, r3
 801652e:	00d9      	lsls	r1, r3, #3
 8016530:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8016532:	3314      	adds	r3, #20
 8016534:	69ba      	ldr	r2, [r7, #24]
 8016536:	440a      	add	r2, r1
 8016538:	601a      	str	r2, [r3, #0]

    dataptr += DCTSIZE;		/* advance pointer to next row */
 801653a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 801653c:	3320      	adds	r3, #32
 801653e:	637b      	str	r3, [r7, #52]	@ 0x34
  for (ctr = 0; ctr < 3; ctr++) {
 8016540:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8016542:	3301      	adds	r3, #1
 8016544:	633b      	str	r3, [r7, #48]	@ 0x30
 8016546:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8016548:	2b02      	cmp	r3, #2
 801654a:	f77f af6a 	ble.w	8016422 <jpeg_fdct_6x3+0x22>
   * We must also scale the output by (8/6)*(8/3) = 32/9, which we partially
   * fold into the constant multipliers (other part was done in pass 1):
   * 3-point FDCT kernel, cK represents sqrt(2) * cos(K*pi/6) * 16/9.
   */

  dataptr = data;
 801654e:	68fb      	ldr	r3, [r7, #12]
 8016550:	637b      	str	r3, [r7, #52]	@ 0x34
  for (ctr = 0; ctr < 6; ctr++) {
 8016552:	2300      	movs	r3, #0
 8016554:	633b      	str	r3, [r7, #48]	@ 0x30
 8016556:	e03d      	b.n	80165d4 <jpeg_fdct_6x3+0x1d4>
    /* Even part */

    tmp0 = dataptr[DCTSIZE*0] + dataptr[DCTSIZE*2];
 8016558:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 801655a:	681a      	ldr	r2, [r3, #0]
 801655c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 801655e:	3340      	adds	r3, #64	@ 0x40
 8016560:	681b      	ldr	r3, [r3, #0]
 8016562:	4413      	add	r3, r2
 8016564:	62fb      	str	r3, [r7, #44]	@ 0x2c
    tmp1 = dataptr[DCTSIZE*1];
 8016566:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8016568:	3320      	adds	r3, #32
 801656a:	681b      	ldr	r3, [r3, #0]
 801656c:	62bb      	str	r3, [r7, #40]	@ 0x28

    tmp2 = dataptr[DCTSIZE*0] - dataptr[DCTSIZE*2];
 801656e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8016570:	681a      	ldr	r2, [r3, #0]
 8016572:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8016574:	3340      	adds	r3, #64	@ 0x40
 8016576:	681b      	ldr	r3, [r3, #0]
 8016578:	1ad3      	subs	r3, r2, r3
 801657a:	627b      	str	r3, [r7, #36]	@ 0x24

    dataptr[DCTSIZE*0] = (DCTELEM)
      DESCALE(MULTIPLY(tmp0 + tmp1, FIX(1.777777778)),        /* 16/9 */
 801657c:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 801657e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8016580:	4413      	add	r3, r2
 8016582:	f643 02e4 	movw	r2, #14564	@ 0x38e4
 8016586:	fb02 f303 	mul.w	r3, r2, r3
 801658a:	f503 4380 	add.w	r3, r3, #16384	@ 0x4000
 801658e:	13da      	asrs	r2, r3, #15
    dataptr[DCTSIZE*0] = (DCTELEM)
 8016590:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8016592:	601a      	str	r2, [r3, #0]
	      CONST_BITS+PASS1_BITS);
    dataptr[DCTSIZE*2] = (DCTELEM)
      DESCALE(MULTIPLY(tmp0 - tmp1 - tmp1, FIX(1.257078722)), /* c2 */
 8016594:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8016596:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8016598:	1ad2      	subs	r2, r2, r3
 801659a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801659c:	1ad3      	subs	r3, r2, r3
 801659e:	f642 023a 	movw	r2, #10298	@ 0x283a
 80165a2:	fb02 f303 	mul.w	r3, r2, r3
 80165a6:	f503 4280 	add.w	r2, r3, #16384	@ 0x4000
    dataptr[DCTSIZE*2] = (DCTELEM)
 80165aa:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80165ac:	3340      	adds	r3, #64	@ 0x40
      DESCALE(MULTIPLY(tmp0 - tmp1 - tmp1, FIX(1.257078722)), /* c2 */
 80165ae:	13d2      	asrs	r2, r2, #15
    dataptr[DCTSIZE*2] = (DCTELEM)
 80165b0:	601a      	str	r2, [r3, #0]
	      CONST_BITS+PASS1_BITS);

    /* Odd part */

    dataptr[DCTSIZE*1] = (DCTELEM)
      DESCALE(MULTIPLY(tmp2, FIX(2.177324216)),               /* c1 */
 80165b2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80165b4:	f244 52ad 	movw	r2, #17837	@ 0x45ad
 80165b8:	fb02 f303 	mul.w	r3, r2, r3
 80165bc:	f503 4280 	add.w	r2, r3, #16384	@ 0x4000
    dataptr[DCTSIZE*1] = (DCTELEM)
 80165c0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80165c2:	3320      	adds	r3, #32
      DESCALE(MULTIPLY(tmp2, FIX(2.177324216)),               /* c1 */
 80165c4:	13d2      	asrs	r2, r2, #15
    dataptr[DCTSIZE*1] = (DCTELEM)
 80165c6:	601a      	str	r2, [r3, #0]
	      CONST_BITS+PASS1_BITS);

    dataptr++;			/* advance pointer to next column */
 80165c8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80165ca:	3304      	adds	r3, #4
 80165cc:	637b      	str	r3, [r7, #52]	@ 0x34
  for (ctr = 0; ctr < 6; ctr++) {
 80165ce:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80165d0:	3301      	adds	r3, #1
 80165d2:	633b      	str	r3, [r7, #48]	@ 0x30
 80165d4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80165d6:	2b05      	cmp	r3, #5
 80165d8:	ddbe      	ble.n	8016558 <jpeg_fdct_6x3+0x158>
  }
}
 80165da:	bf00      	nop
 80165dc:	bf00      	nop
 80165de:	3738      	adds	r7, #56	@ 0x38
 80165e0:	46bd      	mov	sp, r7
 80165e2:	bd80      	pop	{r7, pc}

080165e4 <jpeg_fdct_4x2>:
 * 4-point FDCT in pass 1 (rows), 2-point in pass 2 (columns).
 */

GLOBAL(void)
jpeg_fdct_4x2 (DCTELEM * data, JSAMPARRAY sample_data, JDIMENSION start_col)
{
 80165e4:	b580      	push	{r7, lr}
 80165e6:	b08c      	sub	sp, #48	@ 0x30
 80165e8:	af00      	add	r7, sp, #0
 80165ea:	60f8      	str	r0, [r7, #12]
 80165ec:	60b9      	str	r1, [r7, #8]
 80165ee:	607a      	str	r2, [r7, #4]
  JSAMPROW elemptr;
  int ctr;
  SHIFT_TEMPS

  /* Pre-zero output coefficient block. */
  MEMZERO(data, SIZEOF(DCTELEM) * DCTSIZE2);
 80165f0:	f44f 7280 	mov.w	r2, #256	@ 0x100
 80165f4:	2100      	movs	r1, #0
 80165f6:	68f8      	ldr	r0, [r7, #12]
 80165f8:	f003 f9fa 	bl	80199f0 <memset>
  /* furthermore, we scale the results by 2**PASS1_BITS. */
  /* We must also scale the output by (8/4)*(8/2) = 2**3, which we add here. */
  /* 4-point FDCT kernel, */
  /* cK represents sqrt(2) * cos(K*pi/16) [refers to 8-point FDCT]. */

  dataptr = data;
 80165fc:	68fb      	ldr	r3, [r7, #12]
 80165fe:	62fb      	str	r3, [r7, #44]	@ 0x2c
  for (ctr = 0; ctr < 2; ctr++) {
 8016600:	2300      	movs	r3, #0
 8016602:	62bb      	str	r3, [r7, #40]	@ 0x28
 8016604:	e05e      	b.n	80166c4 <jpeg_fdct_4x2+0xe0>
    elemptr = sample_data[ctr] + start_col;
 8016606:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8016608:	009b      	lsls	r3, r3, #2
 801660a:	68ba      	ldr	r2, [r7, #8]
 801660c:	4413      	add	r3, r2
 801660e:	681a      	ldr	r2, [r3, #0]
 8016610:	687b      	ldr	r3, [r7, #4]
 8016612:	4413      	add	r3, r2
 8016614:	61fb      	str	r3, [r7, #28]

    /* Even part */

    tmp0 = GETJSAMPLE(elemptr[0]) + GETJSAMPLE(elemptr[3]);
 8016616:	69fb      	ldr	r3, [r7, #28]
 8016618:	781b      	ldrb	r3, [r3, #0]
 801661a:	461a      	mov	r2, r3
 801661c:	69fb      	ldr	r3, [r7, #28]
 801661e:	3303      	adds	r3, #3
 8016620:	781b      	ldrb	r3, [r3, #0]
 8016622:	4413      	add	r3, r2
 8016624:	627b      	str	r3, [r7, #36]	@ 0x24
    tmp1 = GETJSAMPLE(elemptr[1]) + GETJSAMPLE(elemptr[2]);
 8016626:	69fb      	ldr	r3, [r7, #28]
 8016628:	3301      	adds	r3, #1
 801662a:	781b      	ldrb	r3, [r3, #0]
 801662c:	461a      	mov	r2, r3
 801662e:	69fb      	ldr	r3, [r7, #28]
 8016630:	3302      	adds	r3, #2
 8016632:	781b      	ldrb	r3, [r3, #0]
 8016634:	4413      	add	r3, r2
 8016636:	623b      	str	r3, [r7, #32]

    tmp10 = GETJSAMPLE(elemptr[0]) - GETJSAMPLE(elemptr[3]);
 8016638:	69fb      	ldr	r3, [r7, #28]
 801663a:	781b      	ldrb	r3, [r3, #0]
 801663c:	461a      	mov	r2, r3
 801663e:	69fb      	ldr	r3, [r7, #28]
 8016640:	3303      	adds	r3, #3
 8016642:	781b      	ldrb	r3, [r3, #0]
 8016644:	1ad3      	subs	r3, r2, r3
 8016646:	61bb      	str	r3, [r7, #24]
    tmp11 = GETJSAMPLE(elemptr[1]) - GETJSAMPLE(elemptr[2]);
 8016648:	69fb      	ldr	r3, [r7, #28]
 801664a:	3301      	adds	r3, #1
 801664c:	781b      	ldrb	r3, [r3, #0]
 801664e:	461a      	mov	r2, r3
 8016650:	69fb      	ldr	r3, [r7, #28]
 8016652:	3302      	adds	r3, #2
 8016654:	781b      	ldrb	r3, [r3, #0]
 8016656:	1ad3      	subs	r3, r2, r3
 8016658:	617b      	str	r3, [r7, #20]

    /* Apply unsigned->signed conversion */
    dataptr[0] = (DCTELEM)
      ((tmp0 + tmp1 - 4 * CENTERJSAMPLE) << (PASS1_BITS+3));
 801665a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 801665c:	6a3b      	ldr	r3, [r7, #32]
 801665e:	4413      	add	r3, r2
 8016660:	f5a3 7300 	sub.w	r3, r3, #512	@ 0x200
 8016664:	015a      	lsls	r2, r3, #5
    dataptr[0] = (DCTELEM)
 8016666:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8016668:	601a      	str	r2, [r3, #0]
    dataptr[2] = (DCTELEM) ((tmp0 - tmp1) << (PASS1_BITS+3));
 801666a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 801666c:	6a3b      	ldr	r3, [r7, #32]
 801666e:	1ad2      	subs	r2, r2, r3
 8016670:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8016672:	3308      	adds	r3, #8
 8016674:	0152      	lsls	r2, r2, #5
 8016676:	601a      	str	r2, [r3, #0]

    /* Odd part */

    tmp0 = MULTIPLY(tmp10 + tmp11, FIX_0_541196100);       /* c6 */
 8016678:	69ba      	ldr	r2, [r7, #24]
 801667a:	697b      	ldr	r3, [r7, #20]
 801667c:	4413      	add	r3, r2
 801667e:	f241 1251 	movw	r2, #4433	@ 0x1151
 8016682:	fb02 f303 	mul.w	r3, r2, r3
 8016686:	627b      	str	r3, [r7, #36]	@ 0x24
    /* Add fudge factor here for final descale. */
    tmp0 += ONE << (CONST_BITS-PASS1_BITS-4);
 8016688:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801668a:	3380      	adds	r3, #128	@ 0x80
 801668c:	627b      	str	r3, [r7, #36]	@ 0x24

    dataptr[1] = (DCTELEM)
      RIGHT_SHIFT(tmp0 + MULTIPLY(tmp10, FIX_0_765366865), /* c2-c6 */
 801668e:	69bb      	ldr	r3, [r7, #24]
 8016690:	f641 027e 	movw	r2, #6270	@ 0x187e
 8016694:	fb03 f202 	mul.w	r2, r3, r2
 8016698:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801669a:	441a      	add	r2, r3
    dataptr[1] = (DCTELEM)
 801669c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801669e:	3304      	adds	r3, #4
      RIGHT_SHIFT(tmp0 + MULTIPLY(tmp10, FIX_0_765366865), /* c2-c6 */
 80166a0:	1212      	asrs	r2, r2, #8
    dataptr[1] = (DCTELEM)
 80166a2:	601a      	str	r2, [r3, #0]
		  CONST_BITS-PASS1_BITS-3);
    dataptr[3] = (DCTELEM)
      RIGHT_SHIFT(tmp0 - MULTIPLY(tmp11, FIX_1_847759065), /* c2+c6 */
 80166a4:	697b      	ldr	r3, [r7, #20]
 80166a6:	4a1d      	ldr	r2, [pc, #116]	@ (801671c <jpeg_fdct_4x2+0x138>)
 80166a8:	fb03 f202 	mul.w	r2, r3, r2
 80166ac:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80166ae:	441a      	add	r2, r3
    dataptr[3] = (DCTELEM)
 80166b0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80166b2:	330c      	adds	r3, #12
      RIGHT_SHIFT(tmp0 - MULTIPLY(tmp11, FIX_1_847759065), /* c2+c6 */
 80166b4:	1212      	asrs	r2, r2, #8
    dataptr[3] = (DCTELEM)
 80166b6:	601a      	str	r2, [r3, #0]
		  CONST_BITS-PASS1_BITS-3);

    dataptr += DCTSIZE;		/* advance pointer to next row */
 80166b8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80166ba:	3320      	adds	r3, #32
 80166bc:	62fb      	str	r3, [r7, #44]	@ 0x2c
  for (ctr = 0; ctr < 2; ctr++) {
 80166be:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80166c0:	3301      	adds	r3, #1
 80166c2:	62bb      	str	r3, [r7, #40]	@ 0x28
 80166c4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80166c6:	2b01      	cmp	r3, #1
 80166c8:	dd9d      	ble.n	8016606 <jpeg_fdct_4x2+0x22>
  /* Pass 2: process columns.
   * We remove the PASS1_BITS scaling, but leave the results scaled up
   * by an overall factor of 8.
   */

  dataptr = data;
 80166ca:	68fb      	ldr	r3, [r7, #12]
 80166cc:	62fb      	str	r3, [r7, #44]	@ 0x2c
  for (ctr = 0; ctr < 4; ctr++) {
 80166ce:	2300      	movs	r3, #0
 80166d0:	62bb      	str	r3, [r7, #40]	@ 0x28
 80166d2:	e01a      	b.n	801670a <jpeg_fdct_4x2+0x126>
    /* Even part */

    /* Add fudge factor here for final descale. */
    tmp0 = dataptr[DCTSIZE*0] + (ONE << (PASS1_BITS-1));
 80166d4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80166d6:	681b      	ldr	r3, [r3, #0]
 80166d8:	3302      	adds	r3, #2
 80166da:	627b      	str	r3, [r7, #36]	@ 0x24
    tmp1 = dataptr[DCTSIZE*1];
 80166dc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80166de:	3320      	adds	r3, #32
 80166e0:	681b      	ldr	r3, [r3, #0]
 80166e2:	623b      	str	r3, [r7, #32]

    dataptr[DCTSIZE*0] = (DCTELEM) RIGHT_SHIFT(tmp0 + tmp1, PASS1_BITS);
 80166e4:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80166e6:	6a3b      	ldr	r3, [r7, #32]
 80166e8:	4413      	add	r3, r2
 80166ea:	109a      	asrs	r2, r3, #2
 80166ec:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80166ee:	601a      	str	r2, [r3, #0]

    /* Odd part */

    dataptr[DCTSIZE*1] = (DCTELEM) RIGHT_SHIFT(tmp0 - tmp1, PASS1_BITS);
 80166f0:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80166f2:	6a3b      	ldr	r3, [r7, #32]
 80166f4:	1ad2      	subs	r2, r2, r3
 80166f6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80166f8:	3320      	adds	r3, #32
 80166fa:	1092      	asrs	r2, r2, #2
 80166fc:	601a      	str	r2, [r3, #0]

    dataptr++;			/* advance pointer to next column */
 80166fe:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8016700:	3304      	adds	r3, #4
 8016702:	62fb      	str	r3, [r7, #44]	@ 0x2c
  for (ctr = 0; ctr < 4; ctr++) {
 8016704:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8016706:	3301      	adds	r3, #1
 8016708:	62bb      	str	r3, [r7, #40]	@ 0x28
 801670a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801670c:	2b03      	cmp	r3, #3
 801670e:	dde1      	ble.n	80166d4 <jpeg_fdct_4x2+0xf0>
  }
}
 8016710:	bf00      	nop
 8016712:	bf00      	nop
 8016714:	3730      	adds	r7, #48	@ 0x30
 8016716:	46bd      	mov	sp, r7
 8016718:	bd80      	pop	{r7, pc}
 801671a:	bf00      	nop
 801671c:	ffffc4df 	.word	0xffffc4df

08016720 <jpeg_fdct_2x1>:
 * 2-point FDCT in pass 1 (rows), 1-point in pass 2 (columns).
 */

GLOBAL(void)
jpeg_fdct_2x1 (DCTELEM * data, JSAMPARRAY sample_data, JDIMENSION start_col)
{
 8016720:	b580      	push	{r7, lr}
 8016722:	b088      	sub	sp, #32
 8016724:	af00      	add	r7, sp, #0
 8016726:	60f8      	str	r0, [r7, #12]
 8016728:	60b9      	str	r1, [r7, #8]
 801672a:	607a      	str	r2, [r7, #4]
  INT32 tmp0, tmp1;
  JSAMPROW elemptr;

  /* Pre-zero output coefficient block. */
  MEMZERO(data, SIZEOF(DCTELEM) * DCTSIZE2);
 801672c:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8016730:	2100      	movs	r1, #0
 8016732:	68f8      	ldr	r0, [r7, #12]
 8016734:	f003 f95c 	bl	80199f0 <memset>

  elemptr = sample_data[0] + start_col;
 8016738:	68bb      	ldr	r3, [r7, #8]
 801673a:	681a      	ldr	r2, [r3, #0]
 801673c:	687b      	ldr	r3, [r7, #4]
 801673e:	4413      	add	r3, r2
 8016740:	61fb      	str	r3, [r7, #28]

  tmp0 = GETJSAMPLE(elemptr[0]);
 8016742:	69fb      	ldr	r3, [r7, #28]
 8016744:	781b      	ldrb	r3, [r3, #0]
 8016746:	61bb      	str	r3, [r7, #24]
  tmp1 = GETJSAMPLE(elemptr[1]);
 8016748:	69fb      	ldr	r3, [r7, #28]
 801674a:	3301      	adds	r3, #1
 801674c:	781b      	ldrb	r3, [r3, #0]
 801674e:	617b      	str	r3, [r7, #20]
   * We must also scale the output by (8/2)*(8/1) = 2**5.
   */

  /* Even part */
  /* Apply unsigned->signed conversion */
  data[0] = (DCTELEM) ((tmp0 + tmp1 - 2 * CENTERJSAMPLE) << 5);
 8016750:	69ba      	ldr	r2, [r7, #24]
 8016752:	697b      	ldr	r3, [r7, #20]
 8016754:	4413      	add	r3, r2
 8016756:	f5a3 7380 	sub.w	r3, r3, #256	@ 0x100
 801675a:	015a      	lsls	r2, r3, #5
 801675c:	68fb      	ldr	r3, [r7, #12]
 801675e:	601a      	str	r2, [r3, #0]

  /* Odd part */
  data[1] = (DCTELEM) ((tmp0 - tmp1) << 5);
 8016760:	69ba      	ldr	r2, [r7, #24]
 8016762:	697b      	ldr	r3, [r7, #20]
 8016764:	1ad2      	subs	r2, r2, r3
 8016766:	68fb      	ldr	r3, [r7, #12]
 8016768:	3304      	adds	r3, #4
 801676a:	0152      	lsls	r2, r2, #5
 801676c:	601a      	str	r2, [r3, #0]
}
 801676e:	bf00      	nop
 8016770:	3720      	adds	r7, #32
 8016772:	46bd      	mov	sp, r7
 8016774:	bd80      	pop	{r7, pc}
	...

08016778 <jpeg_fdct_8x16>:
 * 8-point FDCT in pass 1 (rows), 16-point in pass 2 (columns).
 */

GLOBAL(void)
jpeg_fdct_8x16 (DCTELEM * data, JSAMPARRAY sample_data, JDIMENSION start_col)
{
 8016778:	b480      	push	{r7}
 801677a:	b0db      	sub	sp, #364	@ 0x16c
 801677c:	af00      	add	r7, sp, #0
 801677e:	f507 73b4 	add.w	r3, r7, #360	@ 0x168
 8016782:	f5a3 73ae 	sub.w	r3, r3, #348	@ 0x15c
 8016786:	6018      	str	r0, [r3, #0]
 8016788:	f507 73b4 	add.w	r3, r7, #360	@ 0x168
 801678c:	f5a3 73b0 	sub.w	r3, r3, #352	@ 0x160
 8016790:	6019      	str	r1, [r3, #0]
 8016792:	f507 73b4 	add.w	r3, r7, #360	@ 0x168
 8016796:	f5a3 73b2 	sub.w	r3, r3, #356	@ 0x164
 801679a:	601a      	str	r2, [r3, #0]

  /* Pass 1: process rows. */
  /* Note results are scaled up by sqrt(8) compared to a true DCT; */
  /* furthermore, we scale the results by 2**PASS1_BITS. */

  dataptr = data;
 801679c:	f507 73b4 	add.w	r3, r7, #360	@ 0x168
 80167a0:	f5a3 73ae 	sub.w	r3, r3, #348	@ 0x15c
 80167a4:	681b      	ldr	r3, [r3, #0]
 80167a6:	f8c7 3164 	str.w	r3, [r7, #356]	@ 0x164
  ctr = 0;
 80167aa:	2300      	movs	r3, #0
 80167ac:	f8c7 315c 	str.w	r3, [r7, #348]	@ 0x15c
  for (;;) {
    elemptr = sample_data[ctr] + start_col;
 80167b0:	f8d7 315c 	ldr.w	r3, [r7, #348]	@ 0x15c
 80167b4:	009b      	lsls	r3, r3, #2
 80167b6:	f507 72b4 	add.w	r2, r7, #360	@ 0x168
 80167ba:	f5a2 72b0 	sub.w	r2, r2, #352	@ 0x160
 80167be:	6812      	ldr	r2, [r2, #0]
 80167c0:	4413      	add	r3, r2
 80167c2:	681a      	ldr	r2, [r3, #0]
 80167c4:	f507 73b4 	add.w	r3, r7, #360	@ 0x168
 80167c8:	f5a3 73b2 	sub.w	r3, r3, #356	@ 0x164
 80167cc:	681b      	ldr	r3, [r3, #0]
 80167ce:	4413      	add	r3, r2
 80167d0:	f8c7 3158 	str.w	r3, [r7, #344]	@ 0x158

    /* Even part per LL&M figure 1 --- note that published figure is faulty;
     * rotator "sqrt(2)*c1" should be "sqrt(2)*c6".
     */

    tmp0 = GETJSAMPLE(elemptr[0]) + GETJSAMPLE(elemptr[7]);
 80167d4:	f8d7 3158 	ldr.w	r3, [r7, #344]	@ 0x158
 80167d8:	781b      	ldrb	r3, [r3, #0]
 80167da:	461a      	mov	r2, r3
 80167dc:	f8d7 3158 	ldr.w	r3, [r7, #344]	@ 0x158
 80167e0:	3307      	adds	r3, #7
 80167e2:	781b      	ldrb	r3, [r3, #0]
 80167e4:	4413      	add	r3, r2
 80167e6:	f8c7 3154 	str.w	r3, [r7, #340]	@ 0x154
    tmp1 = GETJSAMPLE(elemptr[1]) + GETJSAMPLE(elemptr[6]);
 80167ea:	f8d7 3158 	ldr.w	r3, [r7, #344]	@ 0x158
 80167ee:	3301      	adds	r3, #1
 80167f0:	781b      	ldrb	r3, [r3, #0]
 80167f2:	461a      	mov	r2, r3
 80167f4:	f8d7 3158 	ldr.w	r3, [r7, #344]	@ 0x158
 80167f8:	3306      	adds	r3, #6
 80167fa:	781b      	ldrb	r3, [r3, #0]
 80167fc:	4413      	add	r3, r2
 80167fe:	f8c7 3150 	str.w	r3, [r7, #336]	@ 0x150
    tmp2 = GETJSAMPLE(elemptr[2]) + GETJSAMPLE(elemptr[5]);
 8016802:	f8d7 3158 	ldr.w	r3, [r7, #344]	@ 0x158
 8016806:	3302      	adds	r3, #2
 8016808:	781b      	ldrb	r3, [r3, #0]
 801680a:	461a      	mov	r2, r3
 801680c:	f8d7 3158 	ldr.w	r3, [r7, #344]	@ 0x158
 8016810:	3305      	adds	r3, #5
 8016812:	781b      	ldrb	r3, [r3, #0]
 8016814:	4413      	add	r3, r2
 8016816:	f8c7 314c 	str.w	r3, [r7, #332]	@ 0x14c
    tmp3 = GETJSAMPLE(elemptr[3]) + GETJSAMPLE(elemptr[4]);
 801681a:	f8d7 3158 	ldr.w	r3, [r7, #344]	@ 0x158
 801681e:	3303      	adds	r3, #3
 8016820:	781b      	ldrb	r3, [r3, #0]
 8016822:	461a      	mov	r2, r3
 8016824:	f8d7 3158 	ldr.w	r3, [r7, #344]	@ 0x158
 8016828:	3304      	adds	r3, #4
 801682a:	781b      	ldrb	r3, [r3, #0]
 801682c:	4413      	add	r3, r2
 801682e:	f8c7 3148 	str.w	r3, [r7, #328]	@ 0x148

    tmp10 = tmp0 + tmp3;
 8016832:	f8d7 2154 	ldr.w	r2, [r7, #340]	@ 0x154
 8016836:	f8d7 3148 	ldr.w	r3, [r7, #328]	@ 0x148
 801683a:	4413      	add	r3, r2
 801683c:	f8c7 3144 	str.w	r3, [r7, #324]	@ 0x144
    tmp12 = tmp0 - tmp3;
 8016840:	f8d7 2154 	ldr.w	r2, [r7, #340]	@ 0x154
 8016844:	f8d7 3148 	ldr.w	r3, [r7, #328]	@ 0x148
 8016848:	1ad3      	subs	r3, r2, r3
 801684a:	f8c7 3140 	str.w	r3, [r7, #320]	@ 0x140
    tmp11 = tmp1 + tmp2;
 801684e:	f8d7 2150 	ldr.w	r2, [r7, #336]	@ 0x150
 8016852:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8016856:	4413      	add	r3, r2
 8016858:	f8c7 313c 	str.w	r3, [r7, #316]	@ 0x13c
    tmp13 = tmp1 - tmp2;
 801685c:	f8d7 2150 	ldr.w	r2, [r7, #336]	@ 0x150
 8016860:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8016864:	1ad3      	subs	r3, r2, r3
 8016866:	f8c7 3138 	str.w	r3, [r7, #312]	@ 0x138

    tmp0 = GETJSAMPLE(elemptr[0]) - GETJSAMPLE(elemptr[7]);
 801686a:	f8d7 3158 	ldr.w	r3, [r7, #344]	@ 0x158
 801686e:	781b      	ldrb	r3, [r3, #0]
 8016870:	461a      	mov	r2, r3
 8016872:	f8d7 3158 	ldr.w	r3, [r7, #344]	@ 0x158
 8016876:	3307      	adds	r3, #7
 8016878:	781b      	ldrb	r3, [r3, #0]
 801687a:	1ad3      	subs	r3, r2, r3
 801687c:	f8c7 3154 	str.w	r3, [r7, #340]	@ 0x154
    tmp1 = GETJSAMPLE(elemptr[1]) - GETJSAMPLE(elemptr[6]);
 8016880:	f8d7 3158 	ldr.w	r3, [r7, #344]	@ 0x158
 8016884:	3301      	adds	r3, #1
 8016886:	781b      	ldrb	r3, [r3, #0]
 8016888:	461a      	mov	r2, r3
 801688a:	f8d7 3158 	ldr.w	r3, [r7, #344]	@ 0x158
 801688e:	3306      	adds	r3, #6
 8016890:	781b      	ldrb	r3, [r3, #0]
 8016892:	1ad3      	subs	r3, r2, r3
 8016894:	f8c7 3150 	str.w	r3, [r7, #336]	@ 0x150
    tmp2 = GETJSAMPLE(elemptr[2]) - GETJSAMPLE(elemptr[5]);
 8016898:	f8d7 3158 	ldr.w	r3, [r7, #344]	@ 0x158
 801689c:	3302      	adds	r3, #2
 801689e:	781b      	ldrb	r3, [r3, #0]
 80168a0:	461a      	mov	r2, r3
 80168a2:	f8d7 3158 	ldr.w	r3, [r7, #344]	@ 0x158
 80168a6:	3305      	adds	r3, #5
 80168a8:	781b      	ldrb	r3, [r3, #0]
 80168aa:	1ad3      	subs	r3, r2, r3
 80168ac:	f8c7 314c 	str.w	r3, [r7, #332]	@ 0x14c
    tmp3 = GETJSAMPLE(elemptr[3]) - GETJSAMPLE(elemptr[4]);
 80168b0:	f8d7 3158 	ldr.w	r3, [r7, #344]	@ 0x158
 80168b4:	3303      	adds	r3, #3
 80168b6:	781b      	ldrb	r3, [r3, #0]
 80168b8:	461a      	mov	r2, r3
 80168ba:	f8d7 3158 	ldr.w	r3, [r7, #344]	@ 0x158
 80168be:	3304      	adds	r3, #4
 80168c0:	781b      	ldrb	r3, [r3, #0]
 80168c2:	1ad3      	subs	r3, r2, r3
 80168c4:	f8c7 3148 	str.w	r3, [r7, #328]	@ 0x148

    /* Apply unsigned->signed conversion */
    dataptr[0] = (DCTELEM) ((tmp10 + tmp11 - 8 * CENTERJSAMPLE) << PASS1_BITS);
 80168c8:	f8d7 2144 	ldr.w	r2, [r7, #324]	@ 0x144
 80168cc:	f8d7 313c 	ldr.w	r3, [r7, #316]	@ 0x13c
 80168d0:	4413      	add	r3, r2
 80168d2:	f5a3 6380 	sub.w	r3, r3, #1024	@ 0x400
 80168d6:	009a      	lsls	r2, r3, #2
 80168d8:	f8d7 3164 	ldr.w	r3, [r7, #356]	@ 0x164
 80168dc:	601a      	str	r2, [r3, #0]
    dataptr[4] = (DCTELEM) ((tmp10 - tmp11) << PASS1_BITS);
 80168de:	f8d7 2144 	ldr.w	r2, [r7, #324]	@ 0x144
 80168e2:	f8d7 313c 	ldr.w	r3, [r7, #316]	@ 0x13c
 80168e6:	1ad2      	subs	r2, r2, r3
 80168e8:	f8d7 3164 	ldr.w	r3, [r7, #356]	@ 0x164
 80168ec:	3310      	adds	r3, #16
 80168ee:	0092      	lsls	r2, r2, #2
 80168f0:	601a      	str	r2, [r3, #0]

    z1 = MULTIPLY(tmp12 + tmp13, FIX_0_541196100);
 80168f2:	f8d7 2140 	ldr.w	r2, [r7, #320]	@ 0x140
 80168f6:	f8d7 3138 	ldr.w	r3, [r7, #312]	@ 0x138
 80168fa:	4413      	add	r3, r2
 80168fc:	f241 1251 	movw	r2, #4433	@ 0x1151
 8016900:	fb02 f303 	mul.w	r3, r2, r3
 8016904:	f8c7 3134 	str.w	r3, [r7, #308]	@ 0x134
    dataptr[2] = (DCTELEM) DESCALE(z1 + MULTIPLY(tmp12, FIX_0_765366865),
 8016908:	f8d7 3140 	ldr.w	r3, [r7, #320]	@ 0x140
 801690c:	f641 027e 	movw	r2, #6270	@ 0x187e
 8016910:	fb03 f202 	mul.w	r2, r3, r2
 8016914:	f8d7 3134 	ldr.w	r3, [r7, #308]	@ 0x134
 8016918:	4413      	add	r3, r2
 801691a:	f503 6280 	add.w	r2, r3, #1024	@ 0x400
 801691e:	f8d7 3164 	ldr.w	r3, [r7, #356]	@ 0x164
 8016922:	3308      	adds	r3, #8
 8016924:	12d2      	asrs	r2, r2, #11
 8016926:	601a      	str	r2, [r3, #0]
				   CONST_BITS-PASS1_BITS);
    dataptr[6] = (DCTELEM) DESCALE(z1 - MULTIPLY(tmp13, FIX_1_847759065),
 8016928:	f8d7 3138 	ldr.w	r3, [r7, #312]	@ 0x138
 801692c:	4a70      	ldr	r2, [pc, #448]	@ (8016af0 <jpeg_fdct_8x16+0x378>)
 801692e:	fb03 f202 	mul.w	r2, r3, r2
 8016932:	f8d7 3134 	ldr.w	r3, [r7, #308]	@ 0x134
 8016936:	4413      	add	r3, r2
 8016938:	f503 6280 	add.w	r2, r3, #1024	@ 0x400
 801693c:	f8d7 3164 	ldr.w	r3, [r7, #356]	@ 0x164
 8016940:	3318      	adds	r3, #24
 8016942:	12d2      	asrs	r2, r2, #11
 8016944:	601a      	str	r2, [r3, #0]
    /* Odd part per figure 8 --- note paper omits factor of sqrt(2).
     * 8-point FDCT kernel, cK represents sqrt(2) * cos(K*pi/16).
     * i0..i3 in the paper are tmp0..tmp3 here.
     */

    tmp10 = tmp0 + tmp3;
 8016946:	f8d7 2154 	ldr.w	r2, [r7, #340]	@ 0x154
 801694a:	f8d7 3148 	ldr.w	r3, [r7, #328]	@ 0x148
 801694e:	4413      	add	r3, r2
 8016950:	f8c7 3144 	str.w	r3, [r7, #324]	@ 0x144
    tmp11 = tmp1 + tmp2;
 8016954:	f8d7 2150 	ldr.w	r2, [r7, #336]	@ 0x150
 8016958:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 801695c:	4413      	add	r3, r2
 801695e:	f8c7 313c 	str.w	r3, [r7, #316]	@ 0x13c
    tmp12 = tmp0 + tmp2;
 8016962:	f8d7 2154 	ldr.w	r2, [r7, #340]	@ 0x154
 8016966:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 801696a:	4413      	add	r3, r2
 801696c:	f8c7 3140 	str.w	r3, [r7, #320]	@ 0x140
    tmp13 = tmp1 + tmp3;
 8016970:	f8d7 2150 	ldr.w	r2, [r7, #336]	@ 0x150
 8016974:	f8d7 3148 	ldr.w	r3, [r7, #328]	@ 0x148
 8016978:	4413      	add	r3, r2
 801697a:	f8c7 3138 	str.w	r3, [r7, #312]	@ 0x138
    z1 = MULTIPLY(tmp12 + tmp13, FIX_1_175875602); /*  c3 */
 801697e:	f8d7 2140 	ldr.w	r2, [r7, #320]	@ 0x140
 8016982:	f8d7 3138 	ldr.w	r3, [r7, #312]	@ 0x138
 8016986:	4413      	add	r3, r2
 8016988:	f242 52a1 	movw	r2, #9633	@ 0x25a1
 801698c:	fb02 f303 	mul.w	r3, r2, r3
 8016990:	f8c7 3134 	str.w	r3, [r7, #308]	@ 0x134

    tmp0  = MULTIPLY(tmp0,    FIX_1_501321110);    /*  c1+c3-c5-c7 */
 8016994:	f8d7 3154 	ldr.w	r3, [r7, #340]	@ 0x154
 8016998:	f243 020b 	movw	r2, #12299	@ 0x300b
 801699c:	fb02 f303 	mul.w	r3, r2, r3
 80169a0:	f8c7 3154 	str.w	r3, [r7, #340]	@ 0x154
    tmp1  = MULTIPLY(tmp1,    FIX_3_072711026);    /*  c1+c3+c5-c7 */
 80169a4:	f8d7 3150 	ldr.w	r3, [r7, #336]	@ 0x150
 80169a8:	f246 2254 	movw	r2, #25172	@ 0x6254
 80169ac:	fb02 f303 	mul.w	r3, r2, r3
 80169b0:	f8c7 3150 	str.w	r3, [r7, #336]	@ 0x150
    tmp2  = MULTIPLY(tmp2,    FIX_2_053119869);    /*  c1+c3-c5+c7 */
 80169b4:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 80169b8:	f244 12b3 	movw	r2, #16819	@ 0x41b3
 80169bc:	fb02 f303 	mul.w	r3, r2, r3
 80169c0:	f8c7 314c 	str.w	r3, [r7, #332]	@ 0x14c
    tmp3  = MULTIPLY(tmp3,    FIX_0_298631336);    /* -c1+c3+c5-c7 */
 80169c4:	f8d7 3148 	ldr.w	r3, [r7, #328]	@ 0x148
 80169c8:	f640 128e 	movw	r2, #2446	@ 0x98e
 80169cc:	fb02 f303 	mul.w	r3, r2, r3
 80169d0:	f8c7 3148 	str.w	r3, [r7, #328]	@ 0x148
    tmp10 = MULTIPLY(tmp10, - FIX_0_899976223);    /*  c7-c3 */
 80169d4:	f8d7 3144 	ldr.w	r3, [r7, #324]	@ 0x144
 80169d8:	4a46      	ldr	r2, [pc, #280]	@ (8016af4 <jpeg_fdct_8x16+0x37c>)
 80169da:	fb02 f303 	mul.w	r3, r2, r3
 80169de:	f8c7 3144 	str.w	r3, [r7, #324]	@ 0x144
    tmp11 = MULTIPLY(tmp11, - FIX_2_562915447);    /* -c1-c3 */
 80169e2:	f8d7 313c 	ldr.w	r3, [r7, #316]	@ 0x13c
 80169e6:	4a44      	ldr	r2, [pc, #272]	@ (8016af8 <jpeg_fdct_8x16+0x380>)
 80169e8:	fb02 f303 	mul.w	r3, r2, r3
 80169ec:	f8c7 313c 	str.w	r3, [r7, #316]	@ 0x13c
    tmp12 = MULTIPLY(tmp12, - FIX_0_390180644);    /*  c5-c3 */
 80169f0:	f8d7 3140 	ldr.w	r3, [r7, #320]	@ 0x140
 80169f4:	4a41      	ldr	r2, [pc, #260]	@ (8016afc <jpeg_fdct_8x16+0x384>)
 80169f6:	fb02 f303 	mul.w	r3, r2, r3
 80169fa:	f8c7 3140 	str.w	r3, [r7, #320]	@ 0x140
    tmp13 = MULTIPLY(tmp13, - FIX_1_961570560);    /* -c3-c5 */
 80169fe:	f8d7 3138 	ldr.w	r3, [r7, #312]	@ 0x138
 8016a02:	4a3f      	ldr	r2, [pc, #252]	@ (8016b00 <jpeg_fdct_8x16+0x388>)
 8016a04:	fb02 f303 	mul.w	r3, r2, r3
 8016a08:	f8c7 3138 	str.w	r3, [r7, #312]	@ 0x138

    tmp12 += z1;
 8016a0c:	f8d7 2140 	ldr.w	r2, [r7, #320]	@ 0x140
 8016a10:	f8d7 3134 	ldr.w	r3, [r7, #308]	@ 0x134
 8016a14:	4413      	add	r3, r2
 8016a16:	f8c7 3140 	str.w	r3, [r7, #320]	@ 0x140
    tmp13 += z1;
 8016a1a:	f8d7 2138 	ldr.w	r2, [r7, #312]	@ 0x138
 8016a1e:	f8d7 3134 	ldr.w	r3, [r7, #308]	@ 0x134
 8016a22:	4413      	add	r3, r2
 8016a24:	f8c7 3138 	str.w	r3, [r7, #312]	@ 0x138

    dataptr[1] = (DCTELEM) DESCALE(tmp0 + tmp10 + tmp12, CONST_BITS-PASS1_BITS);
 8016a28:	f8d7 2154 	ldr.w	r2, [r7, #340]	@ 0x154
 8016a2c:	f8d7 3144 	ldr.w	r3, [r7, #324]	@ 0x144
 8016a30:	441a      	add	r2, r3
 8016a32:	f8d7 3140 	ldr.w	r3, [r7, #320]	@ 0x140
 8016a36:	4413      	add	r3, r2
 8016a38:	f503 6280 	add.w	r2, r3, #1024	@ 0x400
 8016a3c:	f8d7 3164 	ldr.w	r3, [r7, #356]	@ 0x164
 8016a40:	3304      	adds	r3, #4
 8016a42:	12d2      	asrs	r2, r2, #11
 8016a44:	601a      	str	r2, [r3, #0]
    dataptr[3] = (DCTELEM) DESCALE(tmp1 + tmp11 + tmp13, CONST_BITS-PASS1_BITS);
 8016a46:	f8d7 2150 	ldr.w	r2, [r7, #336]	@ 0x150
 8016a4a:	f8d7 313c 	ldr.w	r3, [r7, #316]	@ 0x13c
 8016a4e:	441a      	add	r2, r3
 8016a50:	f8d7 3138 	ldr.w	r3, [r7, #312]	@ 0x138
 8016a54:	4413      	add	r3, r2
 8016a56:	f503 6280 	add.w	r2, r3, #1024	@ 0x400
 8016a5a:	f8d7 3164 	ldr.w	r3, [r7, #356]	@ 0x164
 8016a5e:	330c      	adds	r3, #12
 8016a60:	12d2      	asrs	r2, r2, #11
 8016a62:	601a      	str	r2, [r3, #0]
    dataptr[5] = (DCTELEM) DESCALE(tmp2 + tmp11 + tmp12, CONST_BITS-PASS1_BITS);
 8016a64:	f8d7 214c 	ldr.w	r2, [r7, #332]	@ 0x14c
 8016a68:	f8d7 313c 	ldr.w	r3, [r7, #316]	@ 0x13c
 8016a6c:	441a      	add	r2, r3
 8016a6e:	f8d7 3140 	ldr.w	r3, [r7, #320]	@ 0x140
 8016a72:	4413      	add	r3, r2
 8016a74:	f503 6280 	add.w	r2, r3, #1024	@ 0x400
 8016a78:	f8d7 3164 	ldr.w	r3, [r7, #356]	@ 0x164
 8016a7c:	3314      	adds	r3, #20
 8016a7e:	12d2      	asrs	r2, r2, #11
 8016a80:	601a      	str	r2, [r3, #0]
    dataptr[7] = (DCTELEM) DESCALE(tmp3 + tmp10 + tmp13, CONST_BITS-PASS1_BITS);
 8016a82:	f8d7 2148 	ldr.w	r2, [r7, #328]	@ 0x148
 8016a86:	f8d7 3144 	ldr.w	r3, [r7, #324]	@ 0x144
 8016a8a:	441a      	add	r2, r3
 8016a8c:	f8d7 3138 	ldr.w	r3, [r7, #312]	@ 0x138
 8016a90:	4413      	add	r3, r2
 8016a92:	f503 6280 	add.w	r2, r3, #1024	@ 0x400
 8016a96:	f8d7 3164 	ldr.w	r3, [r7, #356]	@ 0x164
 8016a9a:	331c      	adds	r3, #28
 8016a9c:	12d2      	asrs	r2, r2, #11
 8016a9e:	601a      	str	r2, [r3, #0]

    ctr++;
 8016aa0:	f8d7 315c 	ldr.w	r3, [r7, #348]	@ 0x15c
 8016aa4:	3301      	adds	r3, #1
 8016aa6:	f8c7 315c 	str.w	r3, [r7, #348]	@ 0x15c

    if (ctr != DCTSIZE) {
 8016aaa:	f8d7 315c 	ldr.w	r3, [r7, #348]	@ 0x15c
 8016aae:	2b08      	cmp	r3, #8
 8016ab0:	d009      	beq.n	8016ac6 <jpeg_fdct_8x16+0x34e>
      if (ctr == DCTSIZE * 2)
 8016ab2:	f8d7 315c 	ldr.w	r3, [r7, #348]	@ 0x15c
 8016ab6:	2b10      	cmp	r3, #16
 8016ab8:	d00a      	beq.n	8016ad0 <jpeg_fdct_8x16+0x358>
	break;			/* Done. */
      dataptr += DCTSIZE;	/* advance pointer to next row */
 8016aba:	f8d7 3164 	ldr.w	r3, [r7, #356]	@ 0x164
 8016abe:	3320      	adds	r3, #32
 8016ac0:	f8c7 3164 	str.w	r3, [r7, #356]	@ 0x164
 8016ac4:	e674      	b.n	80167b0 <jpeg_fdct_8x16+0x38>
    } else
      dataptr = workspace;	/* switch pointer to extended workspace */
 8016ac6:	f107 0314 	add.w	r3, r7, #20
 8016aca:	f8c7 3164 	str.w	r3, [r7, #356]	@ 0x164
    elemptr = sample_data[ctr] + start_col;
 8016ace:	e66f      	b.n	80167b0 <jpeg_fdct_8x16+0x38>
	break;			/* Done. */
 8016ad0:	bf00      	nop
   * by an overall factor of 8.
   * We must also scale the output by 8/16 = 1/2.
   * 16-point FDCT kernel, cK represents sqrt(2) * cos(K*pi/32).
   */

  dataptr = data;
 8016ad2:	f507 73b4 	add.w	r3, r7, #360	@ 0x168
 8016ad6:	f5a3 73ae 	sub.w	r3, r3, #348	@ 0x15c
 8016ada:	681b      	ldr	r3, [r3, #0]
 8016adc:	f8c7 3164 	str.w	r3, [r7, #356]	@ 0x164
  wsptr = workspace;
 8016ae0:	f107 0314 	add.w	r3, r7, #20
 8016ae4:	f8c7 3160 	str.w	r3, [r7, #352]	@ 0x160
  for (ctr = DCTSIZE-1; ctr >= 0; ctr--) {
 8016ae8:	2307      	movs	r3, #7
 8016aea:	f8c7 315c 	str.w	r3, [r7, #348]	@ 0x15c
 8016aee:	e263      	b.n	8016fb8 <jpeg_fdct_8x16+0x840>
 8016af0:	ffffc4df 	.word	0xffffc4df
 8016af4:	ffffe333 	.word	0xffffe333
 8016af8:	ffffadfd 	.word	0xffffadfd
 8016afc:	fffff384 	.word	0xfffff384
 8016b00:	ffffc13b 	.word	0xffffc13b
    /* Even part */

    tmp0 = dataptr[DCTSIZE*0] + wsptr[DCTSIZE*7];
 8016b04:	f8d7 3164 	ldr.w	r3, [r7, #356]	@ 0x164
 8016b08:	681a      	ldr	r2, [r3, #0]
 8016b0a:	f8d7 3160 	ldr.w	r3, [r7, #352]	@ 0x160
 8016b0e:	33e0      	adds	r3, #224	@ 0xe0
 8016b10:	681b      	ldr	r3, [r3, #0]
 8016b12:	4413      	add	r3, r2
 8016b14:	f8c7 3154 	str.w	r3, [r7, #340]	@ 0x154
    tmp1 = dataptr[DCTSIZE*1] + wsptr[DCTSIZE*6];
 8016b18:	f8d7 3164 	ldr.w	r3, [r7, #356]	@ 0x164
 8016b1c:	3320      	adds	r3, #32
 8016b1e:	681a      	ldr	r2, [r3, #0]
 8016b20:	f8d7 3160 	ldr.w	r3, [r7, #352]	@ 0x160
 8016b24:	33c0      	adds	r3, #192	@ 0xc0
 8016b26:	681b      	ldr	r3, [r3, #0]
 8016b28:	4413      	add	r3, r2
 8016b2a:	f8c7 3150 	str.w	r3, [r7, #336]	@ 0x150
    tmp2 = dataptr[DCTSIZE*2] + wsptr[DCTSIZE*5];
 8016b2e:	f8d7 3164 	ldr.w	r3, [r7, #356]	@ 0x164
 8016b32:	3340      	adds	r3, #64	@ 0x40
 8016b34:	681a      	ldr	r2, [r3, #0]
 8016b36:	f8d7 3160 	ldr.w	r3, [r7, #352]	@ 0x160
 8016b3a:	33a0      	adds	r3, #160	@ 0xa0
 8016b3c:	681b      	ldr	r3, [r3, #0]
 8016b3e:	4413      	add	r3, r2
 8016b40:	f8c7 314c 	str.w	r3, [r7, #332]	@ 0x14c
    tmp3 = dataptr[DCTSIZE*3] + wsptr[DCTSIZE*4];
 8016b44:	f8d7 3164 	ldr.w	r3, [r7, #356]	@ 0x164
 8016b48:	3360      	adds	r3, #96	@ 0x60
 8016b4a:	681a      	ldr	r2, [r3, #0]
 8016b4c:	f8d7 3160 	ldr.w	r3, [r7, #352]	@ 0x160
 8016b50:	3380      	adds	r3, #128	@ 0x80
 8016b52:	681b      	ldr	r3, [r3, #0]
 8016b54:	4413      	add	r3, r2
 8016b56:	f8c7 3148 	str.w	r3, [r7, #328]	@ 0x148
    tmp4 = dataptr[DCTSIZE*4] + wsptr[DCTSIZE*3];
 8016b5a:	f8d7 3164 	ldr.w	r3, [r7, #356]	@ 0x164
 8016b5e:	3380      	adds	r3, #128	@ 0x80
 8016b60:	681a      	ldr	r2, [r3, #0]
 8016b62:	f8d7 3160 	ldr.w	r3, [r7, #352]	@ 0x160
 8016b66:	3360      	adds	r3, #96	@ 0x60
 8016b68:	681b      	ldr	r3, [r3, #0]
 8016b6a:	4413      	add	r3, r2
 8016b6c:	f8c7 3130 	str.w	r3, [r7, #304]	@ 0x130
    tmp5 = dataptr[DCTSIZE*5] + wsptr[DCTSIZE*2];
 8016b70:	f8d7 3164 	ldr.w	r3, [r7, #356]	@ 0x164
 8016b74:	33a0      	adds	r3, #160	@ 0xa0
 8016b76:	681a      	ldr	r2, [r3, #0]
 8016b78:	f8d7 3160 	ldr.w	r3, [r7, #352]	@ 0x160
 8016b7c:	3340      	adds	r3, #64	@ 0x40
 8016b7e:	681b      	ldr	r3, [r3, #0]
 8016b80:	4413      	add	r3, r2
 8016b82:	f8c7 312c 	str.w	r3, [r7, #300]	@ 0x12c
    tmp6 = dataptr[DCTSIZE*6] + wsptr[DCTSIZE*1];
 8016b86:	f8d7 3164 	ldr.w	r3, [r7, #356]	@ 0x164
 8016b8a:	33c0      	adds	r3, #192	@ 0xc0
 8016b8c:	681a      	ldr	r2, [r3, #0]
 8016b8e:	f8d7 3160 	ldr.w	r3, [r7, #352]	@ 0x160
 8016b92:	3320      	adds	r3, #32
 8016b94:	681b      	ldr	r3, [r3, #0]
 8016b96:	4413      	add	r3, r2
 8016b98:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
    tmp7 = dataptr[DCTSIZE*7] + wsptr[DCTSIZE*0];
 8016b9c:	f8d7 3164 	ldr.w	r3, [r7, #356]	@ 0x164
 8016ba0:	33e0      	adds	r3, #224	@ 0xe0
 8016ba2:	681a      	ldr	r2, [r3, #0]
 8016ba4:	f8d7 3160 	ldr.w	r3, [r7, #352]	@ 0x160
 8016ba8:	681b      	ldr	r3, [r3, #0]
 8016baa:	4413      	add	r3, r2
 8016bac:	f8c7 3124 	str.w	r3, [r7, #292]	@ 0x124

    tmp10 = tmp0 + tmp7;
 8016bb0:	f8d7 2154 	ldr.w	r2, [r7, #340]	@ 0x154
 8016bb4:	f8d7 3124 	ldr.w	r3, [r7, #292]	@ 0x124
 8016bb8:	4413      	add	r3, r2
 8016bba:	f8c7 3144 	str.w	r3, [r7, #324]	@ 0x144
    tmp14 = tmp0 - tmp7;
 8016bbe:	f8d7 2154 	ldr.w	r2, [r7, #340]	@ 0x154
 8016bc2:	f8d7 3124 	ldr.w	r3, [r7, #292]	@ 0x124
 8016bc6:	1ad3      	subs	r3, r2, r3
 8016bc8:	f8c7 3120 	str.w	r3, [r7, #288]	@ 0x120
    tmp11 = tmp1 + tmp6;
 8016bcc:	f8d7 2150 	ldr.w	r2, [r7, #336]	@ 0x150
 8016bd0:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 8016bd4:	4413      	add	r3, r2
 8016bd6:	f8c7 313c 	str.w	r3, [r7, #316]	@ 0x13c
    tmp15 = tmp1 - tmp6;
 8016bda:	f8d7 2150 	ldr.w	r2, [r7, #336]	@ 0x150
 8016bde:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 8016be2:	1ad3      	subs	r3, r2, r3
 8016be4:	f8c7 311c 	str.w	r3, [r7, #284]	@ 0x11c
    tmp12 = tmp2 + tmp5;
 8016be8:	f8d7 214c 	ldr.w	r2, [r7, #332]	@ 0x14c
 8016bec:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 8016bf0:	4413      	add	r3, r2
 8016bf2:	f8c7 3140 	str.w	r3, [r7, #320]	@ 0x140
    tmp16 = tmp2 - tmp5;
 8016bf6:	f8d7 214c 	ldr.w	r2, [r7, #332]	@ 0x14c
 8016bfa:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 8016bfe:	1ad3      	subs	r3, r2, r3
 8016c00:	f8c7 3118 	str.w	r3, [r7, #280]	@ 0x118
    tmp13 = tmp3 + tmp4;
 8016c04:	f8d7 2148 	ldr.w	r2, [r7, #328]	@ 0x148
 8016c08:	f8d7 3130 	ldr.w	r3, [r7, #304]	@ 0x130
 8016c0c:	4413      	add	r3, r2
 8016c0e:	f8c7 3138 	str.w	r3, [r7, #312]	@ 0x138
    tmp17 = tmp3 - tmp4;
 8016c12:	f8d7 2148 	ldr.w	r2, [r7, #328]	@ 0x148
 8016c16:	f8d7 3130 	ldr.w	r3, [r7, #304]	@ 0x130
 8016c1a:	1ad3      	subs	r3, r2, r3
 8016c1c:	f8c7 3114 	str.w	r3, [r7, #276]	@ 0x114

    tmp0 = dataptr[DCTSIZE*0] - wsptr[DCTSIZE*7];
 8016c20:	f8d7 3164 	ldr.w	r3, [r7, #356]	@ 0x164
 8016c24:	681a      	ldr	r2, [r3, #0]
 8016c26:	f8d7 3160 	ldr.w	r3, [r7, #352]	@ 0x160
 8016c2a:	33e0      	adds	r3, #224	@ 0xe0
 8016c2c:	681b      	ldr	r3, [r3, #0]
 8016c2e:	1ad3      	subs	r3, r2, r3
 8016c30:	f8c7 3154 	str.w	r3, [r7, #340]	@ 0x154
    tmp1 = dataptr[DCTSIZE*1] - wsptr[DCTSIZE*6];
 8016c34:	f8d7 3164 	ldr.w	r3, [r7, #356]	@ 0x164
 8016c38:	3320      	adds	r3, #32
 8016c3a:	681a      	ldr	r2, [r3, #0]
 8016c3c:	f8d7 3160 	ldr.w	r3, [r7, #352]	@ 0x160
 8016c40:	33c0      	adds	r3, #192	@ 0xc0
 8016c42:	681b      	ldr	r3, [r3, #0]
 8016c44:	1ad3      	subs	r3, r2, r3
 8016c46:	f8c7 3150 	str.w	r3, [r7, #336]	@ 0x150
    tmp2 = dataptr[DCTSIZE*2] - wsptr[DCTSIZE*5];
 8016c4a:	f8d7 3164 	ldr.w	r3, [r7, #356]	@ 0x164
 8016c4e:	3340      	adds	r3, #64	@ 0x40
 8016c50:	681a      	ldr	r2, [r3, #0]
 8016c52:	f8d7 3160 	ldr.w	r3, [r7, #352]	@ 0x160
 8016c56:	33a0      	adds	r3, #160	@ 0xa0
 8016c58:	681b      	ldr	r3, [r3, #0]
 8016c5a:	1ad3      	subs	r3, r2, r3
 8016c5c:	f8c7 314c 	str.w	r3, [r7, #332]	@ 0x14c
    tmp3 = dataptr[DCTSIZE*3] - wsptr[DCTSIZE*4];
 8016c60:	f8d7 3164 	ldr.w	r3, [r7, #356]	@ 0x164
 8016c64:	3360      	adds	r3, #96	@ 0x60
 8016c66:	681a      	ldr	r2, [r3, #0]
 8016c68:	f8d7 3160 	ldr.w	r3, [r7, #352]	@ 0x160
 8016c6c:	3380      	adds	r3, #128	@ 0x80
 8016c6e:	681b      	ldr	r3, [r3, #0]
 8016c70:	1ad3      	subs	r3, r2, r3
 8016c72:	f8c7 3148 	str.w	r3, [r7, #328]	@ 0x148
    tmp4 = dataptr[DCTSIZE*4] - wsptr[DCTSIZE*3];
 8016c76:	f8d7 3164 	ldr.w	r3, [r7, #356]	@ 0x164
 8016c7a:	3380      	adds	r3, #128	@ 0x80
 8016c7c:	681a      	ldr	r2, [r3, #0]
 8016c7e:	f8d7 3160 	ldr.w	r3, [r7, #352]	@ 0x160
 8016c82:	3360      	adds	r3, #96	@ 0x60
 8016c84:	681b      	ldr	r3, [r3, #0]
 8016c86:	1ad3      	subs	r3, r2, r3
 8016c88:	f8c7 3130 	str.w	r3, [r7, #304]	@ 0x130
    tmp5 = dataptr[DCTSIZE*5] - wsptr[DCTSIZE*2];
 8016c8c:	f8d7 3164 	ldr.w	r3, [r7, #356]	@ 0x164
 8016c90:	33a0      	adds	r3, #160	@ 0xa0
 8016c92:	681a      	ldr	r2, [r3, #0]
 8016c94:	f8d7 3160 	ldr.w	r3, [r7, #352]	@ 0x160
 8016c98:	3340      	adds	r3, #64	@ 0x40
 8016c9a:	681b      	ldr	r3, [r3, #0]
 8016c9c:	1ad3      	subs	r3, r2, r3
 8016c9e:	f8c7 312c 	str.w	r3, [r7, #300]	@ 0x12c
    tmp6 = dataptr[DCTSIZE*6] - wsptr[DCTSIZE*1];
 8016ca2:	f8d7 3164 	ldr.w	r3, [r7, #356]	@ 0x164
 8016ca6:	33c0      	adds	r3, #192	@ 0xc0
 8016ca8:	681a      	ldr	r2, [r3, #0]
 8016caa:	f8d7 3160 	ldr.w	r3, [r7, #352]	@ 0x160
 8016cae:	3320      	adds	r3, #32
 8016cb0:	681b      	ldr	r3, [r3, #0]
 8016cb2:	1ad3      	subs	r3, r2, r3
 8016cb4:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
    tmp7 = dataptr[DCTSIZE*7] - wsptr[DCTSIZE*0];
 8016cb8:	f8d7 3164 	ldr.w	r3, [r7, #356]	@ 0x164
 8016cbc:	33e0      	adds	r3, #224	@ 0xe0
 8016cbe:	681a      	ldr	r2, [r3, #0]
 8016cc0:	f8d7 3160 	ldr.w	r3, [r7, #352]	@ 0x160
 8016cc4:	681b      	ldr	r3, [r3, #0]
 8016cc6:	1ad3      	subs	r3, r2, r3
 8016cc8:	f8c7 3124 	str.w	r3, [r7, #292]	@ 0x124

    dataptr[DCTSIZE*0] = (DCTELEM)
      DESCALE(tmp10 + tmp11 + tmp12 + tmp13, PASS1_BITS+1);
 8016ccc:	f8d7 2144 	ldr.w	r2, [r7, #324]	@ 0x144
 8016cd0:	f8d7 313c 	ldr.w	r3, [r7, #316]	@ 0x13c
 8016cd4:	441a      	add	r2, r3
 8016cd6:	f8d7 3140 	ldr.w	r3, [r7, #320]	@ 0x140
 8016cda:	441a      	add	r2, r3
 8016cdc:	f8d7 3138 	ldr.w	r3, [r7, #312]	@ 0x138
 8016ce0:	4413      	add	r3, r2
 8016ce2:	3304      	adds	r3, #4
 8016ce4:	10da      	asrs	r2, r3, #3
    dataptr[DCTSIZE*0] = (DCTELEM)
 8016ce6:	f8d7 3164 	ldr.w	r3, [r7, #356]	@ 0x164
 8016cea:	601a      	str	r2, [r3, #0]
    dataptr[DCTSIZE*4] = (DCTELEM)
      DESCALE(MULTIPLY(tmp10 - tmp13, FIX(1.306562965)) + /* c4[16] = c2[8] */
 8016cec:	f8d7 2144 	ldr.w	r2, [r7, #324]	@ 0x144
 8016cf0:	f8d7 3138 	ldr.w	r3, [r7, #312]	@ 0x138
 8016cf4:	1ad3      	subs	r3, r2, r3
 8016cf6:	f642 12cf 	movw	r2, #10703	@ 0x29cf
 8016cfa:	fb03 f202 	mul.w	r2, r3, r2
 8016cfe:	f8d7 113c 	ldr.w	r1, [r7, #316]	@ 0x13c
 8016d02:	f8d7 3140 	ldr.w	r3, [r7, #320]	@ 0x140
 8016d06:	1acb      	subs	r3, r1, r3
 8016d08:	f241 1151 	movw	r1, #4433	@ 0x1151
 8016d0c:	fb01 f303 	mul.w	r3, r1, r3
 8016d10:	4413      	add	r3, r2
 8016d12:	f503 4200 	add.w	r2, r3, #32768	@ 0x8000
    dataptr[DCTSIZE*4] = (DCTELEM)
 8016d16:	f8d7 3164 	ldr.w	r3, [r7, #356]	@ 0x164
 8016d1a:	3380      	adds	r3, #128	@ 0x80
      DESCALE(MULTIPLY(tmp10 - tmp13, FIX(1.306562965)) + /* c4[16] = c2[8] */
 8016d1c:	1412      	asrs	r2, r2, #16
    dataptr[DCTSIZE*4] = (DCTELEM)
 8016d1e:	601a      	str	r2, [r3, #0]
	      MULTIPLY(tmp11 - tmp12, FIX_0_541196100),   /* c12[16] = c6[8] */
	      CONST_BITS+PASS1_BITS+1);

    tmp10 = MULTIPLY(tmp17 - tmp15, FIX(0.275899379)) +   /* c14[16] = c7[8] */
 8016d20:	f8d7 2114 	ldr.w	r2, [r7, #276]	@ 0x114
 8016d24:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8016d28:	1ad3      	subs	r3, r2, r3
 8016d2a:	f640 02d4 	movw	r2, #2260	@ 0x8d4
 8016d2e:	fb03 f202 	mul.w	r2, r3, r2
	    MULTIPLY(tmp14 - tmp16, FIX(1.387039845));    /* c2[16] = c1[8] */
 8016d32:	f8d7 1120 	ldr.w	r1, [r7, #288]	@ 0x120
 8016d36:	f8d7 3118 	ldr.w	r3, [r7, #280]	@ 0x118
 8016d3a:	1acb      	subs	r3, r1, r3
 8016d3c:	f642 4163 	movw	r1, #11363	@ 0x2c63
 8016d40:	fb01 f303 	mul.w	r3, r1, r3
    tmp10 = MULTIPLY(tmp17 - tmp15, FIX(0.275899379)) +   /* c14[16] = c7[8] */
 8016d44:	4413      	add	r3, r2
 8016d46:	f8c7 3144 	str.w	r3, [r7, #324]	@ 0x144

    dataptr[DCTSIZE*2] = (DCTELEM)
      DESCALE(tmp10 + MULTIPLY(tmp15, FIX(1.451774982))   /* c6+c14 */
 8016d4a:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8016d4e:	f642 6275 	movw	r2, #11893	@ 0x2e75
 8016d52:	fb03 f202 	mul.w	r2, r3, r2
 8016d56:	f8d7 3144 	ldr.w	r3, [r7, #324]	@ 0x144
 8016d5a:	441a      	add	r2, r3
 8016d5c:	f8d7 3118 	ldr.w	r3, [r7, #280]	@ 0x118
 8016d60:	f244 5187 	movw	r1, #17799	@ 0x4587
 8016d64:	fb01 f303 	mul.w	r3, r1, r3
 8016d68:	4413      	add	r3, r2
 8016d6a:	f503 4200 	add.w	r2, r3, #32768	@ 0x8000
    dataptr[DCTSIZE*2] = (DCTELEM)
 8016d6e:	f8d7 3164 	ldr.w	r3, [r7, #356]	@ 0x164
 8016d72:	3340      	adds	r3, #64	@ 0x40
      DESCALE(tmp10 + MULTIPLY(tmp15, FIX(1.451774982))   /* c6+c14 */
 8016d74:	1412      	asrs	r2, r2, #16
    dataptr[DCTSIZE*2] = (DCTELEM)
 8016d76:	601a      	str	r2, [r3, #0]
	      + MULTIPLY(tmp16, FIX(2.172734804)),        /* c2+c10 */
	      CONST_BITS+PASS1_BITS+1);
    dataptr[DCTSIZE*6] = (DCTELEM)
      DESCALE(tmp10 - MULTIPLY(tmp14, FIX(0.211164243))   /* c2-c6 */
 8016d78:	f8d7 3120 	ldr.w	r3, [r7, #288]	@ 0x120
 8016d7c:	4a95      	ldr	r2, [pc, #596]	@ (8016fd4 <jpeg_fdct_8x16+0x85c>)
 8016d7e:	fb03 f202 	mul.w	r2, r3, r2
 8016d82:	f8d7 3144 	ldr.w	r3, [r7, #324]	@ 0x144
 8016d86:	441a      	add	r2, r3
 8016d88:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8016d8c:	4992      	ldr	r1, [pc, #584]	@ (8016fd8 <jpeg_fdct_8x16+0x860>)
 8016d8e:	fb01 f303 	mul.w	r3, r1, r3
 8016d92:	4413      	add	r3, r2
 8016d94:	f503 4200 	add.w	r2, r3, #32768	@ 0x8000
    dataptr[DCTSIZE*6] = (DCTELEM)
 8016d98:	f8d7 3164 	ldr.w	r3, [r7, #356]	@ 0x164
 8016d9c:	33c0      	adds	r3, #192	@ 0xc0
      DESCALE(tmp10 - MULTIPLY(tmp14, FIX(0.211164243))   /* c2-c6 */
 8016d9e:	1412      	asrs	r2, r2, #16
    dataptr[DCTSIZE*6] = (DCTELEM)
 8016da0:	601a      	str	r2, [r3, #0]
	      - MULTIPLY(tmp17, FIX(1.061594338)),        /* c10+c14 */
	      CONST_BITS+PASS1_BITS+1);

    /* Odd part */

    tmp11 = MULTIPLY(tmp0 + tmp1, FIX(1.353318001)) +         /* c3 */
 8016da2:	f8d7 2154 	ldr.w	r2, [r7, #340]	@ 0x154
 8016da6:	f8d7 3150 	ldr.w	r3, [r7, #336]	@ 0x150
 8016daa:	4413      	add	r3, r2
 8016dac:	f642 324e 	movw	r2, #11086	@ 0x2b4e
 8016db0:	fb03 f202 	mul.w	r2, r3, r2
	    MULTIPLY(tmp6 - tmp7, FIX(0.410524528));          /* c13 */
 8016db4:	f8d7 1128 	ldr.w	r1, [r7, #296]	@ 0x128
 8016db8:	f8d7 3124 	ldr.w	r3, [r7, #292]	@ 0x124
 8016dbc:	1acb      	subs	r3, r1, r3
 8016dbe:	f640 5123 	movw	r1, #3363	@ 0xd23
 8016dc2:	fb01 f303 	mul.w	r3, r1, r3
    tmp11 = MULTIPLY(tmp0 + tmp1, FIX(1.353318001)) +         /* c3 */
 8016dc6:	4413      	add	r3, r2
 8016dc8:	f8c7 313c 	str.w	r3, [r7, #316]	@ 0x13c
    tmp12 = MULTIPLY(tmp0 + tmp2, FIX(1.247225013)) +         /* c5 */
 8016dcc:	f8d7 2154 	ldr.w	r2, [r7, #340]	@ 0x154
 8016dd0:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8016dd4:	4413      	add	r3, r2
 8016dd6:	f242 72e9 	movw	r2, #10217	@ 0x27e9
 8016dda:	fb03 f202 	mul.w	r2, r3, r2
	    MULTIPLY(tmp5 + tmp7, FIX(0.666655658));          /* c11 */
 8016dde:	f8d7 112c 	ldr.w	r1, [r7, #300]	@ 0x12c
 8016de2:	f8d7 3124 	ldr.w	r3, [r7, #292]	@ 0x124
 8016de6:	440b      	add	r3, r1
 8016de8:	f241 5155 	movw	r1, #5461	@ 0x1555
 8016dec:	fb01 f303 	mul.w	r3, r1, r3
    tmp12 = MULTIPLY(tmp0 + tmp2, FIX(1.247225013)) +         /* c5 */
 8016df0:	4413      	add	r3, r2
 8016df2:	f8c7 3140 	str.w	r3, [r7, #320]	@ 0x140
    tmp13 = MULTIPLY(tmp0 + tmp3, FIX(1.093201867)) +         /* c7 */
 8016df6:	f8d7 2154 	ldr.w	r2, [r7, #340]	@ 0x154
 8016dfa:	f8d7 3148 	ldr.w	r3, [r7, #328]	@ 0x148
 8016dfe:	4413      	add	r3, r2
 8016e00:	f242 22fc 	movw	r2, #8956	@ 0x22fc
 8016e04:	fb03 f202 	mul.w	r2, r3, r2
	    MULTIPLY(tmp4 - tmp7, FIX(0.897167586));          /* c9 */
 8016e08:	f8d7 1130 	ldr.w	r1, [r7, #304]	@ 0x130
 8016e0c:	f8d7 3124 	ldr.w	r3, [r7, #292]	@ 0x124
 8016e10:	1acb      	subs	r3, r1, r3
 8016e12:	f641 41b6 	movw	r1, #7350	@ 0x1cb6
 8016e16:	fb01 f303 	mul.w	r3, r1, r3
    tmp13 = MULTIPLY(tmp0 + tmp3, FIX(1.093201867)) +         /* c7 */
 8016e1a:	4413      	add	r3, r2
 8016e1c:	f8c7 3138 	str.w	r3, [r7, #312]	@ 0x138
    tmp14 = MULTIPLY(tmp1 + tmp2, FIX(0.138617169)) +         /* c15 */
 8016e20:	f8d7 2150 	ldr.w	r2, [r7, #336]	@ 0x150
 8016e24:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8016e28:	4413      	add	r3, r2
 8016e2a:	f44f 628e 	mov.w	r2, #1136	@ 0x470
 8016e2e:	fb03 f202 	mul.w	r2, r3, r2
	    MULTIPLY(tmp6 - tmp5, FIX(1.407403738));          /* c1 */
 8016e32:	f8d7 1128 	ldr.w	r1, [r7, #296]	@ 0x128
 8016e36:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 8016e3a:	1acb      	subs	r3, r1, r3
 8016e3c:	f642 5109 	movw	r1, #11529	@ 0x2d09
 8016e40:	fb01 f303 	mul.w	r3, r1, r3
    tmp14 = MULTIPLY(tmp1 + tmp2, FIX(0.138617169)) +         /* c15 */
 8016e44:	4413      	add	r3, r2
 8016e46:	f8c7 3120 	str.w	r3, [r7, #288]	@ 0x120
    tmp15 = MULTIPLY(tmp1 + tmp3, - FIX(0.666655658)) +       /* -c11 */
 8016e4a:	f8d7 2150 	ldr.w	r2, [r7, #336]	@ 0x150
 8016e4e:	f8d7 3148 	ldr.w	r3, [r7, #328]	@ 0x148
 8016e52:	4413      	add	r3, r2
 8016e54:	4a61      	ldr	r2, [pc, #388]	@ (8016fdc <jpeg_fdct_8x16+0x864>)
 8016e56:	fb03 f202 	mul.w	r2, r3, r2
	    MULTIPLY(tmp4 + tmp6, - FIX(1.247225013));        /* -c5 */
 8016e5a:	f8d7 1130 	ldr.w	r1, [r7, #304]	@ 0x130
 8016e5e:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 8016e62:	440b      	add	r3, r1
 8016e64:	495e      	ldr	r1, [pc, #376]	@ (8016fe0 <jpeg_fdct_8x16+0x868>)
 8016e66:	fb01 f303 	mul.w	r3, r1, r3
    tmp15 = MULTIPLY(tmp1 + tmp3, - FIX(0.666655658)) +       /* -c11 */
 8016e6a:	4413      	add	r3, r2
 8016e6c:	f8c7 311c 	str.w	r3, [r7, #284]	@ 0x11c
    tmp16 = MULTIPLY(tmp2 + tmp3, - FIX(1.353318001)) +       /* -c3 */
 8016e70:	f8d7 214c 	ldr.w	r2, [r7, #332]	@ 0x14c
 8016e74:	f8d7 3148 	ldr.w	r3, [r7, #328]	@ 0x148
 8016e78:	4413      	add	r3, r2
 8016e7a:	4a5a      	ldr	r2, [pc, #360]	@ (8016fe4 <jpeg_fdct_8x16+0x86c>)
 8016e7c:	fb03 f202 	mul.w	r2, r3, r2
	    MULTIPLY(tmp5 - tmp4, FIX(0.410524528));          /* c13 */
 8016e80:	f8d7 112c 	ldr.w	r1, [r7, #300]	@ 0x12c
 8016e84:	f8d7 3130 	ldr.w	r3, [r7, #304]	@ 0x130
 8016e88:	1acb      	subs	r3, r1, r3
 8016e8a:	f640 5123 	movw	r1, #3363	@ 0xd23
 8016e8e:	fb01 f303 	mul.w	r3, r1, r3
    tmp16 = MULTIPLY(tmp2 + tmp3, - FIX(1.353318001)) +       /* -c3 */
 8016e92:	4413      	add	r3, r2
 8016e94:	f8c7 3118 	str.w	r3, [r7, #280]	@ 0x118
    tmp10 = tmp11 + tmp12 + tmp13 -
 8016e98:	f8d7 213c 	ldr.w	r2, [r7, #316]	@ 0x13c
 8016e9c:	f8d7 3140 	ldr.w	r3, [r7, #320]	@ 0x140
 8016ea0:	441a      	add	r2, r3
 8016ea2:	f8d7 3138 	ldr.w	r3, [r7, #312]	@ 0x138
 8016ea6:	441a      	add	r2, r3
	    MULTIPLY(tmp0, FIX(2.286341144)) +                /* c7+c5+c3-c1 */
 8016ea8:	f8d7 3154 	ldr.w	r3, [r7, #340]	@ 0x154
 8016eac:	494e      	ldr	r1, [pc, #312]	@ (8016fe8 <jpeg_fdct_8x16+0x870>)
 8016eae:	fb01 f303 	mul.w	r3, r1, r3
    tmp10 = tmp11 + tmp12 + tmp13 -
 8016eb2:	441a      	add	r2, r3
	    MULTIPLY(tmp7, FIX(0.779653625));                 /* c15+c13-c11+c9 */
 8016eb4:	f8d7 3124 	ldr.w	r3, [r7, #292]	@ 0x124
 8016eb8:	f641 01f3 	movw	r1, #6387	@ 0x18f3
 8016ebc:	fb01 f303 	mul.w	r3, r1, r3
    tmp10 = tmp11 + tmp12 + tmp13 -
 8016ec0:	4413      	add	r3, r2
 8016ec2:	f8c7 3144 	str.w	r3, [r7, #324]	@ 0x144
    tmp11 += tmp14 + tmp15 + MULTIPLY(tmp1, FIX(0.071888074)) /* c9-c3-c15+c11 */
 8016ec6:	f8d7 2120 	ldr.w	r2, [r7, #288]	@ 0x120
 8016eca:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8016ece:	441a      	add	r2, r3
 8016ed0:	f8d7 3150 	ldr.w	r3, [r7, #336]	@ 0x150
 8016ed4:	f240 214d 	movw	r1, #589	@ 0x24d
 8016ed8:	fb01 f303 	mul.w	r3, r1, r3
 8016edc:	441a      	add	r2, r3
	     - MULTIPLY(tmp6, FIX(1.663905119));              /* c7+c13+c1-c5 */
 8016ede:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 8016ee2:	4942      	ldr	r1, [pc, #264]	@ (8016fec <jpeg_fdct_8x16+0x874>)
 8016ee4:	fb01 f303 	mul.w	r3, r1, r3
 8016ee8:	4413      	add	r3, r2
    tmp11 += tmp14 + tmp15 + MULTIPLY(tmp1, FIX(0.071888074)) /* c9-c3-c15+c11 */
 8016eea:	f8d7 213c 	ldr.w	r2, [r7, #316]	@ 0x13c
 8016eee:	4413      	add	r3, r2
 8016ef0:	f8c7 313c 	str.w	r3, [r7, #316]	@ 0x13c
    tmp12 += tmp14 + tmp16 - MULTIPLY(tmp2, FIX(1.125726048)) /* c7+c5+c15-c3 */
 8016ef4:	f8d7 2120 	ldr.w	r2, [r7, #288]	@ 0x120
 8016ef8:	f8d7 3118 	ldr.w	r3, [r7, #280]	@ 0x118
 8016efc:	441a      	add	r2, r3
 8016efe:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8016f02:	493b      	ldr	r1, [pc, #236]	@ (8016ff0 <jpeg_fdct_8x16+0x878>)
 8016f04:	fb01 f303 	mul.w	r3, r1, r3
 8016f08:	441a      	add	r2, r3
	     + MULTIPLY(tmp5, FIX(1.227391138));              /* c9-c11+c1-c13 */
 8016f0a:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 8016f0e:	f242 7147 	movw	r1, #10055	@ 0x2747
 8016f12:	fb01 f303 	mul.w	r3, r1, r3
 8016f16:	4413      	add	r3, r2
    tmp12 += tmp14 + tmp16 - MULTIPLY(tmp2, FIX(1.125726048)) /* c7+c5+c15-c3 */
 8016f18:	f8d7 2140 	ldr.w	r2, [r7, #320]	@ 0x140
 8016f1c:	4413      	add	r3, r2
 8016f1e:	f8c7 3140 	str.w	r3, [r7, #320]	@ 0x140
    tmp13 += tmp15 + tmp16 + MULTIPLY(tmp3, FIX(1.065388962)) /* c15+c3+c11-c7 */
 8016f22:	f8d7 211c 	ldr.w	r2, [r7, #284]	@ 0x11c
 8016f26:	f8d7 3118 	ldr.w	r3, [r7, #280]	@ 0x118
 8016f2a:	441a      	add	r2, r3
 8016f2c:	f8d7 3148 	ldr.w	r3, [r7, #328]	@ 0x148
 8016f30:	f242 2118 	movw	r1, #8728	@ 0x2218
 8016f34:	fb01 f303 	mul.w	r3, r1, r3
 8016f38:	441a      	add	r2, r3
	     + MULTIPLY(tmp4, FIX(2.167985692));              /* c1+c13+c5-c9 */
 8016f3a:	f8d7 3130 	ldr.w	r3, [r7, #304]	@ 0x130
 8016f3e:	f244 5160 	movw	r1, #17760	@ 0x4560
 8016f42:	fb01 f303 	mul.w	r3, r1, r3
 8016f46:	4413      	add	r3, r2
    tmp13 += tmp15 + tmp16 + MULTIPLY(tmp3, FIX(1.065388962)) /* c15+c3+c11-c7 */
 8016f48:	f8d7 2138 	ldr.w	r2, [r7, #312]	@ 0x138
 8016f4c:	4413      	add	r3, r2
 8016f4e:	f8c7 3138 	str.w	r3, [r7, #312]	@ 0x138

    dataptr[DCTSIZE*1] = (DCTELEM) DESCALE(tmp10, CONST_BITS+PASS1_BITS+1);
 8016f52:	f8d7 3144 	ldr.w	r3, [r7, #324]	@ 0x144
 8016f56:	f503 4200 	add.w	r2, r3, #32768	@ 0x8000
 8016f5a:	f8d7 3164 	ldr.w	r3, [r7, #356]	@ 0x164
 8016f5e:	3320      	adds	r3, #32
 8016f60:	1412      	asrs	r2, r2, #16
 8016f62:	601a      	str	r2, [r3, #0]
    dataptr[DCTSIZE*3] = (DCTELEM) DESCALE(tmp11, CONST_BITS+PASS1_BITS+1);
 8016f64:	f8d7 313c 	ldr.w	r3, [r7, #316]	@ 0x13c
 8016f68:	f503 4200 	add.w	r2, r3, #32768	@ 0x8000
 8016f6c:	f8d7 3164 	ldr.w	r3, [r7, #356]	@ 0x164
 8016f70:	3360      	adds	r3, #96	@ 0x60
 8016f72:	1412      	asrs	r2, r2, #16
 8016f74:	601a      	str	r2, [r3, #0]
    dataptr[DCTSIZE*5] = (DCTELEM) DESCALE(tmp12, CONST_BITS+PASS1_BITS+1);
 8016f76:	f8d7 3140 	ldr.w	r3, [r7, #320]	@ 0x140
 8016f7a:	f503 4200 	add.w	r2, r3, #32768	@ 0x8000
 8016f7e:	f8d7 3164 	ldr.w	r3, [r7, #356]	@ 0x164
 8016f82:	33a0      	adds	r3, #160	@ 0xa0
 8016f84:	1412      	asrs	r2, r2, #16
 8016f86:	601a      	str	r2, [r3, #0]
    dataptr[DCTSIZE*7] = (DCTELEM) DESCALE(tmp13, CONST_BITS+PASS1_BITS+1);
 8016f88:	f8d7 3138 	ldr.w	r3, [r7, #312]	@ 0x138
 8016f8c:	f503 4200 	add.w	r2, r3, #32768	@ 0x8000
 8016f90:	f8d7 3164 	ldr.w	r3, [r7, #356]	@ 0x164
 8016f94:	33e0      	adds	r3, #224	@ 0xe0
 8016f96:	1412      	asrs	r2, r2, #16
 8016f98:	601a      	str	r2, [r3, #0]

    dataptr++;			/* advance pointer to next column */
 8016f9a:	f8d7 3164 	ldr.w	r3, [r7, #356]	@ 0x164
 8016f9e:	3304      	adds	r3, #4
 8016fa0:	f8c7 3164 	str.w	r3, [r7, #356]	@ 0x164
    wsptr++;			/* advance pointer to next column */
 8016fa4:	f8d7 3160 	ldr.w	r3, [r7, #352]	@ 0x160
 8016fa8:	3304      	adds	r3, #4
 8016faa:	f8c7 3160 	str.w	r3, [r7, #352]	@ 0x160
  for (ctr = DCTSIZE-1; ctr >= 0; ctr--) {
 8016fae:	f8d7 315c 	ldr.w	r3, [r7, #348]	@ 0x15c
 8016fb2:	3b01      	subs	r3, #1
 8016fb4:	f8c7 315c 	str.w	r3, [r7, #348]	@ 0x15c
 8016fb8:	f8d7 315c 	ldr.w	r3, [r7, #348]	@ 0x15c
 8016fbc:	2b00      	cmp	r3, #0
 8016fbe:	f6bf ada1 	bge.w	8016b04 <jpeg_fdct_8x16+0x38c>
  }
}
 8016fc2:	bf00      	nop
 8016fc4:	bf00      	nop
 8016fc6:	f507 77b6 	add.w	r7, r7, #364	@ 0x16c
 8016fca:	46bd      	mov	sp, r7
 8016fcc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016fd0:	4770      	bx	lr
 8016fd2:	bf00      	nop
 8016fd4:	fffff93e 	.word	0xfffff93e
 8016fd8:	ffffde07 	.word	0xffffde07
 8016fdc:	ffffeaab 	.word	0xffffeaab
 8016fe0:	ffffd817 	.word	0xffffd817
 8016fe4:	ffffd4b2 	.word	0xffffd4b2
 8016fe8:	ffffb6d6 	.word	0xffffb6d6
 8016fec:	ffffcac1 	.word	0xffffcac1
 8016ff0:	ffffdbfa 	.word	0xffffdbfa

08016ff4 <jpeg_fdct_7x14>:
 * 7-point FDCT in pass 1 (rows), 14-point in pass 2 (columns).
 */

GLOBAL(void)
jpeg_fdct_7x14 (DCTELEM * data, JSAMPARRAY sample_data, JDIMENSION start_col)
{
 8016ff4:	b580      	push	{r7, lr}
 8016ff6:	b0ca      	sub	sp, #296	@ 0x128
 8016ff8:	af00      	add	r7, sp, #0
 8016ffa:	f507 7394 	add.w	r3, r7, #296	@ 0x128
 8016ffe:	f5a3 738e 	sub.w	r3, r3, #284	@ 0x11c
 8017002:	6018      	str	r0, [r3, #0]
 8017004:	f507 7394 	add.w	r3, r7, #296	@ 0x128
 8017008:	f5a3 7390 	sub.w	r3, r3, #288	@ 0x120
 801700c:	6019      	str	r1, [r3, #0]
 801700e:	f507 7394 	add.w	r3, r7, #296	@ 0x128
 8017012:	f5a3 7392 	sub.w	r3, r3, #292	@ 0x124
 8017016:	601a      	str	r2, [r3, #0]
  JSAMPROW elemptr;
  int ctr;
  SHIFT_TEMPS

  /* Pre-zero output coefficient block. */
  MEMZERO(data, SIZEOF(DCTELEM) * DCTSIZE2);
 8017018:	f507 7394 	add.w	r3, r7, #296	@ 0x128
 801701c:	f5a3 738e 	sub.w	r3, r3, #284	@ 0x11c
 8017020:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8017024:	2100      	movs	r1, #0
 8017026:	6818      	ldr	r0, [r3, #0]
 8017028:	f002 fce2 	bl	80199f0 <memset>
  /* Pass 1: process rows. */
  /* Note results are scaled up by sqrt(8) compared to a true DCT; */
  /* furthermore, we scale the results by 2**PASS1_BITS. */
  /* 7-point FDCT kernel, cK represents sqrt(2) * cos(K*pi/14). */

  dataptr = data;
 801702c:	f507 7394 	add.w	r3, r7, #296	@ 0x128
 8017030:	f5a3 738e 	sub.w	r3, r3, #284	@ 0x11c
 8017034:	681b      	ldr	r3, [r3, #0]
 8017036:	f8c7 3124 	str.w	r3, [r7, #292]	@ 0x124
  ctr = 0;
 801703a:	2300      	movs	r3, #0
 801703c:	f8c7 311c 	str.w	r3, [r7, #284]	@ 0x11c
  for (;;) {
    elemptr = sample_data[ctr] + start_col;
 8017040:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8017044:	009b      	lsls	r3, r3, #2
 8017046:	f507 7294 	add.w	r2, r7, #296	@ 0x128
 801704a:	f5a2 7290 	sub.w	r2, r2, #288	@ 0x120
 801704e:	6812      	ldr	r2, [r2, #0]
 8017050:	4413      	add	r3, r2
 8017052:	681a      	ldr	r2, [r3, #0]
 8017054:	f507 7394 	add.w	r3, r7, #296	@ 0x128
 8017058:	f5a3 7392 	sub.w	r3, r3, #292	@ 0x124
 801705c:	681b      	ldr	r3, [r3, #0]
 801705e:	4413      	add	r3, r2
 8017060:	f8c7 3118 	str.w	r3, [r7, #280]	@ 0x118

    /* Even part */

    tmp0 = GETJSAMPLE(elemptr[0]) + GETJSAMPLE(elemptr[6]);
 8017064:	f8d7 3118 	ldr.w	r3, [r7, #280]	@ 0x118
 8017068:	781b      	ldrb	r3, [r3, #0]
 801706a:	461a      	mov	r2, r3
 801706c:	f8d7 3118 	ldr.w	r3, [r7, #280]	@ 0x118
 8017070:	3306      	adds	r3, #6
 8017072:	781b      	ldrb	r3, [r3, #0]
 8017074:	4413      	add	r3, r2
 8017076:	f8c7 3114 	str.w	r3, [r7, #276]	@ 0x114
    tmp1 = GETJSAMPLE(elemptr[1]) + GETJSAMPLE(elemptr[5]);
 801707a:	f8d7 3118 	ldr.w	r3, [r7, #280]	@ 0x118
 801707e:	3301      	adds	r3, #1
 8017080:	781b      	ldrb	r3, [r3, #0]
 8017082:	461a      	mov	r2, r3
 8017084:	f8d7 3118 	ldr.w	r3, [r7, #280]	@ 0x118
 8017088:	3305      	adds	r3, #5
 801708a:	781b      	ldrb	r3, [r3, #0]
 801708c:	4413      	add	r3, r2
 801708e:	f8c7 3110 	str.w	r3, [r7, #272]	@ 0x110
    tmp2 = GETJSAMPLE(elemptr[2]) + GETJSAMPLE(elemptr[4]);
 8017092:	f8d7 3118 	ldr.w	r3, [r7, #280]	@ 0x118
 8017096:	3302      	adds	r3, #2
 8017098:	781b      	ldrb	r3, [r3, #0]
 801709a:	461a      	mov	r2, r3
 801709c:	f8d7 3118 	ldr.w	r3, [r7, #280]	@ 0x118
 80170a0:	3304      	adds	r3, #4
 80170a2:	781b      	ldrb	r3, [r3, #0]
 80170a4:	4413      	add	r3, r2
 80170a6:	f8c7 310c 	str.w	r3, [r7, #268]	@ 0x10c
    tmp3 = GETJSAMPLE(elemptr[3]);
 80170aa:	f8d7 3118 	ldr.w	r3, [r7, #280]	@ 0x118
 80170ae:	3303      	adds	r3, #3
 80170b0:	781b      	ldrb	r3, [r3, #0]
 80170b2:	f8c7 3108 	str.w	r3, [r7, #264]	@ 0x108

    tmp10 = GETJSAMPLE(elemptr[0]) - GETJSAMPLE(elemptr[6]);
 80170b6:	f8d7 3118 	ldr.w	r3, [r7, #280]	@ 0x118
 80170ba:	781b      	ldrb	r3, [r3, #0]
 80170bc:	461a      	mov	r2, r3
 80170be:	f8d7 3118 	ldr.w	r3, [r7, #280]	@ 0x118
 80170c2:	3306      	adds	r3, #6
 80170c4:	781b      	ldrb	r3, [r3, #0]
 80170c6:	1ad3      	subs	r3, r2, r3
 80170c8:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
    tmp11 = GETJSAMPLE(elemptr[1]) - GETJSAMPLE(elemptr[5]);
 80170cc:	f8d7 3118 	ldr.w	r3, [r7, #280]	@ 0x118
 80170d0:	3301      	adds	r3, #1
 80170d2:	781b      	ldrb	r3, [r3, #0]
 80170d4:	461a      	mov	r2, r3
 80170d6:	f8d7 3118 	ldr.w	r3, [r7, #280]	@ 0x118
 80170da:	3305      	adds	r3, #5
 80170dc:	781b      	ldrb	r3, [r3, #0]
 80170de:	1ad3      	subs	r3, r2, r3
 80170e0:	f8c7 3100 	str.w	r3, [r7, #256]	@ 0x100
    tmp12 = GETJSAMPLE(elemptr[2]) - GETJSAMPLE(elemptr[4]);
 80170e4:	f8d7 3118 	ldr.w	r3, [r7, #280]	@ 0x118
 80170e8:	3302      	adds	r3, #2
 80170ea:	781b      	ldrb	r3, [r3, #0]
 80170ec:	461a      	mov	r2, r3
 80170ee:	f8d7 3118 	ldr.w	r3, [r7, #280]	@ 0x118
 80170f2:	3304      	adds	r3, #4
 80170f4:	781b      	ldrb	r3, [r3, #0]
 80170f6:	1ad3      	subs	r3, r2, r3
 80170f8:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc

    z1 = tmp0 + tmp2;
 80170fc:	f8d7 2114 	ldr.w	r2, [r7, #276]	@ 0x114
 8017100:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8017104:	4413      	add	r3, r2
 8017106:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
    /* Apply unsigned->signed conversion */
    dataptr[0] = (DCTELEM)
      ((z1 + tmp1 + tmp3 - 7 * CENTERJSAMPLE) << PASS1_BITS);
 801710a:	f8d7 20f8 	ldr.w	r2, [r7, #248]	@ 0xf8
 801710e:	f8d7 3110 	ldr.w	r3, [r7, #272]	@ 0x110
 8017112:	441a      	add	r2, r3
 8017114:	f8d7 3108 	ldr.w	r3, [r7, #264]	@ 0x108
 8017118:	4413      	add	r3, r2
 801711a:	f5a3 7360 	sub.w	r3, r3, #896	@ 0x380
 801711e:	009a      	lsls	r2, r3, #2
    dataptr[0] = (DCTELEM)
 8017120:	f8d7 3124 	ldr.w	r3, [r7, #292]	@ 0x124
 8017124:	601a      	str	r2, [r3, #0]
    tmp3 += tmp3;
 8017126:	f8d7 3108 	ldr.w	r3, [r7, #264]	@ 0x108
 801712a:	005b      	lsls	r3, r3, #1
 801712c:	f8c7 3108 	str.w	r3, [r7, #264]	@ 0x108
    z1 -= tmp3;
 8017130:	f8d7 20f8 	ldr.w	r2, [r7, #248]	@ 0xf8
 8017134:	f8d7 3108 	ldr.w	r3, [r7, #264]	@ 0x108
 8017138:	1ad3      	subs	r3, r2, r3
 801713a:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
    z1 -= tmp3;
 801713e:	f8d7 20f8 	ldr.w	r2, [r7, #248]	@ 0xf8
 8017142:	f8d7 3108 	ldr.w	r3, [r7, #264]	@ 0x108
 8017146:	1ad3      	subs	r3, r2, r3
 8017148:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
    z1 = MULTIPLY(z1, FIX(0.353553391));                /* (c2+c6-c4)/2 */
 801714c:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 8017150:	f44f 6235 	mov.w	r2, #2896	@ 0xb50
 8017154:	fb02 f303 	mul.w	r3, r2, r3
 8017158:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
    z2 = MULTIPLY(tmp0 - tmp2, FIX(0.920609002));       /* (c2+c4-c6)/2 */
 801715c:	f8d7 2114 	ldr.w	r2, [r7, #276]	@ 0x114
 8017160:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8017164:	1ad3      	subs	r3, r2, r3
 8017166:	f641 5276 	movw	r2, #7542	@ 0x1d76
 801716a:	fb02 f303 	mul.w	r3, r2, r3
 801716e:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
    z3 = MULTIPLY(tmp1 - tmp2, FIX(0.314692123));       /* c6 */
 8017172:	f8d7 2110 	ldr.w	r2, [r7, #272]	@ 0x110
 8017176:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 801717a:	1ad3      	subs	r3, r2, r3
 801717c:	f640 2212 	movw	r2, #2578	@ 0xa12
 8017180:	fb02 f303 	mul.w	r3, r2, r3
 8017184:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
    dataptr[2] = (DCTELEM) DESCALE(z1 + z2 + z3, CONST_BITS-PASS1_BITS);
 8017188:	f8d7 20f8 	ldr.w	r2, [r7, #248]	@ 0xf8
 801718c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8017190:	441a      	add	r2, r3
 8017192:	f8d7 30f0 	ldr.w	r3, [r7, #240]	@ 0xf0
 8017196:	4413      	add	r3, r2
 8017198:	f503 6280 	add.w	r2, r3, #1024	@ 0x400
 801719c:	f8d7 3124 	ldr.w	r3, [r7, #292]	@ 0x124
 80171a0:	3308      	adds	r3, #8
 80171a2:	12d2      	asrs	r2, r2, #11
 80171a4:	601a      	str	r2, [r3, #0]
    z1 -= z2;
 80171a6:	f8d7 20f8 	ldr.w	r2, [r7, #248]	@ 0xf8
 80171aa:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80171ae:	1ad3      	subs	r3, r2, r3
 80171b0:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
    z2 = MULTIPLY(tmp0 - tmp1, FIX(0.881747734));       /* c4 */
 80171b4:	f8d7 2114 	ldr.w	r2, [r7, #276]	@ 0x114
 80171b8:	f8d7 3110 	ldr.w	r3, [r7, #272]	@ 0x110
 80171bc:	1ad3      	subs	r3, r2, r3
 80171be:	f641 4237 	movw	r2, #7223	@ 0x1c37
 80171c2:	fb02 f303 	mul.w	r3, r2, r3
 80171c6:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
    dataptr[4] = (DCTELEM)
      DESCALE(z2 + z3 - MULTIPLY(tmp1 - tmp3, FIX(0.707106781)), /* c2+c6-c4 */
 80171ca:	f8d7 20f4 	ldr.w	r2, [r7, #244]	@ 0xf4
 80171ce:	f8d7 30f0 	ldr.w	r3, [r7, #240]	@ 0xf0
 80171d2:	441a      	add	r2, r3
 80171d4:	f8d7 1110 	ldr.w	r1, [r7, #272]	@ 0x110
 80171d8:	f8d7 3108 	ldr.w	r3, [r7, #264]	@ 0x108
 80171dc:	1acb      	subs	r3, r1, r3
 80171de:	f46f 51b5 	mvn.w	r1, #5792	@ 0x16a0
 80171e2:	fb01 f303 	mul.w	r3, r1, r3
 80171e6:	4413      	add	r3, r2
 80171e8:	f503 6280 	add.w	r2, r3, #1024	@ 0x400
    dataptr[4] = (DCTELEM)
 80171ec:	f8d7 3124 	ldr.w	r3, [r7, #292]	@ 0x124
 80171f0:	3310      	adds	r3, #16
      DESCALE(z2 + z3 - MULTIPLY(tmp1 - tmp3, FIX(0.707106781)), /* c2+c6-c4 */
 80171f2:	12d2      	asrs	r2, r2, #11
    dataptr[4] = (DCTELEM)
 80171f4:	601a      	str	r2, [r3, #0]
	      CONST_BITS-PASS1_BITS);
    dataptr[6] = (DCTELEM) DESCALE(z1 + z2, CONST_BITS-PASS1_BITS);
 80171f6:	f8d7 20f8 	ldr.w	r2, [r7, #248]	@ 0xf8
 80171fa:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80171fe:	4413      	add	r3, r2
 8017200:	f503 6280 	add.w	r2, r3, #1024	@ 0x400
 8017204:	f8d7 3124 	ldr.w	r3, [r7, #292]	@ 0x124
 8017208:	3318      	adds	r3, #24
 801720a:	12d2      	asrs	r2, r2, #11
 801720c:	601a      	str	r2, [r3, #0]

    /* Odd part */

    tmp1 = MULTIPLY(tmp10 + tmp11, FIX(0.935414347));   /* (c3+c1-c5)/2 */
 801720e:	f8d7 2104 	ldr.w	r2, [r7, #260]	@ 0x104
 8017212:	f8d7 3100 	ldr.w	r3, [r7, #256]	@ 0x100
 8017216:	4413      	add	r3, r2
 8017218:	f641 52ef 	movw	r2, #7663	@ 0x1def
 801721c:	fb02 f303 	mul.w	r3, r2, r3
 8017220:	f8c7 3110 	str.w	r3, [r7, #272]	@ 0x110
    tmp2 = MULTIPLY(tmp10 - tmp11, FIX(0.170262339));   /* (c3+c5-c1)/2 */
 8017224:	f8d7 2104 	ldr.w	r2, [r7, #260]	@ 0x104
 8017228:	f8d7 3100 	ldr.w	r3, [r7, #256]	@ 0x100
 801722c:	1ad3      	subs	r3, r2, r3
 801722e:	f240 5273 	movw	r2, #1395	@ 0x573
 8017232:	fb02 f303 	mul.w	r3, r2, r3
 8017236:	f8c7 310c 	str.w	r3, [r7, #268]	@ 0x10c
    tmp0 = tmp1 - tmp2;
 801723a:	f8d7 2110 	ldr.w	r2, [r7, #272]	@ 0x110
 801723e:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8017242:	1ad3      	subs	r3, r2, r3
 8017244:	f8c7 3114 	str.w	r3, [r7, #276]	@ 0x114
    tmp1 += tmp2;
 8017248:	f8d7 2110 	ldr.w	r2, [r7, #272]	@ 0x110
 801724c:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8017250:	4413      	add	r3, r2
 8017252:	f8c7 3110 	str.w	r3, [r7, #272]	@ 0x110
    tmp2 = MULTIPLY(tmp11 + tmp12, - FIX(1.378756276)); /* -c1 */
 8017256:	f8d7 2100 	ldr.w	r2, [r7, #256]	@ 0x100
 801725a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 801725e:	4413      	add	r3, r2
 8017260:	4a37      	ldr	r2, [pc, #220]	@ (8017340 <jpeg_fdct_7x14+0x34c>)
 8017262:	fb02 f303 	mul.w	r3, r2, r3
 8017266:	f8c7 310c 	str.w	r3, [r7, #268]	@ 0x10c
    tmp1 += tmp2;
 801726a:	f8d7 2110 	ldr.w	r2, [r7, #272]	@ 0x110
 801726e:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8017272:	4413      	add	r3, r2
 8017274:	f8c7 3110 	str.w	r3, [r7, #272]	@ 0x110
    tmp3 = MULTIPLY(tmp10 + tmp12, FIX(0.613604268));   /* c5 */
 8017278:	f8d7 2104 	ldr.w	r2, [r7, #260]	@ 0x104
 801727c:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8017280:	4413      	add	r3, r2
 8017282:	f241 32a3 	movw	r2, #5027	@ 0x13a3
 8017286:	fb02 f303 	mul.w	r3, r2, r3
 801728a:	f8c7 3108 	str.w	r3, [r7, #264]	@ 0x108
    tmp0 += tmp3;
 801728e:	f8d7 2114 	ldr.w	r2, [r7, #276]	@ 0x114
 8017292:	f8d7 3108 	ldr.w	r3, [r7, #264]	@ 0x108
 8017296:	4413      	add	r3, r2
 8017298:	f8c7 3114 	str.w	r3, [r7, #276]	@ 0x114
    tmp2 += tmp3 + MULTIPLY(tmp12, FIX(1.870828693));   /* c3+c1-c5 */
 801729c:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80172a0:	f643 32de 	movw	r2, #15326	@ 0x3bde
 80172a4:	fb03 f202 	mul.w	r2, r3, r2
 80172a8:	f8d7 3108 	ldr.w	r3, [r7, #264]	@ 0x108
 80172ac:	4413      	add	r3, r2
 80172ae:	f8d7 210c 	ldr.w	r2, [r7, #268]	@ 0x10c
 80172b2:	4413      	add	r3, r2
 80172b4:	f8c7 310c 	str.w	r3, [r7, #268]	@ 0x10c

    dataptr[1] = (DCTELEM) DESCALE(tmp0, CONST_BITS-PASS1_BITS);
 80172b8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80172bc:	f503 6280 	add.w	r2, r3, #1024	@ 0x400
 80172c0:	f8d7 3124 	ldr.w	r3, [r7, #292]	@ 0x124
 80172c4:	3304      	adds	r3, #4
 80172c6:	12d2      	asrs	r2, r2, #11
 80172c8:	601a      	str	r2, [r3, #0]
    dataptr[3] = (DCTELEM) DESCALE(tmp1, CONST_BITS-PASS1_BITS);
 80172ca:	f8d7 3110 	ldr.w	r3, [r7, #272]	@ 0x110
 80172ce:	f503 6280 	add.w	r2, r3, #1024	@ 0x400
 80172d2:	f8d7 3124 	ldr.w	r3, [r7, #292]	@ 0x124
 80172d6:	330c      	adds	r3, #12
 80172d8:	12d2      	asrs	r2, r2, #11
 80172da:	601a      	str	r2, [r3, #0]
    dataptr[5] = (DCTELEM) DESCALE(tmp2, CONST_BITS-PASS1_BITS);
 80172dc:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80172e0:	f503 6280 	add.w	r2, r3, #1024	@ 0x400
 80172e4:	f8d7 3124 	ldr.w	r3, [r7, #292]	@ 0x124
 80172e8:	3314      	adds	r3, #20
 80172ea:	12d2      	asrs	r2, r2, #11
 80172ec:	601a      	str	r2, [r3, #0]

    ctr++;
 80172ee:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 80172f2:	3301      	adds	r3, #1
 80172f4:	f8c7 311c 	str.w	r3, [r7, #284]	@ 0x11c

    if (ctr != DCTSIZE) {
 80172f8:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 80172fc:	2b08      	cmp	r3, #8
 80172fe:	d009      	beq.n	8017314 <jpeg_fdct_7x14+0x320>
      if (ctr == 14)
 8017300:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8017304:	2b0e      	cmp	r3, #14
 8017306:	d00a      	beq.n	801731e <jpeg_fdct_7x14+0x32a>
	break;			/* Done. */
      dataptr += DCTSIZE;	/* advance pointer to next row */
 8017308:	f8d7 3124 	ldr.w	r3, [r7, #292]	@ 0x124
 801730c:	3320      	adds	r3, #32
 801730e:	f8c7 3124 	str.w	r3, [r7, #292]	@ 0x124
 8017312:	e695      	b.n	8017040 <jpeg_fdct_7x14+0x4c>
    } else
      dataptr = workspace;	/* switch pointer to extended workspace */
 8017314:	f107 0314 	add.w	r3, r7, #20
 8017318:	f8c7 3124 	str.w	r3, [r7, #292]	@ 0x124
    elemptr = sample_data[ctr] + start_col;
 801731c:	e690      	b.n	8017040 <jpeg_fdct_7x14+0x4c>
	break;			/* Done. */
 801731e:	bf00      	nop
   * We must also scale the output by (8/7)*(8/14) = 32/49, which we
   * fold into the constant multipliers:
   * 14-point FDCT kernel, cK represents sqrt(2) * cos(K*pi/28) * 32/49.
   */

  dataptr = data;
 8017320:	f507 7394 	add.w	r3, r7, #296	@ 0x128
 8017324:	f5a3 738e 	sub.w	r3, r3, #284	@ 0x11c
 8017328:	681b      	ldr	r3, [r3, #0]
 801732a:	f8c7 3124 	str.w	r3, [r7, #292]	@ 0x124
  wsptr = workspace;
 801732e:	f107 0314 	add.w	r3, r7, #20
 8017332:	f8c7 3120 	str.w	r3, [r7, #288]	@ 0x120
  for (ctr = 0; ctr < 7; ctr++) {
 8017336:	2300      	movs	r3, #0
 8017338:	f8c7 311c 	str.w	r3, [r7, #284]	@ 0x11c
 801733c:	e203      	b.n	8017746 <jpeg_fdct_7x14+0x752>
 801733e:	bf00      	nop
 8017340:	ffffd3e1 	.word	0xffffd3e1
    /* Even part */

    tmp0 = dataptr[DCTSIZE*0] + wsptr[DCTSIZE*5];
 8017344:	f8d7 3124 	ldr.w	r3, [r7, #292]	@ 0x124
 8017348:	681a      	ldr	r2, [r3, #0]
 801734a:	f8d7 3120 	ldr.w	r3, [r7, #288]	@ 0x120
 801734e:	33a0      	adds	r3, #160	@ 0xa0
 8017350:	681b      	ldr	r3, [r3, #0]
 8017352:	4413      	add	r3, r2
 8017354:	f8c7 3114 	str.w	r3, [r7, #276]	@ 0x114
    tmp1 = dataptr[DCTSIZE*1] + wsptr[DCTSIZE*4];
 8017358:	f8d7 3124 	ldr.w	r3, [r7, #292]	@ 0x124
 801735c:	3320      	adds	r3, #32
 801735e:	681a      	ldr	r2, [r3, #0]
 8017360:	f8d7 3120 	ldr.w	r3, [r7, #288]	@ 0x120
 8017364:	3380      	adds	r3, #128	@ 0x80
 8017366:	681b      	ldr	r3, [r3, #0]
 8017368:	4413      	add	r3, r2
 801736a:	f8c7 3110 	str.w	r3, [r7, #272]	@ 0x110
    tmp2 = dataptr[DCTSIZE*2] + wsptr[DCTSIZE*3];
 801736e:	f8d7 3124 	ldr.w	r3, [r7, #292]	@ 0x124
 8017372:	3340      	adds	r3, #64	@ 0x40
 8017374:	681a      	ldr	r2, [r3, #0]
 8017376:	f8d7 3120 	ldr.w	r3, [r7, #288]	@ 0x120
 801737a:	3360      	adds	r3, #96	@ 0x60
 801737c:	681b      	ldr	r3, [r3, #0]
 801737e:	4413      	add	r3, r2
 8017380:	f8c7 310c 	str.w	r3, [r7, #268]	@ 0x10c
    tmp13 = dataptr[DCTSIZE*3] + wsptr[DCTSIZE*2];
 8017384:	f8d7 3124 	ldr.w	r3, [r7, #292]	@ 0x124
 8017388:	3360      	adds	r3, #96	@ 0x60
 801738a:	681a      	ldr	r2, [r3, #0]
 801738c:	f8d7 3120 	ldr.w	r3, [r7, #288]	@ 0x120
 8017390:	3340      	adds	r3, #64	@ 0x40
 8017392:	681b      	ldr	r3, [r3, #0]
 8017394:	4413      	add	r3, r2
 8017396:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
    tmp4 = dataptr[DCTSIZE*4] + wsptr[DCTSIZE*1];
 801739a:	f8d7 3124 	ldr.w	r3, [r7, #292]	@ 0x124
 801739e:	3380      	adds	r3, #128	@ 0x80
 80173a0:	681a      	ldr	r2, [r3, #0]
 80173a2:	f8d7 3120 	ldr.w	r3, [r7, #288]	@ 0x120
 80173a6:	3320      	adds	r3, #32
 80173a8:	681b      	ldr	r3, [r3, #0]
 80173aa:	4413      	add	r3, r2
 80173ac:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
    tmp5 = dataptr[DCTSIZE*5] + wsptr[DCTSIZE*0];
 80173b0:	f8d7 3124 	ldr.w	r3, [r7, #292]	@ 0x124
 80173b4:	33a0      	adds	r3, #160	@ 0xa0
 80173b6:	681a      	ldr	r2, [r3, #0]
 80173b8:	f8d7 3120 	ldr.w	r3, [r7, #288]	@ 0x120
 80173bc:	681b      	ldr	r3, [r3, #0]
 80173be:	4413      	add	r3, r2
 80173c0:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    tmp6 = dataptr[DCTSIZE*6] + dataptr[DCTSIZE*7];
 80173c4:	f8d7 3124 	ldr.w	r3, [r7, #292]	@ 0x124
 80173c8:	33c0      	adds	r3, #192	@ 0xc0
 80173ca:	681a      	ldr	r2, [r3, #0]
 80173cc:	f8d7 3124 	ldr.w	r3, [r7, #292]	@ 0x124
 80173d0:	33e0      	adds	r3, #224	@ 0xe0
 80173d2:	681b      	ldr	r3, [r3, #0]
 80173d4:	4413      	add	r3, r2
 80173d6:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0

    tmp10 = tmp0 + tmp6;
 80173da:	f8d7 2114 	ldr.w	r2, [r7, #276]	@ 0x114
 80173de:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80173e2:	4413      	add	r3, r2
 80173e4:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
    tmp14 = tmp0 - tmp6;
 80173e8:	f8d7 2114 	ldr.w	r2, [r7, #276]	@ 0x114
 80173ec:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80173f0:	1ad3      	subs	r3, r2, r3
 80173f2:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
    tmp11 = tmp1 + tmp5;
 80173f6:	f8d7 2110 	ldr.w	r2, [r7, #272]	@ 0x110
 80173fa:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80173fe:	4413      	add	r3, r2
 8017400:	f8c7 3100 	str.w	r3, [r7, #256]	@ 0x100
    tmp15 = tmp1 - tmp5;
 8017404:	f8d7 2110 	ldr.w	r2, [r7, #272]	@ 0x110
 8017408:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 801740c:	1ad3      	subs	r3, r2, r3
 801740e:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
    tmp12 = tmp2 + tmp4;
 8017412:	f8d7 210c 	ldr.w	r2, [r7, #268]	@ 0x10c
 8017416:	f8d7 30e8 	ldr.w	r3, [r7, #232]	@ 0xe8
 801741a:	4413      	add	r3, r2
 801741c:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
    tmp16 = tmp2 - tmp4;
 8017420:	f8d7 210c 	ldr.w	r2, [r7, #268]	@ 0x10c
 8017424:	f8d7 30e8 	ldr.w	r3, [r7, #232]	@ 0xe8
 8017428:	1ad3      	subs	r3, r2, r3
 801742a:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4

    tmp0 = dataptr[DCTSIZE*0] - wsptr[DCTSIZE*5];
 801742e:	f8d7 3124 	ldr.w	r3, [r7, #292]	@ 0x124
 8017432:	681a      	ldr	r2, [r3, #0]
 8017434:	f8d7 3120 	ldr.w	r3, [r7, #288]	@ 0x120
 8017438:	33a0      	adds	r3, #160	@ 0xa0
 801743a:	681b      	ldr	r3, [r3, #0]
 801743c:	1ad3      	subs	r3, r2, r3
 801743e:	f8c7 3114 	str.w	r3, [r7, #276]	@ 0x114
    tmp1 = dataptr[DCTSIZE*1] - wsptr[DCTSIZE*4];
 8017442:	f8d7 3124 	ldr.w	r3, [r7, #292]	@ 0x124
 8017446:	3320      	adds	r3, #32
 8017448:	681a      	ldr	r2, [r3, #0]
 801744a:	f8d7 3120 	ldr.w	r3, [r7, #288]	@ 0x120
 801744e:	3380      	adds	r3, #128	@ 0x80
 8017450:	681b      	ldr	r3, [r3, #0]
 8017452:	1ad3      	subs	r3, r2, r3
 8017454:	f8c7 3110 	str.w	r3, [r7, #272]	@ 0x110
    tmp2 = dataptr[DCTSIZE*2] - wsptr[DCTSIZE*3];
 8017458:	f8d7 3124 	ldr.w	r3, [r7, #292]	@ 0x124
 801745c:	3340      	adds	r3, #64	@ 0x40
 801745e:	681a      	ldr	r2, [r3, #0]
 8017460:	f8d7 3120 	ldr.w	r3, [r7, #288]	@ 0x120
 8017464:	3360      	adds	r3, #96	@ 0x60
 8017466:	681b      	ldr	r3, [r3, #0]
 8017468:	1ad3      	subs	r3, r2, r3
 801746a:	f8c7 310c 	str.w	r3, [r7, #268]	@ 0x10c
    tmp3 = dataptr[DCTSIZE*3] - wsptr[DCTSIZE*2];
 801746e:	f8d7 3124 	ldr.w	r3, [r7, #292]	@ 0x124
 8017472:	3360      	adds	r3, #96	@ 0x60
 8017474:	681a      	ldr	r2, [r3, #0]
 8017476:	f8d7 3120 	ldr.w	r3, [r7, #288]	@ 0x120
 801747a:	3340      	adds	r3, #64	@ 0x40
 801747c:	681b      	ldr	r3, [r3, #0]
 801747e:	1ad3      	subs	r3, r2, r3
 8017480:	f8c7 3108 	str.w	r3, [r7, #264]	@ 0x108
    tmp4 = dataptr[DCTSIZE*4] - wsptr[DCTSIZE*1];
 8017484:	f8d7 3124 	ldr.w	r3, [r7, #292]	@ 0x124
 8017488:	3380      	adds	r3, #128	@ 0x80
 801748a:	681a      	ldr	r2, [r3, #0]
 801748c:	f8d7 3120 	ldr.w	r3, [r7, #288]	@ 0x120
 8017490:	3320      	adds	r3, #32
 8017492:	681b      	ldr	r3, [r3, #0]
 8017494:	1ad3      	subs	r3, r2, r3
 8017496:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
    tmp5 = dataptr[DCTSIZE*5] - wsptr[DCTSIZE*0];
 801749a:	f8d7 3124 	ldr.w	r3, [r7, #292]	@ 0x124
 801749e:	33a0      	adds	r3, #160	@ 0xa0
 80174a0:	681a      	ldr	r2, [r3, #0]
 80174a2:	f8d7 3120 	ldr.w	r3, [r7, #288]	@ 0x120
 80174a6:	681b      	ldr	r3, [r3, #0]
 80174a8:	1ad3      	subs	r3, r2, r3
 80174aa:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    tmp6 = dataptr[DCTSIZE*6] - dataptr[DCTSIZE*7];
 80174ae:	f8d7 3124 	ldr.w	r3, [r7, #292]	@ 0x124
 80174b2:	33c0      	adds	r3, #192	@ 0xc0
 80174b4:	681a      	ldr	r2, [r3, #0]
 80174b6:	f8d7 3124 	ldr.w	r3, [r7, #292]	@ 0x124
 80174ba:	33e0      	adds	r3, #224	@ 0xe0
 80174bc:	681b      	ldr	r3, [r3, #0]
 80174be:	1ad3      	subs	r3, r2, r3
 80174c0:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0

    dataptr[DCTSIZE*0] = (DCTELEM)
      DESCALE(MULTIPLY(tmp10 + tmp11 + tmp12 + tmp13,
 80174c4:	f8d7 2104 	ldr.w	r2, [r7, #260]	@ 0x104
 80174c8:	f8d7 3100 	ldr.w	r3, [r7, #256]	@ 0x100
 80174cc:	441a      	add	r2, r3
 80174ce:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80174d2:	441a      	add	r2, r3
 80174d4:	f8d7 30ec 	ldr.w	r3, [r7, #236]	@ 0xec
 80174d8:	4413      	add	r3, r2
 80174da:	f241 42e6 	movw	r2, #5350	@ 0x14e6
 80174de:	fb02 f303 	mul.w	r3, r2, r3
 80174e2:	f503 4380 	add.w	r3, r3, #16384	@ 0x4000
 80174e6:	13da      	asrs	r2, r3, #15
    dataptr[DCTSIZE*0] = (DCTELEM)
 80174e8:	f8d7 3124 	ldr.w	r3, [r7, #292]	@ 0x124
 80174ec:	601a      	str	r2, [r3, #0]
		       FIX(0.653061224)),                 /* 32/49 */
	      CONST_BITS+PASS1_BITS);
    tmp13 += tmp13;
 80174ee:	f8d7 30ec 	ldr.w	r3, [r7, #236]	@ 0xec
 80174f2:	005b      	lsls	r3, r3, #1
 80174f4:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
    dataptr[DCTSIZE*4] = (DCTELEM)
      DESCALE(MULTIPLY(tmp10 - tmp13, FIX(0.832106052)) + /* c4 */
 80174f8:	f8d7 2104 	ldr.w	r2, [r7, #260]	@ 0x104
 80174fc:	f8d7 30ec 	ldr.w	r3, [r7, #236]	@ 0xec
 8017500:	1ad3      	subs	r3, r2, r3
 8017502:	f641 22a1 	movw	r2, #6817	@ 0x1aa1
 8017506:	fb03 f202 	mul.w	r2, r3, r2
 801750a:	f8d7 1100 	ldr.w	r1, [r7, #256]	@ 0x100
 801750e:	f8d7 30ec 	ldr.w	r3, [r7, #236]	@ 0xec
 8017512:	1acb      	subs	r3, r1, r3
 8017514:	f240 6194 	movw	r1, #1684	@ 0x694
 8017518:	fb01 f303 	mul.w	r3, r1, r3
 801751c:	441a      	add	r2, r3
 801751e:	f8d7 10fc 	ldr.w	r1, [r7, #252]	@ 0xfc
 8017522:	f8d7 30ec 	ldr.w	r3, [r7, #236]	@ 0xec
 8017526:	1acb      	subs	r3, r1, r3
 8017528:	498c      	ldr	r1, [pc, #560]	@ (801775c <jpeg_fdct_7x14+0x768>)
 801752a:	fb01 f303 	mul.w	r3, r1, r3
 801752e:	4413      	add	r3, r2
 8017530:	f503 4280 	add.w	r2, r3, #16384	@ 0x4000
    dataptr[DCTSIZE*4] = (DCTELEM)
 8017534:	f8d7 3124 	ldr.w	r3, [r7, #292]	@ 0x124
 8017538:	3380      	adds	r3, #128	@ 0x80
      DESCALE(MULTIPLY(tmp10 - tmp13, FIX(0.832106052)) + /* c4 */
 801753a:	13d2      	asrs	r2, r2, #15
    dataptr[DCTSIZE*4] = (DCTELEM)
 801753c:	601a      	str	r2, [r3, #0]
	      MULTIPLY(tmp11 - tmp13, FIX(0.205513223)) - /* c12 */
	      MULTIPLY(tmp12 - tmp13, FIX(0.575835255)),  /* c8 */
	      CONST_BITS+PASS1_BITS);

    tmp10 = MULTIPLY(tmp14 + tmp15, FIX(0.722074570));    /* c6 */
 801753e:	f8d7 20dc 	ldr.w	r2, [r7, #220]	@ 0xdc
 8017542:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8017546:	4413      	add	r3, r2
 8017548:	f241 721b 	movw	r2, #5915	@ 0x171b
 801754c:	fb02 f303 	mul.w	r3, r2, r3
 8017550:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104

    dataptr[DCTSIZE*2] = (DCTELEM)
      DESCALE(tmp10 + MULTIPLY(tmp14, FIX(0.178337691))   /* c2-c6 */
 8017554:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8017558:	f240 52b5 	movw	r2, #1461	@ 0x5b5
 801755c:	fb03 f202 	mul.w	r2, r3, r2
 8017560:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8017564:	441a      	add	r2, r3
 8017566:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 801756a:	f640 41d3 	movw	r1, #3283	@ 0xcd3
 801756e:	fb01 f303 	mul.w	r3, r1, r3
 8017572:	4413      	add	r3, r2
 8017574:	f503 4280 	add.w	r2, r3, #16384	@ 0x4000
    dataptr[DCTSIZE*2] = (DCTELEM)
 8017578:	f8d7 3124 	ldr.w	r3, [r7, #292]	@ 0x124
 801757c:	3340      	adds	r3, #64	@ 0x40
      DESCALE(tmp10 + MULTIPLY(tmp14, FIX(0.178337691))   /* c2-c6 */
 801757e:	13d2      	asrs	r2, r2, #15
    dataptr[DCTSIZE*2] = (DCTELEM)
 8017580:	601a      	str	r2, [r3, #0]
	      + MULTIPLY(tmp16, FIX(0.400721155)),        /* c10 */
	      CONST_BITS+PASS1_BITS);
    dataptr[DCTSIZE*6] = (DCTELEM)
      DESCALE(tmp10 - MULTIPLY(tmp15, FIX(1.122795725))   /* c6+c10 */
 8017582:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8017586:	4a76      	ldr	r2, [pc, #472]	@ (8017760 <jpeg_fdct_7x14+0x76c>)
 8017588:	fb03 f202 	mul.w	r2, r3, r2
 801758c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8017590:	441a      	add	r2, r3
 8017592:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8017596:	4973      	ldr	r1, [pc, #460]	@ (8017764 <jpeg_fdct_7x14+0x770>)
 8017598:	fb01 f303 	mul.w	r3, r1, r3
 801759c:	4413      	add	r3, r2
 801759e:	f503 4280 	add.w	r2, r3, #16384	@ 0x4000
    dataptr[DCTSIZE*6] = (DCTELEM)
 80175a2:	f8d7 3124 	ldr.w	r3, [r7, #292]	@ 0x124
 80175a6:	33c0      	adds	r3, #192	@ 0xc0
      DESCALE(tmp10 - MULTIPLY(tmp15, FIX(1.122795725))   /* c6+c10 */
 80175a8:	13d2      	asrs	r2, r2, #15
    dataptr[DCTSIZE*6] = (DCTELEM)
 80175aa:	601a      	str	r2, [r3, #0]
	      - MULTIPLY(tmp16, FIX(0.900412262)),        /* c2 */
	      CONST_BITS+PASS1_BITS);

    /* Odd part */

    tmp10 = tmp1 + tmp2;
 80175ac:	f8d7 2110 	ldr.w	r2, [r7, #272]	@ 0x110
 80175b0:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80175b4:	4413      	add	r3, r2
 80175b6:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
    tmp11 = tmp5 - tmp4;
 80175ba:	f8d7 20e4 	ldr.w	r2, [r7, #228]	@ 0xe4
 80175be:	f8d7 30e8 	ldr.w	r3, [r7, #232]	@ 0xe8
 80175c2:	1ad3      	subs	r3, r2, r3
 80175c4:	f8c7 3100 	str.w	r3, [r7, #256]	@ 0x100
    dataptr[DCTSIZE*7] = (DCTELEM)
      DESCALE(MULTIPLY(tmp0 - tmp10 + tmp3 - tmp11 - tmp6,
 80175c8:	f8d7 2114 	ldr.w	r2, [r7, #276]	@ 0x114
 80175cc:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80175d0:	1ad2      	subs	r2, r2, r3
 80175d2:	f8d7 3108 	ldr.w	r3, [r7, #264]	@ 0x108
 80175d6:	441a      	add	r2, r3
 80175d8:	f8d7 3100 	ldr.w	r3, [r7, #256]	@ 0x100
 80175dc:	1ad2      	subs	r2, r2, r3
 80175de:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80175e2:	1ad3      	subs	r3, r2, r3
 80175e4:	f241 42e6 	movw	r2, #5350	@ 0x14e6
 80175e8:	fb02 f303 	mul.w	r3, r2, r3
 80175ec:	f503 4280 	add.w	r2, r3, #16384	@ 0x4000
    dataptr[DCTSIZE*7] = (DCTELEM)
 80175f0:	f8d7 3124 	ldr.w	r3, [r7, #292]	@ 0x124
 80175f4:	33e0      	adds	r3, #224	@ 0xe0
      DESCALE(MULTIPLY(tmp0 - tmp10 + tmp3 - tmp11 - tmp6,
 80175f6:	13d2      	asrs	r2, r2, #15
    dataptr[DCTSIZE*7] = (DCTELEM)
 80175f8:	601a      	str	r2, [r3, #0]
		       FIX(0.653061224)),                 /* 32/49 */
	      CONST_BITS+PASS1_BITS);
    tmp3  = MULTIPLY(tmp3 , FIX(0.653061224));            /* 32/49 */
 80175fa:	f8d7 3108 	ldr.w	r3, [r7, #264]	@ 0x108
 80175fe:	f241 42e6 	movw	r2, #5350	@ 0x14e6
 8017602:	fb02 f303 	mul.w	r3, r2, r3
 8017606:	f8c7 3108 	str.w	r3, [r7, #264]	@ 0x108
    tmp10 = MULTIPLY(tmp10, - FIX(0.103406812));          /* -c13 */
 801760a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 801760e:	4a56      	ldr	r2, [pc, #344]	@ (8017768 <jpeg_fdct_7x14+0x774>)
 8017610:	fb02 f303 	mul.w	r3, r2, r3
 8017614:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
    tmp11 = MULTIPLY(tmp11, FIX(0.917760839));            /* c1 */
 8017618:	f8d7 3100 	ldr.w	r3, [r7, #256]	@ 0x100
 801761c:	f641 525e 	movw	r2, #7518	@ 0x1d5e
 8017620:	fb02 f303 	mul.w	r3, r2, r3
 8017624:	f8c7 3100 	str.w	r3, [r7, #256]	@ 0x100
    tmp10 += tmp11 - tmp3;
 8017628:	f8d7 2100 	ldr.w	r2, [r7, #256]	@ 0x100
 801762c:	f8d7 3108 	ldr.w	r3, [r7, #264]	@ 0x108
 8017630:	1ad3      	subs	r3, r2, r3
 8017632:	f8d7 2104 	ldr.w	r2, [r7, #260]	@ 0x104
 8017636:	4413      	add	r3, r2
 8017638:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
    tmp11 = MULTIPLY(tmp0 + tmp2, FIX(0.782007410)) +     /* c5 */
 801763c:	f8d7 2114 	ldr.w	r2, [r7, #276]	@ 0x114
 8017640:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8017644:	4413      	add	r3, r2
 8017646:	f641 1206 	movw	r2, #6406	@ 0x1906
 801764a:	fb03 f202 	mul.w	r2, r3, r2
	    MULTIPLY(tmp4 + tmp6, FIX(0.491367823));      /* c9 */
 801764e:	f8d7 10e8 	ldr.w	r1, [r7, #232]	@ 0xe8
 8017652:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8017656:	440b      	add	r3, r1
 8017658:	f640 71b9 	movw	r1, #4025	@ 0xfb9
 801765c:	fb01 f303 	mul.w	r3, r1, r3
    tmp11 = MULTIPLY(tmp0 + tmp2, FIX(0.782007410)) +     /* c5 */
 8017660:	4413      	add	r3, r2
 8017662:	f8c7 3100 	str.w	r3, [r7, #256]	@ 0x100
    dataptr[DCTSIZE*5] = (DCTELEM)
      DESCALE(tmp10 + tmp11 - MULTIPLY(tmp2, FIX(1.550341076)) /* c3+c5-c13 */
 8017666:	f8d7 2104 	ldr.w	r2, [r7, #260]	@ 0x104
 801766a:	f8d7 3100 	ldr.w	r3, [r7, #256]	@ 0x100
 801766e:	441a      	add	r2, r3
 8017670:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8017674:	493d      	ldr	r1, [pc, #244]	@ (801776c <jpeg_fdct_7x14+0x778>)
 8017676:	fb01 f303 	mul.w	r3, r1, r3
 801767a:	441a      	add	r2, r3
 801767c:	f8d7 30e8 	ldr.w	r3, [r7, #232]	@ 0xe8
 8017680:	f241 7168 	movw	r1, #5992	@ 0x1768
 8017684:	fb01 f303 	mul.w	r3, r1, r3
 8017688:	4413      	add	r3, r2
 801768a:	f503 4280 	add.w	r2, r3, #16384	@ 0x4000
    dataptr[DCTSIZE*5] = (DCTELEM)
 801768e:	f8d7 3124 	ldr.w	r3, [r7, #292]	@ 0x124
 8017692:	33a0      	adds	r3, #160	@ 0xa0
      DESCALE(tmp10 + tmp11 - MULTIPLY(tmp2, FIX(1.550341076)) /* c3+c5-c13 */
 8017694:	13d2      	asrs	r2, r2, #15
    dataptr[DCTSIZE*5] = (DCTELEM)
 8017696:	601a      	str	r2, [r3, #0]
	      + MULTIPLY(tmp4, FIX(0.731428202)),         /* c1+c11-c9 */
	      CONST_BITS+PASS1_BITS);
    tmp12 = MULTIPLY(tmp0 + tmp1, FIX(0.871740478)) +     /* c3 */
 8017698:	f8d7 2114 	ldr.w	r2, [r7, #276]	@ 0x114
 801769c:	f8d7 3110 	ldr.w	r3, [r7, #272]	@ 0x110
 80176a0:	4413      	add	r3, r2
 80176a2:	f641 32e5 	movw	r2, #7141	@ 0x1be5
 80176a6:	fb03 f202 	mul.w	r2, r3, r2
	    MULTIPLY(tmp5 - tmp6, FIX(0.305035186));      /* c11 */
 80176aa:	f8d7 10e4 	ldr.w	r1, [r7, #228]	@ 0xe4
 80176ae:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80176b2:	1acb      	subs	r3, r1, r3
 80176b4:	f640 11c3 	movw	r1, #2499	@ 0x9c3
 80176b8:	fb01 f303 	mul.w	r3, r1, r3
    tmp12 = MULTIPLY(tmp0 + tmp1, FIX(0.871740478)) +     /* c3 */
 80176bc:	4413      	add	r3, r2
 80176be:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
    dataptr[DCTSIZE*3] = (DCTELEM)
      DESCALE(tmp10 + tmp12 - MULTIPLY(tmp1, FIX(0.276965844)) /* c3-c9-c13 */
 80176c2:	f8d7 2104 	ldr.w	r2, [r7, #260]	@ 0x104
 80176c6:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80176ca:	441a      	add	r2, r3
 80176cc:	f8d7 3110 	ldr.w	r3, [r7, #272]	@ 0x110
 80176d0:	4927      	ldr	r1, [pc, #156]	@ (8017770 <jpeg_fdct_7x14+0x77c>)
 80176d2:	fb01 f303 	mul.w	r3, r1, r3
 80176d6:	441a      	add	r2, r3
 80176d8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80176dc:	4925      	ldr	r1, [pc, #148]	@ (8017774 <jpeg_fdct_7x14+0x780>)
 80176de:	fb01 f303 	mul.w	r3, r1, r3
 80176e2:	4413      	add	r3, r2
 80176e4:	f503 4280 	add.w	r2, r3, #16384	@ 0x4000
    dataptr[DCTSIZE*3] = (DCTELEM)
 80176e8:	f8d7 3124 	ldr.w	r3, [r7, #292]	@ 0x124
 80176ec:	3360      	adds	r3, #96	@ 0x60
      DESCALE(tmp10 + tmp12 - MULTIPLY(tmp1, FIX(0.276965844)) /* c3-c9-c13 */
 80176ee:	13d2      	asrs	r2, r2, #15
    dataptr[DCTSIZE*3] = (DCTELEM)
 80176f0:	601a      	str	r2, [r3, #0]
	      - MULTIPLY(tmp5, FIX(2.004803435)),         /* c1+c5+c11 */
	      CONST_BITS+PASS1_BITS);
    dataptr[DCTSIZE*1] = (DCTELEM)
      DESCALE(tmp11 + tmp12 + tmp3
 80176f2:	f8d7 2100 	ldr.w	r2, [r7, #256]	@ 0x100
 80176f6:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80176fa:	441a      	add	r2, r3
 80176fc:	f8d7 3108 	ldr.w	r3, [r7, #264]	@ 0x108
 8017700:	441a      	add	r2, r3
 8017702:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8017706:	491c      	ldr	r1, [pc, #112]	@ (8017778 <jpeg_fdct_7x14+0x784>)
 8017708:	fb01 f303 	mul.w	r3, r1, r3
 801770c:	441a      	add	r2, r3
 801770e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8017712:	491a      	ldr	r1, [pc, #104]	@ (801777c <jpeg_fdct_7x14+0x788>)
 8017714:	fb01 f303 	mul.w	r3, r1, r3
 8017718:	4413      	add	r3, r2
 801771a:	f503 4280 	add.w	r2, r3, #16384	@ 0x4000
    dataptr[DCTSIZE*1] = (DCTELEM)
 801771e:	f8d7 3124 	ldr.w	r3, [r7, #292]	@ 0x124
 8017722:	3320      	adds	r3, #32
      DESCALE(tmp11 + tmp12 + tmp3
 8017724:	13d2      	asrs	r2, r2, #15
    dataptr[DCTSIZE*1] = (DCTELEM)
 8017726:	601a      	str	r2, [r3, #0]
	      - MULTIPLY(tmp0, FIX(0.735987049))          /* c3+c5-c1 */
	      - MULTIPLY(tmp6, FIX(0.082925825)),         /* c9-c11-c13 */
	      CONST_BITS+PASS1_BITS);

    dataptr++;			/* advance pointer to next column */
 8017728:	f8d7 3124 	ldr.w	r3, [r7, #292]	@ 0x124
 801772c:	3304      	adds	r3, #4
 801772e:	f8c7 3124 	str.w	r3, [r7, #292]	@ 0x124
    wsptr++;			/* advance pointer to next column */
 8017732:	f8d7 3120 	ldr.w	r3, [r7, #288]	@ 0x120
 8017736:	3304      	adds	r3, #4
 8017738:	f8c7 3120 	str.w	r3, [r7, #288]	@ 0x120
  for (ctr = 0; ctr < 7; ctr++) {
 801773c:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8017740:	3301      	adds	r3, #1
 8017742:	f8c7 311c 	str.w	r3, [r7, #284]	@ 0x11c
 8017746:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 801774a:	2b06      	cmp	r3, #6
 801774c:	f77f adfa 	ble.w	8017344 <jpeg_fdct_7x14+0x350>
  }
}
 8017750:	bf00      	nop
 8017752:	bf00      	nop
 8017754:	f507 7794 	add.w	r7, r7, #296	@ 0x128
 8017758:	46bd      	mov	sp, r7
 801775a:	bd80      	pop	{r7, pc}
 801775c:	ffffed93 	.word	0xffffed93
 8017760:	ffffdc12 	.word	0xffffdc12
 8017764:	ffffe330 	.word	0xffffe330
 8017768:	fffffcb1 	.word	0xfffffcb1
 801776c:	ffffce64 	.word	0xffffce64
 8017770:	fffff723 	.word	0xfffff723
 8017774:	ffffbfd9 	.word	0xffffbfd9
 8017778:	ffffe873 	.word	0xffffe873
 801777c:	fffffd59 	.word	0xfffffd59

08017780 <jpeg_fdct_6x12>:
 * 6-point FDCT in pass 1 (rows), 12-point in pass 2 (columns).
 */

GLOBAL(void)
jpeg_fdct_6x12 (DCTELEM * data, JSAMPARRAY sample_data, JDIMENSION start_col)
{
 8017780:	b580      	push	{r7, lr}
 8017782:	b0b4      	sub	sp, #208	@ 0xd0
 8017784:	af00      	add	r7, sp, #0
 8017786:	60f8      	str	r0, [r7, #12]
 8017788:	60b9      	str	r1, [r7, #8]
 801778a:	607a      	str	r2, [r7, #4]
  JSAMPROW elemptr;
  int ctr;
  SHIFT_TEMPS

  /* Pre-zero output coefficient block. */
  MEMZERO(data, SIZEOF(DCTELEM) * DCTSIZE2);
 801778c:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8017790:	2100      	movs	r1, #0
 8017792:	68f8      	ldr	r0, [r7, #12]
 8017794:	f002 f92c 	bl	80199f0 <memset>
  /* Pass 1: process rows. */
  /* Note results are scaled up by sqrt(8) compared to a true DCT; */
  /* furthermore, we scale the results by 2**PASS1_BITS. */
  /* 6-point FDCT kernel, cK represents sqrt(2) * cos(K*pi/12). */

  dataptr = data;
 8017798:	68fb      	ldr	r3, [r7, #12]
 801779a:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
  ctr = 0;
 801779e:	2300      	movs	r3, #0
 80177a0:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
  for (;;) {
    elemptr = sample_data[ctr] + start_col;
 80177a4:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 80177a8:	009b      	lsls	r3, r3, #2
 80177aa:	68ba      	ldr	r2, [r7, #8]
 80177ac:	4413      	add	r3, r2
 80177ae:	681a      	ldr	r2, [r3, #0]
 80177b0:	687b      	ldr	r3, [r7, #4]
 80177b2:	4413      	add	r3, r2
 80177b4:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0

    /* Even part */

    tmp0 = GETJSAMPLE(elemptr[0]) + GETJSAMPLE(elemptr[5]);
 80177b8:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 80177bc:	781b      	ldrb	r3, [r3, #0]
 80177be:	461a      	mov	r2, r3
 80177c0:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 80177c4:	3305      	adds	r3, #5
 80177c6:	781b      	ldrb	r3, [r3, #0]
 80177c8:	4413      	add	r3, r2
 80177ca:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
    tmp11 = GETJSAMPLE(elemptr[1]) + GETJSAMPLE(elemptr[4]);
 80177ce:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 80177d2:	3301      	adds	r3, #1
 80177d4:	781b      	ldrb	r3, [r3, #0]
 80177d6:	461a      	mov	r2, r3
 80177d8:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 80177dc:	3304      	adds	r3, #4
 80177de:	781b      	ldrb	r3, [r3, #0]
 80177e0:	4413      	add	r3, r2
 80177e2:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
    tmp2 = GETJSAMPLE(elemptr[2]) + GETJSAMPLE(elemptr[3]);
 80177e6:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 80177ea:	3302      	adds	r3, #2
 80177ec:	781b      	ldrb	r3, [r3, #0]
 80177ee:	461a      	mov	r2, r3
 80177f0:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 80177f4:	3303      	adds	r3, #3
 80177f6:	781b      	ldrb	r3, [r3, #0]
 80177f8:	4413      	add	r3, r2
 80177fa:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4

    tmp10 = tmp0 + tmp2;
 80177fe:	f8d7 20bc 	ldr.w	r2, [r7, #188]	@ 0xbc
 8017802:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 8017806:	4413      	add	r3, r2
 8017808:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
    tmp12 = tmp0 - tmp2;
 801780c:	f8d7 20bc 	ldr.w	r2, [r7, #188]	@ 0xbc
 8017810:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 8017814:	1ad3      	subs	r3, r2, r3
 8017816:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac

    tmp0 = GETJSAMPLE(elemptr[0]) - GETJSAMPLE(elemptr[5]);
 801781a:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 801781e:	781b      	ldrb	r3, [r3, #0]
 8017820:	461a      	mov	r2, r3
 8017822:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 8017826:	3305      	adds	r3, #5
 8017828:	781b      	ldrb	r3, [r3, #0]
 801782a:	1ad3      	subs	r3, r2, r3
 801782c:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
    tmp1 = GETJSAMPLE(elemptr[1]) - GETJSAMPLE(elemptr[4]);
 8017830:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 8017834:	3301      	adds	r3, #1
 8017836:	781b      	ldrb	r3, [r3, #0]
 8017838:	461a      	mov	r2, r3
 801783a:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 801783e:	3304      	adds	r3, #4
 8017840:	781b      	ldrb	r3, [r3, #0]
 8017842:	1ad3      	subs	r3, r2, r3
 8017844:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
    tmp2 = GETJSAMPLE(elemptr[2]) - GETJSAMPLE(elemptr[3]);
 8017848:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 801784c:	3302      	adds	r3, #2
 801784e:	781b      	ldrb	r3, [r3, #0]
 8017850:	461a      	mov	r2, r3
 8017852:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 8017856:	3303      	adds	r3, #3
 8017858:	781b      	ldrb	r3, [r3, #0]
 801785a:	1ad3      	subs	r3, r2, r3
 801785c:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4

    /* Apply unsigned->signed conversion */
    dataptr[0] = (DCTELEM)
      ((tmp10 + tmp11 - 6 * CENTERJSAMPLE) << PASS1_BITS);
 8017860:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 8017864:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 8017868:	4413      	add	r3, r2
 801786a:	f5a3 7340 	sub.w	r3, r3, #768	@ 0x300
 801786e:	009a      	lsls	r2, r3, #2
    dataptr[0] = (DCTELEM)
 8017870:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8017874:	601a      	str	r2, [r3, #0]
    dataptr[2] = (DCTELEM)
      DESCALE(MULTIPLY(tmp12, FIX(1.224744871)),                 /* c2 */
 8017876:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 801787a:	f242 7231 	movw	r2, #10033	@ 0x2731
 801787e:	fb02 f303 	mul.w	r3, r2, r3
 8017882:	f503 6280 	add.w	r2, r3, #1024	@ 0x400
    dataptr[2] = (DCTELEM)
 8017886:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 801788a:	3308      	adds	r3, #8
      DESCALE(MULTIPLY(tmp12, FIX(1.224744871)),                 /* c2 */
 801788c:	12d2      	asrs	r2, r2, #11
    dataptr[2] = (DCTELEM)
 801788e:	601a      	str	r2, [r3, #0]
	      CONST_BITS-PASS1_BITS);
    dataptr[4] = (DCTELEM)
      DESCALE(MULTIPLY(tmp10 - tmp11 - tmp11, FIX(0.707106781)), /* c4 */
 8017890:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 8017894:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 8017898:	1ad2      	subs	r2, r2, r3
 801789a:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 801789e:	1ad3      	subs	r3, r2, r3
 80178a0:	f241 62a1 	movw	r2, #5793	@ 0x16a1
 80178a4:	fb02 f303 	mul.w	r3, r2, r3
 80178a8:	f503 6280 	add.w	r2, r3, #1024	@ 0x400
    dataptr[4] = (DCTELEM)
 80178ac:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 80178b0:	3310      	adds	r3, #16
      DESCALE(MULTIPLY(tmp10 - tmp11 - tmp11, FIX(0.707106781)), /* c4 */
 80178b2:	12d2      	asrs	r2, r2, #11
    dataptr[4] = (DCTELEM)
 80178b4:	601a      	str	r2, [r3, #0]
	      CONST_BITS-PASS1_BITS);

    /* Odd part */

    tmp10 = DESCALE(MULTIPLY(tmp0 + tmp2, FIX(0.366025404)),     /* c5 */
 80178b6:	f8d7 20bc 	ldr.w	r2, [r7, #188]	@ 0xbc
 80178ba:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 80178be:	4413      	add	r3, r2
 80178c0:	f640 32b6 	movw	r2, #2998	@ 0xbb6
 80178c4:	fb02 f303 	mul.w	r3, r2, r3
 80178c8:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 80178cc:	12db      	asrs	r3, r3, #11
 80178ce:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
		    CONST_BITS-PASS1_BITS);

    dataptr[1] = (DCTELEM) (tmp10 + ((tmp0 + tmp1) << PASS1_BITS));
 80178d2:	f8d7 20bc 	ldr.w	r2, [r7, #188]	@ 0xbc
 80178d6:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 80178da:	4413      	add	r3, r2
 80178dc:	0099      	lsls	r1, r3, #2
 80178de:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 80178e2:	3304      	adds	r3, #4
 80178e4:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 80178e8:	440a      	add	r2, r1
 80178ea:	601a      	str	r2, [r3, #0]
    dataptr[3] = (DCTELEM) ((tmp0 - tmp1 - tmp2) << PASS1_BITS);
 80178ec:	f8d7 20bc 	ldr.w	r2, [r7, #188]	@ 0xbc
 80178f0:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 80178f4:	1ad2      	subs	r2, r2, r3
 80178f6:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 80178fa:	1ad2      	subs	r2, r2, r3
 80178fc:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8017900:	330c      	adds	r3, #12
 8017902:	0092      	lsls	r2, r2, #2
 8017904:	601a      	str	r2, [r3, #0]
    dataptr[5] = (DCTELEM) (tmp10 + ((tmp2 - tmp1) << PASS1_BITS));
 8017906:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 801790a:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 801790e:	1ad3      	subs	r3, r2, r3
 8017910:	0099      	lsls	r1, r3, #2
 8017912:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8017916:	3314      	adds	r3, #20
 8017918:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 801791c:	440a      	add	r2, r1
 801791e:	601a      	str	r2, [r3, #0]

    ctr++;
 8017920:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8017924:	3301      	adds	r3, #1
 8017926:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4

    if (ctr != DCTSIZE) {
 801792a:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 801792e:	2b08      	cmp	r3, #8
 8017930:	d009      	beq.n	8017946 <jpeg_fdct_6x12+0x1c6>
      if (ctr == 12)
 8017932:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8017936:	2b0c      	cmp	r3, #12
 8017938:	d00a      	beq.n	8017950 <jpeg_fdct_6x12+0x1d0>
	break;			/* Done. */
      dataptr += DCTSIZE;	/* advance pointer to next row */
 801793a:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 801793e:	3320      	adds	r3, #32
 8017940:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 8017944:	e72e      	b.n	80177a4 <jpeg_fdct_6x12+0x24>
    } else
      dataptr = workspace;	/* switch pointer to extended workspace */
 8017946:	f107 0310 	add.w	r3, r7, #16
 801794a:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
    elemptr = sample_data[ctr] + start_col;
 801794e:	e729      	b.n	80177a4 <jpeg_fdct_6x12+0x24>
	break;			/* Done. */
 8017950:	bf00      	nop
   * We must also scale the output by (8/6)*(8/12) = 8/9, which we
   * fold into the constant multipliers:
   * 12-point FDCT kernel, cK represents sqrt(2) * cos(K*pi/24) * 8/9.
   */

  dataptr = data;
 8017952:	68fb      	ldr	r3, [r7, #12]
 8017954:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
  wsptr = workspace;
 8017958:	f107 0310 	add.w	r3, r7, #16
 801795c:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
  for (ctr = 0; ctr < 6; ctr++) {
 8017960:	2300      	movs	r3, #0
 8017962:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 8017966:	e1c7      	b.n	8017cf8 <jpeg_fdct_6x12+0x578>
    /* Even part */

    tmp0 = dataptr[DCTSIZE*0] + wsptr[DCTSIZE*3];
 8017968:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 801796c:	681a      	ldr	r2, [r3, #0]
 801796e:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 8017972:	3360      	adds	r3, #96	@ 0x60
 8017974:	681b      	ldr	r3, [r3, #0]
 8017976:	4413      	add	r3, r2
 8017978:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
    tmp1 = dataptr[DCTSIZE*1] + wsptr[DCTSIZE*2];
 801797c:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8017980:	3320      	adds	r3, #32
 8017982:	681a      	ldr	r2, [r3, #0]
 8017984:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 8017988:	3340      	adds	r3, #64	@ 0x40
 801798a:	681b      	ldr	r3, [r3, #0]
 801798c:	4413      	add	r3, r2
 801798e:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
    tmp2 = dataptr[DCTSIZE*2] + wsptr[DCTSIZE*1];
 8017992:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8017996:	3340      	adds	r3, #64	@ 0x40
 8017998:	681a      	ldr	r2, [r3, #0]
 801799a:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 801799e:	3320      	adds	r3, #32
 80179a0:	681b      	ldr	r3, [r3, #0]
 80179a2:	4413      	add	r3, r2
 80179a4:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
    tmp3 = dataptr[DCTSIZE*3] + wsptr[DCTSIZE*0];
 80179a8:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 80179ac:	3360      	adds	r3, #96	@ 0x60
 80179ae:	681a      	ldr	r2, [r3, #0]
 80179b0:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 80179b4:	681b      	ldr	r3, [r3, #0]
 80179b6:	4413      	add	r3, r2
 80179b8:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
    tmp4 = dataptr[DCTSIZE*4] + dataptr[DCTSIZE*7];
 80179bc:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 80179c0:	3380      	adds	r3, #128	@ 0x80
 80179c2:	681a      	ldr	r2, [r3, #0]
 80179c4:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 80179c8:	33e0      	adds	r3, #224	@ 0xe0
 80179ca:	681b      	ldr	r3, [r3, #0]
 80179cc:	4413      	add	r3, r2
 80179ce:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
    tmp5 = dataptr[DCTSIZE*5] + dataptr[DCTSIZE*6];
 80179d2:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 80179d6:	33a0      	adds	r3, #160	@ 0xa0
 80179d8:	681a      	ldr	r2, [r3, #0]
 80179da:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 80179de:	33c0      	adds	r3, #192	@ 0xc0
 80179e0:	681b      	ldr	r3, [r3, #0]
 80179e2:	4413      	add	r3, r2
 80179e4:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c

    tmp10 = tmp0 + tmp5;
 80179e8:	f8d7 20bc 	ldr.w	r2, [r7, #188]	@ 0xbc
 80179ec:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 80179f0:	4413      	add	r3, r2
 80179f2:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
    tmp13 = tmp0 - tmp5;
 80179f6:	f8d7 20bc 	ldr.w	r2, [r7, #188]	@ 0xbc
 80179fa:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 80179fe:	1ad3      	subs	r3, r2, r3
 8017a00:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
    tmp11 = tmp1 + tmp4;
 8017a04:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 8017a08:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8017a0c:	4413      	add	r3, r2
 8017a0e:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
    tmp14 = tmp1 - tmp4;
 8017a12:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 8017a16:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8017a1a:	1ad3      	subs	r3, r2, r3
 8017a1c:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
    tmp12 = tmp2 + tmp3;
 8017a20:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 8017a24:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 8017a28:	4413      	add	r3, r2
 8017a2a:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    tmp15 = tmp2 - tmp3;
 8017a2e:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 8017a32:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 8017a36:	1ad3      	subs	r3, r2, r3
 8017a38:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90

    tmp0 = dataptr[DCTSIZE*0] - wsptr[DCTSIZE*3];
 8017a3c:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8017a40:	681a      	ldr	r2, [r3, #0]
 8017a42:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 8017a46:	3360      	adds	r3, #96	@ 0x60
 8017a48:	681b      	ldr	r3, [r3, #0]
 8017a4a:	1ad3      	subs	r3, r2, r3
 8017a4c:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
    tmp1 = dataptr[DCTSIZE*1] - wsptr[DCTSIZE*2];
 8017a50:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8017a54:	3320      	adds	r3, #32
 8017a56:	681a      	ldr	r2, [r3, #0]
 8017a58:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 8017a5c:	3340      	adds	r3, #64	@ 0x40
 8017a5e:	681b      	ldr	r3, [r3, #0]
 8017a60:	1ad3      	subs	r3, r2, r3
 8017a62:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
    tmp2 = dataptr[DCTSIZE*2] - wsptr[DCTSIZE*1];
 8017a66:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8017a6a:	3340      	adds	r3, #64	@ 0x40
 8017a6c:	681a      	ldr	r2, [r3, #0]
 8017a6e:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 8017a72:	3320      	adds	r3, #32
 8017a74:	681b      	ldr	r3, [r3, #0]
 8017a76:	1ad3      	subs	r3, r2, r3
 8017a78:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
    tmp3 = dataptr[DCTSIZE*3] - wsptr[DCTSIZE*0];
 8017a7c:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8017a80:	3360      	adds	r3, #96	@ 0x60
 8017a82:	681a      	ldr	r2, [r3, #0]
 8017a84:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 8017a88:	681b      	ldr	r3, [r3, #0]
 8017a8a:	1ad3      	subs	r3, r2, r3
 8017a8c:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
    tmp4 = dataptr[DCTSIZE*4] - dataptr[DCTSIZE*7];
 8017a90:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8017a94:	3380      	adds	r3, #128	@ 0x80
 8017a96:	681a      	ldr	r2, [r3, #0]
 8017a98:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8017a9c:	33e0      	adds	r3, #224	@ 0xe0
 8017a9e:	681b      	ldr	r3, [r3, #0]
 8017aa0:	1ad3      	subs	r3, r2, r3
 8017aa2:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
    tmp5 = dataptr[DCTSIZE*5] - dataptr[DCTSIZE*6];
 8017aa6:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8017aaa:	33a0      	adds	r3, #160	@ 0xa0
 8017aac:	681a      	ldr	r2, [r3, #0]
 8017aae:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8017ab2:	33c0      	adds	r3, #192	@ 0xc0
 8017ab4:	681b      	ldr	r3, [r3, #0]
 8017ab6:	1ad3      	subs	r3, r2, r3
 8017ab8:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c

    dataptr[DCTSIZE*0] = (DCTELEM)
      DESCALE(MULTIPLY(tmp10 + tmp11 + tmp12, FIX(0.888888889)), /* 8/9 */
 8017abc:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 8017ac0:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 8017ac4:	441a      	add	r2, r3
 8017ac6:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8017aca:	4413      	add	r3, r2
 8017acc:	f641 4272 	movw	r2, #7282	@ 0x1c72
 8017ad0:	fb02 f303 	mul.w	r3, r2, r3
 8017ad4:	f503 4380 	add.w	r3, r3, #16384	@ 0x4000
 8017ad8:	13da      	asrs	r2, r3, #15
    dataptr[DCTSIZE*0] = (DCTELEM)
 8017ada:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8017ade:	601a      	str	r2, [r3, #0]
	      CONST_BITS+PASS1_BITS);
    dataptr[DCTSIZE*6] = (DCTELEM)
      DESCALE(MULTIPLY(tmp13 - tmp14 - tmp15, FIX(0.888888889)), /* 8/9 */
 8017ae0:	f8d7 2098 	ldr.w	r2, [r7, #152]	@ 0x98
 8017ae4:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8017ae8:	1ad2      	subs	r2, r2, r3
 8017aea:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 8017aee:	1ad3      	subs	r3, r2, r3
 8017af0:	f641 4272 	movw	r2, #7282	@ 0x1c72
 8017af4:	fb02 f303 	mul.w	r3, r2, r3
 8017af8:	f503 4280 	add.w	r2, r3, #16384	@ 0x4000
    dataptr[DCTSIZE*6] = (DCTELEM)
 8017afc:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8017b00:	33c0      	adds	r3, #192	@ 0xc0
      DESCALE(MULTIPLY(tmp13 - tmp14 - tmp15, FIX(0.888888889)), /* 8/9 */
 8017b02:	13d2      	asrs	r2, r2, #15
    dataptr[DCTSIZE*6] = (DCTELEM)
 8017b04:	601a      	str	r2, [r3, #0]
	      CONST_BITS+PASS1_BITS);
    dataptr[DCTSIZE*4] = (DCTELEM)
      DESCALE(MULTIPLY(tmp10 - tmp12, FIX(1.088662108)),         /* c4 */
 8017b06:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 8017b0a:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8017b0e:	1ad3      	subs	r3, r2, r3
 8017b10:	f242 22d6 	movw	r2, #8918	@ 0x22d6
 8017b14:	fb02 f303 	mul.w	r3, r2, r3
 8017b18:	f503 4280 	add.w	r2, r3, #16384	@ 0x4000
    dataptr[DCTSIZE*4] = (DCTELEM)
 8017b1c:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8017b20:	3380      	adds	r3, #128	@ 0x80
      DESCALE(MULTIPLY(tmp10 - tmp12, FIX(1.088662108)),         /* c4 */
 8017b22:	13d2      	asrs	r2, r2, #15
    dataptr[DCTSIZE*4] = (DCTELEM)
 8017b24:	601a      	str	r2, [r3, #0]
	      CONST_BITS+PASS1_BITS);
    dataptr[DCTSIZE*2] = (DCTELEM)
      DESCALE(MULTIPLY(tmp14 - tmp15, FIX(0.888888889)) +        /* 8/9 */
 8017b26:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 8017b2a:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 8017b2e:	1ad3      	subs	r3, r2, r3
 8017b30:	f641 4272 	movw	r2, #7282	@ 0x1c72
 8017b34:	fb03 f202 	mul.w	r2, r3, r2
 8017b38:	f8d7 1098 	ldr.w	r1, [r7, #152]	@ 0x98
 8017b3c:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 8017b40:	440b      	add	r3, r1
 8017b42:	f242 61db 	movw	r1, #9947	@ 0x26db
 8017b46:	fb01 f303 	mul.w	r3, r1, r3
 8017b4a:	4413      	add	r3, r2
 8017b4c:	f503 4280 	add.w	r2, r3, #16384	@ 0x4000
    dataptr[DCTSIZE*2] = (DCTELEM)
 8017b50:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8017b54:	3340      	adds	r3, #64	@ 0x40
      DESCALE(MULTIPLY(tmp14 - tmp15, FIX(0.888888889)) +        /* 8/9 */
 8017b56:	13d2      	asrs	r2, r2, #15
    dataptr[DCTSIZE*2] = (DCTELEM)
 8017b58:	601a      	str	r2, [r3, #0]
	      MULTIPLY(tmp13 + tmp15, FIX(1.214244803)),         /* c2 */
	      CONST_BITS+PASS1_BITS);

    /* Odd part */

    tmp10 = MULTIPLY(tmp1 + tmp4, FIX(0.481063200));   /* c9 */
 8017b5a:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 8017b5e:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8017b62:	4413      	add	r3, r2
 8017b64:	f640 7265 	movw	r2, #3941	@ 0xf65
 8017b68:	fb02 f303 	mul.w	r3, r2, r3
 8017b6c:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
    tmp14 = tmp10 + MULTIPLY(tmp1, FIX(0.680326102));  /* c3-c9 */
 8017b70:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8017b74:	f241 52c5 	movw	r2, #5573	@ 0x15c5
 8017b78:	fb02 f303 	mul.w	r3, r2, r3
 8017b7c:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 8017b80:	4413      	add	r3, r2
 8017b82:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
    tmp15 = tmp10 - MULTIPLY(tmp4, FIX(1.642452502));  /* c3+c9 */
 8017b86:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8017b8a:	4a60      	ldr	r2, [pc, #384]	@ (8017d0c <jpeg_fdct_6x12+0x58c>)
 8017b8c:	fb02 f303 	mul.w	r3, r2, r3
 8017b90:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 8017b94:	4413      	add	r3, r2
 8017b96:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
    tmp12 = MULTIPLY(tmp0 + tmp2, FIX(0.997307603));   /* c5 */
 8017b9a:	f8d7 20bc 	ldr.w	r2, [r7, #188]	@ 0xbc
 8017b9e:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 8017ba2:	4413      	add	r3, r2
 8017ba4:	f641 72ea 	movw	r2, #8170	@ 0x1fea
 8017ba8:	fb02 f303 	mul.w	r3, r2, r3
 8017bac:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    tmp13 = MULTIPLY(tmp0 + tmp3, FIX(0.765261039));   /* c7 */
 8017bb0:	f8d7 20bc 	ldr.w	r2, [r7, #188]	@ 0xbc
 8017bb4:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 8017bb8:	4413      	add	r3, r2
 8017bba:	f641 027d 	movw	r2, #6269	@ 0x187d
 8017bbe:	fb02 f303 	mul.w	r3, r2, r3
 8017bc2:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
    tmp10 = tmp12 + tmp13 + tmp14 - MULTIPLY(tmp0, FIX(0.516244403)) /* c5+c7-c1 */
 8017bc6:	f8d7 20ac 	ldr.w	r2, [r7, #172]	@ 0xac
 8017bca:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8017bce:	441a      	add	r2, r3
 8017bd0:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8017bd4:	441a      	add	r2, r3
 8017bd6:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
 8017bda:	494d      	ldr	r1, [pc, #308]	@ (8017d10 <jpeg_fdct_6x12+0x590>)
 8017bdc:	fb01 f303 	mul.w	r3, r1, r3
 8017be0:	441a      	add	r2, r3
	    + MULTIPLY(tmp5, FIX(0.164081699));        /* c11 */
 8017be2:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8017be6:	f44f 61a8 	mov.w	r1, #1344	@ 0x540
 8017bea:	fb01 f303 	mul.w	r3, r1, r3
    tmp10 = tmp12 + tmp13 + tmp14 - MULTIPLY(tmp0, FIX(0.516244403)) /* c5+c7-c1 */
 8017bee:	4413      	add	r3, r2
 8017bf0:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
    tmp11 = MULTIPLY(tmp2 + tmp3, - FIX(0.164081699)); /* -c11 */
 8017bf4:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 8017bf8:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 8017bfc:	4413      	add	r3, r2
 8017bfe:	4a45      	ldr	r2, [pc, #276]	@ (8017d14 <jpeg_fdct_6x12+0x594>)
 8017c00:	fb02 f303 	mul.w	r3, r2, r3
 8017c04:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
    tmp12 += tmp11 - tmp15 - MULTIPLY(tmp2, FIX(2.079550144)) /* c1+c5-c11 */
 8017c08:	f8d7 20b8 	ldr.w	r2, [r7, #184]	@ 0xb8
 8017c0c:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 8017c10:	1ad2      	subs	r2, r2, r3
 8017c12:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 8017c16:	4940      	ldr	r1, [pc, #256]	@ (8017d18 <jpeg_fdct_6x12+0x598>)
 8017c18:	fb01 f303 	mul.w	r3, r1, r3
 8017c1c:	441a      	add	r2, r3
	    + MULTIPLY(tmp5, FIX(0.765261039));        /* c7 */
 8017c1e:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8017c22:	f641 017d 	movw	r1, #6269	@ 0x187d
 8017c26:	fb01 f303 	mul.w	r3, r1, r3
 8017c2a:	4413      	add	r3, r2
    tmp12 += tmp11 - tmp15 - MULTIPLY(tmp2, FIX(2.079550144)) /* c1+c5-c11 */
 8017c2c:	f8d7 20ac 	ldr.w	r2, [r7, #172]	@ 0xac
 8017c30:	4413      	add	r3, r2
 8017c32:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    tmp13 += tmp11 - tmp14 + MULTIPLY(tmp3, FIX(0.645144899)) /* c1+c11-c7 */
 8017c36:	f8d7 20b8 	ldr.w	r2, [r7, #184]	@ 0xb8
 8017c3a:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8017c3e:	1ad2      	subs	r2, r2, r3
 8017c40:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 8017c44:	f241 41a5 	movw	r1, #5285	@ 0x14a5
 8017c48:	fb01 f303 	mul.w	r3, r1, r3
 8017c4c:	441a      	add	r2, r3
	    - MULTIPLY(tmp5, FIX(0.997307603));        /* c5 */
 8017c4e:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8017c52:	4932      	ldr	r1, [pc, #200]	@ (8017d1c <jpeg_fdct_6x12+0x59c>)
 8017c54:	fb01 f303 	mul.w	r3, r1, r3
 8017c58:	4413      	add	r3, r2
    tmp13 += tmp11 - tmp14 + MULTIPLY(tmp3, FIX(0.645144899)) /* c1+c11-c7 */
 8017c5a:	f8d7 2098 	ldr.w	r2, [r7, #152]	@ 0x98
 8017c5e:	4413      	add	r3, r2
 8017c60:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
    tmp11 = tmp15 + MULTIPLY(tmp0 - tmp3, FIX(1.161389302)) /* c3 */
 8017c64:	f8d7 20bc 	ldr.w	r2, [r7, #188]	@ 0xbc
 8017c68:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 8017c6c:	1ad3      	subs	r3, r2, r3
 8017c6e:	f242 522a 	movw	r2, #9514	@ 0x252a
 8017c72:	fb03 f202 	mul.w	r2, r3, r2
 8017c76:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 8017c7a:	441a      	add	r2, r3
	    - MULTIPLY(tmp2 + tmp5, FIX(0.481063200)); /* c9 */
 8017c7c:	f8d7 10b4 	ldr.w	r1, [r7, #180]	@ 0xb4
 8017c80:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8017c84:	440b      	add	r3, r1
 8017c86:	4926      	ldr	r1, [pc, #152]	@ (8017d20 <jpeg_fdct_6x12+0x5a0>)
 8017c88:	fb01 f303 	mul.w	r3, r1, r3
    tmp11 = tmp15 + MULTIPLY(tmp0 - tmp3, FIX(1.161389302)) /* c3 */
 8017c8c:	4413      	add	r3, r2
 8017c8e:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8

    dataptr[DCTSIZE*1] = (DCTELEM) DESCALE(tmp10, CONST_BITS+PASS1_BITS);
 8017c92:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 8017c96:	f503 4280 	add.w	r2, r3, #16384	@ 0x4000
 8017c9a:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8017c9e:	3320      	adds	r3, #32
 8017ca0:	13d2      	asrs	r2, r2, #15
 8017ca2:	601a      	str	r2, [r3, #0]
    dataptr[DCTSIZE*3] = (DCTELEM) DESCALE(tmp11, CONST_BITS+PASS1_BITS);
 8017ca4:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 8017ca8:	f503 4280 	add.w	r2, r3, #16384	@ 0x4000
 8017cac:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8017cb0:	3360      	adds	r3, #96	@ 0x60
 8017cb2:	13d2      	asrs	r2, r2, #15
 8017cb4:	601a      	str	r2, [r3, #0]
    dataptr[DCTSIZE*5] = (DCTELEM) DESCALE(tmp12, CONST_BITS+PASS1_BITS);
 8017cb6:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8017cba:	f503 4280 	add.w	r2, r3, #16384	@ 0x4000
 8017cbe:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8017cc2:	33a0      	adds	r3, #160	@ 0xa0
 8017cc4:	13d2      	asrs	r2, r2, #15
 8017cc6:	601a      	str	r2, [r3, #0]
    dataptr[DCTSIZE*7] = (DCTELEM) DESCALE(tmp13, CONST_BITS+PASS1_BITS);
 8017cc8:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8017ccc:	f503 4280 	add.w	r2, r3, #16384	@ 0x4000
 8017cd0:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8017cd4:	33e0      	adds	r3, #224	@ 0xe0
 8017cd6:	13d2      	asrs	r2, r2, #15
 8017cd8:	601a      	str	r2, [r3, #0]

    dataptr++;			/* advance pointer to next column */
 8017cda:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8017cde:	3304      	adds	r3, #4
 8017ce0:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
    wsptr++;			/* advance pointer to next column */
 8017ce4:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 8017ce8:	3304      	adds	r3, #4
 8017cea:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
  for (ctr = 0; ctr < 6; ctr++) {
 8017cee:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8017cf2:	3301      	adds	r3, #1
 8017cf4:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 8017cf8:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8017cfc:	2b05      	cmp	r3, #5
 8017cfe:	f77f ae33 	ble.w	8017968 <jpeg_fdct_6x12+0x1e8>
  }
}
 8017d02:	bf00      	nop
 8017d04:	bf00      	nop
 8017d06:	37d0      	adds	r7, #208	@ 0xd0
 8017d08:	46bd      	mov	sp, r7
 8017d0a:	bd80      	pop	{r7, pc}
 8017d0c:	ffffcb71 	.word	0xffffcb71
 8017d10:	ffffef7b 	.word	0xffffef7b
 8017d14:	fffffac0 	.word	0xfffffac0
 8017d18:	ffffbd74 	.word	0xffffbd74
 8017d1c:	ffffe016 	.word	0xffffe016
 8017d20:	fffff09b 	.word	0xfffff09b

08017d24 <jpeg_fdct_5x10>:
 * 5-point FDCT in pass 1 (rows), 10-point in pass 2 (columns).
 */

GLOBAL(void)
jpeg_fdct_5x10 (DCTELEM * data, JSAMPARRAY sample_data, JDIMENSION start_col)
{
 8017d24:	b580      	push	{r7, lr}
 8017d26:	b0a2      	sub	sp, #136	@ 0x88
 8017d28:	af00      	add	r7, sp, #0
 8017d2a:	60f8      	str	r0, [r7, #12]
 8017d2c:	60b9      	str	r1, [r7, #8]
 8017d2e:	607a      	str	r2, [r7, #4]
  JSAMPROW elemptr;
  int ctr;
  SHIFT_TEMPS

  /* Pre-zero output coefficient block. */
  MEMZERO(data, SIZEOF(DCTELEM) * DCTSIZE2);
 8017d30:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8017d34:	2100      	movs	r1, #0
 8017d36:	68f8      	ldr	r0, [r7, #12]
 8017d38:	f001 fe5a 	bl	80199f0 <memset>
  /* Pass 1: process rows. */
  /* Note results are scaled up by sqrt(8) compared to a true DCT; */
  /* furthermore, we scale the results by 2**PASS1_BITS. */
  /* 5-point FDCT kernel, cK represents sqrt(2) * cos(K*pi/10). */

  dataptr = data;
 8017d3c:	68fb      	ldr	r3, [r7, #12]
 8017d3e:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
  ctr = 0;
 8017d42:	2300      	movs	r3, #0
 8017d44:	67fb      	str	r3, [r7, #124]	@ 0x7c
  for (;;) {
    elemptr = sample_data[ctr] + start_col;
 8017d46:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8017d48:	009b      	lsls	r3, r3, #2
 8017d4a:	68ba      	ldr	r2, [r7, #8]
 8017d4c:	4413      	add	r3, r2
 8017d4e:	681a      	ldr	r2, [r3, #0]
 8017d50:	687b      	ldr	r3, [r7, #4]
 8017d52:	4413      	add	r3, r2
 8017d54:	67bb      	str	r3, [r7, #120]	@ 0x78

    /* Even part */

    tmp0 = GETJSAMPLE(elemptr[0]) + GETJSAMPLE(elemptr[4]);
 8017d56:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8017d58:	781b      	ldrb	r3, [r3, #0]
 8017d5a:	461a      	mov	r2, r3
 8017d5c:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8017d5e:	3304      	adds	r3, #4
 8017d60:	781b      	ldrb	r3, [r3, #0]
 8017d62:	4413      	add	r3, r2
 8017d64:	677b      	str	r3, [r7, #116]	@ 0x74
    tmp1 = GETJSAMPLE(elemptr[1]) + GETJSAMPLE(elemptr[3]);
 8017d66:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8017d68:	3301      	adds	r3, #1
 8017d6a:	781b      	ldrb	r3, [r3, #0]
 8017d6c:	461a      	mov	r2, r3
 8017d6e:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8017d70:	3303      	adds	r3, #3
 8017d72:	781b      	ldrb	r3, [r3, #0]
 8017d74:	4413      	add	r3, r2
 8017d76:	673b      	str	r3, [r7, #112]	@ 0x70
    tmp2 = GETJSAMPLE(elemptr[2]);
 8017d78:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8017d7a:	3302      	adds	r3, #2
 8017d7c:	781b      	ldrb	r3, [r3, #0]
 8017d7e:	66fb      	str	r3, [r7, #108]	@ 0x6c

    tmp10 = tmp0 + tmp1;
 8017d80:	6f7a      	ldr	r2, [r7, #116]	@ 0x74
 8017d82:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8017d84:	4413      	add	r3, r2
 8017d86:	66bb      	str	r3, [r7, #104]	@ 0x68
    tmp11 = tmp0 - tmp1;
 8017d88:	6f7a      	ldr	r2, [r7, #116]	@ 0x74
 8017d8a:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8017d8c:	1ad3      	subs	r3, r2, r3
 8017d8e:	667b      	str	r3, [r7, #100]	@ 0x64

    tmp0 = GETJSAMPLE(elemptr[0]) - GETJSAMPLE(elemptr[4]);
 8017d90:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8017d92:	781b      	ldrb	r3, [r3, #0]
 8017d94:	461a      	mov	r2, r3
 8017d96:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8017d98:	3304      	adds	r3, #4
 8017d9a:	781b      	ldrb	r3, [r3, #0]
 8017d9c:	1ad3      	subs	r3, r2, r3
 8017d9e:	677b      	str	r3, [r7, #116]	@ 0x74
    tmp1 = GETJSAMPLE(elemptr[1]) - GETJSAMPLE(elemptr[3]);
 8017da0:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8017da2:	3301      	adds	r3, #1
 8017da4:	781b      	ldrb	r3, [r3, #0]
 8017da6:	461a      	mov	r2, r3
 8017da8:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8017daa:	3303      	adds	r3, #3
 8017dac:	781b      	ldrb	r3, [r3, #0]
 8017dae:	1ad3      	subs	r3, r2, r3
 8017db0:	673b      	str	r3, [r7, #112]	@ 0x70

    /* Apply unsigned->signed conversion */
    dataptr[0] = (DCTELEM)
      ((tmp10 + tmp2 - 5 * CENTERJSAMPLE) << PASS1_BITS);
 8017db2:	6eba      	ldr	r2, [r7, #104]	@ 0x68
 8017db4:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8017db6:	4413      	add	r3, r2
 8017db8:	f5a3 7320 	sub.w	r3, r3, #640	@ 0x280
 8017dbc:	009a      	lsls	r2, r3, #2
    dataptr[0] = (DCTELEM)
 8017dbe:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8017dc2:	601a      	str	r2, [r3, #0]
    tmp11 = MULTIPLY(tmp11, FIX(0.790569415));          /* (c2+c4)/2 */
 8017dc4:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8017dc6:	f641 124c 	movw	r2, #6476	@ 0x194c
 8017dca:	fb02 f303 	mul.w	r3, r2, r3
 8017dce:	667b      	str	r3, [r7, #100]	@ 0x64
    tmp10 -= tmp2 << 2;
 8017dd0:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8017dd2:	009b      	lsls	r3, r3, #2
 8017dd4:	6eba      	ldr	r2, [r7, #104]	@ 0x68
 8017dd6:	1ad3      	subs	r3, r2, r3
 8017dd8:	66bb      	str	r3, [r7, #104]	@ 0x68
    tmp10 = MULTIPLY(tmp10, FIX(0.353553391));          /* (c2-c4)/2 */
 8017dda:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8017ddc:	f44f 6235 	mov.w	r2, #2896	@ 0xb50
 8017de0:	fb02 f303 	mul.w	r3, r2, r3
 8017de4:	66bb      	str	r3, [r7, #104]	@ 0x68
    dataptr[2] = (DCTELEM) DESCALE(tmp11 + tmp10, CONST_BITS-PASS1_BITS);
 8017de6:	6e7a      	ldr	r2, [r7, #100]	@ 0x64
 8017de8:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8017dea:	4413      	add	r3, r2
 8017dec:	f503 6280 	add.w	r2, r3, #1024	@ 0x400
 8017df0:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8017df4:	3308      	adds	r3, #8
 8017df6:	12d2      	asrs	r2, r2, #11
 8017df8:	601a      	str	r2, [r3, #0]
    dataptr[4] = (DCTELEM) DESCALE(tmp11 - tmp10, CONST_BITS-PASS1_BITS);
 8017dfa:	6e7a      	ldr	r2, [r7, #100]	@ 0x64
 8017dfc:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8017dfe:	1ad3      	subs	r3, r2, r3
 8017e00:	f503 6280 	add.w	r2, r3, #1024	@ 0x400
 8017e04:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8017e08:	3310      	adds	r3, #16
 8017e0a:	12d2      	asrs	r2, r2, #11
 8017e0c:	601a      	str	r2, [r3, #0]

    /* Odd part */

    tmp10 = MULTIPLY(tmp0 + tmp1, FIX(0.831253876));    /* c3 */
 8017e0e:	6f7a      	ldr	r2, [r7, #116]	@ 0x74
 8017e10:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8017e12:	4413      	add	r3, r2
 8017e14:	f641 229a 	movw	r2, #6810	@ 0x1a9a
 8017e18:	fb02 f303 	mul.w	r3, r2, r3
 8017e1c:	66bb      	str	r3, [r7, #104]	@ 0x68

    dataptr[1] = (DCTELEM)
      DESCALE(tmp10 + MULTIPLY(tmp0, FIX(0.513743148)), /* c1-c3 */
 8017e1e:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8017e20:	f241 0271 	movw	r2, #4209	@ 0x1071
 8017e24:	fb03 f202 	mul.w	r2, r3, r2
 8017e28:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8017e2a:	4413      	add	r3, r2
 8017e2c:	f503 6280 	add.w	r2, r3, #1024	@ 0x400
    dataptr[1] = (DCTELEM)
 8017e30:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8017e34:	3304      	adds	r3, #4
      DESCALE(tmp10 + MULTIPLY(tmp0, FIX(0.513743148)), /* c1-c3 */
 8017e36:	12d2      	asrs	r2, r2, #11
    dataptr[1] = (DCTELEM)
 8017e38:	601a      	str	r2, [r3, #0]
	      CONST_BITS-PASS1_BITS);
    dataptr[3] = (DCTELEM)
      DESCALE(tmp10 - MULTIPLY(tmp1, FIX(2.176250899)), /* c1+c3 */
 8017e3a:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8017e3c:	4ab5      	ldr	r2, [pc, #724]	@ (8018114 <jpeg_fdct_5x10+0x3f0>)
 8017e3e:	fb03 f202 	mul.w	r2, r3, r2
 8017e42:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8017e44:	4413      	add	r3, r2
 8017e46:	f503 6280 	add.w	r2, r3, #1024	@ 0x400
    dataptr[3] = (DCTELEM)
 8017e4a:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8017e4e:	330c      	adds	r3, #12
      DESCALE(tmp10 - MULTIPLY(tmp1, FIX(2.176250899)), /* c1+c3 */
 8017e50:	12d2      	asrs	r2, r2, #11
    dataptr[3] = (DCTELEM)
 8017e52:	601a      	str	r2, [r3, #0]
	      CONST_BITS-PASS1_BITS);

    ctr++;
 8017e54:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8017e56:	3301      	adds	r3, #1
 8017e58:	67fb      	str	r3, [r7, #124]	@ 0x7c

    if (ctr != DCTSIZE) {
 8017e5a:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8017e5c:	2b08      	cmp	r3, #8
 8017e5e:	d008      	beq.n	8017e72 <jpeg_fdct_5x10+0x14e>
      if (ctr == 10)
 8017e60:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8017e62:	2b0a      	cmp	r3, #10
 8017e64:	d00a      	beq.n	8017e7c <jpeg_fdct_5x10+0x158>
	break;			/* Done. */
      dataptr += DCTSIZE;	/* advance pointer to next row */
 8017e66:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8017e6a:	3320      	adds	r3, #32
 8017e6c:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8017e70:	e769      	b.n	8017d46 <jpeg_fdct_5x10+0x22>
    } else
      dataptr = workspace;	/* switch pointer to extended workspace */
 8017e72:	f107 0310 	add.w	r3, r7, #16
 8017e76:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
    elemptr = sample_data[ctr] + start_col;
 8017e7a:	e764      	b.n	8017d46 <jpeg_fdct_5x10+0x22>
	break;			/* Done. */
 8017e7c:	bf00      	nop
   * We must also scale the output by (8/5)*(8/10) = 32/25, which we
   * fold into the constant multipliers:
   * 10-point FDCT kernel, cK represents sqrt(2) * cos(K*pi/20) * 32/25.
   */

  dataptr = data;
 8017e7e:	68fb      	ldr	r3, [r7, #12]
 8017e80:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
  wsptr = workspace;
 8017e84:	f107 0310 	add.w	r3, r7, #16
 8017e88:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
  for (ctr = 0; ctr < 5; ctr++) {
 8017e8c:	2300      	movs	r3, #0
 8017e8e:	67fb      	str	r3, [r7, #124]	@ 0x7c
 8017e90:	e137      	b.n	8018102 <jpeg_fdct_5x10+0x3de>
    /* Even part */

    tmp0 = dataptr[DCTSIZE*0] + wsptr[DCTSIZE*1];
 8017e92:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8017e96:	681a      	ldr	r2, [r3, #0]
 8017e98:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8017e9c:	3320      	adds	r3, #32
 8017e9e:	681b      	ldr	r3, [r3, #0]
 8017ea0:	4413      	add	r3, r2
 8017ea2:	677b      	str	r3, [r7, #116]	@ 0x74
    tmp1 = dataptr[DCTSIZE*1] + wsptr[DCTSIZE*0];
 8017ea4:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8017ea8:	3320      	adds	r3, #32
 8017eaa:	681a      	ldr	r2, [r3, #0]
 8017eac:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8017eb0:	681b      	ldr	r3, [r3, #0]
 8017eb2:	4413      	add	r3, r2
 8017eb4:	673b      	str	r3, [r7, #112]	@ 0x70
    tmp12 = dataptr[DCTSIZE*2] + dataptr[DCTSIZE*7];
 8017eb6:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8017eba:	3340      	adds	r3, #64	@ 0x40
 8017ebc:	681a      	ldr	r2, [r3, #0]
 8017ebe:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8017ec2:	33e0      	adds	r3, #224	@ 0xe0
 8017ec4:	681b      	ldr	r3, [r3, #0]
 8017ec6:	4413      	add	r3, r2
 8017ec8:	663b      	str	r3, [r7, #96]	@ 0x60
    tmp3 = dataptr[DCTSIZE*3] + dataptr[DCTSIZE*6];
 8017eca:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8017ece:	3360      	adds	r3, #96	@ 0x60
 8017ed0:	681a      	ldr	r2, [r3, #0]
 8017ed2:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8017ed6:	33c0      	adds	r3, #192	@ 0xc0
 8017ed8:	681b      	ldr	r3, [r3, #0]
 8017eda:	4413      	add	r3, r2
 8017edc:	65fb      	str	r3, [r7, #92]	@ 0x5c
    tmp4 = dataptr[DCTSIZE*4] + dataptr[DCTSIZE*5];
 8017ede:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8017ee2:	3380      	adds	r3, #128	@ 0x80
 8017ee4:	681a      	ldr	r2, [r3, #0]
 8017ee6:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8017eea:	33a0      	adds	r3, #160	@ 0xa0
 8017eec:	681b      	ldr	r3, [r3, #0]
 8017eee:	4413      	add	r3, r2
 8017ef0:	65bb      	str	r3, [r7, #88]	@ 0x58

    tmp10 = tmp0 + tmp4;
 8017ef2:	6f7a      	ldr	r2, [r7, #116]	@ 0x74
 8017ef4:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8017ef6:	4413      	add	r3, r2
 8017ef8:	66bb      	str	r3, [r7, #104]	@ 0x68
    tmp13 = tmp0 - tmp4;
 8017efa:	6f7a      	ldr	r2, [r7, #116]	@ 0x74
 8017efc:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8017efe:	1ad3      	subs	r3, r2, r3
 8017f00:	657b      	str	r3, [r7, #84]	@ 0x54
    tmp11 = tmp1 + tmp3;
 8017f02:	6f3a      	ldr	r2, [r7, #112]	@ 0x70
 8017f04:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8017f06:	4413      	add	r3, r2
 8017f08:	667b      	str	r3, [r7, #100]	@ 0x64
    tmp14 = tmp1 - tmp3;
 8017f0a:	6f3a      	ldr	r2, [r7, #112]	@ 0x70
 8017f0c:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8017f0e:	1ad3      	subs	r3, r2, r3
 8017f10:	653b      	str	r3, [r7, #80]	@ 0x50

    tmp0 = dataptr[DCTSIZE*0] - wsptr[DCTSIZE*1];
 8017f12:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8017f16:	681a      	ldr	r2, [r3, #0]
 8017f18:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8017f1c:	3320      	adds	r3, #32
 8017f1e:	681b      	ldr	r3, [r3, #0]
 8017f20:	1ad3      	subs	r3, r2, r3
 8017f22:	677b      	str	r3, [r7, #116]	@ 0x74
    tmp1 = dataptr[DCTSIZE*1] - wsptr[DCTSIZE*0];
 8017f24:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8017f28:	3320      	adds	r3, #32
 8017f2a:	681a      	ldr	r2, [r3, #0]
 8017f2c:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8017f30:	681b      	ldr	r3, [r3, #0]
 8017f32:	1ad3      	subs	r3, r2, r3
 8017f34:	673b      	str	r3, [r7, #112]	@ 0x70
    tmp2 = dataptr[DCTSIZE*2] - dataptr[DCTSIZE*7];
 8017f36:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8017f3a:	3340      	adds	r3, #64	@ 0x40
 8017f3c:	681a      	ldr	r2, [r3, #0]
 8017f3e:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8017f42:	33e0      	adds	r3, #224	@ 0xe0
 8017f44:	681b      	ldr	r3, [r3, #0]
 8017f46:	1ad3      	subs	r3, r2, r3
 8017f48:	66fb      	str	r3, [r7, #108]	@ 0x6c
    tmp3 = dataptr[DCTSIZE*3] - dataptr[DCTSIZE*6];
 8017f4a:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8017f4e:	3360      	adds	r3, #96	@ 0x60
 8017f50:	681a      	ldr	r2, [r3, #0]
 8017f52:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8017f56:	33c0      	adds	r3, #192	@ 0xc0
 8017f58:	681b      	ldr	r3, [r3, #0]
 8017f5a:	1ad3      	subs	r3, r2, r3
 8017f5c:	65fb      	str	r3, [r7, #92]	@ 0x5c
    tmp4 = dataptr[DCTSIZE*4] - dataptr[DCTSIZE*5];
 8017f5e:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8017f62:	3380      	adds	r3, #128	@ 0x80
 8017f64:	681a      	ldr	r2, [r3, #0]
 8017f66:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8017f6a:	33a0      	adds	r3, #160	@ 0xa0
 8017f6c:	681b      	ldr	r3, [r3, #0]
 8017f6e:	1ad3      	subs	r3, r2, r3
 8017f70:	65bb      	str	r3, [r7, #88]	@ 0x58

    dataptr[DCTSIZE*0] = (DCTELEM)
      DESCALE(MULTIPLY(tmp10 + tmp11 + tmp12, FIX(1.28)), /* 32/25 */
 8017f72:	6eba      	ldr	r2, [r7, #104]	@ 0x68
 8017f74:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8017f76:	441a      	add	r2, r3
 8017f78:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8017f7a:	4413      	add	r3, r2
 8017f7c:	f642 02f6 	movw	r2, #10486	@ 0x28f6
 8017f80:	fb02 f303 	mul.w	r3, r2, r3
 8017f84:	f503 4380 	add.w	r3, r3, #16384	@ 0x4000
 8017f88:	13da      	asrs	r2, r3, #15
    dataptr[DCTSIZE*0] = (DCTELEM)
 8017f8a:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8017f8e:	601a      	str	r2, [r3, #0]
	      CONST_BITS+PASS1_BITS);
    tmp12 += tmp12;
 8017f90:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8017f92:	005b      	lsls	r3, r3, #1
 8017f94:	663b      	str	r3, [r7, #96]	@ 0x60
    dataptr[DCTSIZE*4] = (DCTELEM)
      DESCALE(MULTIPLY(tmp10 - tmp12, FIX(1.464477191)) - /* c4 */
 8017f96:	6eba      	ldr	r2, [r7, #104]	@ 0x68
 8017f98:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8017f9a:	1ad3      	subs	r3, r2, r3
 8017f9c:	f642 62dd 	movw	r2, #11997	@ 0x2edd
 8017fa0:	fb03 f202 	mul.w	r2, r3, r2
 8017fa4:	6e79      	ldr	r1, [r7, #100]	@ 0x64
 8017fa6:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8017fa8:	1acb      	subs	r3, r1, r3
 8017faa:	495b      	ldr	r1, [pc, #364]	@ (8018118 <jpeg_fdct_5x10+0x3f4>)
 8017fac:	fb01 f303 	mul.w	r3, r1, r3
 8017fb0:	4413      	add	r3, r2
 8017fb2:	f503 4280 	add.w	r2, r3, #16384	@ 0x4000
    dataptr[DCTSIZE*4] = (DCTELEM)
 8017fb6:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8017fba:	3380      	adds	r3, #128	@ 0x80
      DESCALE(MULTIPLY(tmp10 - tmp12, FIX(1.464477191)) - /* c4 */
 8017fbc:	13d2      	asrs	r2, r2, #15
    dataptr[DCTSIZE*4] = (DCTELEM)
 8017fbe:	601a      	str	r2, [r3, #0]
	      MULTIPLY(tmp11 - tmp12, FIX(0.559380511)),  /* c8 */
	      CONST_BITS+PASS1_BITS);
    tmp10 = MULTIPLY(tmp13 + tmp14, FIX(1.064004961));    /* c6 */
 8017fc0:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 8017fc2:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8017fc4:	4413      	add	r3, r2
 8017fc6:	f242 220c 	movw	r2, #8716	@ 0x220c
 8017fca:	fb02 f303 	mul.w	r3, r2, r3
 8017fce:	66bb      	str	r3, [r7, #104]	@ 0x68
    dataptr[DCTSIZE*2] = (DCTELEM)
      DESCALE(tmp10 + MULTIPLY(tmp13, FIX(0.657591230)),  /* c2-c6 */
 8017fd0:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8017fd2:	f241 520b 	movw	r2, #5387	@ 0x150b
 8017fd6:	fb03 f202 	mul.w	r2, r3, r2
 8017fda:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8017fdc:	4413      	add	r3, r2
 8017fde:	f503 4280 	add.w	r2, r3, #16384	@ 0x4000
    dataptr[DCTSIZE*2] = (DCTELEM)
 8017fe2:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8017fe6:	3340      	adds	r3, #64	@ 0x40
      DESCALE(tmp10 + MULTIPLY(tmp13, FIX(0.657591230)),  /* c2-c6 */
 8017fe8:	13d2      	asrs	r2, r2, #15
    dataptr[DCTSIZE*2] = (DCTELEM)
 8017fea:	601a      	str	r2, [r3, #0]
	      CONST_BITS+PASS1_BITS);
    dataptr[DCTSIZE*6] = (DCTELEM)
      DESCALE(tmp10 - MULTIPLY(tmp14, FIX(2.785601151)),  /* c2+c6 */
 8017fec:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8017fee:	4a4b      	ldr	r2, [pc, #300]	@ (801811c <jpeg_fdct_5x10+0x3f8>)
 8017ff0:	fb03 f202 	mul.w	r2, r3, r2
 8017ff4:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8017ff6:	4413      	add	r3, r2
 8017ff8:	f503 4280 	add.w	r2, r3, #16384	@ 0x4000
    dataptr[DCTSIZE*6] = (DCTELEM)
 8017ffc:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8018000:	33c0      	adds	r3, #192	@ 0xc0
      DESCALE(tmp10 - MULTIPLY(tmp14, FIX(2.785601151)),  /* c2+c6 */
 8018002:	13d2      	asrs	r2, r2, #15
    dataptr[DCTSIZE*6] = (DCTELEM)
 8018004:	601a      	str	r2, [r3, #0]
	      CONST_BITS+PASS1_BITS);

    /* Odd part */

    tmp10 = tmp0 + tmp4;
 8018006:	6f7a      	ldr	r2, [r7, #116]	@ 0x74
 8018008:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 801800a:	4413      	add	r3, r2
 801800c:	66bb      	str	r3, [r7, #104]	@ 0x68
    tmp11 = tmp1 - tmp3;
 801800e:	6f3a      	ldr	r2, [r7, #112]	@ 0x70
 8018010:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8018012:	1ad3      	subs	r3, r2, r3
 8018014:	667b      	str	r3, [r7, #100]	@ 0x64
    dataptr[DCTSIZE*5] = (DCTELEM)
      DESCALE(MULTIPLY(tmp10 - tmp11 - tmp2, FIX(1.28)),  /* 32/25 */
 8018016:	6eba      	ldr	r2, [r7, #104]	@ 0x68
 8018018:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 801801a:	1ad2      	subs	r2, r2, r3
 801801c:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 801801e:	1ad3      	subs	r3, r2, r3
 8018020:	f642 02f6 	movw	r2, #10486	@ 0x28f6
 8018024:	fb02 f303 	mul.w	r3, r2, r3
 8018028:	f503 4280 	add.w	r2, r3, #16384	@ 0x4000
    dataptr[DCTSIZE*5] = (DCTELEM)
 801802c:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8018030:	33a0      	adds	r3, #160	@ 0xa0
      DESCALE(MULTIPLY(tmp10 - tmp11 - tmp2, FIX(1.28)),  /* 32/25 */
 8018032:	13d2      	asrs	r2, r2, #15
    dataptr[DCTSIZE*5] = (DCTELEM)
 8018034:	601a      	str	r2, [r3, #0]
	      CONST_BITS+PASS1_BITS);
    tmp2 = MULTIPLY(tmp2, FIX(1.28));                     /* 32/25 */
 8018036:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8018038:	f642 02f6 	movw	r2, #10486	@ 0x28f6
 801803c:	fb02 f303 	mul.w	r3, r2, r3
 8018040:	66fb      	str	r3, [r7, #108]	@ 0x6c
    dataptr[DCTSIZE*1] = (DCTELEM)
      DESCALE(MULTIPLY(tmp0, FIX(1.787906876)) +          /* c1 */
 8018042:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8018044:	f643 1237 	movw	r2, #14647	@ 0x3937
 8018048:	fb03 f202 	mul.w	r2, r3, r2
 801804c:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 801804e:	f243 319d 	movw	r1, #13213	@ 0x339d
 8018052:	fb01 f303 	mul.w	r3, r1, r3
 8018056:	441a      	add	r2, r3
 8018058:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 801805a:	441a      	add	r2, r3
 801805c:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 801805e:	f641 214c 	movw	r1, #6732	@ 0x1a4c
 8018062:	fb01 f303 	mul.w	r3, r1, r3
 8018066:	441a      	add	r2, r3
 8018068:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 801806a:	f44f 6111 	mov.w	r1, #2320	@ 0x910
 801806e:	fb01 f303 	mul.w	r3, r1, r3
 8018072:	4413      	add	r3, r2
 8018074:	f503 4280 	add.w	r2, r3, #16384	@ 0x4000
    dataptr[DCTSIZE*1] = (DCTELEM)
 8018078:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 801807c:	3320      	adds	r3, #32
      DESCALE(MULTIPLY(tmp0, FIX(1.787906876)) +          /* c1 */
 801807e:	13d2      	asrs	r2, r2, #15
    dataptr[DCTSIZE*1] = (DCTELEM)
 8018080:	601a      	str	r2, [r3, #0]
	      MULTIPLY(tmp1, FIX(1.612894094)) + tmp2 +   /* c3 */
	      MULTIPLY(tmp3, FIX(0.821810588)) +          /* c7 */
	      MULTIPLY(tmp4, FIX(0.283176630)),           /* c9 */
	      CONST_BITS+PASS1_BITS);
    tmp12 = MULTIPLY(tmp0 - tmp4, FIX(1.217352341)) -     /* (c3+c7)/2 */
 8018082:	6f7a      	ldr	r2, [r7, #116]	@ 0x74
 8018084:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8018086:	1ad3      	subs	r3, r2, r3
 8018088:	f242 62f5 	movw	r2, #9973	@ 0x26f5
 801808c:	fb03 f202 	mul.w	r2, r3, r2
	    MULTIPLY(tmp1 + tmp3, FIX(0.752365123));      /* (c1-c9)/2 */
 8018090:	6f39      	ldr	r1, [r7, #112]	@ 0x70
 8018092:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8018094:	440b      	add	r3, r1
 8018096:	4922      	ldr	r1, [pc, #136]	@ (8018120 <jpeg_fdct_5x10+0x3fc>)
 8018098:	fb01 f303 	mul.w	r3, r1, r3
    tmp12 = MULTIPLY(tmp0 - tmp4, FIX(1.217352341)) -     /* (c3+c7)/2 */
 801809c:	4413      	add	r3, r2
 801809e:	663b      	str	r3, [r7, #96]	@ 0x60
    tmp13 = MULTIPLY(tmp10 + tmp11, FIX(0.395541753)) +   /* (c3-c7)/2 */
 80180a0:	6eba      	ldr	r2, [r7, #104]	@ 0x68
 80180a2:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 80180a4:	4413      	add	r3, r2
 80180a6:	f640 42a8 	movw	r2, #3240	@ 0xca8
 80180aa:	fb03 f202 	mul.w	r2, r3, r2
	    MULTIPLY(tmp11, FIX(0.64)) - tmp2;            /* 16/25 */
 80180ae:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 80180b0:	f241 417b 	movw	r1, #5243	@ 0x147b
 80180b4:	fb01 f303 	mul.w	r3, r1, r3
    tmp13 = MULTIPLY(tmp10 + tmp11, FIX(0.395541753)) +   /* (c3-c7)/2 */
 80180b8:	441a      	add	r2, r3
 80180ba:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80180bc:	1ad3      	subs	r3, r2, r3
 80180be:	657b      	str	r3, [r7, #84]	@ 0x54
    dataptr[DCTSIZE*3] = (DCTELEM) DESCALE(tmp12 + tmp13, CONST_BITS+PASS1_BITS);
 80180c0:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 80180c2:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80180c4:	4413      	add	r3, r2
 80180c6:	f503 4280 	add.w	r2, r3, #16384	@ 0x4000
 80180ca:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 80180ce:	3360      	adds	r3, #96	@ 0x60
 80180d0:	13d2      	asrs	r2, r2, #15
 80180d2:	601a      	str	r2, [r3, #0]
    dataptr[DCTSIZE*7] = (DCTELEM) DESCALE(tmp12 - tmp13, CONST_BITS+PASS1_BITS);
 80180d4:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 80180d6:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80180d8:	1ad3      	subs	r3, r2, r3
 80180da:	f503 4280 	add.w	r2, r3, #16384	@ 0x4000
 80180de:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 80180e2:	33e0      	adds	r3, #224	@ 0xe0
 80180e4:	13d2      	asrs	r2, r2, #15
 80180e6:	601a      	str	r2, [r3, #0]

    dataptr++;			/* advance pointer to next column */
 80180e8:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 80180ec:	3304      	adds	r3, #4
 80180ee:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
    wsptr++;			/* advance pointer to next column */
 80180f2:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 80180f6:	3304      	adds	r3, #4
 80180f8:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
  for (ctr = 0; ctr < 5; ctr++) {
 80180fc:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 80180fe:	3301      	adds	r3, #1
 8018100:	67fb      	str	r3, [r7, #124]	@ 0x7c
 8018102:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8018104:	2b04      	cmp	r3, #4
 8018106:	f77f aec4 	ble.w	8017e92 <jpeg_fdct_5x10+0x16e>
  }
}
 801810a:	bf00      	nop
 801810c:	bf00      	nop
 801810e:	3788      	adds	r7, #136	@ 0x88
 8018110:	46bd      	mov	sp, r7
 8018112:	bd80      	pop	{r7, pc}
 8018114:	ffffba5c 	.word	0xffffba5c
 8018118:	ffffee1a 	.word	0xffffee1a
 801811c:	ffffa6dc 	.word	0xffffa6dc
 8018120:	ffffe7ed 	.word	0xffffe7ed

08018124 <jpeg_fdct_4x8>:
 * 4-point FDCT in pass 1 (rows), 8-point in pass 2 (columns).
 */

GLOBAL(void)
jpeg_fdct_4x8 (DCTELEM * data, JSAMPARRAY sample_data, JDIMENSION start_col)
{
 8018124:	b580      	push	{r7, lr}
 8018126:	b090      	sub	sp, #64	@ 0x40
 8018128:	af00      	add	r7, sp, #0
 801812a:	60f8      	str	r0, [r7, #12]
 801812c:	60b9      	str	r1, [r7, #8]
 801812e:	607a      	str	r2, [r7, #4]
  JSAMPROW elemptr;
  int ctr;
  SHIFT_TEMPS

  /* Pre-zero output coefficient block. */
  MEMZERO(data, SIZEOF(DCTELEM) * DCTSIZE2);
 8018130:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8018134:	2100      	movs	r1, #0
 8018136:	68f8      	ldr	r0, [r7, #12]
 8018138:	f001 fc5a 	bl	80199f0 <memset>
  /* Note results are scaled up by sqrt(8) compared to a true DCT; */
  /* furthermore, we scale the results by 2**PASS1_BITS. */
  /* We must also scale the output by 8/4 = 2, which we add here. */
  /* 4-point FDCT kernel, cK represents sqrt(2) * cos(K*pi/16). */

  dataptr = data;
 801813c:	68fb      	ldr	r3, [r7, #12]
 801813e:	63fb      	str	r3, [r7, #60]	@ 0x3c
  for (ctr = 0; ctr < DCTSIZE; ctr++) {
 8018140:	2300      	movs	r3, #0
 8018142:	63bb      	str	r3, [r7, #56]	@ 0x38
 8018144:	e05f      	b.n	8018206 <jpeg_fdct_4x8+0xe2>
    elemptr = sample_data[ctr] + start_col;
 8018146:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8018148:	009b      	lsls	r3, r3, #2
 801814a:	68ba      	ldr	r2, [r7, #8]
 801814c:	4413      	add	r3, r2
 801814e:	681a      	ldr	r2, [r3, #0]
 8018150:	687b      	ldr	r3, [r7, #4]
 8018152:	4413      	add	r3, r2
 8018154:	613b      	str	r3, [r7, #16]

    /* Even part */

    tmp0 = GETJSAMPLE(elemptr[0]) + GETJSAMPLE(elemptr[3]);
 8018156:	693b      	ldr	r3, [r7, #16]
 8018158:	781b      	ldrb	r3, [r3, #0]
 801815a:	461a      	mov	r2, r3
 801815c:	693b      	ldr	r3, [r7, #16]
 801815e:	3303      	adds	r3, #3
 8018160:	781b      	ldrb	r3, [r3, #0]
 8018162:	4413      	add	r3, r2
 8018164:	637b      	str	r3, [r7, #52]	@ 0x34
    tmp1 = GETJSAMPLE(elemptr[1]) + GETJSAMPLE(elemptr[2]);
 8018166:	693b      	ldr	r3, [r7, #16]
 8018168:	3301      	adds	r3, #1
 801816a:	781b      	ldrb	r3, [r3, #0]
 801816c:	461a      	mov	r2, r3
 801816e:	693b      	ldr	r3, [r7, #16]
 8018170:	3302      	adds	r3, #2
 8018172:	781b      	ldrb	r3, [r3, #0]
 8018174:	4413      	add	r3, r2
 8018176:	633b      	str	r3, [r7, #48]	@ 0x30

    tmp10 = GETJSAMPLE(elemptr[0]) - GETJSAMPLE(elemptr[3]);
 8018178:	693b      	ldr	r3, [r7, #16]
 801817a:	781b      	ldrb	r3, [r3, #0]
 801817c:	461a      	mov	r2, r3
 801817e:	693b      	ldr	r3, [r7, #16]
 8018180:	3303      	adds	r3, #3
 8018182:	781b      	ldrb	r3, [r3, #0]
 8018184:	1ad3      	subs	r3, r2, r3
 8018186:	627b      	str	r3, [r7, #36]	@ 0x24
    tmp11 = GETJSAMPLE(elemptr[1]) - GETJSAMPLE(elemptr[2]);
 8018188:	693b      	ldr	r3, [r7, #16]
 801818a:	3301      	adds	r3, #1
 801818c:	781b      	ldrb	r3, [r3, #0]
 801818e:	461a      	mov	r2, r3
 8018190:	693b      	ldr	r3, [r7, #16]
 8018192:	3302      	adds	r3, #2
 8018194:	781b      	ldrb	r3, [r3, #0]
 8018196:	1ad3      	subs	r3, r2, r3
 8018198:	61fb      	str	r3, [r7, #28]

    /* Apply unsigned->signed conversion */
    dataptr[0] = (DCTELEM)
      ((tmp0 + tmp1 - 4 * CENTERJSAMPLE) << (PASS1_BITS+1));
 801819a:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 801819c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801819e:	4413      	add	r3, r2
 80181a0:	f5a3 7300 	sub.w	r3, r3, #512	@ 0x200
 80181a4:	00da      	lsls	r2, r3, #3
    dataptr[0] = (DCTELEM)
 80181a6:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80181a8:	601a      	str	r2, [r3, #0]
    dataptr[2] = (DCTELEM) ((tmp0 - tmp1) << (PASS1_BITS+1));
 80181aa:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 80181ac:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80181ae:	1ad2      	subs	r2, r2, r3
 80181b0:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80181b2:	3308      	adds	r3, #8
 80181b4:	00d2      	lsls	r2, r2, #3
 80181b6:	601a      	str	r2, [r3, #0]

    /* Odd part */

    tmp0 = MULTIPLY(tmp10 + tmp11, FIX_0_541196100);       /* c6 */
 80181b8:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80181ba:	69fb      	ldr	r3, [r7, #28]
 80181bc:	4413      	add	r3, r2
 80181be:	f241 1251 	movw	r2, #4433	@ 0x1151
 80181c2:	fb02 f303 	mul.w	r3, r2, r3
 80181c6:	637b      	str	r3, [r7, #52]	@ 0x34
    /* Add fudge factor here for final descale. */
    tmp0 += ONE << (CONST_BITS-PASS1_BITS-2);
 80181c8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80181ca:	f503 7300 	add.w	r3, r3, #512	@ 0x200
 80181ce:	637b      	str	r3, [r7, #52]	@ 0x34

    dataptr[1] = (DCTELEM)
      RIGHT_SHIFT(tmp0 + MULTIPLY(tmp10, FIX_0_765366865), /* c2-c6 */
 80181d0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80181d2:	f641 027e 	movw	r2, #6270	@ 0x187e
 80181d6:	fb03 f202 	mul.w	r2, r3, r2
 80181da:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80181dc:	441a      	add	r2, r3
    dataptr[1] = (DCTELEM)
 80181de:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80181e0:	3304      	adds	r3, #4
      RIGHT_SHIFT(tmp0 + MULTIPLY(tmp10, FIX_0_765366865), /* c2-c6 */
 80181e2:	1292      	asrs	r2, r2, #10
    dataptr[1] = (DCTELEM)
 80181e4:	601a      	str	r2, [r3, #0]
		  CONST_BITS-PASS1_BITS-1);
    dataptr[3] = (DCTELEM)
      RIGHT_SHIFT(tmp0 - MULTIPLY(tmp11, FIX_1_847759065), /* c2+c6 */
 80181e6:	69fb      	ldr	r3, [r7, #28]
 80181e8:	4a8b      	ldr	r2, [pc, #556]	@ (8018418 <jpeg_fdct_4x8+0x2f4>)
 80181ea:	fb03 f202 	mul.w	r2, r3, r2
 80181ee:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80181f0:	441a      	add	r2, r3
    dataptr[3] = (DCTELEM)
 80181f2:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80181f4:	330c      	adds	r3, #12
      RIGHT_SHIFT(tmp0 - MULTIPLY(tmp11, FIX_1_847759065), /* c2+c6 */
 80181f6:	1292      	asrs	r2, r2, #10
    dataptr[3] = (DCTELEM)
 80181f8:	601a      	str	r2, [r3, #0]
		  CONST_BITS-PASS1_BITS-1);

    dataptr += DCTSIZE;		/* advance pointer to next row */
 80181fa:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80181fc:	3320      	adds	r3, #32
 80181fe:	63fb      	str	r3, [r7, #60]	@ 0x3c
  for (ctr = 0; ctr < DCTSIZE; ctr++) {
 8018200:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8018202:	3301      	adds	r3, #1
 8018204:	63bb      	str	r3, [r7, #56]	@ 0x38
 8018206:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8018208:	2b07      	cmp	r3, #7
 801820a:	dd9c      	ble.n	8018146 <jpeg_fdct_4x8+0x22>
  /* Pass 2: process columns.
   * We remove the PASS1_BITS scaling, but leave the results scaled up
   * by an overall factor of 8.
   */

  dataptr = data;
 801820c:	68fb      	ldr	r3, [r7, #12]
 801820e:	63fb      	str	r3, [r7, #60]	@ 0x3c
  for (ctr = 0; ctr < 4; ctr++) {
 8018210:	2300      	movs	r3, #0
 8018212:	63bb      	str	r3, [r7, #56]	@ 0x38
 8018214:	e0f6      	b.n	8018404 <jpeg_fdct_4x8+0x2e0>
    /* Even part per LL&M figure 1 --- note that published figure is faulty;
     * rotator "sqrt(2)*c1" should be "sqrt(2)*c6".
     */

    tmp0 = dataptr[DCTSIZE*0] + dataptr[DCTSIZE*7];
 8018216:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8018218:	681a      	ldr	r2, [r3, #0]
 801821a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 801821c:	33e0      	adds	r3, #224	@ 0xe0
 801821e:	681b      	ldr	r3, [r3, #0]
 8018220:	4413      	add	r3, r2
 8018222:	637b      	str	r3, [r7, #52]	@ 0x34
    tmp1 = dataptr[DCTSIZE*1] + dataptr[DCTSIZE*6];
 8018224:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8018226:	3320      	adds	r3, #32
 8018228:	681a      	ldr	r2, [r3, #0]
 801822a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 801822c:	33c0      	adds	r3, #192	@ 0xc0
 801822e:	681b      	ldr	r3, [r3, #0]
 8018230:	4413      	add	r3, r2
 8018232:	633b      	str	r3, [r7, #48]	@ 0x30
    tmp2 = dataptr[DCTSIZE*2] + dataptr[DCTSIZE*5];
 8018234:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8018236:	3340      	adds	r3, #64	@ 0x40
 8018238:	681a      	ldr	r2, [r3, #0]
 801823a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 801823c:	33a0      	adds	r3, #160	@ 0xa0
 801823e:	681b      	ldr	r3, [r3, #0]
 8018240:	4413      	add	r3, r2
 8018242:	62fb      	str	r3, [r7, #44]	@ 0x2c
    tmp3 = dataptr[DCTSIZE*3] + dataptr[DCTSIZE*4];
 8018244:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8018246:	3360      	adds	r3, #96	@ 0x60
 8018248:	681a      	ldr	r2, [r3, #0]
 801824a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 801824c:	3380      	adds	r3, #128	@ 0x80
 801824e:	681b      	ldr	r3, [r3, #0]
 8018250:	4413      	add	r3, r2
 8018252:	62bb      	str	r3, [r7, #40]	@ 0x28

    /* Add fudge factor here for final descale. */
    tmp10 = tmp0 + tmp3 + (ONE << (PASS1_BITS-1));
 8018254:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8018256:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8018258:	4413      	add	r3, r2
 801825a:	3302      	adds	r3, #2
 801825c:	627b      	str	r3, [r7, #36]	@ 0x24
    tmp12 = tmp0 - tmp3;
 801825e:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8018260:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8018262:	1ad3      	subs	r3, r2, r3
 8018264:	623b      	str	r3, [r7, #32]
    tmp11 = tmp1 + tmp2;
 8018266:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8018268:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801826a:	4413      	add	r3, r2
 801826c:	61fb      	str	r3, [r7, #28]
    tmp13 = tmp1 - tmp2;
 801826e:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8018270:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8018272:	1ad3      	subs	r3, r2, r3
 8018274:	61bb      	str	r3, [r7, #24]

    tmp0 = dataptr[DCTSIZE*0] - dataptr[DCTSIZE*7];
 8018276:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8018278:	681a      	ldr	r2, [r3, #0]
 801827a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 801827c:	33e0      	adds	r3, #224	@ 0xe0
 801827e:	681b      	ldr	r3, [r3, #0]
 8018280:	1ad3      	subs	r3, r2, r3
 8018282:	637b      	str	r3, [r7, #52]	@ 0x34
    tmp1 = dataptr[DCTSIZE*1] - dataptr[DCTSIZE*6];
 8018284:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8018286:	3320      	adds	r3, #32
 8018288:	681a      	ldr	r2, [r3, #0]
 801828a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 801828c:	33c0      	adds	r3, #192	@ 0xc0
 801828e:	681b      	ldr	r3, [r3, #0]
 8018290:	1ad3      	subs	r3, r2, r3
 8018292:	633b      	str	r3, [r7, #48]	@ 0x30
    tmp2 = dataptr[DCTSIZE*2] - dataptr[DCTSIZE*5];
 8018294:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8018296:	3340      	adds	r3, #64	@ 0x40
 8018298:	681a      	ldr	r2, [r3, #0]
 801829a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 801829c:	33a0      	adds	r3, #160	@ 0xa0
 801829e:	681b      	ldr	r3, [r3, #0]
 80182a0:	1ad3      	subs	r3, r2, r3
 80182a2:	62fb      	str	r3, [r7, #44]	@ 0x2c
    tmp3 = dataptr[DCTSIZE*3] - dataptr[DCTSIZE*4];
 80182a4:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80182a6:	3360      	adds	r3, #96	@ 0x60
 80182a8:	681a      	ldr	r2, [r3, #0]
 80182aa:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80182ac:	3380      	adds	r3, #128	@ 0x80
 80182ae:	681b      	ldr	r3, [r3, #0]
 80182b0:	1ad3      	subs	r3, r2, r3
 80182b2:	62bb      	str	r3, [r7, #40]	@ 0x28

    dataptr[DCTSIZE*0] = (DCTELEM) RIGHT_SHIFT(tmp10 + tmp11, PASS1_BITS);
 80182b4:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80182b6:	69fb      	ldr	r3, [r7, #28]
 80182b8:	4413      	add	r3, r2
 80182ba:	109a      	asrs	r2, r3, #2
 80182bc:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80182be:	601a      	str	r2, [r3, #0]
    dataptr[DCTSIZE*4] = (DCTELEM) RIGHT_SHIFT(tmp10 - tmp11, PASS1_BITS);
 80182c0:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80182c2:	69fb      	ldr	r3, [r7, #28]
 80182c4:	1ad2      	subs	r2, r2, r3
 80182c6:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80182c8:	3380      	adds	r3, #128	@ 0x80
 80182ca:	1092      	asrs	r2, r2, #2
 80182cc:	601a      	str	r2, [r3, #0]

    z1 = MULTIPLY(tmp12 + tmp13, FIX_0_541196100);
 80182ce:	6a3a      	ldr	r2, [r7, #32]
 80182d0:	69bb      	ldr	r3, [r7, #24]
 80182d2:	4413      	add	r3, r2
 80182d4:	f241 1251 	movw	r2, #4433	@ 0x1151
 80182d8:	fb02 f303 	mul.w	r3, r2, r3
 80182dc:	617b      	str	r3, [r7, #20]
    /* Add fudge factor here for final descale. */
    z1 += ONE << (CONST_BITS+PASS1_BITS-1);
 80182de:	697b      	ldr	r3, [r7, #20]
 80182e0:	f503 4380 	add.w	r3, r3, #16384	@ 0x4000
 80182e4:	617b      	str	r3, [r7, #20]
    dataptr[DCTSIZE*2] = (DCTELEM)
      RIGHT_SHIFT(z1 + MULTIPLY(tmp12, FIX_0_765366865), CONST_BITS+PASS1_BITS);
 80182e6:	6a3b      	ldr	r3, [r7, #32]
 80182e8:	f641 027e 	movw	r2, #6270	@ 0x187e
 80182ec:	fb03 f202 	mul.w	r2, r3, r2
 80182f0:	697b      	ldr	r3, [r7, #20]
 80182f2:	441a      	add	r2, r3
    dataptr[DCTSIZE*2] = (DCTELEM)
 80182f4:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80182f6:	3340      	adds	r3, #64	@ 0x40
      RIGHT_SHIFT(z1 + MULTIPLY(tmp12, FIX_0_765366865), CONST_BITS+PASS1_BITS);
 80182f8:	13d2      	asrs	r2, r2, #15
    dataptr[DCTSIZE*2] = (DCTELEM)
 80182fa:	601a      	str	r2, [r3, #0]
    dataptr[DCTSIZE*6] = (DCTELEM)
      RIGHT_SHIFT(z1 - MULTIPLY(tmp13, FIX_1_847759065), CONST_BITS+PASS1_BITS);
 80182fc:	69bb      	ldr	r3, [r7, #24]
 80182fe:	4a46      	ldr	r2, [pc, #280]	@ (8018418 <jpeg_fdct_4x8+0x2f4>)
 8018300:	fb03 f202 	mul.w	r2, r3, r2
 8018304:	697b      	ldr	r3, [r7, #20]
 8018306:	441a      	add	r2, r3
    dataptr[DCTSIZE*6] = (DCTELEM)
 8018308:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 801830a:	33c0      	adds	r3, #192	@ 0xc0
      RIGHT_SHIFT(z1 - MULTIPLY(tmp13, FIX_1_847759065), CONST_BITS+PASS1_BITS);
 801830c:	13d2      	asrs	r2, r2, #15
    dataptr[DCTSIZE*6] = (DCTELEM)
 801830e:	601a      	str	r2, [r3, #0]
    /* Odd part per figure 8 --- note paper omits factor of sqrt(2).
     * 8-point FDCT kernel, cK represents sqrt(2) * cos(K*pi/16).
     * i0..i3 in the paper are tmp0..tmp3 here.
     */

    tmp10 = tmp0 + tmp3;
 8018310:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8018312:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8018314:	4413      	add	r3, r2
 8018316:	627b      	str	r3, [r7, #36]	@ 0x24
    tmp11 = tmp1 + tmp2;
 8018318:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 801831a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801831c:	4413      	add	r3, r2
 801831e:	61fb      	str	r3, [r7, #28]
    tmp12 = tmp0 + tmp2;
 8018320:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8018322:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8018324:	4413      	add	r3, r2
 8018326:	623b      	str	r3, [r7, #32]
    tmp13 = tmp1 + tmp3;
 8018328:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 801832a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801832c:	4413      	add	r3, r2
 801832e:	61bb      	str	r3, [r7, #24]
    z1 = MULTIPLY(tmp12 + tmp13, FIX_1_175875602); /*  c3 */
 8018330:	6a3a      	ldr	r2, [r7, #32]
 8018332:	69bb      	ldr	r3, [r7, #24]
 8018334:	4413      	add	r3, r2
 8018336:	f242 52a1 	movw	r2, #9633	@ 0x25a1
 801833a:	fb02 f303 	mul.w	r3, r2, r3
 801833e:	617b      	str	r3, [r7, #20]
    /* Add fudge factor here for final descale. */
    z1 += ONE << (CONST_BITS+PASS1_BITS-1);
 8018340:	697b      	ldr	r3, [r7, #20]
 8018342:	f503 4380 	add.w	r3, r3, #16384	@ 0x4000
 8018346:	617b      	str	r3, [r7, #20]

    tmp0  = MULTIPLY(tmp0,    FIX_1_501321110);    /*  c1+c3-c5-c7 */
 8018348:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 801834a:	f243 020b 	movw	r2, #12299	@ 0x300b
 801834e:	fb02 f303 	mul.w	r3, r2, r3
 8018352:	637b      	str	r3, [r7, #52]	@ 0x34
    tmp1  = MULTIPLY(tmp1,    FIX_3_072711026);    /*  c1+c3+c5-c7 */
 8018354:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8018356:	f246 2254 	movw	r2, #25172	@ 0x6254
 801835a:	fb02 f303 	mul.w	r3, r2, r3
 801835e:	633b      	str	r3, [r7, #48]	@ 0x30
    tmp2  = MULTIPLY(tmp2,    FIX_2_053119869);    /*  c1+c3-c5+c7 */
 8018360:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8018362:	f244 12b3 	movw	r2, #16819	@ 0x41b3
 8018366:	fb02 f303 	mul.w	r3, r2, r3
 801836a:	62fb      	str	r3, [r7, #44]	@ 0x2c
    tmp3  = MULTIPLY(tmp3,    FIX_0_298631336);    /* -c1+c3+c5-c7 */
 801836c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801836e:	f640 128e 	movw	r2, #2446	@ 0x98e
 8018372:	fb02 f303 	mul.w	r3, r2, r3
 8018376:	62bb      	str	r3, [r7, #40]	@ 0x28
    tmp10 = MULTIPLY(tmp10, - FIX_0_899976223);    /*  c7-c3 */
 8018378:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801837a:	4a28      	ldr	r2, [pc, #160]	@ (801841c <jpeg_fdct_4x8+0x2f8>)
 801837c:	fb02 f303 	mul.w	r3, r2, r3
 8018380:	627b      	str	r3, [r7, #36]	@ 0x24
    tmp11 = MULTIPLY(tmp11, - FIX_2_562915447);    /* -c1-c3 */
 8018382:	69fb      	ldr	r3, [r7, #28]
 8018384:	4a26      	ldr	r2, [pc, #152]	@ (8018420 <jpeg_fdct_4x8+0x2fc>)
 8018386:	fb02 f303 	mul.w	r3, r2, r3
 801838a:	61fb      	str	r3, [r7, #28]
    tmp12 = MULTIPLY(tmp12, - FIX_0_390180644);    /*  c5-c3 */
 801838c:	6a3b      	ldr	r3, [r7, #32]
 801838e:	4a25      	ldr	r2, [pc, #148]	@ (8018424 <jpeg_fdct_4x8+0x300>)
 8018390:	fb02 f303 	mul.w	r3, r2, r3
 8018394:	623b      	str	r3, [r7, #32]
    tmp13 = MULTIPLY(tmp13, - FIX_1_961570560);    /* -c3-c5 */
 8018396:	69bb      	ldr	r3, [r7, #24]
 8018398:	4a23      	ldr	r2, [pc, #140]	@ (8018428 <jpeg_fdct_4x8+0x304>)
 801839a:	fb02 f303 	mul.w	r3, r2, r3
 801839e:	61bb      	str	r3, [r7, #24]

    tmp12 += z1;
 80183a0:	6a3a      	ldr	r2, [r7, #32]
 80183a2:	697b      	ldr	r3, [r7, #20]
 80183a4:	4413      	add	r3, r2
 80183a6:	623b      	str	r3, [r7, #32]
    tmp13 += z1;
 80183a8:	69ba      	ldr	r2, [r7, #24]
 80183aa:	697b      	ldr	r3, [r7, #20]
 80183ac:	4413      	add	r3, r2
 80183ae:	61bb      	str	r3, [r7, #24]

    dataptr[DCTSIZE*1] = (DCTELEM)
      RIGHT_SHIFT(tmp0 + tmp10 + tmp12, CONST_BITS+PASS1_BITS);
 80183b0:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 80183b2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80183b4:	441a      	add	r2, r3
 80183b6:	6a3b      	ldr	r3, [r7, #32]
 80183b8:	441a      	add	r2, r3
    dataptr[DCTSIZE*1] = (DCTELEM)
 80183ba:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80183bc:	3320      	adds	r3, #32
      RIGHT_SHIFT(tmp0 + tmp10 + tmp12, CONST_BITS+PASS1_BITS);
 80183be:	13d2      	asrs	r2, r2, #15
    dataptr[DCTSIZE*1] = (DCTELEM)
 80183c0:	601a      	str	r2, [r3, #0]
    dataptr[DCTSIZE*3] = (DCTELEM)
      RIGHT_SHIFT(tmp1 + tmp11 + tmp13, CONST_BITS+PASS1_BITS);
 80183c2:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80183c4:	69fb      	ldr	r3, [r7, #28]
 80183c6:	441a      	add	r2, r3
 80183c8:	69bb      	ldr	r3, [r7, #24]
 80183ca:	441a      	add	r2, r3
    dataptr[DCTSIZE*3] = (DCTELEM)
 80183cc:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80183ce:	3360      	adds	r3, #96	@ 0x60
      RIGHT_SHIFT(tmp1 + tmp11 + tmp13, CONST_BITS+PASS1_BITS);
 80183d0:	13d2      	asrs	r2, r2, #15
    dataptr[DCTSIZE*3] = (DCTELEM)
 80183d2:	601a      	str	r2, [r3, #0]
    dataptr[DCTSIZE*5] = (DCTELEM)
      RIGHT_SHIFT(tmp2 + tmp11 + tmp12, CONST_BITS+PASS1_BITS);
 80183d4:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80183d6:	69fb      	ldr	r3, [r7, #28]
 80183d8:	441a      	add	r2, r3
 80183da:	6a3b      	ldr	r3, [r7, #32]
 80183dc:	441a      	add	r2, r3
    dataptr[DCTSIZE*5] = (DCTELEM)
 80183de:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80183e0:	33a0      	adds	r3, #160	@ 0xa0
      RIGHT_SHIFT(tmp2 + tmp11 + tmp12, CONST_BITS+PASS1_BITS);
 80183e2:	13d2      	asrs	r2, r2, #15
    dataptr[DCTSIZE*5] = (DCTELEM)
 80183e4:	601a      	str	r2, [r3, #0]
    dataptr[DCTSIZE*7] = (DCTELEM)
      RIGHT_SHIFT(tmp3 + tmp10 + tmp13, CONST_BITS+PASS1_BITS);
 80183e6:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 80183e8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80183ea:	441a      	add	r2, r3
 80183ec:	69bb      	ldr	r3, [r7, #24]
 80183ee:	441a      	add	r2, r3
    dataptr[DCTSIZE*7] = (DCTELEM)
 80183f0:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80183f2:	33e0      	adds	r3, #224	@ 0xe0
      RIGHT_SHIFT(tmp3 + tmp10 + tmp13, CONST_BITS+PASS1_BITS);
 80183f4:	13d2      	asrs	r2, r2, #15
    dataptr[DCTSIZE*7] = (DCTELEM)
 80183f6:	601a      	str	r2, [r3, #0]

    dataptr++;			/* advance pointer to next column */
 80183f8:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80183fa:	3304      	adds	r3, #4
 80183fc:	63fb      	str	r3, [r7, #60]	@ 0x3c
  for (ctr = 0; ctr < 4; ctr++) {
 80183fe:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8018400:	3301      	adds	r3, #1
 8018402:	63bb      	str	r3, [r7, #56]	@ 0x38
 8018404:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8018406:	2b03      	cmp	r3, #3
 8018408:	f77f af05 	ble.w	8018216 <jpeg_fdct_4x8+0xf2>
  }
}
 801840c:	bf00      	nop
 801840e:	bf00      	nop
 8018410:	3740      	adds	r7, #64	@ 0x40
 8018412:	46bd      	mov	sp, r7
 8018414:	bd80      	pop	{r7, pc}
 8018416:	bf00      	nop
 8018418:	ffffc4df 	.word	0xffffc4df
 801841c:	ffffe333 	.word	0xffffe333
 8018420:	ffffadfd 	.word	0xffffadfd
 8018424:	fffff384 	.word	0xfffff384
 8018428:	ffffc13b 	.word	0xffffc13b

0801842c <jpeg_fdct_3x6>:
 * 3-point FDCT in pass 1 (rows), 6-point in pass 2 (columns).
 */

GLOBAL(void)
jpeg_fdct_3x6 (DCTELEM * data, JSAMPARRAY sample_data, JDIMENSION start_col)
{
 801842c:	b580      	push	{r7, lr}
 801842e:	b08e      	sub	sp, #56	@ 0x38
 8018430:	af00      	add	r7, sp, #0
 8018432:	60f8      	str	r0, [r7, #12]
 8018434:	60b9      	str	r1, [r7, #8]
 8018436:	607a      	str	r2, [r7, #4]
  JSAMPROW elemptr;
  int ctr;
  SHIFT_TEMPS

  /* Pre-zero output coefficient block. */
  MEMZERO(data, SIZEOF(DCTELEM) * DCTSIZE2);
 8018438:	f44f 7280 	mov.w	r2, #256	@ 0x100
 801843c:	2100      	movs	r1, #0
 801843e:	68f8      	ldr	r0, [r7, #12]
 8018440:	f001 fad6 	bl	80199f0 <memset>
  /* furthermore, we scale the results by 2**PASS1_BITS. */
  /* We scale the results further by 2 as part of output adaption */
  /* scaling for different DCT size. */
  /* 3-point FDCT kernel, cK represents sqrt(2) * cos(K*pi/6). */

  dataptr = data;
 8018444:	68fb      	ldr	r3, [r7, #12]
 8018446:	637b      	str	r3, [r7, #52]	@ 0x34
  for (ctr = 0; ctr < 6; ctr++) {
 8018448:	2300      	movs	r3, #0
 801844a:	633b      	str	r3, [r7, #48]	@ 0x30
 801844c:	e043      	b.n	80184d6 <jpeg_fdct_3x6+0xaa>
    elemptr = sample_data[ctr] + start_col;
 801844e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8018450:	009b      	lsls	r3, r3, #2
 8018452:	68ba      	ldr	r2, [r7, #8]
 8018454:	4413      	add	r3, r2
 8018456:	681a      	ldr	r2, [r3, #0]
 8018458:	687b      	ldr	r3, [r7, #4]
 801845a:	4413      	add	r3, r2
 801845c:	617b      	str	r3, [r7, #20]

    /* Even part */

    tmp0 = GETJSAMPLE(elemptr[0]) + GETJSAMPLE(elemptr[2]);
 801845e:	697b      	ldr	r3, [r7, #20]
 8018460:	781b      	ldrb	r3, [r3, #0]
 8018462:	461a      	mov	r2, r3
 8018464:	697b      	ldr	r3, [r7, #20]
 8018466:	3302      	adds	r3, #2
 8018468:	781b      	ldrb	r3, [r3, #0]
 801846a:	4413      	add	r3, r2
 801846c:	62fb      	str	r3, [r7, #44]	@ 0x2c
    tmp1 = GETJSAMPLE(elemptr[1]);
 801846e:	697b      	ldr	r3, [r7, #20]
 8018470:	3301      	adds	r3, #1
 8018472:	781b      	ldrb	r3, [r3, #0]
 8018474:	61bb      	str	r3, [r7, #24]

    tmp2 = GETJSAMPLE(elemptr[0]) - GETJSAMPLE(elemptr[2]);
 8018476:	697b      	ldr	r3, [r7, #20]
 8018478:	781b      	ldrb	r3, [r3, #0]
 801847a:	461a      	mov	r2, r3
 801847c:	697b      	ldr	r3, [r7, #20]
 801847e:	3302      	adds	r3, #2
 8018480:	781b      	ldrb	r3, [r3, #0]
 8018482:	1ad3      	subs	r3, r2, r3
 8018484:	627b      	str	r3, [r7, #36]	@ 0x24

    /* Apply unsigned->signed conversion */
    dataptr[0] = (DCTELEM)
      ((tmp0 + tmp1 - 3 * CENTERJSAMPLE) << (PASS1_BITS+1));
 8018486:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8018488:	69bb      	ldr	r3, [r7, #24]
 801848a:	4413      	add	r3, r2
 801848c:	f5a3 73c0 	sub.w	r3, r3, #384	@ 0x180
 8018490:	00da      	lsls	r2, r3, #3
    dataptr[0] = (DCTELEM)
 8018492:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8018494:	601a      	str	r2, [r3, #0]
    dataptr[2] = (DCTELEM)
      DESCALE(MULTIPLY(tmp0 - tmp1 - tmp1, FIX(0.707106781)), /* c2 */
 8018496:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8018498:	69bb      	ldr	r3, [r7, #24]
 801849a:	1ad2      	subs	r2, r2, r3
 801849c:	69bb      	ldr	r3, [r7, #24]
 801849e:	1ad3      	subs	r3, r2, r3
 80184a0:	f241 62a1 	movw	r2, #5793	@ 0x16a1
 80184a4:	fb02 f303 	mul.w	r3, r2, r3
 80184a8:	f503 7200 	add.w	r2, r3, #512	@ 0x200
    dataptr[2] = (DCTELEM)
 80184ac:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80184ae:	3308      	adds	r3, #8
      DESCALE(MULTIPLY(tmp0 - tmp1 - tmp1, FIX(0.707106781)), /* c2 */
 80184b0:	1292      	asrs	r2, r2, #10
    dataptr[2] = (DCTELEM)
 80184b2:	601a      	str	r2, [r3, #0]
	      CONST_BITS-PASS1_BITS-1);

    /* Odd part */

    dataptr[1] = (DCTELEM)
      DESCALE(MULTIPLY(tmp2, FIX(1.224744871)),               /* c1 */
 80184b4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80184b6:	f242 7231 	movw	r2, #10033	@ 0x2731
 80184ba:	fb02 f303 	mul.w	r3, r2, r3
 80184be:	f503 7200 	add.w	r2, r3, #512	@ 0x200
    dataptr[1] = (DCTELEM)
 80184c2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80184c4:	3304      	adds	r3, #4
      DESCALE(MULTIPLY(tmp2, FIX(1.224744871)),               /* c1 */
 80184c6:	1292      	asrs	r2, r2, #10
    dataptr[1] = (DCTELEM)
 80184c8:	601a      	str	r2, [r3, #0]
	      CONST_BITS-PASS1_BITS-1);

    dataptr += DCTSIZE;		/* advance pointer to next row */
 80184ca:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80184cc:	3320      	adds	r3, #32
 80184ce:	637b      	str	r3, [r7, #52]	@ 0x34
  for (ctr = 0; ctr < 6; ctr++) {
 80184d0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80184d2:	3301      	adds	r3, #1
 80184d4:	633b      	str	r3, [r7, #48]	@ 0x30
 80184d6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80184d8:	2b05      	cmp	r3, #5
 80184da:	ddb8      	ble.n	801844e <jpeg_fdct_3x6+0x22>
   * We must also scale the output by (8/6)*(8/3) = 32/9, which we partially
   * fold into the constant multipliers (other part was done in pass 1):
   * 6-point FDCT kernel, cK represents sqrt(2) * cos(K*pi/12) * 16/9.
   */

  dataptr = data;
 80184dc:	68fb      	ldr	r3, [r7, #12]
 80184de:	637b      	str	r3, [r7, #52]	@ 0x34
  for (ctr = 0; ctr < 3; ctr++) {
 80184e0:	2300      	movs	r3, #0
 80184e2:	633b      	str	r3, [r7, #48]	@ 0x30
 80184e4:	e096      	b.n	8018614 <jpeg_fdct_3x6+0x1e8>
    /* Even part */

    tmp0 = dataptr[DCTSIZE*0] + dataptr[DCTSIZE*5];
 80184e6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80184e8:	681a      	ldr	r2, [r3, #0]
 80184ea:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80184ec:	33a0      	adds	r3, #160	@ 0xa0
 80184ee:	681b      	ldr	r3, [r3, #0]
 80184f0:	4413      	add	r3, r2
 80184f2:	62fb      	str	r3, [r7, #44]	@ 0x2c
    tmp11 = dataptr[DCTSIZE*1] + dataptr[DCTSIZE*4];
 80184f4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80184f6:	3320      	adds	r3, #32
 80184f8:	681a      	ldr	r2, [r3, #0]
 80184fa:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80184fc:	3380      	adds	r3, #128	@ 0x80
 80184fe:	681b      	ldr	r3, [r3, #0]
 8018500:	4413      	add	r3, r2
 8018502:	62bb      	str	r3, [r7, #40]	@ 0x28
    tmp2 = dataptr[DCTSIZE*2] + dataptr[DCTSIZE*3];
 8018504:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8018506:	3340      	adds	r3, #64	@ 0x40
 8018508:	681a      	ldr	r2, [r3, #0]
 801850a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 801850c:	3360      	adds	r3, #96	@ 0x60
 801850e:	681b      	ldr	r3, [r3, #0]
 8018510:	4413      	add	r3, r2
 8018512:	627b      	str	r3, [r7, #36]	@ 0x24

    tmp10 = tmp0 + tmp2;
 8018514:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8018516:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8018518:	4413      	add	r3, r2
 801851a:	623b      	str	r3, [r7, #32]
    tmp12 = tmp0 - tmp2;
 801851c:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 801851e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8018520:	1ad3      	subs	r3, r2, r3
 8018522:	61fb      	str	r3, [r7, #28]

    tmp0 = dataptr[DCTSIZE*0] - dataptr[DCTSIZE*5];
 8018524:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8018526:	681a      	ldr	r2, [r3, #0]
 8018528:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 801852a:	33a0      	adds	r3, #160	@ 0xa0
 801852c:	681b      	ldr	r3, [r3, #0]
 801852e:	1ad3      	subs	r3, r2, r3
 8018530:	62fb      	str	r3, [r7, #44]	@ 0x2c
    tmp1 = dataptr[DCTSIZE*1] - dataptr[DCTSIZE*4];
 8018532:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8018534:	3320      	adds	r3, #32
 8018536:	681a      	ldr	r2, [r3, #0]
 8018538:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 801853a:	3380      	adds	r3, #128	@ 0x80
 801853c:	681b      	ldr	r3, [r3, #0]
 801853e:	1ad3      	subs	r3, r2, r3
 8018540:	61bb      	str	r3, [r7, #24]
    tmp2 = dataptr[DCTSIZE*2] - dataptr[DCTSIZE*3];
 8018542:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8018544:	3340      	adds	r3, #64	@ 0x40
 8018546:	681a      	ldr	r2, [r3, #0]
 8018548:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 801854a:	3360      	adds	r3, #96	@ 0x60
 801854c:	681b      	ldr	r3, [r3, #0]
 801854e:	1ad3      	subs	r3, r2, r3
 8018550:	627b      	str	r3, [r7, #36]	@ 0x24

    dataptr[DCTSIZE*0] = (DCTELEM)
      DESCALE(MULTIPLY(tmp10 + tmp11, FIX(1.777777778)),         /* 16/9 */
 8018552:	6a3a      	ldr	r2, [r7, #32]
 8018554:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8018556:	4413      	add	r3, r2
 8018558:	f643 02e4 	movw	r2, #14564	@ 0x38e4
 801855c:	fb02 f303 	mul.w	r3, r2, r3
 8018560:	f503 4380 	add.w	r3, r3, #16384	@ 0x4000
 8018564:	13da      	asrs	r2, r3, #15
    dataptr[DCTSIZE*0] = (DCTELEM)
 8018566:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8018568:	601a      	str	r2, [r3, #0]
	      CONST_BITS+PASS1_BITS);
    dataptr[DCTSIZE*2] = (DCTELEM)
      DESCALE(MULTIPLY(tmp12, FIX(2.177324216)),                 /* c2 */
 801856a:	69fb      	ldr	r3, [r7, #28]
 801856c:	f244 52ad 	movw	r2, #17837	@ 0x45ad
 8018570:	fb02 f303 	mul.w	r3, r2, r3
 8018574:	f503 4280 	add.w	r2, r3, #16384	@ 0x4000
    dataptr[DCTSIZE*2] = (DCTELEM)
 8018578:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 801857a:	3340      	adds	r3, #64	@ 0x40
      DESCALE(MULTIPLY(tmp12, FIX(2.177324216)),                 /* c2 */
 801857c:	13d2      	asrs	r2, r2, #15
    dataptr[DCTSIZE*2] = (DCTELEM)
 801857e:	601a      	str	r2, [r3, #0]
	      CONST_BITS+PASS1_BITS);
    dataptr[DCTSIZE*4] = (DCTELEM)
      DESCALE(MULTIPLY(tmp10 - tmp11 - tmp11, FIX(1.257078722)), /* c4 */
 8018580:	6a3a      	ldr	r2, [r7, #32]
 8018582:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8018584:	1ad2      	subs	r2, r2, r3
 8018586:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8018588:	1ad3      	subs	r3, r2, r3
 801858a:	f642 023a 	movw	r2, #10298	@ 0x283a
 801858e:	fb02 f303 	mul.w	r3, r2, r3
 8018592:	f503 4280 	add.w	r2, r3, #16384	@ 0x4000
    dataptr[DCTSIZE*4] = (DCTELEM)
 8018596:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8018598:	3380      	adds	r3, #128	@ 0x80
      DESCALE(MULTIPLY(tmp10 - tmp11 - tmp11, FIX(1.257078722)), /* c4 */
 801859a:	13d2      	asrs	r2, r2, #15
    dataptr[DCTSIZE*4] = (DCTELEM)
 801859c:	601a      	str	r2, [r3, #0]
	      CONST_BITS+PASS1_BITS);

    /* Odd part */

    tmp10 = MULTIPLY(tmp0 + tmp2, FIX(0.650711829));             /* c5 */
 801859e:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80185a0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80185a2:	4413      	add	r3, r2
 80185a4:	f241 42d3 	movw	r2, #5331	@ 0x14d3
 80185a8:	fb02 f303 	mul.w	r3, r2, r3
 80185ac:	623b      	str	r3, [r7, #32]

    dataptr[DCTSIZE*1] = (DCTELEM)
      DESCALE(tmp10 + MULTIPLY(tmp0 + tmp1, FIX(1.777777778)),   /* 16/9 */
 80185ae:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80185b0:	69bb      	ldr	r3, [r7, #24]
 80185b2:	4413      	add	r3, r2
 80185b4:	f643 02e4 	movw	r2, #14564	@ 0x38e4
 80185b8:	fb03 f202 	mul.w	r2, r3, r2
 80185bc:	6a3b      	ldr	r3, [r7, #32]
 80185be:	4413      	add	r3, r2
 80185c0:	f503 4280 	add.w	r2, r3, #16384	@ 0x4000
    dataptr[DCTSIZE*1] = (DCTELEM)
 80185c4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80185c6:	3320      	adds	r3, #32
      DESCALE(tmp10 + MULTIPLY(tmp0 + tmp1, FIX(1.777777778)),   /* 16/9 */
 80185c8:	13d2      	asrs	r2, r2, #15
    dataptr[DCTSIZE*1] = (DCTELEM)
 80185ca:	601a      	str	r2, [r3, #0]
	      CONST_BITS+PASS1_BITS);
    dataptr[DCTSIZE*3] = (DCTELEM)
      DESCALE(MULTIPLY(tmp0 - tmp1 - tmp2, FIX(1.777777778)),    /* 16/9 */
 80185cc:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80185ce:	69bb      	ldr	r3, [r7, #24]
 80185d0:	1ad2      	subs	r2, r2, r3
 80185d2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80185d4:	1ad3      	subs	r3, r2, r3
 80185d6:	f643 02e4 	movw	r2, #14564	@ 0x38e4
 80185da:	fb02 f303 	mul.w	r3, r2, r3
 80185de:	f503 4280 	add.w	r2, r3, #16384	@ 0x4000
    dataptr[DCTSIZE*3] = (DCTELEM)
 80185e2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80185e4:	3360      	adds	r3, #96	@ 0x60
      DESCALE(MULTIPLY(tmp0 - tmp1 - tmp2, FIX(1.777777778)),    /* 16/9 */
 80185e6:	13d2      	asrs	r2, r2, #15
    dataptr[DCTSIZE*3] = (DCTELEM)
 80185e8:	601a      	str	r2, [r3, #0]
	      CONST_BITS+PASS1_BITS);
    dataptr[DCTSIZE*5] = (DCTELEM)
      DESCALE(tmp10 + MULTIPLY(tmp2 - tmp1, FIX(1.777777778)),   /* 16/9 */
 80185ea:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80185ec:	69bb      	ldr	r3, [r7, #24]
 80185ee:	1ad3      	subs	r3, r2, r3
 80185f0:	f643 02e4 	movw	r2, #14564	@ 0x38e4
 80185f4:	fb03 f202 	mul.w	r2, r3, r2
 80185f8:	6a3b      	ldr	r3, [r7, #32]
 80185fa:	4413      	add	r3, r2
 80185fc:	f503 4280 	add.w	r2, r3, #16384	@ 0x4000
    dataptr[DCTSIZE*5] = (DCTELEM)
 8018600:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8018602:	33a0      	adds	r3, #160	@ 0xa0
      DESCALE(tmp10 + MULTIPLY(tmp2 - tmp1, FIX(1.777777778)),   /* 16/9 */
 8018604:	13d2      	asrs	r2, r2, #15
    dataptr[DCTSIZE*5] = (DCTELEM)
 8018606:	601a      	str	r2, [r3, #0]
	      CONST_BITS+PASS1_BITS);

    dataptr++;			/* advance pointer to next column */
 8018608:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 801860a:	3304      	adds	r3, #4
 801860c:	637b      	str	r3, [r7, #52]	@ 0x34
  for (ctr = 0; ctr < 3; ctr++) {
 801860e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8018610:	3301      	adds	r3, #1
 8018612:	633b      	str	r3, [r7, #48]	@ 0x30
 8018614:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8018616:	2b02      	cmp	r3, #2
 8018618:	f77f af65 	ble.w	80184e6 <jpeg_fdct_3x6+0xba>
  }
}
 801861c:	bf00      	nop
 801861e:	bf00      	nop
 8018620:	3738      	adds	r7, #56	@ 0x38
 8018622:	46bd      	mov	sp, r7
 8018624:	bd80      	pop	{r7, pc}
	...

08018628 <jpeg_fdct_2x4>:
 * 2-point FDCT in pass 1 (rows), 4-point in pass 2 (columns).
 */

GLOBAL(void)
jpeg_fdct_2x4 (DCTELEM * data, JSAMPARRAY sample_data, JDIMENSION start_col)
{
 8018628:	b580      	push	{r7, lr}
 801862a:	b08c      	sub	sp, #48	@ 0x30
 801862c:	af00      	add	r7, sp, #0
 801862e:	60f8      	str	r0, [r7, #12]
 8018630:	60b9      	str	r1, [r7, #8]
 8018632:	607a      	str	r2, [r7, #4]
  JSAMPROW elemptr;
  int ctr;
  SHIFT_TEMPS

  /* Pre-zero output coefficient block. */
  MEMZERO(data, SIZEOF(DCTELEM) * DCTSIZE2);
 8018634:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8018638:	2100      	movs	r1, #0
 801863a:	68f8      	ldr	r0, [r7, #12]
 801863c:	f001 f9d8 	bl	80199f0 <memset>

  /* Pass 1: process rows. */
  /* Note results are scaled up by sqrt(8) compared to a true DCT. */
  /* We must also scale the output by (8/2)*(8/4) = 2**3, which we add here. */

  dataptr = data;
 8018640:	68fb      	ldr	r3, [r7, #12]
 8018642:	62fb      	str	r3, [r7, #44]	@ 0x2c
  for (ctr = 0; ctr < 4; ctr++) {
 8018644:	2300      	movs	r3, #0
 8018646:	62bb      	str	r3, [r7, #40]	@ 0x28
 8018648:	e023      	b.n	8018692 <jpeg_fdct_2x4+0x6a>
    elemptr = sample_data[ctr] + start_col;
 801864a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801864c:	009b      	lsls	r3, r3, #2
 801864e:	68ba      	ldr	r2, [r7, #8]
 8018650:	4413      	add	r3, r2
 8018652:	681a      	ldr	r2, [r3, #0]
 8018654:	687b      	ldr	r3, [r7, #4]
 8018656:	4413      	add	r3, r2
 8018658:	617b      	str	r3, [r7, #20]

    /* Even part */

    tmp0 = GETJSAMPLE(elemptr[0]);
 801865a:	697b      	ldr	r3, [r7, #20]
 801865c:	781b      	ldrb	r3, [r3, #0]
 801865e:	627b      	str	r3, [r7, #36]	@ 0x24
    tmp1 = GETJSAMPLE(elemptr[1]);
 8018660:	697b      	ldr	r3, [r7, #20]
 8018662:	3301      	adds	r3, #1
 8018664:	781b      	ldrb	r3, [r3, #0]
 8018666:	623b      	str	r3, [r7, #32]

    /* Apply unsigned->signed conversion */
    dataptr[0] = (DCTELEM) ((tmp0 + tmp1 - 2 * CENTERJSAMPLE) << 3);
 8018668:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 801866a:	6a3b      	ldr	r3, [r7, #32]
 801866c:	4413      	add	r3, r2
 801866e:	f5a3 7380 	sub.w	r3, r3, #256	@ 0x100
 8018672:	00da      	lsls	r2, r3, #3
 8018674:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8018676:	601a      	str	r2, [r3, #0]

    /* Odd part */

    dataptr[1] = (DCTELEM) ((tmp0 - tmp1) << 3);
 8018678:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 801867a:	6a3b      	ldr	r3, [r7, #32]
 801867c:	1ad2      	subs	r2, r2, r3
 801867e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8018680:	3304      	adds	r3, #4
 8018682:	00d2      	lsls	r2, r2, #3
 8018684:	601a      	str	r2, [r3, #0]

    dataptr += DCTSIZE;		/* advance pointer to next row */
 8018686:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8018688:	3320      	adds	r3, #32
 801868a:	62fb      	str	r3, [r7, #44]	@ 0x2c
  for (ctr = 0; ctr < 4; ctr++) {
 801868c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801868e:	3301      	adds	r3, #1
 8018690:	62bb      	str	r3, [r7, #40]	@ 0x28
 8018692:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8018694:	2b03      	cmp	r3, #3
 8018696:	ddd8      	ble.n	801864a <jpeg_fdct_2x4+0x22>
   * We leave the results scaled up by an overall factor of 8.
   * 4-point FDCT kernel,
   * cK represents sqrt(2) * cos(K*pi/16) [refers to 8-point FDCT].
   */

  dataptr = data;
 8018698:	68fb      	ldr	r3, [r7, #12]
 801869a:	62fb      	str	r3, [r7, #44]	@ 0x2c
  for (ctr = 0; ctr < 2; ctr++) {
 801869c:	2300      	movs	r3, #0
 801869e:	62bb      	str	r3, [r7, #40]	@ 0x28
 80186a0:	e04f      	b.n	8018742 <jpeg_fdct_2x4+0x11a>
    /* Even part */

    tmp0 = dataptr[DCTSIZE*0] + dataptr[DCTSIZE*3];
 80186a2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80186a4:	681a      	ldr	r2, [r3, #0]
 80186a6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80186a8:	3360      	adds	r3, #96	@ 0x60
 80186aa:	681b      	ldr	r3, [r3, #0]
 80186ac:	4413      	add	r3, r2
 80186ae:	627b      	str	r3, [r7, #36]	@ 0x24
    tmp1 = dataptr[DCTSIZE*1] + dataptr[DCTSIZE*2];
 80186b0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80186b2:	3320      	adds	r3, #32
 80186b4:	681a      	ldr	r2, [r3, #0]
 80186b6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80186b8:	3340      	adds	r3, #64	@ 0x40
 80186ba:	681b      	ldr	r3, [r3, #0]
 80186bc:	4413      	add	r3, r2
 80186be:	623b      	str	r3, [r7, #32]

    tmp10 = dataptr[DCTSIZE*0] - dataptr[DCTSIZE*3];
 80186c0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80186c2:	681a      	ldr	r2, [r3, #0]
 80186c4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80186c6:	3360      	adds	r3, #96	@ 0x60
 80186c8:	681b      	ldr	r3, [r3, #0]
 80186ca:	1ad3      	subs	r3, r2, r3
 80186cc:	61fb      	str	r3, [r7, #28]
    tmp11 = dataptr[DCTSIZE*1] - dataptr[DCTSIZE*2];
 80186ce:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80186d0:	3320      	adds	r3, #32
 80186d2:	681a      	ldr	r2, [r3, #0]
 80186d4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80186d6:	3340      	adds	r3, #64	@ 0x40
 80186d8:	681b      	ldr	r3, [r3, #0]
 80186da:	1ad3      	subs	r3, r2, r3
 80186dc:	61bb      	str	r3, [r7, #24]

    dataptr[DCTSIZE*0] = (DCTELEM) (tmp0 + tmp1);
 80186de:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80186e0:	6a3b      	ldr	r3, [r7, #32]
 80186e2:	441a      	add	r2, r3
 80186e4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80186e6:	601a      	str	r2, [r3, #0]
    dataptr[DCTSIZE*2] = (DCTELEM) (tmp0 - tmp1);
 80186e8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80186ea:	3340      	adds	r3, #64	@ 0x40
 80186ec:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 80186ee:	6a3a      	ldr	r2, [r7, #32]
 80186f0:	1a8a      	subs	r2, r1, r2
 80186f2:	601a      	str	r2, [r3, #0]

    /* Odd part */

    tmp0 = MULTIPLY(tmp10 + tmp11, FIX_0_541196100);       /* c6 */
 80186f4:	69fa      	ldr	r2, [r7, #28]
 80186f6:	69bb      	ldr	r3, [r7, #24]
 80186f8:	4413      	add	r3, r2
 80186fa:	f241 1251 	movw	r2, #4433	@ 0x1151
 80186fe:	fb02 f303 	mul.w	r3, r2, r3
 8018702:	627b      	str	r3, [r7, #36]	@ 0x24
    /* Add fudge factor here for final descale. */
    tmp0 += ONE << (CONST_BITS-1);
 8018704:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8018706:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 801870a:	627b      	str	r3, [r7, #36]	@ 0x24

    dataptr[DCTSIZE*1] = (DCTELEM)
      RIGHT_SHIFT(tmp0 + MULTIPLY(tmp10, FIX_0_765366865), /* c2-c6 */
 801870c:	69fb      	ldr	r3, [r7, #28]
 801870e:	f641 027e 	movw	r2, #6270	@ 0x187e
 8018712:	fb03 f202 	mul.w	r2, r3, r2
 8018716:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8018718:	441a      	add	r2, r3
    dataptr[DCTSIZE*1] = (DCTELEM)
 801871a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801871c:	3320      	adds	r3, #32
      RIGHT_SHIFT(tmp0 + MULTIPLY(tmp10, FIX_0_765366865), /* c2-c6 */
 801871e:	1352      	asrs	r2, r2, #13
    dataptr[DCTSIZE*1] = (DCTELEM)
 8018720:	601a      	str	r2, [r3, #0]
		  CONST_BITS);
    dataptr[DCTSIZE*3] = (DCTELEM)
      RIGHT_SHIFT(tmp0 - MULTIPLY(tmp11, FIX_1_847759065), /* c2+c6 */
 8018722:	69bb      	ldr	r3, [r7, #24]
 8018724:	4a0b      	ldr	r2, [pc, #44]	@ (8018754 <jpeg_fdct_2x4+0x12c>)
 8018726:	fb03 f202 	mul.w	r2, r3, r2
 801872a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801872c:	441a      	add	r2, r3
    dataptr[DCTSIZE*3] = (DCTELEM)
 801872e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8018730:	3360      	adds	r3, #96	@ 0x60
      RIGHT_SHIFT(tmp0 - MULTIPLY(tmp11, FIX_1_847759065), /* c2+c6 */
 8018732:	1352      	asrs	r2, r2, #13
    dataptr[DCTSIZE*3] = (DCTELEM)
 8018734:	601a      	str	r2, [r3, #0]
		  CONST_BITS);

    dataptr++;			/* advance pointer to next column */
 8018736:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8018738:	3304      	adds	r3, #4
 801873a:	62fb      	str	r3, [r7, #44]	@ 0x2c
  for (ctr = 0; ctr < 2; ctr++) {
 801873c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801873e:	3301      	adds	r3, #1
 8018740:	62bb      	str	r3, [r7, #40]	@ 0x28
 8018742:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8018744:	2b01      	cmp	r3, #1
 8018746:	ddac      	ble.n	80186a2 <jpeg_fdct_2x4+0x7a>
  }
}
 8018748:	bf00      	nop
 801874a:	bf00      	nop
 801874c:	3730      	adds	r7, #48	@ 0x30
 801874e:	46bd      	mov	sp, r7
 8018750:	bd80      	pop	{r7, pc}
 8018752:	bf00      	nop
 8018754:	ffffc4df 	.word	0xffffc4df

08018758 <jpeg_fdct_1x2>:
 * 1-point FDCT in pass 1 (rows), 2-point in pass 2 (columns).
 */

GLOBAL(void)
jpeg_fdct_1x2 (DCTELEM * data, JSAMPARRAY sample_data, JDIMENSION start_col)
{
 8018758:	b580      	push	{r7, lr}
 801875a:	b086      	sub	sp, #24
 801875c:	af00      	add	r7, sp, #0
 801875e:	60f8      	str	r0, [r7, #12]
 8018760:	60b9      	str	r1, [r7, #8]
 8018762:	607a      	str	r2, [r7, #4]
  INT32 tmp0, tmp1;

  /* Pre-zero output coefficient block. */
  MEMZERO(data, SIZEOF(DCTELEM) * DCTSIZE2);
 8018764:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8018768:	2100      	movs	r1, #0
 801876a:	68f8      	ldr	r0, [r7, #12]
 801876c:	f001 f940 	bl	80199f0 <memset>

  tmp0 = GETJSAMPLE(sample_data[0][start_col]);
 8018770:	68bb      	ldr	r3, [r7, #8]
 8018772:	681a      	ldr	r2, [r3, #0]
 8018774:	687b      	ldr	r3, [r7, #4]
 8018776:	4413      	add	r3, r2
 8018778:	781b      	ldrb	r3, [r3, #0]
 801877a:	617b      	str	r3, [r7, #20]
  tmp1 = GETJSAMPLE(sample_data[1][start_col]);
 801877c:	68bb      	ldr	r3, [r7, #8]
 801877e:	3304      	adds	r3, #4
 8018780:	681a      	ldr	r2, [r3, #0]
 8018782:	687b      	ldr	r3, [r7, #4]
 8018784:	4413      	add	r3, r2
 8018786:	781b      	ldrb	r3, [r3, #0]
 8018788:	613b      	str	r3, [r7, #16]
   * We must also scale the output by (8/1)*(8/2) = 2**5.
   */

  /* Even part */
  /* Apply unsigned->signed conversion */
  data[DCTSIZE*0] = (DCTELEM) ((tmp0 + tmp1 - 2 * CENTERJSAMPLE) << 5);
 801878a:	697a      	ldr	r2, [r7, #20]
 801878c:	693b      	ldr	r3, [r7, #16]
 801878e:	4413      	add	r3, r2
 8018790:	f5a3 7380 	sub.w	r3, r3, #256	@ 0x100
 8018794:	015a      	lsls	r2, r3, #5
 8018796:	68fb      	ldr	r3, [r7, #12]
 8018798:	601a      	str	r2, [r3, #0]

  /* Odd part */
  data[DCTSIZE*1] = (DCTELEM) ((tmp0 - tmp1) << 5);
 801879a:	697a      	ldr	r2, [r7, #20]
 801879c:	693b      	ldr	r3, [r7, #16]
 801879e:	1ad2      	subs	r2, r2, r3
 80187a0:	68fb      	ldr	r3, [r7, #12]
 80187a2:	3320      	adds	r3, #32
 80187a4:	0152      	lsls	r2, r2, #5
 80187a6:	601a      	str	r2, [r3, #0]
}
 80187a8:	bf00      	nop
 80187aa:	3718      	adds	r7, #24
 80187ac:	46bd      	mov	sp, r7
 80187ae:	bd80      	pop	{r7, pc}

080187b0 <out_of_memory>:

LOCAL(void)
out_of_memory (j_common_ptr cinfo, int which)
/* Report an out-of-memory error and stop execution */
/* If we compiled MEM_STATS support, report alloc requests before dying */
{
 80187b0:	b580      	push	{r7, lr}
 80187b2:	b082      	sub	sp, #8
 80187b4:	af00      	add	r7, sp, #0
 80187b6:	6078      	str	r0, [r7, #4]
 80187b8:	6039      	str	r1, [r7, #0]
#ifdef MEM_STATS
  cinfo->err->trace_level = 2;	/* force self_destruct to report stats */
#endif
  ERREXIT1(cinfo, JERR_OUT_OF_MEMORY, which);
 80187ba:	687b      	ldr	r3, [r7, #4]
 80187bc:	681b      	ldr	r3, [r3, #0]
 80187be:	2238      	movs	r2, #56	@ 0x38
 80187c0:	615a      	str	r2, [r3, #20]
 80187c2:	687b      	ldr	r3, [r7, #4]
 80187c4:	681b      	ldr	r3, [r3, #0]
 80187c6:	683a      	ldr	r2, [r7, #0]
 80187c8:	619a      	str	r2, [r3, #24]
 80187ca:	687b      	ldr	r3, [r7, #4]
 80187cc:	681b      	ldr	r3, [r3, #0]
 80187ce:	681b      	ldr	r3, [r3, #0]
 80187d0:	6878      	ldr	r0, [r7, #4]
 80187d2:	4798      	blx	r3
}
 80187d4:	bf00      	nop
 80187d6:	3708      	adds	r7, #8
 80187d8:	46bd      	mov	sp, r7
 80187da:	bd80      	pop	{r7, pc}

080187dc <alloc_small>:


METHODDEF(void *)
alloc_small (j_common_ptr cinfo, int pool_id, size_t sizeofobject)
/* Allocate a "small" object */
{
 80187dc:	b580      	push	{r7, lr}
 80187de:	b08c      	sub	sp, #48	@ 0x30
 80187e0:	af00      	add	r7, sp, #0
 80187e2:	60f8      	str	r0, [r7, #12]
 80187e4:	60b9      	str	r1, [r7, #8]
 80187e6:	607a      	str	r2, [r7, #4]
  my_mem_ptr mem = (my_mem_ptr) cinfo->mem;
 80187e8:	68fb      	ldr	r3, [r7, #12]
 80187ea:	685b      	ldr	r3, [r3, #4]
 80187ec:	623b      	str	r3, [r7, #32]
  small_pool_ptr hdr_ptr, prev_hdr_ptr;
  char * data_ptr;
  size_t odd_bytes, min_request, slop;

  /* Check for unsatisfiable request (do now to ensure no overflow below) */
  if (sizeofobject > (size_t) (MAX_ALLOC_CHUNK-SIZEOF(small_pool_hdr)))
 80187ee:	687b      	ldr	r3, [r7, #4]
 80187f0:	f64f 72f0 	movw	r2, #65520	@ 0xfff0
 80187f4:	4293      	cmp	r3, r2
 80187f6:	d903      	bls.n	8018800 <alloc_small+0x24>
    out_of_memory(cinfo, 1);	/* request exceeds malloc's ability */
 80187f8:	2101      	movs	r1, #1
 80187fa:	68f8      	ldr	r0, [r7, #12]
 80187fc:	f7ff ffd8 	bl	80187b0 <out_of_memory>

  /* Round up the requested size to a multiple of SIZEOF(ALIGN_TYPE) */
  odd_bytes = sizeofobject % SIZEOF(ALIGN_TYPE);
 8018800:	687b      	ldr	r3, [r7, #4]
 8018802:	f003 0307 	and.w	r3, r3, #7
 8018806:	61fb      	str	r3, [r7, #28]
  if (odd_bytes > 0)
 8018808:	69fb      	ldr	r3, [r7, #28]
 801880a:	2b00      	cmp	r3, #0
 801880c:	d004      	beq.n	8018818 <alloc_small+0x3c>
    sizeofobject += SIZEOF(ALIGN_TYPE) - odd_bytes;
 801880e:	687a      	ldr	r2, [r7, #4]
 8018810:	69fb      	ldr	r3, [r7, #28]
 8018812:	1ad3      	subs	r3, r2, r3
 8018814:	3308      	adds	r3, #8
 8018816:	607b      	str	r3, [r7, #4]

  /* See if space is available in any existing pool */
  if (pool_id < 0 || pool_id >= JPOOL_NUMPOOLS)
 8018818:	68bb      	ldr	r3, [r7, #8]
 801881a:	2b00      	cmp	r3, #0
 801881c:	db02      	blt.n	8018824 <alloc_small+0x48>
 801881e:	68bb      	ldr	r3, [r7, #8]
 8018820:	2b01      	cmp	r3, #1
 8018822:	dd0c      	ble.n	801883e <alloc_small+0x62>
    ERREXIT1(cinfo, JERR_BAD_POOL_ID, pool_id);	/* safety check */
 8018824:	68fb      	ldr	r3, [r7, #12]
 8018826:	681b      	ldr	r3, [r3, #0]
 8018828:	220f      	movs	r2, #15
 801882a:	615a      	str	r2, [r3, #20]
 801882c:	68fb      	ldr	r3, [r7, #12]
 801882e:	681b      	ldr	r3, [r3, #0]
 8018830:	68ba      	ldr	r2, [r7, #8]
 8018832:	619a      	str	r2, [r3, #24]
 8018834:	68fb      	ldr	r3, [r7, #12]
 8018836:	681b      	ldr	r3, [r3, #0]
 8018838:	681b      	ldr	r3, [r3, #0]
 801883a:	68f8      	ldr	r0, [r7, #12]
 801883c:	4798      	blx	r3
  prev_hdr_ptr = NULL;
 801883e:	2300      	movs	r3, #0
 8018840:	62bb      	str	r3, [r7, #40]	@ 0x28
  hdr_ptr = mem->small_list[pool_id];
 8018842:	6a3a      	ldr	r2, [r7, #32]
 8018844:	68bb      	ldr	r3, [r7, #8]
 8018846:	330c      	adds	r3, #12
 8018848:	009b      	lsls	r3, r3, #2
 801884a:	4413      	add	r3, r2
 801884c:	685b      	ldr	r3, [r3, #4]
 801884e:	62fb      	str	r3, [r7, #44]	@ 0x2c
  while (hdr_ptr != NULL) {
 8018850:	e009      	b.n	8018866 <alloc_small+0x8a>
    if (hdr_ptr->hdr.bytes_left >= sizeofobject)
 8018852:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8018854:	689b      	ldr	r3, [r3, #8]
 8018856:	687a      	ldr	r2, [r7, #4]
 8018858:	429a      	cmp	r2, r3
 801885a:	d908      	bls.n	801886e <alloc_small+0x92>
      break;			/* found pool with enough space */
    prev_hdr_ptr = hdr_ptr;
 801885c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801885e:	62bb      	str	r3, [r7, #40]	@ 0x28
    hdr_ptr = hdr_ptr->hdr.next;
 8018860:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8018862:	681b      	ldr	r3, [r3, #0]
 8018864:	62fb      	str	r3, [r7, #44]	@ 0x2c
  while (hdr_ptr != NULL) {
 8018866:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8018868:	2b00      	cmp	r3, #0
 801886a:	d1f2      	bne.n	8018852 <alloc_small+0x76>
 801886c:	e000      	b.n	8018870 <alloc_small+0x94>
      break;			/* found pool with enough space */
 801886e:	bf00      	nop
  }

  /* Time to make a new pool? */
  if (hdr_ptr == NULL) {
 8018870:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8018872:	2b00      	cmp	r3, #0
 8018874:	d154      	bne.n	8018920 <alloc_small+0x144>
    /* min_request is what we need now, slop is what will be leftover */
    min_request = sizeofobject + SIZEOF(small_pool_hdr);
 8018876:	687b      	ldr	r3, [r7, #4]
 8018878:	3310      	adds	r3, #16
 801887a:	61bb      	str	r3, [r7, #24]
    if (prev_hdr_ptr == NULL)	/* first pool in class? */
 801887c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801887e:	2b00      	cmp	r3, #0
 8018880:	d105      	bne.n	801888e <alloc_small+0xb2>
      slop = first_pool_slop[pool_id];
 8018882:	4a34      	ldr	r2, [pc, #208]	@ (8018954 <alloc_small+0x178>)
 8018884:	68bb      	ldr	r3, [r7, #8]
 8018886:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 801888a:	627b      	str	r3, [r7, #36]	@ 0x24
 801888c:	e004      	b.n	8018898 <alloc_small+0xbc>
    else
      slop = extra_pool_slop[pool_id];
 801888e:	4a32      	ldr	r2, [pc, #200]	@ (8018958 <alloc_small+0x17c>)
 8018890:	68bb      	ldr	r3, [r7, #8]
 8018892:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8018896:	627b      	str	r3, [r7, #36]	@ 0x24
    /* Don't ask for more than MAX_ALLOC_CHUNK */
    if (slop > (size_t) (MAX_ALLOC_CHUNK-min_request))
 8018898:	69bb      	ldr	r3, [r7, #24]
 801889a:	f5c3 3380 	rsb	r3, r3, #65536	@ 0x10000
 801889e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80188a0:	429a      	cmp	r2, r3
 80188a2:	d903      	bls.n	80188ac <alloc_small+0xd0>
      slop = (size_t) (MAX_ALLOC_CHUNK-min_request);
 80188a4:	69bb      	ldr	r3, [r7, #24]
 80188a6:	f5c3 3380 	rsb	r3, r3, #65536	@ 0x10000
 80188aa:	627b      	str	r3, [r7, #36]	@ 0x24
    /* Try to get space, if fail reduce slop and try again */
    for (;;) {
      hdr_ptr = (small_pool_ptr) jpeg_get_small(cinfo, min_request + slop);
 80188ac:	69ba      	ldr	r2, [r7, #24]
 80188ae:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80188b0:	4413      	add	r3, r2
 80188b2:	4619      	mov	r1, r3
 80188b4:	68f8      	ldr	r0, [r7, #12]
 80188b6:	f000 feff 	bl	80196b8 <jpeg_get_small>
 80188ba:	62f8      	str	r0, [r7, #44]	@ 0x2c
      if (hdr_ptr != NULL)
 80188bc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80188be:	2b00      	cmp	r3, #0
 80188c0:	d10a      	bne.n	80188d8 <alloc_small+0xfc>
	break;
      slop /= 2;
 80188c2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80188c4:	085b      	lsrs	r3, r3, #1
 80188c6:	627b      	str	r3, [r7, #36]	@ 0x24
      if (slop < MIN_SLOP)	/* give up when it gets real small */
 80188c8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80188ca:	2b31      	cmp	r3, #49	@ 0x31
 80188cc:	d8ee      	bhi.n	80188ac <alloc_small+0xd0>
	out_of_memory(cinfo, 2); /* jpeg_get_small failed */
 80188ce:	2102      	movs	r1, #2
 80188d0:	68f8      	ldr	r0, [r7, #12]
 80188d2:	f7ff ff6d 	bl	80187b0 <out_of_memory>
      hdr_ptr = (small_pool_ptr) jpeg_get_small(cinfo, min_request + slop);
 80188d6:	e7e9      	b.n	80188ac <alloc_small+0xd0>
	break;
 80188d8:	bf00      	nop
    }
    mem->total_space_allocated += min_request + slop;
 80188da:	6a3b      	ldr	r3, [r7, #32]
 80188dc:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80188de:	4619      	mov	r1, r3
 80188e0:	69ba      	ldr	r2, [r7, #24]
 80188e2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80188e4:	4413      	add	r3, r2
 80188e6:	440b      	add	r3, r1
 80188e8:	461a      	mov	r2, r3
 80188ea:	6a3b      	ldr	r3, [r7, #32]
 80188ec:	64da      	str	r2, [r3, #76]	@ 0x4c
    /* Success, initialize the new pool header and add to end of list */
    hdr_ptr->hdr.next = NULL;
 80188ee:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80188f0:	2200      	movs	r2, #0
 80188f2:	601a      	str	r2, [r3, #0]
    hdr_ptr->hdr.bytes_used = 0;
 80188f4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80188f6:	2200      	movs	r2, #0
 80188f8:	605a      	str	r2, [r3, #4]
    hdr_ptr->hdr.bytes_left = sizeofobject + slop;
 80188fa:	687a      	ldr	r2, [r7, #4]
 80188fc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80188fe:	441a      	add	r2, r3
 8018900:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8018902:	609a      	str	r2, [r3, #8]
    if (prev_hdr_ptr == NULL)	/* first pool in class? */
 8018904:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8018906:	2b00      	cmp	r3, #0
 8018908:	d107      	bne.n	801891a <alloc_small+0x13e>
      mem->small_list[pool_id] = hdr_ptr;
 801890a:	6a3a      	ldr	r2, [r7, #32]
 801890c:	68bb      	ldr	r3, [r7, #8]
 801890e:	330c      	adds	r3, #12
 8018910:	009b      	lsls	r3, r3, #2
 8018912:	4413      	add	r3, r2
 8018914:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8018916:	605a      	str	r2, [r3, #4]
 8018918:	e002      	b.n	8018920 <alloc_small+0x144>
    else
      prev_hdr_ptr->hdr.next = hdr_ptr;
 801891a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801891c:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 801891e:	601a      	str	r2, [r3, #0]
  }

  /* OK, allocate the object from the current pool */
  data_ptr = (char *) (hdr_ptr + 1); /* point to first data byte in pool */
 8018920:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8018922:	3310      	adds	r3, #16
 8018924:	617b      	str	r3, [r7, #20]
  data_ptr += hdr_ptr->hdr.bytes_used; /* point to place for object */
 8018926:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8018928:	685b      	ldr	r3, [r3, #4]
 801892a:	697a      	ldr	r2, [r7, #20]
 801892c:	4413      	add	r3, r2
 801892e:	617b      	str	r3, [r7, #20]
  hdr_ptr->hdr.bytes_used += sizeofobject;
 8018930:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8018932:	685a      	ldr	r2, [r3, #4]
 8018934:	687b      	ldr	r3, [r7, #4]
 8018936:	441a      	add	r2, r3
 8018938:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801893a:	605a      	str	r2, [r3, #4]
  hdr_ptr->hdr.bytes_left -= sizeofobject;
 801893c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801893e:	689a      	ldr	r2, [r3, #8]
 8018940:	687b      	ldr	r3, [r7, #4]
 8018942:	1ad2      	subs	r2, r2, r3
 8018944:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8018946:	609a      	str	r2, [r3, #8]

  return (void *) data_ptr;
 8018948:	697b      	ldr	r3, [r7, #20]
}
 801894a:	4618      	mov	r0, r3
 801894c:	3730      	adds	r7, #48	@ 0x30
 801894e:	46bd      	mov	sp, r7
 8018950:	bd80      	pop	{r7, pc}
 8018952:	bf00      	nop
 8018954:	0801bdd8 	.word	0x0801bdd8
 8018958:	0801bde0 	.word	0x0801bde0

0801895c <alloc_large>:
 */

METHODDEF(void FAR *)
alloc_large (j_common_ptr cinfo, int pool_id, size_t sizeofobject)
/* Allocate a "large" object */
{
 801895c:	b580      	push	{r7, lr}
 801895e:	b088      	sub	sp, #32
 8018960:	af00      	add	r7, sp, #0
 8018962:	60f8      	str	r0, [r7, #12]
 8018964:	60b9      	str	r1, [r7, #8]
 8018966:	607a      	str	r2, [r7, #4]
  my_mem_ptr mem = (my_mem_ptr) cinfo->mem;
 8018968:	68fb      	ldr	r3, [r7, #12]
 801896a:	685b      	ldr	r3, [r3, #4]
 801896c:	61fb      	str	r3, [r7, #28]
  large_pool_ptr hdr_ptr;
  size_t odd_bytes;

  /* Check for unsatisfiable request (do now to ensure no overflow below) */
  if (sizeofobject > (size_t) (MAX_ALLOC_CHUNK-SIZEOF(large_pool_hdr)))
 801896e:	687b      	ldr	r3, [r7, #4]
 8018970:	f64f 72f0 	movw	r2, #65520	@ 0xfff0
 8018974:	4293      	cmp	r3, r2
 8018976:	d903      	bls.n	8018980 <alloc_large+0x24>
    out_of_memory(cinfo, 3);	/* request exceeds malloc's ability */
 8018978:	2103      	movs	r1, #3
 801897a:	68f8      	ldr	r0, [r7, #12]
 801897c:	f7ff ff18 	bl	80187b0 <out_of_memory>

  /* Round up the requested size to a multiple of SIZEOF(ALIGN_TYPE) */
  odd_bytes = sizeofobject % SIZEOF(ALIGN_TYPE);
 8018980:	687b      	ldr	r3, [r7, #4]
 8018982:	f003 0307 	and.w	r3, r3, #7
 8018986:	61bb      	str	r3, [r7, #24]
  if (odd_bytes > 0)
 8018988:	69bb      	ldr	r3, [r7, #24]
 801898a:	2b00      	cmp	r3, #0
 801898c:	d004      	beq.n	8018998 <alloc_large+0x3c>
    sizeofobject += SIZEOF(ALIGN_TYPE) - odd_bytes;
 801898e:	687a      	ldr	r2, [r7, #4]
 8018990:	69bb      	ldr	r3, [r7, #24]
 8018992:	1ad3      	subs	r3, r2, r3
 8018994:	3308      	adds	r3, #8
 8018996:	607b      	str	r3, [r7, #4]

  /* Always make a new pool */
  if (pool_id < 0 || pool_id >= JPOOL_NUMPOOLS)
 8018998:	68bb      	ldr	r3, [r7, #8]
 801899a:	2b00      	cmp	r3, #0
 801899c:	db02      	blt.n	80189a4 <alloc_large+0x48>
 801899e:	68bb      	ldr	r3, [r7, #8]
 80189a0:	2b01      	cmp	r3, #1
 80189a2:	dd0c      	ble.n	80189be <alloc_large+0x62>
    ERREXIT1(cinfo, JERR_BAD_POOL_ID, pool_id);	/* safety check */
 80189a4:	68fb      	ldr	r3, [r7, #12]
 80189a6:	681b      	ldr	r3, [r3, #0]
 80189a8:	220f      	movs	r2, #15
 80189aa:	615a      	str	r2, [r3, #20]
 80189ac:	68fb      	ldr	r3, [r7, #12]
 80189ae:	681b      	ldr	r3, [r3, #0]
 80189b0:	68ba      	ldr	r2, [r7, #8]
 80189b2:	619a      	str	r2, [r3, #24]
 80189b4:	68fb      	ldr	r3, [r7, #12]
 80189b6:	681b      	ldr	r3, [r3, #0]
 80189b8:	681b      	ldr	r3, [r3, #0]
 80189ba:	68f8      	ldr	r0, [r7, #12]
 80189bc:	4798      	blx	r3

  hdr_ptr = (large_pool_ptr) jpeg_get_large(cinfo, sizeofobject +
 80189be:	687b      	ldr	r3, [r7, #4]
 80189c0:	3310      	adds	r3, #16
 80189c2:	4619      	mov	r1, r3
 80189c4:	68f8      	ldr	r0, [r7, #12]
 80189c6:	f000 fe91 	bl	80196ec <jpeg_get_large>
 80189ca:	6178      	str	r0, [r7, #20]
					    SIZEOF(large_pool_hdr));
  if (hdr_ptr == NULL)
 80189cc:	697b      	ldr	r3, [r7, #20]
 80189ce:	2b00      	cmp	r3, #0
 80189d0:	d103      	bne.n	80189da <alloc_large+0x7e>
    out_of_memory(cinfo, 4);	/* jpeg_get_large failed */
 80189d2:	2104      	movs	r1, #4
 80189d4:	68f8      	ldr	r0, [r7, #12]
 80189d6:	f7ff feeb 	bl	80187b0 <out_of_memory>
  mem->total_space_allocated += sizeofobject + SIZEOF(large_pool_hdr);
 80189da:	69fb      	ldr	r3, [r7, #28]
 80189dc:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80189de:	461a      	mov	r2, r3
 80189e0:	687b      	ldr	r3, [r7, #4]
 80189e2:	4413      	add	r3, r2
 80189e4:	3310      	adds	r3, #16
 80189e6:	461a      	mov	r2, r3
 80189e8:	69fb      	ldr	r3, [r7, #28]
 80189ea:	64da      	str	r2, [r3, #76]	@ 0x4c

  /* Success, initialize the new pool header and add to list */
  hdr_ptr->hdr.next = mem->large_list[pool_id];
 80189ec:	69fa      	ldr	r2, [r7, #28]
 80189ee:	68bb      	ldr	r3, [r7, #8]
 80189f0:	330e      	adds	r3, #14
 80189f2:	009b      	lsls	r3, r3, #2
 80189f4:	4413      	add	r3, r2
 80189f6:	685a      	ldr	r2, [r3, #4]
 80189f8:	697b      	ldr	r3, [r7, #20]
 80189fa:	601a      	str	r2, [r3, #0]
  /* We maintain space counts in each pool header for statistical purposes,
   * even though they are not needed for allocation.
   */
  hdr_ptr->hdr.bytes_used = sizeofobject;
 80189fc:	697b      	ldr	r3, [r7, #20]
 80189fe:	687a      	ldr	r2, [r7, #4]
 8018a00:	605a      	str	r2, [r3, #4]
  hdr_ptr->hdr.bytes_left = 0;
 8018a02:	697b      	ldr	r3, [r7, #20]
 8018a04:	2200      	movs	r2, #0
 8018a06:	609a      	str	r2, [r3, #8]
  mem->large_list[pool_id] = hdr_ptr;
 8018a08:	69fa      	ldr	r2, [r7, #28]
 8018a0a:	68bb      	ldr	r3, [r7, #8]
 8018a0c:	330e      	adds	r3, #14
 8018a0e:	009b      	lsls	r3, r3, #2
 8018a10:	4413      	add	r3, r2
 8018a12:	697a      	ldr	r2, [r7, #20]
 8018a14:	605a      	str	r2, [r3, #4]

  return (void FAR *) (hdr_ptr + 1); /* point to first data byte in pool */
 8018a16:	697b      	ldr	r3, [r7, #20]
 8018a18:	3310      	adds	r3, #16
}
 8018a1a:	4618      	mov	r0, r3
 8018a1c:	3720      	adds	r7, #32
 8018a1e:	46bd      	mov	sp, r7
 8018a20:	bd80      	pop	{r7, pc}

08018a22 <alloc_sarray>:

METHODDEF(JSAMPARRAY)
alloc_sarray (j_common_ptr cinfo, int pool_id,
	      JDIMENSION samplesperrow, JDIMENSION numrows)
/* Allocate a 2-D sample array */
{
 8018a22:	b580      	push	{r7, lr}
 8018a24:	b08c      	sub	sp, #48	@ 0x30
 8018a26:	af00      	add	r7, sp, #0
 8018a28:	60f8      	str	r0, [r7, #12]
 8018a2a:	60b9      	str	r1, [r7, #8]
 8018a2c:	607a      	str	r2, [r7, #4]
 8018a2e:	603b      	str	r3, [r7, #0]
  my_mem_ptr mem = (my_mem_ptr) cinfo->mem;
 8018a30:	68fb      	ldr	r3, [r7, #12]
 8018a32:	685b      	ldr	r3, [r3, #4]
 8018a34:	61fb      	str	r3, [r7, #28]
  JSAMPROW workspace;
  JDIMENSION rowsperchunk, currow, i;
  long ltemp;

  /* Calculate max # of rows allowed in one allocation chunk */
  ltemp = (MAX_ALLOC_CHUNK-SIZEOF(large_pool_hdr)) /
 8018a36:	f64f 72f0 	movw	r2, #65520	@ 0xfff0
 8018a3a:	687b      	ldr	r3, [r7, #4]
 8018a3c:	fbb2 f3f3 	udiv	r3, r2, r3
 8018a40:	61bb      	str	r3, [r7, #24]
	  ((long) samplesperrow * SIZEOF(JSAMPLE));
  if (ltemp <= 0)
 8018a42:	69bb      	ldr	r3, [r7, #24]
 8018a44:	2b00      	cmp	r3, #0
 8018a46:	dc08      	bgt.n	8018a5a <alloc_sarray+0x38>
    ERREXIT(cinfo, JERR_WIDTH_OVERFLOW);
 8018a48:	68fb      	ldr	r3, [r7, #12]
 8018a4a:	681b      	ldr	r3, [r3, #0]
 8018a4c:	2248      	movs	r2, #72	@ 0x48
 8018a4e:	615a      	str	r2, [r3, #20]
 8018a50:	68fb      	ldr	r3, [r7, #12]
 8018a52:	681b      	ldr	r3, [r3, #0]
 8018a54:	681b      	ldr	r3, [r3, #0]
 8018a56:	68f8      	ldr	r0, [r7, #12]
 8018a58:	4798      	blx	r3
  if (ltemp < (long) numrows)
 8018a5a:	683b      	ldr	r3, [r7, #0]
 8018a5c:	69ba      	ldr	r2, [r7, #24]
 8018a5e:	429a      	cmp	r2, r3
 8018a60:	da02      	bge.n	8018a68 <alloc_sarray+0x46>
    rowsperchunk = (JDIMENSION) ltemp;
 8018a62:	69bb      	ldr	r3, [r7, #24]
 8018a64:	62bb      	str	r3, [r7, #40]	@ 0x28
 8018a66:	e001      	b.n	8018a6c <alloc_sarray+0x4a>
  else
    rowsperchunk = numrows;
 8018a68:	683b      	ldr	r3, [r7, #0]
 8018a6a:	62bb      	str	r3, [r7, #40]	@ 0x28
  mem->last_rowsperchunk = rowsperchunk;
 8018a6c:	69fb      	ldr	r3, [r7, #28]
 8018a6e:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8018a70:	651a      	str	r2, [r3, #80]	@ 0x50

  /* Get space for row pointers (small object) */
  result = (JSAMPARRAY) alloc_small(cinfo, pool_id,
				    (size_t) (numrows * SIZEOF(JSAMPROW)));
 8018a72:	683b      	ldr	r3, [r7, #0]
 8018a74:	009b      	lsls	r3, r3, #2
  result = (JSAMPARRAY) alloc_small(cinfo, pool_id,
 8018a76:	461a      	mov	r2, r3
 8018a78:	68b9      	ldr	r1, [r7, #8]
 8018a7a:	68f8      	ldr	r0, [r7, #12]
 8018a7c:	f7ff feae 	bl	80187dc <alloc_small>
 8018a80:	6178      	str	r0, [r7, #20]

  /* Get the rows themselves (large objects) */
  currow = 0;
 8018a82:	2300      	movs	r3, #0
 8018a84:	627b      	str	r3, [r7, #36]	@ 0x24
  while (currow < numrows) {
 8018a86:	e026      	b.n	8018ad6 <alloc_sarray+0xb4>
    rowsperchunk = MIN(rowsperchunk, numrows - currow);
 8018a88:	683a      	ldr	r2, [r7, #0]
 8018a8a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8018a8c:	1ad3      	subs	r3, r2, r3
 8018a8e:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8018a90:	4293      	cmp	r3, r2
 8018a92:	bf28      	it	cs
 8018a94:	4613      	movcs	r3, r2
 8018a96:	62bb      	str	r3, [r7, #40]	@ 0x28
    workspace = (JSAMPROW) alloc_large(cinfo, pool_id,
 8018a98:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8018a9a:	687a      	ldr	r2, [r7, #4]
 8018a9c:	fb02 f303 	mul.w	r3, r2, r3
 8018aa0:	461a      	mov	r2, r3
 8018aa2:	68b9      	ldr	r1, [r7, #8]
 8018aa4:	68f8      	ldr	r0, [r7, #12]
 8018aa6:	f7ff ff59 	bl	801895c <alloc_large>
 8018aaa:	62f8      	str	r0, [r7, #44]	@ 0x2c
	(size_t) ((size_t) rowsperchunk * (size_t) samplesperrow
		  * SIZEOF(JSAMPLE)));
    for (i = rowsperchunk; i > 0; i--) {
 8018aac:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8018aae:	623b      	str	r3, [r7, #32]
 8018ab0:	e00e      	b.n	8018ad0 <alloc_sarray+0xae>
      result[currow++] = workspace;
 8018ab2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8018ab4:	1c5a      	adds	r2, r3, #1
 8018ab6:	627a      	str	r2, [r7, #36]	@ 0x24
 8018ab8:	009b      	lsls	r3, r3, #2
 8018aba:	697a      	ldr	r2, [r7, #20]
 8018abc:	4413      	add	r3, r2
 8018abe:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8018ac0:	601a      	str	r2, [r3, #0]
      workspace += samplesperrow;
 8018ac2:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8018ac4:	687b      	ldr	r3, [r7, #4]
 8018ac6:	4413      	add	r3, r2
 8018ac8:	62fb      	str	r3, [r7, #44]	@ 0x2c
    for (i = rowsperchunk; i > 0; i--) {
 8018aca:	6a3b      	ldr	r3, [r7, #32]
 8018acc:	3b01      	subs	r3, #1
 8018ace:	623b      	str	r3, [r7, #32]
 8018ad0:	6a3b      	ldr	r3, [r7, #32]
 8018ad2:	2b00      	cmp	r3, #0
 8018ad4:	d1ed      	bne.n	8018ab2 <alloc_sarray+0x90>
  while (currow < numrows) {
 8018ad6:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8018ad8:	683b      	ldr	r3, [r7, #0]
 8018ada:	429a      	cmp	r2, r3
 8018adc:	d3d4      	bcc.n	8018a88 <alloc_sarray+0x66>
    }
  }

  return result;
 8018ade:	697b      	ldr	r3, [r7, #20]
}
 8018ae0:	4618      	mov	r0, r3
 8018ae2:	3730      	adds	r7, #48	@ 0x30
 8018ae4:	46bd      	mov	sp, r7
 8018ae6:	bd80      	pop	{r7, pc}

08018ae8 <alloc_barray>:

METHODDEF(JBLOCKARRAY)
alloc_barray (j_common_ptr cinfo, int pool_id,
	      JDIMENSION blocksperrow, JDIMENSION numrows)
/* Allocate a 2-D coefficient-block array */
{
 8018ae8:	b580      	push	{r7, lr}
 8018aea:	b08c      	sub	sp, #48	@ 0x30
 8018aec:	af00      	add	r7, sp, #0
 8018aee:	60f8      	str	r0, [r7, #12]
 8018af0:	60b9      	str	r1, [r7, #8]
 8018af2:	607a      	str	r2, [r7, #4]
 8018af4:	603b      	str	r3, [r7, #0]
  my_mem_ptr mem = (my_mem_ptr) cinfo->mem;
 8018af6:	68fb      	ldr	r3, [r7, #12]
 8018af8:	685b      	ldr	r3, [r3, #4]
 8018afa:	61fb      	str	r3, [r7, #28]
  JDIMENSION rowsperchunk, currow, i;
  long ltemp;

  /* Calculate max # of rows allowed in one allocation chunk */
  ltemp = (MAX_ALLOC_CHUNK-SIZEOF(large_pool_hdr)) /
	  ((long) blocksperrow * SIZEOF(JBLOCK));
 8018afc:	687b      	ldr	r3, [r7, #4]
 8018afe:	01db      	lsls	r3, r3, #7
  ltemp = (MAX_ALLOC_CHUNK-SIZEOF(large_pool_hdr)) /
 8018b00:	f64f 72f0 	movw	r2, #65520	@ 0xfff0
 8018b04:	fbb2 f3f3 	udiv	r3, r2, r3
 8018b08:	61bb      	str	r3, [r7, #24]
  if (ltemp <= 0)
 8018b0a:	69bb      	ldr	r3, [r7, #24]
 8018b0c:	2b00      	cmp	r3, #0
 8018b0e:	dc08      	bgt.n	8018b22 <alloc_barray+0x3a>
    ERREXIT(cinfo, JERR_WIDTH_OVERFLOW);
 8018b10:	68fb      	ldr	r3, [r7, #12]
 8018b12:	681b      	ldr	r3, [r3, #0]
 8018b14:	2248      	movs	r2, #72	@ 0x48
 8018b16:	615a      	str	r2, [r3, #20]
 8018b18:	68fb      	ldr	r3, [r7, #12]
 8018b1a:	681b      	ldr	r3, [r3, #0]
 8018b1c:	681b      	ldr	r3, [r3, #0]
 8018b1e:	68f8      	ldr	r0, [r7, #12]
 8018b20:	4798      	blx	r3
  if (ltemp < (long) numrows)
 8018b22:	683b      	ldr	r3, [r7, #0]
 8018b24:	69ba      	ldr	r2, [r7, #24]
 8018b26:	429a      	cmp	r2, r3
 8018b28:	da02      	bge.n	8018b30 <alloc_barray+0x48>
    rowsperchunk = (JDIMENSION) ltemp;
 8018b2a:	69bb      	ldr	r3, [r7, #24]
 8018b2c:	62bb      	str	r3, [r7, #40]	@ 0x28
 8018b2e:	e001      	b.n	8018b34 <alloc_barray+0x4c>
  else
    rowsperchunk = numrows;
 8018b30:	683b      	ldr	r3, [r7, #0]
 8018b32:	62bb      	str	r3, [r7, #40]	@ 0x28
  mem->last_rowsperchunk = rowsperchunk;
 8018b34:	69fb      	ldr	r3, [r7, #28]
 8018b36:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8018b38:	651a      	str	r2, [r3, #80]	@ 0x50

  /* Get space for row pointers (small object) */
  result = (JBLOCKARRAY) alloc_small(cinfo, pool_id,
				     (size_t) (numrows * SIZEOF(JBLOCKROW)));
 8018b3a:	683b      	ldr	r3, [r7, #0]
 8018b3c:	009b      	lsls	r3, r3, #2
  result = (JBLOCKARRAY) alloc_small(cinfo, pool_id,
 8018b3e:	461a      	mov	r2, r3
 8018b40:	68b9      	ldr	r1, [r7, #8]
 8018b42:	68f8      	ldr	r0, [r7, #12]
 8018b44:	f7ff fe4a 	bl	80187dc <alloc_small>
 8018b48:	6178      	str	r0, [r7, #20]

  /* Get the rows themselves (large objects) */
  currow = 0;
 8018b4a:	2300      	movs	r3, #0
 8018b4c:	627b      	str	r3, [r7, #36]	@ 0x24
  while (currow < numrows) {
 8018b4e:	e028      	b.n	8018ba2 <alloc_barray+0xba>
    rowsperchunk = MIN(rowsperchunk, numrows - currow);
 8018b50:	683a      	ldr	r2, [r7, #0]
 8018b52:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8018b54:	1ad3      	subs	r3, r2, r3
 8018b56:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8018b58:	4293      	cmp	r3, r2
 8018b5a:	bf28      	it	cs
 8018b5c:	4613      	movcs	r3, r2
 8018b5e:	62bb      	str	r3, [r7, #40]	@ 0x28
    workspace = (JBLOCKROW) alloc_large(cinfo, pool_id,
	(size_t) ((size_t) rowsperchunk * (size_t) blocksperrow
 8018b60:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8018b62:	687a      	ldr	r2, [r7, #4]
 8018b64:	fb02 f303 	mul.w	r3, r2, r3
    workspace = (JBLOCKROW) alloc_large(cinfo, pool_id,
 8018b68:	01db      	lsls	r3, r3, #7
 8018b6a:	461a      	mov	r2, r3
 8018b6c:	68b9      	ldr	r1, [r7, #8]
 8018b6e:	68f8      	ldr	r0, [r7, #12]
 8018b70:	f7ff fef4 	bl	801895c <alloc_large>
 8018b74:	62f8      	str	r0, [r7, #44]	@ 0x2c
		  * SIZEOF(JBLOCK)));
    for (i = rowsperchunk; i > 0; i--) {
 8018b76:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8018b78:	623b      	str	r3, [r7, #32]
 8018b7a:	e00f      	b.n	8018b9c <alloc_barray+0xb4>
      result[currow++] = workspace;
 8018b7c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8018b7e:	1c5a      	adds	r2, r3, #1
 8018b80:	627a      	str	r2, [r7, #36]	@ 0x24
 8018b82:	009b      	lsls	r3, r3, #2
 8018b84:	697a      	ldr	r2, [r7, #20]
 8018b86:	4413      	add	r3, r2
 8018b88:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8018b8a:	601a      	str	r2, [r3, #0]
      workspace += blocksperrow;
 8018b8c:	687b      	ldr	r3, [r7, #4]
 8018b8e:	01db      	lsls	r3, r3, #7
 8018b90:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8018b92:	4413      	add	r3, r2
 8018b94:	62fb      	str	r3, [r7, #44]	@ 0x2c
    for (i = rowsperchunk; i > 0; i--) {
 8018b96:	6a3b      	ldr	r3, [r7, #32]
 8018b98:	3b01      	subs	r3, #1
 8018b9a:	623b      	str	r3, [r7, #32]
 8018b9c:	6a3b      	ldr	r3, [r7, #32]
 8018b9e:	2b00      	cmp	r3, #0
 8018ba0:	d1ec      	bne.n	8018b7c <alloc_barray+0x94>
  while (currow < numrows) {
 8018ba2:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8018ba4:	683b      	ldr	r3, [r7, #0]
 8018ba6:	429a      	cmp	r2, r3
 8018ba8:	d3d2      	bcc.n	8018b50 <alloc_barray+0x68>
    }
  }

  return result;
 8018baa:	697b      	ldr	r3, [r7, #20]
}
 8018bac:	4618      	mov	r0, r3
 8018bae:	3730      	adds	r7, #48	@ 0x30
 8018bb0:	46bd      	mov	sp, r7
 8018bb2:	bd80      	pop	{r7, pc}

08018bb4 <request_virt_sarray>:
METHODDEF(jvirt_sarray_ptr)
request_virt_sarray (j_common_ptr cinfo, int pool_id, boolean pre_zero,
		     JDIMENSION samplesperrow, JDIMENSION numrows,
		     JDIMENSION maxaccess)
/* Request a virtual 2-D sample array */
{
 8018bb4:	b580      	push	{r7, lr}
 8018bb6:	b086      	sub	sp, #24
 8018bb8:	af00      	add	r7, sp, #0
 8018bba:	60f8      	str	r0, [r7, #12]
 8018bbc:	60b9      	str	r1, [r7, #8]
 8018bbe:	607a      	str	r2, [r7, #4]
 8018bc0:	603b      	str	r3, [r7, #0]
  my_mem_ptr mem = (my_mem_ptr) cinfo->mem;
 8018bc2:	68fb      	ldr	r3, [r7, #12]
 8018bc4:	685b      	ldr	r3, [r3, #4]
 8018bc6:	617b      	str	r3, [r7, #20]
  jvirt_sarray_ptr result;

  /* Only IMAGE-lifetime virtual arrays are currently supported */
  if (pool_id != JPOOL_IMAGE)
 8018bc8:	68bb      	ldr	r3, [r7, #8]
 8018bca:	2b01      	cmp	r3, #1
 8018bcc:	d00c      	beq.n	8018be8 <request_virt_sarray+0x34>
    ERREXIT1(cinfo, JERR_BAD_POOL_ID, pool_id);	/* safety check */
 8018bce:	68fb      	ldr	r3, [r7, #12]
 8018bd0:	681b      	ldr	r3, [r3, #0]
 8018bd2:	220f      	movs	r2, #15
 8018bd4:	615a      	str	r2, [r3, #20]
 8018bd6:	68fb      	ldr	r3, [r7, #12]
 8018bd8:	681b      	ldr	r3, [r3, #0]
 8018bda:	68ba      	ldr	r2, [r7, #8]
 8018bdc:	619a      	str	r2, [r3, #24]
 8018bde:	68fb      	ldr	r3, [r7, #12]
 8018be0:	681b      	ldr	r3, [r3, #0]
 8018be2:	681b      	ldr	r3, [r3, #0]
 8018be4:	68f8      	ldr	r0, [r7, #12]
 8018be6:	4798      	blx	r3

  /* get control block */
  result = (jvirt_sarray_ptr) alloc_small(cinfo, pool_id,
 8018be8:	223c      	movs	r2, #60	@ 0x3c
 8018bea:	68b9      	ldr	r1, [r7, #8]
 8018bec:	68f8      	ldr	r0, [r7, #12]
 8018bee:	f7ff fdf5 	bl	80187dc <alloc_small>
 8018bf2:	6138      	str	r0, [r7, #16]
					  SIZEOF(struct jvirt_sarray_control));

  result->mem_buffer = NULL;	/* marks array not yet realized */
 8018bf4:	693b      	ldr	r3, [r7, #16]
 8018bf6:	2200      	movs	r2, #0
 8018bf8:	601a      	str	r2, [r3, #0]
  result->rows_in_array = numrows;
 8018bfa:	693b      	ldr	r3, [r7, #16]
 8018bfc:	6a3a      	ldr	r2, [r7, #32]
 8018bfe:	605a      	str	r2, [r3, #4]
  result->samplesperrow = samplesperrow;
 8018c00:	693b      	ldr	r3, [r7, #16]
 8018c02:	683a      	ldr	r2, [r7, #0]
 8018c04:	609a      	str	r2, [r3, #8]
  result->maxaccess = maxaccess;
 8018c06:	693b      	ldr	r3, [r7, #16]
 8018c08:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8018c0a:	60da      	str	r2, [r3, #12]
  result->pre_zero = pre_zero;
 8018c0c:	693b      	ldr	r3, [r7, #16]
 8018c0e:	687a      	ldr	r2, [r7, #4]
 8018c10:	621a      	str	r2, [r3, #32]
  result->b_s_open = FALSE;	/* no associated backing-store object */
 8018c12:	693b      	ldr	r3, [r7, #16]
 8018c14:	2200      	movs	r2, #0
 8018c16:	629a      	str	r2, [r3, #40]	@ 0x28
  result->next = mem->virt_sarray_list; /* add to list of virtual arrays */
 8018c18:	697b      	ldr	r3, [r7, #20]
 8018c1a:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8018c1c:	693b      	ldr	r3, [r7, #16]
 8018c1e:	62da      	str	r2, [r3, #44]	@ 0x2c
  mem->virt_sarray_list = result;
 8018c20:	697b      	ldr	r3, [r7, #20]
 8018c22:	693a      	ldr	r2, [r7, #16]
 8018c24:	645a      	str	r2, [r3, #68]	@ 0x44

  return result;
 8018c26:	693b      	ldr	r3, [r7, #16]
}
 8018c28:	4618      	mov	r0, r3
 8018c2a:	3718      	adds	r7, #24
 8018c2c:	46bd      	mov	sp, r7
 8018c2e:	bd80      	pop	{r7, pc}

08018c30 <request_virt_barray>:
METHODDEF(jvirt_barray_ptr)
request_virt_barray (j_common_ptr cinfo, int pool_id, boolean pre_zero,
		     JDIMENSION blocksperrow, JDIMENSION numrows,
		     JDIMENSION maxaccess)
/* Request a virtual 2-D coefficient-block array */
{
 8018c30:	b580      	push	{r7, lr}
 8018c32:	b086      	sub	sp, #24
 8018c34:	af00      	add	r7, sp, #0
 8018c36:	60f8      	str	r0, [r7, #12]
 8018c38:	60b9      	str	r1, [r7, #8]
 8018c3a:	607a      	str	r2, [r7, #4]
 8018c3c:	603b      	str	r3, [r7, #0]
  my_mem_ptr mem = (my_mem_ptr) cinfo->mem;
 8018c3e:	68fb      	ldr	r3, [r7, #12]
 8018c40:	685b      	ldr	r3, [r3, #4]
 8018c42:	617b      	str	r3, [r7, #20]
  jvirt_barray_ptr result;

  /* Only IMAGE-lifetime virtual arrays are currently supported */
  if (pool_id != JPOOL_IMAGE)
 8018c44:	68bb      	ldr	r3, [r7, #8]
 8018c46:	2b01      	cmp	r3, #1
 8018c48:	d00c      	beq.n	8018c64 <request_virt_barray+0x34>
    ERREXIT1(cinfo, JERR_BAD_POOL_ID, pool_id);	/* safety check */
 8018c4a:	68fb      	ldr	r3, [r7, #12]
 8018c4c:	681b      	ldr	r3, [r3, #0]
 8018c4e:	220f      	movs	r2, #15
 8018c50:	615a      	str	r2, [r3, #20]
 8018c52:	68fb      	ldr	r3, [r7, #12]
 8018c54:	681b      	ldr	r3, [r3, #0]
 8018c56:	68ba      	ldr	r2, [r7, #8]
 8018c58:	619a      	str	r2, [r3, #24]
 8018c5a:	68fb      	ldr	r3, [r7, #12]
 8018c5c:	681b      	ldr	r3, [r3, #0]
 8018c5e:	681b      	ldr	r3, [r3, #0]
 8018c60:	68f8      	ldr	r0, [r7, #12]
 8018c62:	4798      	blx	r3

  /* get control block */
  result = (jvirt_barray_ptr) alloc_small(cinfo, pool_id,
 8018c64:	223c      	movs	r2, #60	@ 0x3c
 8018c66:	68b9      	ldr	r1, [r7, #8]
 8018c68:	68f8      	ldr	r0, [r7, #12]
 8018c6a:	f7ff fdb7 	bl	80187dc <alloc_small>
 8018c6e:	6138      	str	r0, [r7, #16]
					  SIZEOF(struct jvirt_barray_control));

  result->mem_buffer = NULL;	/* marks array not yet realized */
 8018c70:	693b      	ldr	r3, [r7, #16]
 8018c72:	2200      	movs	r2, #0
 8018c74:	601a      	str	r2, [r3, #0]
  result->rows_in_array = numrows;
 8018c76:	693b      	ldr	r3, [r7, #16]
 8018c78:	6a3a      	ldr	r2, [r7, #32]
 8018c7a:	605a      	str	r2, [r3, #4]
  result->blocksperrow = blocksperrow;
 8018c7c:	693b      	ldr	r3, [r7, #16]
 8018c7e:	683a      	ldr	r2, [r7, #0]
 8018c80:	609a      	str	r2, [r3, #8]
  result->maxaccess = maxaccess;
 8018c82:	693b      	ldr	r3, [r7, #16]
 8018c84:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8018c86:	60da      	str	r2, [r3, #12]
  result->pre_zero = pre_zero;
 8018c88:	693b      	ldr	r3, [r7, #16]
 8018c8a:	687a      	ldr	r2, [r7, #4]
 8018c8c:	621a      	str	r2, [r3, #32]
  result->b_s_open = FALSE;	/* no associated backing-store object */
 8018c8e:	693b      	ldr	r3, [r7, #16]
 8018c90:	2200      	movs	r2, #0
 8018c92:	629a      	str	r2, [r3, #40]	@ 0x28
  result->next = mem->virt_barray_list; /* add to list of virtual arrays */
 8018c94:	697b      	ldr	r3, [r7, #20]
 8018c96:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 8018c98:	693b      	ldr	r3, [r7, #16]
 8018c9a:	62da      	str	r2, [r3, #44]	@ 0x2c
  mem->virt_barray_list = result;
 8018c9c:	697b      	ldr	r3, [r7, #20]
 8018c9e:	693a      	ldr	r2, [r7, #16]
 8018ca0:	649a      	str	r2, [r3, #72]	@ 0x48

  return result;
 8018ca2:	693b      	ldr	r3, [r7, #16]
}
 8018ca4:	4618      	mov	r0, r3
 8018ca6:	3718      	adds	r7, #24
 8018ca8:	46bd      	mov	sp, r7
 8018caa:	bd80      	pop	{r7, pc}

08018cac <realize_virt_arrays>:


METHODDEF(void)
realize_virt_arrays (j_common_ptr cinfo)
/* Allocate the in-memory buffers for any unrealized virtual arrays */
{
 8018cac:	b580      	push	{r7, lr}
 8018cae:	b08a      	sub	sp, #40	@ 0x28
 8018cb0:	af00      	add	r7, sp, #0
 8018cb2:	6078      	str	r0, [r7, #4]
  my_mem_ptr mem = (my_mem_ptr) cinfo->mem;
 8018cb4:	687b      	ldr	r3, [r7, #4]
 8018cb6:	685b      	ldr	r3, [r3, #4]
 8018cb8:	613b      	str	r3, [r7, #16]

  /* Compute the minimum space needed (maxaccess rows in each buffer)
   * and the maximum space needed (full image height in each buffer).
   * These may be of use to the system-dependent jpeg_mem_available routine.
   */
  space_per_minheight = 0;
 8018cba:	2300      	movs	r3, #0
 8018cbc:	627b      	str	r3, [r7, #36]	@ 0x24
  maximum_space = 0;
 8018cbe:	2300      	movs	r3, #0
 8018cc0:	623b      	str	r3, [r7, #32]
  for (sptr = mem->virt_sarray_list; sptr != NULL; sptr = sptr->next) {
 8018cc2:	693b      	ldr	r3, [r7, #16]
 8018cc4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8018cc6:	61bb      	str	r3, [r7, #24]
 8018cc8:	e01c      	b.n	8018d04 <realize_virt_arrays+0x58>
    if (sptr->mem_buffer == NULL) { /* if not realized yet */
 8018cca:	69bb      	ldr	r3, [r7, #24]
 8018ccc:	681b      	ldr	r3, [r3, #0]
 8018cce:	2b00      	cmp	r3, #0
 8018cd0:	d115      	bne.n	8018cfe <realize_virt_arrays+0x52>
      space_per_minheight += (long) sptr->maxaccess *
 8018cd2:	69bb      	ldr	r3, [r7, #24]
 8018cd4:	68db      	ldr	r3, [r3, #12]
 8018cd6:	461a      	mov	r2, r3
			     (long) sptr->samplesperrow * SIZEOF(JSAMPLE);
 8018cd8:	69bb      	ldr	r3, [r7, #24]
 8018cda:	689b      	ldr	r3, [r3, #8]
      space_per_minheight += (long) sptr->maxaccess *
 8018cdc:	fb02 f303 	mul.w	r3, r2, r3
			     (long) sptr->samplesperrow * SIZEOF(JSAMPLE);
 8018ce0:	461a      	mov	r2, r3
      space_per_minheight += (long) sptr->maxaccess *
 8018ce2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8018ce4:	4413      	add	r3, r2
 8018ce6:	627b      	str	r3, [r7, #36]	@ 0x24
      maximum_space += (long) sptr->rows_in_array *
 8018ce8:	69bb      	ldr	r3, [r7, #24]
 8018cea:	685b      	ldr	r3, [r3, #4]
 8018cec:	461a      	mov	r2, r3
		       (long) sptr->samplesperrow * SIZEOF(JSAMPLE);
 8018cee:	69bb      	ldr	r3, [r7, #24]
 8018cf0:	689b      	ldr	r3, [r3, #8]
      maximum_space += (long) sptr->rows_in_array *
 8018cf2:	fb02 f303 	mul.w	r3, r2, r3
		       (long) sptr->samplesperrow * SIZEOF(JSAMPLE);
 8018cf6:	461a      	mov	r2, r3
      maximum_space += (long) sptr->rows_in_array *
 8018cf8:	6a3b      	ldr	r3, [r7, #32]
 8018cfa:	4413      	add	r3, r2
 8018cfc:	623b      	str	r3, [r7, #32]
  for (sptr = mem->virt_sarray_list; sptr != NULL; sptr = sptr->next) {
 8018cfe:	69bb      	ldr	r3, [r7, #24]
 8018d00:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8018d02:	61bb      	str	r3, [r7, #24]
 8018d04:	69bb      	ldr	r3, [r7, #24]
 8018d06:	2b00      	cmp	r3, #0
 8018d08:	d1df      	bne.n	8018cca <realize_virt_arrays+0x1e>
    }
  }
  for (bptr = mem->virt_barray_list; bptr != NULL; bptr = bptr->next) {
 8018d0a:	693b      	ldr	r3, [r7, #16]
 8018d0c:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8018d0e:	617b      	str	r3, [r7, #20]
 8018d10:	e01c      	b.n	8018d4c <realize_virt_arrays+0xa0>
    if (bptr->mem_buffer == NULL) { /* if not realized yet */
 8018d12:	697b      	ldr	r3, [r7, #20]
 8018d14:	681b      	ldr	r3, [r3, #0]
 8018d16:	2b00      	cmp	r3, #0
 8018d18:	d115      	bne.n	8018d46 <realize_virt_arrays+0x9a>
      space_per_minheight += (long) bptr->maxaccess *
 8018d1a:	697b      	ldr	r3, [r7, #20]
 8018d1c:	68db      	ldr	r3, [r3, #12]
 8018d1e:	461a      	mov	r2, r3
			     (long) bptr->blocksperrow * SIZEOF(JBLOCK);
 8018d20:	697b      	ldr	r3, [r7, #20]
 8018d22:	689b      	ldr	r3, [r3, #8]
      space_per_minheight += (long) bptr->maxaccess *
 8018d24:	fb02 f303 	mul.w	r3, r2, r3
			     (long) bptr->blocksperrow * SIZEOF(JBLOCK);
 8018d28:	01da      	lsls	r2, r3, #7
      space_per_minheight += (long) bptr->maxaccess *
 8018d2a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8018d2c:	4413      	add	r3, r2
 8018d2e:	627b      	str	r3, [r7, #36]	@ 0x24
      maximum_space += (long) bptr->rows_in_array *
 8018d30:	697b      	ldr	r3, [r7, #20]
 8018d32:	685b      	ldr	r3, [r3, #4]
 8018d34:	461a      	mov	r2, r3
		       (long) bptr->blocksperrow * SIZEOF(JBLOCK);
 8018d36:	697b      	ldr	r3, [r7, #20]
 8018d38:	689b      	ldr	r3, [r3, #8]
      maximum_space += (long) bptr->rows_in_array *
 8018d3a:	fb02 f303 	mul.w	r3, r2, r3
		       (long) bptr->blocksperrow * SIZEOF(JBLOCK);
 8018d3e:	01da      	lsls	r2, r3, #7
      maximum_space += (long) bptr->rows_in_array *
 8018d40:	6a3b      	ldr	r3, [r7, #32]
 8018d42:	4413      	add	r3, r2
 8018d44:	623b      	str	r3, [r7, #32]
  for (bptr = mem->virt_barray_list; bptr != NULL; bptr = bptr->next) {
 8018d46:	697b      	ldr	r3, [r7, #20]
 8018d48:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8018d4a:	617b      	str	r3, [r7, #20]
 8018d4c:	697b      	ldr	r3, [r7, #20]
 8018d4e:	2b00      	cmp	r3, #0
 8018d50:	d1df      	bne.n	8018d12 <realize_virt_arrays+0x66>
    }
  }

  if (space_per_minheight <= 0)
 8018d52:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8018d54:	2b00      	cmp	r3, #0
 8018d56:	f340 80bd 	ble.w	8018ed4 <realize_virt_arrays+0x228>
    return;			/* no unrealized arrays, no work */

  /* Determine amount of memory to actually use; this is system-dependent. */
  avail_mem = jpeg_mem_available(cinfo, space_per_minheight, maximum_space,
 8018d5a:	693b      	ldr	r3, [r7, #16]
 8018d5c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8018d5e:	6a3a      	ldr	r2, [r7, #32]
 8018d60:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8018d62:	6878      	ldr	r0, [r7, #4]
 8018d64:	f000 fcdc 	bl	8019720 <jpeg_mem_available>
 8018d68:	60f8      	str	r0, [r7, #12]

  /* If the maximum space needed is available, make all the buffers full
   * height; otherwise parcel it out with the same number of minheights
   * in each buffer.
   */
  if (avail_mem >= maximum_space)
 8018d6a:	68fa      	ldr	r2, [r7, #12]
 8018d6c:	6a3b      	ldr	r3, [r7, #32]
 8018d6e:	429a      	cmp	r2, r3
 8018d70:	db02      	blt.n	8018d78 <realize_virt_arrays+0xcc>
    max_minheights = 1000000000L;
 8018d72:	4b5a      	ldr	r3, [pc, #360]	@ (8018edc <realize_virt_arrays+0x230>)
 8018d74:	61fb      	str	r3, [r7, #28]
 8018d76:	e009      	b.n	8018d8c <realize_virt_arrays+0xe0>
  else {
    max_minheights = avail_mem / space_per_minheight;
 8018d78:	68fa      	ldr	r2, [r7, #12]
 8018d7a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8018d7c:	fb92 f3f3 	sdiv	r3, r2, r3
 8018d80:	61fb      	str	r3, [r7, #28]
    /* If there doesn't seem to be enough space, try to get the minimum
     * anyway.  This allows a "stub" implementation of jpeg_mem_available().
     */
    if (max_minheights <= 0)
 8018d82:	69fb      	ldr	r3, [r7, #28]
 8018d84:	2b00      	cmp	r3, #0
 8018d86:	dc01      	bgt.n	8018d8c <realize_virt_arrays+0xe0>
      max_minheights = 1;
 8018d88:	2301      	movs	r3, #1
 8018d8a:	61fb      	str	r3, [r7, #28]
  }

  /* Allocate the in-memory buffers and initialize backing store as needed. */

  for (sptr = mem->virt_sarray_list; sptr != NULL; sptr = sptr->next) {
 8018d8c:	693b      	ldr	r3, [r7, #16]
 8018d8e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8018d90:	61bb      	str	r3, [r7, #24]
 8018d92:	e049      	b.n	8018e28 <realize_virt_arrays+0x17c>
    if (sptr->mem_buffer == NULL) { /* if not realized yet */
 8018d94:	69bb      	ldr	r3, [r7, #24]
 8018d96:	681b      	ldr	r3, [r3, #0]
 8018d98:	2b00      	cmp	r3, #0
 8018d9a:	d142      	bne.n	8018e22 <realize_virt_arrays+0x176>
      minheights = ((long) sptr->rows_in_array - 1L) / sptr->maxaccess + 1L;
 8018d9c:	69bb      	ldr	r3, [r7, #24]
 8018d9e:	685b      	ldr	r3, [r3, #4]
 8018da0:	3b01      	subs	r3, #1
 8018da2:	461a      	mov	r2, r3
 8018da4:	69bb      	ldr	r3, [r7, #24]
 8018da6:	68db      	ldr	r3, [r3, #12]
 8018da8:	fbb2 f3f3 	udiv	r3, r2, r3
 8018dac:	3301      	adds	r3, #1
 8018dae:	60bb      	str	r3, [r7, #8]
      if (minheights <= max_minheights) {
 8018db0:	68ba      	ldr	r2, [r7, #8]
 8018db2:	69fb      	ldr	r3, [r7, #28]
 8018db4:	429a      	cmp	r2, r3
 8018db6:	dc04      	bgt.n	8018dc2 <realize_virt_arrays+0x116>
	/* This buffer fits in memory */
	sptr->rows_in_mem = sptr->rows_in_array;
 8018db8:	69bb      	ldr	r3, [r7, #24]
 8018dba:	685a      	ldr	r2, [r3, #4]
 8018dbc:	69bb      	ldr	r3, [r7, #24]
 8018dbe:	611a      	str	r2, [r3, #16]
 8018dc0:	e017      	b.n	8018df2 <realize_virt_arrays+0x146>
      } else {
	/* It doesn't fit in memory, create backing store. */
	sptr->rows_in_mem = (JDIMENSION) (max_minheights * sptr->maxaccess);
 8018dc2:	69bb      	ldr	r3, [r7, #24]
 8018dc4:	68db      	ldr	r3, [r3, #12]
 8018dc6:	69fa      	ldr	r2, [r7, #28]
 8018dc8:	fb03 f202 	mul.w	r2, r3, r2
 8018dcc:	69bb      	ldr	r3, [r7, #24]
 8018dce:	611a      	str	r2, [r3, #16]
	jpeg_open_backing_store(cinfo, & sptr->b_s_info,
 8018dd0:	69bb      	ldr	r3, [r7, #24]
 8018dd2:	f103 0130 	add.w	r1, r3, #48	@ 0x30
				(long) sptr->rows_in_array *
 8018dd6:	69bb      	ldr	r3, [r7, #24]
 8018dd8:	685b      	ldr	r3, [r3, #4]
 8018dda:	461a      	mov	r2, r3
				(long) sptr->samplesperrow *
 8018ddc:	69bb      	ldr	r3, [r7, #24]
 8018dde:	689b      	ldr	r3, [r3, #8]
	jpeg_open_backing_store(cinfo, & sptr->b_s_info,
 8018de0:	fb02 f303 	mul.w	r3, r2, r3
 8018de4:	461a      	mov	r2, r3
 8018de6:	6878      	ldr	r0, [r7, #4]
 8018de8:	f000 fca8 	bl	801973c <jpeg_open_backing_store>
				(long) SIZEOF(JSAMPLE));
	sptr->b_s_open = TRUE;
 8018dec:	69bb      	ldr	r3, [r7, #24]
 8018dee:	2201      	movs	r2, #1
 8018df0:	629a      	str	r2, [r3, #40]	@ 0x28
      }
      sptr->mem_buffer = alloc_sarray(cinfo, JPOOL_IMAGE,
 8018df2:	69bb      	ldr	r3, [r7, #24]
 8018df4:	689a      	ldr	r2, [r3, #8]
 8018df6:	69bb      	ldr	r3, [r7, #24]
 8018df8:	691b      	ldr	r3, [r3, #16]
 8018dfa:	2101      	movs	r1, #1
 8018dfc:	6878      	ldr	r0, [r7, #4]
 8018dfe:	f7ff fe10 	bl	8018a22 <alloc_sarray>
 8018e02:	4602      	mov	r2, r0
 8018e04:	69bb      	ldr	r3, [r7, #24]
 8018e06:	601a      	str	r2, [r3, #0]
				      sptr->samplesperrow, sptr->rows_in_mem);
      sptr->rowsperchunk = mem->last_rowsperchunk;
 8018e08:	693b      	ldr	r3, [r7, #16]
 8018e0a:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8018e0c:	69bb      	ldr	r3, [r7, #24]
 8018e0e:	615a      	str	r2, [r3, #20]
      sptr->cur_start_row = 0;
 8018e10:	69bb      	ldr	r3, [r7, #24]
 8018e12:	2200      	movs	r2, #0
 8018e14:	619a      	str	r2, [r3, #24]
      sptr->first_undef_row = 0;
 8018e16:	69bb      	ldr	r3, [r7, #24]
 8018e18:	2200      	movs	r2, #0
 8018e1a:	61da      	str	r2, [r3, #28]
      sptr->dirty = FALSE;
 8018e1c:	69bb      	ldr	r3, [r7, #24]
 8018e1e:	2200      	movs	r2, #0
 8018e20:	625a      	str	r2, [r3, #36]	@ 0x24
  for (sptr = mem->virt_sarray_list; sptr != NULL; sptr = sptr->next) {
 8018e22:	69bb      	ldr	r3, [r7, #24]
 8018e24:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8018e26:	61bb      	str	r3, [r7, #24]
 8018e28:	69bb      	ldr	r3, [r7, #24]
 8018e2a:	2b00      	cmp	r3, #0
 8018e2c:	d1b2      	bne.n	8018d94 <realize_virt_arrays+0xe8>
    }
  }

  for (bptr = mem->virt_barray_list; bptr != NULL; bptr = bptr->next) {
 8018e2e:	693b      	ldr	r3, [r7, #16]
 8018e30:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8018e32:	617b      	str	r3, [r7, #20]
 8018e34:	e04a      	b.n	8018ecc <realize_virt_arrays+0x220>
    if (bptr->mem_buffer == NULL) { /* if not realized yet */
 8018e36:	697b      	ldr	r3, [r7, #20]
 8018e38:	681b      	ldr	r3, [r3, #0]
 8018e3a:	2b00      	cmp	r3, #0
 8018e3c:	d143      	bne.n	8018ec6 <realize_virt_arrays+0x21a>
      minheights = ((long) bptr->rows_in_array - 1L) / bptr->maxaccess + 1L;
 8018e3e:	697b      	ldr	r3, [r7, #20]
 8018e40:	685b      	ldr	r3, [r3, #4]
 8018e42:	3b01      	subs	r3, #1
 8018e44:	461a      	mov	r2, r3
 8018e46:	697b      	ldr	r3, [r7, #20]
 8018e48:	68db      	ldr	r3, [r3, #12]
 8018e4a:	fbb2 f3f3 	udiv	r3, r2, r3
 8018e4e:	3301      	adds	r3, #1
 8018e50:	60bb      	str	r3, [r7, #8]
      if (minheights <= max_minheights) {
 8018e52:	68ba      	ldr	r2, [r7, #8]
 8018e54:	69fb      	ldr	r3, [r7, #28]
 8018e56:	429a      	cmp	r2, r3
 8018e58:	dc04      	bgt.n	8018e64 <realize_virt_arrays+0x1b8>
	/* This buffer fits in memory */
	bptr->rows_in_mem = bptr->rows_in_array;
 8018e5a:	697b      	ldr	r3, [r7, #20]
 8018e5c:	685a      	ldr	r2, [r3, #4]
 8018e5e:	697b      	ldr	r3, [r7, #20]
 8018e60:	611a      	str	r2, [r3, #16]
 8018e62:	e018      	b.n	8018e96 <realize_virt_arrays+0x1ea>
      } else {
	/* It doesn't fit in memory, create backing store. */
	bptr->rows_in_mem = (JDIMENSION) (max_minheights * bptr->maxaccess);
 8018e64:	697b      	ldr	r3, [r7, #20]
 8018e66:	68db      	ldr	r3, [r3, #12]
 8018e68:	69fa      	ldr	r2, [r7, #28]
 8018e6a:	fb03 f202 	mul.w	r2, r3, r2
 8018e6e:	697b      	ldr	r3, [r7, #20]
 8018e70:	611a      	str	r2, [r3, #16]
	jpeg_open_backing_store(cinfo, & bptr->b_s_info,
 8018e72:	697b      	ldr	r3, [r7, #20]
 8018e74:	f103 0130 	add.w	r1, r3, #48	@ 0x30
				(long) bptr->rows_in_array *
 8018e78:	697b      	ldr	r3, [r7, #20]
 8018e7a:	685b      	ldr	r3, [r3, #4]
 8018e7c:	461a      	mov	r2, r3
				(long) bptr->blocksperrow *
 8018e7e:	697b      	ldr	r3, [r7, #20]
 8018e80:	689b      	ldr	r3, [r3, #8]
				(long) bptr->rows_in_array *
 8018e82:	fb02 f303 	mul.w	r3, r2, r3
	jpeg_open_backing_store(cinfo, & bptr->b_s_info,
 8018e86:	01db      	lsls	r3, r3, #7
 8018e88:	461a      	mov	r2, r3
 8018e8a:	6878      	ldr	r0, [r7, #4]
 8018e8c:	f000 fc56 	bl	801973c <jpeg_open_backing_store>
				(long) SIZEOF(JBLOCK));
	bptr->b_s_open = TRUE;
 8018e90:	697b      	ldr	r3, [r7, #20]
 8018e92:	2201      	movs	r2, #1
 8018e94:	629a      	str	r2, [r3, #40]	@ 0x28
      }
      bptr->mem_buffer = alloc_barray(cinfo, JPOOL_IMAGE,
 8018e96:	697b      	ldr	r3, [r7, #20]
 8018e98:	689a      	ldr	r2, [r3, #8]
 8018e9a:	697b      	ldr	r3, [r7, #20]
 8018e9c:	691b      	ldr	r3, [r3, #16]
 8018e9e:	2101      	movs	r1, #1
 8018ea0:	6878      	ldr	r0, [r7, #4]
 8018ea2:	f7ff fe21 	bl	8018ae8 <alloc_barray>
 8018ea6:	4602      	mov	r2, r0
 8018ea8:	697b      	ldr	r3, [r7, #20]
 8018eaa:	601a      	str	r2, [r3, #0]
				      bptr->blocksperrow, bptr->rows_in_mem);
      bptr->rowsperchunk = mem->last_rowsperchunk;
 8018eac:	693b      	ldr	r3, [r7, #16]
 8018eae:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8018eb0:	697b      	ldr	r3, [r7, #20]
 8018eb2:	615a      	str	r2, [r3, #20]
      bptr->cur_start_row = 0;
 8018eb4:	697b      	ldr	r3, [r7, #20]
 8018eb6:	2200      	movs	r2, #0
 8018eb8:	619a      	str	r2, [r3, #24]
      bptr->first_undef_row = 0;
 8018eba:	697b      	ldr	r3, [r7, #20]
 8018ebc:	2200      	movs	r2, #0
 8018ebe:	61da      	str	r2, [r3, #28]
      bptr->dirty = FALSE;
 8018ec0:	697b      	ldr	r3, [r7, #20]
 8018ec2:	2200      	movs	r2, #0
 8018ec4:	625a      	str	r2, [r3, #36]	@ 0x24
  for (bptr = mem->virt_barray_list; bptr != NULL; bptr = bptr->next) {
 8018ec6:	697b      	ldr	r3, [r7, #20]
 8018ec8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8018eca:	617b      	str	r3, [r7, #20]
 8018ecc:	697b      	ldr	r3, [r7, #20]
 8018ece:	2b00      	cmp	r3, #0
 8018ed0:	d1b1      	bne.n	8018e36 <realize_virt_arrays+0x18a>
 8018ed2:	e000      	b.n	8018ed6 <realize_virt_arrays+0x22a>
    return;			/* no unrealized arrays, no work */
 8018ed4:	bf00      	nop
    }
  }
}
 8018ed6:	3728      	adds	r7, #40	@ 0x28
 8018ed8:	46bd      	mov	sp, r7
 8018eda:	bd80      	pop	{r7, pc}
 8018edc:	3b9aca00 	.word	0x3b9aca00

08018ee0 <do_sarray_io>:


LOCAL(void)
do_sarray_io (j_common_ptr cinfo, jvirt_sarray_ptr ptr, boolean writing)
/* Do backing store read or write of a virtual sample array */
{
 8018ee0:	b590      	push	{r4, r7, lr}
 8018ee2:	b08d      	sub	sp, #52	@ 0x34
 8018ee4:	af02      	add	r7, sp, #8
 8018ee6:	60f8      	str	r0, [r7, #12]
 8018ee8:	60b9      	str	r1, [r7, #8]
 8018eea:	607a      	str	r2, [r7, #4]
  long bytesperrow, file_offset, byte_count, rows, thisrow, i;

  bytesperrow = (long) ptr->samplesperrow * SIZEOF(JSAMPLE);
 8018eec:	68bb      	ldr	r3, [r7, #8]
 8018eee:	689b      	ldr	r3, [r3, #8]
 8018ef0:	61fb      	str	r3, [r7, #28]
  file_offset = ptr->cur_start_row * bytesperrow;
 8018ef2:	68bb      	ldr	r3, [r7, #8]
 8018ef4:	699b      	ldr	r3, [r3, #24]
 8018ef6:	69fa      	ldr	r2, [r7, #28]
 8018ef8:	fb02 f303 	mul.w	r3, r2, r3
 8018efc:	627b      	str	r3, [r7, #36]	@ 0x24
  /* Loop to read or write each allocation chunk in mem_buffer */
  for (i = 0; i < (long) ptr->rows_in_mem; i += ptr->rowsperchunk) {
 8018efe:	2300      	movs	r3, #0
 8018f00:	623b      	str	r3, [r7, #32]
 8018f02:	e059      	b.n	8018fb8 <do_sarray_io+0xd8>
    /* One chunk, but check for short chunk at end of buffer */
    rows = MIN((long) ptr->rowsperchunk, (long) ptr->rows_in_mem - i);
 8018f04:	68bb      	ldr	r3, [r7, #8]
 8018f06:	691b      	ldr	r3, [r3, #16]
 8018f08:	461a      	mov	r2, r3
 8018f0a:	6a3b      	ldr	r3, [r7, #32]
 8018f0c:	1ad3      	subs	r3, r2, r3
 8018f0e:	68ba      	ldr	r2, [r7, #8]
 8018f10:	6952      	ldr	r2, [r2, #20]
 8018f12:	4293      	cmp	r3, r2
 8018f14:	bfa8      	it	ge
 8018f16:	4613      	movge	r3, r2
 8018f18:	61bb      	str	r3, [r7, #24]
    /* Transfer no more than is currently defined */
    thisrow = (long) ptr->cur_start_row + i;
 8018f1a:	68bb      	ldr	r3, [r7, #8]
 8018f1c:	699b      	ldr	r3, [r3, #24]
 8018f1e:	461a      	mov	r2, r3
 8018f20:	6a3b      	ldr	r3, [r7, #32]
 8018f22:	4413      	add	r3, r2
 8018f24:	617b      	str	r3, [r7, #20]
    rows = MIN(rows, (long) ptr->first_undef_row - thisrow);
 8018f26:	68bb      	ldr	r3, [r7, #8]
 8018f28:	69db      	ldr	r3, [r3, #28]
 8018f2a:	461a      	mov	r2, r3
 8018f2c:	697b      	ldr	r3, [r7, #20]
 8018f2e:	1ad3      	subs	r3, r2, r3
 8018f30:	69ba      	ldr	r2, [r7, #24]
 8018f32:	4293      	cmp	r3, r2
 8018f34:	bfa8      	it	ge
 8018f36:	4613      	movge	r3, r2
 8018f38:	61bb      	str	r3, [r7, #24]
    /* Transfer no more than fits in file */
    rows = MIN(rows, (long) ptr->rows_in_array - thisrow);
 8018f3a:	68bb      	ldr	r3, [r7, #8]
 8018f3c:	685b      	ldr	r3, [r3, #4]
 8018f3e:	461a      	mov	r2, r3
 8018f40:	697b      	ldr	r3, [r7, #20]
 8018f42:	1ad3      	subs	r3, r2, r3
 8018f44:	69ba      	ldr	r2, [r7, #24]
 8018f46:	4293      	cmp	r3, r2
 8018f48:	bfa8      	it	ge
 8018f4a:	4613      	movge	r3, r2
 8018f4c:	61bb      	str	r3, [r7, #24]
    if (rows <= 0)		/* this chunk might be past end of file! */
 8018f4e:	69bb      	ldr	r3, [r7, #24]
 8018f50:	2b00      	cmp	r3, #0
 8018f52:	dd38      	ble.n	8018fc6 <do_sarray_io+0xe6>
      break;
    byte_count = rows * bytesperrow;
 8018f54:	69bb      	ldr	r3, [r7, #24]
 8018f56:	69fa      	ldr	r2, [r7, #28]
 8018f58:	fb02 f303 	mul.w	r3, r2, r3
 8018f5c:	613b      	str	r3, [r7, #16]
    if (writing)
 8018f5e:	687b      	ldr	r3, [r7, #4]
 8018f60:	2b00      	cmp	r3, #0
 8018f62:	d010      	beq.n	8018f86 <do_sarray_io+0xa6>
      (*ptr->b_s_info.write_backing_store) (cinfo, & ptr->b_s_info,
 8018f64:	68bb      	ldr	r3, [r7, #8]
 8018f66:	6b5c      	ldr	r4, [r3, #52]	@ 0x34
 8018f68:	68bb      	ldr	r3, [r7, #8]
 8018f6a:	f103 0130 	add.w	r1, r3, #48	@ 0x30
					    (void FAR *) ptr->mem_buffer[i],
 8018f6e:	68bb      	ldr	r3, [r7, #8]
 8018f70:	681a      	ldr	r2, [r3, #0]
 8018f72:	6a3b      	ldr	r3, [r7, #32]
 8018f74:	009b      	lsls	r3, r3, #2
 8018f76:	4413      	add	r3, r2
      (*ptr->b_s_info.write_backing_store) (cinfo, & ptr->b_s_info,
 8018f78:	681a      	ldr	r2, [r3, #0]
 8018f7a:	693b      	ldr	r3, [r7, #16]
 8018f7c:	9300      	str	r3, [sp, #0]
 8018f7e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8018f80:	68f8      	ldr	r0, [r7, #12]
 8018f82:	47a0      	blx	r4
 8018f84:	e00f      	b.n	8018fa6 <do_sarray_io+0xc6>
					    file_offset, byte_count);
    else
      (*ptr->b_s_info.read_backing_store) (cinfo, & ptr->b_s_info,
 8018f86:	68bb      	ldr	r3, [r7, #8]
 8018f88:	6b1c      	ldr	r4, [r3, #48]	@ 0x30
 8018f8a:	68bb      	ldr	r3, [r7, #8]
 8018f8c:	f103 0130 	add.w	r1, r3, #48	@ 0x30
					   (void FAR *) ptr->mem_buffer[i],
 8018f90:	68bb      	ldr	r3, [r7, #8]
 8018f92:	681a      	ldr	r2, [r3, #0]
 8018f94:	6a3b      	ldr	r3, [r7, #32]
 8018f96:	009b      	lsls	r3, r3, #2
 8018f98:	4413      	add	r3, r2
      (*ptr->b_s_info.read_backing_store) (cinfo, & ptr->b_s_info,
 8018f9a:	681a      	ldr	r2, [r3, #0]
 8018f9c:	693b      	ldr	r3, [r7, #16]
 8018f9e:	9300      	str	r3, [sp, #0]
 8018fa0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8018fa2:	68f8      	ldr	r0, [r7, #12]
 8018fa4:	47a0      	blx	r4
					   file_offset, byte_count);
    file_offset += byte_count;
 8018fa6:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8018fa8:	693b      	ldr	r3, [r7, #16]
 8018faa:	4413      	add	r3, r2
 8018fac:	627b      	str	r3, [r7, #36]	@ 0x24
  for (i = 0; i < (long) ptr->rows_in_mem; i += ptr->rowsperchunk) {
 8018fae:	68bb      	ldr	r3, [r7, #8]
 8018fb0:	695a      	ldr	r2, [r3, #20]
 8018fb2:	6a3b      	ldr	r3, [r7, #32]
 8018fb4:	4413      	add	r3, r2
 8018fb6:	623b      	str	r3, [r7, #32]
 8018fb8:	68bb      	ldr	r3, [r7, #8]
 8018fba:	691b      	ldr	r3, [r3, #16]
 8018fbc:	461a      	mov	r2, r3
 8018fbe:	6a3b      	ldr	r3, [r7, #32]
 8018fc0:	4293      	cmp	r3, r2
 8018fc2:	db9f      	blt.n	8018f04 <do_sarray_io+0x24>
  }
}
 8018fc4:	e000      	b.n	8018fc8 <do_sarray_io+0xe8>
      break;
 8018fc6:	bf00      	nop
}
 8018fc8:	bf00      	nop
 8018fca:	372c      	adds	r7, #44	@ 0x2c
 8018fcc:	46bd      	mov	sp, r7
 8018fce:	bd90      	pop	{r4, r7, pc}

08018fd0 <do_barray_io>:


LOCAL(void)
do_barray_io (j_common_ptr cinfo, jvirt_barray_ptr ptr, boolean writing)
/* Do backing store read or write of a virtual coefficient-block array */
{
 8018fd0:	b590      	push	{r4, r7, lr}
 8018fd2:	b08d      	sub	sp, #52	@ 0x34
 8018fd4:	af02      	add	r7, sp, #8
 8018fd6:	60f8      	str	r0, [r7, #12]
 8018fd8:	60b9      	str	r1, [r7, #8]
 8018fda:	607a      	str	r2, [r7, #4]
  long bytesperrow, file_offset, byte_count, rows, thisrow, i;

  bytesperrow = (long) ptr->blocksperrow * SIZEOF(JBLOCK);
 8018fdc:	68bb      	ldr	r3, [r7, #8]
 8018fde:	689b      	ldr	r3, [r3, #8]
 8018fe0:	01db      	lsls	r3, r3, #7
 8018fe2:	61fb      	str	r3, [r7, #28]
  file_offset = ptr->cur_start_row * bytesperrow;
 8018fe4:	68bb      	ldr	r3, [r7, #8]
 8018fe6:	699b      	ldr	r3, [r3, #24]
 8018fe8:	69fa      	ldr	r2, [r7, #28]
 8018fea:	fb02 f303 	mul.w	r3, r2, r3
 8018fee:	627b      	str	r3, [r7, #36]	@ 0x24
  /* Loop to read or write each allocation chunk in mem_buffer */
  for (i = 0; i < (long) ptr->rows_in_mem; i += ptr->rowsperchunk) {
 8018ff0:	2300      	movs	r3, #0
 8018ff2:	623b      	str	r3, [r7, #32]
 8018ff4:	e059      	b.n	80190aa <do_barray_io+0xda>
    /* One chunk, but check for short chunk at end of buffer */
    rows = MIN((long) ptr->rowsperchunk, (long) ptr->rows_in_mem - i);
 8018ff6:	68bb      	ldr	r3, [r7, #8]
 8018ff8:	691b      	ldr	r3, [r3, #16]
 8018ffa:	461a      	mov	r2, r3
 8018ffc:	6a3b      	ldr	r3, [r7, #32]
 8018ffe:	1ad3      	subs	r3, r2, r3
 8019000:	68ba      	ldr	r2, [r7, #8]
 8019002:	6952      	ldr	r2, [r2, #20]
 8019004:	4293      	cmp	r3, r2
 8019006:	bfa8      	it	ge
 8019008:	4613      	movge	r3, r2
 801900a:	61bb      	str	r3, [r7, #24]
    /* Transfer no more than is currently defined */
    thisrow = (long) ptr->cur_start_row + i;
 801900c:	68bb      	ldr	r3, [r7, #8]
 801900e:	699b      	ldr	r3, [r3, #24]
 8019010:	461a      	mov	r2, r3
 8019012:	6a3b      	ldr	r3, [r7, #32]
 8019014:	4413      	add	r3, r2
 8019016:	617b      	str	r3, [r7, #20]
    rows = MIN(rows, (long) ptr->first_undef_row - thisrow);
 8019018:	68bb      	ldr	r3, [r7, #8]
 801901a:	69db      	ldr	r3, [r3, #28]
 801901c:	461a      	mov	r2, r3
 801901e:	697b      	ldr	r3, [r7, #20]
 8019020:	1ad3      	subs	r3, r2, r3
 8019022:	69ba      	ldr	r2, [r7, #24]
 8019024:	4293      	cmp	r3, r2
 8019026:	bfa8      	it	ge
 8019028:	4613      	movge	r3, r2
 801902a:	61bb      	str	r3, [r7, #24]
    /* Transfer no more than fits in file */
    rows = MIN(rows, (long) ptr->rows_in_array - thisrow);
 801902c:	68bb      	ldr	r3, [r7, #8]
 801902e:	685b      	ldr	r3, [r3, #4]
 8019030:	461a      	mov	r2, r3
 8019032:	697b      	ldr	r3, [r7, #20]
 8019034:	1ad3      	subs	r3, r2, r3
 8019036:	69ba      	ldr	r2, [r7, #24]
 8019038:	4293      	cmp	r3, r2
 801903a:	bfa8      	it	ge
 801903c:	4613      	movge	r3, r2
 801903e:	61bb      	str	r3, [r7, #24]
    if (rows <= 0)		/* this chunk might be past end of file! */
 8019040:	69bb      	ldr	r3, [r7, #24]
 8019042:	2b00      	cmp	r3, #0
 8019044:	dd38      	ble.n	80190b8 <do_barray_io+0xe8>
      break;
    byte_count = rows * bytesperrow;
 8019046:	69bb      	ldr	r3, [r7, #24]
 8019048:	69fa      	ldr	r2, [r7, #28]
 801904a:	fb02 f303 	mul.w	r3, r2, r3
 801904e:	613b      	str	r3, [r7, #16]
    if (writing)
 8019050:	687b      	ldr	r3, [r7, #4]
 8019052:	2b00      	cmp	r3, #0
 8019054:	d010      	beq.n	8019078 <do_barray_io+0xa8>
      (*ptr->b_s_info.write_backing_store) (cinfo, & ptr->b_s_info,
 8019056:	68bb      	ldr	r3, [r7, #8]
 8019058:	6b5c      	ldr	r4, [r3, #52]	@ 0x34
 801905a:	68bb      	ldr	r3, [r7, #8]
 801905c:	f103 0130 	add.w	r1, r3, #48	@ 0x30
					    (void FAR *) ptr->mem_buffer[i],
 8019060:	68bb      	ldr	r3, [r7, #8]
 8019062:	681a      	ldr	r2, [r3, #0]
 8019064:	6a3b      	ldr	r3, [r7, #32]
 8019066:	009b      	lsls	r3, r3, #2
 8019068:	4413      	add	r3, r2
      (*ptr->b_s_info.write_backing_store) (cinfo, & ptr->b_s_info,
 801906a:	681a      	ldr	r2, [r3, #0]
 801906c:	693b      	ldr	r3, [r7, #16]
 801906e:	9300      	str	r3, [sp, #0]
 8019070:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8019072:	68f8      	ldr	r0, [r7, #12]
 8019074:	47a0      	blx	r4
 8019076:	e00f      	b.n	8019098 <do_barray_io+0xc8>
					    file_offset, byte_count);
    else
      (*ptr->b_s_info.read_backing_store) (cinfo, & ptr->b_s_info,
 8019078:	68bb      	ldr	r3, [r7, #8]
 801907a:	6b1c      	ldr	r4, [r3, #48]	@ 0x30
 801907c:	68bb      	ldr	r3, [r7, #8]
 801907e:	f103 0130 	add.w	r1, r3, #48	@ 0x30
					   (void FAR *) ptr->mem_buffer[i],
 8019082:	68bb      	ldr	r3, [r7, #8]
 8019084:	681a      	ldr	r2, [r3, #0]
 8019086:	6a3b      	ldr	r3, [r7, #32]
 8019088:	009b      	lsls	r3, r3, #2
 801908a:	4413      	add	r3, r2
      (*ptr->b_s_info.read_backing_store) (cinfo, & ptr->b_s_info,
 801908c:	681a      	ldr	r2, [r3, #0]
 801908e:	693b      	ldr	r3, [r7, #16]
 8019090:	9300      	str	r3, [sp, #0]
 8019092:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8019094:	68f8      	ldr	r0, [r7, #12]
 8019096:	47a0      	blx	r4
					   file_offset, byte_count);
    file_offset += byte_count;
 8019098:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 801909a:	693b      	ldr	r3, [r7, #16]
 801909c:	4413      	add	r3, r2
 801909e:	627b      	str	r3, [r7, #36]	@ 0x24
  for (i = 0; i < (long) ptr->rows_in_mem; i += ptr->rowsperchunk) {
 80190a0:	68bb      	ldr	r3, [r7, #8]
 80190a2:	695a      	ldr	r2, [r3, #20]
 80190a4:	6a3b      	ldr	r3, [r7, #32]
 80190a6:	4413      	add	r3, r2
 80190a8:	623b      	str	r3, [r7, #32]
 80190aa:	68bb      	ldr	r3, [r7, #8]
 80190ac:	691b      	ldr	r3, [r3, #16]
 80190ae:	461a      	mov	r2, r3
 80190b0:	6a3b      	ldr	r3, [r7, #32]
 80190b2:	4293      	cmp	r3, r2
 80190b4:	db9f      	blt.n	8018ff6 <do_barray_io+0x26>
  }
}
 80190b6:	e000      	b.n	80190ba <do_barray_io+0xea>
      break;
 80190b8:	bf00      	nop
}
 80190ba:	bf00      	nop
 80190bc:	372c      	adds	r7, #44	@ 0x2c
 80190be:	46bd      	mov	sp, r7
 80190c0:	bd90      	pop	{r4, r7, pc}

080190c2 <access_virt_sarray>:
		    JDIMENSION start_row, JDIMENSION num_rows,
		    boolean writable)
/* Access the part of a virtual sample array starting at start_row */
/* and extending for num_rows rows.  writable is true if  */
/* caller intends to modify the accessed area. */
{
 80190c2:	b580      	push	{r7, lr}
 80190c4:	b088      	sub	sp, #32
 80190c6:	af00      	add	r7, sp, #0
 80190c8:	60f8      	str	r0, [r7, #12]
 80190ca:	60b9      	str	r1, [r7, #8]
 80190cc:	607a      	str	r2, [r7, #4]
 80190ce:	603b      	str	r3, [r7, #0]
  JDIMENSION end_row = start_row + num_rows;
 80190d0:	687a      	ldr	r2, [r7, #4]
 80190d2:	683b      	ldr	r3, [r7, #0]
 80190d4:	4413      	add	r3, r2
 80190d6:	617b      	str	r3, [r7, #20]
  JDIMENSION undef_row;

  /* debugging check */
  if (end_row > ptr->rows_in_array || num_rows > ptr->maxaccess ||
 80190d8:	68bb      	ldr	r3, [r7, #8]
 80190da:	685b      	ldr	r3, [r3, #4]
 80190dc:	697a      	ldr	r2, [r7, #20]
 80190de:	429a      	cmp	r2, r3
 80190e0:	d808      	bhi.n	80190f4 <access_virt_sarray+0x32>
 80190e2:	68bb      	ldr	r3, [r7, #8]
 80190e4:	68db      	ldr	r3, [r3, #12]
 80190e6:	683a      	ldr	r2, [r7, #0]
 80190e8:	429a      	cmp	r2, r3
 80190ea:	d803      	bhi.n	80190f4 <access_virt_sarray+0x32>
      ptr->mem_buffer == NULL)
 80190ec:	68bb      	ldr	r3, [r7, #8]
 80190ee:	681b      	ldr	r3, [r3, #0]
  if (end_row > ptr->rows_in_array || num_rows > ptr->maxaccess ||
 80190f0:	2b00      	cmp	r3, #0
 80190f2:	d108      	bne.n	8019106 <access_virt_sarray+0x44>
    ERREXIT(cinfo, JERR_BAD_VIRTUAL_ACCESS);
 80190f4:	68fb      	ldr	r3, [r7, #12]
 80190f6:	681b      	ldr	r3, [r3, #0]
 80190f8:	2217      	movs	r2, #23
 80190fa:	615a      	str	r2, [r3, #20]
 80190fc:	68fb      	ldr	r3, [r7, #12]
 80190fe:	681b      	ldr	r3, [r3, #0]
 8019100:	681b      	ldr	r3, [r3, #0]
 8019102:	68f8      	ldr	r0, [r7, #12]
 8019104:	4798      	blx	r3

  /* Make the desired part of the virtual array accessible */
  if (start_row < ptr->cur_start_row ||
 8019106:	68bb      	ldr	r3, [r7, #8]
 8019108:	699b      	ldr	r3, [r3, #24]
 801910a:	687a      	ldr	r2, [r7, #4]
 801910c:	429a      	cmp	r2, r3
 801910e:	d307      	bcc.n	8019120 <access_virt_sarray+0x5e>
      end_row > ptr->cur_start_row+ptr->rows_in_mem) {
 8019110:	68bb      	ldr	r3, [r7, #8]
 8019112:	699a      	ldr	r2, [r3, #24]
 8019114:	68bb      	ldr	r3, [r7, #8]
 8019116:	691b      	ldr	r3, [r3, #16]
 8019118:	4413      	add	r3, r2
  if (start_row < ptr->cur_start_row ||
 801911a:	697a      	ldr	r2, [r7, #20]
 801911c:	429a      	cmp	r2, r3
 801911e:	d933      	bls.n	8019188 <access_virt_sarray+0xc6>
    if (! ptr->b_s_open)
 8019120:	68bb      	ldr	r3, [r7, #8]
 8019122:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8019124:	2b00      	cmp	r3, #0
 8019126:	d108      	bne.n	801913a <access_virt_sarray+0x78>
      ERREXIT(cinfo, JERR_VIRTUAL_BUG);
 8019128:	68fb      	ldr	r3, [r7, #12]
 801912a:	681b      	ldr	r3, [r3, #0]
 801912c:	2247      	movs	r2, #71	@ 0x47
 801912e:	615a      	str	r2, [r3, #20]
 8019130:	68fb      	ldr	r3, [r7, #12]
 8019132:	681b      	ldr	r3, [r3, #0]
 8019134:	681b      	ldr	r3, [r3, #0]
 8019136:	68f8      	ldr	r0, [r7, #12]
 8019138:	4798      	blx	r3
    /* Flush old buffer contents if necessary */
    if (ptr->dirty) {
 801913a:	68bb      	ldr	r3, [r7, #8]
 801913c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 801913e:	2b00      	cmp	r3, #0
 8019140:	d007      	beq.n	8019152 <access_virt_sarray+0x90>
      do_sarray_io(cinfo, ptr, TRUE);
 8019142:	2201      	movs	r2, #1
 8019144:	68b9      	ldr	r1, [r7, #8]
 8019146:	68f8      	ldr	r0, [r7, #12]
 8019148:	f7ff feca 	bl	8018ee0 <do_sarray_io>
      ptr->dirty = FALSE;
 801914c:	68bb      	ldr	r3, [r7, #8]
 801914e:	2200      	movs	r2, #0
 8019150:	625a      	str	r2, [r3, #36]	@ 0x24
     * load starting at target address.  If target address < current window,
     * assume backward scan, load so that target area is top of window.
     * Note that when switching from forward write to forward read, will have
     * start_row = 0, so the limiting case applies and we load from 0 anyway.
     */
    if (start_row > ptr->cur_start_row) {
 8019152:	68bb      	ldr	r3, [r7, #8]
 8019154:	699b      	ldr	r3, [r3, #24]
 8019156:	687a      	ldr	r2, [r7, #4]
 8019158:	429a      	cmp	r2, r3
 801915a:	d903      	bls.n	8019164 <access_virt_sarray+0xa2>
      ptr->cur_start_row = start_row;
 801915c:	68bb      	ldr	r3, [r7, #8]
 801915e:	687a      	ldr	r2, [r7, #4]
 8019160:	619a      	str	r2, [r3, #24]
 8019162:	e00c      	b.n	801917e <access_virt_sarray+0xbc>
    } else {
      /* use long arithmetic here to avoid overflow & unsigned problems */
      long ltemp;

      ltemp = (long) end_row - (long) ptr->rows_in_mem;
 8019164:	697b      	ldr	r3, [r7, #20]
 8019166:	68ba      	ldr	r2, [r7, #8]
 8019168:	6912      	ldr	r2, [r2, #16]
 801916a:	1a9b      	subs	r3, r3, r2
 801916c:	61bb      	str	r3, [r7, #24]
      if (ltemp < 0)
 801916e:	69bb      	ldr	r3, [r7, #24]
 8019170:	2b00      	cmp	r3, #0
 8019172:	da01      	bge.n	8019178 <access_virt_sarray+0xb6>
	ltemp = 0;		/* don't fall off front end of file */
 8019174:	2300      	movs	r3, #0
 8019176:	61bb      	str	r3, [r7, #24]
      ptr->cur_start_row = (JDIMENSION) ltemp;
 8019178:	69ba      	ldr	r2, [r7, #24]
 801917a:	68bb      	ldr	r3, [r7, #8]
 801917c:	619a      	str	r2, [r3, #24]
    }
    /* Read in the selected part of the array.
     * During the initial write pass, we will do no actual read
     * because the selected part is all undefined.
     */
    do_sarray_io(cinfo, ptr, FALSE);
 801917e:	2200      	movs	r2, #0
 8019180:	68b9      	ldr	r1, [r7, #8]
 8019182:	68f8      	ldr	r0, [r7, #12]
 8019184:	f7ff feac 	bl	8018ee0 <do_sarray_io>
  }
  /* Ensure the accessed part of the array is defined; prezero if needed.
   * To improve locality of access, we only prezero the part of the array
   * that the caller is about to access, not the entire in-memory array.
   */
  if (ptr->first_undef_row < end_row) {
 8019188:	68bb      	ldr	r3, [r7, #8]
 801918a:	69db      	ldr	r3, [r3, #28]
 801918c:	697a      	ldr	r2, [r7, #20]
 801918e:	429a      	cmp	r2, r3
 8019190:	d94d      	bls.n	801922e <access_virt_sarray+0x16c>
    if (ptr->first_undef_row < start_row) {
 8019192:	68bb      	ldr	r3, [r7, #8]
 8019194:	69db      	ldr	r3, [r3, #28]
 8019196:	687a      	ldr	r2, [r7, #4]
 8019198:	429a      	cmp	r2, r3
 801919a:	d90e      	bls.n	80191ba <access_virt_sarray+0xf8>
      if (writable)		/* writer skipped over a section of array */
 801919c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801919e:	2b00      	cmp	r3, #0
 80191a0:	d008      	beq.n	80191b4 <access_virt_sarray+0xf2>
	ERREXIT(cinfo, JERR_BAD_VIRTUAL_ACCESS);
 80191a2:	68fb      	ldr	r3, [r7, #12]
 80191a4:	681b      	ldr	r3, [r3, #0]
 80191a6:	2217      	movs	r2, #23
 80191a8:	615a      	str	r2, [r3, #20]
 80191aa:	68fb      	ldr	r3, [r7, #12]
 80191ac:	681b      	ldr	r3, [r3, #0]
 80191ae:	681b      	ldr	r3, [r3, #0]
 80191b0:	68f8      	ldr	r0, [r7, #12]
 80191b2:	4798      	blx	r3
      undef_row = start_row;	/* but reader is allowed to read ahead */
 80191b4:	687b      	ldr	r3, [r7, #4]
 80191b6:	61fb      	str	r3, [r7, #28]
 80191b8:	e002      	b.n	80191c0 <access_virt_sarray+0xfe>
    } else {
      undef_row = ptr->first_undef_row;
 80191ba:	68bb      	ldr	r3, [r7, #8]
 80191bc:	69db      	ldr	r3, [r3, #28]
 80191be:	61fb      	str	r3, [r7, #28]
    }
    if (writable)
 80191c0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80191c2:	2b00      	cmp	r3, #0
 80191c4:	d002      	beq.n	80191cc <access_virt_sarray+0x10a>
      ptr->first_undef_row = end_row;
 80191c6:	68bb      	ldr	r3, [r7, #8]
 80191c8:	697a      	ldr	r2, [r7, #20]
 80191ca:	61da      	str	r2, [r3, #28]
    if (ptr->pre_zero) {
 80191cc:	68bb      	ldr	r3, [r7, #8]
 80191ce:	6a1b      	ldr	r3, [r3, #32]
 80191d0:	2b00      	cmp	r3, #0
 80191d2:	d020      	beq.n	8019216 <access_virt_sarray+0x154>
      size_t bytesperrow = (size_t) ptr->samplesperrow * SIZEOF(JSAMPLE);
 80191d4:	68bb      	ldr	r3, [r7, #8]
 80191d6:	689b      	ldr	r3, [r3, #8]
 80191d8:	613b      	str	r3, [r7, #16]
      undef_row -= ptr->cur_start_row; /* make indexes relative to buffer */
 80191da:	68bb      	ldr	r3, [r7, #8]
 80191dc:	699b      	ldr	r3, [r3, #24]
 80191de:	69fa      	ldr	r2, [r7, #28]
 80191e0:	1ad3      	subs	r3, r2, r3
 80191e2:	61fb      	str	r3, [r7, #28]
      end_row -= ptr->cur_start_row;
 80191e4:	68bb      	ldr	r3, [r7, #8]
 80191e6:	699b      	ldr	r3, [r3, #24]
 80191e8:	697a      	ldr	r2, [r7, #20]
 80191ea:	1ad3      	subs	r3, r2, r3
 80191ec:	617b      	str	r3, [r7, #20]
      while (undef_row < end_row) {
 80191ee:	e00d      	b.n	801920c <access_virt_sarray+0x14a>
	FMEMZERO((void FAR *) ptr->mem_buffer[undef_row], bytesperrow);
 80191f0:	68bb      	ldr	r3, [r7, #8]
 80191f2:	681a      	ldr	r2, [r3, #0]
 80191f4:	69fb      	ldr	r3, [r7, #28]
 80191f6:	009b      	lsls	r3, r3, #2
 80191f8:	4413      	add	r3, r2
 80191fa:	681b      	ldr	r3, [r3, #0]
 80191fc:	693a      	ldr	r2, [r7, #16]
 80191fe:	2100      	movs	r1, #0
 8019200:	4618      	mov	r0, r3
 8019202:	f000 fbf5 	bl	80199f0 <memset>
	undef_row++;
 8019206:	69fb      	ldr	r3, [r7, #28]
 8019208:	3301      	adds	r3, #1
 801920a:	61fb      	str	r3, [r7, #28]
      while (undef_row < end_row) {
 801920c:	69fa      	ldr	r2, [r7, #28]
 801920e:	697b      	ldr	r3, [r7, #20]
 8019210:	429a      	cmp	r2, r3
 8019212:	d3ed      	bcc.n	80191f0 <access_virt_sarray+0x12e>
 8019214:	e00b      	b.n	801922e <access_virt_sarray+0x16c>
      }
    } else {
      if (! writable)		/* reader looking at undefined data */
 8019216:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8019218:	2b00      	cmp	r3, #0
 801921a:	d108      	bne.n	801922e <access_virt_sarray+0x16c>
	ERREXIT(cinfo, JERR_BAD_VIRTUAL_ACCESS);
 801921c:	68fb      	ldr	r3, [r7, #12]
 801921e:	681b      	ldr	r3, [r3, #0]
 8019220:	2217      	movs	r2, #23
 8019222:	615a      	str	r2, [r3, #20]
 8019224:	68fb      	ldr	r3, [r7, #12]
 8019226:	681b      	ldr	r3, [r3, #0]
 8019228:	681b      	ldr	r3, [r3, #0]
 801922a:	68f8      	ldr	r0, [r7, #12]
 801922c:	4798      	blx	r3
    }
  }
  /* Flag the buffer dirty if caller will write in it */
  if (writable)
 801922e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8019230:	2b00      	cmp	r3, #0
 8019232:	d002      	beq.n	801923a <access_virt_sarray+0x178>
    ptr->dirty = TRUE;
 8019234:	68bb      	ldr	r3, [r7, #8]
 8019236:	2201      	movs	r2, #1
 8019238:	625a      	str	r2, [r3, #36]	@ 0x24
  /* Return address of proper part of the buffer */
  return ptr->mem_buffer + (start_row - ptr->cur_start_row);
 801923a:	68bb      	ldr	r3, [r7, #8]
 801923c:	681a      	ldr	r2, [r3, #0]
 801923e:	68bb      	ldr	r3, [r7, #8]
 8019240:	699b      	ldr	r3, [r3, #24]
 8019242:	6879      	ldr	r1, [r7, #4]
 8019244:	1acb      	subs	r3, r1, r3
 8019246:	009b      	lsls	r3, r3, #2
 8019248:	4413      	add	r3, r2
}
 801924a:	4618      	mov	r0, r3
 801924c:	3720      	adds	r7, #32
 801924e:	46bd      	mov	sp, r7
 8019250:	bd80      	pop	{r7, pc}

08019252 <access_virt_barray>:
		    JDIMENSION start_row, JDIMENSION num_rows,
		    boolean writable)
/* Access the part of a virtual block array starting at start_row */
/* and extending for num_rows rows.  writable is true if  */
/* caller intends to modify the accessed area. */
{
 8019252:	b580      	push	{r7, lr}
 8019254:	b088      	sub	sp, #32
 8019256:	af00      	add	r7, sp, #0
 8019258:	60f8      	str	r0, [r7, #12]
 801925a:	60b9      	str	r1, [r7, #8]
 801925c:	607a      	str	r2, [r7, #4]
 801925e:	603b      	str	r3, [r7, #0]
  JDIMENSION end_row = start_row + num_rows;
 8019260:	687a      	ldr	r2, [r7, #4]
 8019262:	683b      	ldr	r3, [r7, #0]
 8019264:	4413      	add	r3, r2
 8019266:	617b      	str	r3, [r7, #20]
  JDIMENSION undef_row;

  /* debugging check */
  if (end_row > ptr->rows_in_array || num_rows > ptr->maxaccess ||
 8019268:	68bb      	ldr	r3, [r7, #8]
 801926a:	685b      	ldr	r3, [r3, #4]
 801926c:	697a      	ldr	r2, [r7, #20]
 801926e:	429a      	cmp	r2, r3
 8019270:	d808      	bhi.n	8019284 <access_virt_barray+0x32>
 8019272:	68bb      	ldr	r3, [r7, #8]
 8019274:	68db      	ldr	r3, [r3, #12]
 8019276:	683a      	ldr	r2, [r7, #0]
 8019278:	429a      	cmp	r2, r3
 801927a:	d803      	bhi.n	8019284 <access_virt_barray+0x32>
      ptr->mem_buffer == NULL)
 801927c:	68bb      	ldr	r3, [r7, #8]
 801927e:	681b      	ldr	r3, [r3, #0]
  if (end_row > ptr->rows_in_array || num_rows > ptr->maxaccess ||
 8019280:	2b00      	cmp	r3, #0
 8019282:	d108      	bne.n	8019296 <access_virt_barray+0x44>
    ERREXIT(cinfo, JERR_BAD_VIRTUAL_ACCESS);
 8019284:	68fb      	ldr	r3, [r7, #12]
 8019286:	681b      	ldr	r3, [r3, #0]
 8019288:	2217      	movs	r2, #23
 801928a:	615a      	str	r2, [r3, #20]
 801928c:	68fb      	ldr	r3, [r7, #12]
 801928e:	681b      	ldr	r3, [r3, #0]
 8019290:	681b      	ldr	r3, [r3, #0]
 8019292:	68f8      	ldr	r0, [r7, #12]
 8019294:	4798      	blx	r3

  /* Make the desired part of the virtual array accessible */
  if (start_row < ptr->cur_start_row ||
 8019296:	68bb      	ldr	r3, [r7, #8]
 8019298:	699b      	ldr	r3, [r3, #24]
 801929a:	687a      	ldr	r2, [r7, #4]
 801929c:	429a      	cmp	r2, r3
 801929e:	d307      	bcc.n	80192b0 <access_virt_barray+0x5e>
      end_row > ptr->cur_start_row+ptr->rows_in_mem) {
 80192a0:	68bb      	ldr	r3, [r7, #8]
 80192a2:	699a      	ldr	r2, [r3, #24]
 80192a4:	68bb      	ldr	r3, [r7, #8]
 80192a6:	691b      	ldr	r3, [r3, #16]
 80192a8:	4413      	add	r3, r2
  if (start_row < ptr->cur_start_row ||
 80192aa:	697a      	ldr	r2, [r7, #20]
 80192ac:	429a      	cmp	r2, r3
 80192ae:	d933      	bls.n	8019318 <access_virt_barray+0xc6>
    if (! ptr->b_s_open)
 80192b0:	68bb      	ldr	r3, [r7, #8]
 80192b2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80192b4:	2b00      	cmp	r3, #0
 80192b6:	d108      	bne.n	80192ca <access_virt_barray+0x78>
      ERREXIT(cinfo, JERR_VIRTUAL_BUG);
 80192b8:	68fb      	ldr	r3, [r7, #12]
 80192ba:	681b      	ldr	r3, [r3, #0]
 80192bc:	2247      	movs	r2, #71	@ 0x47
 80192be:	615a      	str	r2, [r3, #20]
 80192c0:	68fb      	ldr	r3, [r7, #12]
 80192c2:	681b      	ldr	r3, [r3, #0]
 80192c4:	681b      	ldr	r3, [r3, #0]
 80192c6:	68f8      	ldr	r0, [r7, #12]
 80192c8:	4798      	blx	r3
    /* Flush old buffer contents if necessary */
    if (ptr->dirty) {
 80192ca:	68bb      	ldr	r3, [r7, #8]
 80192cc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80192ce:	2b00      	cmp	r3, #0
 80192d0:	d007      	beq.n	80192e2 <access_virt_barray+0x90>
      do_barray_io(cinfo, ptr, TRUE);
 80192d2:	2201      	movs	r2, #1
 80192d4:	68b9      	ldr	r1, [r7, #8]
 80192d6:	68f8      	ldr	r0, [r7, #12]
 80192d8:	f7ff fe7a 	bl	8018fd0 <do_barray_io>
      ptr->dirty = FALSE;
 80192dc:	68bb      	ldr	r3, [r7, #8]
 80192de:	2200      	movs	r2, #0
 80192e0:	625a      	str	r2, [r3, #36]	@ 0x24
     * load starting at target address.  If target address < current window,
     * assume backward scan, load so that target area is top of window.
     * Note that when switching from forward write to forward read, will have
     * start_row = 0, so the limiting case applies and we load from 0 anyway.
     */
    if (start_row > ptr->cur_start_row) {
 80192e2:	68bb      	ldr	r3, [r7, #8]
 80192e4:	699b      	ldr	r3, [r3, #24]
 80192e6:	687a      	ldr	r2, [r7, #4]
 80192e8:	429a      	cmp	r2, r3
 80192ea:	d903      	bls.n	80192f4 <access_virt_barray+0xa2>
      ptr->cur_start_row = start_row;
 80192ec:	68bb      	ldr	r3, [r7, #8]
 80192ee:	687a      	ldr	r2, [r7, #4]
 80192f0:	619a      	str	r2, [r3, #24]
 80192f2:	e00c      	b.n	801930e <access_virt_barray+0xbc>
    } else {
      /* use long arithmetic here to avoid overflow & unsigned problems */
      long ltemp;

      ltemp = (long) end_row - (long) ptr->rows_in_mem;
 80192f4:	697b      	ldr	r3, [r7, #20]
 80192f6:	68ba      	ldr	r2, [r7, #8]
 80192f8:	6912      	ldr	r2, [r2, #16]
 80192fa:	1a9b      	subs	r3, r3, r2
 80192fc:	61bb      	str	r3, [r7, #24]
      if (ltemp < 0)
 80192fe:	69bb      	ldr	r3, [r7, #24]
 8019300:	2b00      	cmp	r3, #0
 8019302:	da01      	bge.n	8019308 <access_virt_barray+0xb6>
	ltemp = 0;		/* don't fall off front end of file */
 8019304:	2300      	movs	r3, #0
 8019306:	61bb      	str	r3, [r7, #24]
      ptr->cur_start_row = (JDIMENSION) ltemp;
 8019308:	69ba      	ldr	r2, [r7, #24]
 801930a:	68bb      	ldr	r3, [r7, #8]
 801930c:	619a      	str	r2, [r3, #24]
    }
    /* Read in the selected part of the array.
     * During the initial write pass, we will do no actual read
     * because the selected part is all undefined.
     */
    do_barray_io(cinfo, ptr, FALSE);
 801930e:	2200      	movs	r2, #0
 8019310:	68b9      	ldr	r1, [r7, #8]
 8019312:	68f8      	ldr	r0, [r7, #12]
 8019314:	f7ff fe5c 	bl	8018fd0 <do_barray_io>
  }
  /* Ensure the accessed part of the array is defined; prezero if needed.
   * To improve locality of access, we only prezero the part of the array
   * that the caller is about to access, not the entire in-memory array.
   */
  if (ptr->first_undef_row < end_row) {
 8019318:	68bb      	ldr	r3, [r7, #8]
 801931a:	69db      	ldr	r3, [r3, #28]
 801931c:	697a      	ldr	r2, [r7, #20]
 801931e:	429a      	cmp	r2, r3
 8019320:	d94e      	bls.n	80193c0 <access_virt_barray+0x16e>
    if (ptr->first_undef_row < start_row) {
 8019322:	68bb      	ldr	r3, [r7, #8]
 8019324:	69db      	ldr	r3, [r3, #28]
 8019326:	687a      	ldr	r2, [r7, #4]
 8019328:	429a      	cmp	r2, r3
 801932a:	d90e      	bls.n	801934a <access_virt_barray+0xf8>
      if (writable)		/* writer skipped over a section of array */
 801932c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801932e:	2b00      	cmp	r3, #0
 8019330:	d008      	beq.n	8019344 <access_virt_barray+0xf2>
	ERREXIT(cinfo, JERR_BAD_VIRTUAL_ACCESS);
 8019332:	68fb      	ldr	r3, [r7, #12]
 8019334:	681b      	ldr	r3, [r3, #0]
 8019336:	2217      	movs	r2, #23
 8019338:	615a      	str	r2, [r3, #20]
 801933a:	68fb      	ldr	r3, [r7, #12]
 801933c:	681b      	ldr	r3, [r3, #0]
 801933e:	681b      	ldr	r3, [r3, #0]
 8019340:	68f8      	ldr	r0, [r7, #12]
 8019342:	4798      	blx	r3
      undef_row = start_row;	/* but reader is allowed to read ahead */
 8019344:	687b      	ldr	r3, [r7, #4]
 8019346:	61fb      	str	r3, [r7, #28]
 8019348:	e002      	b.n	8019350 <access_virt_barray+0xfe>
    } else {
      undef_row = ptr->first_undef_row;
 801934a:	68bb      	ldr	r3, [r7, #8]
 801934c:	69db      	ldr	r3, [r3, #28]
 801934e:	61fb      	str	r3, [r7, #28]
    }
    if (writable)
 8019350:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8019352:	2b00      	cmp	r3, #0
 8019354:	d002      	beq.n	801935c <access_virt_barray+0x10a>
      ptr->first_undef_row = end_row;
 8019356:	68bb      	ldr	r3, [r7, #8]
 8019358:	697a      	ldr	r2, [r7, #20]
 801935a:	61da      	str	r2, [r3, #28]
    if (ptr->pre_zero) {
 801935c:	68bb      	ldr	r3, [r7, #8]
 801935e:	6a1b      	ldr	r3, [r3, #32]
 8019360:	2b00      	cmp	r3, #0
 8019362:	d021      	beq.n	80193a8 <access_virt_barray+0x156>
      size_t bytesperrow = (size_t) ptr->blocksperrow * SIZEOF(JBLOCK);
 8019364:	68bb      	ldr	r3, [r7, #8]
 8019366:	689b      	ldr	r3, [r3, #8]
 8019368:	01db      	lsls	r3, r3, #7
 801936a:	613b      	str	r3, [r7, #16]
      undef_row -= ptr->cur_start_row; /* make indexes relative to buffer */
 801936c:	68bb      	ldr	r3, [r7, #8]
 801936e:	699b      	ldr	r3, [r3, #24]
 8019370:	69fa      	ldr	r2, [r7, #28]
 8019372:	1ad3      	subs	r3, r2, r3
 8019374:	61fb      	str	r3, [r7, #28]
      end_row -= ptr->cur_start_row;
 8019376:	68bb      	ldr	r3, [r7, #8]
 8019378:	699b      	ldr	r3, [r3, #24]
 801937a:	697a      	ldr	r2, [r7, #20]
 801937c:	1ad3      	subs	r3, r2, r3
 801937e:	617b      	str	r3, [r7, #20]
      while (undef_row < end_row) {
 8019380:	e00d      	b.n	801939e <access_virt_barray+0x14c>
	FMEMZERO((void FAR *) ptr->mem_buffer[undef_row], bytesperrow);
 8019382:	68bb      	ldr	r3, [r7, #8]
 8019384:	681a      	ldr	r2, [r3, #0]
 8019386:	69fb      	ldr	r3, [r7, #28]
 8019388:	009b      	lsls	r3, r3, #2
 801938a:	4413      	add	r3, r2
 801938c:	681b      	ldr	r3, [r3, #0]
 801938e:	693a      	ldr	r2, [r7, #16]
 8019390:	2100      	movs	r1, #0
 8019392:	4618      	mov	r0, r3
 8019394:	f000 fb2c 	bl	80199f0 <memset>
	undef_row++;
 8019398:	69fb      	ldr	r3, [r7, #28]
 801939a:	3301      	adds	r3, #1
 801939c:	61fb      	str	r3, [r7, #28]
      while (undef_row < end_row) {
 801939e:	69fa      	ldr	r2, [r7, #28]
 80193a0:	697b      	ldr	r3, [r7, #20]
 80193a2:	429a      	cmp	r2, r3
 80193a4:	d3ed      	bcc.n	8019382 <access_virt_barray+0x130>
 80193a6:	e00b      	b.n	80193c0 <access_virt_barray+0x16e>
      }
    } else {
      if (! writable)		/* reader looking at undefined data */
 80193a8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80193aa:	2b00      	cmp	r3, #0
 80193ac:	d108      	bne.n	80193c0 <access_virt_barray+0x16e>
	ERREXIT(cinfo, JERR_BAD_VIRTUAL_ACCESS);
 80193ae:	68fb      	ldr	r3, [r7, #12]
 80193b0:	681b      	ldr	r3, [r3, #0]
 80193b2:	2217      	movs	r2, #23
 80193b4:	615a      	str	r2, [r3, #20]
 80193b6:	68fb      	ldr	r3, [r7, #12]
 80193b8:	681b      	ldr	r3, [r3, #0]
 80193ba:	681b      	ldr	r3, [r3, #0]
 80193bc:	68f8      	ldr	r0, [r7, #12]
 80193be:	4798      	blx	r3
    }
  }
  /* Flag the buffer dirty if caller will write in it */
  if (writable)
 80193c0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80193c2:	2b00      	cmp	r3, #0
 80193c4:	d002      	beq.n	80193cc <access_virt_barray+0x17a>
    ptr->dirty = TRUE;
 80193c6:	68bb      	ldr	r3, [r7, #8]
 80193c8:	2201      	movs	r2, #1
 80193ca:	625a      	str	r2, [r3, #36]	@ 0x24
  /* Return address of proper part of the buffer */
  return ptr->mem_buffer + (start_row - ptr->cur_start_row);
 80193cc:	68bb      	ldr	r3, [r7, #8]
 80193ce:	681a      	ldr	r2, [r3, #0]
 80193d0:	68bb      	ldr	r3, [r7, #8]
 80193d2:	699b      	ldr	r3, [r3, #24]
 80193d4:	6879      	ldr	r1, [r7, #4]
 80193d6:	1acb      	subs	r3, r1, r3
 80193d8:	009b      	lsls	r3, r3, #2
 80193da:	4413      	add	r3, r2
}
 80193dc:	4618      	mov	r0, r3
 80193de:	3720      	adds	r7, #32
 80193e0:	46bd      	mov	sp, r7
 80193e2:	bd80      	pop	{r7, pc}

080193e4 <free_pool>:
 * Release all objects belonging to a specified pool.
 */

METHODDEF(void)
free_pool (j_common_ptr cinfo, int pool_id)
{
 80193e4:	b580      	push	{r7, lr}
 80193e6:	b08a      	sub	sp, #40	@ 0x28
 80193e8:	af00      	add	r7, sp, #0
 80193ea:	6078      	str	r0, [r7, #4]
 80193ec:	6039      	str	r1, [r7, #0]
  my_mem_ptr mem = (my_mem_ptr) cinfo->mem;
 80193ee:	687b      	ldr	r3, [r7, #4]
 80193f0:	685b      	ldr	r3, [r3, #4]
 80193f2:	617b      	str	r3, [r7, #20]
  small_pool_ptr shdr_ptr;
  large_pool_ptr lhdr_ptr;
  size_t space_freed;

  if (pool_id < 0 || pool_id >= JPOOL_NUMPOOLS)
 80193f4:	683b      	ldr	r3, [r7, #0]
 80193f6:	2b00      	cmp	r3, #0
 80193f8:	db02      	blt.n	8019400 <free_pool+0x1c>
 80193fa:	683b      	ldr	r3, [r7, #0]
 80193fc:	2b01      	cmp	r3, #1
 80193fe:	dd0c      	ble.n	801941a <free_pool+0x36>
    ERREXIT1(cinfo, JERR_BAD_POOL_ID, pool_id);	/* safety check */
 8019400:	687b      	ldr	r3, [r7, #4]
 8019402:	681b      	ldr	r3, [r3, #0]
 8019404:	220f      	movs	r2, #15
 8019406:	615a      	str	r2, [r3, #20]
 8019408:	687b      	ldr	r3, [r7, #4]
 801940a:	681b      	ldr	r3, [r3, #0]
 801940c:	683a      	ldr	r2, [r7, #0]
 801940e:	619a      	str	r2, [r3, #24]
 8019410:	687b      	ldr	r3, [r7, #4]
 8019412:	681b      	ldr	r3, [r3, #0]
 8019414:	681b      	ldr	r3, [r3, #0]
 8019416:	6878      	ldr	r0, [r7, #4]
 8019418:	4798      	blx	r3
  if (cinfo->err->trace_level > 1)
    print_mem_stats(cinfo, pool_id); /* print pool's memory usage statistics */
#endif

  /* If freeing IMAGE pool, close any virtual arrays first */
  if (pool_id == JPOOL_IMAGE) {
 801941a:	683b      	ldr	r3, [r7, #0]
 801941c:	2b01      	cmp	r3, #1
 801941e:	d135      	bne.n	801948c <free_pool+0xa8>
    jvirt_sarray_ptr sptr;
    jvirt_barray_ptr bptr;

    for (sptr = mem->virt_sarray_list; sptr != NULL; sptr = sptr->next) {
 8019420:	697b      	ldr	r3, [r7, #20]
 8019422:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8019424:	61fb      	str	r3, [r7, #28]
 8019426:	e010      	b.n	801944a <free_pool+0x66>
      if (sptr->b_s_open) {	/* there may be no backing store */
 8019428:	69fb      	ldr	r3, [r7, #28]
 801942a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 801942c:	2b00      	cmp	r3, #0
 801942e:	d009      	beq.n	8019444 <free_pool+0x60>
	sptr->b_s_open = FALSE;	/* prevent recursive close if error */
 8019430:	69fb      	ldr	r3, [r7, #28]
 8019432:	2200      	movs	r2, #0
 8019434:	629a      	str	r2, [r3, #40]	@ 0x28
	(*sptr->b_s_info.close_backing_store) (cinfo, & sptr->b_s_info);
 8019436:	69fb      	ldr	r3, [r7, #28]
 8019438:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 801943a:	69fa      	ldr	r2, [r7, #28]
 801943c:	3230      	adds	r2, #48	@ 0x30
 801943e:	4611      	mov	r1, r2
 8019440:	6878      	ldr	r0, [r7, #4]
 8019442:	4798      	blx	r3
    for (sptr = mem->virt_sarray_list; sptr != NULL; sptr = sptr->next) {
 8019444:	69fb      	ldr	r3, [r7, #28]
 8019446:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8019448:	61fb      	str	r3, [r7, #28]
 801944a:	69fb      	ldr	r3, [r7, #28]
 801944c:	2b00      	cmp	r3, #0
 801944e:	d1eb      	bne.n	8019428 <free_pool+0x44>
      }
    }
    mem->virt_sarray_list = NULL;
 8019450:	697b      	ldr	r3, [r7, #20]
 8019452:	2200      	movs	r2, #0
 8019454:	645a      	str	r2, [r3, #68]	@ 0x44
    for (bptr = mem->virt_barray_list; bptr != NULL; bptr = bptr->next) {
 8019456:	697b      	ldr	r3, [r7, #20]
 8019458:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 801945a:	61bb      	str	r3, [r7, #24]
 801945c:	e010      	b.n	8019480 <free_pool+0x9c>
      if (bptr->b_s_open) {	/* there may be no backing store */
 801945e:	69bb      	ldr	r3, [r7, #24]
 8019460:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8019462:	2b00      	cmp	r3, #0
 8019464:	d009      	beq.n	801947a <free_pool+0x96>
	bptr->b_s_open = FALSE;	/* prevent recursive close if error */
 8019466:	69bb      	ldr	r3, [r7, #24]
 8019468:	2200      	movs	r2, #0
 801946a:	629a      	str	r2, [r3, #40]	@ 0x28
	(*bptr->b_s_info.close_backing_store) (cinfo, & bptr->b_s_info);
 801946c:	69bb      	ldr	r3, [r7, #24]
 801946e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8019470:	69ba      	ldr	r2, [r7, #24]
 8019472:	3230      	adds	r2, #48	@ 0x30
 8019474:	4611      	mov	r1, r2
 8019476:	6878      	ldr	r0, [r7, #4]
 8019478:	4798      	blx	r3
    for (bptr = mem->virt_barray_list; bptr != NULL; bptr = bptr->next) {
 801947a:	69bb      	ldr	r3, [r7, #24]
 801947c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 801947e:	61bb      	str	r3, [r7, #24]
 8019480:	69bb      	ldr	r3, [r7, #24]
 8019482:	2b00      	cmp	r3, #0
 8019484:	d1eb      	bne.n	801945e <free_pool+0x7a>
      }
    }
    mem->virt_barray_list = NULL;
 8019486:	697b      	ldr	r3, [r7, #20]
 8019488:	2200      	movs	r2, #0
 801948a:	649a      	str	r2, [r3, #72]	@ 0x48
  }

  /* Release large objects */
  lhdr_ptr = mem->large_list[pool_id];
 801948c:	697a      	ldr	r2, [r7, #20]
 801948e:	683b      	ldr	r3, [r7, #0]
 8019490:	330e      	adds	r3, #14
 8019492:	009b      	lsls	r3, r3, #2
 8019494:	4413      	add	r3, r2
 8019496:	685b      	ldr	r3, [r3, #4]
 8019498:	623b      	str	r3, [r7, #32]
  mem->large_list[pool_id] = NULL;
 801949a:	697a      	ldr	r2, [r7, #20]
 801949c:	683b      	ldr	r3, [r7, #0]
 801949e:	330e      	adds	r3, #14
 80194a0:	009b      	lsls	r3, r3, #2
 80194a2:	4413      	add	r3, r2
 80194a4:	2200      	movs	r2, #0
 80194a6:	605a      	str	r2, [r3, #4]

  while (lhdr_ptr != NULL) {
 80194a8:	e018      	b.n	80194dc <free_pool+0xf8>
    large_pool_ptr next_lhdr_ptr = lhdr_ptr->hdr.next;
 80194aa:	6a3b      	ldr	r3, [r7, #32]
 80194ac:	681b      	ldr	r3, [r3, #0]
 80194ae:	60bb      	str	r3, [r7, #8]
    space_freed = lhdr_ptr->hdr.bytes_used +
 80194b0:	6a3b      	ldr	r3, [r7, #32]
 80194b2:	685a      	ldr	r2, [r3, #4]
		  lhdr_ptr->hdr.bytes_left +
 80194b4:	6a3b      	ldr	r3, [r7, #32]
 80194b6:	689b      	ldr	r3, [r3, #8]
    space_freed = lhdr_ptr->hdr.bytes_used +
 80194b8:	4413      	add	r3, r2
 80194ba:	3310      	adds	r3, #16
 80194bc:	60fb      	str	r3, [r7, #12]
		  SIZEOF(large_pool_hdr);
    jpeg_free_large(cinfo, (void FAR *) lhdr_ptr, space_freed);
 80194be:	68fa      	ldr	r2, [r7, #12]
 80194c0:	6a39      	ldr	r1, [r7, #32]
 80194c2:	6878      	ldr	r0, [r7, #4]
 80194c4:	f000 f91f 	bl	8019706 <jpeg_free_large>
    mem->total_space_allocated -= space_freed;
 80194c8:	697b      	ldr	r3, [r7, #20]
 80194ca:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80194cc:	461a      	mov	r2, r3
 80194ce:	68fb      	ldr	r3, [r7, #12]
 80194d0:	1ad3      	subs	r3, r2, r3
 80194d2:	461a      	mov	r2, r3
 80194d4:	697b      	ldr	r3, [r7, #20]
 80194d6:	64da      	str	r2, [r3, #76]	@ 0x4c
    lhdr_ptr = next_lhdr_ptr;
 80194d8:	68bb      	ldr	r3, [r7, #8]
 80194da:	623b      	str	r3, [r7, #32]
  while (lhdr_ptr != NULL) {
 80194dc:	6a3b      	ldr	r3, [r7, #32]
 80194de:	2b00      	cmp	r3, #0
 80194e0:	d1e3      	bne.n	80194aa <free_pool+0xc6>
  }

  /* Release small objects */
  shdr_ptr = mem->small_list[pool_id];
 80194e2:	697a      	ldr	r2, [r7, #20]
 80194e4:	683b      	ldr	r3, [r7, #0]
 80194e6:	330c      	adds	r3, #12
 80194e8:	009b      	lsls	r3, r3, #2
 80194ea:	4413      	add	r3, r2
 80194ec:	685b      	ldr	r3, [r3, #4]
 80194ee:	627b      	str	r3, [r7, #36]	@ 0x24
  mem->small_list[pool_id] = NULL;
 80194f0:	697a      	ldr	r2, [r7, #20]
 80194f2:	683b      	ldr	r3, [r7, #0]
 80194f4:	330c      	adds	r3, #12
 80194f6:	009b      	lsls	r3, r3, #2
 80194f8:	4413      	add	r3, r2
 80194fa:	2200      	movs	r2, #0
 80194fc:	605a      	str	r2, [r3, #4]

  while (shdr_ptr != NULL) {
 80194fe:	e018      	b.n	8019532 <free_pool+0x14e>
    small_pool_ptr next_shdr_ptr = shdr_ptr->hdr.next;
 8019500:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8019502:	681b      	ldr	r3, [r3, #0]
 8019504:	613b      	str	r3, [r7, #16]
    space_freed = shdr_ptr->hdr.bytes_used +
 8019506:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8019508:	685a      	ldr	r2, [r3, #4]
		  shdr_ptr->hdr.bytes_left +
 801950a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801950c:	689b      	ldr	r3, [r3, #8]
    space_freed = shdr_ptr->hdr.bytes_used +
 801950e:	4413      	add	r3, r2
 8019510:	3310      	adds	r3, #16
 8019512:	60fb      	str	r3, [r7, #12]
		  SIZEOF(small_pool_hdr);
    jpeg_free_small(cinfo, (void *) shdr_ptr, space_freed);
 8019514:	68fa      	ldr	r2, [r7, #12]
 8019516:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8019518:	6878      	ldr	r0, [r7, #4]
 801951a:	f000 f8da 	bl	80196d2 <jpeg_free_small>
    mem->total_space_allocated -= space_freed;
 801951e:	697b      	ldr	r3, [r7, #20]
 8019520:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8019522:	461a      	mov	r2, r3
 8019524:	68fb      	ldr	r3, [r7, #12]
 8019526:	1ad3      	subs	r3, r2, r3
 8019528:	461a      	mov	r2, r3
 801952a:	697b      	ldr	r3, [r7, #20]
 801952c:	64da      	str	r2, [r3, #76]	@ 0x4c
    shdr_ptr = next_shdr_ptr;
 801952e:	693b      	ldr	r3, [r7, #16]
 8019530:	627b      	str	r3, [r7, #36]	@ 0x24
  while (shdr_ptr != NULL) {
 8019532:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8019534:	2b00      	cmp	r3, #0
 8019536:	d1e3      	bne.n	8019500 <free_pool+0x11c>
  }
}
 8019538:	bf00      	nop
 801953a:	bf00      	nop
 801953c:	3728      	adds	r7, #40	@ 0x28
 801953e:	46bd      	mov	sp, r7
 8019540:	bd80      	pop	{r7, pc}

08019542 <self_destruct>:
 * Note that this cannot be called unless cinfo->mem is non-NULL.
 */

METHODDEF(void)
self_destruct (j_common_ptr cinfo)
{
 8019542:	b580      	push	{r7, lr}
 8019544:	b084      	sub	sp, #16
 8019546:	af00      	add	r7, sp, #0
 8019548:	6078      	str	r0, [r7, #4]

  /* Close all backing store, release all memory.
   * Releasing pools in reverse order might help avoid fragmentation
   * with some (brain-damaged) malloc libraries.
   */
  for (pool = JPOOL_NUMPOOLS-1; pool >= JPOOL_PERMANENT; pool--) {
 801954a:	2301      	movs	r3, #1
 801954c:	60fb      	str	r3, [r7, #12]
 801954e:	e006      	b.n	801955e <self_destruct+0x1c>
    free_pool(cinfo, pool);
 8019550:	68f9      	ldr	r1, [r7, #12]
 8019552:	6878      	ldr	r0, [r7, #4]
 8019554:	f7ff ff46 	bl	80193e4 <free_pool>
  for (pool = JPOOL_NUMPOOLS-1; pool >= JPOOL_PERMANENT; pool--) {
 8019558:	68fb      	ldr	r3, [r7, #12]
 801955a:	3b01      	subs	r3, #1
 801955c:	60fb      	str	r3, [r7, #12]
 801955e:	68fb      	ldr	r3, [r7, #12]
 8019560:	2b00      	cmp	r3, #0
 8019562:	daf5      	bge.n	8019550 <self_destruct+0xe>
  }

  /* Release the memory manager control block too. */
  jpeg_free_small(cinfo, (void *) cinfo->mem, SIZEOF(my_memory_mgr));
 8019564:	687b      	ldr	r3, [r7, #4]
 8019566:	685b      	ldr	r3, [r3, #4]
 8019568:	2254      	movs	r2, #84	@ 0x54
 801956a:	4619      	mov	r1, r3
 801956c:	6878      	ldr	r0, [r7, #4]
 801956e:	f000 f8b0 	bl	80196d2 <jpeg_free_small>
  cinfo->mem = NULL;		/* ensures I will be called only once */
 8019572:	687b      	ldr	r3, [r7, #4]
 8019574:	2200      	movs	r2, #0
 8019576:	605a      	str	r2, [r3, #4]

  jpeg_mem_term(cinfo);		/* system-dependent cleanup */
 8019578:	6878      	ldr	r0, [r7, #4]
 801957a:	f000 f8fd 	bl	8019778 <jpeg_mem_term>
}
 801957e:	bf00      	nop
 8019580:	3710      	adds	r7, #16
 8019582:	46bd      	mov	sp, r7
 8019584:	bd80      	pop	{r7, pc}
	...

08019588 <jinit_memory_mgr>:
 * When this is called, only the error manager pointer is valid in cinfo!
 */

GLOBAL(void)
jinit_memory_mgr (j_common_ptr cinfo)
{
 8019588:	b580      	push	{r7, lr}
 801958a:	b086      	sub	sp, #24
 801958c:	af00      	add	r7, sp, #0
 801958e:	6078      	str	r0, [r7, #4]
  my_mem_ptr mem;
  long max_to_use;
  int pool;
  size_t test_mac;

  cinfo->mem = NULL;		/* for safety if init fails */
 8019590:	687b      	ldr	r3, [r7, #4]
 8019592:	2200      	movs	r2, #0
 8019594:	605a      	str	r2, [r3, #4]
  /* MAX_ALLOC_CHUNK must be representable as type size_t, and must be
   * a multiple of SIZEOF(ALIGN_TYPE).
   * Again, an "unreachable code" warning may be ignored here.
   * But a "constant too large" warning means you need to fix MAX_ALLOC_CHUNK.
   */
  test_mac = (size_t) MAX_ALLOC_CHUNK;
 8019596:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 801959a:	613b      	str	r3, [r7, #16]
  if ((long) test_mac != MAX_ALLOC_CHUNK ||
 801959c:	693b      	ldr	r3, [r7, #16]
 801959e:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80195a2:	d008      	beq.n	80195b6 <jinit_memory_mgr+0x2e>
      (MAX_ALLOC_CHUNK % SIZEOF(ALIGN_TYPE)) != 0)
    ERREXIT(cinfo, JERR_BAD_ALLOC_CHUNK);
 80195a4:	687b      	ldr	r3, [r7, #4]
 80195a6:	681b      	ldr	r3, [r3, #0]
 80195a8:	2202      	movs	r2, #2
 80195aa:	615a      	str	r2, [r3, #20]
 80195ac:	687b      	ldr	r3, [r7, #4]
 80195ae:	681b      	ldr	r3, [r3, #0]
 80195b0:	681b      	ldr	r3, [r3, #0]
 80195b2:	6878      	ldr	r0, [r7, #4]
 80195b4:	4798      	blx	r3

  max_to_use = jpeg_mem_init(cinfo); /* system-dependent initialization */
 80195b6:	6878      	ldr	r0, [r7, #4]
 80195b8:	f000 f8d3 	bl	8019762 <jpeg_mem_init>
 80195bc:	60f8      	str	r0, [r7, #12]

  /* Attempt to allocate memory manager's control block */
  mem = (my_mem_ptr) jpeg_get_small(cinfo, SIZEOF(my_memory_mgr));
 80195be:	2154      	movs	r1, #84	@ 0x54
 80195c0:	6878      	ldr	r0, [r7, #4]
 80195c2:	f000 f879 	bl	80196b8 <jpeg_get_small>
 80195c6:	60b8      	str	r0, [r7, #8]

  if (mem == NULL) {
 80195c8:	68bb      	ldr	r3, [r7, #8]
 80195ca:	2b00      	cmp	r3, #0
 80195cc:	d10f      	bne.n	80195ee <jinit_memory_mgr+0x66>
    jpeg_mem_term(cinfo);	/* system-dependent cleanup */
 80195ce:	6878      	ldr	r0, [r7, #4]
 80195d0:	f000 f8d2 	bl	8019778 <jpeg_mem_term>
    ERREXIT1(cinfo, JERR_OUT_OF_MEMORY, 0);
 80195d4:	687b      	ldr	r3, [r7, #4]
 80195d6:	681b      	ldr	r3, [r3, #0]
 80195d8:	2238      	movs	r2, #56	@ 0x38
 80195da:	615a      	str	r2, [r3, #20]
 80195dc:	687b      	ldr	r3, [r7, #4]
 80195de:	681b      	ldr	r3, [r3, #0]
 80195e0:	2200      	movs	r2, #0
 80195e2:	619a      	str	r2, [r3, #24]
 80195e4:	687b      	ldr	r3, [r7, #4]
 80195e6:	681b      	ldr	r3, [r3, #0]
 80195e8:	681b      	ldr	r3, [r3, #0]
 80195ea:	6878      	ldr	r0, [r7, #4]
 80195ec:	4798      	blx	r3
  }

  /* OK, fill in the method pointers */
  mem->pub.alloc_small = alloc_small;
 80195ee:	68bb      	ldr	r3, [r7, #8]
 80195f0:	4a26      	ldr	r2, [pc, #152]	@ (801968c <jinit_memory_mgr+0x104>)
 80195f2:	601a      	str	r2, [r3, #0]
  mem->pub.alloc_large = alloc_large;
 80195f4:	68bb      	ldr	r3, [r7, #8]
 80195f6:	4a26      	ldr	r2, [pc, #152]	@ (8019690 <jinit_memory_mgr+0x108>)
 80195f8:	605a      	str	r2, [r3, #4]
  mem->pub.alloc_sarray = alloc_sarray;
 80195fa:	68bb      	ldr	r3, [r7, #8]
 80195fc:	4a25      	ldr	r2, [pc, #148]	@ (8019694 <jinit_memory_mgr+0x10c>)
 80195fe:	609a      	str	r2, [r3, #8]
  mem->pub.alloc_barray = alloc_barray;
 8019600:	68bb      	ldr	r3, [r7, #8]
 8019602:	4a25      	ldr	r2, [pc, #148]	@ (8019698 <jinit_memory_mgr+0x110>)
 8019604:	60da      	str	r2, [r3, #12]
  mem->pub.request_virt_sarray = request_virt_sarray;
 8019606:	68bb      	ldr	r3, [r7, #8]
 8019608:	4a24      	ldr	r2, [pc, #144]	@ (801969c <jinit_memory_mgr+0x114>)
 801960a:	611a      	str	r2, [r3, #16]
  mem->pub.request_virt_barray = request_virt_barray;
 801960c:	68bb      	ldr	r3, [r7, #8]
 801960e:	4a24      	ldr	r2, [pc, #144]	@ (80196a0 <jinit_memory_mgr+0x118>)
 8019610:	615a      	str	r2, [r3, #20]
  mem->pub.realize_virt_arrays = realize_virt_arrays;
 8019612:	68bb      	ldr	r3, [r7, #8]
 8019614:	4a23      	ldr	r2, [pc, #140]	@ (80196a4 <jinit_memory_mgr+0x11c>)
 8019616:	619a      	str	r2, [r3, #24]
  mem->pub.access_virt_sarray = access_virt_sarray;
 8019618:	68bb      	ldr	r3, [r7, #8]
 801961a:	4a23      	ldr	r2, [pc, #140]	@ (80196a8 <jinit_memory_mgr+0x120>)
 801961c:	61da      	str	r2, [r3, #28]
  mem->pub.access_virt_barray = access_virt_barray;
 801961e:	68bb      	ldr	r3, [r7, #8]
 8019620:	4a22      	ldr	r2, [pc, #136]	@ (80196ac <jinit_memory_mgr+0x124>)
 8019622:	621a      	str	r2, [r3, #32]
  mem->pub.free_pool = free_pool;
 8019624:	68bb      	ldr	r3, [r7, #8]
 8019626:	4a22      	ldr	r2, [pc, #136]	@ (80196b0 <jinit_memory_mgr+0x128>)
 8019628:	625a      	str	r2, [r3, #36]	@ 0x24
  mem->pub.self_destruct = self_destruct;
 801962a:	68bb      	ldr	r3, [r7, #8]
 801962c:	4a21      	ldr	r2, [pc, #132]	@ (80196b4 <jinit_memory_mgr+0x12c>)
 801962e:	629a      	str	r2, [r3, #40]	@ 0x28

  /* Make MAX_ALLOC_CHUNK accessible to other modules */
  mem->pub.max_alloc_chunk = MAX_ALLOC_CHUNK;
 8019630:	68bb      	ldr	r3, [r7, #8]
 8019632:	f44f 3280 	mov.w	r2, #65536	@ 0x10000
 8019636:	631a      	str	r2, [r3, #48]	@ 0x30

  /* Initialize working state */
  mem->pub.max_memory_to_use = max_to_use;
 8019638:	68bb      	ldr	r3, [r7, #8]
 801963a:	68fa      	ldr	r2, [r7, #12]
 801963c:	62da      	str	r2, [r3, #44]	@ 0x2c

  for (pool = JPOOL_NUMPOOLS-1; pool >= JPOOL_PERMANENT; pool--) {
 801963e:	2301      	movs	r3, #1
 8019640:	617b      	str	r3, [r7, #20]
 8019642:	e010      	b.n	8019666 <jinit_memory_mgr+0xde>
    mem->small_list[pool] = NULL;
 8019644:	68ba      	ldr	r2, [r7, #8]
 8019646:	697b      	ldr	r3, [r7, #20]
 8019648:	330c      	adds	r3, #12
 801964a:	009b      	lsls	r3, r3, #2
 801964c:	4413      	add	r3, r2
 801964e:	2200      	movs	r2, #0
 8019650:	605a      	str	r2, [r3, #4]
    mem->large_list[pool] = NULL;
 8019652:	68ba      	ldr	r2, [r7, #8]
 8019654:	697b      	ldr	r3, [r7, #20]
 8019656:	330e      	adds	r3, #14
 8019658:	009b      	lsls	r3, r3, #2
 801965a:	4413      	add	r3, r2
 801965c:	2200      	movs	r2, #0
 801965e:	605a      	str	r2, [r3, #4]
  for (pool = JPOOL_NUMPOOLS-1; pool >= JPOOL_PERMANENT; pool--) {
 8019660:	697b      	ldr	r3, [r7, #20]
 8019662:	3b01      	subs	r3, #1
 8019664:	617b      	str	r3, [r7, #20]
 8019666:	697b      	ldr	r3, [r7, #20]
 8019668:	2b00      	cmp	r3, #0
 801966a:	daeb      	bge.n	8019644 <jinit_memory_mgr+0xbc>
  }
  mem->virt_sarray_list = NULL;
 801966c:	68bb      	ldr	r3, [r7, #8]
 801966e:	2200      	movs	r2, #0
 8019670:	645a      	str	r2, [r3, #68]	@ 0x44
  mem->virt_barray_list = NULL;
 8019672:	68bb      	ldr	r3, [r7, #8]
 8019674:	2200      	movs	r2, #0
 8019676:	649a      	str	r2, [r3, #72]	@ 0x48

  mem->total_space_allocated = SIZEOF(my_memory_mgr);
 8019678:	68bb      	ldr	r3, [r7, #8]
 801967a:	2254      	movs	r2, #84	@ 0x54
 801967c:	64da      	str	r2, [r3, #76]	@ 0x4c

  /* Declare ourselves open for business */
  cinfo->mem = & mem->pub;
 801967e:	68ba      	ldr	r2, [r7, #8]
 8019680:	687b      	ldr	r3, [r7, #4]
 8019682:	605a      	str	r2, [r3, #4]
      }
    }
  }
#endif

}
 8019684:	bf00      	nop
 8019686:	3718      	adds	r7, #24
 8019688:	46bd      	mov	sp, r7
 801968a:	bd80      	pop	{r7, pc}
 801968c:	080187dd 	.word	0x080187dd
 8019690:	0801895d 	.word	0x0801895d
 8019694:	08018a23 	.word	0x08018a23
 8019698:	08018ae9 	.word	0x08018ae9
 801969c:	08018bb5 	.word	0x08018bb5
 80196a0:	08018c31 	.word	0x08018c31
 80196a4:	08018cad 	.word	0x08018cad
 80196a8:	080190c3 	.word	0x080190c3
 80196ac:	08019253 	.word	0x08019253
 80196b0:	080193e5 	.word	0x080193e5
 80196b4:	08019543 	.word	0x08019543

080196b8 <jpeg_get_small>:
 * routines malloc() and free().
 */

GLOBAL(void *)
jpeg_get_small (j_common_ptr cinfo, size_t sizeofobject)
{
 80196b8:	b580      	push	{r7, lr}
 80196ba:	b082      	sub	sp, #8
 80196bc:	af00      	add	r7, sp, #0
 80196be:	6078      	str	r0, [r7, #4]
 80196c0:	6039      	str	r1, [r7, #0]
  return (void *) JMALLOC(sizeofobject);
 80196c2:	6838      	ldr	r0, [r7, #0]
 80196c4:	f000 f8b6 	bl	8019834 <malloc>
 80196c8:	4603      	mov	r3, r0
}
 80196ca:	4618      	mov	r0, r3
 80196cc:	3708      	adds	r7, #8
 80196ce:	46bd      	mov	sp, r7
 80196d0:	bd80      	pop	{r7, pc}

080196d2 <jpeg_free_small>:

GLOBAL(void)
jpeg_free_small (j_common_ptr cinfo, void * object, size_t sizeofobject)
{
 80196d2:	b580      	push	{r7, lr}
 80196d4:	b084      	sub	sp, #16
 80196d6:	af00      	add	r7, sp, #0
 80196d8:	60f8      	str	r0, [r7, #12]
 80196da:	60b9      	str	r1, [r7, #8]
 80196dc:	607a      	str	r2, [r7, #4]
  JFREE(object);
 80196de:	68b8      	ldr	r0, [r7, #8]
 80196e0:	f000 f8b0 	bl	8019844 <free>
}
 80196e4:	bf00      	nop
 80196e6:	3710      	adds	r7, #16
 80196e8:	46bd      	mov	sp, r7
 80196ea:	bd80      	pop	{r7, pc}

080196ec <jpeg_get_large>:
 * you probably won't be able to process useful-size images in only 64KB.
 */

GLOBAL(void FAR *)
jpeg_get_large (j_common_ptr cinfo, size_t sizeofobject)
{
 80196ec:	b580      	push	{r7, lr}
 80196ee:	b082      	sub	sp, #8
 80196f0:	af00      	add	r7, sp, #0
 80196f2:	6078      	str	r0, [r7, #4]
 80196f4:	6039      	str	r1, [r7, #0]
  return (void FAR *) JMALLOC(sizeofobject);
 80196f6:	6838      	ldr	r0, [r7, #0]
 80196f8:	f000 f89c 	bl	8019834 <malloc>
 80196fc:	4603      	mov	r3, r0
}
 80196fe:	4618      	mov	r0, r3
 8019700:	3708      	adds	r7, #8
 8019702:	46bd      	mov	sp, r7
 8019704:	bd80      	pop	{r7, pc}

08019706 <jpeg_free_large>:

GLOBAL(void)
jpeg_free_large (j_common_ptr cinfo, void FAR * object, size_t sizeofobject)
{
 8019706:	b580      	push	{r7, lr}
 8019708:	b084      	sub	sp, #16
 801970a:	af00      	add	r7, sp, #0
 801970c:	60f8      	str	r0, [r7, #12]
 801970e:	60b9      	str	r1, [r7, #8]
 8019710:	607a      	str	r2, [r7, #4]
  JFREE(object);
 8019712:	68b8      	ldr	r0, [r7, #8]
 8019714:	f000 f896 	bl	8019844 <free>
}
 8019718:	bf00      	nop
 801971a:	3710      	adds	r7, #16
 801971c:	46bd      	mov	sp, r7
 801971e:	bd80      	pop	{r7, pc}

08019720 <jpeg_mem_available>:
 */

GLOBAL(long)
jpeg_mem_available (j_common_ptr cinfo, long min_bytes_needed,
		    long max_bytes_needed, long already_allocated)
{
 8019720:	b480      	push	{r7}
 8019722:	b085      	sub	sp, #20
 8019724:	af00      	add	r7, sp, #0
 8019726:	60f8      	str	r0, [r7, #12]
 8019728:	60b9      	str	r1, [r7, #8]
 801972a:	607a      	str	r2, [r7, #4]
 801972c:	603b      	str	r3, [r7, #0]
  return max_bytes_needed;
 801972e:	687b      	ldr	r3, [r7, #4]
}
 8019730:	4618      	mov	r0, r3
 8019732:	3714      	adds	r7, #20
 8019734:	46bd      	mov	sp, r7
 8019736:	f85d 7b04 	ldr.w	r7, [sp], #4
 801973a:	4770      	bx	lr

0801973c <jpeg_open_backing_store>:
 */

GLOBAL(void)
jpeg_open_backing_store (j_common_ptr cinfo, backing_store_ptr info,
			 long total_bytes_needed)
{
 801973c:	b580      	push	{r7, lr}
 801973e:	b084      	sub	sp, #16
 8019740:	af00      	add	r7, sp, #0
 8019742:	60f8      	str	r0, [r7, #12]
 8019744:	60b9      	str	r1, [r7, #8]
 8019746:	607a      	str	r2, [r7, #4]
  ERREXIT(cinfo, JERR_NO_BACKING_STORE);
 8019748:	68fb      	ldr	r3, [r7, #12]
 801974a:	681b      	ldr	r3, [r3, #0]
 801974c:	2233      	movs	r2, #51	@ 0x33
 801974e:	615a      	str	r2, [r3, #20]
 8019750:	68fb      	ldr	r3, [r7, #12]
 8019752:	681b      	ldr	r3, [r3, #0]
 8019754:	681b      	ldr	r3, [r3, #0]
 8019756:	68f8      	ldr	r0, [r7, #12]
 8019758:	4798      	blx	r3
}
 801975a:	bf00      	nop
 801975c:	3710      	adds	r7, #16
 801975e:	46bd      	mov	sp, r7
 8019760:	bd80      	pop	{r7, pc}

08019762 <jpeg_mem_init>:
 * cleanup required.  Here, there isn't any.
 */

GLOBAL(long)
jpeg_mem_init (j_common_ptr cinfo)
{
 8019762:	b480      	push	{r7}
 8019764:	b083      	sub	sp, #12
 8019766:	af00      	add	r7, sp, #0
 8019768:	6078      	str	r0, [r7, #4]
  return 0;			/* just set max_memory_to_use to 0 */
 801976a:	2300      	movs	r3, #0
}
 801976c:	4618      	mov	r0, r3
 801976e:	370c      	adds	r7, #12
 8019770:	46bd      	mov	sp, r7
 8019772:	f85d 7b04 	ldr.w	r7, [sp], #4
 8019776:	4770      	bx	lr

08019778 <jpeg_mem_term>:

GLOBAL(void)
jpeg_mem_term (j_common_ptr cinfo)
{
 8019778:	b480      	push	{r7}
 801977a:	b083      	sub	sp, #12
 801977c:	af00      	add	r7, sp, #0
 801977e:	6078      	str	r0, [r7, #4]
}
 8019780:	bf00      	nop
 8019782:	370c      	adds	r7, #12
 8019784:	46bd      	mov	sp, r7
 8019786:	f85d 7b04 	ldr.w	r7, [sp], #4
 801978a:	4770      	bx	lr

0801978c <jdiv_round_up>:

GLOBAL(long)
jdiv_round_up (long a, long b)
/* Compute a/b rounded up to next integer, ie, ceil(a/b) */
/* Assumes a >= 0, b > 0 */
{
 801978c:	b480      	push	{r7}
 801978e:	b083      	sub	sp, #12
 8019790:	af00      	add	r7, sp, #0
 8019792:	6078      	str	r0, [r7, #4]
 8019794:	6039      	str	r1, [r7, #0]
  return (a + b - 1L) / b;
 8019796:	687a      	ldr	r2, [r7, #4]
 8019798:	683b      	ldr	r3, [r7, #0]
 801979a:	4413      	add	r3, r2
 801979c:	1e5a      	subs	r2, r3, #1
 801979e:	683b      	ldr	r3, [r7, #0]
 80197a0:	fb92 f3f3 	sdiv	r3, r2, r3
}
 80197a4:	4618      	mov	r0, r3
 80197a6:	370c      	adds	r7, #12
 80197a8:	46bd      	mov	sp, r7
 80197aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80197ae:	4770      	bx	lr

080197b0 <jround_up>:

GLOBAL(long)
jround_up (long a, long b)
/* Compute a rounded up to next multiple of b, ie, ceil(a/b)*b */
/* Assumes a >= 0, b > 0 */
{
 80197b0:	b480      	push	{r7}
 80197b2:	b083      	sub	sp, #12
 80197b4:	af00      	add	r7, sp, #0
 80197b6:	6078      	str	r0, [r7, #4]
 80197b8:	6039      	str	r1, [r7, #0]
  a += b - 1L;
 80197ba:	683b      	ldr	r3, [r7, #0]
 80197bc:	3b01      	subs	r3, #1
 80197be:	687a      	ldr	r2, [r7, #4]
 80197c0:	4413      	add	r3, r2
 80197c2:	607b      	str	r3, [r7, #4]
  return a - (a % b);
 80197c4:	687b      	ldr	r3, [r7, #4]
 80197c6:	683a      	ldr	r2, [r7, #0]
 80197c8:	fb93 f2f2 	sdiv	r2, r3, r2
 80197cc:	6839      	ldr	r1, [r7, #0]
 80197ce:	fb01 f202 	mul.w	r2, r1, r2
 80197d2:	1a9b      	subs	r3, r3, r2
 80197d4:	687a      	ldr	r2, [r7, #4]
 80197d6:	1ad3      	subs	r3, r2, r3
}
 80197d8:	4618      	mov	r0, r3
 80197da:	370c      	adds	r7, #12
 80197dc:	46bd      	mov	sp, r7
 80197de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80197e2:	4770      	bx	lr

080197e4 <jcopy_sample_rows>:
/* Copy some rows of samples from one place to another.
 * num_rows rows are copied from input_array[source_row++]
 * to output_array[dest_row++]; these areas may overlap for duplication.
 * The source and destination arrays must be at least as wide as num_cols.
 */
{
 80197e4:	b5f0      	push	{r4, r5, r6, r7, lr}
 80197e6:	b085      	sub	sp, #20
 80197e8:	af00      	add	r7, sp, #0
 80197ea:	60f8      	str	r0, [r7, #12]
 80197ec:	60b9      	str	r1, [r7, #8]
 80197ee:	607a      	str	r2, [r7, #4]
 80197f0:	603b      	str	r3, [r7, #0]
  register JSAMPROW inptr, outptr;
#ifdef FMEMCOPY
  register size_t count = (size_t) (num_cols * SIZEOF(JSAMPLE));
 80197f2:	6afd      	ldr	r5, [r7, #44]	@ 0x2c
#else
  register JDIMENSION count;
#endif
  register int row;

  input_array += source_row;
 80197f4:	68bb      	ldr	r3, [r7, #8]
 80197f6:	009b      	lsls	r3, r3, #2
 80197f8:	68fa      	ldr	r2, [r7, #12]
 80197fa:	4413      	add	r3, r2
 80197fc:	60fb      	str	r3, [r7, #12]
  output_array += dest_row;
 80197fe:	683b      	ldr	r3, [r7, #0]
 8019800:	009b      	lsls	r3, r3, #2
 8019802:	687a      	ldr	r2, [r7, #4]
 8019804:	4413      	add	r3, r2
 8019806:	607b      	str	r3, [r7, #4]

  for (row = num_rows; row > 0; row--) {
 8019808:	6abc      	ldr	r4, [r7, #40]	@ 0x28
 801980a:	e00c      	b.n	8019826 <jcopy_sample_rows+0x42>
    inptr = *input_array++;
 801980c:	68fb      	ldr	r3, [r7, #12]
 801980e:	1d1a      	adds	r2, r3, #4
 8019810:	60fa      	str	r2, [r7, #12]
 8019812:	6819      	ldr	r1, [r3, #0]
    outptr = *output_array++;
 8019814:	687b      	ldr	r3, [r7, #4]
 8019816:	1d1a      	adds	r2, r3, #4
 8019818:	607a      	str	r2, [r7, #4]
 801981a:	681e      	ldr	r6, [r3, #0]
#ifdef FMEMCOPY
    FMEMCOPY(outptr, inptr, count);
 801981c:	462a      	mov	r2, r5
 801981e:	4630      	mov	r0, r6
 8019820:	f000 f92a 	bl	8019a78 <memcpy>
  for (row = num_rows; row > 0; row--) {
 8019824:	3c01      	subs	r4, #1
 8019826:	2c00      	cmp	r4, #0
 8019828:	dcf0      	bgt.n	801980c <jcopy_sample_rows+0x28>
#else
    for (count = num_cols; count > 0; count--)
      *outptr++ = *inptr++;	/* needn't bother with GETJSAMPLE() here */
#endif
  }
}
 801982a:	bf00      	nop
 801982c:	bf00      	nop
 801982e:	3714      	adds	r7, #20
 8019830:	46bd      	mov	sp, r7
 8019832:	bdf0      	pop	{r4, r5, r6, r7, pc}

08019834 <malloc>:
 8019834:	4b02      	ldr	r3, [pc, #8]	@ (8019840 <malloc+0xc>)
 8019836:	4601      	mov	r1, r0
 8019838:	6818      	ldr	r0, [r3, #0]
 801983a:	f000 b82d 	b.w	8019898 <_malloc_r>
 801983e:	bf00      	nop
 8019840:	20000024 	.word	0x20000024

08019844 <free>:
 8019844:	4b02      	ldr	r3, [pc, #8]	@ (8019850 <free+0xc>)
 8019846:	4601      	mov	r1, r0
 8019848:	6818      	ldr	r0, [r3, #0]
 801984a:	f000 b923 	b.w	8019a94 <_free_r>
 801984e:	bf00      	nop
 8019850:	20000024 	.word	0x20000024

08019854 <sbrk_aligned>:
 8019854:	b570      	push	{r4, r5, r6, lr}
 8019856:	4e0f      	ldr	r6, [pc, #60]	@ (8019894 <sbrk_aligned+0x40>)
 8019858:	460c      	mov	r4, r1
 801985a:	6831      	ldr	r1, [r6, #0]
 801985c:	4605      	mov	r5, r0
 801985e:	b911      	cbnz	r1, 8019866 <sbrk_aligned+0x12>
 8019860:	f000 f8ce 	bl	8019a00 <_sbrk_r>
 8019864:	6030      	str	r0, [r6, #0]
 8019866:	4621      	mov	r1, r4
 8019868:	4628      	mov	r0, r5
 801986a:	f000 f8c9 	bl	8019a00 <_sbrk_r>
 801986e:	1c43      	adds	r3, r0, #1
 8019870:	d103      	bne.n	801987a <sbrk_aligned+0x26>
 8019872:	f04f 34ff 	mov.w	r4, #4294967295
 8019876:	4620      	mov	r0, r4
 8019878:	bd70      	pop	{r4, r5, r6, pc}
 801987a:	1cc4      	adds	r4, r0, #3
 801987c:	f024 0403 	bic.w	r4, r4, #3
 8019880:	42a0      	cmp	r0, r4
 8019882:	d0f8      	beq.n	8019876 <sbrk_aligned+0x22>
 8019884:	1a21      	subs	r1, r4, r0
 8019886:	4628      	mov	r0, r5
 8019888:	f000 f8ba 	bl	8019a00 <_sbrk_r>
 801988c:	3001      	adds	r0, #1
 801988e:	d1f2      	bne.n	8019876 <sbrk_aligned+0x22>
 8019890:	e7ef      	b.n	8019872 <sbrk_aligned+0x1e>
 8019892:	bf00      	nop
 8019894:	20000140 	.word	0x20000140

08019898 <_malloc_r>:
 8019898:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 801989c:	1ccd      	adds	r5, r1, #3
 801989e:	f025 0503 	bic.w	r5, r5, #3
 80198a2:	3508      	adds	r5, #8
 80198a4:	2d0c      	cmp	r5, #12
 80198a6:	bf38      	it	cc
 80198a8:	250c      	movcc	r5, #12
 80198aa:	2d00      	cmp	r5, #0
 80198ac:	4606      	mov	r6, r0
 80198ae:	db01      	blt.n	80198b4 <_malloc_r+0x1c>
 80198b0:	42a9      	cmp	r1, r5
 80198b2:	d904      	bls.n	80198be <_malloc_r+0x26>
 80198b4:	230c      	movs	r3, #12
 80198b6:	6033      	str	r3, [r6, #0]
 80198b8:	2000      	movs	r0, #0
 80198ba:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80198be:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8019994 <_malloc_r+0xfc>
 80198c2:	f000 f869 	bl	8019998 <__malloc_lock>
 80198c6:	f8d8 3000 	ldr.w	r3, [r8]
 80198ca:	461c      	mov	r4, r3
 80198cc:	bb44      	cbnz	r4, 8019920 <_malloc_r+0x88>
 80198ce:	4629      	mov	r1, r5
 80198d0:	4630      	mov	r0, r6
 80198d2:	f7ff ffbf 	bl	8019854 <sbrk_aligned>
 80198d6:	1c43      	adds	r3, r0, #1
 80198d8:	4604      	mov	r4, r0
 80198da:	d158      	bne.n	801998e <_malloc_r+0xf6>
 80198dc:	f8d8 4000 	ldr.w	r4, [r8]
 80198e0:	4627      	mov	r7, r4
 80198e2:	2f00      	cmp	r7, #0
 80198e4:	d143      	bne.n	801996e <_malloc_r+0xd6>
 80198e6:	2c00      	cmp	r4, #0
 80198e8:	d04b      	beq.n	8019982 <_malloc_r+0xea>
 80198ea:	6823      	ldr	r3, [r4, #0]
 80198ec:	4639      	mov	r1, r7
 80198ee:	4630      	mov	r0, r6
 80198f0:	eb04 0903 	add.w	r9, r4, r3
 80198f4:	f000 f884 	bl	8019a00 <_sbrk_r>
 80198f8:	4581      	cmp	r9, r0
 80198fa:	d142      	bne.n	8019982 <_malloc_r+0xea>
 80198fc:	6821      	ldr	r1, [r4, #0]
 80198fe:	1a6d      	subs	r5, r5, r1
 8019900:	4629      	mov	r1, r5
 8019902:	4630      	mov	r0, r6
 8019904:	f7ff ffa6 	bl	8019854 <sbrk_aligned>
 8019908:	3001      	adds	r0, #1
 801990a:	d03a      	beq.n	8019982 <_malloc_r+0xea>
 801990c:	6823      	ldr	r3, [r4, #0]
 801990e:	442b      	add	r3, r5
 8019910:	6023      	str	r3, [r4, #0]
 8019912:	f8d8 3000 	ldr.w	r3, [r8]
 8019916:	685a      	ldr	r2, [r3, #4]
 8019918:	bb62      	cbnz	r2, 8019974 <_malloc_r+0xdc>
 801991a:	f8c8 7000 	str.w	r7, [r8]
 801991e:	e00f      	b.n	8019940 <_malloc_r+0xa8>
 8019920:	6822      	ldr	r2, [r4, #0]
 8019922:	1b52      	subs	r2, r2, r5
 8019924:	d420      	bmi.n	8019968 <_malloc_r+0xd0>
 8019926:	2a0b      	cmp	r2, #11
 8019928:	d917      	bls.n	801995a <_malloc_r+0xc2>
 801992a:	1961      	adds	r1, r4, r5
 801992c:	42a3      	cmp	r3, r4
 801992e:	6025      	str	r5, [r4, #0]
 8019930:	bf18      	it	ne
 8019932:	6059      	strne	r1, [r3, #4]
 8019934:	6863      	ldr	r3, [r4, #4]
 8019936:	bf08      	it	eq
 8019938:	f8c8 1000 	streq.w	r1, [r8]
 801993c:	5162      	str	r2, [r4, r5]
 801993e:	604b      	str	r3, [r1, #4]
 8019940:	4630      	mov	r0, r6
 8019942:	f000 f82f 	bl	80199a4 <__malloc_unlock>
 8019946:	f104 000b 	add.w	r0, r4, #11
 801994a:	1d23      	adds	r3, r4, #4
 801994c:	f020 0007 	bic.w	r0, r0, #7
 8019950:	1ac2      	subs	r2, r0, r3
 8019952:	bf1c      	itt	ne
 8019954:	1a1b      	subne	r3, r3, r0
 8019956:	50a3      	strne	r3, [r4, r2]
 8019958:	e7af      	b.n	80198ba <_malloc_r+0x22>
 801995a:	6862      	ldr	r2, [r4, #4]
 801995c:	42a3      	cmp	r3, r4
 801995e:	bf0c      	ite	eq
 8019960:	f8c8 2000 	streq.w	r2, [r8]
 8019964:	605a      	strne	r2, [r3, #4]
 8019966:	e7eb      	b.n	8019940 <_malloc_r+0xa8>
 8019968:	4623      	mov	r3, r4
 801996a:	6864      	ldr	r4, [r4, #4]
 801996c:	e7ae      	b.n	80198cc <_malloc_r+0x34>
 801996e:	463c      	mov	r4, r7
 8019970:	687f      	ldr	r7, [r7, #4]
 8019972:	e7b6      	b.n	80198e2 <_malloc_r+0x4a>
 8019974:	461a      	mov	r2, r3
 8019976:	685b      	ldr	r3, [r3, #4]
 8019978:	42a3      	cmp	r3, r4
 801997a:	d1fb      	bne.n	8019974 <_malloc_r+0xdc>
 801997c:	2300      	movs	r3, #0
 801997e:	6053      	str	r3, [r2, #4]
 8019980:	e7de      	b.n	8019940 <_malloc_r+0xa8>
 8019982:	230c      	movs	r3, #12
 8019984:	6033      	str	r3, [r6, #0]
 8019986:	4630      	mov	r0, r6
 8019988:	f000 f80c 	bl	80199a4 <__malloc_unlock>
 801998c:	e794      	b.n	80198b8 <_malloc_r+0x20>
 801998e:	6005      	str	r5, [r0, #0]
 8019990:	e7d6      	b.n	8019940 <_malloc_r+0xa8>
 8019992:	bf00      	nop
 8019994:	20000144 	.word	0x20000144

08019998 <__malloc_lock>:
 8019998:	4801      	ldr	r0, [pc, #4]	@ (80199a0 <__malloc_lock+0x8>)
 801999a:	f000 b86b 	b.w	8019a74 <__retarget_lock_acquire_recursive>
 801999e:	bf00      	nop
 80199a0:	20000284 	.word	0x20000284

080199a4 <__malloc_unlock>:
 80199a4:	4801      	ldr	r0, [pc, #4]	@ (80199ac <__malloc_unlock+0x8>)
 80199a6:	f000 b866 	b.w	8019a76 <__retarget_lock_release_recursive>
 80199aa:	bf00      	nop
 80199ac:	20000284 	.word	0x20000284

080199b0 <siprintf>:
 80199b0:	b40e      	push	{r1, r2, r3}
 80199b2:	b500      	push	{lr}
 80199b4:	b09c      	sub	sp, #112	@ 0x70
 80199b6:	ab1d      	add	r3, sp, #116	@ 0x74
 80199b8:	9002      	str	r0, [sp, #8]
 80199ba:	9006      	str	r0, [sp, #24]
 80199bc:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 80199c0:	4809      	ldr	r0, [pc, #36]	@ (80199e8 <siprintf+0x38>)
 80199c2:	9107      	str	r1, [sp, #28]
 80199c4:	9104      	str	r1, [sp, #16]
 80199c6:	4909      	ldr	r1, [pc, #36]	@ (80199ec <siprintf+0x3c>)
 80199c8:	f853 2b04 	ldr.w	r2, [r3], #4
 80199cc:	9105      	str	r1, [sp, #20]
 80199ce:	6800      	ldr	r0, [r0, #0]
 80199d0:	9301      	str	r3, [sp, #4]
 80199d2:	a902      	add	r1, sp, #8
 80199d4:	f000 f904 	bl	8019be0 <_svfiprintf_r>
 80199d8:	9b02      	ldr	r3, [sp, #8]
 80199da:	2200      	movs	r2, #0
 80199dc:	701a      	strb	r2, [r3, #0]
 80199de:	b01c      	add	sp, #112	@ 0x70
 80199e0:	f85d eb04 	ldr.w	lr, [sp], #4
 80199e4:	b003      	add	sp, #12
 80199e6:	4770      	bx	lr
 80199e8:	20000024 	.word	0x20000024
 80199ec:	ffff0208 	.word	0xffff0208

080199f0 <memset>:
 80199f0:	4402      	add	r2, r0
 80199f2:	4603      	mov	r3, r0
 80199f4:	4293      	cmp	r3, r2
 80199f6:	d100      	bne.n	80199fa <memset+0xa>
 80199f8:	4770      	bx	lr
 80199fa:	f803 1b01 	strb.w	r1, [r3], #1
 80199fe:	e7f9      	b.n	80199f4 <memset+0x4>

08019a00 <_sbrk_r>:
 8019a00:	b538      	push	{r3, r4, r5, lr}
 8019a02:	4d06      	ldr	r5, [pc, #24]	@ (8019a1c <_sbrk_r+0x1c>)
 8019a04:	2300      	movs	r3, #0
 8019a06:	4604      	mov	r4, r0
 8019a08:	4608      	mov	r0, r1
 8019a0a:	602b      	str	r3, [r5, #0]
 8019a0c:	f7e7 fc72 	bl	80012f4 <_sbrk>
 8019a10:	1c43      	adds	r3, r0, #1
 8019a12:	d102      	bne.n	8019a1a <_sbrk_r+0x1a>
 8019a14:	682b      	ldr	r3, [r5, #0]
 8019a16:	b103      	cbz	r3, 8019a1a <_sbrk_r+0x1a>
 8019a18:	6023      	str	r3, [r4, #0]
 8019a1a:	bd38      	pop	{r3, r4, r5, pc}
 8019a1c:	20000280 	.word	0x20000280

08019a20 <__errno>:
 8019a20:	4b01      	ldr	r3, [pc, #4]	@ (8019a28 <__errno+0x8>)
 8019a22:	6818      	ldr	r0, [r3, #0]
 8019a24:	4770      	bx	lr
 8019a26:	bf00      	nop
 8019a28:	20000024 	.word	0x20000024

08019a2c <__libc_init_array>:
 8019a2c:	b570      	push	{r4, r5, r6, lr}
 8019a2e:	4d0d      	ldr	r5, [pc, #52]	@ (8019a64 <__libc_init_array+0x38>)
 8019a30:	4c0d      	ldr	r4, [pc, #52]	@ (8019a68 <__libc_init_array+0x3c>)
 8019a32:	1b64      	subs	r4, r4, r5
 8019a34:	10a4      	asrs	r4, r4, #2
 8019a36:	2600      	movs	r6, #0
 8019a38:	42a6      	cmp	r6, r4
 8019a3a:	d109      	bne.n	8019a50 <__libc_init_array+0x24>
 8019a3c:	4d0b      	ldr	r5, [pc, #44]	@ (8019a6c <__libc_init_array+0x40>)
 8019a3e:	4c0c      	ldr	r4, [pc, #48]	@ (8019a70 <__libc_init_array+0x44>)
 8019a40:	f000 fba8 	bl	801a194 <_init>
 8019a44:	1b64      	subs	r4, r4, r5
 8019a46:	10a4      	asrs	r4, r4, #2
 8019a48:	2600      	movs	r6, #0
 8019a4a:	42a6      	cmp	r6, r4
 8019a4c:	d105      	bne.n	8019a5a <__libc_init_array+0x2e>
 8019a4e:	bd70      	pop	{r4, r5, r6, pc}
 8019a50:	f855 3b04 	ldr.w	r3, [r5], #4
 8019a54:	4798      	blx	r3
 8019a56:	3601      	adds	r6, #1
 8019a58:	e7ee      	b.n	8019a38 <__libc_init_array+0xc>
 8019a5a:	f855 3b04 	ldr.w	r3, [r5], #4
 8019a5e:	4798      	blx	r3
 8019a60:	3601      	adds	r6, #1
 8019a62:	e7f2      	b.n	8019a4a <__libc_init_array+0x1e>
 8019a64:	0801c310 	.word	0x0801c310
 8019a68:	0801c310 	.word	0x0801c310
 8019a6c:	0801c310 	.word	0x0801c310
 8019a70:	0801c314 	.word	0x0801c314

08019a74 <__retarget_lock_acquire_recursive>:
 8019a74:	4770      	bx	lr

08019a76 <__retarget_lock_release_recursive>:
 8019a76:	4770      	bx	lr

08019a78 <memcpy>:
 8019a78:	440a      	add	r2, r1
 8019a7a:	4291      	cmp	r1, r2
 8019a7c:	f100 33ff 	add.w	r3, r0, #4294967295
 8019a80:	d100      	bne.n	8019a84 <memcpy+0xc>
 8019a82:	4770      	bx	lr
 8019a84:	b510      	push	{r4, lr}
 8019a86:	f811 4b01 	ldrb.w	r4, [r1], #1
 8019a8a:	f803 4f01 	strb.w	r4, [r3, #1]!
 8019a8e:	4291      	cmp	r1, r2
 8019a90:	d1f9      	bne.n	8019a86 <memcpy+0xe>
 8019a92:	bd10      	pop	{r4, pc}

08019a94 <_free_r>:
 8019a94:	b538      	push	{r3, r4, r5, lr}
 8019a96:	4605      	mov	r5, r0
 8019a98:	2900      	cmp	r1, #0
 8019a9a:	d041      	beq.n	8019b20 <_free_r+0x8c>
 8019a9c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8019aa0:	1f0c      	subs	r4, r1, #4
 8019aa2:	2b00      	cmp	r3, #0
 8019aa4:	bfb8      	it	lt
 8019aa6:	18e4      	addlt	r4, r4, r3
 8019aa8:	f7ff ff76 	bl	8019998 <__malloc_lock>
 8019aac:	4a1d      	ldr	r2, [pc, #116]	@ (8019b24 <_free_r+0x90>)
 8019aae:	6813      	ldr	r3, [r2, #0]
 8019ab0:	b933      	cbnz	r3, 8019ac0 <_free_r+0x2c>
 8019ab2:	6063      	str	r3, [r4, #4]
 8019ab4:	6014      	str	r4, [r2, #0]
 8019ab6:	4628      	mov	r0, r5
 8019ab8:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8019abc:	f7ff bf72 	b.w	80199a4 <__malloc_unlock>
 8019ac0:	42a3      	cmp	r3, r4
 8019ac2:	d908      	bls.n	8019ad6 <_free_r+0x42>
 8019ac4:	6820      	ldr	r0, [r4, #0]
 8019ac6:	1821      	adds	r1, r4, r0
 8019ac8:	428b      	cmp	r3, r1
 8019aca:	bf01      	itttt	eq
 8019acc:	6819      	ldreq	r1, [r3, #0]
 8019ace:	685b      	ldreq	r3, [r3, #4]
 8019ad0:	1809      	addeq	r1, r1, r0
 8019ad2:	6021      	streq	r1, [r4, #0]
 8019ad4:	e7ed      	b.n	8019ab2 <_free_r+0x1e>
 8019ad6:	461a      	mov	r2, r3
 8019ad8:	685b      	ldr	r3, [r3, #4]
 8019ada:	b10b      	cbz	r3, 8019ae0 <_free_r+0x4c>
 8019adc:	42a3      	cmp	r3, r4
 8019ade:	d9fa      	bls.n	8019ad6 <_free_r+0x42>
 8019ae0:	6811      	ldr	r1, [r2, #0]
 8019ae2:	1850      	adds	r0, r2, r1
 8019ae4:	42a0      	cmp	r0, r4
 8019ae6:	d10b      	bne.n	8019b00 <_free_r+0x6c>
 8019ae8:	6820      	ldr	r0, [r4, #0]
 8019aea:	4401      	add	r1, r0
 8019aec:	1850      	adds	r0, r2, r1
 8019aee:	4283      	cmp	r3, r0
 8019af0:	6011      	str	r1, [r2, #0]
 8019af2:	d1e0      	bne.n	8019ab6 <_free_r+0x22>
 8019af4:	6818      	ldr	r0, [r3, #0]
 8019af6:	685b      	ldr	r3, [r3, #4]
 8019af8:	6053      	str	r3, [r2, #4]
 8019afa:	4408      	add	r0, r1
 8019afc:	6010      	str	r0, [r2, #0]
 8019afe:	e7da      	b.n	8019ab6 <_free_r+0x22>
 8019b00:	d902      	bls.n	8019b08 <_free_r+0x74>
 8019b02:	230c      	movs	r3, #12
 8019b04:	602b      	str	r3, [r5, #0]
 8019b06:	e7d6      	b.n	8019ab6 <_free_r+0x22>
 8019b08:	6820      	ldr	r0, [r4, #0]
 8019b0a:	1821      	adds	r1, r4, r0
 8019b0c:	428b      	cmp	r3, r1
 8019b0e:	bf04      	itt	eq
 8019b10:	6819      	ldreq	r1, [r3, #0]
 8019b12:	685b      	ldreq	r3, [r3, #4]
 8019b14:	6063      	str	r3, [r4, #4]
 8019b16:	bf04      	itt	eq
 8019b18:	1809      	addeq	r1, r1, r0
 8019b1a:	6021      	streq	r1, [r4, #0]
 8019b1c:	6054      	str	r4, [r2, #4]
 8019b1e:	e7ca      	b.n	8019ab6 <_free_r+0x22>
 8019b20:	bd38      	pop	{r3, r4, r5, pc}
 8019b22:	bf00      	nop
 8019b24:	20000144 	.word	0x20000144

08019b28 <__ssputs_r>:
 8019b28:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8019b2c:	688e      	ldr	r6, [r1, #8]
 8019b2e:	461f      	mov	r7, r3
 8019b30:	42be      	cmp	r6, r7
 8019b32:	680b      	ldr	r3, [r1, #0]
 8019b34:	4682      	mov	sl, r0
 8019b36:	460c      	mov	r4, r1
 8019b38:	4690      	mov	r8, r2
 8019b3a:	d82d      	bhi.n	8019b98 <__ssputs_r+0x70>
 8019b3c:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8019b40:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 8019b44:	d026      	beq.n	8019b94 <__ssputs_r+0x6c>
 8019b46:	6965      	ldr	r5, [r4, #20]
 8019b48:	6909      	ldr	r1, [r1, #16]
 8019b4a:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8019b4e:	eba3 0901 	sub.w	r9, r3, r1
 8019b52:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8019b56:	1c7b      	adds	r3, r7, #1
 8019b58:	444b      	add	r3, r9
 8019b5a:	106d      	asrs	r5, r5, #1
 8019b5c:	429d      	cmp	r5, r3
 8019b5e:	bf38      	it	cc
 8019b60:	461d      	movcc	r5, r3
 8019b62:	0553      	lsls	r3, r2, #21
 8019b64:	d527      	bpl.n	8019bb6 <__ssputs_r+0x8e>
 8019b66:	4629      	mov	r1, r5
 8019b68:	f7ff fe96 	bl	8019898 <_malloc_r>
 8019b6c:	4606      	mov	r6, r0
 8019b6e:	b360      	cbz	r0, 8019bca <__ssputs_r+0xa2>
 8019b70:	6921      	ldr	r1, [r4, #16]
 8019b72:	464a      	mov	r2, r9
 8019b74:	f7ff ff80 	bl	8019a78 <memcpy>
 8019b78:	89a3      	ldrh	r3, [r4, #12]
 8019b7a:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 8019b7e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8019b82:	81a3      	strh	r3, [r4, #12]
 8019b84:	6126      	str	r6, [r4, #16]
 8019b86:	6165      	str	r5, [r4, #20]
 8019b88:	444e      	add	r6, r9
 8019b8a:	eba5 0509 	sub.w	r5, r5, r9
 8019b8e:	6026      	str	r6, [r4, #0]
 8019b90:	60a5      	str	r5, [r4, #8]
 8019b92:	463e      	mov	r6, r7
 8019b94:	42be      	cmp	r6, r7
 8019b96:	d900      	bls.n	8019b9a <__ssputs_r+0x72>
 8019b98:	463e      	mov	r6, r7
 8019b9a:	6820      	ldr	r0, [r4, #0]
 8019b9c:	4632      	mov	r2, r6
 8019b9e:	4641      	mov	r1, r8
 8019ba0:	f000 faa8 	bl	801a0f4 <memmove>
 8019ba4:	68a3      	ldr	r3, [r4, #8]
 8019ba6:	1b9b      	subs	r3, r3, r6
 8019ba8:	60a3      	str	r3, [r4, #8]
 8019baa:	6823      	ldr	r3, [r4, #0]
 8019bac:	4433      	add	r3, r6
 8019bae:	6023      	str	r3, [r4, #0]
 8019bb0:	2000      	movs	r0, #0
 8019bb2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8019bb6:	462a      	mov	r2, r5
 8019bb8:	f000 fab6 	bl	801a128 <_realloc_r>
 8019bbc:	4606      	mov	r6, r0
 8019bbe:	2800      	cmp	r0, #0
 8019bc0:	d1e0      	bne.n	8019b84 <__ssputs_r+0x5c>
 8019bc2:	6921      	ldr	r1, [r4, #16]
 8019bc4:	4650      	mov	r0, sl
 8019bc6:	f7ff ff65 	bl	8019a94 <_free_r>
 8019bca:	230c      	movs	r3, #12
 8019bcc:	f8ca 3000 	str.w	r3, [sl]
 8019bd0:	89a3      	ldrh	r3, [r4, #12]
 8019bd2:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8019bd6:	81a3      	strh	r3, [r4, #12]
 8019bd8:	f04f 30ff 	mov.w	r0, #4294967295
 8019bdc:	e7e9      	b.n	8019bb2 <__ssputs_r+0x8a>
	...

08019be0 <_svfiprintf_r>:
 8019be0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8019be4:	4698      	mov	r8, r3
 8019be6:	898b      	ldrh	r3, [r1, #12]
 8019be8:	061b      	lsls	r3, r3, #24
 8019bea:	b09d      	sub	sp, #116	@ 0x74
 8019bec:	4607      	mov	r7, r0
 8019bee:	460d      	mov	r5, r1
 8019bf0:	4614      	mov	r4, r2
 8019bf2:	d510      	bpl.n	8019c16 <_svfiprintf_r+0x36>
 8019bf4:	690b      	ldr	r3, [r1, #16]
 8019bf6:	b973      	cbnz	r3, 8019c16 <_svfiprintf_r+0x36>
 8019bf8:	2140      	movs	r1, #64	@ 0x40
 8019bfa:	f7ff fe4d 	bl	8019898 <_malloc_r>
 8019bfe:	6028      	str	r0, [r5, #0]
 8019c00:	6128      	str	r0, [r5, #16]
 8019c02:	b930      	cbnz	r0, 8019c12 <_svfiprintf_r+0x32>
 8019c04:	230c      	movs	r3, #12
 8019c06:	603b      	str	r3, [r7, #0]
 8019c08:	f04f 30ff 	mov.w	r0, #4294967295
 8019c0c:	b01d      	add	sp, #116	@ 0x74
 8019c0e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8019c12:	2340      	movs	r3, #64	@ 0x40
 8019c14:	616b      	str	r3, [r5, #20]
 8019c16:	2300      	movs	r3, #0
 8019c18:	9309      	str	r3, [sp, #36]	@ 0x24
 8019c1a:	2320      	movs	r3, #32
 8019c1c:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8019c20:	f8cd 800c 	str.w	r8, [sp, #12]
 8019c24:	2330      	movs	r3, #48	@ 0x30
 8019c26:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 8019dc4 <_svfiprintf_r+0x1e4>
 8019c2a:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8019c2e:	f04f 0901 	mov.w	r9, #1
 8019c32:	4623      	mov	r3, r4
 8019c34:	469a      	mov	sl, r3
 8019c36:	f813 2b01 	ldrb.w	r2, [r3], #1
 8019c3a:	b10a      	cbz	r2, 8019c40 <_svfiprintf_r+0x60>
 8019c3c:	2a25      	cmp	r2, #37	@ 0x25
 8019c3e:	d1f9      	bne.n	8019c34 <_svfiprintf_r+0x54>
 8019c40:	ebba 0b04 	subs.w	fp, sl, r4
 8019c44:	d00b      	beq.n	8019c5e <_svfiprintf_r+0x7e>
 8019c46:	465b      	mov	r3, fp
 8019c48:	4622      	mov	r2, r4
 8019c4a:	4629      	mov	r1, r5
 8019c4c:	4638      	mov	r0, r7
 8019c4e:	f7ff ff6b 	bl	8019b28 <__ssputs_r>
 8019c52:	3001      	adds	r0, #1
 8019c54:	f000 80a7 	beq.w	8019da6 <_svfiprintf_r+0x1c6>
 8019c58:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8019c5a:	445a      	add	r2, fp
 8019c5c:	9209      	str	r2, [sp, #36]	@ 0x24
 8019c5e:	f89a 3000 	ldrb.w	r3, [sl]
 8019c62:	2b00      	cmp	r3, #0
 8019c64:	f000 809f 	beq.w	8019da6 <_svfiprintf_r+0x1c6>
 8019c68:	2300      	movs	r3, #0
 8019c6a:	f04f 32ff 	mov.w	r2, #4294967295
 8019c6e:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8019c72:	f10a 0a01 	add.w	sl, sl, #1
 8019c76:	9304      	str	r3, [sp, #16]
 8019c78:	9307      	str	r3, [sp, #28]
 8019c7a:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8019c7e:	931a      	str	r3, [sp, #104]	@ 0x68
 8019c80:	4654      	mov	r4, sl
 8019c82:	2205      	movs	r2, #5
 8019c84:	f814 1b01 	ldrb.w	r1, [r4], #1
 8019c88:	484e      	ldr	r0, [pc, #312]	@ (8019dc4 <_svfiprintf_r+0x1e4>)
 8019c8a:	f7e6 faa9 	bl	80001e0 <memchr>
 8019c8e:	9a04      	ldr	r2, [sp, #16]
 8019c90:	b9d8      	cbnz	r0, 8019cca <_svfiprintf_r+0xea>
 8019c92:	06d0      	lsls	r0, r2, #27
 8019c94:	bf44      	itt	mi
 8019c96:	2320      	movmi	r3, #32
 8019c98:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8019c9c:	0711      	lsls	r1, r2, #28
 8019c9e:	bf44      	itt	mi
 8019ca0:	232b      	movmi	r3, #43	@ 0x2b
 8019ca2:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8019ca6:	f89a 3000 	ldrb.w	r3, [sl]
 8019caa:	2b2a      	cmp	r3, #42	@ 0x2a
 8019cac:	d015      	beq.n	8019cda <_svfiprintf_r+0xfa>
 8019cae:	9a07      	ldr	r2, [sp, #28]
 8019cb0:	4654      	mov	r4, sl
 8019cb2:	2000      	movs	r0, #0
 8019cb4:	f04f 0c0a 	mov.w	ip, #10
 8019cb8:	4621      	mov	r1, r4
 8019cba:	f811 3b01 	ldrb.w	r3, [r1], #1
 8019cbe:	3b30      	subs	r3, #48	@ 0x30
 8019cc0:	2b09      	cmp	r3, #9
 8019cc2:	d94b      	bls.n	8019d5c <_svfiprintf_r+0x17c>
 8019cc4:	b1b0      	cbz	r0, 8019cf4 <_svfiprintf_r+0x114>
 8019cc6:	9207      	str	r2, [sp, #28]
 8019cc8:	e014      	b.n	8019cf4 <_svfiprintf_r+0x114>
 8019cca:	eba0 0308 	sub.w	r3, r0, r8
 8019cce:	fa09 f303 	lsl.w	r3, r9, r3
 8019cd2:	4313      	orrs	r3, r2
 8019cd4:	9304      	str	r3, [sp, #16]
 8019cd6:	46a2      	mov	sl, r4
 8019cd8:	e7d2      	b.n	8019c80 <_svfiprintf_r+0xa0>
 8019cda:	9b03      	ldr	r3, [sp, #12]
 8019cdc:	1d19      	adds	r1, r3, #4
 8019cde:	681b      	ldr	r3, [r3, #0]
 8019ce0:	9103      	str	r1, [sp, #12]
 8019ce2:	2b00      	cmp	r3, #0
 8019ce4:	bfbb      	ittet	lt
 8019ce6:	425b      	neglt	r3, r3
 8019ce8:	f042 0202 	orrlt.w	r2, r2, #2
 8019cec:	9307      	strge	r3, [sp, #28]
 8019cee:	9307      	strlt	r3, [sp, #28]
 8019cf0:	bfb8      	it	lt
 8019cf2:	9204      	strlt	r2, [sp, #16]
 8019cf4:	7823      	ldrb	r3, [r4, #0]
 8019cf6:	2b2e      	cmp	r3, #46	@ 0x2e
 8019cf8:	d10a      	bne.n	8019d10 <_svfiprintf_r+0x130>
 8019cfa:	7863      	ldrb	r3, [r4, #1]
 8019cfc:	2b2a      	cmp	r3, #42	@ 0x2a
 8019cfe:	d132      	bne.n	8019d66 <_svfiprintf_r+0x186>
 8019d00:	9b03      	ldr	r3, [sp, #12]
 8019d02:	1d1a      	adds	r2, r3, #4
 8019d04:	681b      	ldr	r3, [r3, #0]
 8019d06:	9203      	str	r2, [sp, #12]
 8019d08:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8019d0c:	3402      	adds	r4, #2
 8019d0e:	9305      	str	r3, [sp, #20]
 8019d10:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 8019dd4 <_svfiprintf_r+0x1f4>
 8019d14:	7821      	ldrb	r1, [r4, #0]
 8019d16:	2203      	movs	r2, #3
 8019d18:	4650      	mov	r0, sl
 8019d1a:	f7e6 fa61 	bl	80001e0 <memchr>
 8019d1e:	b138      	cbz	r0, 8019d30 <_svfiprintf_r+0x150>
 8019d20:	9b04      	ldr	r3, [sp, #16]
 8019d22:	eba0 000a 	sub.w	r0, r0, sl
 8019d26:	2240      	movs	r2, #64	@ 0x40
 8019d28:	4082      	lsls	r2, r0
 8019d2a:	4313      	orrs	r3, r2
 8019d2c:	3401      	adds	r4, #1
 8019d2e:	9304      	str	r3, [sp, #16]
 8019d30:	f814 1b01 	ldrb.w	r1, [r4], #1
 8019d34:	4824      	ldr	r0, [pc, #144]	@ (8019dc8 <_svfiprintf_r+0x1e8>)
 8019d36:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8019d3a:	2206      	movs	r2, #6
 8019d3c:	f7e6 fa50 	bl	80001e0 <memchr>
 8019d40:	2800      	cmp	r0, #0
 8019d42:	d036      	beq.n	8019db2 <_svfiprintf_r+0x1d2>
 8019d44:	4b21      	ldr	r3, [pc, #132]	@ (8019dcc <_svfiprintf_r+0x1ec>)
 8019d46:	bb1b      	cbnz	r3, 8019d90 <_svfiprintf_r+0x1b0>
 8019d48:	9b03      	ldr	r3, [sp, #12]
 8019d4a:	3307      	adds	r3, #7
 8019d4c:	f023 0307 	bic.w	r3, r3, #7
 8019d50:	3308      	adds	r3, #8
 8019d52:	9303      	str	r3, [sp, #12]
 8019d54:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8019d56:	4433      	add	r3, r6
 8019d58:	9309      	str	r3, [sp, #36]	@ 0x24
 8019d5a:	e76a      	b.n	8019c32 <_svfiprintf_r+0x52>
 8019d5c:	fb0c 3202 	mla	r2, ip, r2, r3
 8019d60:	460c      	mov	r4, r1
 8019d62:	2001      	movs	r0, #1
 8019d64:	e7a8      	b.n	8019cb8 <_svfiprintf_r+0xd8>
 8019d66:	2300      	movs	r3, #0
 8019d68:	3401      	adds	r4, #1
 8019d6a:	9305      	str	r3, [sp, #20]
 8019d6c:	4619      	mov	r1, r3
 8019d6e:	f04f 0c0a 	mov.w	ip, #10
 8019d72:	4620      	mov	r0, r4
 8019d74:	f810 2b01 	ldrb.w	r2, [r0], #1
 8019d78:	3a30      	subs	r2, #48	@ 0x30
 8019d7a:	2a09      	cmp	r2, #9
 8019d7c:	d903      	bls.n	8019d86 <_svfiprintf_r+0x1a6>
 8019d7e:	2b00      	cmp	r3, #0
 8019d80:	d0c6      	beq.n	8019d10 <_svfiprintf_r+0x130>
 8019d82:	9105      	str	r1, [sp, #20]
 8019d84:	e7c4      	b.n	8019d10 <_svfiprintf_r+0x130>
 8019d86:	fb0c 2101 	mla	r1, ip, r1, r2
 8019d8a:	4604      	mov	r4, r0
 8019d8c:	2301      	movs	r3, #1
 8019d8e:	e7f0      	b.n	8019d72 <_svfiprintf_r+0x192>
 8019d90:	ab03      	add	r3, sp, #12
 8019d92:	9300      	str	r3, [sp, #0]
 8019d94:	462a      	mov	r2, r5
 8019d96:	4b0e      	ldr	r3, [pc, #56]	@ (8019dd0 <_svfiprintf_r+0x1f0>)
 8019d98:	a904      	add	r1, sp, #16
 8019d9a:	4638      	mov	r0, r7
 8019d9c:	f3af 8000 	nop.w
 8019da0:	1c42      	adds	r2, r0, #1
 8019da2:	4606      	mov	r6, r0
 8019da4:	d1d6      	bne.n	8019d54 <_svfiprintf_r+0x174>
 8019da6:	89ab      	ldrh	r3, [r5, #12]
 8019da8:	065b      	lsls	r3, r3, #25
 8019daa:	f53f af2d 	bmi.w	8019c08 <_svfiprintf_r+0x28>
 8019dae:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8019db0:	e72c      	b.n	8019c0c <_svfiprintf_r+0x2c>
 8019db2:	ab03      	add	r3, sp, #12
 8019db4:	9300      	str	r3, [sp, #0]
 8019db6:	462a      	mov	r2, r5
 8019db8:	4b05      	ldr	r3, [pc, #20]	@ (8019dd0 <_svfiprintf_r+0x1f0>)
 8019dba:	a904      	add	r1, sp, #16
 8019dbc:	4638      	mov	r0, r7
 8019dbe:	f000 f879 	bl	8019eb4 <_printf_i>
 8019dc2:	e7ed      	b.n	8019da0 <_svfiprintf_r+0x1c0>
 8019dc4:	0801c2d4 	.word	0x0801c2d4
 8019dc8:	0801c2de 	.word	0x0801c2de
 8019dcc:	00000000 	.word	0x00000000
 8019dd0:	08019b29 	.word	0x08019b29
 8019dd4:	0801c2da 	.word	0x0801c2da

08019dd8 <_printf_common>:
 8019dd8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8019ddc:	4616      	mov	r6, r2
 8019dde:	4698      	mov	r8, r3
 8019de0:	688a      	ldr	r2, [r1, #8]
 8019de2:	690b      	ldr	r3, [r1, #16]
 8019de4:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8019de8:	4293      	cmp	r3, r2
 8019dea:	bfb8      	it	lt
 8019dec:	4613      	movlt	r3, r2
 8019dee:	6033      	str	r3, [r6, #0]
 8019df0:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8019df4:	4607      	mov	r7, r0
 8019df6:	460c      	mov	r4, r1
 8019df8:	b10a      	cbz	r2, 8019dfe <_printf_common+0x26>
 8019dfa:	3301      	adds	r3, #1
 8019dfc:	6033      	str	r3, [r6, #0]
 8019dfe:	6823      	ldr	r3, [r4, #0]
 8019e00:	0699      	lsls	r1, r3, #26
 8019e02:	bf42      	ittt	mi
 8019e04:	6833      	ldrmi	r3, [r6, #0]
 8019e06:	3302      	addmi	r3, #2
 8019e08:	6033      	strmi	r3, [r6, #0]
 8019e0a:	6825      	ldr	r5, [r4, #0]
 8019e0c:	f015 0506 	ands.w	r5, r5, #6
 8019e10:	d106      	bne.n	8019e20 <_printf_common+0x48>
 8019e12:	f104 0a19 	add.w	sl, r4, #25
 8019e16:	68e3      	ldr	r3, [r4, #12]
 8019e18:	6832      	ldr	r2, [r6, #0]
 8019e1a:	1a9b      	subs	r3, r3, r2
 8019e1c:	42ab      	cmp	r3, r5
 8019e1e:	dc26      	bgt.n	8019e6e <_printf_common+0x96>
 8019e20:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8019e24:	6822      	ldr	r2, [r4, #0]
 8019e26:	3b00      	subs	r3, #0
 8019e28:	bf18      	it	ne
 8019e2a:	2301      	movne	r3, #1
 8019e2c:	0692      	lsls	r2, r2, #26
 8019e2e:	d42b      	bmi.n	8019e88 <_printf_common+0xb0>
 8019e30:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8019e34:	4641      	mov	r1, r8
 8019e36:	4638      	mov	r0, r7
 8019e38:	47c8      	blx	r9
 8019e3a:	3001      	adds	r0, #1
 8019e3c:	d01e      	beq.n	8019e7c <_printf_common+0xa4>
 8019e3e:	6823      	ldr	r3, [r4, #0]
 8019e40:	6922      	ldr	r2, [r4, #16]
 8019e42:	f003 0306 	and.w	r3, r3, #6
 8019e46:	2b04      	cmp	r3, #4
 8019e48:	bf02      	ittt	eq
 8019e4a:	68e5      	ldreq	r5, [r4, #12]
 8019e4c:	6833      	ldreq	r3, [r6, #0]
 8019e4e:	1aed      	subeq	r5, r5, r3
 8019e50:	68a3      	ldr	r3, [r4, #8]
 8019e52:	bf0c      	ite	eq
 8019e54:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8019e58:	2500      	movne	r5, #0
 8019e5a:	4293      	cmp	r3, r2
 8019e5c:	bfc4      	itt	gt
 8019e5e:	1a9b      	subgt	r3, r3, r2
 8019e60:	18ed      	addgt	r5, r5, r3
 8019e62:	2600      	movs	r6, #0
 8019e64:	341a      	adds	r4, #26
 8019e66:	42b5      	cmp	r5, r6
 8019e68:	d11a      	bne.n	8019ea0 <_printf_common+0xc8>
 8019e6a:	2000      	movs	r0, #0
 8019e6c:	e008      	b.n	8019e80 <_printf_common+0xa8>
 8019e6e:	2301      	movs	r3, #1
 8019e70:	4652      	mov	r2, sl
 8019e72:	4641      	mov	r1, r8
 8019e74:	4638      	mov	r0, r7
 8019e76:	47c8      	blx	r9
 8019e78:	3001      	adds	r0, #1
 8019e7a:	d103      	bne.n	8019e84 <_printf_common+0xac>
 8019e7c:	f04f 30ff 	mov.w	r0, #4294967295
 8019e80:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8019e84:	3501      	adds	r5, #1
 8019e86:	e7c6      	b.n	8019e16 <_printf_common+0x3e>
 8019e88:	18e1      	adds	r1, r4, r3
 8019e8a:	1c5a      	adds	r2, r3, #1
 8019e8c:	2030      	movs	r0, #48	@ 0x30
 8019e8e:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 8019e92:	4422      	add	r2, r4
 8019e94:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8019e98:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8019e9c:	3302      	adds	r3, #2
 8019e9e:	e7c7      	b.n	8019e30 <_printf_common+0x58>
 8019ea0:	2301      	movs	r3, #1
 8019ea2:	4622      	mov	r2, r4
 8019ea4:	4641      	mov	r1, r8
 8019ea6:	4638      	mov	r0, r7
 8019ea8:	47c8      	blx	r9
 8019eaa:	3001      	adds	r0, #1
 8019eac:	d0e6      	beq.n	8019e7c <_printf_common+0xa4>
 8019eae:	3601      	adds	r6, #1
 8019eb0:	e7d9      	b.n	8019e66 <_printf_common+0x8e>
	...

08019eb4 <_printf_i>:
 8019eb4:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8019eb8:	7e0f      	ldrb	r7, [r1, #24]
 8019eba:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8019ebc:	2f78      	cmp	r7, #120	@ 0x78
 8019ebe:	4691      	mov	r9, r2
 8019ec0:	4680      	mov	r8, r0
 8019ec2:	460c      	mov	r4, r1
 8019ec4:	469a      	mov	sl, r3
 8019ec6:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 8019eca:	d807      	bhi.n	8019edc <_printf_i+0x28>
 8019ecc:	2f62      	cmp	r7, #98	@ 0x62
 8019ece:	d80a      	bhi.n	8019ee6 <_printf_i+0x32>
 8019ed0:	2f00      	cmp	r7, #0
 8019ed2:	f000 80d2 	beq.w	801a07a <_printf_i+0x1c6>
 8019ed6:	2f58      	cmp	r7, #88	@ 0x58
 8019ed8:	f000 80b9 	beq.w	801a04e <_printf_i+0x19a>
 8019edc:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8019ee0:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8019ee4:	e03a      	b.n	8019f5c <_printf_i+0xa8>
 8019ee6:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 8019eea:	2b15      	cmp	r3, #21
 8019eec:	d8f6      	bhi.n	8019edc <_printf_i+0x28>
 8019eee:	a101      	add	r1, pc, #4	@ (adr r1, 8019ef4 <_printf_i+0x40>)
 8019ef0:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8019ef4:	08019f4d 	.word	0x08019f4d
 8019ef8:	08019f61 	.word	0x08019f61
 8019efc:	08019edd 	.word	0x08019edd
 8019f00:	08019edd 	.word	0x08019edd
 8019f04:	08019edd 	.word	0x08019edd
 8019f08:	08019edd 	.word	0x08019edd
 8019f0c:	08019f61 	.word	0x08019f61
 8019f10:	08019edd 	.word	0x08019edd
 8019f14:	08019edd 	.word	0x08019edd
 8019f18:	08019edd 	.word	0x08019edd
 8019f1c:	08019edd 	.word	0x08019edd
 8019f20:	0801a061 	.word	0x0801a061
 8019f24:	08019f8b 	.word	0x08019f8b
 8019f28:	0801a01b 	.word	0x0801a01b
 8019f2c:	08019edd 	.word	0x08019edd
 8019f30:	08019edd 	.word	0x08019edd
 8019f34:	0801a083 	.word	0x0801a083
 8019f38:	08019edd 	.word	0x08019edd
 8019f3c:	08019f8b 	.word	0x08019f8b
 8019f40:	08019edd 	.word	0x08019edd
 8019f44:	08019edd 	.word	0x08019edd
 8019f48:	0801a023 	.word	0x0801a023
 8019f4c:	6833      	ldr	r3, [r6, #0]
 8019f4e:	1d1a      	adds	r2, r3, #4
 8019f50:	681b      	ldr	r3, [r3, #0]
 8019f52:	6032      	str	r2, [r6, #0]
 8019f54:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8019f58:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8019f5c:	2301      	movs	r3, #1
 8019f5e:	e09d      	b.n	801a09c <_printf_i+0x1e8>
 8019f60:	6833      	ldr	r3, [r6, #0]
 8019f62:	6820      	ldr	r0, [r4, #0]
 8019f64:	1d19      	adds	r1, r3, #4
 8019f66:	6031      	str	r1, [r6, #0]
 8019f68:	0606      	lsls	r6, r0, #24
 8019f6a:	d501      	bpl.n	8019f70 <_printf_i+0xbc>
 8019f6c:	681d      	ldr	r5, [r3, #0]
 8019f6e:	e003      	b.n	8019f78 <_printf_i+0xc4>
 8019f70:	0645      	lsls	r5, r0, #25
 8019f72:	d5fb      	bpl.n	8019f6c <_printf_i+0xb8>
 8019f74:	f9b3 5000 	ldrsh.w	r5, [r3]
 8019f78:	2d00      	cmp	r5, #0
 8019f7a:	da03      	bge.n	8019f84 <_printf_i+0xd0>
 8019f7c:	232d      	movs	r3, #45	@ 0x2d
 8019f7e:	426d      	negs	r5, r5
 8019f80:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8019f84:	4859      	ldr	r0, [pc, #356]	@ (801a0ec <_printf_i+0x238>)
 8019f86:	230a      	movs	r3, #10
 8019f88:	e011      	b.n	8019fae <_printf_i+0xfa>
 8019f8a:	6821      	ldr	r1, [r4, #0]
 8019f8c:	6833      	ldr	r3, [r6, #0]
 8019f8e:	0608      	lsls	r0, r1, #24
 8019f90:	f853 5b04 	ldr.w	r5, [r3], #4
 8019f94:	d402      	bmi.n	8019f9c <_printf_i+0xe8>
 8019f96:	0649      	lsls	r1, r1, #25
 8019f98:	bf48      	it	mi
 8019f9a:	b2ad      	uxthmi	r5, r5
 8019f9c:	2f6f      	cmp	r7, #111	@ 0x6f
 8019f9e:	4853      	ldr	r0, [pc, #332]	@ (801a0ec <_printf_i+0x238>)
 8019fa0:	6033      	str	r3, [r6, #0]
 8019fa2:	bf14      	ite	ne
 8019fa4:	230a      	movne	r3, #10
 8019fa6:	2308      	moveq	r3, #8
 8019fa8:	2100      	movs	r1, #0
 8019faa:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 8019fae:	6866      	ldr	r6, [r4, #4]
 8019fb0:	60a6      	str	r6, [r4, #8]
 8019fb2:	2e00      	cmp	r6, #0
 8019fb4:	bfa2      	ittt	ge
 8019fb6:	6821      	ldrge	r1, [r4, #0]
 8019fb8:	f021 0104 	bicge.w	r1, r1, #4
 8019fbc:	6021      	strge	r1, [r4, #0]
 8019fbe:	b90d      	cbnz	r5, 8019fc4 <_printf_i+0x110>
 8019fc0:	2e00      	cmp	r6, #0
 8019fc2:	d04b      	beq.n	801a05c <_printf_i+0x1a8>
 8019fc4:	4616      	mov	r6, r2
 8019fc6:	fbb5 f1f3 	udiv	r1, r5, r3
 8019fca:	fb03 5711 	mls	r7, r3, r1, r5
 8019fce:	5dc7      	ldrb	r7, [r0, r7]
 8019fd0:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8019fd4:	462f      	mov	r7, r5
 8019fd6:	42bb      	cmp	r3, r7
 8019fd8:	460d      	mov	r5, r1
 8019fda:	d9f4      	bls.n	8019fc6 <_printf_i+0x112>
 8019fdc:	2b08      	cmp	r3, #8
 8019fde:	d10b      	bne.n	8019ff8 <_printf_i+0x144>
 8019fe0:	6823      	ldr	r3, [r4, #0]
 8019fe2:	07df      	lsls	r7, r3, #31
 8019fe4:	d508      	bpl.n	8019ff8 <_printf_i+0x144>
 8019fe6:	6923      	ldr	r3, [r4, #16]
 8019fe8:	6861      	ldr	r1, [r4, #4]
 8019fea:	4299      	cmp	r1, r3
 8019fec:	bfde      	ittt	le
 8019fee:	2330      	movle	r3, #48	@ 0x30
 8019ff0:	f806 3c01 	strble.w	r3, [r6, #-1]
 8019ff4:	f106 36ff 	addle.w	r6, r6, #4294967295
 8019ff8:	1b92      	subs	r2, r2, r6
 8019ffa:	6122      	str	r2, [r4, #16]
 8019ffc:	f8cd a000 	str.w	sl, [sp]
 801a000:	464b      	mov	r3, r9
 801a002:	aa03      	add	r2, sp, #12
 801a004:	4621      	mov	r1, r4
 801a006:	4640      	mov	r0, r8
 801a008:	f7ff fee6 	bl	8019dd8 <_printf_common>
 801a00c:	3001      	adds	r0, #1
 801a00e:	d14a      	bne.n	801a0a6 <_printf_i+0x1f2>
 801a010:	f04f 30ff 	mov.w	r0, #4294967295
 801a014:	b004      	add	sp, #16
 801a016:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801a01a:	6823      	ldr	r3, [r4, #0]
 801a01c:	f043 0320 	orr.w	r3, r3, #32
 801a020:	6023      	str	r3, [r4, #0]
 801a022:	4833      	ldr	r0, [pc, #204]	@ (801a0f0 <_printf_i+0x23c>)
 801a024:	2778      	movs	r7, #120	@ 0x78
 801a026:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 801a02a:	6823      	ldr	r3, [r4, #0]
 801a02c:	6831      	ldr	r1, [r6, #0]
 801a02e:	061f      	lsls	r7, r3, #24
 801a030:	f851 5b04 	ldr.w	r5, [r1], #4
 801a034:	d402      	bmi.n	801a03c <_printf_i+0x188>
 801a036:	065f      	lsls	r7, r3, #25
 801a038:	bf48      	it	mi
 801a03a:	b2ad      	uxthmi	r5, r5
 801a03c:	6031      	str	r1, [r6, #0]
 801a03e:	07d9      	lsls	r1, r3, #31
 801a040:	bf44      	itt	mi
 801a042:	f043 0320 	orrmi.w	r3, r3, #32
 801a046:	6023      	strmi	r3, [r4, #0]
 801a048:	b11d      	cbz	r5, 801a052 <_printf_i+0x19e>
 801a04a:	2310      	movs	r3, #16
 801a04c:	e7ac      	b.n	8019fa8 <_printf_i+0xf4>
 801a04e:	4827      	ldr	r0, [pc, #156]	@ (801a0ec <_printf_i+0x238>)
 801a050:	e7e9      	b.n	801a026 <_printf_i+0x172>
 801a052:	6823      	ldr	r3, [r4, #0]
 801a054:	f023 0320 	bic.w	r3, r3, #32
 801a058:	6023      	str	r3, [r4, #0]
 801a05a:	e7f6      	b.n	801a04a <_printf_i+0x196>
 801a05c:	4616      	mov	r6, r2
 801a05e:	e7bd      	b.n	8019fdc <_printf_i+0x128>
 801a060:	6833      	ldr	r3, [r6, #0]
 801a062:	6825      	ldr	r5, [r4, #0]
 801a064:	6961      	ldr	r1, [r4, #20]
 801a066:	1d18      	adds	r0, r3, #4
 801a068:	6030      	str	r0, [r6, #0]
 801a06a:	062e      	lsls	r6, r5, #24
 801a06c:	681b      	ldr	r3, [r3, #0]
 801a06e:	d501      	bpl.n	801a074 <_printf_i+0x1c0>
 801a070:	6019      	str	r1, [r3, #0]
 801a072:	e002      	b.n	801a07a <_printf_i+0x1c6>
 801a074:	0668      	lsls	r0, r5, #25
 801a076:	d5fb      	bpl.n	801a070 <_printf_i+0x1bc>
 801a078:	8019      	strh	r1, [r3, #0]
 801a07a:	2300      	movs	r3, #0
 801a07c:	6123      	str	r3, [r4, #16]
 801a07e:	4616      	mov	r6, r2
 801a080:	e7bc      	b.n	8019ffc <_printf_i+0x148>
 801a082:	6833      	ldr	r3, [r6, #0]
 801a084:	1d1a      	adds	r2, r3, #4
 801a086:	6032      	str	r2, [r6, #0]
 801a088:	681e      	ldr	r6, [r3, #0]
 801a08a:	6862      	ldr	r2, [r4, #4]
 801a08c:	2100      	movs	r1, #0
 801a08e:	4630      	mov	r0, r6
 801a090:	f7e6 f8a6 	bl	80001e0 <memchr>
 801a094:	b108      	cbz	r0, 801a09a <_printf_i+0x1e6>
 801a096:	1b80      	subs	r0, r0, r6
 801a098:	6060      	str	r0, [r4, #4]
 801a09a:	6863      	ldr	r3, [r4, #4]
 801a09c:	6123      	str	r3, [r4, #16]
 801a09e:	2300      	movs	r3, #0
 801a0a0:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 801a0a4:	e7aa      	b.n	8019ffc <_printf_i+0x148>
 801a0a6:	6923      	ldr	r3, [r4, #16]
 801a0a8:	4632      	mov	r2, r6
 801a0aa:	4649      	mov	r1, r9
 801a0ac:	4640      	mov	r0, r8
 801a0ae:	47d0      	blx	sl
 801a0b0:	3001      	adds	r0, #1
 801a0b2:	d0ad      	beq.n	801a010 <_printf_i+0x15c>
 801a0b4:	6823      	ldr	r3, [r4, #0]
 801a0b6:	079b      	lsls	r3, r3, #30
 801a0b8:	d413      	bmi.n	801a0e2 <_printf_i+0x22e>
 801a0ba:	68e0      	ldr	r0, [r4, #12]
 801a0bc:	9b03      	ldr	r3, [sp, #12]
 801a0be:	4298      	cmp	r0, r3
 801a0c0:	bfb8      	it	lt
 801a0c2:	4618      	movlt	r0, r3
 801a0c4:	e7a6      	b.n	801a014 <_printf_i+0x160>
 801a0c6:	2301      	movs	r3, #1
 801a0c8:	4632      	mov	r2, r6
 801a0ca:	4649      	mov	r1, r9
 801a0cc:	4640      	mov	r0, r8
 801a0ce:	47d0      	blx	sl
 801a0d0:	3001      	adds	r0, #1
 801a0d2:	d09d      	beq.n	801a010 <_printf_i+0x15c>
 801a0d4:	3501      	adds	r5, #1
 801a0d6:	68e3      	ldr	r3, [r4, #12]
 801a0d8:	9903      	ldr	r1, [sp, #12]
 801a0da:	1a5b      	subs	r3, r3, r1
 801a0dc:	42ab      	cmp	r3, r5
 801a0de:	dcf2      	bgt.n	801a0c6 <_printf_i+0x212>
 801a0e0:	e7eb      	b.n	801a0ba <_printf_i+0x206>
 801a0e2:	2500      	movs	r5, #0
 801a0e4:	f104 0619 	add.w	r6, r4, #25
 801a0e8:	e7f5      	b.n	801a0d6 <_printf_i+0x222>
 801a0ea:	bf00      	nop
 801a0ec:	0801c2e5 	.word	0x0801c2e5
 801a0f0:	0801c2f6 	.word	0x0801c2f6

0801a0f4 <memmove>:
 801a0f4:	4288      	cmp	r0, r1
 801a0f6:	b510      	push	{r4, lr}
 801a0f8:	eb01 0402 	add.w	r4, r1, r2
 801a0fc:	d902      	bls.n	801a104 <memmove+0x10>
 801a0fe:	4284      	cmp	r4, r0
 801a100:	4623      	mov	r3, r4
 801a102:	d807      	bhi.n	801a114 <memmove+0x20>
 801a104:	1e43      	subs	r3, r0, #1
 801a106:	42a1      	cmp	r1, r4
 801a108:	d008      	beq.n	801a11c <memmove+0x28>
 801a10a:	f811 2b01 	ldrb.w	r2, [r1], #1
 801a10e:	f803 2f01 	strb.w	r2, [r3, #1]!
 801a112:	e7f8      	b.n	801a106 <memmove+0x12>
 801a114:	4402      	add	r2, r0
 801a116:	4601      	mov	r1, r0
 801a118:	428a      	cmp	r2, r1
 801a11a:	d100      	bne.n	801a11e <memmove+0x2a>
 801a11c:	bd10      	pop	{r4, pc}
 801a11e:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 801a122:	f802 4d01 	strb.w	r4, [r2, #-1]!
 801a126:	e7f7      	b.n	801a118 <memmove+0x24>

0801a128 <_realloc_r>:
 801a128:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801a12c:	4680      	mov	r8, r0
 801a12e:	4615      	mov	r5, r2
 801a130:	460c      	mov	r4, r1
 801a132:	b921      	cbnz	r1, 801a13e <_realloc_r+0x16>
 801a134:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 801a138:	4611      	mov	r1, r2
 801a13a:	f7ff bbad 	b.w	8019898 <_malloc_r>
 801a13e:	b92a      	cbnz	r2, 801a14c <_realloc_r+0x24>
 801a140:	f7ff fca8 	bl	8019a94 <_free_r>
 801a144:	2400      	movs	r4, #0
 801a146:	4620      	mov	r0, r4
 801a148:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801a14c:	f000 f81a 	bl	801a184 <_malloc_usable_size_r>
 801a150:	4285      	cmp	r5, r0
 801a152:	4606      	mov	r6, r0
 801a154:	d802      	bhi.n	801a15c <_realloc_r+0x34>
 801a156:	ebb5 0f50 	cmp.w	r5, r0, lsr #1
 801a15a:	d8f4      	bhi.n	801a146 <_realloc_r+0x1e>
 801a15c:	4629      	mov	r1, r5
 801a15e:	4640      	mov	r0, r8
 801a160:	f7ff fb9a 	bl	8019898 <_malloc_r>
 801a164:	4607      	mov	r7, r0
 801a166:	2800      	cmp	r0, #0
 801a168:	d0ec      	beq.n	801a144 <_realloc_r+0x1c>
 801a16a:	42b5      	cmp	r5, r6
 801a16c:	462a      	mov	r2, r5
 801a16e:	4621      	mov	r1, r4
 801a170:	bf28      	it	cs
 801a172:	4632      	movcs	r2, r6
 801a174:	f7ff fc80 	bl	8019a78 <memcpy>
 801a178:	4621      	mov	r1, r4
 801a17a:	4640      	mov	r0, r8
 801a17c:	f7ff fc8a 	bl	8019a94 <_free_r>
 801a180:	463c      	mov	r4, r7
 801a182:	e7e0      	b.n	801a146 <_realloc_r+0x1e>

0801a184 <_malloc_usable_size_r>:
 801a184:	f851 3c04 	ldr.w	r3, [r1, #-4]
 801a188:	1f18      	subs	r0, r3, #4
 801a18a:	2b00      	cmp	r3, #0
 801a18c:	bfbc      	itt	lt
 801a18e:	580b      	ldrlt	r3, [r1, r0]
 801a190:	18c0      	addlt	r0, r0, r3
 801a192:	4770      	bx	lr

0801a194 <_init>:
 801a194:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801a196:	bf00      	nop
 801a198:	bcf8      	pop	{r3, r4, r5, r6, r7}
 801a19a:	bc08      	pop	{r3}
 801a19c:	469e      	mov	lr, r3
 801a19e:	4770      	bx	lr

0801a1a0 <_fini>:
 801a1a0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801a1a2:	bf00      	nop
 801a1a4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 801a1a6:	bc08      	pop	{r3}
 801a1a8:	469e      	mov	lr, r3
 801a1aa:	4770      	bx	lr
